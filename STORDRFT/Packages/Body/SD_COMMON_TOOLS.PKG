create or replace PACKAGE body SD_COMMON_TOOLS
/**************************************************************** 
This package will have store drafts specific tools

created : 07/23/2014 jxc517 CCN Project....
changed :
*****************************************************************/
AS

FUNCTION GET_HEX_VALUE_FOR_TRNSCTN_TYP
/******************************************************************
This function will return the hexadecimal conversion of the value passed in
based on the transaction type passed in

created : 11/10/2014 jxc517 CCN Project....
changed :
******************************************************************/
(IN_TRANSACTION_TYPE IN   VARCHAR2
,IN_AMOUNT           IN   NUMBER) RETURN VARCHAR2
IS
    V_RETURN_VALUE       VARCHAR2(100) := TO_CHAR(IN_AMOUNT); 
    V_INTERMEDIATE_VALUE VARCHAR2(100);
    V_LAST_CHARACTER     VARCHAR2(1);
BEGIN
IF IN_TRANSACTION_TYPE IN ('10','15') THEN
    V_LAST_CHARACTER     := SUBSTR(TO_CHAR(IN_AMOUNT),-1);
    V_INTERMEDIATE_VALUE := SUBSTR(TO_CHAR(ABS(IN_AMOUNT)),1,LENGTH(TO_CHAR(ABS(IN_AMOUNT)))-1);
    IF IN_AMOUNT < 0 THEN
        CASE 
            WHEN V_LAST_CHARACTER = '0' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'}';
            WHEN V_LAST_CHARACTER = '1' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'J';
            WHEN V_LAST_CHARACTER = '2' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'K';
            WHEN V_LAST_CHARACTER = '3' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'L';
            WHEN V_LAST_CHARACTER = '4' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'M';
            WHEN V_LAST_CHARACTER = '5' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'N';
            WHEN V_LAST_CHARACTER = '6' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'O';
            WHEN V_LAST_CHARACTER = '7' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'P';
            WHEN V_LAST_CHARACTER = '8' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'Q';
            WHEN V_LAST_CHARACTER = '9' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'R';
            ELSE
                NULL;
        END CASE;
    ELSE
        CASE 
            WHEN V_LAST_CHARACTER = '0' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'{';
            WHEN V_LAST_CHARACTER = '1' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'A';
            WHEN V_LAST_CHARACTER = '2' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'B';
            WHEN V_LAST_CHARACTER = '3' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'C';
            WHEN V_LAST_CHARACTER = '4' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'D';
            WHEN V_LAST_CHARACTER = '5' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'E';
            WHEN V_LAST_CHARACTER = '6' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'F';
            WHEN V_LAST_CHARACTER = '7' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'G';
            WHEN V_LAST_CHARACTER = '8' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'H';
            WHEN V_LAST_CHARACTER = '9' THEN
                V_RETURN_VALUE := V_INTERMEDIATE_VALUE||'I';
            ELSE
                NULL;
        END CASE;
    END IF;
END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
         RETURN V_RETURN_VALUE; 
END GET_HEX_VALUE_FOR_TRNSCTN_TYP;

PROCEDURE GENERATE_SECOND_WEEKDAY
/******************************************************************
This procedure will return the run date for the monthly process which should be 
2nd business day

Created : 02/29/2016 nxk927 CCN Project....
Changed :
******************************************************************/
IS
  V_SECOND_WEEKDAY      DATE         := TRUNC(SYSDATE, 'MON');
  V_WORKING_DAY_COUNT   NUMBER       := 0;

  PATH        	        VARCHAR2(50) := 'STORDRFT_LOAD_FILES';
  FILENAME  	          VARCHAR2(50) := 'SECOND_WEEKDAY.TXT';
  OUTPUT_FILE 		      UTL_FILE.FILE_TYPE;
  V_OUT_CLOB            CLOB;
BEGIN
    --Loop through and increment the date by one day starting from 1st of that month
    LOOP
        --increment the working days count if it is NOT saturday and sunday
        IF TO_CHAR(V_SECOND_WEEKDAY, 'DY') NOT IN ('SAT', 'SUN') THEN
            V_WORKING_DAY_COUNT := V_WORKING_DAY_COUNT + 1;
        END IF;
        --Exit out the loop once we got the 2nd working day
        IF V_WORKING_DAY_COUNT = 2 THEN
           EXIT;
        ELSE
            V_SECOND_WEEKDAY := V_SECOND_WEEKDAY + 1;
        END IF;
    END LOOP;
    
    V_OUT_CLOB:= TO_CHAR(V_SECOND_WEEKDAY,'MM/DD/YYYY');
    IF V_OUT_CLOB <> EMPTY_CLOB() THEN
       OUTPUT_FILE := UTL_FILE.FOPEN (PATH,FILENAME,'W',32767); 
       UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
       UTL_FILE.FCLOSE(OUTPUT_FILE);
    END IF;
   
END GENERATE_SECOND_WEEKDAY;

PROCEDURE GENERATE_FIRST_WEEKDAY
/******************************************************************
This procedure will return the run date for the monthly process which should be
1st business day

Created : 09/05/2017 nxk927 CCN Project....
Changed :
******************************************************************/
IS
  V_FIRST_WEEKDAY       DATE         := TRUNC(SYSDATE, 'MON');
  V_WORKING_DAY_COUNT   NUMBER       := 0;

  PATH        	        VARCHAR2(50) := 'STORDRFT_LOAD_FILES';
  FILENAME  	          VARCHAR2(50) := 'FIRST_WEEKDAY.TXT';
  OUTPUT_FILE 		      UTL_FILE.FILE_TYPE;
  V_OUT_CLOB            CLOB;
BEGIN
    --Loop through and increment the date by one day starting from 1st of that month
    LOOP
        --increment the working days count if it is NOT saturday and sunday
        IF TO_CHAR(V_FIRST_WEEKDAY, 'DY') NOT IN ('SAT', 'SUN') THEN
            V_WORKING_DAY_COUNT := V_WORKING_DAY_COUNT + 1;
        END IF;
        --Exit out the loop once we got the 1st working day
        IF V_WORKING_DAY_COUNT = 1 THEN
           EXIT;
        ELSE
            V_FIRST_WEEKDAY := V_FIRST_WEEKDAY + 1;
        END IF;
    END LOOP;

    V_OUT_CLOB:= TO_CHAR(V_FIRST_WEEKDAY,'MM/DD/YYYY');
    IF V_OUT_CLOB <> EMPTY_CLOB() THEN
       OUTPUT_FILE := UTL_FILE.FOPEN (PATH,FILENAME,'W',32767);
       UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
       UTL_FILE.FCLOSE(OUTPUT_FILE);
    END IF;

END GENERATE_FIRST_WEEKDAY;

PROCEDURE GET_ADDRESS_RECORD(
/******************************************************************************
  This procedure gets the address details for the cost center passed in

Created :  08/22/2019 akj899 CCNSD-8 CCN Project Team....
Changed :
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_ADDRESS_RECORD        OUT    ADDRESS_VW%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_ADDRESS_RECORD
      FROM ADDRESS_VW
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND ADDRESS_TYPE = 'M'
       AND EXPIRATION_DATE IS NULL
       AND ROWNUM < 2;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_ADDRESS_RECORD;

PROCEDURE GET_PHONE_RECORD(
/******************************************************************************
  This procedure gets the phone details for the cost center passed in

Created : 08/22/2019 akj899 CCNSD-8 CCN Project Team....
Changed :
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_PHONE_RECORD             OUT CCN_PHONE_INFO_VW%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_PHONE_RECORD
      FROM CCN_PHONE_INFO_VW
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND ROWNUM < 2;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_PHONE_RECORD;

PROCEDURE GET_STORE_MANAGER_RECORD(
/******************************************************************************
  This procedure gets the Manager details for the cost center passed in

Created  : 08/22/2019 akj899 CCNSD-8 CCN Project Team....
Modified : 
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_MANAGER_RECORD        OUT EMPLOYEE_DETAILS%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_MANAGER_RECORD
      FROM EMPLOYEE_DETAILS G1
     WHERE UPPER(G1.JOB_TITLE) IN ('MGR', 'STORE MGR', 'BRANCH MGR')
       AND UPPER(G1.EMP_PAYROLL_STATUS) = UPPER('Active')
       AND G1.COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND G1.HIRE_DATE = (SELECT MIN(HIRE_DATE)
                                    FROM EMPLOYEE_DETAILS G2
                                   WHERE UPPER(G2.COST_CENTER_CODE) = UPPER(G1.COST_CENTER_CODE)
                                     AND UPPER(G2.JOB_TITLE) IN ('MGR', 'STORE MGR', 'BRANCH MGR')
                                     AND UPPER(G2.EMP_PAYROLL_STATUS) = UPPER('Active'));

EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_STORE_MANAGER_RECORD;

END SD_COMMON_TOOLS;