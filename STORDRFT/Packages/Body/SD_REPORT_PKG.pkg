create or replace 
PACKAGE  BODY SD_REPORT_PKG AS 
/*********************************************************** 
This package contains the core logic to load STORE_DRAFT_REPORTS  table

Created : 12/04/2014 jxc517 and nxk927 CCN Project Team.....
Modified: 
************************************************************/

PROCEDURE CCN_HIERARCHY_INFO
/**********************************************************
This procedure is for truncating the CCN_HIERARCHY_INFO  table
and pull the updated data from the HIERARCHY_DETAIL_VIEW

Created : 03/04/2014  nxk927 CCN Project Team.....
**********************************************************/
IS
    V_COUNT     INTEGER := 0 ;
    CURSOR ccn_hierarchy_info_cur IS
        SELECT * FROM HIERARCHY_DETAIL_VIEW;
BEGIN
    --Deleting the CCN_Hierarchy_info table before inserting any data
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_HIERARCHY_INFO';

    FOR CCN_HIERARCHY_INFO_REC IN ccn_hierarchy_info_cur LOOP
        BEGIN
            INSERT INTO CCN_HIERARCHY_INFO VALUES CCN_HIERARCHY_INFO_REC;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('FAILED CCN_HIERARCHY_INFO ' || ' ' || SQLCODE || ' ' || SQLERRM);
        END;
        IF V_COUNT > 100 THEN
            COMMIT; 
            V_COUNT := 0;
        END IF; 
        V_COUNT := V_COUNT + 1;
    END LOOP;
    COMMIT;
END CCN_HIERARCHY_INFO;

FUNCTION GET_RQSTD_ATTRIBUTE_VALUE(
/***********************************************************
This Procedure will get the requested attribute value for from
the passed UPPER_LVL_VER_DESC XML
      
NEVER DELETE THIS PROCEDURE AS "REPORT_HRCHY_EMP_DTLS_VW" VIEW USES THIS PROCEDURE
      
Created : 08/14/2014 nxk927 CCN Project.....
Modified: 12/04/2014 jxc517 CCN Project Team.....
          COmments were added as this is not used here in the package but used in view
************************************************************/
    IN_UPPER_LVL_VER_VALUE  IN     HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE,
    IN_ATTRIBUTE_NAME       IN     VARCHAR2) RETURN VARCHAR2
IS
    V_COUNT             NUMBER := 1;
    V_ATTRIBUTE_NAME    VARCHAR2(100);
    OUT_ATTRIBUTE_VALUE VARCHAR2(100);
BEGIN
    WHILE IN_UPPER_LVL_VER_VALUE.EXISTSNODE('//attributes/upper_lvl_ver_desc[' || V_COUNT || ']') = 1 LOOP
        V_ATTRIBUTE_NAME := UPPER(REPLACE(IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc' || '[' || V_COUNT || ']/Name/text()').GETSTRINGVAL(),' ','_'));
        IF V_ATTRIBUTE_NAME = UPPER(REPLACE(IN_ATTRIBUTE_NAME,' ','_'))
           AND (IN_UPPER_LVL_VER_VALUE.EXISTSNODE('/attributes/upper_lvl_ver_desc[' || V_COUNT || ']/Value/text()') = 1) THEN
            OUT_ATTRIBUTE_VALUE := IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc[' || V_COUNT || ']/Value/text()').GETSTRINGVAL();
        END IF;
        V_COUNT := V_COUNT + 1;
    END LOOP;
    RETURN OUT_ATTRIBUTE_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN OUT_ATTRIBUTE_VALUE;
END GET_RQSTD_ATTRIBUTE_VALUE;

FUNCTION CC_MANAGER(
/***********************************************************
This Function will get the requested manager name for the cost center
      
Created :  08/14/2014 nxk927 CCN Project.....
Modified:
************************************************************/
    IN_COST_CENTER_CODE EMPLOYEE_DETAILS.COST_CENTER_CODE%TYPE) RETURN VARCHAR2
IS 
    V_CC_MANAGER EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;
BEGIN 
    SELECT EMPLOYEE_NAME
      INTO V_CC_MANAGER
      FROM EMPLOYEE_DETAILS 
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND UPPER(EMP_PAYROLL_STATUS) = 'ACTIVE'
       AND  UPPER(JOB_TITLE) LIKE '%STORE MGR%';

    RETURN V_CC_MANAGER;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END CC_MANAGER;

FUNCTION GET_MANAGER_NAME(
/***********************************************************
This function contains the core logic to get the manager name
for the passed division/area/district combinations

Created : 12/04/2014 jxc517 CCN Project Team.....
Modified: 
************************************************************/
    IN_HRCHY_HDR_NAME  IN     HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE,
    IN_LEVEL_VALUE     IN     VARCHAR2) RETURN VARCHAR2
IS
    V_MANAGER_NAME VARCHAR2(100); -- EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;
BEGIN
    SELECT EMPLOYEE_NAME
      INTO V_MANAGER_NAME
      FROM REPORT_HRCHY_EMP_DTLS_VW
     WHERE HRCHY_HDR_NAME = IN_HRCHY_HDR_NAME
       AND LEVEL_VALUE    = IN_LEVEL_VALUE
       AND ROWNUM < 2;
    RETURN V_MANAGER_NAME;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_MANAGER_NAME;
END GET_MANAGER_NAME;

PROCEDURE GET_HIERARCHY_DETAILS(
/***********************************************************
This procedure contains the core logic to get the hierarchy information for passed cost center

Created : 12/04/2014 jxc517 CCN Project Team.....
Modified: 
************************************************************/
    IN_CC_CODE           IN     VARCHAR2,
    OUT_COST_CENTER_NAME    OUT VARCHAR2,
    OUT_COST_CENTER_MGR     OUT VARCHAR2,
    OUT_COST_CENTER_PHN     OUT VARCHAR2,
    OUT_AREA                OUT VARCHAR2,
    OUT_AREA_NAME           OUT VARCHAR2,
    OUT_AREA_MGR            OUT VARCHAR2,
    OUT_DISTRICT            OUT VARCHAR2,
    OUT_DISTRICT_NAME       OUT VARCHAR2,
    OUT_DISTRICT_MGR        OUT VARCHAR2,
    OUT_DIVISION            OUT VARCHAR2,
    OUT_DIVISION_NAME       OUT VARCHAR2,
    OUT_DIVISION_MGR        OUT VARCHAR2)
IS
BEGIN
    SELECT COST_CENTER_NAME,
           SD_REPORT_PKG.CC_MANAGER(CCNHI.COST_CENTER_CODE) COST_CENTER_MGR,
           (SELECT PRIMARY_PHONE_NUMBER
              FROM PHONE_NBR
             WHERE COST_CENTER_CODE = CCNHI.COST_CENTER_CODE
               AND ROWNUM < 2) PHONE_NUMBER,
           AREA,
           AREA_NAME,
           SD_REPORT_PKG.GET_MANAGER_NAME('ADMIN_TO_SALES_AREA', DIVISION||AREA) AREA_MGR,
           DISTRICT, 
           DISTRICT_NAME,
           SD_REPORT_PKG.GET_MANAGER_NAME('ADMIN_TO_SALES_DISTRICT', DIVISION||AREA||DISTRICT) DISTRICT_MGR,
           DIVISION,
           DIVISION_NAME,
           SD_REPORT_PKG.GET_MANAGER_NAME('ADMIN_TO_SALES_DIVISION', DIVISION) DIVISION_MGR
      INTO OUT_COST_CENTER_NAME,
           OUT_COST_CENTER_MGR,
           OUT_COST_CENTER_PHN,
           OUT_AREA,
           OUT_AREA_NAME,
           OUT_AREA_MGR,
           OUT_DISTRICT,
           OUT_DISTRICT_NAME,
           OUT_DISTRICT_MGR,
           OUT_DIVISION,
           OUT_DIVISION_NAME,
           OUT_DIVISION_MGR
      FROM CCN_HIERARCHY_INFO CCNHI
     WHERE COST_CENTER_CODE = IN_CC_CODE
       AND HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY';
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_HIERARCHY_DETAILS;

PROCEDURE SD_MATCHED_QUERY(
/**********************************************************
This is the core procedure that gets invoked for loading the matched draft data

Created : 12/04/2014 jxc517 CCN Project Team.....
Modified: 
**********************************************************/
    IN_END_DATE IN DATE,
    IN_PREV_REC IN STORE_DRAFT_REPORT%ROWTYPE)
IS
    CURSOR DRAFT_MATCHED_CUR(IN_COST_CENTER_CODE    IN VARCHAR2,
                             IN_TERMINAL_NUMBER     IN VARCHAR2,
                             IN_TRANSACTION_NUMBER  IN VARCHAR2) IS
              SELECT SD.PAYEE_NAME,
                     SD.TERMINAL_NUMBER, 
                     SD.TRANSACTION_NUMBER,
                     SD.TRANSACTION_DATE,
                     NVL(SDD.LBR_TERMINAL_NUMBER, SDD.TERMINAL_NUMBER) LBR_TERMINAL_NUMBER,
                     NVL(SDD.LBR_TRANSACTION_NUMBER, SDD.TRANSACTION_NUMBER) LBR_TRANSACTION_NUMBER,
                     NVL(SDD.LBR_TRANSACTION_DATE, SDD.TRANSACTION_DATE) LBR_TRANSACTION_DATE,
                     SUBSTR(SD.CHECK_SERIAL_NUMBER,6,5) AS DRAFT_NUMBER,
                     SDD.ITEM_EXT_AMOUNT AS DRAFT_AMOUNT,
                     SDD.ITEM_QUANTITY,
                     SD.CUSTOMER_ACCOUNT_NUMBER AS PAYEE_ACC_NUMBER
                FROM STORE_DRAFTS_DETAIL SDD,
                     STORE_DRAFTS SD
               WHERE SD.COST_CENTER_CODE     = IN_COST_CENTER_CODE
                 AND SD.CHECK_SERIAL_NUMBER  = SDD.CHECK_SERIAL_NUMBER
                 AND SD.COST_CENTER_CODE     = SDD.COST_CENTER_CODE
                 AND SD.TRANSACTION_DATE     = SDD.TRANSACTION_DATE
                 AND SDD.BOOK_DATE_SEQUENCE IS NULL
                 AND SD.ISSUE_DATE              < IN_END_DATE --'01-DEC-2014'
                 AND SDD.GL_SUB_ACCOUNT_NUMBER  = '120'
                 AND SD.POS_TRANSACTION_CODE    = '13'
                 --AND SD.STOP_INDICATOR          <> 'Y'
                 AND (SD.VOID_DATE IS NULL OR SD.VOID_DATE >= IN_END_DATE)
                 AND (SD.STOP_PAY_DATE IS NULL OR SD.STOP_PAY_DATE >= IN_END_DATE)
                 AND SDD.GL_PRIME_ACCOUNT_NUMBER || SDD.GL_SUB_ACCOUNT_NUMBER <> '7504101'
                 AND NVL(SDD.LBR_TERMINAL_NUMBER, SDD.TERMINAL_NUMBER)       = IN_TERMINAL_NUMBER
                 AND NVL(SDD.LBR_TRANSACTION_NUMBER, SDD.TRANSACTION_NUMBER) = IN_TRANSACTION_NUMBER;

    V_MATCHED       VARCHAR2(1) := 'Y';
    V_REC           STORE_DRAFT_REPORT%ROWTYPE := IN_PREV_REC;
BEGIN
    FOR matched_draft_rec IN DRAFT_MATCHED_CUR(V_REC.COST_CENTER_CODE,
                                               V_REC.TERMINAL_NUMBER,
                                               V_REC.TRANSACTION_NUMBER) LOOP
        --If matched, irrespective of any other conditions this should be populated
        V_REC.PL_DATE := ADD_MONTHS(IN_END_DATE, -1);
        IF V_MATCHED = 'Y' THEN
            UPDATE STORE_DRAFT_REPORT
               SET PL_DATE = V_REC.PL_DATE
             WHERE COST_CENTER_CODE   = V_REC.COST_CENTER_CODE
               AND TERMINAL_NUMBER    = V_REC.TERMINAL_NUMBER
               AND TRANSACTION_NUMBER = V_REC.TRANSACTION_NUMBER
               AND PL_DATE IS NULL;
            V_MATCHED := 'N';
        END IF;
        --Below fields will be over-written
        V_REC.TERMINAL_NUMBER        := matched_draft_rec.TERMINAL_NUMBER;
        V_REC.TRANSACTION_NUMBER     := matched_draft_rec.TRANSACTION_NUMBER;
        V_REC.TRANSACTION_DATE       := matched_draft_rec.TRANSACTION_DATE;
        V_REC.ITEM_QUANTITY          := matched_draft_rec.ITEM_QUANTITY;
        V_REC.LABOR_AMOUNT           := NULL;
        --Below fields are applicable only for drafts, not labor
        V_REC.PAYEE_NAME             := matched_draft_rec.PAYEE_NAME;
        V_REC.LBR_TERMINAL_NUMBER    := matched_draft_rec.LBR_TERMINAL_NUMBER;
        V_REC.LBR_TRANSACTION_NUMBER := matched_draft_rec.LBR_TRANSACTION_NUMBER;
        V_REC.LBR_TRANSACTION_DATE   := matched_draft_rec.LBR_TRANSACTION_DATE;
        V_REC.DRAFT_NUMBER           := matched_draft_rec.DRAFT_NUMBER;
        V_REC.DRAFT_AMOUNT           := matched_draft_rec.DRAFT_AMOUNT;
        V_REC.PAYEE_ACC_NUMBER       := matched_draft_rec.PAYEE_ACC_NUMBER;
        INSERT INTO STORE_DRAFT_REPORT VALUES V_REC;
    END LOOP;
    COMMIT;
END SD_MATCHED_QUERY;

PROCEDURE SD_UNMATCHED_QUERY(
/**********************************************************
This is the core procedure that gets invoked for loading the un-matched draft data

Created : 12/04/2014 jxc517 CCN Project Team.....
Modified: 
**********************************************************/
    IN_END_DATE     IN     DATE,
    IN_REC          IN     STORE_DRAFT_REPORT%ROWTYPE)
IS
    CURSOR DRAFT_UNMATCHED_CUR(IN_COST_CENTER_CODE    IN VARCHAR2) IS
              SELECT SD.PAYEE_NAME,
                     SD.TERMINAL_NUMBER, 
                     SD.TRANSACTION_NUMBER,
                     SD.TRANSACTION_DATE,
                     NVL(SDD.LBR_TERMINAL_NUMBER, SDD.TERMINAL_NUMBER) LBR_TERMINAL_NUMBER,
                     NVL(SDD.LBR_TRANSACTION_NUMBER, SDD.TRANSACTION_NUMBER) LBR_TRANSACTION_NUMBER,
                     NVL(SDD.LBR_TRANSACTION_DATE, SDD.TRANSACTION_DATE) LBR_TRANSACTION_DATE,
                     SUBSTR(SD.CHECK_SERIAL_NUMBER,6,5) AS DRAFT_NUMBER,
                     SDD.ITEM_EXT_AMOUNT AS DRAFT_AMOUNT,
                     SDD.ITEM_QUANTITY,
                     SD.CUSTOMER_ACCOUNT_NUMBER AS PAYEE_ACC_NUMBER
                FROM STORE_DRAFTS_DETAIL SDD,
                     STORE_DRAFTS SD
               WHERE SD.COST_CENTER_CODE     = IN_COST_CENTER_CODE
                 AND SD.CHECK_SERIAL_NUMBER  = SDD.CHECK_SERIAL_NUMBER
                 AND SD.COST_CENTER_CODE     = SDD.COST_CENTER_CODE
                 AND SD.TRANSACTION_DATE     = SDD.TRANSACTION_DATE
                 AND SDD.BOOK_DATE_SEQUENCE IS NULL
                 AND SD.ISSUE_DATE              < IN_END_DATE --'01-DEC-2014'
                 AND SDD.GL_SUB_ACCOUNT_NUMBER  = '120'
                 AND SD.POS_TRANSACTION_CODE    = '13'
                 --AND SD.STOP_INDICATOR          <> 'Y'
                 AND (SD.VOID_DATE IS NULL OR SD.VOID_DATE >= IN_END_DATE)
                 AND (SD.STOP_PAY_DATE IS NULL OR SD.STOP_PAY_DATE >= IN_END_DATE)
                 AND SDD.GL_PRIME_ACCOUNT_NUMBER || SDD.GL_SUB_ACCOUNT_NUMBER <> '7504101'
                 AND NOT EXISTS (SELECT 1
                                   FROM CUSTOMER_DETAILS CD,
                                        CUSTOMER C
                                  WHERE CD.TRANSACTION_DATE      < IN_END_DATE --'01-DEC-2014'
                                    AND CD.TERMINAL_NUMBER       = C.TERMINAL_NUMBER
                                    AND CD.TRANSACTION_NUMBER    = C.TRANSACTION_NUMBER
                                    AND CD.COST_CENTER_CODE      = C.COST_CENTER_CODE
                                    AND CD.TRANSACTION_DATE      = C.TRANSACTION_DATE
                                    AND C.BOOK_DATE_SEQUENCE IS NULL
                                    AND CD.GL_SUB_ACCOUNT_NUMBER  = '121'
                                    --AND C.POS_TRANSACTION_CODE IN ('10','11','19','22','31','41')
                                    AND CD.TERMINAL_NUMBER       IS NOT NULL
                                    AND CD.TRANSACTION_NUMBER    IS NOT NULL
                                    AND CD.COST_CENTER_CODE      = SD.COST_CENTER_CODE
                                    AND CD.TERMINAL_NUMBER       = NVL(SDD.LBR_TERMINAL_NUMBER, SDD.TERMINAL_NUMBER)
                                    AND CD.TRANSACTION_NUMBER    = NVL(SDD.LBR_TRANSACTION_NUMBER, SDD.TRANSACTION_NUMBER));

    V_REC STORE_DRAFT_REPORT%ROWTYPE := IN_REC;
BEGIN
    FOR matched_draft_rec IN DRAFT_UNMATCHED_CUR(V_REC.COST_CENTER_CODE) LOOP
        --If NOT matched, irrespective of any other conditions this should NOT be populated
        IF matched_draft_rec.TRANSACTION_DATE < ADD_MONTHS(IN_END_DATE, -1) THEN
            V_REC.PL_DATE := ADD_MONTHS(IN_END_DATE, -1);
        ELSE
            V_REC.PL_DATE := NULL;
        END IF;
        --Below fields will be over-written
        V_REC.CUSTOMER_ACCOUNT_NUMBER:= 'xxxxxxxxx';
        V_REC.PURCHASE_ORDER_NUMBER  := '***xNOxCUSTOMERxNAMEx***';
        V_REC.TERMINAL_NUMBER        := matched_draft_rec.TERMINAL_NUMBER;
        V_REC.TERMINAL_NUMBER        := matched_draft_rec.TERMINAL_NUMBER;
        V_REC.TRANSACTION_NUMBER     := matched_draft_rec.TRANSACTION_NUMBER;
        V_REC.TRANSACTION_DATE       := matched_draft_rec.TRANSACTION_DATE;
        V_REC.ITEM_QUANTITY          := matched_draft_rec.ITEM_QUANTITY;
        V_REC.LABOR_AMOUNT           := NULL;
        --Below fields are applicable only for drafts, not labor
        V_REC.PAYEE_NAME             := matched_draft_rec.PAYEE_NAME;
        V_REC.LBR_TERMINAL_NUMBER    := matched_draft_rec.LBR_TERMINAL_NUMBER;
        V_REC.LBR_TRANSACTION_NUMBER := matched_draft_rec.LBR_TRANSACTION_NUMBER;
        V_REC.LBR_TRANSACTION_DATE   := matched_draft_rec.LBR_TRANSACTION_DATE;
        V_REC.DRAFT_NUMBER           := matched_draft_rec.DRAFT_NUMBER;
        V_REC.DRAFT_AMOUNT           := matched_draft_rec.DRAFT_AMOUNT;
        V_REC.PAYEE_ACC_NUMBER       := matched_draft_rec.PAYEE_ACC_NUMBER;
        INSERT INTO STORE_DRAFT_REPORT VALUES V_REC;
         
    END LOOP;
    COMMIT;
END SD_UNMATCHED_QUERY;

PROCEDURE SD_UNMATCHED_WITH_BOOKED_LBRS(
/**********************************************************
This is the core procedure that gets invoked for updating the PL_DATE for old labor booked records

Created : 12/16/2014 jxc517 CCN Project Team.....
Modified: 
**********************************************************/
    IN_END_DATE     IN     DATE)
IS
BEGIN
    UPDATE STORE_DRAFT_REPORT SDR
       SET PL_DATE = ADD_MONTHS(IN_END_DATE, -1)
     WHERE CUSTOMER_ACCOUNT_NUMBER = 'xxxxxxxxx'
       AND PL_DATE IS NULL
       AND EXISTS(SELECT 1
                    FROM CUSTOMER_DETAILS CD,
                         CUSTOMER C
                   WHERE CD.TRANSACTION_DATE      < IN_END_DATE
                     AND CD.TERMINAL_NUMBER       = C.TERMINAL_NUMBER
                     AND CD.TRANSACTION_NUMBER    = C.TRANSACTION_NUMBER
                     AND CD.COST_CENTER_CODE      = C.COST_CENTER_CODE
                     AND CD.TRANSACTION_DATE      = C.TRANSACTION_DATE
                     AND C.BOOK_DATE_SEQUENCE IS NOT NULL
                     AND CD.GL_SUB_ACCOUNT_NUMBER  = '121'
                     --AND C.POS_TRANSACTION_CODE IN ('10','11','19','22','31','41')
                     AND CD.TERMINAL_NUMBER       IS NOT NULL
                     AND CD.TRANSACTION_NUMBER    IS NOT NULL
                     AND CD.COST_CENTER_CODE      = SDR.COST_CENTER_CODE
                     AND CD.TERMINAL_NUMBER       = SDR.LBR_TERMINAL_NUMBER
                     AND CD.TRANSACTION_NUMBER    = SDR.LBR_TRANSACTION_NUMBER);
    COMMIT;
END SD_UNMATCHED_WITH_BOOKED_LBRS;

PROCEDURE SD_UNBOOK_RCRDS_OUTSIDE_RANGE(
/**********************************************************
This is the core procedure that gets invoked for eliminating the
records with accumulated labor - accumulated draft per line item 
outside the given range of -500 and 500

Created : 01/05/2015 jxc517 CCN Project Team.....
Modified: 
**********************************************************/
    IN_END_DATE     IN     DATE)
IS
BEGIN
    FOR rec IN (SELECT COST_CENTER_CODE, PURCHASE_ORDER_NUMBER, LBR_TERMINAL_NUMBER, LBR_TRANSACTION_NUMBER,
                       ABS(SUM(NVL(LABOR_AMOUNT,0)) - SUM(NVL(DRAFT_AMOUNT,0))) AMT
                  FROM STORE_DRAFT_REPORT
                 WHERE PURCHASE_ORDER_NUMBER <> '***xNOxCUSTOMERxNAMEx***'
                   --AND TRANSACTION_DATE >= ADD_MONTHS(IN_END_DATE,-1)
                 GROUP BY COST_CENTER_CODE, PURCHASE_ORDER_NUMBER, LBR_TERMINAL_NUMBER, LBR_TRANSACTION_NUMBER
                HAVING ABS(SUM(NVL(LABOR_AMOUNT,0)) - SUM(NVL(DRAFT_AMOUNT,0))) > 500
                 ORDER BY COST_CENTER_CODE, PURCHASE_ORDER_NUMBER, LBR_TERMINAL_NUMBER, LBR_TRANSACTION_NUMBER) LOOP
        --Labor records update
        UPDATE STORE_DRAFT_REPORT SDR
           SET PL_DATE = NULL
         WHERE COST_CENTER_CODE       = rec.COST_CENTER_CODE
           AND LBR_TERMINAL_NUMBER    = rec.LBR_TERMINAL_NUMBER
           AND LBR_TRANSACTION_NUMBER = rec.LBR_TRANSACTION_NUMBER
           AND TRANSACTION_DATE       >= ADD_MONTHS(IN_END_DATE,-1)
           AND LABOR_AMOUNT IS NOT NULL
           AND PL_DATE IS NOT NULL;
        --Draft records update
        UPDATE STORE_DRAFT_REPORT SDR
           SET PL_DATE = NULL
         WHERE COST_CENTER_CODE       = rec.COST_CENTER_CODE
           AND LBR_TERMINAL_NUMBER    = rec.LBR_TERMINAL_NUMBER
           AND LBR_TRANSACTION_NUMBER = rec.LBR_TRANSACTION_NUMBER
           AND TRANSACTION_DATE       >= ADD_MONTHS(IN_END_DATE,-1)
           AND DRAFT_AMOUNT IS NOT NULL
           AND NOT EXISTS (SELECT 1
                             FROM STORE_DRAFT_REPORT
                            WHERE COST_CENTER_CODE       = rec.COST_CENTER_CODE
                              AND LBR_TERMINAL_NUMBER    = rec.LBR_TERMINAL_NUMBER
                              AND LBR_TRANSACTION_NUMBER = rec.LBR_TRANSACTION_NUMBER
                              AND TRANSACTION_DATE       < ADD_MONTHS(IN_END_DATE,-1)
                              AND LABOR_AMOUNT IS NOT NULL
                              AND PL_DATE IS NOT NULL)
           AND PL_DATE IS NOT NULL;
    END LOOP;
    COMMIT;
END SD_UNBOOK_RCRDS_OUTSIDE_RANGE;

PROCEDURE UPDATE_BOOK_DATE_SEQUENCE(
/**********************************************************
This procedure is for updating the BOOK_DATE_SEQUENCE in below tables
STORE_DRAFTS, STORE_DRAFTS_DETAIL, CUSTOMER

Created : 12/18/2014  jxc517 CCN Project Team.....
Modified:
**********************************************************/
    IN_END_DATE IN DATE)
IS
    V_BOOK_DATE_SEQUENCE VARCHAR2(5) := TO_CHAR(ADD_MONTHS(IN_END_DATE,-1),'YYMM')||'0';
BEGIN
    --Reset the BOOK_DATE_SEQUENCE before run (if any), to provide support for reruns
    UPDATE CUSTOMER
       SET BOOK_DATE_SEQUENCE = NULL
     WHERE BOOK_DATE_SEQUENCE = V_BOOK_DATE_SEQUENCE;
    UPDATE STORE_DRAFTS
       SET BOOK_DATE_SEQUENCE = NULL
     WHERE BOOK_DATE_SEQUENCE = V_BOOK_DATE_SEQUENCE;
    UPDATE STORE_DRAFTS_DETAIL
       SET BOOK_DATE_SEQUENCE = NULL
     WHERE BOOK_DATE_SEQUENCE = V_BOOK_DATE_SEQUENCE;

    FOR rec IN (SELECT * FROM STORE_DRAFT_REPORT WHERE PL_DATE IS NOT NULL) LOOP
        IF rec.DRAFT_AMOUNT IS NULL THEN --Labor record
            UPDATE CUSTOMER
               SET BOOK_DATE_SEQUENCE = V_BOOK_DATE_SEQUENCE
             WHERE COST_CENTER_CODE   = rec.COST_CENTER_CODE
               AND TERMINAL_NUMBER    = rec.TERMINAL_NUMBER
               AND TRANSACTION_NUMBER = rec.TRANSACTION_NUMBER
               AND TRANSACTION_DATE   = rec.TRANSACTION_DATE
               AND BOOK_DATE_SEQUENCE IS NULL;
        ELSE --Draft record
            UPDATE STORE_DRAFTS
               SET BOOK_DATE_SEQUENCE  = V_BOOK_DATE_SEQUENCE
             WHERE COST_CENTER_CODE    = rec.COST_CENTER_CODE
               AND CHECK_SERIAL_NUMBER = '0'||substr(rec.COST_CENTER_CODE,3)||rec.DRAFT_NUMBER
               AND TRANSACTION_DATE    = rec.TRANSACTION_DATE
               AND BOOK_DATE_SEQUENCE IS NULL;
            UPDATE STORE_DRAFTS_DETAIL
               SET BOOK_DATE_SEQUENCE  = V_BOOK_DATE_SEQUENCE
             WHERE COST_CENTER_CODE                                = rec.COST_CENTER_CODE
               AND CHECK_SERIAL_NUMBER                             = '0'||substr(rec.COST_CENTER_CODE,3)||rec.DRAFT_NUMBER
               AND TRANSACTION_DATE                                = rec.TRANSACTION_DATE
               AND NVL(LBR_TERMINAL_NUMBER, TERMINAL_NUMBER)       = rec.LBR_TERMINAL_NUMBER
               AND NVL(LBR_TRANSACTION_NUMBER, TRANSACTION_NUMBER) = rec.LBR_TRANSACTION_NUMBER
               AND NVL(LBR_TRANSACTION_DATE, TRANSACTION_DATE)     = rec.LBR_TRANSACTION_DATE
               AND BOOK_DATE_SEQUENCE IS NULL;
        END IF;
    END LOOP;
END UPDATE_BOOK_DATE_SEQUENCE;

PROCEDURE PERFORM_BACKUP_PROCESS(
/**********************************************************
This procedure is for backingup the current table into history table

Created : 12/18/2014  jxc517 CCN Project Team.....
Modified:
**********************************************************/
    IN_END_DATE IN DATE)
IS
    V_RUN_NBR NUMBER := 0;
BEGIN
    --insert the current records from STORE_DRAFT_REPORT in to HST_STORE_DRAFT_REPORT
    BEGIN
        SELECT MAX(RUN_NBR)
          INTO V_RUN_NBR
          FROM HST_STORE_DRAFT_REPORT
         WHERE CLOSE_DATE = ADD_MONTHS(IN_END_DATE,-1);
    EXCEPTION
        WHEN OTHERS THEN
            V_RUN_NBR := NULL;
    END;
    INSERT INTO HST_STORE_DRAFT_REPORT
        SELECT SDR.*, ADD_MONTHS(IN_END_DATE,-1), NVL(V_RUN_NBR,0) + 1 FROM STORE_DRAFT_REPORT SDR;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END PERFORM_BACKUP_PROCESS;

PROCEDURE SD_REPORT_QUERY(
/**********************************************************
This is the core procedure that gets invoked for loading the data

Created : 12/04/2014 jxc517 CCN Project Team.....
Modified: 
**********************************************************/
    IN_END_DATE IN DATE)
IS
    CURSOR COST_CENTER_CUR IS
        SELECT COST_CENTER_CODE
          FROM COST_CENTER
         WHERE COST_CENTER_CODE IN (SELECT DISTINCT COST_CENTER_CODE
                                      FROM STORE_DRAFTS
                                     UNION
                                    SELECT DISTINCT COST_CENTER_CODE
                                      FROM CUSTOMER)
           --eliminate automotive stores
           AND STATEMENT_TYPE NOT IN ('AU','AC')
           --eliminate point of sales stores used for large spray installations, unique to PF division
           AND COST_CENTER_CODE NOT IN ('792761','792757','792758','792759');

    CURSOR LABOR_CUR(IN_COST_CENTER_CODE IN VARCHAR2) IS
              SELECT CD.COST_CENTER_CODE,
                     C.CUSTOMER_ACCOUNT_NUMBER,
                     NVL((SELECT CV.CUSTNAME
                            FROM CUSTOMER_TAXID_VW CV
                           WHERE CUSTNUM = C.CUSTOMER_ACCOUNT_NUMBER
                            AND ROWNUM < 2),'***xNOxCUSTOMERxNAMEx***') PURCHASE_ORDER_NUMBER,
                     CD.TERMINAL_NUMBER, 
                     CD.TRANSACTION_NUMBER,
                     CD.TRANSACTION_DATE,
                     ITEM_QUANTITY * ITEM_PRICE AS LABOR_AMOUNT,
                     CD.ITEM_QUANTITY
                FROM CUSTOMER_DETAILS CD,
                     CUSTOMER C
               WHERE CD.COST_CENTER_CODE      = IN_COST_CENTER_CODE --'703208' ,'701221'
                 AND CD.TRANSACTION_DATE      < IN_END_DATE --'01-DEC-2014'
                 AND CD.TERMINAL_NUMBER       = C.TERMINAL_NUMBER
                 AND CD.TRANSACTION_NUMBER    = C.TRANSACTION_NUMBER
                 AND CD.COST_CENTER_CODE      = C.COST_CENTER_CODE
                 AND CD.TRANSACTION_DATE      = C.TRANSACTION_DATE
                 AND C.BOOK_DATE_SEQUENCE IS NULL
                 AND CD.GL_SUB_ACCOUNT_NUMBER = '121'
                 --AND C.POS_TRANSACTION_CODE IN ('10','11','19','22','31','41')
                 AND CD.TERMINAL_NUMBER       IS NOT NULL
                 AND CD.TRANSACTION_NUMBER    IS NOT NULL
                 --AND CD.TERMINAL_NUMBER       = '13142'
                 --AND CD.TRANSACTION_NUMBER    = '23528'
               ORDER BY CD.TERMINAL_NUMBER, CD.TRANSACTION_NUMBER;

    V_COUNT         NUMBER := 0;
    V_REC           STORE_DRAFT_REPORT%ROWTYPE;
    V_UNMATCHED_REC STORE_DRAFT_REPORT%ROWTYPE;
    V_PREV_REC      STORE_DRAFT_REPORT%ROWTYPE;
BEGIN
    --Truncate the current records from STORE_DRAFT_REPORT
    EXECUTE IMMEDIATE 'TRUNCATE TABLE STORE_DRAFT_REPORT';
    FOR cc_rec IN COST_CENTER_CUR LOOP
        V_PREV_REC      := NULL;
        V_UNMATCHED_REC := NULL;
        V_UNMATCHED_REC.COST_CENTER_CODE := cc_rec.COST_CENTER_CODE;
        GET_HIERARCHY_DETAILS(cc_rec.COST_CENTER_CODE,
                              V_UNMATCHED_REC.COST_CENTER_NAME,
                              V_UNMATCHED_REC.COST_CENTER_MGR,
                              V_UNMATCHED_REC.PHONE_NUMBER,
                              V_UNMATCHED_REC.AREA,
                              V_UNMATCHED_REC.AREA_NAME,
                              V_UNMATCHED_REC.AREA_MGR,
                              V_UNMATCHED_REC.DISTRICT,
                              V_UNMATCHED_REC.DISTRICT_NAME,
                              V_UNMATCHED_REC.DISTRICT_MGR,
                              V_UNMATCHED_REC.DIVISION,
                              V_UNMATCHED_REC.DIVISION_NAME,
                              V_UNMATCHED_REC.DIVISION_MGR);
        FOR rec IN LABOR_CUR(cc_rec.COST_CENTER_CODE) LOOP
            BEGIN
                V_REC := V_UNMATCHED_REC;
                V_REC.CUSTOMER_ACCOUNT_NUMBER := rec.CUSTOMER_ACCOUNT_NUMBER;
                V_REC.PURCHASE_ORDER_NUMBER   := rec.PURCHASE_ORDER_NUMBER;
                V_REC.TERMINAL_NUMBER         := rec.TERMINAL_NUMBER;
                V_REC.TRANSACTION_NUMBER      := rec.TRANSACTION_NUMBER;
                V_REC.TRANSACTION_DATE        := rec.TRANSACTION_DATE;
                V_REC.LBR_TERMINAL_NUMBER     := rec.TERMINAL_NUMBER;
                V_REC.LBR_TRANSACTION_NUMBER  := rec.TRANSACTION_NUMBER;
                V_REC.LBR_TRANSACTION_DATE    := rec.TRANSACTION_DATE;
                V_REC.LABOR_AMOUNT            := rec.LABOR_AMOUNT;
                V_REC.ITEM_QUANTITY           := rec.ITEM_QUANTITY;
                IF NVL(V_PREV_REC.TERMINAL_NUMBER, V_REC.TERMINAL_NUMBER) <> V_REC.TERMINAL_NUMBER
                   OR NVL(V_PREV_REC.TRANSACTION_NUMBER, V_REC.TRANSACTION_NUMBER) <> V_REC.TRANSACTION_NUMBER THEN
                    SD_MATCHED_QUERY(IN_END_DATE, V_PREV_REC);
                END IF;
                IF V_REC.TRANSACTION_DATE < ADD_MONTHS(IN_END_DATE, -1) THEN
                    V_REC.PL_DATE := ADD_MONTHS(IN_END_DATE, -1);
                END IF;
                V_PREV_REC := V_REC;
                INSERT INTO STORE_DRAFT_REPORT VALUES V_REC;
                --Commit Logic here
                V_COUNT := V_COUNT + 1;
                IF V_COUNT > 1000 THEN
                    COMMIT;
                    V_COUNT := 0;
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
        IF V_PREV_REC.COST_CENTER_CODE IS NOT NULL THEN
            SD_MATCHED_QUERY(IN_END_DATE, V_PREV_REC);
        END IF;
        SD_UNMATCHED_QUERY(IN_END_DATE, V_UNMATCHED_REC);
    END LOOP;
    SD_UNMATCHED_WITH_BOOKED_LBRS(IN_END_DATE);
    SD_UNBOOK_RCRDS_OUTSIDE_RANGE(IN_END_DATE); --range validation (-500 to 500)
    UPDATE_BOOK_DATE_SEQUENCE(IN_END_DATE); --Uncomment this only after everything looks good
    COMMIT;
    --Below call will take care of start up process for this load
    PERFORM_BACKUP_PROCESS(IN_END_DATE);
END SD_REPORT_QUERY;

END SD_REPORT_PKG;