create or replace 
PACKAGE  BODY SD_REPORT_PKG AS 
/*********************************************************** 
THIS PACKAGE WILL HOLD ALL PL/SQL OBJECTS THAT ARE NEEDED TO 
STORE DRAFT REPORTS FROM 


CREATED : 08/01/2014

REVISIONS: 
************************************************************/

PROCEDURE sd_report_query
/**********************************************************

THIS PROCEDURE WILL BUILD THE STORE DRAFT REPORT DATA 

CREATED : 08/01/2014
**********************************************************/
(IN_START_DATE IN DATE,
IN_END_DATE IN DATE 
)
IS
CURSOR STORE_DRAFT_CUR IS
 SELECT A.*,
       DIVISION,
       AREA,
       DISTRICT,
       DIVISION_NAME,
       AREA_NAME,
       DISTRICT_NAME,
       COST_CENTER_NAME,
       PRIMARY_PHONE_NUMBER AS PHONE_NUMBER
       FROM
            ( SELECT cd.COST_CENTER_CODE AS CC_CODE,
              SUBSTR(CD.COST_CENTER_CODE,3,4) COST_CENTER_CODE,
	            CD.TERMINAL_NUMBER, 
              CD.TRANSACTION_NUMBER,
              CD.TRANSACTION_DATE,
              NULL AS DRAFT_NUMBER,
              CD.ITEM_QUANTITY,
              ITEM_PRICE AS LABOR_AMOUNT,
              NULL AS DRAFT_AMOUNT,
             SD.CUSTOMER_ACCOUNT_NUMBER, 
             c.PURCHASE_ORDER_NUMBER,
             sd.PAYEE_NAME,
             NULL AS LBR_TRANSACTION_NUMBER,
             NULL AS LBR_TERMINAL_NUMBER,
             NULL AS LBR_TRANSACTION_DATE
      FROM CUSTOMER_DETAILS CD, customer c, store_drafts SD
      WHERE cd.TRANSACTION_DATE BETWEEN IN_START_DATE AND  IN_END_DATE
      and CD.TERMINAL_NUMBER= C.TERMINAL_NUMBER
      AND CD.TRANSACTION_NUMBER = C.TRANSACTION_NUMBER
      and SD.TERMINAL_NUMBER= CD.TERMINAL_NUMBER
      AND SD.TRANSACTION_NUMBER = CD.TRANSACTION_NUMBER
      union      
        SELECT sdd.COST_CENTER_CODE AS CC_CODE,
             SUBSTR(SDD.COST_CENTER_CODE,3,4) COST_CENTER_CODE,
	           SDD.TERMINAL_NUMBER, 
             SDD.TRANSACTION_NUMBER,
             SDD.TRANSACTION_DATE,
             SUBSTR(sdd.CHECK_SERIAL_NUMBER,6,5) AS DRAFT_NUMBER,
             SDD.ITEM_QUANTITY,
             NULL AS LABOR_AMOUNT,
             SDD.ITEM_PRICE AS DRAFT_AMOUNT,
             SD.CUSTOMER_ACCOUNT_NUMBER,      
             C.PURCHASE_ORDER_NUMBER,
             SD.PAYEE_NAME,
             LBR_TRANSACTION_NUMBER,
             LBR_TERMINAL_NUMBER,
             LBR_TRANSACTION_DATE
      FROM STORE_DRAFTS_DETAIL SDD, Customer C, STORE_DRAFTS SD
      WHERE sdd.TRANSACTION_DATE BETWEEN IN_START_DATE AND  IN_END_DATE
      and C.TERMINAL_NUMBER= SDD.TERMINAL_NUMBER
     AND C.TRANSACTION_NUMBER = SDD.TRANSACTION_NUMBER
     and SDD.CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER) A, 
      CCN_HIERARCHY_INFO CH, 
      PHONE_NBR P
  WHERE SUBSTR(CH.COST_CENTER_CODE,3,4) = A.COST_CENTER_CODE
  AND SUBSTR(P.COST_CENTER_CODE,3,4) = A.COST_CENTER_CODE
  AND CH.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY'
AND A.TERMINAL_NUMBER IS NOT NULL
AND A.TRANSACTION_NUMBER IS NOT NULL;
     
V_COUNT                 NUMBER := 0;
V_STORE_DRAFT_ROW       STORE_DRAFT_REPORT%ROWTYPE;
V_PL_Date               STORE_DRAFT_REPORT.PL_date%type;

 
BEGIN

 FOR STORE_DRAFT_REC IN STORE_DRAFT_CUR LOOP
 
 /***
      PL_date 
       1) checking to see if there is matching labor for the draft. 
          a) If we have matching labor with the draft, we use P&L date as current date.
          b) For The first month, if the labor doesn't match up with the draft then, 
             The PL Date would be 0.
          c)For the second month still we have labor than doesn't match to the draft
            then the PL date would taken as sysdate.
  ****/
if 
--looking to see if we have labor matching the draft. if so using the PL date as sysdate
(V_STORE_DRAFT_ROW.LBR_TERMINAL_NUMBER = V_STORE_DRAFT_ROW.TERMINAL_NUMBER
    and V_STORE_DRAFT_ROW.LBR_TRANSACTION_NUMBER = V_STORE_DRAFT_ROW.TRANSACTION_NUMBER
    and ((to_char(V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE, 'YYYY/MM') = to_char(V_STORE_DRAFT_ROW.TRANSACTION_DATE, 'YYYY/MM')) or 
    to_char(add_months(to_date(V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE),1), 'YYYY/MM') = to_char(V_STORE_DRAFT_ROW.TRANSACTION_DATE, 'YYYY/MM')))
--looking to see if we have labor matching the draft for the second month. if so using the PL date as sysdate
OR
--looking to see if we have labor matching the draft for the second month. still if not, then using the PL date as sysdate
   (V_STORE_DRAFT_ROW.LBR_TERMINAL_NUMBER <> V_STORE_DRAFT_ROW.TERMINAL_NUMBER
    and V_STORE_DRAFT_ROW.LBR_TRANSACTION_NUMBER <> V_STORE_DRAFT_ROW.TRANSACTION_NUMBER
    and to_char(ADD_MONTHS(TO_DATE(V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE),1),'YYYY/MM') = to_char(sysdate,'YYYY/MM'))
then  V_PL_Date := trunc(sysdate);
else 
--if if doesn't match on the first month we use nothing in the PL_date
 V_PL_Date:= null;
end if;

/*
if 
to_char(V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE, 'YYYY/MM') = to_char(V_STORE_DRAFT_ROW.TRANSACTION_DATE, 'YYYY/MM') 
		and V_STORE_DRAFT_ROW.LBR_TERMINAL_NUMBER = V_STORE_DRAFT_ROW.TERMINAL_NUMBER
		and V_STORE_DRAFT_ROW.LBR_TRANSACTION_NUMBER = V_STORE_DRAFT_ROW.TRANSACTION_NUMBER
then V_PL_Date :=trunc(sysdate);
elsif 
    (V_STORE_DRAFT_ROW.LBR_TERMINAL_NUMBER = V_STORE_DRAFT_ROW.TERMINAL_NUMBER
    and V_STORE_DRAFT_ROW.LBR_TRANSACTION_NUMBER = V_STORE_DRAFT_ROW.TRANSACTION_NUMBER
    and  to_char(add_months(to_date(V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE),1), 'YYYY/MM') = to_char(V_STORE_DRAFT_ROW.TRANSACTION_DATE, 'YYYY/MM'))
then V_PL_Date :=trunc(sysdate);
elsif
  (V_STORE_DRAFT_ROW.LBR_TERMINAL_NUMBER <> V_STORE_DRAFT_ROW.TERMINAL_NUMBER
    and V_STORE_DRAFT_ROW.LBR_TRANSACTION_NUMBER <> V_STORE_DRAFT_ROW.TRANSACTION_NUMBER
    and to_char(ADD_MONTHS(TO_DATE(V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE),1),'YYYY/MM') = to_char(sysdate,'YYYY/MM'))
then  V_PL_Date := sysdate;
	else
  V_PL_Date:= null;
end if;
*/

   BEGIN
 
    V_STORE_DRAFT_ROW.COST_CENTER_CODE                 := STORE_DRAFT_REC.COST_CENTER_CODE;
    V_STORE_DRAFT_ROW.COST_CENTER_NAME                  := STORE_DRAFT_REC.COST_CENTER_NAME;
    V_STORE_DRAFT_ROW.COST_CENTER_MGR                   := SD_REPORT_PKG.CC_MANAGER(STORE_DRAFT_REC.CC_CODE);
    V_STORE_DRAFT_ROW.CUSTOMER_ACCOUNT_NUMBER           := STORE_DRAFT_REC.CUSTOMER_ACCOUNT_NUMBER;
    V_STORE_DRAFT_ROW.PAYEE_NAME                        := STORE_DRAFT_REC.PAYEE_NAME;
    V_STORE_DRAFT_ROW.PURCHASE_ORDER_NUMBER             := nvl(STORE_DRAFT_REC.PURCHASE_ORDER_NUMBER, '***xNOxCUSTOMERxNAMEx***');
    V_STORE_DRAFT_ROW.TERMINAL_NUMBER                   := STORE_DRAFT_REC.TERMINAL_NUMBER;
    V_STORE_DRAFT_ROW.TRANSACTION_NUMBER                := STORE_DRAFT_REC.TRANSACTION_NUMBER;
    V_STORE_DRAFT_ROW.TRANSACTION_DATE                  := STORE_DRAFT_REC.TRANSACTION_DATE;
    V_STORE_DRAFT_ROW.LBR_TRANSACTION_NUMBER            := STORE_DRAFT_REC.LBR_TRANSACTION_NUMBER;
    V_STORE_DRAFT_ROW.LBR_TERMINAL_NUMBER               := STORE_DRAFT_REC.LBR_TERMINAL_NUMBER;
    V_STORE_DRAFT_ROW.LBR_TRANSACTION_DATE              := STORE_DRAFT_REC.LBR_TRANSACTION_DATE;
    V_STORE_DRAFT_ROW.DRAFT_NUMBER                      := STORE_DRAFT_REC.DRAFT_NUMBER;
    V_STORE_DRAFT_ROW.DRAFT_AMOUNT                      := STORE_DRAFT_REC.DRAFT_AMOUNT;
    V_STORE_DRAFT_ROW.LABOR_AMOUNT                      := STORE_DRAFT_REC.LABOR_AMOUNT;
    V_STORE_DRAFT_ROW.ITEM_QUANTITY                     := STORE_DRAFT_REC.ITEM_QUANTITY;
    V_STORE_DRAFT_ROW.PHONE_NUMBER                      := STORE_DRAFT_REC.PHONE_NUMBER;
    V_STORE_DRAFT_ROW.AREA                              := STORE_DRAFT_REC.AREA;
    V_STORE_DRAFT_ROW.AREA_NAME                         := STORE_DRAFT_REC.AREA_NAME;
    V_STORE_DRAFT_ROW.AREA_MGR                          := SD_REPORT_PKG.GET_MANAGER_NAME('AREA_MGR', STORE_DRAFT_REC.DIVISION || STORE_DRAFT_REC.AREA);
    V_STORE_DRAFT_ROW.DISTRICT                          := STORE_DRAFT_REC.DISTRICT;
    V_STORE_DRAFT_ROW.DISTRICT_NAME                     := STORE_DRAFT_REC.DISTRICT_NAME;
    V_STORE_DRAFT_ROW.DISTRICT_MGR                      := SD_REPORT_PKG.GET_MANAGER_NAME('DIST_MGR',STORE_DRAFT_REC.DIVISION || STORE_DRAFT_REC.AREA || STORE_DRAFT_REC.DISTRICT);
    V_STORE_DRAFT_ROW.DIVISION                          := STORE_DRAFT_REC.DIVISION;
    V_STORE_DRAFT_ROW.DIVISION_NAME                     := STORE_DRAFT_REC.DIVISION_NAME;
    V_STORE_DRAFT_ROW.DIVISION_MGR                      := SD_REPORT_PKG.GET_MANAGER_NAME('DIV_MGR',STORE_DRAFT_REC.DIVISION);
    V_STORE_DRAFT_ROW.PL_DATE                           := V_PL_Date;
    
    INSERT INTO STORE_DRAFT_REPORT VALUES  V_STORE_DRAFT_ROW;
                V_COUNT := V_COUNT + 1;
            IF V_COUNT > 1000 THEN
                COMMIT;
                V_COUNT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
                 --  dbms_output.put_line(STORE_DRAFT_REC.PAYEE_NAME|| ' - ' || STORE_DRAFT_REC.CUSTOMER_ACCOUNT_NUMBER || '-' || SQLERRM);                        
        END;
    END LOOP;
    COMMIT;

END sd_report_query;

FUNCTION GET_RQSTD_ATTRIBUTE_VALUE
/***********************************************************
      GET_RQSTD_ATTRIBUTE_VALUE 
      This Procedure will get the requested attribute value for from
      the passed UPPER_LVL_VER_DESC XML
      
Created : 08/14/2014 nxk927 
************************************************************/
(   IN_UPPER_LVL_VER_VALUE  IN     HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE,
    IN_ATTRIBUTE_NAME       IN     VARCHAR2) RETURN VARCHAR2
IS
    V_COUNT           NUMBER        := 1;
    V_ATTRIBUTE_NAME  VARCHAR2(100);
    OUT_ATTRIBUTE_VALUE VARCHAR2(100);
BEGIN
    WHILE IN_UPPER_LVL_VER_VALUE.EXISTSNODE('//attributes/upper_lvl_ver_desc[' || V_COUNT || ']') = 1 LOOP
        V_ATTRIBUTE_NAME := UPPER(REPLACE(IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc' || '[' || V_COUNT || ']/Name/text()').GETSTRINGVAL(),' ','_'));
        IF V_ATTRIBUTE_NAME = UPPER(REPLACE(IN_ATTRIBUTE_NAME,' ','_'))
           AND (IN_UPPER_LVL_VER_VALUE.EXISTSNODE('/attributes/upper_lvl_ver_desc[' || V_COUNT || ']/Value/text()') = 1) THEN
            OUT_ATTRIBUTE_VALUE := IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc[' || V_COUNT || ']/Value/text()').GETSTRINGVAL();
        END IF;
        V_COUNT := V_COUNT + 1;
    END LOOP;
    RETURN OUT_ATTRIBUTE_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN OUT_ATTRIBUTE_VALUE;
END GET_RQSTD_ATTRIBUTE_VALUE;

FUNCTION CC_MANAGER
/***********************************************************
      CC_MANAGER 
      This Function will get the requested manager name for the
      cost center
      
Created :  08/14/2014 nxk927 
************************************************************/
(  IN_COST_CENTER_CODE EMPLOYEE_DETAILS.COST_CENTER_CODE%TYPE)
    RETURN VARCHAR2
IS 
V_CC_MANAGER EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;

BEGIN 
SELECT EMPLOYEE_NAME INTO V_CC_MANAGER
FROM EMPLOYEE_DETAILS 
WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
AND  UPPER(JOB_TITLE) like '%STORE MGR%'
and UPPER(EMP_PAYROLL_STATUS) = 'ACTIVE';

 RETURN V_CC_MANAGER;
 EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;

END;

FUNCTION GET_MANAGER_NAME
/***********************************************************
      GET_MANAGER_NAME 
      This Function will get the requested manager name for the
      div, area and district.
      This function will call "GET_RQSTD_ATTRIBUTE_VALUE" function to pull
      the attribute for the manager id which will be used to pull the manager
      name for the passed indicator as : division or area or district 
      
Created :  08/14/2014 nxk927 
************************************************************/
(  IN_IND in VARCHAR2,
   IN_HRCHY_DTL_PREV_LVL_VAL IN HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
  )
      RETURN VARCHAR2
IS
    V_MANAGER_NAME VARCHAR2(100); -- EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;
    
BEGIN
IF IN_IND = 'AREA_MGR' THEN
--getting manager name for area
  SELECT DISTINCT EMPLOYEE_NAME
  INTO V_MANAGER_NAME
  FROM EMPLOYEE_DETAILS,
    HIERARCHY_DETAIL
  WHERE SUBSTR(SD_REPORT_PKG.GET_RQSTD_ATTRIBUTE_VALUE(UPPER_LVL_VER_VALUE,'MANAGERNAME'),4) = EMPLOYEE_NUMBER
  -- substr 4  used as manager number from the UPPER_LVL_VER_VALUE is having 2 extra spaces and 2 extra zeros before employee number
  AND HRCHY_HDR_NAME                                                           = 'ADMIN_TO_SALES_AREA'
  AND SUBSTR(HRCHY_DTL_PREV_LVL_VAL,5,4)                                       = IN_HRCHY_DTL_PREV_LVL_VAL;
elsif IN_IND = 'DIST_MGR' THEN
--getting manager name for DIST
  SELECT DISTINCT EMPLOYEE_NAME
  INTO V_MANAGER_NAME
  FROM EMPLOYEE_DETAILS,
    HIERARCHY_DETAIL
  WHERE SUBSTR(SD_REPORT_PKG.GET_RQSTD_ATTRIBUTE_VALUE(UPPER_LVL_VER_VALUE,'MANAGERNAME'),4) = EMPLOYEE_NUMBER
  -- substr 4 used as manager number from the UPPER_LVL_VER_VALUE is having 2 extra spaces and 2 extra zeros before employee number
  AND HRCHY_HDR_NAME                                                           = 'ADMIN_TO_SALES_DISTRICT'
  AND SUBSTR(HRCHY_DTL_PREV_LVL_VAL,5,6)                                       = IN_HRCHY_DTL_PREV_LVL_VAL;
elsif IN_IND = 'DIV_MGR' THEN
--getting manager name for DIV
  SELECT DISTINCT EMPLOYEE_NAME
  INTO V_MANAGER_NAME
  FROM EMPLOYEE_DETAILS,
    HIERARCHY_DETAIL
  WHERE SUBSTR(SD_REPORT_PKG.GET_RQSTD_ATTRIBUTE_VALUE(UPPER_LVL_VER_VALUE,'MANAGERNAME'),4) = EMPLOYEE_NUMBER
  -- substr 4 used as manager number from the UPPER_LVL_VER_VALUE is having 2 extra spaces and 2 extra zeros before employee number
  AND HRCHY_HDR_NAME                                                           = 'ADMIN_TO_SALES_DIVISION'
  AND SUBSTR(HRCHY_DTL_PREV_LVL_VAL,5,2)                                       = IN_HRCHY_DTL_PREV_LVL_VAL;
ELSE
  NULL;
END IF;
 
 RETURN V_MANAGER_NAME;

EXCEPTION
  WHEN OTHERS THEN
  RETURN NULL;

END;

PROCEDURE CCN_HIERARCHY_INFO
/**********************************************************
CCN_HIERARCHY_INFO 
   This procedure is for truncating the CCN_HIERARCHY_INFO 
   table and pull the updated data from the HIERARCHY_DETAIL_VIEW
   created : 03/04/2014  nxk927
**********************************************************/

is

SQ NUMBER;
SE VARCHAR2(500);
V_COUNT     INTEGER := 0 ;

cursor ccn_hierarchy_info_cur is 
SELECT *
FROM HIERARCHY_DETAIL_VIEW;

BEGIN
--Deleting the CCN_Hierarchy_info table before inserting any data
EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_HIERARCHY_INFO';

    FOR CCN_HIERARCHY_INFO_REC IN ccn_hierarchy_info_cur LOOP
        BEGIN
            INSERT INTO CCN_HIERARCHY_INFO VALUES CCN_HIERARCHY_INFO_REC;
        EXCEPTION
            WHEN OTHERS THEN
                SQ := SQLCODE;
                SE := SQLERRM;
                DBMS_OUTPUT.PUT_LINE('FAILED CCN_HIERARCHY_INFO ' || ' ' || SQ || ' ' || SE);
        END;
        IF V_COUNT > 100 THEN
            COMMIT; 
            V_COUNT := 0;
        END IF; 
        V_COUNT := V_COUNT + 1;
    END LOOP;
    COMMIT;
END;

END SD_REPORT_PKG;