create or replace 
PACKAGE body SD_PAID_DETAILS_LOAD
/**************************************************************** 
This package will update paid details in the existing CCN Store Drafts Oracle Database
created : 07/23/2014 jxc517 CCN Project....
changed :
*****************************************************************/
AS

PROCEDURE CCN_SD_PAID_LOAD_SUNTRUST_SP
/******************************************************************
This Procedure is a wrapper for the SUNTRUST Paid details update of the store drafts tables

Created : 12/18/2014 jxc517 CCN Project....
Changed : 02/28/2015 nxk927 (update all the drafts excluding void and stopped drafts)
        : 02/28/2017 gxg192 Changes to update UNATTACHED_MNL_DRFT_DTL table
                     if paid details are received before POS is received
        : 03/06/2017 gxg192 Changes to update UNATTACHED_MNL_DRFT_DTL table
                     only if record is not found in store drafts table.
******************************************************************/
AS
    CURSOR TEMP_CUR is
        SELECT CCN_COMMON_TOOLS.GET_DATE_VALUE('1'||PAID_DATE_PAID, 'MMDDYY') PAID_DATE,
               CCN_COMMON_TOOLS.RETURN_NUMBER(PAID_AMONUT_ITEMS,10,2) AMOUNT,
               PAID_CHECK_SERIAL_NUMBER CHECK_SERIAL_NUMBER
          FROM TEMP_PAID_DETAILS_SUNTRUST;

    V_COMMIT     NUMBER := 0;
    V_TEMP_ROW   STORE_DRAFTS%ROWTYPE;
BEGIN
    FOR rec IN TEMP_CUR LOOP
        BEGIN
            rec.CHECK_SERIAL_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHECK_SERIAL_NUMBER);

            /*If POS is not yet received for a draft then there will be no record in store_drafts table for it;
              so below query will throw no data found exception and CHECK_SERIAL_NUMBER will be Null.*/
            SELECT *
              INTO V_TEMP_ROW
              FROM STORE_DRAFTS
             WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER;

            V_TEMP_ROW.PAID_DATE           := rec.PAID_DATE;
            V_TEMP_ROW.BANK_PAID_AMOUNT    := rec.AMOUNT;
            SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);

            UPDATE STORE_DRAFTS
               SET ROW = V_TEMP_ROW
             WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
               AND VOID_DATE IS NULL
               AND STOP_PAY_DATE IS NULL;

        EXCEPTION
            WHEN OTHERS THEN
                V_TEMP_ROW := NULL;
                ERRPKG.INSERT_ERROR_LOG_SP(200,
                                           'CCN_SD_PAID_LOAD_SUNTRUST_SP',
                                           'Error occurred while updating data in STORE_DRAFTS table is '||SUBSTR(SQLERRM,1,400),
                                           NULL, --cost_center_code
                                           NVL(rec.CHECK_SERIAL_NUMBER,''));
        END;

        /*If POS is not yet received for a draft, Updating the unattached draft if unattached draft is available.*/
        IF V_TEMP_ROW.CHECK_SERIAL_NUMBER IS NULL THEN
            BEGIN
                SELECT *
                  INTO V_TEMP_ROW
                  FROM UNATTACHED_MNL_DRFT_DTL
                 WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER;

                V_TEMP_ROW.PAID_DATE           := rec.PAID_DATE;
                V_TEMP_ROW.BANK_PAID_AMOUNT    := rec.AMOUNT;
                SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);

                UPDATE UNATTACHED_MNL_DRFT_DTL
                   SET ROW = V_TEMP_ROW
                 WHERE CHECK_SERIAL_NUMBER = V_TEMP_ROW.CHECK_SERIAL_NUMBER
                   AND VOID_DATE IS NULL
                   AND STOP_PAY_DATE IS NULL;

            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(200,
                                               'CCN_SD_PAID_LOAD_SUNTRUST_SP',
                                               'Error occurred while updating data in UNATTACHED_MNL_DRFT_DTL table is '||SUBSTR(SQLERRM,1,400),
                                               NULL, --cost_center_code
                                               NVL(rec.CHECK_SERIAL_NUMBER,''));
            END;
        END IF;

        V_TEMP_ROW := NULL ;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CCN_SD_PAID_LOAD_SUNTRUST_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END CCN_SD_PAID_LOAD_SUNTRUST_SP;

PROCEDURE CCN_SD_PAID_LOAD_ROYAL_SP
/******************************************************************
This Procedure is a wrapper for the ROYAL Paid details update of the store drafts tables

Created : 12/18/2014 jxc517 CCN Project....
Changed : 02/28/2015 nxk927 (update all the drafts excluding void and stopped drafts)
        : 02/28/2017 gxg192 Changes to update UNATTACHED_MNL_DRFT_DTL table
                     if paid details are received before POS is received
        : 03/06/2017 gxg192 Changes to update UNATTACHED_MNL_DRFT_DTL table
                     only if record is not found in store drafts table.
******************************************************************/
AS
    CURSOR TEMP_CUR is
        SELECT CCN_COMMON_TOOLS.GET_DATE_VALUE('1'||PAID_DATE, 'YYMMDD') PAID_DATE,
               CCN_COMMON_TOOLS.RETURN_NUMBER(AMOUNT,11,2) AMOUNT,
               FILLER||CHECK_NUMBER_CC||CHECK_NUMBER_SQ||CHECK_NUMBER_CK CHECK_SERIAL_NUMBER
          FROM TEMP_PAID_DETAILS_ROYAL;

    V_COMMIT     NUMBER := 0;
    V_TEMP_ROW   STORE_DRAFTS%ROWTYPE;
BEGIN
    FOR rec IN TEMP_CUR LOOP
        BEGIN
            rec.CHECK_SERIAL_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHECK_SERIAL_NUMBER);

            /*If POS is not yet received for a draft then there will be no record in store_drafts table for it;
              so below query will throw no data found exception and CHECK_SERIAL_NUMBER will be Null.*/
            SELECT *
              INTO V_TEMP_ROW
              FROM STORE_DRAFTS
             WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER;

            V_TEMP_ROW.PAID_DATE           := rec.PAID_DATE;
            V_TEMP_ROW.BANK_PAID_AMOUNT    := rec.AMOUNT;
            SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);

            UPDATE STORE_DRAFTS
               SET ROW = V_TEMP_ROW
             WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
               AND VOID_DATE IS NULL
               AND STOP_PAY_DATE IS NULL;

        EXCEPTION
            WHEN OTHERS THEN
                V_TEMP_ROW := NULL;
                ERRPKG.INSERT_ERROR_LOG_SP(200,
                                           'CCN_SD_PAID_LOAD_ROYAL_SP',
                                           'Error occurred while updating data in STORE_DRAFTS table is '||SUBSTR(SQLERRM,1,400),
                                           NULL, --cost_center_code
                                           NVL(rec.CHECK_SERIAL_NUMBER,''));
        END;

        /*If POS is not yet received for a draft, Updating the unattached draft if unattached draft is available.*/
        IF V_TEMP_ROW.CHECK_SERIAL_NUMBER IS NULL THEN
            BEGIN
                SELECT *
                  INTO V_TEMP_ROW
                  FROM UNATTACHED_MNL_DRFT_DTL
                 WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER;

                V_TEMP_ROW.PAID_DATE           := rec.PAID_DATE;
                V_TEMP_ROW.BANK_PAID_AMOUNT    := rec.AMOUNT;
                SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);

                UPDATE UNATTACHED_MNL_DRFT_DTL
                   SET ROW = V_TEMP_ROW
                 WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
                   AND VOID_DATE IS NULL
                   AND STOP_PAY_DATE IS NULL;

            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(200,
                                               'CCN_SD_PAID_LOAD_ROYAL_SP',
                                               'Error occurred while updating data in UNATTACHED_MNL_DRFT_DTL table is '||SUBSTR(SQLERRM,1,400),
                                               NULL, --cost_center_code
                                               NVL(rec.CHECK_SERIAL_NUMBER,''));
            END;
        END IF;

        V_TEMP_ROW := NULL ;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
        END IF;

    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CCN_SD_PAID_LOAD_ROYAL_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END CCN_SD_PAID_LOAD_ROYAL_SP;

PROCEDURE CCN_SD_PAID_LOAD_SP
/******************************************************************
This Procedure is a wrapper for the Paid details update of the store drafts tables

created : 07/23/2014 jxc517 CCN Project....
changed : 12/08/2014 jxc517 CCN Project....
          Date field in file is coming as MMDDYY for SUNTRUST and YYMMDD for ROYAL
          Corrected the code to handle this scenario
******************************************************************/
AS

    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
    V_START_DURATION DATE := SYSDATE;
    V_CLOB       CLOB;
    
V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('SD_DAILY_PAID_LOAD', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Update STORE_DRAFTS paid details ';

      SD_PAID_DETAILS_LOAD.CCN_SD_PAID_LOAD_SUNTRUST_SP();
      SD_PAID_DETAILS_LOAD.CCN_SD_PAID_LOAD_ROYAL_SP();
      dbms_output.put_line('STORE_DRAFTS paid details updated in : '|| (dbms_utility.get_time - v_start_time)/100 || ' Seconds');

      FOR rec IN (SELECT * FROM ERROR_LOG WHERE ERROR_DATE >= V_START_DURATION) LOOP
          V_CLOB := V_CLOB || rec.COST_CENTER ||','|| rec.ERROR_TEXT || CHR(10);
      END LOOP;
      IF V_CLOB <> EMPTY_CLOB() THEN
          MAIL_PKG.SEND_MAIL('SD_PAIDS_LOAD_ERRORS',NULL, NULL, V_CLOB);
      END IF;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('SD_DAILY_PAID_LOAD', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CCN_SD_PAID_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END CCN_SD_PAID_LOAD_SP;

END SD_PAID_DETAILS_LOAD;
