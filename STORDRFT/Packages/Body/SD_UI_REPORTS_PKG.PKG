create or replace PACKAGE body SD_UI_REPORTS_PKG
/**************************************************************** 
This package will be used by UI for reporting purpose
created : 11/03/2014 jxc517 CCN Project....
changed : 04/16/2015 jxc517 CCN Project
          Removed LOAD_FILTER_TABLE
          Added EXTRACT_XML
          Modified STORE_DRAFTS_FILTER_S_SP
*****************************************************************/
AS

V_DUMMY_DATE             DATE := '01-JAN-2222';

PROCEDURE EXTRACT_XML (
/*******************************************************************************
	This procedure extracts the required details to proceed further with filtering

Created : 04/16/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW_DATA               IN     CLOB
,OUT_STORE_DRAFT_INDICATOR    OUT VARCHAR2
,OUT_TRANSACTION_CODE         OUT VARCHAR2
,OUT_GL_ACCOUNT_NUMBER        OUT VARCHAR2
,OUT_CHECK_RANGE_START        OUT VARCHAR2
,OUT_CHECK_RANGE_END          OUT VARCHAR2
,OUT_TRANSACTION_DATE_START   OUT DATE
,OUT_TRANSACTION_DATE_END     OUT DATE
,OUT_PAID_DATE_START          OUT DATE
,OUT_PAID_DATE_END            OUT DATE
,OUT_STOP_PAY_DATE_START      OUT DATE
,OUT_STOP_PAY_DATE_END        OUT DATE
,OUT_VOID_DATE_START          OUT DATE
,OUT_VOID_DATE_END            OUT DATE
,OUT_OUTSTANDING_DATE_START   OUT DATE
,OUT_OUTSTANDING_DATE_END     OUT DATE
,OUT_CHANGE_DATE_START        OUT DATE
,OUT_CHANGE_DATE_END          OUT DATE
,OUT_COUNTRY_TYPE             OUT VARCHAR2
,OUT_SUMMARY_DETAIL_TYPE      OUT VARCHAR2
,OUT_STATEMENT_TYPES          OUT VARCHAR2
--,OUT_USER_ID                  OUT VARCHAR2
--,OUT_ISSUE_DATE_START         OUT DATE
--,OUT_ISSUE_DATE_END           OUT DATE
--,OUT_ALL_DATE_START           OUT DATE
--,OUT_ALL_DATE_END             OUT DATE
--,OUT_MANUAL_DATE_START        OUT DATE
--,OUT_MANUAL_DATE_END          OUT DATE
) 
IS
BEGIN
    --Get the status indicators (comma separated)
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/STORE_DRAFT_INDICATOR/text()') = 1) THEN
        OUT_STORE_DRAFT_INDICATOR   := UPPER(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/STORE_DRAFT_INDICATOR/text()').GETSTRINGVAL());
    END IF;
    --Get the transaction types (comma separated)
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_CODE/text()') = 1) THEN
        OUT_TRANSACTION_CODE   := UPPER(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_CODE/text()').GETSTRINGVAL());
    END IF;
    --Get the GL Prime and Sub account numbers, after validating the input GL_ACCOUNT_NUMBER (inside the XML as a tag)
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/GL_ACCOUNT_NUMBER/text()') = 1) THEN
        OUT_GL_ACCOUNT_NUMBER   := UPPER(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/GL_ACCOUNT_NUMBER/text()').GETSTRINGVAL());
        SD_BUSINESS_RULES_PKG.SD_GL_ACCOUNT_VALIDATION(OUT_GL_ACCOUNT_NUMBER); --business rules
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/SUMMARY_DETAIL_TYPE/text()') = 1) THEN
        OUT_SUMMARY_DETAIL_TYPE := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/SUMMARY_DETAIL_TYPE/text()').GETSTRINGVAL();
    END IF;
    
    IF UPPER(OUT_SUMMARY_DETAIL_TYPE) = 'SUMMARY' AND OUT_GL_ACCOUNT_NUMBER IS NOT NULL THEN
        errpkg.raise_err(errnums.en_wrong_filter_err, 'GL Account Number can not be provided for SUMMARY filter'); --business rules
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHECK_RANGE_START/text()') = 1) THEN
        OUT_CHECK_RANGE_START := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHECK_RANGE_START/text()').GETSTRINGVAL();
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHECK_RANGE_END/text()') = 1) THEN
        OUT_CHECK_RANGE_END := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHECK_RANGE_END/text()').GETSTRINGVAL();
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_DATE_START/text()') = 1) THEN
        OUT_TRANSACTION_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_DATE_END/text()') = 1) THEN
        OUT_TRANSACTION_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/PAID_DATE_START/text()') = 1) THEN
        OUT_PAID_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/PAID_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/PAID_DATE_END/text()') = 1) THEN
        OUT_PAID_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/PAID_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/STOP_PAY_DATE_START/text()') = 1) THEN
        OUT_STOP_PAY_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/STOP_PAY_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/STOP_PAY_DATE_END/text()') = 1) THEN
        OUT_STOP_PAY_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/STOP_PAY_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/VOID_DATE_START/text()') = 1) THEN
        OUT_VOID_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/VOID_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/VOID_DATE_END/text()') = 1) THEN
        OUT_VOID_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/VOID_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHANGED_DATE_START/text()') = 1) THEN
        OUT_CHANGE_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHANGED_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHANGED_DATE_END/text()') = 1) THEN
        OUT_CHANGE_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHANGED_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/OUTSTANDING_DATE_START/text()') = 1) THEN
        OUT_OUTSTANDING_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/OUTSTANDING_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/OUTSTANDING_DATE_END/text()') = 1) THEN
        OUT_OUTSTANDING_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/OUTSTANDING_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

/*
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/USER_ID/text()') = 1) THEN
        OUT_USER_ID   := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/USER_ID/text()').GETSTRINGVAL();
    END IF;
*/
    --outstanding end date should be present to make sure Draft status of OUTSTANDING works even if
    --Date filter is selected anything other than OUTSTANDING range
    IF OUT_OUTSTANDING_DATE_END IS NULL THEN
        OUT_OUTSTANDING_DATE_END := COALESCE(OUT_TRANSACTION_DATE_END,
                                             OUT_PAID_DATE_END,
                                             OUT_STOP_PAY_DATE_END,
                                             OUT_VOID_DATE_END,
                                             OUT_CHANGE_DATE_END);
    END IF;

    /*
    --This tag comes irrespective of the date filter
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/ISSUE_DATE_START/text()') = 1) THEN
        OUT_ISSUE_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/ISSUE_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/ISSUE_DATE_END/text()') = 1) THEN
        OUT_ISSUE_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/ISSUE_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/ALL_DATE_START/text()') = 1) THEN
        OUT_ALL_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/ALL_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/ALL_DATE_END/text()') = 1) THEN
        OUT_ALL_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/ALL_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/MANUAL_DATE_START/text()') = 1) THEN
        OUT_MANUAL_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/MANUAL_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/MANUAL_DATE_END/text()') = 1) THEN
        OUT_MANUAL_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/MANUAL_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    */

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/COUNTRY_TYPE/text()') = 1) THEN
        OUT_COUNTRY_TYPE := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/COUNTRY_TYPE/text()').GETSTRINGVAL();
    END IF;    
    IF OUT_COUNTRY_TYPE = 'US' THEN --US NON AUTOMOTIVE
        --any statement type apart from the concatenated statement types are US NON AUTOMOTIVE
        SELECT WM_CONCAT(STATEMENT_TYPE)
          INTO OUT_STATEMENT_TYPES
          FROM (SELECT DISTINCT STATEMENT_TYPE
                  FROM COST_CENTER
                 WHERE INSTR(NVL(SD_BUSINESS_RULES_PKG.G_CAN_NON_AUTO_STMNT_TYPES||','||
                                     SD_BUSINESS_RULES_PKG.G_US_AUTO_STMNT_TYPES||','||
                                     SD_BUSINESS_RULES_PKG.G_CAN_AUTO_STMNT_TYPES,
                                 NVL(STATEMENT_TYPE,'XX'))||',',
                         NVL(STATEMENT_TYPE,'XX')||',') = 0);
    ELSIF OUT_COUNTRY_TYPE = 'CANADA' THEN --CANADA NON AUTOMOTIVE
        OUT_STATEMENT_TYPES := SD_BUSINESS_RULES_PKG.G_CAN_NON_AUTO_STMNT_TYPES;
    ELSIF OUT_COUNTRY_TYPE = 'US-AUTOMOTIVE' THEN --US AUTOMOTIVE
        OUT_STATEMENT_TYPES := SD_BUSINESS_RULES_PKG.G_US_AUTO_STMNT_TYPES;
    ELSIF OUT_COUNTRY_TYPE = 'CANADA-AUTOMOTIVE' THEN --CANADA AUTOMOTIVE
        OUT_STATEMENT_TYPES := SD_BUSINESS_RULES_PKG.G_CAN_AUTO_STMNT_TYPES;
    END IF;
END EXTRACT_XML;

PROCEDURE STORE_DRAFTS_FILTER_S_SP (
/*******************************************************************************
	STORE_DRAFTS_FILTER_S_SP

	This procedure is intended to select records from STORE_DRAFTS & UNATTACHED_MNL_DRFT_DTL table
  with all fields part of the filtering

Created : 10/27/2014 jxc517 CCN Project....
Changed : 02/27/2015 jxc517 CCN Project....
          Added Stop_Pay_Date start and end logic
          04/16/2015 jxc517 CCN Project....
          Rewrote the entire logic as per the new requirements and modularized the code
          04/28/2015 jxc517 CCN Project....
          Returning unattached MANUAL drafts as well when no draft status is selected
          05/21/2015 jxc517 CCN Project....
          Adding logic to include the date range for OUTSTANDING drafts filter
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT SD_TABLE_IU_PKG.REF_CURSOR)
IS
    V_TEMP_ROW               STORE_DRAFTS%ROWTYPE;
    V_CHECK_RANGE_START      STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_CHECK_RANGE_END        STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_SUMMARY_DETAIL_TYPE    VARCHAR2(50);
    V_TRANSACTION_CODE       VARCHAR2(100);
    V_GL_ACCOUNT_NUMBER      VARCHAR(8);
    V_COUNTRY_TYPE           VARCHAR2(100);
    V_STATEMENT_TYPES        VARCHAR2(500);
   -- V_USER_ID                VARCHAR2(6);

    V_STORE_DRAFT_INDICATOR  VARCHAR2(100);
    V_OUTSTANDING_IND        VARCHAR2(1);
    V_ALL_IND                VARCHAR2(1);
    V_CHANGED_IND            VARCHAR2(1);
    V_MANUAL_IND             VARCHAR2(1);

    V_TRANSACTION_DATE_START STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_TRANSACTION_DATE_END   STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_PAID_DATE_START        STORE_DRAFTS.PAID_DATE%TYPE;
    V_PAID_DATE_END          STORE_DRAFTS.PAID_DATE%TYPE;
    V_STOP_PAY_DATE_START    STORE_DRAFTS.STOP_PAY_DATE%TYPE;
    V_STOP_PAY_DATE_END      STORE_DRAFTS.STOP_PAY_DATE%TYPE;
    V_VOID_DATE_START        STORE_DRAFTS.VOID_DATE%TYPE;
    V_VOID_DATE_END          STORE_DRAFTS.VOID_DATE%TYPE;
    V_OUTSTANDING_DATE_START DATE;
    V_OUTSTANDING_DATE_END   DATE;
    V_CHANGE_DATE_START      DATE;
    V_CHANGE_DATE_END        DATE;    
    --V_ISSUE_DATE_START       STORE_DRAFTS.ISSUE_DATE%TYPE;
    --V_ISSUE_DATE_END         STORE_DRAFTS.ISSUE_DATE%TYPE;
    --V_ALL_DATE_START         DATE;
    --V_ALL_DATE_END           DATE;
    --V_MANUAL_DATE_START      DATE;
    --V_MANUAL_DATE_END        DATE;
BEGIN

    EXTRACT_XML(IN_ROW_DATA,
                V_STORE_DRAFT_INDICATOR,
                V_TRANSACTION_CODE,
                V_GL_ACCOUNT_NUMBER,
                V_CHECK_RANGE_START,
                V_CHECK_RANGE_END,
                V_TRANSACTION_DATE_START,
                V_TRANSACTION_DATE_END,
                V_PAID_DATE_START,
                V_PAID_DATE_END,
                V_STOP_PAY_DATE_START,
                V_STOP_PAY_DATE_END,
                V_VOID_DATE_START,
                V_VOID_DATE_END,
                V_OUTSTANDING_DATE_START,
                V_OUTSTANDING_DATE_END,
                V_CHANGE_DATE_START,
                V_CHANGE_DATE_END,
                V_COUNTRY_TYPE,
                V_SUMMARY_DETAIL_TYPE,
                V_STATEMENT_TYPES
               -- V_USER_ID
                --V_ISSUE_DATE_START,
                --V_ISSUE_DATE_END,
                --V_ALL_DATE_START,
                --V_ALL_DATE_END,
                --V_MANUAL_DATE_START,
                --V_MANUAL_DATE_END,
                );

    SD_TABLE_IU_PKG.STORE_DRAFTS_ROWTYPE_SP(IN_TABLE_NAME,
                                            IN_ROW_DATA,
                                            V_TEMP_ROW);

    --over write the values given by the rowtype procedure as we need to set them here for querying
    V_TEMP_ROW.PAY_INDICATOR  := NULL;
    V_TEMP_ROW.VOID_INDICATOR := NULL;
    V_TEMP_ROW.STOP_INDICATOR := NULL;

    --Below process supports UI to pass comma seperated indicators like 'ALL,PAID,VOID,STOP,CHANGED,MANUAL,OUTSTANDING'
    IF V_STORE_DRAFT_INDICATOR IS NOT NULL THEN
        FOR rec IN (WITH DATA AS(SELECT V_STORE_DRAFT_INDICATOR str FROM dual)
                        SELECT regexp_substr(str,'[^,]+',1,level) str
                          FROM DATA
                       CONNECT BY regexp_substr(str, '[^,]+', 1, level) IS NOT NULL) LOOP
            CASE rec.str 
                WHEN 'PAID' THEN
                    V_TEMP_ROW.PAY_INDICATOR  := 'Y';
                WHEN 'VOID' THEN
                   V_TEMP_ROW.VOID_INDICATOR := 'Y';
                WHEN 'STOP' THEN
                    V_TEMP_ROW.STOP_INDICATOR := 'Y';
                WHEN 'ALL' THEN
                    V_ALL_IND := 'Y';
                WHEN 'CHANGED' THEN
                    V_CHANGED_IND := 'Y';
                WHEN 'OUTSTANDING' THEN
                    V_OUTSTANDING_IND := 'Y';
                WHEN 'MANUAL' THEN
                    V_MANUAL_IND := 'Y';
                ELSE NULL;
            END CASE;
        END LOOP;
    END IF;

    IF UPPER(V_SUMMARY_DETAIL_TYPE) = 'SUMMARY' THEN
        OPEN OUT_REF_CUR FOR
            SELECT COUNT(*) OVER () RESULT_COUNT,
                   A.*
              FROM (
            SELECT SD.*
              FROM STORE_DRAFTS SD
             WHERE NVL(SD.COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(SD.COST_CENTER_CODE,'XXX'))
               --AND NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE))) 
                 --                                           AND NVL(V_ISSUE_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_STOP_PAY_DATE_START,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_STOP_PAY_DATE_END,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_VOID_DATE_START,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_VOID_DATE_END,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_CHANGE_DATE_START,NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_CHANGE_DATE_END,NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(SD.DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(SD.DRAFT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(SD.TRANSACTION_NUMBER,'XXX'))
               AND INSTR(NVL(V_TRANSACTION_CODE,NVL(SD.POS_TRANSACTION_CODE,'XXX'))||',',NVL(SD.POS_TRANSACTION_CODE,'XXX')||',') > 0
               AND NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX')          = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(SD.CUSTOMER_JOB_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CUSTOMER_JOB_NUMBER,NVL(SD.CUSTOMER_JOB_NUMBER,'XXX'))
               AND EXISTS (SELECT 1
                             FROM COST_CENTER
                            WHERE COST_CENTER_CODE = SD.COST_CENTER_CODE
                              AND INSTR(NVL(V_STATEMENT_TYPES,NVL(STATEMENT_TYPE,'XXX'))||',',NVL(STATEMENT_TYPE,'XXX')||',') > 0)
               AND (
                    --NONE filter
                    V_STORE_DRAFT_INDICATOR IS NULL OR
                    --ALL filter
                    NVL(V_ALL_IND,'N') = 'Y' OR
                    --PAID filter
                    NVL(SD.PAY_INDICATOR,'N') = NVL(V_TEMP_ROW.PAY_INDICATOR,'X') OR
                    --STOP filter
                    NVL(SD.STOP_INDICATOR,'N') = NVL(V_TEMP_ROW.STOP_INDICATOR,'X') OR
                    --VOID filter
                    NVL(SD.VOID_INDICATOR,'N') = NVL(V_TEMP_ROW.VOID_INDICATOR,'X') OR
                    --CHANGED filter
                    (NVL(V_CHANGED_IND,' N') = 'Y' AND
                             NVL(SD.ORIGINAL_NET_AMOUNT,-1) <> NVL(SD.NET_AMOUNT,NVL(SD.ORIGINAL_NET_AMOUNT,-1)) AND
                             (SD.STOP_PAY_DATE > V_CHANGE_DATE_END OR SD.STOP_PAY_DATE IS NULL) AND
                             (SD.VOID_DATE > V_CHANGE_DATE_END OR SD.VOID_DATE IS NULL)) OR
                    --OUTSTANDING filter
                    (NVL(V_OUTSTANDING_IND,' N') = 'Y' AND
                             (NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_OUTSTANDING_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_OUTSTANDING_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)))) AND
                             (SD.PAID_DATE > V_OUTSTANDING_DATE_END OR SD.PAID_DATE IS NULL) AND
                             (SD.STOP_PAY_DATE > V_OUTSTANDING_DATE_END OR SD.STOP_PAY_DATE IS NULL) AND
                             (SD.VOID_DATE > V_OUTSTANDING_DATE_END OR SD.VOID_DATE IS NULL))
                   )
             /*  AND EXISTS (SELECT 1 
                             FROM HIERARCHY_DETAIL_VIEW 
                            WHERE COST_CENTER_CODE = SD.COST_CENTER_CODE 
                            AND DIVISION IN NVL((SELECT X.VALUE
                                                   FROM ROLE_DETAILS RD,
                                                        SECURITY_MATRIX SM,
                                                        XMLTABLE ('/USER_RULES_DESCRIPTION/STORE_DRAFTS_WINDOW/OUTSTANDING_DRFT_DIVISIONS/*'
                                                        PASSING RD.USER_RULES_DESCRIPTION
                                                        COLUMNS VALUE VARCHAR2(30) PATH 'text()') X
                                        WHERE SM.USER_ID   = NVL(V_USER_ID,'XXXXXX')
                                          AND SM.ROLE_CODE = RD.ROLE_CODE), DIVISION))*/
            UNION
            SELECT SD.*
              FROM UNATTACHED_MNL_DRFT_DTL SD
             WHERE NVL(SD.COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(SD.COST_CENTER_CODE,'XXX'))
               --AND NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE))) 
                 --                                           AND NVL(V_ISSUE_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_STOP_PAY_DATE_START,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_STOP_PAY_DATE_END,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_VOID_DATE_START,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_VOID_DATE_END,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(SD.DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(SD.DRAFT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(SD.TRANSACTION_NUMBER,'XXX'))
               AND INSTR(NVL(V_TRANSACTION_CODE,NVL(SD.POS_TRANSACTION_CODE,'XXX'))||',',NVL(SD.POS_TRANSACTION_CODE,'XXX')||',') > 0
               AND NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX')          = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(SD.CUSTOMER_JOB_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CUSTOMER_JOB_NUMBER,NVL(SD.CUSTOMER_JOB_NUMBER,'XXX'))
               AND EXISTS (SELECT 1
                             FROM COST_CENTER
                            WHERE COST_CENTER_CODE = SD.COST_CENTER_CODE
                              AND INSTR(NVL(V_STATEMENT_TYPES,NVL(STATEMENT_TYPE,'XXX'))||',',NVL(STATEMENT_TYPE,'XXX')||',') > 0)
               AND (
                    --NONE filter
                    V_STORE_DRAFT_INDICATOR IS NULL OR
                    --ALL filter
                    NVL(V_ALL_IND,'N') = 'Y' OR
                    --MANUAL filter
                    NVL(V_MANUAL_IND,'N') = 'Y'
                   )
               ) A;
               /*
              WHERE EXISTS (SELECT 1 
                              FROM HIERARCHY_DETAIL_VIEW 
                             WHERE COST_CENTER_CODE = A.COST_CENTER_CODE 
                               AND DIVISION IN NVL((SELECT X.VALUE
                                                      FROM ROLE_DETAILS RD,
                                                           SECURITY_MATRIX SM,
                                                           XMLTABLE ('/USER_RULES_DESCRIPTION/STORE_DRAFTS_WINDOW/OUTSTANDING_DRFT_DIVISIONS/*'
                                                           PASSING RD.USER_RULES_DESCRIPTION
                                                           COLUMNS VALUE VARCHAR2(30) PATH 'text()') X
                                                     WHERE SM.USER_ID   = NVL(V_USER_ID,'XXXXXX')
                                                       AND SM.ROLE_CODE = RD.ROLE_CODE), DIVISION));*/
    ELSIF UPPER(V_SUMMARY_DETAIL_TYPE) = 'DETAIL' THEN
        OPEN OUT_REF_CUR FOR
            SELECT COUNT(*) OVER () RESULT_COUNT,
                   A.*
              FROM (
            SELECT SD.*,
                   SDD.ITEM_EXT_AMOUNT,
                   DECODE(SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER,
                          '-',NULL,
                          SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER) AS GL_ACCOUNT_NUMBER
              FROM STORE_DRAFTS SD,
                   STORE_DRAFTS_DETAIL SDD
             WHERE NVL(SD.COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(SD.COST_CENTER_CODE,'XXX'))
               --AND NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE))) 
                 --                                           AND NVL(V_ISSUE_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_STOP_PAY_DATE_START,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_STOP_PAY_DATE_END,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_VOID_DATE_START,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_VOID_DATE_END,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_CHANGE_DATE_START,NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_CHANGE_DATE_END,NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(SD.DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(SD.DRAFT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(SD.TRANSACTION_NUMBER,'XXX'))
               AND INSTR(NVL(V_TRANSACTION_CODE,NVL(SD.POS_TRANSACTION_CODE,'XXX'))||',',NVL(SD.POS_TRANSACTION_CODE,'XXX')||',') > 0
               AND NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX')          = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(SD.CUSTOMER_JOB_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CUSTOMER_JOB_NUMBER,NVL(SD.CUSTOMER_JOB_NUMBER,'XXX'))
               AND EXISTS (SELECT 1
                             FROM COST_CENTER
                            WHERE COST_CENTER_CODE = SD.COST_CENTER_CODE
                              AND INSTR(NVL(V_STATEMENT_TYPES,NVL(STATEMENT_TYPE,'XXX'))||',',NVL(STATEMENT_TYPE,'XXX')||',') > 0)
               AND SD.COST_CENTER_CODE                        = SDD.COST_CENTER_CODE(+)
               AND SD.CHECK_SERIAL_NUMBER                     = SDD.CHECK_SERIAL_NUMBER(+)
               AND SD.TRANSACTION_DATE                        = SDD.TRANSACTION_DATE(+)
               AND NVL(SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER,'XXX') 
                                                              = NVL(V_GL_ACCOUNT_NUMBER,NVL(SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER,'XXX'))
               AND (
                    --NONE filter
                    V_STORE_DRAFT_INDICATOR IS NULL OR
                    --ALL filter
                    NVL(V_ALL_IND,'N') = 'Y' OR
                    --PAID filter
                    NVL(SD.PAY_INDICATOR,'N') = NVL(V_TEMP_ROW.PAY_INDICATOR,'X') OR
                    --STOP filter
                    NVL(SD.STOP_INDICATOR,'N') = NVL(V_TEMP_ROW.STOP_INDICATOR,'X') OR
                    --VOID filter
                    NVL(SD.VOID_INDICATOR,'N') = NVL(V_TEMP_ROW.VOID_INDICATOR,'X') OR
                    --CHANGED filter
                    (NVL(V_CHANGED_IND,' N') = 'Y' AND
                             NVL(SD.ORIGINAL_NET_AMOUNT,-1) <> NVL(SD.NET_AMOUNT,NVL(SD.ORIGINAL_NET_AMOUNT,-1)) AND
                             (SD.STOP_PAY_DATE > V_CHANGE_DATE_END OR SD.STOP_PAY_DATE IS NULL) AND
                             (SD.VOID_DATE > V_CHANGE_DATE_END OR SD.VOID_DATE IS NULL)) OR
                    --OUTSTANDING filter
                    (NVL(V_OUTSTANDING_IND,' N') = 'Y' AND
                             (NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_OUTSTANDING_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_OUTSTANDING_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)))) AND
                             (SD.PAID_DATE > V_OUTSTANDING_DATE_END OR SD.PAID_DATE IS NULL) AND
                             (SD.STOP_PAY_DATE > V_OUTSTANDING_DATE_END OR SD.STOP_PAY_DATE IS NULL) AND
                             (SD.VOID_DATE > V_OUTSTANDING_DATE_END OR SD.VOID_DATE IS NULL))
                   )
            UNION
            SELECT SD.*,
                   SDD.ITEM_EXT_AMOUNT, 
                   DECODE(SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER,
                          '-',NULL,
                          SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER) AS GL_ACCOUNT_NUMBER
              FROM UNATTACHED_MNL_DRFT_DTL SD,
                   STORE_DRAFTS_DETAIL SDD
             WHERE NVL(SD.COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(SD.COST_CENTER_CODE,'XXX'))
               --AND NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE))) 
                 --                                           AND NVL(V_ISSUE_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(SD.TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(SD.PAID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_STOP_PAY_DATE_START,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_STOP_PAY_DATE_END,NVL(SD.STOP_PAY_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_VOID_DATE_START,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_VOID_DATE_END,NVL(SD.VOID_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_CHANGE_DATE_START,NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE))) 
                                                            AND NVL(V_CHANGE_DATE_END,NVL(SD.CHANGE_DATE,TRUNC(V_DUMMY_DATE)))
               AND NVL(SD.DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(SD.DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(SD.DRAFT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(SD.TRANSACTION_NUMBER,'XXX'))
               AND INSTR(NVL(V_TRANSACTION_CODE,NVL(SD.POS_TRANSACTION_CODE,'XXX'))||',',NVL(SD.POS_TRANSACTION_CODE,'XXX')||',') > 0
               AND NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX')          = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(SD.CUSTOMER_JOB_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CUSTOMER_JOB_NUMBER,NVL(SD.CUSTOMER_JOB_NUMBER,'XXX'))
               AND EXISTS (SELECT 1
                             FROM COST_CENTER
                            WHERE COST_CENTER_CODE = SD.COST_CENTER_CODE
                              AND INSTR(NVL(V_STATEMENT_TYPES,NVL(STATEMENT_TYPE,'XXX'))||',',NVL(STATEMENT_TYPE,'XXX')||',') > 0)
               AND SD.COST_CENTER_CODE                        = SDD.COST_CENTER_CODE(+)
               AND SD.CHECK_SERIAL_NUMBER                     = SDD.CHECK_SERIAL_NUMBER(+)
               AND SD.TRANSACTION_DATE                        = SDD.TRANSACTION_DATE(+)
               AND NVL(SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER,'XXX') 
                                                              = NVL(V_GL_ACCOUNT_NUMBER,NVL(SDD.GL_PRIME_ACCOUNT_NUMBER||'-'||SDD.GL_SUB_ACCOUNT_NUMBER,'XXX'))
               AND (
                    --NONE filter
                    V_STORE_DRAFT_INDICATOR IS NULL OR
                    --ALL filter
                    NVL(V_ALL_IND,'N') = 'Y' OR
                    --MANUAL filter
                    NVL(V_MANUAL_IND,'N') = 'Y'
                   )
               ) A;
               /*
              WHERE EXISTS (SELECT 1 
                              FROM HIERARCHY_DETAIL_VIEW 
                             WHERE COST_CENTER_CODE = A.COST_CENTER_CODE 
                               AND DIVISION IN NVL((SELECT X.VALUE
                                                      FROM ROLE_DETAILS RD,
                                                           SECURITY_MATRIX SM,
                                                           XMLTABLE ('/USER_RULES_DESCRIPTION/STORE_DRAFTS_WINDOW/OUTSTANDING_DRFT_DIVISIONS/*'
                                                           PASSING RD.USER_RULES_DESCRIPTION
                                                           COLUMNS VALUE VARCHAR2(30) PATH 'text()') X
                                                     WHERE SM.USER_ID   = NVL(V_USER_ID,'XXXXXX')
                                                       AND SM.ROLE_CODE = RD.ROLE_CODE),DIVISION));*/
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STORE_DRAFTS_FILTER_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SUBSTR(SQLERRM,1,200));
END STORE_DRAFTS_FILTER_S_SP;

PROCEDURE STORE_DRAFTS_DTL_FILTER_S_SP (
/*******************************************************************************
	STORE_DRAFTS_DTL_FILTER_S_SP
  
	This procedure is intended to select records from STORE_DRAFTS_DETAIL table

<?xml version="1.0" encoding="UTF-8" ?>
<STORE_DRAFTS_DETAIL_UI_SP xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<STORE_DRAFTS_DETAIL>
<STORE_DRAFTS_DETAIL_ID>XXXXXXXXXXXXXXXXXXXXXX</STORE_DRAFTS_DETAIL_ID>
<COST_CENTER_CODE>XXXXXXXXXXXXXXXXXXXXXXXX</COST_CENTER_CODE>
<CHECK_SERIAL_NUMBER>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</CHECK_SERIAL_NUMBER>
  <TRANSACTION_DATE>03-30-2012</TRANSACTION_DATE>
  <TRANSACTION_DATE_START>03-30-2012</TRANSACTION_DATE_START>
<TERMINAL_NUMBER>XXXXXXXXXXXXXXXXXXXX</TERMINAL_NUMBER>
<TRANSACTION_NUMBER>XXXXXXXXXXXXXXXXXXXX</TRANSACTION_NUMBER>
<CUSTOMER_ACCOUNT_NUMBER>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</CUSTOMER_ACCOUNT_NUMBER>
<CUSTOMER_JOB_NUMBER>XXXXXXXX</CUSTOMER_JOB_NUMBER>
<GL_PRIME_ACCOUNT_NUMBER>XXXXXXXXXXXXXXXX</GL_PRIME_ACCOUNT_NUMBER>
<GL_SUB_ACCOUNT_NUMBER>XXXXXXXXXXXX</GL_SUB_ACCOUNT_NUMBER>
<ITEM_QUANTITY>XXXXXXXXXXXXXXXXXXXXXX</ITEM_QUANTITY>
<ITEM_PRICE>XXXXXXXXXXXXXXXXXXXXXX</ITEM_PRICE>
<ITEM_EXT_AMOUNT>XXXXXXXXXXXXXXXXXXXXXX</ITEM_EXT_AMOUNT>
<BOOK_DATE_SEQUENCE>XXXXXXXXXXXXXXXXXXXX</BOOK_DATE_SEQUENCE>
<LBR_TRANSACTION_DATE>MM-DD-RRRR</LBR_TRANSACTION_DATE>
<LBR_TERMINAL_NUMBER>XXXXXXXXXXXXXXXXXXXX</LBR_TERMINAL_NUMBER>
<LBR_TRANSACTION_NUMBER>XXXXXXXXXXXXXXXXXXXX</LBR_TRANSACTION_NUMBER>
</STORE_DRAFTS_DETAIL>
</STORE_DRAFTS_DETAIL_UI_SP>

Created : 11/03/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT SD_TABLE_IU_PKG.REF_CURSOR)
IS
    V_TEMP_ROW       STORE_DRAFTS_DETAIL%ROWTYPE;
    V_CHECK_RANGE_START      STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_CHECK_RANGE_END        STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_TRANSACTION_DATE_START STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_TRANSACTION_DATE_END   STORE_DRAFTS.TRANSACTION_DATE%TYPE;
BEGIN

    SD_TABLE_IU_PKG.STORE_DRAFTS_DETAIL_ROWTYPE_SP(IN_TABLE_NAME,
                                                   IN_ROW_DATA,
                                                   V_TEMP_ROW);

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHECK_RANGE_START/text()') = 1) THEN
        V_CHECK_RANGE_START := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHECK_RANGE_START/text()').GETSTRINGVAL();
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHECK_RANGE_END/text()') = 1) THEN
        V_CHECK_RANGE_END := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHECK_RANGE_END/text()').GETSTRINGVAL();
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_DATE_START/text()') = 1) THEN
        V_TRANSACTION_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_DATE_END/text()') = 1) THEN
        V_TRANSACTION_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM STORE_DRAFTS_DETAIL
         WHERE NVL(STORE_DRAFTS_DETAIL_ID,-1)              = NVL(V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID,NVL(STORE_DRAFTS_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           --AND NVL(TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
           AND NVL(TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))) 
                                                        AND NVL(V_TRANSACTION_DATE_END,NVL(TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(CUSTOMER_ACCOUNT_NUMBER,'XXX')          = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(CUSTOMER_ACCOUNT_NUMBER,'XXX'))
           AND NVL(CUSTOMER_JOB_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CUSTOMER_JOB_NUMBER,NVL(CUSTOMER_JOB_NUMBER,'XXX'))
           AND NVL(GL_PRIME_ACCOUNT_NUMBER,'XXX')          = NVL(V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER,NVL(GL_PRIME_ACCOUNT_NUMBER,'XXX'))
           AND NVL(GL_SUB_ACCOUNT_NUMBER,'XXX')            = NVL(V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER,NVL(GL_SUB_ACCOUNT_NUMBER,'XXX'))
           AND NVL(ITEM_QUANTITY,-1)                       = NVL(V_TEMP_ROW.ITEM_QUANTITY,NVL(ITEM_QUANTITY,-1))
           AND NVL(ITEM_PRICE,-1)                          = NVL(V_TEMP_ROW.ITEM_PRICE,NVL(ITEM_PRICE,-1))
           AND NVL(ITEM_EXT_AMOUNT,-1)                     = NVL(V_TEMP_ROW.ITEM_EXT_AMOUNT,NVL(ITEM_EXT_AMOUNT,-1))
           AND NVL(BOOK_DATE_SEQUENCE,'XXX')               = NVL(V_TEMP_ROW.BOOK_DATE_SEQUENCE,NVL(BOOK_DATE_SEQUENCE,'XXX'))
           AND NVL(LBR_TRANSACTION_DATE,TRUNC(V_DUMMY_DATE))    = NVL(V_TEMP_ROW.LBR_TRANSACTION_DATE,NVL(LBR_TRANSACTION_DATE,TRUNC(V_DUMMY_DATE)))
           AND NVL(LBR_TERMINAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.LBR_TERMINAL_NUMBER,NVL(LBR_TERMINAL_NUMBER,'XXX'))
           AND NVL(LBR_TRANSACTION_NUMBER,'XXX')           = NVL(V_TEMP_ROW.LBR_TRANSACTION_NUMBER,NVL(LBR_TRANSACTION_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STORE_DRAFTS_DTL_FILTER_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SUBSTR(SQLERRM,1,200));
END STORE_DRAFTS_DTL_FILTER_S_SP;

PROCEDURE SD_1099_MTCHD_PRCSNG_RPRT (
/*******************************************************************************
	This procedure is intended to select records from 
  MATCHED PROCESSING REPORT #1 BY STORE NO. & DRAFT NO.

Created : 06/19/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_DATE      IN     DATE
,OUT_REF_CUR    OUT SD_TABLE_IU_PKG.REF_CURSOR)
IS
BEGIN

    OPEN OUT_REF_CUR FOR
        SELECT SUBSTR(SD.COST_CENTER_CODE, 3) STORE_NUMBER,
               SD.DRAFT_NUMBER,
               SD.TRANSACTION_DATE,
               NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL,SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) AMOUNT,
               (SELECT VENDOR_NO FROM VENDOR_INFO WHERE TAX_ID = SD.TAX_ID AND ROWNUM < 2) VENDOR_NO,
               (SELECT VENDOR_NAME FROM VENDOR_INFO WHERE TAX_ID = SD.TAX_ID AND ROWNUM < 2) VENDOR_NAME,
               SD.TAX_ID
          FROM (SELECT COST_CENTER_CODE,
                       DRAFT_NUMBER,
                       TRANSACTION_DATE,
                       AMOUNT_CHANGE_DATE,
                       ORIGINAL_NET_AMOUNT,
                       NET_AMOUNT,
                       ccn_common_tools.DecryptSQL((SELECT TAXID
                                                      FROM CUSTOMER_TAXID_VW
                                                     WHERE CUSTNUM = CUSTOMER_ACCOUNT_NUMBER)) TAX_ID
                  FROM STORE_DRAFTS
                 WHERE TO_CHAR(FNCL_SRVCS_SENT_DATE,'MMYYYY') = TO_CHAR(IN_DATE,'MMYYYY')) SD
          WHERE EXISTS (SELECT 1
                         FROM VENDOR_INFO
                        WHERE TAX_ID = SD.TAX_ID
                          AND SITE_LAST_UPDATE_DATE < IN_DATE)
          ORDER BY 1,2;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_1099_MTCHD_PRCSNG_RPRT', SUBSTR(SQLERRM,1,200));
END SD_1099_MTCHD_PRCSNG_RPRT;

PROCEDURE SD_1099_NO_MTCHD_VENDOR_RPRT (
/*******************************************************************************
	This procedure is intended to select records from 
  NO MATCH FOUND ON VENDOR FILE BY STORE NO. & DRAFT NO.

Created : 06/19/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_DATE      IN     DATE
,OUT_REF_CUR    OUT SD_TABLE_IU_PKG.REF_CURSOR)
IS
BEGIN

    OPEN OUT_REF_CUR FOR
        SELECT SUBSTR(SD.COST_CENTER_CODE, 3) STORE_NUMBER,
               SD.DRAFT_NUMBER,
               SD.TRANSACTION_DATE,
               NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL,SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) AMOUNT,
               SD.TAX_ID
          FROM (SELECT COST_CENTER_CODE,
                       DRAFT_NUMBER,
                       TRANSACTION_DATE,
                       AMOUNT_CHANGE_DATE,
                       ORIGINAL_NET_AMOUNT,
                       NET_AMOUNT,
                       ccn_common_tools.DecryptSQL((SELECT TAXID
                                                      FROM CUSTOMER_TAXID_VW
                                                     WHERE CUSTNUM = CUSTOMER_ACCOUNT_NUMBER)) TAX_ID
                  FROM STORE_DRAFTS                 
                 WHERE TO_CHAR(FNCL_SRVCS_SENT_DATE,'MMYYYY') = TO_CHAR(IN_DATE,'MMYYYY')) SD
          WHERE NOT EXISTS (SELECT 1
                              FROM VENDOR_INFO
                             WHERE TAX_ID = SD.TAX_ID
                               AND SITE_LAST_UPDATE_DATE < IN_DATE)
          ORDER BY 1,2;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_1099_NO_MTCHD_VENDOR_RPRT', SUBSTR(SQLERRM,1,200));
END SD_1099_NO_MTCHD_VENDOR_RPRT;

PROCEDURE SD_1099_NO_VNDR_ON_BNK_TP_RPRT (
/*******************************************************************************
	This procedure is intended to select records from 
  NO MATCH FOUND ON BANK TAPE FILE BY STORE NO. & DRAFT NO.

Created : 06/19/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_DATE      IN     DATE
,OUT_REF_CUR    OUT SD_TABLE_IU_PKG.REF_CURSOR)
IS
BEGIN

    OPEN OUT_REF_CUR FOR
        SELECT SUBSTR(SD.COST_CENTER_CODE, 3) STORE_NUMBER,
               SD.DRAFT_NUMBER,
               SD.TRANSACTION_DATE,
               NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL,SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) AMOUNT,
               SD.TAX_ID
          FROM (SELECT COST_CENTER_CODE,
                       DRAFT_NUMBER,
                       TRANSACTION_DATE,
                       AMOUNT_CHANGE_DATE,
                       ORIGINAL_NET_AMOUNT,
                       NET_AMOUNT,
                       ccn_common_tools.DecryptSQL((SELECT TAXID
                                                      FROM CUSTOMER_TAXID_VW
                                                     WHERE CUSTNUM = CUSTOMER_ACCOUNT_NUMBER)) TAX_ID
                  FROM STORE_DRAFTS                 
                 WHERE TO_CHAR(FNCL_SRVCS_SENT_DATE,'MMYYYY') = TO_CHAR(IN_DATE,'MMYYYY')) SD
          WHERE SD.TAX_ID IS NULL
          ORDER BY 1,2;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_1099_NO_VNDR_ON_BNK_TP_RPRT', SUBSTR(SQLERRM,1,200));
END SD_1099_NO_VNDR_ON_BNK_TP_RPRT;

END SD_UI_REPORTS_PKG;