create or replace PACKAGE BODY SD_BANKFILES_PKG 
/****************************************************************************** 
THIS PACKAGE BODY WILL HOLD ALL PL/SQL OBJECTS THAT ARE NEEDED TO 
CREATE AND BUILD THE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS FOR U.S.,CAN, AUTOMOTIVE CAN AND AUTOMOTIVE U.S. STORES. 

CREATED : 07/23/2014 NXK 

REVISIONS: 
******************************************************************************/ 
AS 

FUNCTION IS_BANK_ACCOUNT_CHANGED(
/***************************************************************************** 
        IS_BANK_ACCOUNT_CHANGED 

This function will say if the bank account has been changed or not

Created : 07/23/2014 NXK 
Modified: 
*****************************************************************************/ 
    IN_PREV_BANK_ACCOUNT_NUMBER IN VARCHAR2, 
    IN_CURR_BANK_ACCOUNT_NUMBER IN VARCHAR2) RETURN BOOLEAN 
IS 
BEGIN 
    RETURN (NVL(IN_PREV_BANK_ACCOUNT_NUMBER,'X')<>NVL(IN_CURR_BANK_ACCOUNT_NUMBER,'X')); 
END IS_BANK_ACCOUNT_CHANGED; 

PROCEDURE CREATE_US_AUTO_BANK_FILE(
/***************************************************************************** 
        CREATE US_AUTO FILE  FILE 

THIS PROCEDURE WILL BUILD THE US  AUTOMOTIVE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS 

Created : 07/23/2014 NXK 
Modified: 
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                         SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         TO_CHAR(SD.ISSUE_DATE,'YYYYMMDD') ISSUE_DATE,
                         SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                         SD.NET_AMOUNT * 100 AS NET_AMOUNT,
                         (SELECT SUM(ITEM_EXT_AMOUNT)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER =SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_EXT_AMOUNT,
                         (SELECT SUM(ITEM_QUANTITY)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                         SD.TRANSACTION_SOURCE,
                         TO_CHAR(SD.TRANSACTION_DATE,'YYYYMMDD') TRANSACTION_DATE,
                         SD.PAYEE_NAME,
                         TO_CHAR(SD.PAID_DATE,'YYYYMMDD') PAID_DATE,
                         SD.CHANGE_SOURCE,
                         SD.VOID_INDICATOR,
                         SD.PAY_INDICATOR,
                         SD.STOP_INDICATOR,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.TRANSACTION_DATE = IN_DATE
           AND CH.STATEMENT_TYPE   = 'US'--'AU'
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE COST_CENTER_CODE    = SD.COST_CENTER_CODE
                              AND CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
         ORDER BY BANK_ACCOUNT_NUMBER;

    V_OUT_CLOB                   CLOB;
    v_prev_rec                   SD_CUR%ROWTYPE;

    PATH          VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME      VARCHAR2(50) := 'US_AUTO';
    STAMP         VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE   UTL_FILE.FILE_TYPE;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP
        IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER)THEN
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                V_OUT_CLOB := V_OUT_CLOB
                              --ACCOUNT BATCH TRAILER RECORD
                              || '*98'
                              ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                              || '  ' --NBR-BATCHS,
                              ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                              ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                              || '                                   '
                              || CHR(10)
                              --FILE TRAILER RECORD
                              || '*99'
                              ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                              || '  ' --NBR-BATCHS,
                              ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                              ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                              || '                                   '
                              || CHR(10);
            END IF;
            V_OUT_CLOB := V_OUT_CLOB
                          --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                          || '*00'
                          ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                          ||LPAD( SD_REC.BANK_NUMBER, 3, 0 )
                          ||LPAD( SD_REC.ISSUE_DATE, 10, 0 )
                          || '                                                '
                          || CHR(10);
        END IF;
        V_OUT_CLOB := V_OUT_CLOB
                      --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                      || '*10'
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 9, 0 )
                      ||RPAD( SD_REC.PAYEE_NAME, 16, 0 )
                      ||'111111111'
                      || '                      '
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (ADDTL SOURCE)
                      || '*13'
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||'111111111'
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 9, 0 )
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (CHANGE ISSUE AMT)
                      || '*15'
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.NET_AMOUNT, 9, 0 )
                      || '                                              '
                      || CHR(10);
        --ACCOUNT DETAIL RECORD (STOP ITEM)
        CASE
            WHEN SD_REC.STOP_INDICATOR = 'Y' THEN
                V_OUT_CLOB := V_OUT_CLOB
                              || '*22'
                              ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.TRANSACTION_DATE,6, 0 )
                              ||RPAD( SD_REC.PAYEE_NAME, 16, 0 )
                              || '                                   '
                              || CHR(10)
                              --ACCOUNT DETAIL RECORD (REMOVE STOP ITEM)
                              || '*24'
                              ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.TRANSACTION_DATE,6, 0 )
                              ||RPAD( SD_REC.PAYEE_NAME, 16, 0 )
                              || '                                   '
                              || CHR(10);
            WHEN SD_REC.VOID_INDICATOR = 'Y' THEN
                V_OUT_CLOB := V_OUT_CLOB
                              || '*26'
                              ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.TRANSACTION_DATE,6, 0 )
                              || '                                                   '
                              || CHR(10);
            ELSE
                NULL;
        END CASE;
        v_prev_rec                 := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
        V_OUT_CLOB := V_OUT_CLOB
                      --ACCOUNT BATCH TRAILER RECORD
                      || '*98'
                      ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '  ' --NBR-BATCHS,
                      ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                      ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                      || '                                   '
                      || CHR(10)
                      --FILE TRAILER RECORD
                      || '*99'
                      ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '  ' --NBR-BATCHS,
                      ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                      ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                      || '                                   '
                      || CHR(10);
    END IF;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_US_AUTO_BANK_FILE; 

PROCEDURE CREATE_US_NONAUTO_FILE(
/***************************************************************************** 
        CREATE US_AUTO FILE 

THIS PROCEDURE WILL BUILD THE US  STORE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS 

Created : 07/23/2014 NXK 
Modified: 
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                         SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         TO_CHAR(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                         SD.NET_AMOUNT * 100 AS NET_AMOUNT,
                         (SELECT SUM(ITEM_EXT_AMOUNT)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER =SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_EXT_AMOUNT,
                         (SELECT SUM(ITEM_QUANTITY)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                         SD.TRANSACTION_SOURCE,
                         TO_CHAR(SD.TRANSACTION_DATE,'MMDDYY') TRANSACTION_DATE,
                         SD.PAYEE_NAME,
                         TO_CHAR(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         SD.CHANGE_SOURCE,
                         SD.VOID_INDICATOR,
                         SD.PAY_INDICATOR,
                         SD.STOP_INDICATOR,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.TRANSACTION_DATE = IN_DATE
           AND CH.STATEMENT_TYPE  NOT IN ('CN', 'DC', 'QC', 'AU', 'AC')
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE COST_CENTER_CODE    = SD.COST_CENTER_CODE
                              AND CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
         ORDER BY BANK_ACCOUNT_NUMBER;

    V_OUT_CLOB                   CLOB;
    v_prev_rec                   SD_CUR%ROWTYPE;

    PATH         VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME     VARCHAR2(50) := 'US_STORE';
    STAMP        VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE  UTL_FILE.FILE_TYPE;
BEGIN 
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP
        IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER)THEN
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                V_OUT_CLOB := V_OUT_CLOB
                              --ACCOUNT BATCH TRAILER RECORD
                              || '*98'
                              ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                              || '  ' --NBR-BATCHS,
                              ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                              ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                              || '                                   '
                              || CHR(10)
                              --FILE TRAILER RECORD
                              || '*99'
                              ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                              || '01' --NBR-BATCHS,
                              ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                              ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                              || '                                   '
                              || CHR(10);
            END IF;
            V_OUT_CLOB := V_OUT_CLOB
                          --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                          || '*00'
                          ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                          ||LPAD( SD_REC.BANK_NUMBER, 3, 0 )
                          ||LPAD( SD_REC.ISSUE_DATE, 10, 0 )
                          || '                                                '
                          || CHR(10);
        END IF;
        V_OUT_CLOB := V_OUT_CLOB
                      --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                      || '*10'
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 9, 0 )
                      ||RPAD( SD_REC.PAYEE_NAME, 16, 0 )
                      ||'111111111'
                      || '                      '
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (ADDTL SOURCE)
                      || '*13'
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||'111111111'
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 9, 0 )
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (CHANGE ISSUE AMT)
                      || '*15'
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.NET_AMOUNT, 9, 0 )
                      || '                                              '
                      || CHR(10);
        --ACCOUNT DETAIL RECORD (STOP ITEM)
        CASE
            WHEN SD_REC.STOP_INDICATOR = 'Y' THEN
                V_OUT_CLOB := V_OUT_CLOB
                              || '*22'
                              ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.TRANSACTION_DATE,6, 0 )
                              ||RPAD( SD_REC.PAYEE_NAME, 16, 0 )
                              || '                                   '
                              || CHR(10)
                              --ACCOUNT DETAIL RECORD (REMOVE STOP ITEM)
                              || '*24'
                              ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.TRANSACTION_DATE,6, 0 )
                              ||RPAD( SD_REC.PAYEE_NAME, 16, 0 )
                              || '                                   '
                              || CHR(10);
            WHEN SD_REC.VOID_INDICATOR = 'Y' THEN
                V_OUT_CLOB := V_OUT_CLOB
                              || '*26'
                              ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                              ||LPAD( SD_REC.TRANSACTION_DATE,6, 0 )
                              || '                                                   '
                              || CHR(10);
            ELSE
                NULL;
        END CASE;
        v_prev_rec                 := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
        V_OUT_CLOB := V_OUT_CLOB
                      --ACCOUNT BATCH TRAILER RECORD
                      || '*98'
                      ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '  ' --NBR-BATCHS,
                      ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                      ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                      || '                                   '
                      || CHR(10)
                      --FILE TRAILER RECORD
                      || '*99'
                      ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '  ' --NBR-BATCHS,
                      ||LPAD( v_prev_rec.ITEM_QUANTITY, 9, 0 )
                      ||LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                      || '                                   '
                      || CHR(10);
    END IF;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_US_NONAUTO_FILE; 

PROCEDURE CREATE_US_AUTO_PAID_FILE(
/***************************************************************************** 
        CREATE US_AUTO_PAID FILE  FILE 

THIS PROCEDURE WILL BUILD THE US  AUTOMOTIVE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS 

CREATED : 07/23/2014 NXK 
REVISION: 
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    CURSOR SD_CUR IS
        SELECT DISTINCT SD.COST_CENTER_CODE,
                        SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                        SD.CHECK_SERIAL_NUMBER,
                        SD.BANK_NUMBER,
                        SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                        SD.NET_AMOUNT * 100 AS NET_AMOUNT,
                        (SELECT SUM(ITEM_QUANTITY)
                           FROM STORE_DRAFTS_DETAIL SDD
                          WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                            AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                        SD.TRANSACTION_SOURCE,
                        TO_CHAR(SD.PAID_DATE,'YYYYMMDD') PAID_DATE,
                        SD.CHANGE_SOURCE,
                        CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.TRANSACTION_DATE = IN_DATE
           AND SD.PAY_INDICATOR    = 'Y'
           AND CH.STATEMENT_TYPE   = 'AC'
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE COST_CENTER_CODE    = SD.COST_CENTER_CODE
                              AND CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')           
         ORDER BY BANK_ACCOUNT_NUMBER;

    V_TOTAL_COUNT                NUMBER := 0; 
    V_TOTAL_AMOUNT               NUMBER := 0; 
    V_OUT_CLOB                   CLOB;
    v_prev_rec                   SD_CUR%ROWTYPE; 

    PATH           VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE 
    FILENAME       VARCHAR2(50) := 'US_AUTO_PAID'; 
    STAMP          VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE 
    OUTPUT_FILE    UTL_FILE.FILE_TYPE; 
BEGIN 
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP
        IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER) THEN 
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN 
                V_OUT_CLOB := V_OUT_CLOB
                              || '*98'
                              ||LPAD( v_prev_rec.BANK_NUMBER, 3, 0 )
                              ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                              || '                                          '
                              ||LPAD( V_TOTAL_COUNT, 9, 0 )
                              ||LPAD( V_TOTAL_AMOUNT, 10, 0 );
                V_TOTAL_COUNT  := 0;
                V_TOTAL_AMOUNT := 0;
            END IF;
            V_OUT_CLOB := V_OUT_CLOB
                          || '*00'
                          ||LPAD( SD_REC.BANK_NUMBER, 3, 0 )
                          ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || '                                                        '
                          ||LPAD( SD_REC.PAID_DATE, 6, 0 )
                          || CHR(10);
        END IF;
        V_OUT_CLOB := V_OUT_CLOB
                      || '*50'
                      ||LPAD( SD_REC.BANK_NUMBER, 3, 0 )
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.PAID_DATE, 6, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 8, 0 )
                      ||LPAD( SD_REC.CHANGE_SOURCE, 9, 0 )
                      || '                             '
                      || CHR(10);
        V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + SD_REC.BANK_PAID_AMOUNT;
        v_prev_rec     := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
        ---CPR PAID ITEM FILE HEADER RECORD
        V_OUT_CLOB := V_OUT_CLOB
                      || '*98'
                      ||LPAD( v_prev_rec.BANK_NUMBER, 3, 0 )
                      ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                      || '                                          '
                      ||LPAD( V_TOTAL_COUNT, 9, 0 )
                      ||LPAD( V_TOTAL_AMOUNT, 10, 0 );
    END IF;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_US_AUTO_PAID_FILE;

PROCEDURE CREATE_US_NONAUTO_PAID_FILE(
/***************************************************************************** 
        CREATE US_AUTO FILE 

THIS PROCEDURE WILL BUILD THE US  STORE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS 

CREATED : 07/23/2014 NXK 
REVISION: 

*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    CURSOR SD_CUR IS
        SELECT DISTINCT SD.COST_CENTER_CODE,
                        SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                        SD.CHECK_SERIAL_NUMBER,
                        SD.BANK_NUMBER,
                        SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                        SD.NET_AMOUNT * 100 AS NET_AMOUNT,
                        (SELECT SUM(ITEM_QUANTITY)
                           FROM STORE_DRAFTS_DETAIL SDD
                          WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                            AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                        SD.TRANSACTION_SOURCE,
                        TO_CHAR(SD.PAID_DATE,'YYYYMMDD') PAID_DATE,
                        SD.CHANGE_SOURCE,
                        CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.TRANSACTION_DATE = IN_DATE
           AND SD.PAY_INDICATOR    = 'Y'
           AND CH.STATEMENT_TYPE   NOT IN ('CN', 'DC', 'QC', 'AU', 'AC')
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE COST_CENTER_CODE    = SD.COST_CENTER_CODE
                              AND CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
         ORDER BY BANK_ACCOUNT_NUMBER;

    V_TOTAL_COUNT                NUMBER := 0; 
    V_TOTAL_AMOUNT               NUMBER := 0; 
    V_OUT_CLOB                   CLOB; 
    v_prev_rec                   SD_CUR%ROWTYPE; 

    PATH           VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE 
    FILENAME       VARCHAR2(50) := 'US_AUTO_PAID'; 
    STAMP          VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE 
    OUTPUT_FILE    UTL_FILE.FILE_TYPE;
BEGIN 
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP
        IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER) THEN 
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN 
                V_OUT_CLOB := V_OUT_CLOB
                              || '*98'
                              ||LPAD( v_prev_rec.BANK_NUMBER, 3, 0 )
                              ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                              || '                                          '
                              ||LPAD( V_TOTAL_COUNT, 9, 0 )
                              ||LPAD( V_TOTAL_AMOUNT, 10, 0 );
                V_TOTAL_COUNT  := 0;
                V_TOTAL_AMOUNT := 0;
            END IF;
            V_OUT_CLOB := V_OUT_CLOB
                          || '*00'
                          ||LPAD( SD_REC.BANK_NUMBER, 3, 0 )
                          ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || '                                                        '
                          ||LPAD( SD_REC.PAID_DATE, 6, 0 )
                          || CHR(10);
        END IF;
        V_OUT_CLOB := V_OUT_CLOB
                      || '*50'
                      ||LPAD( SD_REC.BANK_NUMBER, 3, 0 )
                      ||LPAD( SD_REC.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_REC.PAID_DATE, 6, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 8, 0 )
                      ||LPAD( SD_REC.CHANGE_SOURCE, 9, 0 )
                      || '                             '
                      || CHR(10);
        V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + SD_REC.BANK_PAID_AMOUNT;
        v_prev_rec     := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
        ---CPR PAID ITEM FILE HEADER RECORD
        V_OUT_CLOB := V_OUT_CLOB
                      || '*98'
                      ||LPAD( v_prev_rec.BANK_NUMBER, 3, 0 )
                      ||LPAD( v_prev_rec.BANK_ACCOUNT_NUMBER, 10, 0 )
                      || '                                          '
                      ||LPAD( V_TOTAL_COUNT, 9, 0 )
                      ||LPAD( V_TOTAL_AMOUNT, 10, 0 );
    END IF;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_US_NONAUTO_PAID_FILE; 

PROCEDURE CREATE_CAN_NONAUTO_FILE(
/***************************************************************************** 
        CREATE_CAN_NONAUTO_FILE 

THIS PROCEDURE WILL BUILD THE CAN STORE NON AUTO FILE 

CREATED : 08/07/2014 NXK 
REVISION: 

*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                         'xxxx' as FILE_CNTRL_NBR,
                         SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         SD.BANK_PAID_AMOUNT * 100 as BANK_PAID_AMOUNT,
                         to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         to_char(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.TRANSACTION_DATE = IN_DATE
           AND CH.STATEMENT_TYPE   IN ('CN', 'DC', 'QC')
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE COST_CENTER_CODE    = SD.COST_CENTER_CODE
                              AND CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
          ORDER BY BANK_ACCOUNT_NUMBER; 

    V_OUT_CLOB                   CLOB;
    V_TOTAL_COUNT                NUMBER := 0;
    V_TOTAL_AMOUNT               NUMBER := 0;
    v_prev_rec                   SD_CUR%ROWTYPE;

    PATH                    VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                            VARCHAR2(50) := 'CAN_NONAUTO_FILE';
    STAMP                               VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE                         UTL_FILE.FILE_TYPE;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP 
        IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER) THEN 
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN 
                V_OUT_CLOB := V_OUT_CLOB
                              || '*999'
                              || '042221012830'
                              ||  V_TOTAL_COUNT
                              ||  V_TOTAL_AMOUNT
                              || '                                            '; 
            END IF;
            V_OUT_CLOB := V_OUT_CLOB
                          || '*000' 
                          || '042221012830' 
                          ||  SD_REC.FILE_CNTRL_NBR 
                          || '                                                             ' 
                          || CHR(10) 
                          || '*300' 
                          || '042221012830' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 ) 
                          ||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 ) 
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 ) 
                          || '         ' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 ) 
                          ||LPAD(SD_REC.ISSUE_DATE,6,0) 
                          ||LPAD(SD_REC.PAID_DATE,6,0) 
                          || CHR(10);
        END IF;
        V_OUT_CLOB := V_OUT_CLOB
                      || '*300'
                      || '042221012830'
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '         '
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 )
                      ||LPAD(SD_REC.ISSUE_DATE,6,0)
                      ||LPAD(SD_REC.PAID_DATE,6,0)
                      || CHR(10);
        V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + v_prev_rec.BANK_PAID_AMOUNT;
        v_prev_rec     := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                V_OUT_CLOB := V_OUT_CLOB
                              || '*999'
                              || '042221012830'
                              ||  V_TOTAL_COUNT
                              ||  V_TOTAL_AMOUNT
                              || '                                            ';
    END IF;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_CAN_NONAUTO_FILE; 



PROCEDURE CREATE_CAN_AUTO_FILE(
/***************************************************************************** 
        CREATE_CAN_AUTO_FILE 

THIS PROCEDURE WILL BUILD THE CAN STORE NON AUTO FILE 

CREATED : 08/07/2014 NXK 
REVISION: 

*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                         'XXXX' AS FILE_CNTRL_NBR,
                         SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                         TO_CHAR(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         TO_CHAR(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.TRANSACTION_DATE = IN_DATE
           AND CH.STATEMENT_TYPE  = 'US'--'AC'
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE COST_CENTER_CODE    = SD.COST_CENTER_CODE
                              AND CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
         ORDER BY BANK_ACCOUNT_NUMBER; 

    V_OUT_CLOB                   CLOB;
    V_TOTAL_COUNT                NUMBER := 0;
    V_TOTAL_AMOUNT               NUMBER := 0;
    v_prev_rec                   SD_CUR%ROWTYPE;

    PATH                    VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                            VARCHAR2(50) := 'CAN_NONAUTO_FILE';
    STAMP                               VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE                         UTL_FILE.FILE_TYPE;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP 
        IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER) THEN 
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN 
                V_OUT_CLOB := V_OUT_CLOB
                              || '*999'
                              || '042221012830'
                              ||  V_TOTAL_COUNT
                              ||  V_TOTAL_AMOUNT
                              || '                                            '; 
            END IF;
            V_OUT_CLOB := V_OUT_CLOB
                          || '*000' 
                          || '042221012830' 
                          ||  SD_REC.FILE_CNTRL_NBR 
                          || '                                                             ' 
                          || CHR(10) 
                          || '*300' 
                          || '042221012830' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 ) 
                          ||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 ) 
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 ) 
                          || '         ' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 ) 
                          ||LPAD(SD_REC.ISSUE_DATE,6,0) 
                          ||LPAD(SD_REC.PAID_DATE,6,0) 
                          || CHR(10);
        END IF;
        V_OUT_CLOB := V_OUT_CLOB
                      || '*300'
                      || '042221012830'
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '         '
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 )
                      ||LPAD(SD_REC.ISSUE_DATE,6,0)
                      ||LPAD(SD_REC.PAID_DATE,6,0)
                      || CHR(10);
        V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + v_prev_rec.BANK_PAID_AMOUNT;
        v_prev_rec     := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                V_OUT_CLOB := V_OUT_CLOB
                              || '*999'
                              || '042221012830'
                              ||  V_TOTAL_COUNT
                              ||  V_TOTAL_AMOUNT
                              || '                                            ';
    END IF;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_CAN_AUTO_FILE; 

END SD_BANKFILES_PKG;

