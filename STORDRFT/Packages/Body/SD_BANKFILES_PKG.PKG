create or replace PACKAGE BODY SD_BANKFILES_PKG 
/****************************************************************************** 
THIS PACKAGE BODY WILL HOLD ALL PL/SQL OBJECTS THAT ARE NEEDED TO 
CREATE AND BUILD THE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS FOR U.S.,CAN, AUTOMOTIVE CAN AND AUTOMOTIVE U.S. STORES. 

CREATED : 07/23/2014 NXK 

REVISIONS: 
******************************************************************************/ 
AS 

FUNCTION IS_BANK_ACCOUNT_CHANGED(
/***************************************************************************** 
        IS_BANK_ACCOUNT_CHANGED 

This function will say if the bank account has been changed or not

Created : 07/23/2014 NXK 
Modified: 
*****************************************************************************/ 
    IN_PREV_BANK_ACCOUNT_NUMBER IN VARCHAR2, 
    IN_CURR_BANK_ACCOUNT_NUMBER IN VARCHAR2) RETURN BOOLEAN 
IS 
BEGIN 
    RETURN (NVL(IN_PREV_BANK_ACCOUNT_NUMBER,'X')<>NVL(IN_CURR_BANK_ACCOUNT_NUMBER,'X')); 
END IS_BANK_ACCOUNT_CHANGED; 

PROCEDURE CREATE_US_AUTO_BANK_FILE(
/***************************************************************************** 
        CREATE US_AUTO FILE  FILE 

THIS PROCEDURE WILL BUILD THE US  AUTOMOTIVE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS 

Created : 07/23/2014 NXK 
Modified: 02/13/2015 DXV848 Added condition - if amount_change_date is null then use original_net_amount else use net_amount
        : 09/27/2017 nxk927
          added condition to check for the data that has been inserted after the last batch run and
          passing the date as variable
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    V_DATE        DATE := CCN_BATCH_PKG.GET_LAST_STARTDATE('SD_DAILY_DRFT_LOAD');

    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                         --SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         '8800600853' as BANK_ACCOUNT_NUMBER,
                         nvl(SD.CHECK_SERIAL_NUMBER,0) CHECK_SERIAL_NUMBER,
                         --SD.BANK_NUMBER,
                         '088' as BANK_NUMBER,
                        -- TO_CHAR(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         TO_CHAR(sysdate,'MMDDYY') ISSUE_DATE,
                         SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         (SELECT SUM(ITEM_EXT_AMOUNT)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER =SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_EXT_AMOUNT,
                         (SELECT SUM(ITEM_QUANTITY)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                         SD.TRANSACTION_SOURCE,
                         TO_CHAR(SD.TRANSACTION_DATE,'YYYYMMDD') TRANSACTION_DATE,
                         SD.PAYEE_NAME,
                         TO_CHAR(SD.PAID_DATE,'YYYYMMDD') PAID_DATE,
                         SD.CHANGE_SOURCE,
                         SD.VOID_INDICATOR,
                         SD.PAY_INDICATOR,
                         SD.STOP_INDICATOR,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.LOAD_DATE        > V_DATE
           AND CH.STATEMENT_TYPE   = 'AU'
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
            AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
           UNION 
         SELECT  DISTINCT SD.COST_CENTER_CODE,
                         --SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         '8800600853' as BANK_ACCOUNT_NUMBER,
                         nvl(SD.CHECK_SERIAL_NUMBER,0) CHECK_SERIAL_NUMBER,
                         --SD.BANK_NUMBER,
                         '088' as BANK_NUMBER,
                        -- TO_CHAR(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         TO_CHAR(sysdate,'MMDDYY') ISSUE_DATE,
                         SD.BANK_PAID_AMOUNT * 100 AS BANK_PAID_AMOUNT,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         (SELECT SUM(ITEM_EXT_AMOUNT)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER =SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_EXT_AMOUNT,
                         (SELECT SUM(ITEM_QUANTITY)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                         SD.TRANSACTION_SOURCE,
                         TO_CHAR(SD.TRANSACTION_DATE,'YYYYMMDD') TRANSACTION_DATE,
                         SD.PAYEE_NAME,
                         TO_CHAR(SD.PAID_DATE,'YYYYMMDD') PAID_DATE,
                         SD.CHANGE_SOURCE,
                         SD.VOID_INDICATOR,
                         SD.PAY_INDICATOR,
                         SD.STOP_INDICATOR,
                         CH.STATEMENT_TYPE
          FROM UNATTACHED_MNL_DRFT_DTL SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND SD.LOAD_DATE        > V_DATE
           AND CH.STATEMENT_TYPE   = 'AU'
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
         ORDER BY BANK_ACCOUNT_NUMBER, CHECK_SERIAL_NUMBER
         ;

    V_OUT_CLOB                   CLOB;
    V_TOTAL_AMOUNT               NUMBER := 0;
    PATH          VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME      VARCHAR2(50) := 'DLY_DRAFT_US_AM';
    STAMP         VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE   UTL_FILE.FILE_TYPE;
	  V_PREV_REC                 SD_CUR_REC_TYPE;
    v_count number := 1;

	--Local procedures to build the CLOB categorically
PROCEDURE BUILD_HEADER(
/*****************************************************************************
	BUILD_HEADER

THIS PROCEDURE WILL BUILD THE HEADER WITH THE DETAILS PASSED IN

CREATED : 10/16/2014 NXK927 
REVISION: 
*****************************************************************************/
    IN_RECORD   IN     SD_CUR_REC_TYPE,
    IN_OUT_CLOB IN OUT CLOB)
IS
BEGIN
     IN_OUT_CLOB := IN_OUT_CLOB
                --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                || '*00'
                ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                || '0000000000'
                --||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                ||LPAD( IN_RECORD.BANK_NUMBER, 3, 0 )
                ||LPAD( IN_RECORD.ISSUE_DATE, 6, 0 )
                || '                                                '
                || CHR(10);
END BUILD_HEADER;
	
PROCEDURE BUILD_BODY(
/*****************************************************************************
	BUILD_BODY

THIS PROCEDURE WILL BUILD THE BODY WITH THE DETAILS PASSED IN

CREATED : 10/16/2014 NXK927 
REVISION: 
*****************************************************************************/
    IN_RECORD   IN     SD_CUR_REC_TYPE,
    IN_OUT_CLOB IN OUT CLOB)
IS
BEGIN
v_count := v_count +1 ;
V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + IN_RECORD.NET_AMOUNT;
    IN_OUT_CLOB := IN_OUT_CLOB
                  --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                      || '*10'
                      ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_COMMON_TOOLS.GET_HEX_VALUE_FOR_TRNSCTN_TYP('10',IN_RECORD.NET_AMOUNT), 11, 0 )
                      ||RPAD( IN_RECORD.PAYEE_NAME, 15, ' ' )
                      ||'111111111'
                      || '                      ';
                      /*
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (ADDTL SOURCE)
                      || '*13'
                      ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||'111111111'
                      ||LPAD( IN_RECORD.BANK_PAID_AMOUNT, 9, 0 )
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (CHANGE ISSUE AMT)
                      || '*15'
                      ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.NET_AMOUNT, 9, 0 )
                      || '                                              '
                      ;
    --ACCOUNT DETAIL RECORD (STOP ITEM)
    CASE 
        WHEN IN_RECORD.STOP_INDICATOR = 'Y' THEN 
            IN_OUT_CLOB := IN_OUT_CLOB 
                          || '*22'	
                          || LPAD(IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.TRANSACTION_DATE,6, 0 )
                          || RPAD(IN_RECORD.PAYEE_NAME, 16, 0 )
                          || '                                   ' 
                          || CHR(10)
                          --ACCOUNT DETAIL RECORD (REMOVE STOP ITEM)	 
                          || '*24'
                          || LPAD(IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.TRANSACTION_DATE,6, 0 )
                          || RPAD(IN_RECORD.PAYEE_NAME, 16, 0 )
                          || '                                   ' 
                          || CHR(10);
        WHEN IN_RECORD.VOID_INDICATOR = 'Y' THEN
            IN_OUT_CLOB := IN_OUT_CLOB 
                          || '*26'
                          || LPAD(IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.TRANSACTION_DATE,6, 0 )
                          || '                                                   ' 
                          || CHR(10);
        ELSE
            NULL;
    END CASE;
    */
END BUILD_BODY;
	
PROCEDURE BUILD_TRAILER(
/*****************************************************************************
	BUILD_TRAILER

THIS PROCEDURE WILL BUILD THE TRAILER WITH THE DETAILS PASSED IN

CREATED : 10/16/2014 NXK927 
REVISION: 
*****************************************************************************/
    IN_RECORD   IN     SD_CUR_REC_TYPE,
    IN_OUT_CLOB IN OUT CLOB)
IS
BEGIN
v_count := v_count +1 ;
--V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + IN_RECORD.NET_AMOUNT;
    IN_OUT_CLOB := IN_OUT_CLOB
                   --ACCOUNT BATCH TRAILER RECORD
                  || '*98'
                  ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                  || '9999999998'--LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                  || '01' --NBR-BATCHS,
                  --||LPAD( IN_RECORD.ITEM_QUANTITY, 9, 0 )
                  --||LPAD( IN_RECORD.NET_AMOUNT, 9, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  ||LPAD( v_count, 9, 0 )
                  ||LPAD( V_TOTAL_AMOUNT, 11, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  || '                                   '
                  || CHR(10)
                  --FILE TRAILER RECORD
                  || '*99'
                  ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                  ||'9999999999'--LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                  || '01' --NBR-BATCHS,
                  --||LPAD( IN_RECORD.ITEM_QUANTITY, 9, 0 )
                  --||LPAD( IN_RECORD.NET_AMOUNT, 9, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  ||LPAD( v_count+1, 9, 0 )
                  ||LPAD( V_TOTAL_AMOUNT, 11, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  || '                                   '
                  || CHR(10);
END BUILD_TRAILER;		

BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME --|| STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP
    -- BUILD_HEADER(SD_REC,V_OUT_CLOB);
  IF IS_BANK_ACCOUNT_CHANGED(V_PREV_REC.BANK_ACCOUNT_NUMBER,
                                   SD_REC.BANK_ACCOUNT_NUMBER) THEN
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                  BUILD_TRAILER(V_PREV_REC,
                                V_OUT_CLOB);
          END IF;
			--Header needs to built when ever there is a change in the bank accouny number
            BUILD_HEADER(SD_REC,
                         V_OUT_CLOB);
			END IF;
            	 BUILD_BODY(SD_REC,
                   V_OUT_CLOB);
        V_PREV_REC := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                  BUILD_TRAILER(V_PREV_REC,
                                V_OUT_CLOB);
          END IF;
          /*
      BUILD_TRAILER(V_PREV_REC,
                                V_OUT_CLOB);
                                */

    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_US_AUTO_BANK_FILE; 


PROCEDURE CREATE_US_NONAUTO_FILE(
/***************************************************************************** 
        CREATE US_AUTO FILE 

THIS PROCEDURE WILL BUILD THE US  STORE DAILY STORE DRAFT ISSUES, VOIDS, STOP PAYS, 
AND REMOVE STOP PAYS 

Created : 07/23/2014 NXK 
Modified: 02/13/2015 DXV848   Added condition - if amount_change_date is null then use original_net_amount else use net_amount
Modified: 04/05/2016 jxc517 CCN Project Team....
          Added statement type 'GC' for canada
        : 09/27/2017 nxk927
          added condition to check for the data that has been inserted after the last batch run and
          passing the date as variable
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    V_DATE        DATE := CCN_BATCH_PKG.GET_LAST_STARTDATE('SD_DAILY_DRFT_LOAD');
    CURSOR SD_CUR IS
       SELECT  DISTINCT SD.COST_CENTER_CODE,
                         --SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         '8800600275' as BANK_ACCOUNT_NUMBER,
                         nvl(SD.CHECK_SERIAL_NUMBER,0) CHECK_SERIAL_NUMBER ,
                         --SD.BANK_NUMBER,
                         '088' as BANK_NUMBER,
                         --TO_CHAR(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         TO_CHAR(sysdate,'MMDDYY') ISSUE_DATE,
                         nvl(SD.BANK_PAID_AMOUNT,0) * 100 AS BANK_PAID_AMOUNT,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         (SELECT SUM(ITEM_EXT_AMOUNT)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER =SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_EXT_AMOUNT,
                         (SELECT SUM(ITEM_QUANTITY)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                         SD.TRANSACTION_SOURCE,
                         TO_CHAR(SD.TRANSACTION_DATE,'MMDDYY') TRANSACTION_DATE,
                         SD.PAYEE_NAME,
                         TO_CHAR(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         SD.CHANGE_SOURCE,
                         SD.VOID_INDICATOR,
                         SD.PAY_INDICATOR,
                         SD.STOP_INDICATOR,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
          AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
          AND SD.LOAD_DATE        > V_DATE
          AND CH.STATEMENT_TYPE  NOT IN ('CN', 'DC', 'QC', 'AU', 'AC', 'GC')
          AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
           UNION
            SELECT  DISTINCT SD.COST_CENTER_CODE,
                         --SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         '8800600275' as BANK_ACCOUNT_NUMBER,
                         nvl(SD.CHECK_SERIAL_NUMBER,0) CHECK_SERIAL_NUMBER ,
                         --SD.BANK_NUMBER,
                         '088' as BANK_NUMBER,
                         --TO_CHAR(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         TO_CHAR(sysdate,'MMDDYY') ISSUE_DATE,
                         nvl(SD.BANK_PAID_AMOUNT,0) * 100 AS BANK_PAID_AMOUNT,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         (SELECT SUM(ITEM_EXT_AMOUNT)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER =SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_EXT_AMOUNT,
                         (SELECT SUM(ITEM_QUANTITY)
                            FROM STORE_DRAFTS_DETAIL SDD
                           WHERE SD.TRANSACTION_DATE = SDD.TRANSACTION_DATE
                             AND SD.CHECK_SERIAL_NUMBER = SDD.CHECK_SERIAL_NUMBER)* 100 AS ITEM_QUANTITY,
                         SD.TRANSACTION_SOURCE,
                         TO_CHAR(SD.TRANSACTION_DATE,'MMDDYY') TRANSACTION_DATE,
                         SD.PAYEE_NAME,
                         TO_CHAR(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         SD.CHANGE_SOURCE,
                         SD.VOID_INDICATOR,
                         SD.PAY_INDICATOR,
                         SD.STOP_INDICATOR,
                         CH.STATEMENT_TYPE
          FROM UNATTACHED_MNL_DRFT_DTL SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND SD.LOAD_DATE        > V_DATE
           AND CH.STATEMENT_TYPE  NOT IN ('CN', 'DC', 'QC', 'AU', 'AC', 'GC')
        ORDER BY BANK_ACCOUNT_NUMBER, CHECK_SERIAL_NUMBER;


    V_OUT_CLOB                   CLOB;
  --  v_prev_rec                   SD_CUR%ROWTYPE;
    V_TOTAL_AMOUNT               NUMBER := 0;

    PATH         VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME     VARCHAR2(50) := 'DLY_DRAFT_US_NAM';
    STAMP        VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE  UTL_FILE.FILE_TYPE;
	  V_PREV_REC                 SD_CUR_REC_TYPE;
    v_count number := 1;


	--Local procedures to build the CLOB categorically
PROCEDURE BUILD_HEADER(
/*****************************************************************************
	BUILD_HEADER

THIS PROCEDURE WILL BUILD THE HEADER WITH THE DETAILS PASSED IN

CREATED : 10/16/2014 NXK927 
REVISION: 
*****************************************************************************/
    IN_RECORD   IN     SD_CUR_REC_TYPE,
    IN_OUT_CLOB IN OUT CLOB)
IS
BEGIN
     IN_OUT_CLOB := IN_OUT_CLOB
                --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                || '*00'
                ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                || '0000000000'
                --||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                ||LPAD( IN_RECORD.BANK_NUMBER, 3, 0 )
                ||LPAD( IN_RECORD.ISSUE_DATE, 6, 0 )
                || '                                                '
                || CHR(10);
END BUILD_HEADER;
	
PROCEDURE BUILD_BODY(
/*****************************************************************************
	BUILD_BODY

THIS PROCEDURE WILL BUILD THE BODY WITH THE DETAILS PASSED IN

CREATED : 10/16/2014 NXK927 
REVISION: 
*****************************************************************************/
    IN_RECORD   IN     SD_CUR_REC_TYPE,
    IN_OUT_CLOB IN OUT CLOB)
IS
BEGIN
v_count := v_count +1 ;
V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + IN_RECORD.NET_AMOUNT;
    IN_OUT_CLOB := IN_OUT_CLOB
                  --ACCOUNT DETAIL RECORD (ISSUE ITEM)
                      || '*10'
                      ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( SD_COMMON_TOOLS.GET_HEX_VALUE_FOR_TRNSCTN_TYP('10',IN_RECORD.NET_AMOUNT), 11, 0 )
                      ||RPAD( IN_RECORD.PAYEE_NAME, 15, ' ' )
                      ||'111111111'
                      || '                      ';
                      /*
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (ADDTL SOURCE)
                      || '*13'
                      ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||'111111111'
                      ||LPAD( IN_RECORD.BANK_PAID_AMOUNT, 9, 0 )
                      || CHR(10)
                      --ACCOUNT DETAIL RECORD (CHANGE ISSUE AMT)
                      || '*15'
                      ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                      ||LPAD( IN_RECORD.NET_AMOUNT, 9, 0 )
                      || '                                              '
                      ;
    --ACCOUNT DETAIL RECORD (STOP ITEM)
    CASE 
        WHEN IN_RECORD.STOP_INDICATOR = 'Y' THEN 
            IN_OUT_CLOB := IN_OUT_CLOB 
                          || '*22'	
                          || LPAD(IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.TRANSACTION_DATE,6, 0 )
                          || RPAD(IN_RECORD.PAYEE_NAME, 16, 0 )
                          || '                                   ' 
                          || CHR(10)
                          --ACCOUNT DETAIL RECORD (REMOVE STOP ITEM)	 
                          || '*24'
                          || LPAD(IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.TRANSACTION_DATE,6, 0 )
                          || RPAD(IN_RECORD.PAYEE_NAME, 16, 0 )
                          || '                                   ' 
                          || CHR(10);
        WHEN IN_RECORD.VOID_INDICATOR = 'Y' THEN
            IN_OUT_CLOB := IN_OUT_CLOB 
                          || '*26'
                          || LPAD(IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.CHECK_SERIAL_NUMBER, 10, 0 )
                          || LPAD(IN_RECORD.TRANSACTION_DATE,6, 0 )
                          || '                                                   ' 
                          || CHR(10);
        ELSE
            NULL;
    END CASE;
    */
END BUILD_BODY;
	
PROCEDURE BUILD_TRAILER(
/*****************************************************************************
	BUILD_TRAILER

THIS PROCEDURE WILL BUILD THE TRAILER WITH THE DETAILS PASSED IN

CREATED : 10/16/2014 NXK927 
REVISION: 
*****************************************************************************/
    IN_RECORD   IN     SD_CUR_REC_TYPE,
    IN_OUT_CLOB IN OUT CLOB)
IS
BEGIN
v_count := v_count +1 ;
--V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + IN_RECORD.NET_AMOUNT;
    IN_OUT_CLOB := IN_OUT_CLOB
                   --ACCOUNT BATCH TRAILER RECORD
                  || '*98'
                  ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                  || '9999999998'--LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                  || '01' --NBR-BATCHS,
                  --||LPAD( IN_RECORD.ITEM_QUANTITY, 9, 0 )
                  --||LPAD( IN_RECORD.NET_AMOUNT, 9, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  ||LPAD( v_count, 9, 0 )
                  ||LPAD( V_TOTAL_AMOUNT, 11, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  || '                                   '
                  || CHR(10)
                  --FILE TRAILER RECORD
                  || '*99'
                  ||LPAD( IN_RECORD.BANK_ACCOUNT_NUMBER, 10, 0 )
                  ||'9999999999'--LPAD( v_prev_rec.CHECK_SERIAL_NUMBER, 10, 0 )
                  || '01' --NBR-BATCHS,
                  --||LPAD( IN_RECORD.ITEM_QUANTITY, 9, 0 )
                  --||LPAD( IN_RECORD.NET_AMOUNT, 9, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  ||LPAD( v_count+1, 9, 0 )
                  ||LPAD( V_TOTAL_AMOUNT, 11, 0 )--LPAD( v_prev_rec.ITEM_EXT_AMOUNT, 11, 0 )
                  || '                                   '
                  || CHR(10);
END BUILD_TRAILER;		

BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME --|| STAMP
                                   , 'W' --BINARY
                                   , 32767);
    FOR SD_REC IN SD_CUR LOOP
    -- BUILD_HEADER(SD_REC,V_OUT_CLOB);
  IF IS_BANK_ACCOUNT_CHANGED(V_PREV_REC.BANK_ACCOUNT_NUMBER,
                                   SD_REC.BANK_ACCOUNT_NUMBER) THEN
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                  BUILD_TRAILER(V_PREV_REC,
                                V_OUT_CLOB);
          END IF;
			--Header needs to built when ever there is a change in the bank accouny number
            BUILD_HEADER(SD_REC,
                         V_OUT_CLOB);
			END IF;
            	 BUILD_BODY(SD_REC,
                   V_OUT_CLOB);
        V_PREV_REC := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
    END LOOP;
    
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
                  BUILD_TRAILER(V_PREV_REC,
                                V_OUT_CLOB);
          END IF;
          /*
      BUILD_TRAILER(V_PREV_REC,
                                V_OUT_CLOB);
                                */

    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
END CREATE_US_NONAUTO_FILE; 

PROCEDURE CREATE_CAN_NONAUTO_FILE(
/***************************************************************************** 
        CREATE_CAN_NONAUTO_FILE 

THIS PROCEDURE WILL BUILD THE CAN STORE NON AUTO FILE 

CREATED : 08/07/2014 NXK 
REVISION: 02/13/2015 DXV848  Added condition - if amount_change_date is null then use original_net_amount else use net_amount
        : 04/08/2015 NXK / AXK326
          Added web mail code to send Canadian Non Automotive file
Modified: 04/05/2016 jxc517 CCN Project Team....
          Added statement type 'GC' for canada
        : 09/27/2017 nxk927
          added condition to check for the data that has been inserted after the last batch run and
          passing the date as variable
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    V_DATE  DATE := CCN_BATCH_PKG.GET_LAST_STARTDATE('SD_DAILY_DRFT_LOAD');
    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                        -- '    ' as FILE_CNTRL_NBR,
                         nvl(SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10),0) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         SD.BANK_PAID_AMOUNT * 100 as BANK_PAID_AMOUNT,
                        -- to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         to_char(sysdate,'MMDDYY') ISSUE_DATE,
                         to_char(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND SD.LOAD_DATE        > V_DATE
           AND CH.STATEMENT_TYPE   IN ('CN', 'DC', 'QC', 'GC')
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
           UNION
           SELECT  DISTINCT SD.COST_CENTER_CODE,
                        -- '    ' as FILE_CNTRL_NBR,
                         nvl(SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10),0) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         SD.BANK_PAID_AMOUNT * 100 as BANK_PAID_AMOUNT,
                        -- to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         to_char(sysdate,'MMDDYY') ISSUE_DATE,
                         to_char(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         CH.STATEMENT_TYPE
          FROM UNATTACHED_MNL_DRFT_DTL SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
          AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND SD.LOAD_DATE       > V_DATE
           AND CH.STATEMENT_TYPE   IN ('CN', 'DC', 'QC', 'GC')           
          ORDER BY BANK_ACCOUNT_NUMBER, CHECK_SERIAL_NUMBER; 

    V_OUT_CLOB                   CLOB;
    V_CLOB                       CLOB;
    V_TOTAL_COUNT                NUMBER := 0;
    V_TOTAL_AMOUNT               NUMBER := 0;
    v_prev_rec                   SD_CUR%ROWTYPE;

    PATH                                VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                            VARCHAR2(50) := 'DLY_DRAFT_CAN_NAM';
    STAMP                               VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE                         UTL_FILE.FILE_TYPE;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME  || STAMP
                                   , 'W' --BINARY
                                   , 32767);
                                   
          V_OUT_CLOB := '$$2B01REC12B01$$'
                        || CHR(10);                                   
    FOR SD_REC IN SD_CUR LOOP 
      IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER) THEN 
           IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN 
           V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
                V_OUT_CLOB := V_OUT_CLOB
                              || '999'
                              || '042221012830'
                              ||  LPAD(V_TOTAL_COUNT,8,0)--V_TOTAL_COUNT
                              ||  LPAD(V_TOTAL_AMOUNT,13,0)--V_TOTAL_AMOUNT
                              || '                                            '
                              || CHR(10); 
          END IF;
             --  END IF;
                   V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
                          V_OUT_CLOB := V_OUT_CLOB
                          || '000' 
                          || '042221012830' 
                          /*file_ctrl_number used as last number of month and day as 10/28/2104 would be 028 followed by 0 
                            11-29-2014 WOULD BE 1290
                            02-15-2013 WOULD BE 2150
                            07-16-2014 WOULD BE 7160
                            */
                          ||  substr(SD_REC.ISSUE_DATE,2,3) 
                          || '0'
                          || '                                                             ' 
                          || CHR(10)
                         /* || '300' 
                          || '042221012830' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 ) 
                          ||LPAD( SD_REC.NET_AMOUNT, 10, 0 ) 
                          --||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 ) 
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 ) 
                          || '         ' 
                          ||'        ' --LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 ) 
                          ||LPAD(SD_REC.ISSUE_DATE,6,0) 
                          ||LPAD(SD_REC.PAID_DATE,6,0) 
                          --|| CHR(10)*/
                          ;
                  END IF;
                V_OUT_CLOB := V_OUT_CLOB
                          || '300' 
                          || '042221012830' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 ) 
                          ||LPAD( SD_REC.NET_AMOUNT, 10, 0 ) 
                          --||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 ) 
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 ) 
                          || '         ' 
                          ||'        ' --LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 ) 
                          ||LPAD(SD_REC.ISSUE_DATE,6,0) 
                          ||LPAD(SD_REC.PAID_DATE,6,0) 
                          --|| CHR(10)
                          ;
                  /*  V_OUT_CLOB := V_OUT_CLOB
                      || '*300'
                      || '042221012830'
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '         '
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 )
                      ||LPAD(SD_REC.ISSUE_DATE,6,0)
                      ||LPAD(SD_REC.PAID_DATE,6,0)
                      || CHR(10);
                      */
        V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + SD_REC.NET_AMOUNT; --v_prev_rec.BANK_PAID_AMOUNT;
        v_prev_rec     := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_CLOB := V_CLOB || CHR(10)
                         || V_OUT_CLOB;
        V_OUT_CLOB := NULL;
    END LOOP;
               
    
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
    V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
                V_OUT_CLOB := V_OUT_CLOB
                              || '999'
                              || '042221012830'
                              ||  LPAD(V_TOTAL_COUNT,8,0)--V_TOTAL_COUNT
                              ||  LPAD(V_TOTAL_AMOUNT,13,0)--V_TOTAL_AMOUNT
                              || '                                            ';
    END IF;

    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
    
    V_CLOB := V_CLOB   || CHR(10)
                       ||  V_OUT_CLOB;
                           

    IF V_CLOB <> EMPTY_CLOB() THEN 
       MAIL_PKG.SEND_MAIL('CAN_NON_AUTO_DRAFT',NULL, NULL, V_CLOB);
    END IF;
  
END CREATE_CAN_NONAUTO_FILE; 

PROCEDURE CREATE_CAN_AUTO_FILE(
/***************************************************************************** 
        CREATE_CAN_AUTO_FILE 

THIS PROCEDURE WILL BUILD THE CAN STORE NON AUTO FILE 

CREATED : 08/07/2014 NXK 
REVISION: 02/13/2015 DXV848  Added condition - if amount_change_date is null then use original_net_amount else use net_amount
        : 04/08/2015 NXK / AXK326
		      Added web mail code to send Canadian Automotive file
        : 09/27/2017 nxk927
          added condition to check for the data that has been inserted after the last batch run and
          passing the date as variable
*****************************************************************************/ 
    IN_DATE IN DATE)
IS
    V_DATE DATE := CCN_BATCH_PKG.GET_LAST_STARTDATE('SD_DAILY_DRFT_LOAD');
    CURSOR SD_CUR IS
        SELECT  DISTINCT SD.COST_CENTER_CODE,
                         --'    ' as FILE_CNTRL_NBR,
                         SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         SD.BANK_PAID_AMOUNT * 100 as BANK_PAID_AMOUNT,
                         --to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                          to_char(sysdate,'MMDDYY') ISSUE_DATE,
                         to_char(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         CH.STATEMENT_TYPE
          FROM STORE_DRAFTS SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND SD.LOAD_DATE        > V_DATE
           AND CH.STATEMENT_TYPE   = 'AC'
           AND NOT EXISTS (SELECT 1
                             FROM SD_BANK_FILE_SENT_DETAILS
                            WHERE CHECK_SERIAL_NUMBER = SD.CHECK_SERIAL_NUMBER
                              AND SEND_INDICATOR      = 'Y')
           UNION
           SELECT  DISTINCT SD.COST_CENTER_CODE,
                        -- '    ' as FILE_CNTRL_NBR,
                         nvl(SUBSTR(SD.BANK_ACCOUNT_NUMBER,7,10),0) BANK_ACCOUNT_NUMBER,
                         SD.CHECK_SERIAL_NUMBER,
                         SD.BANK_NUMBER,
                         NVL(DECODE(SD.AMOUNT_CHANGE_DATE, NULL, SD.ORIGINAL_NET_AMOUNT,SD.NET_AMOUNT), 0) * 100 AS NET_AMOUNT,
                         SD.BANK_PAID_AMOUNT * 100 as BANK_PAID_AMOUNT,
                        -- to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
                         to_char(sysdate,'MMDDYY') ISSUE_DATE,
                         to_char(SD.PAID_DATE,'MMDDYY') PAID_DATE,
                         CH.STATEMENT_TYPE
          FROM UNATTACHED_MNL_DRFT_DTL SD,
               CCN_HIERARCHY_INFO CH
         WHERE CH.COST_CENTER_CODE = SD.COST_CENTER_CODE
           AND CH.HRCHY_HDR_NAME   = 'GLOBAL_HIERARCHY'
           AND SD.LOAD_DATE        > V_DATE
           AND CH.STATEMENT_TYPE   = 'AC'
          ORDER BY BANK_ACCOUNT_NUMBER, CHECK_SERIAL_NUMBER; 

    V_OUT_CLOB                   CLOB;
    V_CLOB                       CLOB;
    V_TOTAL_COUNT                NUMBER := 0;
    V_TOTAL_AMOUNT               NUMBER := 0;
    v_prev_rec                   SD_CUR%ROWTYPE;

    PATH                    VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                            VARCHAR2(50) := 'DLY_DRAFT_CAN_AM';
    STAMP                               VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE                         UTL_FILE.FILE_TYPE;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME  || STAMP
                                   , 'W' --BINARY
                                   , 32767);
               V_OUT_CLOB := '$$2B01REC12B01$$'
                             || CHR(10);     
    FOR SD_REC IN SD_CUR LOOP 
         IF IS_BANK_ACCOUNT_CHANGED(v_prev_rec.BANK_ACCOUNT_NUMBER,SD_REC.BANK_ACCOUNT_NUMBER) THEN 
            IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN 
            V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
                V_OUT_CLOB := V_OUT_CLOB
                              || '999'
                              || '042221012830'
                              ||  LPAD(V_TOTAL_COUNT,8,0)--V_TOTAL_COUNT
                              ||  LPAD(V_TOTAL_AMOUNT,13,0)--V_TOTAL_AMOUNT
                              || '                                            '
                              || CHR(10); 
            END IF;
             --  END IF;
             V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
                          V_OUT_CLOB := V_OUT_CLOB
                          || '000' 
                          || '042221012830'
                          /*file_ctrl_number used as last number of month and day as 10/28/2104 would be 028 followed by 0 
                            11-29-2014 WOULD BE 1290
                            02-15-2013 WOULD BE 2150
                            07-16-2014 WOULD BE 7160
                            */
                          ||  substr(SD_REC.ISSUE_DATE,2,3)   
                          || '0'
                          || '                                                             ' 
                          || CHR(10)
                         /* || '300' 
                          || '042221012830' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 ) 
                          ||LPAD( SD_REC.NET_AMOUNT, 10, 0 ) 
                          --||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 ) 
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 ) 
                          || '         ' 
                          ||'        ' --LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 ) 
                          ||LPAD(SD_REC.ISSUE_DATE,6,0) 
                          ||LPAD(SD_REC.PAID_DATE,6,0) 
                          --|| CHR(10)*/
                          ;
                  END IF;
                V_OUT_CLOB := V_OUT_CLOB
                          || '300' 
                          || '042221012830' 
                          ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 ) 
                          ||LPAD( SD_REC.NET_AMOUNT, 10, 0 ) 
                          --||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 ) 
                          ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 ) 
                          || '         ' 
                          ||'        ' --LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 ) 
                          ||LPAD(SD_REC.ISSUE_DATE,6,0) 
                          ||LPAD(SD_REC.PAID_DATE,6,0) 
                          --|| CHR(10)
                          ;
                  /*  V_OUT_CLOB := V_OUT_CLOB
                      || '*300'
                      || '042221012830'
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),8, 0 )
                      ||LPAD( SD_REC.BANK_PAID_AMOUNT, 10, 0 )
                      ||LPAD( SD_REC.CHECK_SERIAL_NUMBER, 10, 0 )
                      || '         '
                      ||LPAD(substr(SD_REC.CHECK_SERIAL_NUMBER,2,8),10, 0 )
                      ||LPAD(SD_REC.ISSUE_DATE,6,0)
                      ||LPAD(SD_REC.PAID_DATE,6,0)
                      || CHR(10);
                      */
        V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
        V_TOTAL_AMOUNT := V_TOTAL_AMOUNT + SD_REC.NET_AMOUNT; --v_prev_rec.BANK_PAID_AMOUNT;
        v_prev_rec     := SD_REC;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
            V_CLOB := V_CLOB  ||  CHR(10)
                                ||  V_OUT_CLOB;
        V_OUT_CLOB := NULL;
    END LOOP;
    IF v_prev_rec.BANK_ACCOUNT_NUMBER IS NOT NULL THEN
         V_TOTAL_COUNT  := V_TOTAL_COUNT + 1;
                V_OUT_CLOB := V_OUT_CLOB
                              || '999'
                              || '042221012830'
                              ||  LPAD(V_TOTAL_COUNT,8,0)--V_TOTAL_COUNT
                              ||  LPAD(V_TOTAL_AMOUNT,13,0)--V_TOTAL_AMOUNT
                              || '                                            ';
   END IF;
    V_CLOB := V_CLOB  ||  CHR(10)
                      ||  V_OUT_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);


    IF V_CLOB <> EMPTY_CLOB() THEN 
       MAIL_PKG.SEND_MAIL('CAN_AUTO_DRAFT',NULL, NULL, V_CLOB);
    END IF;
   
END CREATE_CAN_AUTO_FILE; 

END SD_BANKFILES_PKG;