create or replace PACKAGE body SD_FILE_BUILD_PKG
/****************************************************************************** 
This package will have all the procedures to build the files on server

created : 07/25/2014 jxc517 CCN Project....
changed :
******************************************************************************/
AS

FUNCTION FORMAT_INPUT_FOR_FILE(
/*****************************************************************************
	FORMAT_INPUT_FOR_FILE

	This function will return the formatted data as requested  

created : 07/25/2014 jxc517 CCN Project....
changed :
*****************************************************************************/
IN_VALUE         IN VARCHAR2,
IN_PADDING_VALUE IN VARCHAR2,
IN_LENGTH        IN NUMBER,
IN_PRECISION     IN NUMBER DEFAULT 0
) RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(32000);
    V_DECIMAL_LOCATION  NUMBER;
    V_LEFT_SIDE_VALUE   VARCHAR2(32000) := IN_PADDING_VALUE;
    V_RIGHT_SIDE_VALUE  VARCHAR2(32000) := IN_PADDING_VALUE;
BEGIN
    IF IN_VALUE IS NOT NULL THEN
        V_DECIMAL_LOCATION := INSTR(IN_VALUE,'.');
        IF V_DECIMAL_LOCATION <> 0 THEN
            V_LEFT_SIDE_VALUE  := SUBSTR(IN_VALUE,1,V_DECIMAL_LOCATION - 1);
            V_RIGHT_SIDE_VALUE := SUBSTR(IN_VALUE,V_DECIMAL_LOCATION + 1);
        ELSE
            V_LEFT_SIDE_VALUE  := IN_VALUE;
        END IF;
    END IF;
    RETURN LPAD(V_LEFT_SIDE_VALUE,IN_LENGTH-IN_PRECISION,IN_PADDING_VALUE) || 
           RPAD(V_RIGHT_SIDE_VALUE,IN_PRECISION,IN_PADDING_VALUE);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END FORMAT_INPUT_FOR_FILE;

FUNCTION IS_VALUE_CHANGED(
/*****************************************************************************
	FORMAT_INPUT_FOR_FILE

	This function will return the formatted data as requested  

created : 07/25/2014 jxc517 CCN Project....
changed :
*****************************************************************************/
IN_PREV_VALUE IN VARCHAR2,
IN_CURR_VALUE IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
    RETURN (NVL(IN_PREV_VALUE,'X')<>NVL(IN_CURR_VALUE,'X'));
END IS_VALUE_CHANGED;

PROCEDURE BUILD_1099_FILE(
/*****************************************************************************
	BUILD_1099_FILE

	This procedure will build the 1099 file from CPR views.  

created : 07/25/2014 jxc517 CCN Project....
changed :
*****************************************************************************/
IN_MID_MNTHLY_IND IN VARCHAR2 DEFAULT 'N')
IS
    CURSOR cur IS
        SELECT NULL AS FILE_NUMBER
               ,SUBSTR(COST_CENTER_CODE,3,4) AS STORE_NUMBER
               ,DRAFT_NUMBER AS CHECK_NUMBER
               ,NET_AMOUNT AS CHECK_AMOUNT
               ,TO_CHAR(SYSDATE,'MMDDYY') AS CHECK_DATE
               ,NULL AS JV_NUMBER
               ,NULL AS FILLER
               ,'00' AS TRANSACTION_CODE
               ,ccn_common_tools.DecryptSQL((SELECT TAXID FROM CUSTOMER_TAXID_VW WHERE CUSTNUM = CUSTOMER_ACCOUNT_NUMBER)) AS TAX_ID
          FROM STORE_DRAFTS
         WHERE (POS_TRANSACTION_CODE = '13' OR (POS_TRANSACTION_CODE = '19' AND REASON_CODE = '04'))
           AND TO_CHAR(ISSUE_DATE,'YYYYMM') = TO_CHAR(SYSDATE,'YYYYMM')
           AND VOID_DATE IS NULL
           AND STOP_PAY_DATE IS NULL
           --AND ROWNUM < 1000
         ORDER BY COST_CENTER_CODE;

    PATH        	  VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  			VARCHAR2(50);
    STAMP       		VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
    OUTPUT_FILE 		UTL_FILE.FILE_TYPE;

	  V_OUT_CLOB      CLOB;
    V_COUNT         NUMBER := 0;
BEGIN

    IF IN_MID_MNTHLY_IND = 'Y' THEN
        FILENAME := '1099_MID_MONTHLY_';
    ELSE
        FILENAME := '1099_MONTHLY_';
    END IF;
    
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   ,'W' --BINARY
                                   ,32767); 

    FOR rec IN cur LOOP
        V_COUNT := V_COUNT + 1;
        V_OUT_CLOB := V_OUT_CLOB 
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.FILE_NUMBER,' ',7)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.STORE_NUMBER,'0',4)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_NUMBER,'0',4)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_AMOUNT,'0',10,2)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_DATE,'0',6)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.JV_NUMBER,' ',6)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.FILLER,' ',1)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.TRANSACTION_CODE,'0',2)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.TAX_ID,' ',9)
                       ||CHR(10);
        IF V_COUNT = 100 THEN
            UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;            
        END IF;
    END LOOP;

	  UTL_FILE.FCLOSE(OUTPUT_FILE);

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END BUILD_1099_FILE;


PROCEDURE STORE_DRAFT_INTALLER_1099 
/**********************************************************

	This procedure will build the 1099 intaller file from CPR views.  

created : 7/29/2014
changed :
**********************************************************/
(in_date in date) 
IS
    CURSOR INSTALLER_CUR IS 
        /*  SELECT SD.DRAFT_NUMBER,
               SUBSTR(SD.COST_CENTER_CODE,3,4) STORE_NBR,
               SD.NET_AMOUNT * 100 as Net_amount,
               to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
			         ccn_common_tools.DecryptSQL(cv.taxid) AS TAX_ID,
               CV.CUSTNUM as VENDOR_NBR, 
               CV.CUSTNAME as VENDOR_NAME,
               sd.customer_account_number as CUSTOMER_ACCOUNT_NBR,
               Payee_name CUSTOMER_ACCOUNT_NAME,
			         CV.PARENT_STORE,
			         CV.DCO_NUMBER,
			         (case 
               when to_char(ISSUE_DATE,'YYYY') = to_char(sysdate,'YYYY') then
                net_amount *100
                else 0
               end) CY_YTD_AMT,
               (case
               when to_char(ISSUE_DATE,'YYYY') = to_char(sysdate,'YYYY')-1 then
			         net_amount * 100
              else 0
                  end) LY_YTD_AMT			
        FROM STORE_DRAFTS SD, customer_taxid_vw CV
       where cv.custnum = sd.customer_account_number
        ;
        */
        SELECT SD.DRAFT_NUMBER,
               SUBSTR(SD.COST_CENTER_CODE,3,4) STORE_NBR,
               SD.NET_AMOUNT * 100 as Net_amount,
               to_char(SD.ISSUE_DATE,'MMDDYY') ISSUE_DATE,
			         ccn_common_tools.DecryptSQL(cv.taxid) AS TAX_ID,
               CV.CUSTNUM as VENDOR_NBR, 
               CV.CUSTNAME as VENDOR_NAME,
               VI.SUPPLIER_NAME SUPPLIER_NAME,
               vi.SITE_ATTRIBUTE3 SITE_ATTRIBUTE3,
               sd.customer_account_number as CUSTOMER_ACCOUNT_NBR,
               Payee_name CUSTOMER_ACCOUNT_NAME,
			         CV.PARENT_STORE,
			         CV.DCO_NUMBER,
			         (case 
               when to_char(ISSUE_DATE,'YYYY') = to_char(sysdate,'YYYY') then
                net_amount *100
                else 0
               end) CY_YTD_AMT,
               (case
               when to_char(ISSUE_DATE,'YYYY') = to_char(sysdate,'YYYY')-1 then
			         net_amount * 100
              else 0
                  end) LY_YTD_AMT			
        FROM STORE_DRAFTS SD, customer_taxid_vw CV, swc_stor.SWC_AP_SUPPLIER_INFO_V@ERP_LINK VI
       where cv.custnum = sd.customer_account_number
       and regexp_replace(vi.SUPPLIER_NUM_1099, '[[-]]*','') = ccn_common_tools.DecryptSQL(cv.taxid)
       and transaction_date = in_date;

	V_OUT_CLOB 				  CLOB;
	V_DETAIL_CLOB 		  CLOB;

  PATH        	   			VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
  FILENAME  			      VARCHAR2(50) := 'Installer_1099_QRTLY';
  STAMP       			    VARCHAR2(50) := TO_CHAR(REPLACE (TRUNC(SYSDATE),'00:00:00', '')); -- USED TO CREATE TIMESTAMP FOR DATA FILE
  OUTPUT_FILE 			    UTL_FILE.FILE_TYPE;

BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME-- ||' '|| STAMP
                                   , 'W' --BINARY
                                   , 32767); 

 FOR INSTALLER_REC IN INSTALLER_CUR LOOP
	V_OUT_CLOB := INSTALLER_REC.STORE_NBR
                || '~'
				        || INSTALLER_REC.DRAFT_NUMBER
				        || '~'
				        || LPAD(INSTALLER_REC.NET_AMOUNT,10,0)
				        || '~' 
				        || INSTALLER_REC.ISSUE_DATE
				        || '~'
				        || INSTALLER_REC.TAX_ID
				        || '~'
				        || INSTALLER_REC.SITE_ATTRIBUTE3  
				        || '~'
				        || RPAD(INSTALLER_REC.SUPPLIER_NAME, 30, ' ')
				        || '~'
				        || INSTALLER_REC.CUSTOMER_ACCOUNT_NBR
				        || '~' 
				        || RPAD(INSTALLER_REC.CUSTOMER_ACCOUNT_NAME, 30, ' ' )
				        || '~'
				        || INSTALLER_REC.PARENT_STORE
                || '~'
				        || LPAD(INSTALLER_REC.DCO_NUMBER,5,0)
				        || '~'
                || LPAD(INSTALLER_REC.CY_YTD_AMT,14,0)
				        || '~'
				        || LPAD(INSTALLER_REC.LY_YTD_AMT, 14,0)
				        || '~' 
				        || '        '
              --|| chr(10)
                ;
				 
		UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
    end loop;
	UTL_FILE.FCLOSE(OUTPUT_FILE);


EXCEPTION
    WHEN OTHERS THEN
        NULL;
  
end STORE_DRAFT_INTALLER_1099;

END SD_FILE_BUILD_PKG;

