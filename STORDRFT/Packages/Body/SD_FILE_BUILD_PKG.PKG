create or replace PACKAGE body          SD_FILE_BUILD_PKG
/****************************************************************************** 
This package will have all the procedures to build the files on server

created : 07/25/2014 jxc517 CCN Project....
changed :
******************************************************************************/
AS

FUNCTION FORMAT_INPUT_FOR_FILE(
/*****************************************************************************
	This function will return the formatted data as requested  

created : 07/25/2014 jxc517 CCN Project....
changed :
*****************************************************************************/
IN_VALUE         IN VARCHAR2,
IN_PADDING_VALUE IN VARCHAR2,
IN_LENGTH        IN NUMBER,
IN_PRECISION     IN NUMBER DEFAULT 0
) RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(32000);
    V_DECIMAL_LOCATION  NUMBER;
    V_LEFT_SIDE_VALUE   VARCHAR2(32000) := IN_PADDING_VALUE;
    V_RIGHT_SIDE_VALUE  VARCHAR2(32000) := IN_PADDING_VALUE;
BEGIN
    IF IN_VALUE IS NOT NULL THEN
        V_DECIMAL_LOCATION := INSTR(IN_VALUE,'.');
        IF V_DECIMAL_LOCATION <> 0 THEN
            V_LEFT_SIDE_VALUE  := SUBSTR(IN_VALUE,1,V_DECIMAL_LOCATION - 1);
            V_RIGHT_SIDE_VALUE := SUBSTR(IN_VALUE,V_DECIMAL_LOCATION + 1);
        ELSE
            V_LEFT_SIDE_VALUE  := IN_VALUE;
        END IF;
    END IF;
    RETURN LPAD(V_LEFT_SIDE_VALUE,IN_LENGTH-IN_PRECISION,IN_PADDING_VALUE) || 
           RPAD(V_RIGHT_SIDE_VALUE,IN_PRECISION,IN_PADDING_VALUE);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END FORMAT_INPUT_FOR_FILE;

PROCEDURE BUILD_1099_DIFF_FILE(
/*****************************************************************************
	BUILD_1099_DIFF_FILE

	This procedure will build the 1099 diff file from CPR views.  

created : 11/24/2014 jxc517 CCN Project....
changed : 03/23/2015 jxc517 CCN Project....
          Modified signature to eliminate intermediate tables completely
*****************************************************************************/
IN_DATE           IN DATE)
IS
    CURSOR cur IS
        SELECT NULL AS FILE_NUMBER
               ,SUBSTR(COST_CENTER_CODE,3,4) AS STORE_NUMBER
               ,DRAFT_NUMBER AS CHECK_NUMBER
               ,sd_common_tools.GET_HEX_VALUE_FOR_TRNSCTN_TYP('10',NVL(DECODE(AMOUNT_CHANGE_DATE, NULL,ORIGINAL_NET_AMOUNT,NET_AMOUNT), 0) *100) AS CHECK_AMOUNT
               ,TO_CHAR(TRANSACTION_DATE,'MMDDYY') AS CHECK_DATE
               ,NULL AS JV_NUMBER
               ,NULL AS FILLER
               ,'00' AS TRANSACTION_CODE
               ,ccn_common_tools.DecryptSQL((SELECT TAXID FROM CUSTOMER_TAXID_VW WHERE CUSTNUM = CUSTOMER_ACCOUNT_NUMBER)) AS TAX_ID
               ,CHECK_SERIAL_NUMBER
          FROM STORE_DRAFTS
         WHERE FNCL_SRVCS_SENT_DATE = TRUNC(IN_DATE,'month') + 14;

    PATH        	  VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  			VARCHAR2(50) := '1099_DIFF_';
    STAMP       		VARCHAR2(50) := TO_CHAR(IN_DATE,'DD-MON-RRRR')||'_'||TO_CHAR(SYSDATE,'HH24MISS');
    OUTPUT_FILE 		UTL_FILE.FILE_TYPE;

	  V_OUT_CLOB      CLOB;
    V_COUNT         NUMBER := 0;

BEGIN
    
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME || STAMP
                                   ,'W' --BINARY
                                   ,32767); 

    FOR rec IN cur LOOP
        V_COUNT := V_COUNT + 1;
        V_OUT_CLOB := V_OUT_CLOB 
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.FILE_NUMBER,' ',7)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.STORE_NUMBER,'0',4)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_NUMBER,'0',4)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_AMOUNT,'0',10)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_DATE,'0',6)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.JV_NUMBER,' ',6)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.FILLER,' ',1)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.TRANSACTION_CODE,'0',2)
                       || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.TAX_ID,'0',9)
                       ||CHR(13);
        IF V_COUNT = 100 THEN
            UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
            V_COUNT := 0;
        END IF;
    END LOOP;

	  IF V_OUT_CLOB IS NOT NULL THEN
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
        V_COUNT := 0;
    END IF;
    UTL_FILE.FCLOSE(OUTPUT_FILE);

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END BUILD_1099_DIFF_FILE;

PROCEDURE BUILD_1099_FILE(
/*****************************************************************************
	BUILD_1099_FILE

	This procedure will build the 1099 file from CPR views.  

Run Example:
Monthly file for october will be run on 01-Nov-2014 passing (01-Nov-2014) - 20days => some date in previous month
Mid Monthly file for october will be run on 15-Nov-2014 passing (15-Nov-2014) - 20days => some date in previous month
Difference file will be (Mid Monthly file - Monthly file)

created : 07/25/2014 jxc517 CCN Project....
changed : 11/24/2014 jxc517 CCN Project....
          Modified to include date parameter to rnu for previous month
          Modified to include a seperate logic to build diff file along with mid monthly file
        : 02/13/2015 DXV848 Added condition - if amount_change_date is null then use original_net_amount else use net_amount  
        : 03/23/2015 jxc517 CCN Project....
                     Added logic to pick records only for previous month's run based on input parameter
                     Added new column FNCL_SRVCS_SENT_DATE to track the runs and geenrate report as needed
        : 06/10/2015 jxc517 CCN Project....
                     Added logic to generate correct file name for that run
                     Modified logic to consider drafts loaded on 01st of next month under current monthly file
                     Modified logic to update records only if financial sequence number is null, to improve performance
                     Indexes HST_STORE_DRAFTS_IX, UNATTACHED_MNL_DRFT_DTL_HST_IX were also added to improve performance
*****************************************************************************/
IN_DATE           IN DATE,
IN_MID_MNTHLY_IND IN VARCHAR2 DEFAULT 'N')
IS
  
    CURSOR cur IS
        SELECT NULL AS FILE_NUMBER
               ,SUBSTR(COST_CENTER_CODE,3,4) AS STORE_NUMBER
               ,DRAFT_NUMBER AS CHECK_NUMBER
               ,sd_common_tools.GET_HEX_VALUE_FOR_TRNSCTN_TYP('10',NVL(DECODE(AMOUNT_CHANGE_DATE, NULL,ORIGINAL_NET_AMOUNT,NET_AMOUNT), 0) *100) AS CHECK_AMOUNT
               ,TO_CHAR(TRANSACTION_DATE,'MMDDYY') AS CHECK_DATE
               ,NULL AS JV_NUMBER
               ,NULL AS FILLER
               ,'00' AS TRANSACTION_CODE
               ,ccn_common_tools.DecryptSQL((SELECT TAXID FROM CUSTOMER_TAXID_VW WHERE CUSTNUM = CUSTOMER_ACCOUNT_NUMBER)) AS TAX_ID
               ,CHECK_SERIAL_NUMBER
               ,FNCL_SRVCS_SENT_DATE
          FROM STORE_DRAFTS
         WHERE (POS_TRANSACTION_CODE = '13' OR (POS_TRANSACTION_CODE = '91' AND REASON_CODE = '04'))
          AND TO_CHAR(ISSUE_DATE,'YYYYMM') = TO_CHAR(IN_DATE,'YYYYMM')
          --For Monthly take all transactions processed by (1day + end of previous month)
          --For Mid monthly take all transactions processed by (15days + end of previous month => mid of current month)
          AND LOAD_DATE <= DECODE(IN_MID_MNTHLY_IND, 'N', LAST_DAY(IN_DATE) + 1, LAST_DAY(IN_DATE) + 15)
          AND (VOID_DATE IS NULL OR VOID_DATE > DECODE(IN_MID_MNTHLY_IND, 'N', LAST_DAY(IN_DATE) + 1, LAST_DAY(IN_DATE) + 15))
          AND (STOP_PAY_DATE IS NULL OR STOP_PAY_DATE > DECODE(IN_MID_MNTHLY_IND, 'N', LAST_DAY(IN_DATE) + 1, LAST_DAY(IN_DATE) + 15))
        ORDER BY COST_CENTER_CODE, CHECK_NUMBER;

    PATH        	  VARCHAR2(50) := 'STORDRFT_LOAD_FILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  			VARCHAR2(50);
    STAMP       		VARCHAR2(50) := TO_CHAR(TRUNC(IN_DATE,'month'),'DD-MON-RRRR')||'_'||TO_CHAR(SYSDATE,'HH24MISS');
    OUTPUT_FILE 		UTL_FILE.FILE_TYPE;

	  V_OUT_CLOB      CLOB;
    V_COUNT         NUMBER := 0;
    V_BATCH_NUMBER  BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS  BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        IF IN_MID_MNTHLY_IND = 'Y' THEN
            CCN_BATCH_PKG.INSERT_BATCH_JOB('1099_MID_MONTHLY', V_BATCH_NUMBER);
            FILENAME := '1099_MID_MONTHLY_';
        ELSE
            CCN_BATCH_PKG.INSERT_BATCH_JOB('1099_MONTHLY', V_BATCH_NUMBER);
            FILENAME := '1099_MONTHLY_';
        END IF;

        OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                       ,FILENAME || STAMP
                                       ,'W' --BINARY
                                       ,32767); 
        FOR rec IN cur LOOP
            V_COUNT := V_COUNT + 1;
            V_OUT_CLOB := V_OUT_CLOB 
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.FILE_NUMBER,' ',7)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.STORE_NUMBER,'0',4)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_NUMBER,'0',4)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_AMOUNT,'0',10)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.CHECK_DATE,'0',6)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.JV_NUMBER,' ',6)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.FILLER,' ',1)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.TRANSACTION_CODE,'0',2)
                           || SD_FILE_BUILD_PKG.FORMAT_INPUT_FOR_FILE(rec.TAX_ID,'0',9)
                           ||CHR(13);
        /*
        Update the newly added column FNCL_SRVCS_SENT_DATE with
            first day of the month for which the monthly file is getting generated
            15+first day of the month for which the mid mointhly file is getting generated
        Don't update if an update is already done as the value of this column won't change for each run
            Also above process helps us identify the records that are present in mid monthly which are not present in monthly
        */        
            IF rec.FNCL_SRVCS_SENT_DATE IS NULL THEN --No need to perform update if that value is already updated
                BEGIN
                    UPDATE STORE_DRAFTS
                       SET FNCL_SRVCS_SENT_DATE = DECODE(IN_MID_MNTHLY_IND, 'N', TRUNC(IN_DATE,'month'), TRUNC(IN_DATE,'month') + 14)               
                     WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
                       AND FNCL_SRVCS_SENT_DATE IS NULL;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
                BEGIN
                    UPDATE HST_STORE_DRAFTS
                       SET FNCL_SRVCS_SENT_DATE = DECODE(IN_MID_MNTHLY_IND, 'N', TRUNC(IN_DATE,'month'), TRUNC(IN_DATE,'month') + 14)
                     WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
                       AND FNCL_SRVCS_SENT_DATE IS NULL;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
                BEGIN
                    UPDATE UNATTACHED_MNL_DRFT_DTL
                       SET FNCL_SRVCS_SENT_DATE = DECODE(IN_MID_MNTHLY_IND, 'N', TRUNC(IN_DATE,'month'), TRUNC(IN_DATE,'month') + 14)
                     WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
                       AND FNCL_SRVCS_SENT_DATE IS NULL;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
                BEGIN
                    UPDATE UNATTACHED_MNL_DRFT_DTL_HST
                       SET FNCL_SRVCS_SENT_DATE = DECODE(IN_MID_MNTHLY_IND, 'N', TRUNC(IN_DATE,'month'), TRUNC(IN_DATE,'month') + 14)
                     WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
                       AND FNCL_SRVCS_SENT_DATE IS NULL;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
            END IF;
            IF V_COUNT = 100 THEN
                UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
                V_OUT_CLOB := NULL;
                V_COUNT := 0;
                COMMIT;
            END IF;
        END LOOP;
	      IF V_OUT_CLOB IS NOT NULL THEN
            UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
            V_COUNT := 0;
            COMMIT;
        END IF;
        UTL_FILE.FCLOSE(OUTPUT_FILE);
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    IF IN_MID_MNTHLY_IND = 'Y' THEN
        BUILD_1099_DIFF_FILE(IN_DATE);
        CCN_BATCH_PKG.UPDATE_BATCH_JOB('1099_MID_MONTHLY', V_BATCH_NUMBER, V_TRANS_STATUS);
    ELSE
        CCN_BATCH_PKG.UPDATE_BATCH_JOB('1099_MONTHLY', V_BATCH_NUMBER, V_TRANS_STATUS);
    END IF;
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END BUILD_1099_FILE;

PROCEDURE STORE_DRAFT_INTALLER_1099 
/**********************************************************

	This procedure will build the 1099 intaller file from CPR views.  

created : 7/29/2014
changed :
**********************************************************/
(in_date in date) 
IS
BEGIN
NULL;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
  
end STORE_DRAFT_INTALLER_1099;

PROCEDURE OUTSTANDING_DRAFT_EXC
/**********************************************************

	This procedure will generate the Outstanding draft excel sheet
  and mailed to the department depending on the division code

created : nxk927 6/18/2015
changed :
**********************************************************/
(IN_DATE IN DATE,
IN_DIV  IN VARCHAR2)
IS
    CURSOR cur IS
        SELECT COST_CENTER_CODE,     
               SUBSTR(COST_CENTER_CODE, 3) STORE_NUMBER,     
               CHECK_SERIAL_NUMBER,     
               TRANSACTION_DATE,     
               TERMINAL_NUMBER,     
               TRANSACTION_NUMBER,     
               CUSTOMER_ACCOUNT_NUMBER,     
               CUSTOMER_JOB_NUMBER,     
               PAYEE_NAME,     
               NET_AMOUNT,     
               POS_TRANSACTION_CODE     
          FROM STORE_DRAFTS SD  
         WHERE ISSUE_DATE      < IN_DATE
           AND (PAID_DATE      >=  IN_DATE OR PAID_DATE IS NULL)     
           AND (STOP_PAY_DATE  >=  IN_DATE OR STOP_PAY_DATE  IS  NULL)     
           AND (VOID_DATE      >=  IN_DATE OR VOID_DATE IS NULL)  
           AND EXISTS (SELECT 1  
                         FROM HIERARCHY_DETAIL_VIEW  
                        WHERE COST_CENTER_CODE = SD.COST_CENTER_CODE  
                          AND DIVISION = IN_DIV);
V_CLOB     CLOB;    
BEGIN
   FOR REC IN cur LOOP        
            V_CLOB := V_CLOB 
                      ||REC.COST_CENTER_CODE ||','
                      ||REC.STORE_NUMBER||','
                      ||REC.CHECK_SERIAL_NUMBER||','
                      ||REC.TRANSACTION_DATE||','
                      ||REC.TERMINAL_NUMBER||','
                      ||REC.TRANSACTION_NUMBER||','
                      ||REC.CUSTOMER_ACCOUNT_NUMBER||','
                      ||REC.CUSTOMER_JOB_NUMBER||','
                      ||REC.PAYEE_NAME||','
                      ||REC.NET_AMOUNT||','
                      ||REC.POS_TRANSACTION_CODE||CHR(10);
        END LOOP;
    IF V_CLOB <> EMPTY_CLOB() THEN
       IF IN_DIV IS NOT NULL THEN
           MAIL_PKG.SEND_MAIL('OUTSTANDING_DRAFT_EXC_'||IN_DIV, NULL, NULL, V_CLOB);
       END IF;
    END IF;	
END OUTSTANDING_DRAFT_EXC;

END SD_FILE_BUILD_PKG;