create or replace PACKAGE BODY NEW_POSXML_SD_DAILY_LOAD_TMP
/****************************************************************
This package will load the New POSXML TEMP Store Drafts tables
created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************/
AS

PROCEDURE TRUNCATE_TABLE(
/*****************************************************************************
TRUNCATE_TABLE

This procedure will truncate all loaded data for the table name that is
passed in.

created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************************/
IN_TABLE_NAME IN VARCHAR2)
IS

BEGIN

    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || IN_TABLE_NAME;

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END TRUNCATE_TABLE;

PROCEDURE TRUNCATE_POSXML_SD_TABLES
/**************************************************************************************
TRUNCATE all new POSXML store drafts temp tables

This procedure will truncate all previous day data before loading current day data
into POSXML store drafts temp tables.

created : 06/02/2016 axk326 CCN Project....
changed :
**************************************************************************************/
IS
BEGIN

--Truncate temporary POSXML store drafts temp tables
    TRUNCATE_TABLE('POSXML_ISSUE_CHG_DATA_TMP');
    TRUNCATE_TABLE('POSXML_INSTLR_LN_ITEM_DATA_TMP');
    TRUNCATE_TABLE('POSXML_CUST_LINE_ITEM_DATA_TMP');
    TRUNCATE_TABLE('POSXML_DISBRSMT_LINE_ITEM_TMP');
    TRUNCATE_TABLE('POSXML_CSTMR_TMP');
    TRUNCATE_TABLE('POSXML_CSTMR_DTLS_TMP');
    TRUNCATE_TABLE('POSXML_CSTMR_SLS_TAX_TMP');
    TRUNCATE_TABLE('POSXML_CSTMR_BNK_CRD_TMP');
    TRUNCATE_TABLE('POSXML_CSTMR_FRM_OF_PAY_TMP');
    TRUNCATE_TABLE('POSXML_BNK_PAID_DATA_TMP');

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END TRUNCATE_POSXML_SD_TABLES;

PROCEDURE LOAD_POSXML_ISSUE_CHG_DATA_TMP(
/*******************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_ISSUE_CHANGE_DATA_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR POSXML_SD_CUR IS
    SELECT 'O' TRANSACTION_SOURCE,                                                     -- Unused column and obsolete
           'O' TRANSACTION_TYPE,                                                       -- Unused column and obsolete
           CH.STORE_NO COST_CENTER_CODE,
           CDL.DRAFT_NBR CHECK_SERIAL_NUMBER,
           SUBSTR(CDL.DRAFT_NBR, 6, 4) DRAFT_NBR,
           '1'||TO_CHAR(TO_DATE(CDL.LOAD_DATE), 'yymmdd')PROCESS_DATE,
           NULL FILLER,
           'O' TRANSACTION_SEGMENT_TYPE,                                               -- Unused column and obsolete
           NULL NET_AMOUNT_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CDL.DRAFT_AMT, '-', ''), '0', '9', '2')NET_AMOUNT,
           NULL GROSS_AMOUNT_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '9', '2')GROSS_AMOUNT,
           NULL RETAINAGE_AMOUNT_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.INST_RETAINAGE, '-', ''), '0', '9', '2')RETAINAGE_AMOUNT,
           '1'||TO_CHAR(TO_DATE(CH.CTL_DT), 'yymmdd')ISSUE_DATE,
           '1'||TO_CHAR(TO_DATE(CH.TRAN_DATE), 'yymmdd')TRANSACTION_DATE,
           CH.TERMNBR TERMINAL_NUMBER,
           CH.TRANNBR TRANSACTION_NUMBER,
           DECODE (CDL.DRAFT_ACCT_NBR , '0', SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CDL.DRAFT_ACCT_NBR, '0', '9'), CDL.DRAFT_ACCT_NBR) CUSTOMER_ACCOUNT_NUMBER,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.JOBNBR, '0', '2')CUSTOMER_JOB_NUMBER,
           CH.TRANID POS_TRANSACTION_CODE,
           CH.BILLNM PAYEE_NAME,
           CH.BILLADDR1 ADDRESS_LINE_1,
           CH.BILLADDR2 ADDRESS_LINE_2,
           CH.BILLCITY CITY,
           CH.BILLST STATE_CODE,
           CH.BILLZIP ZIP_CODE,
           CH.BILLPHONE PHONE_NUMBER,
           REPLACE(SUBSTR(CH.TRAN_TIMESTAMP, 11, 5), '.', '')TRANSACTION_TIME,
           CH.EMP_NO EMPLOYEE_NUMBER,
           TO_CHAR(TO_DATE(CH.LOAD_DATE), 'MMDD') BOOK_DATE,                           -- Unmatch, Need to determine bookdate later
           SUBSTR(CH.RLS_RUN_CYCLE, 1, 2) CYCLE_RUN_NUMBER,                            -- Unmatch as run cycles are different, just did substr to make the data fit into this table as runcycle is 3 chars and table is only for 2
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.REASON_CODE, '0', '2') REASON_CODE -- For certain tranId's this value is an unmatch and is -1
     FROM CCN_DRAFT_LOGS CDL,
          CCN_HEADERS CH
    WHERE CDL.TRAN_GUID = CH.TRAN_GUID
      AND CDL.RLS_RUN_CYCLE = CH.RLS_RUN_CYCLE
      AND TRUNC(CDL.LOAD_DATE) = TRUNC(IN_DATE);

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW   POSXML_ISSUE_CHG_DATA_TMP%ROWTYPE;

BEGIN
     FOR REC IN POSXML_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.TRANSACTION_SOURCE           := rec.TRANSACTION_SOURCE;
           V_TEMP_ROW.TRANSACTION_TYPE             := rec.TRANSACTION_TYPE;
           V_TEMP_ROW.COST_CENTER_CODE             := rec.COST_CENTER_CODE;
           V_TEMP_ROW.CHECK_SERIAL_NUMBER          := rec.CHECK_SERIAL_NUMBER;
           V_TEMP_ROW.DRAFT_NUMBER                 := rec.DRAFT_NBR;
           V_TEMP_ROW.PROCESS_DATE                 := rec.PROCESS_DATE;
           V_TEMP_ROW.FILLER                       := rec.FILLER;
           V_TEMP_ROW.TRANSACTION_SEGMENT_TYPE     := rec.TRANSACTION_SEGMENT_TYPE;
           V_TEMP_ROW.NET_AMOUNT_SIGN              := rec.NET_AMOUNT_SIGN;
           V_TEMP_ROW.NET_AMOUNT                   := rec.NET_AMOUNT;
           V_TEMP_ROW.GROSS_AMOUNT_SIGN            := rec.GROSS_AMOUNT_SIGN;
           V_TEMP_ROW.GROSS_AMOUNT                 := rec.GROSS_AMOUNT;
           V_TEMP_ROW.RETAINAGE_AMOUNT_SIGN        := rec.RETAINAGE_AMOUNT_SIGN;
           V_TEMP_ROW.RETAINAGE_AMOUNT             := rec.RETAINAGE_AMOUNT;
           V_TEMP_ROW.ISSUE_DATE                   := rec.ISSUE_DATE;
           V_TEMP_ROW.TRANSACTION_DATE             := rec.TRANSACTION_DATE;
           V_TEMP_ROW.TERMINAL_NUMBER              := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER           := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER      := rec.CUSTOMER_ACCOUNT_NUMBER;
           V_TEMP_ROW.CUSTOMER_JOB_NUMBER          := rec.CUSTOMER_JOB_NUMBER;
           V_TEMP_ROW.POS_TRANSACTION_CODE         := rec.POS_TRANSACTION_CODE;
           V_TEMP_ROW.PAYEE_NAME                   := rec.PAYEE_NAME;
           V_TEMP_ROW.ADDRESS_LINE_1               := rec.ADDRESS_LINE_1;
           V_TEMP_ROW.ADDRESS_LINE_2               := rec.ADDRESS_LINE_2;
           V_TEMP_ROW.CITY                         := rec.CITY;
           V_TEMP_ROW.STATE_CODE                   := rec.STATE_CODE;
           V_TEMP_ROW.ZIP_CODE                     := rec.ZIP_CODE;
           V_TEMP_ROW.PHONE_NUMBER                 := rec.PHONE_NUMBER;
           V_TEMP_ROW.TRANSACTION_TIME             := rec.TRANSACTION_TIME;
           V_TEMP_ROW.EMPLOYEE_NUMBER              := rec.EMPLOYEE_NUMBER;
           V_TEMP_ROW.BOOK_DATE                    := rec.BOOK_DATE;
           V_TEMP_ROW.CYCLE_RUN_NUMBER             := rec.CYCLE_RUN_NUMBER;
           V_TEMP_ROW.REASON_CODE                  := rec.REASON_CODE;

           INSERT INTO POSXML_ISSUE_CHG_DATA_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN

                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_ISSUE_CHG_DATA_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.CHECK_SERIAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_ISSUE_CHG_DATA_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_POSXML_ISSUE_CHG_DATA_TMP;

PROCEDURE LOAD_POSXML_INSTLR_LID_TMP(
/*******************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_INSTLR_LN_ITEM_DATA_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS
-- Cursor for loading the table POSXML_INSTLR_LN_ITEM_DATA_TMP
   CURSOR POSXML_INSTLR_LID IS
       SELECT 'O' TRANSACTION_SOURCE,              -- Unused column and obsolete
              'O' TRANSACTION_TYPE,                -- Unused column and obsolete
              CH.STORE_NO COST_CENTER_CODE,
              CDL.DRAFT_NBR CHECK_SERIAL_NUMBER,
              '1'||TO_CHAR(TO_DATE(CDL.LOAD_DATE), 'yymmdd') PROCESS_DATE,
              NULL FILLER,
              'O' TRANSACTION_SEGMENT_TYPE,        -- Unused column and obsolete
              NULL ITEM_EXT_AMOUNT_SIGN,
              SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CIL.IL_EXTENDED_PRICE, '-', ''), '0', '9', '2')ITEM_EXT_AMOUNT,
              CIL.IL_P_TERM_NBR ORGNL_TERMINAL_NUMBER,
              CIL.IL_TRAN_NBR ORGNL_TRANSACTION_NUMBER,
              NULL ITEM_QTY_SIGN,
              SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CIL.IL_QTY, '0', '7', '2')ITEM_QTY,
              NULL ITEM_PRICE_SIGN,
              SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CIL.IL_PRICE, '-', ''), '0', '7', '2')ITEM_PRICE,
              '1693' GL_PRIME_ACCOUNT_NUMBER,      -- Hard coded as 1693 for now
              '120' GL_SUB_ACCOUNT_NUMBER          -- Hard coded for 120 now
         FROM CCN_HEADERS CH,
              CCN_DRAFT_LOGS CDL,
              CCN_INSTALLER_LINES CIL
        WHERE CH.TRAN_GUID = CDL.TRAN_GUID
          AND CH.TRAN_GUID = CIL.TRAN_GUID
          AND CH.RLS_RUN_CYCLE = CDL.RLS_RUN_CYCLE
          AND CH.RLS_RUN_CYCLE = CIL.RLS_RUN_CYCLE
          AND CH.TRANID = '13'
          AND TRUNC(CDL.LOAD_DATE) = TRUNC(IN_DATE);

    V_COUNT     NUMBER := 0;
    V_TCOUNT    NUMBER := 0;
    V_TEMP_ROW  POSXML_INSTLR_LN_ITEM_DATA_TMP%ROWTYPE;
BEGIN

-- Cursor for loading POSXML_INSTLR_LN_ITEM_DATA_TMP
   FOR REC IN POSXML_INSTLR_LID
     LOOP
        BEGIN
           V_TEMP_ROW.TRANSACTION_SOURCE                      := rec.TRANSACTION_SOURCE;
           V_TEMP_ROW.TRANSACTION_TYPE                        := rec.TRANSACTION_TYPE;
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.CHECK_SERIAL_NUMBER                     := rec.CHECK_SERIAL_NUMBER;
           V_TEMP_ROW.PROCESS_DATE                            := rec.PROCESS_DATE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.TRANSACTION_SEGMENT_TYPE                := rec.TRANSACTION_SEGMENT_TYPE;
           V_TEMP_ROW.ITEM_EXT_AMOUNT_SIGN                    := rec.ITEM_EXT_AMOUNT_SIGN;
           V_TEMP_ROW.ITEM_EXT_AMOUNT                         := rec.ITEM_EXT_AMOUNT;
           V_TEMP_ROW.ORGNL_TERMINAL_NUMBER                   := rec.ORGNL_TERMINAL_NUMBER;
           V_TEMP_ROW.ORGNL_TRANSACTION_NUMBER                := rec.ORGNL_TRANSACTION_NUMBER;
           V_TEMP_ROW.ITEM_QUANTITY_SIGN                      := rec.ITEM_QTY_SIGN;
           V_TEMP_ROW.ITEM_QUANTITY                           := rec.ITEM_QTY;
           V_TEMP_ROW.ITEM_PRICE_SIGN                         := rec.ITEM_PRICE_SIGN;
           V_TEMP_ROW.ITEM_PRICE                              := rec.ITEM_PRICE;
           V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER                 := rec.GL_PRIME_ACCOUNT_NUMBER;
           V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER                   := rec.GL_SUB_ACCOUNT_NUMBER;

           INSERT INTO POSXML_INSTLR_LN_ITEM_DATA_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_INSTLR_LID_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           rec.CHECK_SERIAL_NUMBER);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_INSTLR_LID_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_INSTLR_LID_TMP;

PROCEDURE LOAD_POSXML_CSTMR_LID_TMP(
/*******************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_CUST_LINE_ITEM_DATA_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS
-- Cursor for loading the table POSXML_CUST_LINE_ITEM_DATA_TMP
 CURSOR POSXML_CUST_LID IS
     SELECT 'O' TRANSACTION_SOURCE,        -- Unused column and obsolete
            'O' TRANSACTION_TYPE,          -- Unused column and obsolete
            CH.STORE_NO COST_CENTER_CODE,
            CDL.DRAFT_NBR CHECK_SERIAL_NUMBER,
            '1'||TO_CHAR(TO_DATE(CDL.LOAD_DATE), 'yymmdd') PROCESS_DATE,
            NULL FILLER,
            'O' TRANSACTION_SEGMENT_TYPE,  -- Unused column and obsolete
            NULL ITEM_EXT_AMOUNT_SIGN,
            SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CDL.DRAFT_AMT, '-', ''), '0', '9', '2')ITEM_EXT_AMOUNT,
            TRIM(CDL.DRAFT_ACCT_NBR) ORGNL_CUSTOMER_ACCOUNT_NUMBER,
            SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.JOBNBR, '0', '2')ORGNL_JOB_NUMBER
       FROM CCN_HEADERS CH,
            CCN_DRAFT_LOGS CDL
      WHERE CH.TRAN_GUID = CDL.TRAN_GUID
        AND CH.RLS_RUN_CYCLE = CDL.RLS_RUN_CYCLE
        AND CH.TRANID IN ('19', '91')
        AND TRUNC(CDL.LOAD_DATE) = TRUNC(IN_DATE);

    V_COUNT     NUMBER := 0;
    V_TCOUNT    NUMBER := 0;
    V_TEMP_ROW  POSXML_CUST_LINE_ITEM_DATA_TMP%ROWTYPE;
BEGIN

FOR REC IN POSXML_CUST_LID
     LOOP
        BEGIN
           V_TEMP_ROW.TRANSACTION_SOURCE                      := rec.TRANSACTION_SOURCE;
           V_TEMP_ROW.TRANSACTION_TYPE                        := rec.TRANSACTION_TYPE;
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.CHECK_SERIAL_NUMBER                     := rec.CHECK_SERIAL_NUMBER;
           V_TEMP_ROW.PROCESS_DATE                            := rec.PROCESS_DATE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.TRANSACTION_SEGMENT_TYPE                := rec.TRANSACTION_SEGMENT_TYPE;
           V_TEMP_ROW.ITEM_EXT_AMOUNT_SIGN                    := rec.ITEM_EXT_AMOUNT_SIGN;
           V_TEMP_ROW.ITEM_EXT_AMOUNT                         := rec.ITEM_EXT_AMOUNT;
           V_TEMP_ROW.ORGNL_CUSTOMER_ACCOUNT_NUMBER           := rec.ORGNL_CUSTOMER_ACCOUNT_NUMBER;
           V_TEMP_ROW.ORGNL_JOB_NUMBER                        := rec.ORGNL_JOB_NUMBER;

           INSERT INTO POSXML_CUST_LINE_ITEM_DATA_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_CUST_LID_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           rec.CHECK_SERIAL_NUMBER);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_CSTMR_LID_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_CSTMR_LID_TMP;

PROCEDURE LOAD_POSXML_DSBRSMT_LID_TMP(
/*******************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_DISBRSMT_LINE_ITEM_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS

-- POSXML_DISBRSMT_LINE_ITEM_TMP
 CURSOR POSXML_DISBRSMT_LID IS
     SELECT 'O' TRANSACTION_SOURCE,              -- Unused column and obsolete
            'O' TRANSACTION_TYPE,                -- Unused column and obsolete
            CH.STORE_NO COST_CENTER_CODE,
            CDL.DRAFT_NBR CHECK_SERIAL_NUMBER,
            '1'||TO_CHAR(TO_DATE(CDL.LOAD_DATE), 'yymmdd') PROCESS_DATE,
            NULL FILLER,
            'O' TRANSACTION_SEGMENT_TYPE,        -- Unused column and obsolete
            NULL ITEM_EXT_AMOUNT_SIGN,
            SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CML.AMT, '-', ''), '0', '9', '2')ITEM_EXT_AMOUNT,
            SUBSTR(CML.PRIMESUB, 1, 4) GL_PRIME_ACCOUNT_NUMBER,
            SUBSTR(CML.PRIMESUB, 5, 3) GL_SUB_ACCOUNT_NUMBER
       FROM CCN_HEADERS CH,
            CCN_DRAFT_LOGS CDL,
            CCN_MISC_LINES CML
      WHERE CH.TRAN_GUID = CDL.TRAN_GUID
        AND CH.TRAN_GUID = CML.TRAN_GUID
        AND CH.RLS_RUN_CYCLE = CDL.RLS_RUN_CYCLE
        AND CH.RLS_RUN_CYCLE = CML.RLS_RUN_CYCLE
        AND CH.TRANID = '82'
        AND TRUNC(CDL.LOAD_DATE) = TRUNC(IN_DATE);

    V_COUNT     NUMBER := 0;
    V_TCOUNT    NUMBER := 0;
    V_TEMP_ROW  POSXML_DISBRSMT_LINE_ITEM_TMP%ROWTYPE;
BEGIN

FOR REC IN POSXML_DISBRSMT_LID
     LOOP
        BEGIN
           V_TEMP_ROW.TRANSACTION_SOURCE                      := rec.TRANSACTION_SOURCE;
           V_TEMP_ROW.TRANSACTION_TYPE                        := rec.TRANSACTION_TYPE;
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.CHECK_SERIAL_NUMBER                     := rec.CHECK_SERIAL_NUMBER;
           V_TEMP_ROW.PROCESS_DATE                            := rec.PROCESS_DATE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.TRANSACTION_SEGMENT_TYPE                := rec.TRANSACTION_SEGMENT_TYPE;
           V_TEMP_ROW.ITEM_EXT_AMOUNT_SIGN                    := rec.ITEM_EXT_AMOUNT_SIGN;
           V_TEMP_ROW.ITEM_EXT_AMOUNT                         := rec.ITEM_EXT_AMOUNT;
           V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER                 := rec.GL_PRIME_ACCOUNT_NUMBER;
           V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER                   := rec.GL_SUB_ACCOUNT_NUMBER;

           INSERT INTO POSXML_DISBRSMT_LINE_ITEM_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_DSBRSMT_LID_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           rec.CHECK_SERIAL_NUMBER);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_DSBRSMT_LID_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_DSBRSMT_LID_TMP;

PROCEDURE LOAD_POSXML_CSTMR_TMP(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_CUSTOMER_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************************/
IN_DATE DATE)
AS
CURSOR POSXML_SD_CUR IS
    SELECT CH.STORE_NO COST_CENTER_CODE,
           TRIM(CH.TERMNBR) TERMINAL_NUMBER,
           TRIM(CH.TRANNBR) TRANSACTION_NUMBER,
           'O' SORT_FORCE,                   -- Unused column and obsolete
           'O' SEGMENT_CODE,                 -- Unused column and obsolete
           'O' SUB_SEGMENT_CODE,             -- Unused column and obsolete
           NULL FILLER,
           '1'||TO_CHAR(TO_DATE(CH.TRAN_DATE), 'yymmdd')TRANSACTION_DATE,
           TRIM(CH.ACCTNBR) CUSTOMER_ACCOUNT_NUMBER,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.JOBNBR, '0', '2')CUSTOMER_JOB_NUMBER,
           'O' POS_TRANSACTION_NUMBER_BATCH, -- Legacy, we are not using it and Obsolete
           REPLACE(SUBSTR(CH.TRAN_TIMESTAMP, 11, 5), '.', '')POS_TRANSACTION_TIME,
           SUBSTR(CH.RLS_RUN_CYCLE, 1, 2) CYCLE_RUN_NUMBER,
           CH.EMP_NO EMPLOYEE_NUMBER,
           'O' POS_MODE_INDICATOR,           -- Unused Column and obsolete
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.CUSTTYPNBR, '0', '2')BUSINESS_TYPE_CODE,
           CH.TERRNBR SLS_TERRITORY_NUMBER,
           'O' SLS_TERRITORY_NUMBER_NO_CORR, -- Unused Column and obsolete
           'O' TERRITORY_SPLIT_INDICATOR,    -- Unused Column and obsolete
           TRIM(CH.TRANID) POS_TRANSACTION_CODE,
           'O' POS_TRANSACTION_DATE,         -- Ignorable, as this is from legacy and is Obsolete
           'O' POS_TERMINAL_NUMBER,          -- Ignorable, as this is from legacy and is Obsolete
           'O' POS_TRANSACTION_NUMBER,       -- Ignorable, as this is from legacy and is Obsolete
           'O' DATA_INDICATOR,               -- Ignorable, as this is from legacy and is Obsolete
           SUBSTR(CH.PONBR, 1, 20) PURCHASE_ORDER_NUMBER -- This will be modified later when the right column is populated.
      FROM CCN_HEADERS CH
     WHERE CH.TRANID IN ('10', '11', '19', '22', '31', '41')
       AND TRUNC(CH.LOAD_DATE) = TRUNC(IN_DATE);

      V_COUNT     NUMBER := 0;
      V_TCOUNT    NUMBER := 0;
      V_TEMP_ROW  POSXML_CSTMR_TMP%ROWTYPE;

BEGIN
  FOR REC IN POSXML_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.TERMINAL_NUMBER                         := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER                      := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.SORT_FORCE                              := rec.SORT_FORCE;
           V_TEMP_ROW.SEGMENT_CODE                            := rec.SEGMENT_CODE;
           V_TEMP_ROW.SUB_SEGMENT_CODE                        := rec.SUB_SEGMENT_CODE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.TRANSACTION_DATE                        := rec.TRANSACTION_DATE;
           V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER                 := rec.CUSTOMER_ACCOUNT_NUMBER;
           V_TEMP_ROW.CUSTOMER_JOB_NUMBER                     := rec.CUSTOMER_JOB_NUMBER;
           V_TEMP_ROW.POS_TRANSACTION_NUMBER_BATCH            := rec.POS_TRANSACTION_NUMBER_BATCH;
           V_TEMP_ROW.POS_TRANSACTION_TIME                    := rec.POS_TRANSACTION_TIME;
           V_TEMP_ROW.CYCLE_RUN_NUMBER                        := rec.CYCLE_RUN_NUMBER;
           V_TEMP_ROW.EMPLOYEE_NUMBER                         := rec.EMPLOYEE_NUMBER;
           V_TEMP_ROW.POS_MODE_INDICATOR                      := rec.POS_MODE_INDICATOR;
           V_TEMP_ROW.BUSINESS_TYPE_CODE                      := rec.BUSINESS_TYPE_CODE;
           V_TEMP_ROW.SLS_TERRITORY_NUMBER                    := rec.SLS_TERRITORY_NUMBER;
           V_TEMP_ROW.SLS_TERRITORY_NUMBER_NO_CORR            := rec.SLS_TERRITORY_NUMBER_NO_CORR;
           V_TEMP_ROW.TERRITORY_SPLIT_INDICATOR               := rec.TERRITORY_SPLIT_INDICATOR;
           V_TEMP_ROW.POS_TRANSACTION_CODE                    := rec.POS_TRANSACTION_CODE;
           V_TEMP_ROW.POS_TRANSACTION_DATE                    := rec.POS_TRANSACTION_DATE;
           V_TEMP_ROW.POS_TERMINAL_NUMBER                     := rec.POS_TERMINAL_NUMBER;
           V_TEMP_ROW.POS_TRANSACTION_NUMBER                  := rec.POS_TRANSACTION_NUMBER;
           V_TEMP_ROW.DATA_INDICATOR                          := rec.DATA_INDICATOR;
           V_TEMP_ROW.PURCHASE_ORDER_NUMBER                   := rec.PURCHASE_ORDER_NUMBER;

           INSERT INTO POSXML_CSTMR_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 50 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_CSTMR_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_CSTMR_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_CSTMR_TMP;

PROCEDURE LOAD_POSXML_CSTMR_DTLS_TMP(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_CUSTOMER_DETAILS_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************************/
IN_DATE DATE)
AS

CURSOR POSXML_SD_CUR IS
    SELECT CH.STORE_NO COST_CENTER_CODE,
           CH.TERMNBR TERMINAL_NUMBER,
           CH.TRANNBR TRANSACTION_NUMBER,
           'O' SORT_FORCE,
           'O' SEGMENT_CODE,
           'O' SUB_SEGMENT_CODE,
           NULL FILLER,
           CSL.SALESNBR SALES_NUMBER,
           NULL ITEM_QUANTITY_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CSL.QTY, '0', '7', '2')ITEM_QUANTITY,
           NULL ITEM_PRICE_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CSL.PR, '-', ''), '0', '7', '2')ITEM_PRICE,
           NULL ITEM_EXTERNAL_AMOUNT_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CSL.EXTENDED_PRICE, '-', ''), '0', '7', '2')ITEM_EXTERNAL_AMOUNT,
           NULL ITEM_DISC_AMOUNT_SIGN,             -- NULL ITEM_DISC_AMOUNT_SIGN,
           'D' ITEM_DISC_AMOUNT,                   -- Discout related items represented as D, will change it as per keiths advice
           'O' ITEM_SALES_TAX_INDICATOR,
           'D' ITEM_DISC_CODE,                        -- Discout related items represented as D, will change it as per keiths advice
           'D' ITEM_DISC_TYPE,                        -- Discout related items represented as D, will change it as per keiths advice
           'D' SALES_PROMO_CODE,
           CSL.PRIME GL_PRIME_ACCOUNT,
           CSL.SUB GL_SUB_ACCOUNT,
           NULL SCHEDULE_TYPE,
           NULL SCHEDULE_VERSION,
           NULL PRICE_LVL_CODE,
           '000' PERCENT_OFF_LVL,
           NULL PROD_DESC_SOURCE,
           '00000' ORGNL_POS_TERMINAL_NUMBER,
           '00000' ORGNL_POS_TRANSACTION_NUMBER
      FROM CCN_HEADERS CH,
           CCN_SALES_LINES CSL
     WHERE CH.TRAN_GUID = CSL.TRAN_GUID
       AND CH.RLS_RUN_CYCLE = CSL.RLS_RUN_CYCLE
       AND TRUNC(CH.LOAD_DATE) = TRUNC(IN_DATE);

      V_COUNT     NUMBER := 0;
      V_TCOUNT    NUMBER := 0;
      V_TEMP_ROW  POSXML_CSTMR_DTLS_TMP%ROWTYPE;

BEGIN
  FOR REC IN POSXML_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.TERMINAL_NUMBER                         := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER                      := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.SORT_FORCE                              := rec.SORT_FORCE;
           V_TEMP_ROW.SEGMENT_CODE                            := rec.SEGMENT_CODE;
           V_TEMP_ROW.SUB_SEGMENT_CODE                        := rec.SUB_SEGMENT_CODE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.SALES_NUMBER                            := rec.SALES_NUMBER;
           V_TEMP_ROW.ITEM_QUANTITY_SIGN                      := rec.ITEM_QUANTITY_SIGN;
           V_TEMP_ROW.ITEM_QUANTITY                           := rec.ITEM_QUANTITY;
           V_TEMP_ROW.ITEM_PRICE_SIGN                         := rec.ITEM_PRICE_SIGN;
           V_TEMP_ROW.ITEM_PRICE                              := rec.ITEM_PRICE;
           V_TEMP_ROW.ITEM_EXTERNAL_AMOUNT_SIGN               := rec.ITEM_EXTERNAL_AMOUNT_SIGN;
           V_TEMP_ROW.ITEM_EXTERNAL_AMOUNT                    := rec.ITEM_EXTERNAL_AMOUNT;
           V_TEMP_ROW.ITEM_DISC_AMOUNT_SIGN                   := rec.ITEM_DISC_AMOUNT_SIGN;
           V_TEMP_ROW.ITEM_DISC_AMOUNT                        := rec.ITEM_DISC_AMOUNT;
           V_TEMP_ROW.ITEM_SALES_TAX_INDICATOR                := rec.ITEM_SALES_TAX_INDICATOR;
           V_TEMP_ROW.ITEM_DISC_CODE                          := rec.ITEM_DISC_CODE;
           V_TEMP_ROW.ITEM_DISC_TYPE                          := rec.ITEM_DISC_TYPE;
           V_TEMP_ROW.SALES_PROMO_CODE                        := rec.SALES_PROMO_CODE;
           V_TEMP_ROW.GL_PRIME_ACCOUNT                        := rec.GL_PRIME_ACCOUNT;
           V_TEMP_ROW.GL_SUB_ACCOUNT                          := rec.GL_SUB_ACCOUNT;
           V_TEMP_ROW.SCHEDULE_TYPE                           := rec.SCHEDULE_TYPE;
           V_TEMP_ROW.SCHEDULE_VERSION                        := rec.SCHEDULE_VERSION;
           V_TEMP_ROW.PRICE_LVL_CODE                          := rec.PRICE_LVL_CODE;
           V_TEMP_ROW.PERCENT_OFF_LVL                         := rec.PERCENT_OFF_LVL;
           V_TEMP_ROW.PROD_DESC_SOURCE                        := rec.PROD_DESC_SOURCE;
           V_TEMP_ROW.ORGNL_POS_TERMINAL_NUMBER               := rec.ORGNL_POS_TERMINAL_NUMBER;
           V_TEMP_ROW.ORGNL_POS_TRANSACTION_NUMBER            := rec.ORGNL_POS_TRANSACTION_NUMBER;

           INSERT INTO POSXML_CSTMR_DTLS_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_CSTMR_DTLS_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_CSTMR_DTLS_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_POSXML_CSTMR_DTLS_TMP;

PROCEDURE LOAD_POSXML_CSTMR_SLS_TAX_TMP(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table 
"POSXML_CSTMR_SALES_TAX_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************************/
IN_DATE DATE)
AS

CURSOR POSXML_SD_CUR IS
    SELECT CH.STORE_NO COST_CENTER_CODE,
           CH.TERMNBR TERMINAL_NUMBER,
           CH.TRANNBR TRANSACTION_NUMBER,
           'O' SORT_FORCE,                      -- Unused column and obsolete
           'O' SEGMENT_CODE,                    -- Unused column and obsolete
           'O' SUB_SEGMENT_CODE,                -- Unused column and obsolete
           NULL FILLER,
           'O' SALES_TAX_CORR_INDICATOR,        -- Unused column and obsolete
           NULL SALES_TAX_COLL_AMOUNT_SIGN,
           'S' SALES_TAX_COLL_AMOUNT,           -- Sales tax info is not available now and is being represented as 'S'
           'O' SALES_TAX_INDICATOR,             -- Unused column and obsolete
           NULL SALES_TAX_RATE_SIGN,
           'S' SALES_TAX_RATE,                  -- Sales tax info is not available now and is being represented as 'S'
           'S' SALES_TAX_CODE                   -- Sales tax info is not available now and is being represented as 'S'
      FROM CCN_HEADERS CH
     WHERE CH.TRANID IN ('10', '11', '19', '22', '31', '41')
       AND TRUNC(CH.LOAD_DATE) = TRUNC(IN_DATE);

      V_COUNT     NUMBER := 0;
      V_TCOUNT    NUMBER := 0;
      V_TEMP_ROW  POSXML_CSTMR_SLS_TAX_TMP%ROWTYPE;

BEGIN

FOR REC IN POSXML_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.TERMINAL_NUMBER                         := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER                      := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.SORT_FORCE                              := rec.SORT_FORCE;
           V_TEMP_ROW.SEGMENT_CODE                            := rec.SEGMENT_CODE;
           V_TEMP_ROW.SUB_SEGMENT_CODE                        := rec.SUB_SEGMENT_CODE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.SALES_TAX_COLL_AMOUNT_SIGN              := rec.SALES_TAX_COLL_AMOUNT_SIGN;
           V_TEMP_ROW.SALES_TAX_COLL_AMOUNT                   := rec.SALES_TAX_COLL_AMOUNT;
           V_TEMP_ROW.SALES_TAX_INDICATOR                     := rec.SALES_TAX_INDICATOR;
           V_TEMP_ROW.SALES_TAX_RATE_SIGN                     := rec.SALES_TAX_RATE_SIGN;
           V_TEMP_ROW.SALES_TAX_RATE                          := rec.SALES_TAX_RATE;
           V_TEMP_ROW.SALES_TAX_CODE                          := rec.SALES_TAX_CODE;

           INSERT INTO POSXML_CSTMR_SLS_TAX_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_CSTMR_SLS_TAX_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_CSTMR_SLS_TAX_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_CSTMR_SLS_TAX_TMP;

PROCEDURE LOAD_POSXML_CSTMR_BNK_CRD_TMP(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_CSTMR_BANK_CARD_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************************/
IN_DATE DATE)
AS

CURSOR POSXML_SD_CUR IS
    SELECT CH.STORE_NO COST_CENTER_CODE,
           CH.TERMNBR TERMINAL_NUMBER,
           CH.TRANNBR TRANSACTION_NUMBER,
           'O' SORT_FORCE,             -- Unused column and obsolete
           'O' SEGMENT_CODE,           -- Unused column and obsolete
           'O' SUB_SEGMENT_CODE,       -- Unused column and obsolete
           NULL FILLER,
           TRIM(REPLACE(CBC.BC_BIN, '-', '')) BANK_CARD_ACCOUNT_NUMBER,
           'R' BANK_AUTH,              -- Need to replace with CBC.BC_AUTH_NO when the issue is fixed
           NULL BANK_AMOUNT_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CBC.BC_AMT, '-', ''), '0', '9', '2')BANK_AMOUNT,
           'R' BANK_TYPE               -- Required and need to replace when the column value is available
      FROM CCN_HEADERS CH,
           CCN_BANK_CARDS CBC
     WHERE CH.TRAN_GUID = CBC.TRAN_GUID
       AND CH.RLS_RUN_CYCLE = CBC.RLS_RUN_CYCLE
       AND CH.TRANID IN ('10')
       AND TRUNC(CH.LOAD_DATE) = TRUNC(IN_DATE);

      V_COUNT     NUMBER := 0;
      V_TCOUNT    NUMBER := 0;
      V_TEMP_ROW  POSXML_CSTMR_BNK_CRD_TMP%ROWTYPE;

BEGIN
  FOR REC IN POSXML_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.COST_CENTER_CODE                        := rec.COST_CENTER_CODE;
           V_TEMP_ROW.TERMINAL_NUMBER                         := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER                      := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.SORT_FORCE                              := rec.SORT_FORCE;
           V_TEMP_ROW.SEGMENT_CODE                            := rec.SEGMENT_CODE;
           V_TEMP_ROW.SUB_SEGMENT_CODE                        := rec.SUB_SEGMENT_CODE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.BANK_CARD_ACCOUNT_NUMBER                := rec.BANK_CARD_ACCOUNT_NUMBER;
           V_TEMP_ROW.BANK_AUTH                               := rec.BANK_AUTH;
           V_TEMP_ROW.BANK_AMOUNT_SIGN                        := rec.BANK_AMOUNT_SIGN;
           V_TEMP_ROW.BANK_AMOUNT                             := rec.BANK_AMOUNT;
           V_TEMP_ROW.BANK_TYPE                               := rec.BANK_TYPE;

           INSERT INTO POSXML_CSTMR_BNK_CRD_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_CSTMR_BNK_CRD_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_CSTMR_BNK_CRD_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_CSTMR_BNK_CRD_TMP;

PROCEDURE LOAD_POSXML_CSTMR_FOP_TMP(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POSXML_CSTMR_FRM_OF_PAY_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed :
*****************************************************************************/
IN_DATE DATE)
AS

CURSOR POSXML_SD_CUR IS
    SELECT CH.STORE_NO COST_CENTER_CODE,
           CH.TERMNBR TERMINAL_NUMBER,
           CH.TRANNBR TRANSACTION_NUMBER,
           'O' SORT_FORCE,                        -- Unused column and obsolete
           'O' SEGMENT_CODE,                      -- Unused column and obsolete
           'O' SUB_SEGMENT_CODE,                  -- Unused column and obsolete
           NULL FILLER,
           'O' PAY_DISC_CODE,                     -- Unused Column and Obsolete
           NULL TRANSACTION_TOTAL_AMOUNT_SIGN,
           SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2') TRANSACTION_TOTAL_AMOUNT,
           'O' POS_LINE_CNT,                      -- Unused column and we dont need it
           NULL PAY_AMOUNT_SIGN,
           'R' PAY_AMOUNT,                        -- Need to change when ever the column is available
           NULL POS_DISC_SIGN,
           '0000000' POS_DISC,
           NULL SALES_DISC_AMOUNT_SIGN,
           '0000000' SALES_DISC_AMOUNT            -- Unused Column and obsolete
      FROM CCN_HEADERS CH
     WHERE CH.TRANID IN ('10', '11', '13', '19', '22', '31', '41', '82', '91')
       AND TRUNC(CH.LOAD_DATE) = TRUNC(IN_DATE);

      V_COUNT     NUMBER := 0;
      V_TCOUNT    NUMBER := 0;
      V_TEMP_ROW  POSXML_CSTMR_FRM_OF_PAY_TMP%ROWTYPE;

BEGIN

FOR REC IN POSXML_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.COST_CENTER_CODE                        := rec. COST_CENTER_CODE;
           V_TEMP_ROW.TERMINAL_NUMBER                         := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER                      := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.SORT_FORCE                              := rec.SORT_FORCE;
           V_TEMP_ROW.SEGMENT_CODE                            := rec.SEGMENT_CODE;
           V_TEMP_ROW.SUB_SEGMENT_CODE                        := rec.SUB_SEGMENT_CODE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.PAY_DISC_CODE                           := rec.PAY_DISC_CODE;
           V_TEMP_ROW.TRANSACTION_TOTAL_AMOUNT_SIGN           := rec.TRANSACTION_TOTAL_AMOUNT_SIGN;
           V_TEMP_ROW.TRANSACTION_TOTAL_AMOUNT                := rec.TRANSACTION_TOTAL_AMOUNT;
           V_TEMP_ROW.POS_LINE_CNT                            := rec.POS_LINE_CNT;
           V_TEMP_ROW.PAY_AMOUNT_SIGN                         := rec.PAY_AMOUNT_SIGN;
           V_TEMP_ROW.PAY_AMOUNT                              := rec.PAY_AMOUNT;
           V_TEMP_ROW.POS_DISC_SIGN                           := rec.POS_DISC_SIGN;
           V_TEMP_ROW.POS_DISC                                := rec.POS_DISC;
           V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN                  := rec.SALES_DISC_AMOUNT_SIGN;
           V_TEMP_ROW.SALES_DISC_AMOUNT                       := rec.SALES_DISC_AMOUNT;

           INSERT INTO POSXML_CSTMR_FRM_OF_PAY_TMP VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POSXML_CSTMR_FOP_TMP',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POSXML_CSTMR_FOP_TMP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POSXML_CSTMR_FOP_TMP;

PROCEDURE POSXML_DAILY_LOAD_SP(
/************************************************************************
POSXML_DAILY_LOAD_SP

This Procedure is a wrapper for the daily Load of the store drafts tables
* Loads all the store drafts tables

created : 04/01/2016 axk326 CCN Project....
changed :
************************************************************************/
IN_DATE DATE)
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML_ISSUE_CHG_DATA_TMP Table ';
      LOAD_POSXML_ISSUE_CHG_DATA_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_ISSUE_CHG_DATA_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML Store Drafts Installer Line item Details Tables ';
      LOAD_POSXML_INSTLR_LID_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_INSTLR_LN_ITEM_DATA_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML Store Drafts Disbursment Line item Details Tables ';
      LOAD_POSXML_DSBRSMT_LID_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_DISBRSMT_LINE_ITEM_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML Store Drafts Customer Line item Details Tables ';
      LOAD_POSXML_CSTMR_LID_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_CUST_LINE_ITEM_DATA_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML_CSTMR_TMP Table ';
      LOAD_POSXML_CSTMR_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_CSTMR_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML_CSTMR_DTLS_TMP Table ';
      LOAD_POSXML_CSTMR_DTLS_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_CSTMR_DTLS_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML_CSTMR_SLS_TAX_TMP Table ';
      LOAD_POSXML_CSTMR_SLS_TAX_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_CSTMR_SLS_TAX_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML_CSTMR_BNK_CRD_TMP Table ';
      LOAD_POSXML_CSTMR_BNK_CRD_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_CSTMR_BNK_CRD_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load POSXML_CSTMR_FOP_TMP Table ';
      LOAD_POSXML_CSTMR_FOP_TMP(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POSXML_CSTMR_FOP_TMP loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POSXML_DAILY_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END POSXML_DAILY_LOAD_SP;

PROCEDURE POSXML_SD_DAILY_LOAD_SP(
/*******************************************************************************
POSXML_SD_DAILY_LOAD_SP

This Procedure is a wrapper for the Daily Load of the POSXML store drafts TEMP
tables

created : 04/01/2016 axk326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
    V_START_TIME_SD DATE := SYSDATE;
    V_CLOB       CLOB;

    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('POSXML_SD_DLY_LOAD', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
-- STEP 1
-- Call to Truncate all the POSXML Store Drafts temp tables before starting a fresh load
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Truncate store drafts POSXML Temp Tables ';
      TRUNCATE_POSXML_SD_TABLES();
      DBMS_OUTPUT.PUT_LINE('Truncating completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

-- STEP 2
-- Call to perform DailyLoad for POSXML SD temp tables from XML_DOCUMENT column of POS_XML_IFACE table
      POSXML_DAILY_LOAD_SP(IN_DATE);
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('POSXML_SD_DLY_LOAD', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POSXML_SD_DAILY_LOAD_SP',
                                     SQLERRM,
                                    '000000',
                                    '0000000000');
END POSXML_SD_DAILY_LOAD_SP;

END NEW_POSXML_SD_DAILY_LOAD_TMP;