create or replace PACKAGE BODY POSXML_PNP_TO_STRDRT_LOAD_PKG AS

/**************************************************************** 
This package will load the New Interface tables
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************/

PROCEDURE LOAD_CCN_LOAD_STATUS
/****************************************************************************
This procedure is used to load the CCN_LOAD_STATUS new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
    SELECT PCL.RLS_RUN_CYCLE,
           PCL.END_TS,
           PCL.STATUS_CODE,
           PCL.START_TS
      FROM PNP.CCN_LOAD_STATUS PCL
     WHERE PCL.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                  FROM PNP.CCN_LOAD_STATUS); 
                        
   V_COUNT     NUMBER := 0;
   V_TCOUNT    NUMBER := 0;
   V_TEMP_ROW  CCN_LOAD_STATUS%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE    := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.FINISH_TS        := rec.END_TS;
           V_TEMP_ROW.STATUS           := rec.STATUS_CODE;
           V_TEMP_ROW.START_TS         := rec.START_TS;
           V_TEMP_ROW.LOAD_DATE        := TRUNC(SYSDATE);

           INSERT INTO CCN_LOAD_STATUS VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_LOAD_STATUS',
                                           SQLERRM,
                                           rec.RLS_RUN_CYCLE,
                                           '0000000000');
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_LOAD_STATUS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_LOAD_STATUS;

PROCEDURE LOAD_CCN_HEADERS
/****************************************************************************
This procedure is used to load the CCN_HEADERS new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
   SELECT PCH.*
     FROM PNP.CCN_HEADERS PCH
    WHERE PCH.TRANID IN ('10', '11', '13', '19', '22', '31', '41', '82', '91')
      AND PCH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                 FROM PNP.CCN_LOAD_STATUS);   
                        
   V_COUNT    NUMBER := 0;
   V_TCOUNT   NUMBER := 0;
   V_TEMP_ROW CCN_HEADERS%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.BOOK_YR           := rec.BOOK_YR;
           V_TEMP_ROW.BOOK_MO           := rec.BOOK_MO;
           V_TEMP_ROW.BOOK_PERIOD       := rec.BOOK_PERIOD;
           V_TEMP_ROW.RLS_RUN_CYCLE     := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.TRAN_DATE         := rec.TRAN_DATE;
           V_TEMP_ROW.STORE_NO          := rec.STORE_NO;
           V_TEMP_ROW.TERMNBR           := rec.TERMNBR;
           V_TEMP_ROW.TRANID            := rec.TRANID;
           V_TEMP_ROW.TRANNBR           := rec.TRANNBR;
           V_TEMP_ROW.TERMCTLNBR        := rec.TERMCTLNBR;
           V_TEMP_ROW.TRAN_TOTAL        := rec.TRAN_TOTAL;
           V_TEMP_ROW.ACCTNBR           := rec.ACCTNBR;
           V_TEMP_ROW.JOBNBR            := rec.JOBNBR; 
           V_TEMP_ROW.PONBR             := rec.PONBR; 
           V_TEMP_ROW.BILLCONTACT       := rec.BILLCONTACT;
           V_TEMP_ROW.BILLNM            := rec.BILLNM;
           V_TEMP_ROW.BILLADDR1         := rec.BILLADDR1;
           V_TEMP_ROW.BILLADDR2         := rec.BILLADDR2;
           V_TEMP_ROW.BILLCITY          := rec.BILLCITY;
           V_TEMP_ROW.BILLST            := rec.BILLST;
           V_TEMP_ROW.BILLZIP           := rec.BILLZIP;
           V_TEMP_ROW.BILLCNTRY         := rec.BILLCNTRY;
           V_TEMP_ROW.BILLPHONE         := rec.BILLPHONE;
           V_TEMP_ROW.TERRNBR           := rec.TERRNBR;
           V_TEMP_ROW.CUSTTYPNBR        := rec.CUSTTYPNBR;
           V_TEMP_ROW.ORDERDT           := rec.ORDERDT;
           V_TEMP_ROW.BATCH_GUID        := rec.BATCH_GUID;
           V_TEMP_ROW.TRAN_GUID         := rec.TRAN_GUID;
           V_TEMP_ROW.TRAN_TIMESTAMP    := rec.TRAN_TIMESTAMP;
           V_TEMP_ROW.EMP_NO            := rec.EMP_NO;
           V_TEMP_ROW.CTL_DT            := rec.CTL_DT;
           V_TEMP_ROW.REASON_CODE       := rec.REASON_CODE;
           V_TEMP_ROW.INST_PAYMENT      := rec.INST_PAYMENT;
           V_TEMP_ROW.INST_RETAINAGE    := rec.INST_RETAINAGE;
           V_TEMP_ROW.LOAD_DATE         := TRUNC(SYSDATE);

           INSERT INTO CCN_HEADERS VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_HEADERS',
                                           SQLERRM,
                                           rec.STORE_NO,
                                           NVL(rec.TERMNBR,'')||':'||
                                           NVL(rec.TRANNBR,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_HEADERS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_HEADERS;

PROCEDURE LOAD_CCN_DRAFT_LOGS
/****************************************************************************
This procedure is used to load the CCN_DRAFT_LOGS new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
    SELECT PCDL.*
      FROM PNP.CCN_DRAFT_LOGS PCDL
     WHERE PCDL.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                   FROM PNP.CCN_LOAD_STATUS);
                        
   V_COUNT    NUMBER := 0;
   V_TCOUNT   NUMBER := 0;
   V_TEMP_ROW CCN_DRAFT_LOGS%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE     := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.DRAFT_ACCT_NBR    := rec.DRAFT_ACCT_NBR;
           V_TEMP_ROW.DRAFT_AMT         := rec.DRAFT_AMT;
           V_TEMP_ROW.DRAFT_NBR         := '0'||rec.DRAFT_NBR;
           V_TEMP_ROW.DRAFT_NM          := rec.DRAFT_NM;
           V_TEMP_ROW.DRAFT_PHONE1      := rec.DRAFT_PHONE1;
           V_TEMP_ROW.TRAN_GUID         := rec.TRAN_GUID;
           V_TEMP_ROW.DL_GUID           := rec.DL_GUID;
           V_TEMP_ROW.LOAD_DATE         := TRUNC(SYSDATE);

           INSERT INTO CCN_DRAFT_LOGS VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_DRAFT_LOGS',
                                           SQLERRM,
                                           rec.DRAFT_ACCT_NBR,
                                           rec.DRAFT_NBR);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_DRAFT_LOGS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_DRAFT_LOGS;

PROCEDURE LOAD_CCN_INSTALLER_LINES
/****************************************************************************
This procedure is used to load the LOAD_CCN_INSTLR_LINES new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
          SELECT PCIL.* 
            FROM PNP.CCN_INSTALLER_LINES PCIL,
                 PNP.CCN_DRAFT_LOGS PCDL
           WHERE PCIL.TRAN_GUID = PCDL.TRAN_GUID
             AND PCIL.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                         FROM PNP.CCN_LOAD_STATUS);
                        
   V_COUNT    NUMBER := 0;
   V_TCOUNT   NUMBER := 0;
   V_TEMP_ROW CCN_INSTALLER_LINES%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE        := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.IL_ACCT_NBR          := rec.IL_ACCT_NBR;
           V_TEMP_ROW.IL_DESCR             := rec.IL_DESCR;
           V_TEMP_ROW.IL_PRICE             := rec.IL_PRICE;
           V_TEMP_ROW.IL_EXTENDED_PRICE    := rec.IL_EXTENDED_PRICE;
           V_TEMP_ROW.IL_P_TERM_NBR        := rec.IL_P_TERM_NBR;
           V_TEMP_ROW.IL_TRAN_NBR          := rec.IL_P_TRAN_NBR;
           V_TEMP_ROW.IL_QTY               := rec.IL_QTY;
           V_TEMP_ROW.IL_SEQNBR            := rec.IL_SEQNBR;
           V_TEMP_ROW.TRAN_GUID            := rec.TRAN_GUID;
           V_TEMP_ROW.BATCH_GUID           := rec.BATCH_GUID;
           V_TEMP_ROW.IL_GUID              := rec.IL_GUID;
           V_TEMP_ROW.LOAD_DATE            := TRUNC(SYSDATE);

           INSERT INTO CCN_INSTALLER_LINES VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_INSLR_LINES',
                                           SQLERRM,
                                           rec.IL_ACCT_NBR,
                                           rec.IL_P_TERM_NBR||':'||
                                           rec.IL_P_TRAN_NBR);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_INSLR_LINES',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_INSTALLER_LINES;

PROCEDURE LOAD_CCN_BANK_CARDS
/****************************************************************************
This procedure is used to load the CCN_BANK_CARDS new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
      SELECT PCBC.*
        FROM PNP.CCN_BANK_CARDS PCBC,
             PNP.CCN_HEADERS PCH
       WHERE PCBC.TRAN_GUID = PCH.TRAN_GUID
         AND PCBC.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                     FROM PNP.CCN_LOAD_STATUS);
                        
   V_COUNT    NUMBER := 0;
   V_TCOUNT   NUMBER := 0;
   V_TEMP_ROW CCN_BANK_CARDS%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE     := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.BC_AMT            := rec.BC_AMT;
           V_TEMP_ROW.BC_AUTH_DT        := rec.BC_AUTH_DT;
           V_TEMP_ROW.BC_AUTH_NO        := rec.BC_AUTH_NO;
           V_TEMP_ROW.BC_BIN            := rec.BC_BIN;
           V_TEMP_ROW.TRAN_GUID         := rec.TRAN_GUID;
           V_TEMP_ROW.BC_GUID           := rec.BC_GUID;
           V_TEMP_ROW.LOAD_DATE         := TRUNC(SYSDATE);
           
           INSERT INTO CCN_BANK_CARDS VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_BANK_CARDS',
                                           SQLERRM,
                                           rec.BC_BIN,
                                           rec.BC_AMT);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_BANK_CARDS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_BANK_CARDS;

PROCEDURE LOAD_CCN_MISC_LINES
/****************************************************************************
This procedure is used to load the CCN_MISC_LINES new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
          SELECT PCML.*
            FROM PNP.CCN_MISC_LINES PCML,
                 PNP.CCN_DRAFT_LOGS PCDL
           WHERE PCML.TRAN_GUID = PCDL.TRAN_GUID
             AND PCML.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                         FROM PNP.CCN_LOAD_STATUS);
                        
   V_COUNT    NUMBER := 0;
   V_TCOUNT   NUMBER := 0;
   V_TEMP_ROW CCN_MISC_LINES%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE    := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.SEQNBR           := rec.SEQNBR;
           V_TEMP_ROW.PRIMESUB         := rec.PRIMESUB;
           V_TEMP_ROW.AMT              := rec.AMT;
           V_TEMP_ROW.TRAN_GUID        := rec.TRAN_GUID;
           V_TEMP_ROW.ML_GUID          := rec.ML_GUID;
           V_TEMP_ROW.LOAD_DATE        := TRUNC(SYSDATE) - 1;
                      
           INSERT INTO CCN_MISC_LINES VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_MISC_LINES',
                                           SQLERRM,
                                           rec.PRIMESUB,
                                           rec.SEQNBR);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_MISC_LINES',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_MISC_LINES;

PROCEDURE LOAD_CCN_SALES_LINES
/****************************************************************************
This procedure is used to load the CCN_SALES_LINES new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
      SELECT PCSL.*                         
        FROM PNP.CCN_SALES_LINES PCSL,
             PNP.CCN_HEADERS PCH
       WHERE PCSL.TRAN_GUID = PCH.TRAN_GUID
         AND PCSL.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                     FROM PNP.CCN_LOAD_STATUS); 
                        
   V_COUNT     NUMBER := 0;
   V_TCOUNT    NUMBER := 0;
   V_TEMP_ROW  CCN_SALES_LINES%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE                         := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.ALPHALVL                              := rec.ALPHALVL;
           V_TEMP_ROW.CONTROLNBR                            := rec.CONTROLNBR;
           V_TEMP_ROW.CORR                                  := rec.CORR;
           V_TEMP_ROW.EXTENDED_PRICE                        := rec.EXTENDED_PRICE;
           V_TEMP_ROW.FLOORPR                               := rec.FLOORPR;
           V_TEMP_ROW.LINENBR                               := rec.LINENBR;
           V_TEMP_ROW.NSPR                                  := rec.NSPR;
           V_TEMP_ROW.OVRFLOORPR                            := rec.OVRFLOORPR;
           V_TEMP_ROW.PAYCD                                 := rec.PAYCD;
           V_TEMP_ROW.PR                                    := rec.PR;
           V_TEMP_ROW.PRLOCATION                            := rec.PRLOCATION;
           V_TEMP_ROW.PRODDESCR                             := rec.PRODDESCR;
           V_TEMP_ROW.PRODID1                               := rec.PRODID1;
           V_TEMP_ROW.PRODID2                               := rec.PRODID2;
           V_TEMP_ROW.PRODID3                               := rec.PRODID3;
           V_TEMP_ROW.PRODNBR                               := rec.PRODNBR;
           V_TEMP_ROW.PRODSZ                                := rec.PRODSZ;
           V_TEMP_ROW.PROJSLS                               := rec.PROJSLS;
           V_TEMP_ROW.QTY                                   := rec.QTY;
           V_TEMP_ROW.SALESNBR                              := rec.SALESNBR;
           V_TEMP_ROW.SEQNBR                                := rec.SEQNBR;
           V_TEMP_ROW.SPLIT                                 := rec.SPLIT;
           V_TEMP_ROW.SRCPCTOFF                             := rec.SRCPCTOFF;
           V_TEMP_ROW.SRCPRLTYP                             := rec.SRCPRLTYP;
           V_TEMP_ROW.SRCPRLVL                              := rec.SRCPRLVL;
           V_TEMP_ROW.SRCPROD                               := rec.SRCPROD;
           V_TEMP_ROW.SRCVERSION                            := rec.SRCVERSION;
           V_TEMP_ROW.TAXABLE                               := rec.TAXABLE;
           V_TEMP_ROW.TAXPRODNBR                            := rec.TAXPRODNBR;
           V_TEMP_ROW.TAXSTATUS                             := rec.TAXSTATUS;
           V_TEMP_ROW.TRAN_GUID                             := rec.TRAN_GUID;
           V_TEMP_ROW.GUID                                  := rec.GUID;
           V_TEMP_ROW.NON_MERCHANDISE                       := rec.NON_MERCHANDISE;
           V_TEMP_ROW.RUN_CYCLE                             := rec.RUN_CYCLE;
           V_TEMP_ROW.BOOK_PERIOD                           := rec.BOOK_PERIOD;
           V_TEMP_ROW.LINE_VERSION                          := rec.LINE_VERSION;
           V_TEMP_ROW.LAST_UPDATE_TS                        := rec.LAST_UPDATE_TS;
           V_TEMP_ROW.UPDATED_BY                            := rec.UPDATED_BY;
           V_TEMP_ROW.CHANGE_EVENT_GUID                     := rec.CHANGE_EVENT_GUID;
           V_TEMP_ROW.LISTPR                                := rec.LISTPR;
           V_TEMP_ROW.BOMWORKINGGALLONS                     := rec.BOMWORKINGGALLONS;
           V_TEMP_ROW.BOMWORKINGGALLONSPRICE                := rec.BOMWORKINGGALLONSPRICE;
           V_TEMP_ROW.ID                                    := rec.ID;
           V_TEMP_ROW.MFGID                                 := rec.MFGID;
           V_TEMP_ROW.PRODNOF                               := rec.PRODNOF;
           V_TEMP_ROW.SZDESCR                               := rec.SZDESCR;
           V_TEMP_ROW.STAGED_TS                             := rec.STAGED_TS;
           V_TEMP_ROW.SGR_GALLON_FACTOR                     := rec.SGR_GALLON_FACTOR;
           V_TEMP_ROW.SGR_EFFECTIVE_DATE                    := rec.SGR_EFFECTIVE_DATE;
           V_TEMP_ROW.GALLONS                               := rec.GALLONS;
           V_TEMP_ROW.CLASS_NUMBER                          := rec.CLASS_NUMBER;
           V_TEMP_ROW.PRODUCT_DEPARTMENT_CODE               := rec.PRODUCT_DEPARTMENT_CODE;
           V_TEMP_ROW.PRODUCT_DEPARTMENT_DESC               := rec.PRODUCT_DEPARTMENT_DESC;
           V_TEMP_ROW.PRODUCT_SUB_DEPARTMENT_CODE           := rec.PRODUCT_SUB_DEPARTMENT_CODE;
           V_TEMP_ROW.PRODUCT_SUB_DEPARTMENT_DESC           := rec.PRODUCT_SUB_DEPARTMENT_DESC;
           V_TEMP_ROW.PRODUCT_CATEGORY_CODE                 := rec.PRODUCT_CATEGORY_CODE;
           V_TEMP_ROW.PRODUCT_CATEGORY_DESC                 := rec.PRODUCT_CATEGORY_DESC;
           V_TEMP_ROW.NON_MERCH_CODE                        := rec.NON_MERCH_CODE;
           V_TEMP_ROW.NON_MERCH_DESCR                       := rec.NON_MERCH_DESCR;
           V_TEMP_ROW.MPF_PRODNBR                           := rec.MPF_PRODNBR;
           V_TEMP_ROW.PRIME                                 := rec.PRIME;
           V_TEMP_ROW.SUB                                   := rec.SUB;
           V_TEMP_ROW.MPF_SIZE_CODE                         := rec.MPF_SIZE_CODE;
           V_TEMP_ROW.MPF_SIZE_SHORT_DESC                   := rec.MPF_SIZE_SHORT_DESC;
           V_TEMP_ROW.PURCHASE_CODE                         := rec.PURCHASE_CODE;
           V_TEMP_ROW.PRODUCT_CORE_ID                       := rec.PRODUCT_CORE_ID;
           V_TEMP_ROW.ECOMMERCE_ID                          := rec.ECOMMERCE_ID;
           V_TEMP_ROW.LOAD_DATE                             := TRUNC(SYSDATE);

           INSERT INTO CCN_SALES_LINES VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_SALES_LINES',
                                           SQLERRM,
                                           rec.RLS_RUN_CYCLE,
                                           rec.SALESNBR);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_SALES_LINES',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_SALES_LINES;

PROCEDURE LOAD_CCN_LOAD_ERRS
/****************************************************************************
This procedure is used to load the CCN_LOAD_ERRS new interface table 
from PNP schema to store drafts schema
created : 05/10/2016 axk326 CCN Project....
changed :
*****************************************************************************/
AS

CURSOR SD_CUR IS
    SELECT PCLE.*
      FROM PNP.CCN_LOAD_ERRS PCLE
     WHERE PCLE.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE)
                                   FROM PNP.CCN_LOAD_STATUS);
                        
   V_COUNT    NUMBER := 0;
   V_TCOUNT   NUMBER := 0;
   V_TEMP_ROW CCN_LOAD_ERRS%ROWTYPE;
   
BEGIN
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.RLS_RUN_CYCLE  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RLS_RUN_CYCLE);
           V_TEMP_ROW.ERROR_CODE     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ERROR_CODE);
           V_TEMP_ROW.ERROR_MSG      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ERROR_MSG);
           V_TEMP_ROW.ERR_TS         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ERR_TS);
           V_TEMP_ROW.LOAD_DATE      := TRUNC(SYSDATE);
                      
           INSERT INTO CCN_LOAD_ERRS VALUES V_TEMP_ROW;
           
           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_CCN_LOAD_ERRS',
                                           SQLERRM,
                                           rec.ERROR_CODE,
                                           rec.ERROR_MSG);
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT); 

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_CCN_LOAD_ERRS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_CCN_LOAD_ERRS;

PROCEDURE POSXML_PNP_TO_STRDRFT_LOAD
/************************************************************************
POSXML_PNP_TO_STRDRFT_LOAD

This Procedure is a wrapper for the Load of the new interface tables
 * Loads all the new interface tables from PNP schema to Store drafts schema

created : 05/10/2016 axk326 CCN Project....
changed :
************************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_LOAD_STATUS Table ';
      LOAD_CCN_LOAD_STATUS();
      DBMS_OUTPUT.PUT_LINE('CCN_LOAD_STATUS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_HEADERS Table ';
      LOAD_CCN_HEADERS();
      DBMS_OUTPUT.PUT_LINE('CCN_HEADERS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_DRAFT_LOGS Table ';
      LOAD_CCN_DRAFT_LOGS();
      DBMS_OUTPUT.PUT_LINE('CCN_DRAFT_LOGS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
         
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_INSTALLER_LINES Table ';
      LOAD_CCN_INSTALLER_LINES();
      DBMS_OUTPUT.PUT_LINE('CCN_INSTALLER_LINES loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
         
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_BANK_CARDS Table ';
      LOAD_CCN_BANK_CARDS();
      DBMS_OUTPUT.PUT_LINE('CCN_BANK_CARDS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');	 
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_MISC_LINES Table ';
      LOAD_CCN_MISC_LINES();
      DBMS_OUTPUT.PUT_LINE('CCN_MISC_LINES loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');	 
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_SALES_LINES Table ';
      LOAD_CCN_SALES_LINES();
      DBMS_OUTPUT.PUT_LINE('CCN_SALES_LINES loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');      
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CCN_LOAD_ERRS Table ';
      LOAD_CCN_LOAD_ERRS();
      DBMS_OUTPUT.PUT_LINE('CCN_LOAD_ERRS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');  
      
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POSXML_PNP_TO_STRDRFT_LOAD',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END POSXML_PNP_TO_STRDRFT_LOAD;

PROCEDURE PNP_TO_SD_LOAD_SP
/*******************************************************************************
PNP_TO_SD_LOAD_SP

This Procedure is a wrapper for the Daily Load for all the new interface tables 
from PNP schema to store drafts schema

created : 05/10/2016 axk326 CCN Project....
changed :
*******************************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER; 
    V_START_TIME_SD DATE := SYSDATE;
    V_CLOB       CLOB;

    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('PNP_TO_SD_LOAD_SP', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
-- STEP 1 
-- Call to perform DailyLoad for new interface tables to be loaded with data from new interface tables of PNP schema.
      POSXML_PNP_TO_STRDRFT_LOAD();
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('PNP_TO_SD_LOAD_SP', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'PNP_TO_SD_LOAD_SP',
                                     SQLERRM,
                                    '000000',
                                    '0000000000'); 
END PNP_TO_SD_LOAD_SP;

END POSXML_PNP_TO_STRDRT_LOAD_PKG;