create or replace 
PACKAGE body          GAINLOSS_JV_PKG
/****************************************************************************** 
This package will hold all pl/sql objects that are needed to 
create and build the Monthly GAINLOSS_JV

created : 11/24/2014 NXK927
revisions: 
******************************************************************************/
AS

PROCEDURE CREATE_GAINLOSS_JV(
/*****************************************************************************
This procedure will create JV entries for GAIN AND LOSS

created : 11/24/2014 NXK927 
revision: 12/09/2014 jxc517 CCN Project.....
          Modified the cursor to pick correct data, added input parameter which should be
          first of the month on which we are running the report
          Example for november JV run it should be 01-DEC-2014
*****************************************************************************/
IN_DATE    IN DATE)
IS

CURSOR jv_cursor  IS 
    SELECT COST_CENTER_CODE,
           (SELECT SUM(NVL(DRAFT_AMOUNT,0)) - SUM(NVL(LABOR_AMOUNT,0))
              FROM STORE_DRAFT_REPORT
             WHERE COST_CENTER_CODE = SDR.COST_CENTER_CODE
               AND TRANSACTION_DATE >= ADD_MONTHS(IN_DATE,-2)
               AND PL_DATE IS NOT NULL) PL_GAIN_LOSS,
            TO_CHAR(ADD_MONTHS(IN_DATE,-1), 'YYYY/MM') BOOK_DATE
      FROM STORE_DRAFT_REPORT SDR
     WHERE TRANSACTION_DATE >= ADD_MONTHS(IN_DATE,-2)
     GROUP BY COST_CENTER_CODE, TO_CHAR(ADD_MONTHS(IN_DATE,-1), 'YYYY/MM');

    V_COUNT           NUMBER := 0;
    V_BATCH_NUMBER    BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS    BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('GAINLOSS_JOB', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    EXECUTE IMMEDIATE 'TRUNCATE TABLE GAINLOSS_JV';
    FOR rec IN jv_cursor LOOP
        BEGIN
            --No need to send the cost center into JV if the gain loss amount is 0 or null
            IF NVL(rec.PL_GAIN_LOSS, 0) <> 0 THEN
                INSERT INTO GAINLOSS_JV VALUES rec;
            END IF;
            V_COUNT := V_COUNT + 1;
            IF V_COUNT > 500 THEN
                COMMIT;
                V_COUNT := 0;
            END IF; 
        EXCEPTION
            WHEN OTHERS THEN
                V_TRANS_STATUS := 'ERROR';
        END;
    END LOOP; --end cost_center_rec
    COMMIT;
    LOAD_SD_GAIN_LOSS_JV_HST(IN_DATE);
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('GAINLOSS_JOB', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
        CCN_BATCH_PKG.UPDATE_BATCH_JOB('GAINLOSS_JOB', V_BATCH_NUMBER, V_TRANS_STATUS);
        CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
END CREATE_GAINLOSS_JV;

PROCEDURE LOAD_SD_GAIN_LOSS_JV_HST(
/*****************************************************************************
    LOAD_SD_GAIN_LOSS_JV_HST

This procedure will load the history JV gain loss entries for Benefits file for that run

created : 12/31/2014 sxt410 CCN Project Team
revision: 

*****************************************************************************/
IN_DATE IN DATE)
IS
    CURSOR SD_JV_CUR IS
        SELECT *
          FROM GAINLOSS_JV;      

    V_COMMIT      NUMBER:=0; 
    CALL_IND      NUMBER;
    V_JV_HST_ROW  GAINLOSS_JV_HST%ROWTYPE;
BEGIN
    BEGIN
        SELECT NVL(MAX(RUN_IND),0)+1
          INTO CALL_IND
          FROM GAINLOSS_JV_HST
         WHERE BOOK_DATE = TO_CHAR(ADD_MONTHS(IN_DATE,-1), 'YYYY/MM');
    EXCEPTION
        WHEN OTHERS THEN 
            RAISE;
    END;
    FOR rec IN SD_JV_CUR LOOP
        BEGIN
            V_JV_HST_ROW.COST_CENTER_CODE := rec.COST_CENTER_CODE;
            V_JV_HST_ROW.NET_AMOUNT       := rec.NET_AMOUNT;
            V_JV_HST_ROW.BOOK_DATE        := rec.BOOK_DATE;         
            V_JV_HST_ROW.RUN_IND          := CALL_IND;         

            INSERT INTO GAINLOSS_JV_HST VALUES V_JV_HST_ROW;

            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_SD_GAIN_LOSS_JV_HST',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           rec.BOOK_DATE);
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                   'LOAD_SD_GAIN_LOSS_JV_HST',
                                   SQLERRM,
                                   '000000',
                                   '0000000000');
END LOAD_SD_GAIN_LOSS_JV_HST;

END GAINLOSS_JV_PKG;