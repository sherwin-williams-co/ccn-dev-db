create or replace PACKAGE BODY          SD_TABLE_IU_PKG 
AS
/**********************************************************
	SD_TABLE_IU_PKG

	This Package is intended to process the DMLs and DRLs on all the
  tables related to stare draft

created : 04/30/2013 jxc517 CCN Project....
changed :
**********************************************************/
---------------------------ROWTYPE PROCEDURES---------------------------
PROCEDURE CUSTOMER_SALES_TAX_ROWTYPE_SP (
/*******************************************************************************
	CUSTOMER_SALES_TAX_ROWTYPE_SP

	This procedure is intended to build the CUSTOMER_SALES_TAX record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT CUSTOMER_SALES_TAX%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         CUSTOMER_SALES_TAX%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'CUSTOMER_SALES_TAX_ID' THEN
                    V_TEMP_ROW.CUSTOMER_SALES_TAX_ID                 :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'SALES_TAX_CORR_IND' THEN
                    V_TEMP_ROW.SALES_TAX_CORR_IND                    :=  V_ROW_VALUE;
                WHEN 'SALES_TAX_COLL_AMT' THEN
                    V_TEMP_ROW.SALES_TAX_COLL_AMT                    :=  V_ROW_VALUE;
                WHEN 'SALES_TAX_IND' THEN
                    V_TEMP_ROW.SALES_TAX_IND                         :=  V_ROW_VALUE;
                WHEN 'SALES_TAX_RATE' THEN
                    V_TEMP_ROW.SALES_TAX_RATE                        :=  V_ROW_VALUE;
                WHEN 'SALES_TAX_CODE' THEN
                    V_TEMP_ROW.SALES_TAX_CODE                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_SALES_TAX_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_SALES_TAX_ROWTYPE_SP;

PROCEDURE CUSTOMER_DETAILS_ROWTYPE_SP (
/*******************************************************************************
	CUSTOMER_DETAILS_ROWTYPE_SP

	This procedure is intended to build the CUSTOMER_DETAILS record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT CUSTOMER_DETAILS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         CUSTOMER_DETAILS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'CUSTOMER_DETAIL_ID' THEN
                    V_TEMP_ROW.CUSTOMER_DETAIL_ID                    :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'SEGMENT_CODE' THEN
                    V_TEMP_ROW.SEGMENT_CODE                          :=  V_ROW_VALUE;
                WHEN 'SALES_NUMBER' THEN
                    V_TEMP_ROW.SALES_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'ITEM_QUANTITY' THEN
                    V_TEMP_ROW.ITEM_QUANTITY                         :=  V_ROW_VALUE;
                WHEN 'ITEM_PRICE' THEN
                    V_TEMP_ROW.ITEM_PRICE                            :=  V_ROW_VALUE;
                WHEN 'ITEM_EXT_AMOUNT' THEN
                    V_TEMP_ROW.ITEM_EXT_AMOUNT                       :=  V_ROW_VALUE;
                WHEN 'ITEM_DISCOUNT_AMOUNT' THEN
                    V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT                  :=  V_ROW_VALUE;
                WHEN 'ITEM_SALES_TAX_IND' THEN
                    V_TEMP_ROW.ITEM_SALES_TAX_IND                    :=  V_ROW_VALUE;
                WHEN 'ITEM_DISCOUNT_CODE' THEN
                    V_TEMP_ROW.ITEM_DISCOUNT_CODE                    :=  V_ROW_VALUE;
                WHEN 'ITEM_DISCOUNT_TYPE' THEN
                    V_TEMP_ROW.ITEM_DISCOUNT_TYPE                    :=  V_ROW_VALUE;
                WHEN 'SALES_PROMO_CODE' THEN
                    V_TEMP_ROW.SALES_PROMO_CODE                      :=  V_ROW_VALUE;
                WHEN 'GL_PRIME_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'GL_SUB_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER                 :=  V_ROW_VALUE;
                WHEN 'SCHEDULE_TYPE' THEN
                    V_TEMP_ROW.SCHEDULE_TYPE                         :=  V_ROW_VALUE;
                WHEN 'SCHEDULE_VERSION' THEN
                    V_TEMP_ROW.SCHEDULE_VERSION                      :=  V_ROW_VALUE;
                WHEN 'PRICE_LEVEL_CODE' THEN
                    V_TEMP_ROW.PRICE_LEVEL_CODE                      :=  V_ROW_VALUE;
                WHEN 'PERCENT_OFF_LEVEL' THEN
                    V_TEMP_ROW.PERCENT_OFF_LEVEL                     :=  V_ROW_VALUE;
                WHEN 'PROD_DESC_SRCE' THEN
                    V_TEMP_ROW.PROD_DESC_SRCE                        :=  V_ROW_VALUE;
                WHEN 'ORGNL_POS_TERM_NUMBER' THEN
                    V_TEMP_ROW.ORGNL_POS_TERM_NUMBER                 :=  V_ROW_VALUE;
                WHEN 'ORGNL_POS_TRANS_NUMBER' THEN
                    V_TEMP_ROW.ORGNL_POS_TRANS_NUMBER                :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_DETAILS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_DETAILS_ROWTYPE_SP;

PROCEDURE CUSTOMER_ROWTYPE_SP (
/*******************************************************************************
	CUSTOMER_ROWTYPE_SP

	This procedure is intended to build the CUSTOMER record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT CUSTOMER%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         CUSTOMER%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_JOB_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_JOB_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_CODE' THEN
                    V_TEMP_ROW.POS_TRANSACTION_CODE                  :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_BATCH_NUMBER' THEN
                    V_TEMP_ROW.POS_TRANSACTION_BATCH_NUMBER          :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_TIME' THEN
                    V_TEMP_ROW.POS_TRANSACTION_TIME                  :=  V_ROW_VALUE;
                WHEN 'CYCLE_RUN_NUMBER' THEN
                    V_TEMP_ROW.CYCLE_RUN_NUMBER                      :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'BUSSINESS_TYPE_CODE' THEN
                    V_TEMP_ROW.BUSSINESS_TYPE_CODE                   :=  V_ROW_VALUE;
                WHEN 'SALES_TERRITORY_NUMBER' THEN
                    V_TEMP_ROW.SALES_TERRITORY_NUMBER                :=  V_ROW_VALUE;
                WHEN 'SALES_TERRITORY_NUMBER_COR' THEN
                    V_TEMP_ROW.SALES_TERRITORY_NUMBER_COR            :=  V_ROW_VALUE;
                WHEN 'ORGNL_POS_TRANSACTION_DATE' THEN
                    V_TEMP_ROW.ORGNL_POS_TRANSACTION_DATE            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'ORGNL_POS_TERM_NUMBER' THEN
                    V_TEMP_ROW.ORGNL_POS_TERM_NUMBER                 :=  V_ROW_VALUE;
                WHEN 'ORGNL_POS_TRANSACTION_NBR' THEN
                    V_TEMP_ROW.ORGNL_POS_TRANSACTION_NBR             :=  V_ROW_VALUE;
                WHEN 'PURCHASE_ORDER_NUMBER' THEN
                    V_TEMP_ROW.PURCHASE_ORDER_NUMBER                 :=  V_ROW_VALUE;
                WHEN 'BOOK_DATE_SEQUENCE' THEN
                    V_TEMP_ROW.BOOK_DATE_SEQUENCE                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_ROWTYPE_SP;

PROCEDURE STORE_DRAFTS_DETAIL_ROWTYPE_SP (
/*******************************************************************************
	STORE_DRAFTS_DETAIL_ROWTYPE_SP

	This procedure is intended to build the STORE_DRAFTS_DETAIL record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT STORE_DRAFTS_DETAIL%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         STORE_DRAFTS_DETAIL%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
  
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'STORE_DRAFTS_DETAIL_ID' THEN
                    V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID                :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'CHECK_SERIAL_NUMBER' THEN
                    V_TEMP_ROW.CHECK_SERIAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_JOB_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_JOB_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'GL_PRIME_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'GL_SUB_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER                 :=  V_ROW_VALUE;
                WHEN 'ITEM_QUANTITY' THEN
                    V_TEMP_ROW.ITEM_QUANTITY                         :=  V_ROW_VALUE;
                WHEN 'ITEM_PRICE' THEN
                    V_TEMP_ROW.ITEM_PRICE                            :=  V_ROW_VALUE;
                WHEN 'ITEM_EXT_AMOUNT' THEN
                    V_TEMP_ROW.ITEM_EXT_AMOUNT                       :=  V_ROW_VALUE;
                WHEN 'BOOK_DATE_SEQUENCE' THEN
                    V_TEMP_ROW.BOOK_DATE_SEQUENCE                    :=  V_ROW_VALUE;
                WHEN 'LBR_TRANSACTION_DATE' THEN
                    V_TEMP_ROW.LBR_TRANSACTION_DATE                  :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LBR_TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.LBR_TERMINAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'LBR_TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.LBR_TRANSACTION_NUMBER                :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
            
        END IF;
         
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
   
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_DETAIL_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_DETAIL_ROWTYPE_SP;

PROCEDURE STORE_DRAFTS_ROWTYPE_SP (
/*******************************************************************************
	STORE_DRAFTS_ROWTYPE_SP

	This procedure is intended to build the STORE_DRAFTS record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT STORE_DRAFTS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         STORE_DRAFTS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'CHECK_SERIAL_NUMBER' THEN
                    V_TEMP_ROW.CHECK_SERIAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'DRAFT_NUMBER' THEN
                   V_TEMP_ROW.DRAFT_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_JOB_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_JOB_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_CODE' THEN
                    V_TEMP_ROW.POS_TRANSACTION_CODE                  :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_TIME' THEN
                    V_TEMP_ROW.POS_TRANSACTION_TIME                  :=  V_ROW_VALUE;
                WHEN 'BANK_NUMBER' THEN
                    V_TEMP_ROW.BANK_NUMBER                           :=  V_ROW_VALUE;
                WHEN 'BANK_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'BANK_REFERENCE' THEN
                    V_TEMP_ROW.BANK_REFERENCE                        :=  V_ROW_VALUE;
                WHEN 'PAYEE_NAME' THEN
                    V_TEMP_ROW.PAYEE_NAME                            :=  V_ROW_VALUE;
                WHEN 'ADDRESS_LINE_1' THEN
                    V_TEMP_ROW.ADDRESS_LINE_1                        :=  V_ROW_VALUE;
                WHEN 'ADDRESS_LINE_2' THEN
                    V_TEMP_ROW.ADDRESS_LINE_2                        :=  V_ROW_VALUE;
                WHEN 'CITY' THEN
                    V_TEMP_ROW.CITY                                  :=  V_ROW_VALUE;
                WHEN 'STATE_CODE' THEN
                    V_TEMP_ROW.STATE_CODE                            :=  V_ROW_VALUE;
                WHEN 'ZIP_CODE_PREFIX' THEN
                    V_TEMP_ROW.ZIP_CODE_PREFIX                       :=  V_ROW_VALUE;
                WHEN 'ZIP_CODE_SUFFIX' THEN
                    V_TEMP_ROW.ZIP_CODE_SUFFIX                       :=  V_ROW_VALUE;
                WHEN 'PHONE_AREA_CODE' THEN
                    V_TEMP_ROW.PHONE_AREA_CODE                       :=  V_ROW_VALUE;
                WHEN 'PHONE_NUMBER' THEN
                    V_TEMP_ROW.PHONE_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'ISSUE_DATE' THEN
                    V_TEMP_ROW.ISSUE_DATE                            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'PAID_DATE' THEN
                    V_TEMP_ROW.PAID_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'STOP_PAY_DATE' THEN
                    V_TEMP_ROW.STOP_PAY_DATE                         :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'STOP_PAY_REMOVE_DATE' THEN
                    V_TEMP_ROW.STOP_PAY_REMOVE_DATE                  :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'VOID_DATE' THEN
                    V_TEMP_ROW.VOID_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'AMOUNT_CHANGE_DATE' THEN
                    V_TEMP_ROW.AMOUNT_CHANGE_DATE                    :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'GROSS_AMOUNT' THEN
                    V_TEMP_ROW.GROSS_AMOUNT                          :=  V_ROW_VALUE;
                WHEN 'RETAIN_AMOUNT' THEN
                    V_TEMP_ROW.RETAIN_AMOUNT                         :=  V_ROW_VALUE;
                WHEN 'NET_AMOUNT' THEN
                    V_TEMP_ROW.NET_AMOUNT                            :=  V_ROW_VALUE;
                WHEN 'ORIGINAL_NET_AMOUNT' THEN
                    V_TEMP_ROW.ORIGINAL_NET_AMOUNT                   :=  V_ROW_VALUE;
                WHEN 'BANK_PAID_AMOUNT' THEN
                    V_TEMP_ROW.BANK_PAID_AMOUNT                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_SOURCE' THEN
                    V_TEMP_ROW.TRANSACTION_SOURCE                    :=  V_ROW_VALUE;
                WHEN 'CHANGE_DATE' THEN
                    V_TEMP_ROW.CHANGE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'CHANGE_SOURCE' THEN
                    V_TEMP_ROW.CHANGE_SOURCE                         :=  V_ROW_VALUE;
                WHEN 'SLS_BOOK_DATE' THEN
                    V_TEMP_ROW.SLS_BOOK_DATE                         :=  V_ROW_VALUE;
                WHEN 'CYCLE_RUN_NUMBER' THEN
                    V_TEMP_ROW.CYCLE_RUN_NUMBER                      :=  V_ROW_VALUE;
                WHEN 'BOOK_DATE_SEQUENCE' THEN
                    V_TEMP_ROW.BOOK_DATE_SEQUENCE                    :=  V_ROW_VALUE;
                WHEN 'REASON_CODE' THEN
                    V_TEMP_ROW.REASON_CODE                           :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
     END LOOP;
    --set the flag values for STORE_DRAFTS table
    SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);
   
    OUT_ROW_TYPE  := V_TEMP_ROW;
   
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_ROWTYPE_SP;

PROCEDURE UNATHED_MNL_D_DTL_ROWTYPE_SP (
/*******************************************************************************
	UNATHED_MNL_D_DTL_ROWTYPE_SP

	This procedure is intended to build the UNATTACHED_MNL_DRFT_DTL record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 12/08/2014 axk326 CCN Project....
          Added statement to consider Original net amount to be net amount
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT UNATTACHED_MNL_DRFT_DTL%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         UNATTACHED_MNL_DRFT_DTL%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'CHECK_SERIAL_NUMBER' THEN
                    V_TEMP_ROW.CHECK_SERIAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'DRAFT_NUMBER' THEN
                    V_TEMP_ROW.DRAFT_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_JOB_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_JOB_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_CODE' THEN
                    V_TEMP_ROW.POS_TRANSACTION_CODE                  :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_TIME' THEN
                    V_TEMP_ROW.POS_TRANSACTION_TIME                  :=  V_ROW_VALUE;
                WHEN 'BANK_NUMBER' THEN
                    V_TEMP_ROW.BANK_NUMBER                           :=  V_ROW_VALUE;
                WHEN 'BANK_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'BANK_REFERENCE' THEN
                    V_TEMP_ROW.BANK_REFERENCE                        :=  V_ROW_VALUE;
                WHEN 'PAYEE_NAME' THEN
                    V_TEMP_ROW.PAYEE_NAME                            :=  V_ROW_VALUE;
                WHEN 'ADDRESS_LINE_1' THEN
                    V_TEMP_ROW.ADDRESS_LINE_1                        :=  V_ROW_VALUE;
                WHEN 'ADDRESS_LINE_2' THEN
                    V_TEMP_ROW.ADDRESS_LINE_2                        :=  V_ROW_VALUE;
                WHEN 'CITY' THEN
                    V_TEMP_ROW.CITY                                  :=  V_ROW_VALUE;
                WHEN 'STATE_CODE' THEN
                    V_TEMP_ROW.STATE_CODE                            :=  V_ROW_VALUE;
                WHEN 'ZIP_CODE_PREFIX' THEN
                    V_TEMP_ROW.ZIP_CODE_PREFIX                       :=  V_ROW_VALUE;
                WHEN 'ZIP_CODE_SUFFIX' THEN
                    V_TEMP_ROW.ZIP_CODE_SUFFIX                       :=  V_ROW_VALUE;
                WHEN 'PHONE_AREA_CODE' THEN
                    V_TEMP_ROW.PHONE_AREA_CODE                       :=  V_ROW_VALUE;
                WHEN 'PHONE_NUMBER' THEN
                    V_TEMP_ROW.PHONE_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'ISSUE_DATE' THEN
                    V_TEMP_ROW.ISSUE_DATE                            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'PAID_DATE' THEN
                    V_TEMP_ROW.PAID_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'STOP_PAY_DATE' THEN
                    V_TEMP_ROW.STOP_PAY_DATE                         :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'STOP_PAY_REMOVE_DATE' THEN
                    V_TEMP_ROW.STOP_PAY_REMOVE_DATE                  :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'VOID_DATE' THEN
                    V_TEMP_ROW.VOID_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'AMOUNT_CHANGE_DATE' THEN
                    V_TEMP_ROW.AMOUNT_CHANGE_DATE                    :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'GROSS_AMOUNT' THEN
                    V_TEMP_ROW.GROSS_AMOUNT                          :=  V_ROW_VALUE;
                WHEN 'RETAIN_AMOUNT' THEN
                    V_TEMP_ROW.RETAIN_AMOUNT                         :=  V_ROW_VALUE;
                WHEN 'NET_AMOUNT' THEN
                    V_TEMP_ROW.NET_AMOUNT                            :=  V_ROW_VALUE;
                WHEN 'ORIGINAL_NET_AMOUNT' THEN
                    V_TEMP_ROW.ORIGINAL_NET_AMOUNT                   :=  V_ROW_VALUE;
                WHEN 'BANK_PAID_AMOUNT' THEN
                    V_TEMP_ROW.BANK_PAID_AMOUNT                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_SOURCE' THEN
                    V_TEMP_ROW.TRANSACTION_SOURCE                    :=  V_ROW_VALUE;
                WHEN 'CHANGE_DATE' THEN
                    V_TEMP_ROW.CHANGE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'CHANGE_SOURCE' THEN
                    V_TEMP_ROW.CHANGE_SOURCE                         :=  V_ROW_VALUE;
                WHEN 'SLS_BOOK_DATE' THEN
                    V_TEMP_ROW.SLS_BOOK_DATE                         :=  V_ROW_VALUE;
                WHEN 'CYCLE_RUN_NUMBER' THEN
                    V_TEMP_ROW.CYCLE_RUN_NUMBER                      :=  V_ROW_VALUE;
                WHEN 'BOOK_DATE_SEQUENCE' THEN
                    V_TEMP_ROW.BOOK_DATE_SEQUENCE                    :=  V_ROW_VALUE;
                WHEN 'REASON_CODE' THEN
                    V_TEMP_ROW.REASON_CODE                           :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;

    V_TEMP_ROW.CHECK_SERIAL_NUMBER := SD_BUSINESS_RULES_PKG.GET_CHECK_SERIAL_NUMBER(V_TEMP_ROW.COST_CENTER_CODE,
                                                                                    V_TEMP_ROW.CHECK_SERIAL_NUMBER);
    V_TEMP_ROW.DRAFT_NUMBER        := SUBSTR(V_TEMP_ROW.CHECK_SERIAL_NUMBER,6,4);
    

    --set the flag values for STORE_DRAFTS table
    SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);
    OUT_ROW_TYPE  := V_TEMP_ROW;
    
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'UNATHED_MNL_D_DTL_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END UNATHED_MNL_D_DTL_ROWTYPE_SP;

PROCEDURE CUSTOMER_FOP_ROWTYPE_SP (
/*******************************************************************************
	CUSTOMER_FOP_ROWTYPE_SP

	This procedure is intended to build the CUSTOMER_FORM_OF_PAY record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT CUSTOMER_FORM_OF_PAY%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         CUSTOMER_FORM_OF_PAY%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'CUSTOMER_FORM_OF_PAY_ID' THEN
                    V_TEMP_ROW.CUSTOMER_FORM_OF_PAY_ID               :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'SEGMENT_CODE' THEN
                    V_TEMP_ROW.SEGMENT_CODE                          :=  V_ROW_VALUE;
                WHEN 'SUB_SEGMENT_CODE' THEN
                    V_TEMP_ROW.SUB_SEGMENT_CODE                      :=  V_ROW_VALUE;
                WHEN 'PAY_DISC_CODE' THEN
                    V_TEMP_ROW.PAY_DISC_CODE                         :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_TOTAL_AMT' THEN
                    V_TEMP_ROW.TRANSACTION_TOTAL_AMT                 :=  V_ROW_VALUE;
                WHEN 'POS_LINE_COUNT' THEN
                    V_TEMP_ROW.POS_LINE_COUNT                        :=  V_ROW_VALUE;
                WHEN 'PAY_AMOUNT' THEN
                    V_TEMP_ROW.PAY_AMOUNT                            :=  V_ROW_VALUE;
                WHEN 'PAY_DISCOUNT' THEN
                    V_TEMP_ROW.PAY_DISCOUNT                          :=  V_ROW_VALUE;
                WHEN 'SALES_DISCOUNT_AMT' THEN
                    V_TEMP_ROW.SALES_DISCOUNT_AMT                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_FOP_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_FOP_ROWTYPE_SP;

PROCEDURE CUSTOMER_BANK_CARD_ROWTYPE_SP (
/*******************************************************************************
	CUSTOMER_BANK_CARD_ROWTYPE_SP

	This procedure is intended to build the CUSTOMER_BANK_CARD record type

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT CUSTOMER_BANK_CARD%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         CUSTOMER_BANK_CARD%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'CUSTOMER_BANK_CARD_ID' THEN
                    V_TEMP_ROW.CUSTOMER_BANK_CARD_ID                 :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'SEGMENT_CODE' THEN
                    V_TEMP_ROW.SEGMENT_CODE                          :=  V_ROW_VALUE;
                WHEN 'SUB_SEGMENT_CODE' THEN
                    V_TEMP_ROW.SUB_SEGMENT_CODE                      :=  V_ROW_VALUE;
                WHEN 'BANK_CARD_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_CARD_ACCOUNT_NUMBER              :=  V_ROW_VALUE;
                WHEN 'BANK_AUTH' THEN
                    V_TEMP_ROW.BANK_AUTH                             :=  V_ROW_VALUE;
                WHEN 'BANK_AMOUNT' THEN
                    V_TEMP_ROW.BANK_AMOUNT                           :=  V_ROW_VALUE;
                WHEN 'BANK_TYPE' THEN
                    V_TEMP_ROW.BANK_TYPE                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_BANK_CARD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_BANK_CARD_ROWTYPE_SP;

PROCEDURE HST_STORE_DRAFTS_ROWTYPE_SP (
/*******************************************************************************
	HST_STORE_DRAFTS_ROWTYPE_SP

	This procedure is intended to build the HST_STORE_DRAFTS record type

Created : 09/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT HST_STORE_DRAFTS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         HST_STORE_DRAFTS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'CHECK_SERIAL_NUMBER' THEN
                    V_TEMP_ROW.CHECK_SERIAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_JOB_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_JOB_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_CODE' THEN
                    V_TEMP_ROW.POS_TRANSACTION_CODE                  :=  V_ROW_VALUE;
                WHEN 'POS_TRANSACTION_TIME' THEN
                    V_TEMP_ROW.POS_TRANSACTION_TIME                  :=  V_ROW_VALUE;
                WHEN 'BANK_NUMBER' THEN
                    V_TEMP_ROW.BANK_NUMBER                           :=  V_ROW_VALUE;
                WHEN 'BANK_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'BANK_REFERENCE' THEN
                    V_TEMP_ROW.BANK_REFERENCE                        :=  V_ROW_VALUE;
                WHEN 'PAYEE_NAME' THEN
                    V_TEMP_ROW.PAYEE_NAME                            :=  V_ROW_VALUE;
                WHEN 'ADDRESS_LINE_1' THEN
                    V_TEMP_ROW.ADDRESS_LINE_1                        :=  V_ROW_VALUE;
                WHEN 'ADDRESS_LINE_2' THEN
                    V_TEMP_ROW.ADDRESS_LINE_2                        :=  V_ROW_VALUE;
                WHEN 'CITY' THEN
                    V_TEMP_ROW.CITY                                  :=  V_ROW_VALUE;
                WHEN 'STATE_CODE' THEN
                    V_TEMP_ROW.STATE_CODE                            :=  V_ROW_VALUE;
                WHEN 'ZIP_CODE_PREFIX' THEN
                    V_TEMP_ROW.ZIP_CODE_PREFIX                       :=  V_ROW_VALUE;
                WHEN 'ZIP_CODE_SUFFIX' THEN
                    V_TEMP_ROW.ZIP_CODE_SUFFIX                       :=  V_ROW_VALUE;
                WHEN 'PHONE_AREA_CODE' THEN
                    V_TEMP_ROW.PHONE_AREA_CODE                       :=  V_ROW_VALUE;
                WHEN 'PHONE_NUMBER' THEN
                    V_TEMP_ROW.PHONE_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'ISSUE_DATE' THEN
                    V_TEMP_ROW.ISSUE_DATE                            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'PAID_DATE' THEN
                    V_TEMP_ROW.PAID_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'STOP_PAY_DATE' THEN
                    V_TEMP_ROW.STOP_PAY_DATE                         :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'STOP_PAY_REMOVE_DATE' THEN
                    V_TEMP_ROW.STOP_PAY_REMOVE_DATE                  :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'VOID_DATE' THEN
                    V_TEMP_ROW.VOID_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'AMOUNT_CHANGE_DATE' THEN
                    V_TEMP_ROW.AMOUNT_CHANGE_DATE                    :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'GROSS_AMOUNT' THEN
                    V_TEMP_ROW.GROSS_AMOUNT                          :=  V_ROW_VALUE;
                WHEN 'RETAIN_AMOUNT' THEN
                    V_TEMP_ROW.RETAIN_AMOUNT                         :=  V_ROW_VALUE;
                WHEN 'NET_AMOUNT' THEN
                    V_TEMP_ROW.NET_AMOUNT                            :=  V_ROW_VALUE;
                WHEN 'ORIGINAL_NET_AMOUNT' THEN
                    V_TEMP_ROW.ORIGINAL_NET_AMOUNT                   :=  V_ROW_VALUE;
                WHEN 'BANK_PAID_AMOUNT' THEN
                    V_TEMP_ROW.BANK_PAID_AMOUNT                      :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_SOURCE' THEN
                    V_TEMP_ROW.TRANSACTION_SOURCE                    :=  V_ROW_VALUE;
                WHEN 'CHANGE_DATE' THEN
                    V_TEMP_ROW.CHANGE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'CHANGE_SOURCE' THEN
                    V_TEMP_ROW.CHANGE_SOURCE                         :=  V_ROW_VALUE;
                WHEN 'SLS_BOOK_DATE' THEN
                    V_TEMP_ROW.SLS_BOOK_DATE                         :=  V_ROW_VALUE;
                WHEN 'CYCLE_RUN_NUMBER' THEN
                    V_TEMP_ROW.CYCLE_RUN_NUMBER                      :=  V_ROW_VALUE;
                WHEN 'BOOK_DATE_SEQUENCE' THEN
                    V_TEMP_ROW.BOOK_DATE_SEQUENCE                    :=  V_ROW_VALUE;
                WHEN 'REASON_CODE' THEN
                    V_TEMP_ROW.REASON_CODE                           :=  V_ROW_VALUE;
                WHEN 'DRAFT_NUMBER' THEN
                    V_TEMP_ROW.DRAFT_NUMBER                          :=  V_ROW_VALUE;
                WHEN 'VOID_INDICATOR' THEN
                    V_TEMP_ROW.VOID_INDICATOR                        :=  V_ROW_VALUE;
                WHEN 'PAY_INDICATOR' THEN
                    V_TEMP_ROW.PAY_INDICATOR                         :=  V_ROW_VALUE;
                WHEN 'STOP_INDICATOR' THEN
                    V_TEMP_ROW.STOP_INDICATOR                        :=  V_ROW_VALUE;
                WHEN 'OPEN_INDICATOR' THEN
                    V_TEMP_ROW.OPEN_INDICATOR                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    --set the flag values for STORE_DRAFTS table
    SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_TEMP_ROW);
    
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'HST_STORE_DRAFTS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END HST_STORE_DRAFTS_ROWTYPE_SP;

PROCEDURE HST_STR_DRFTS_DTL_ROWTYPE_SP (
/*******************************************************************************
	HST_STR_DRFTS_DTL_ROWTYPE_SP

	This procedure is intended to build the HST_STORE_DRAFTS_DETAIL record type

Created : 09/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT HST_STORE_DRAFTS_DETAIL%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         HST_STORE_DRAFTS_DETAIL%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'STORE_DRAFTS_DETAIL_ID' THEN
                    V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID                :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'CHECK_SERIAL_NUMBER' THEN
                    V_TEMP_ROW.CHECK_SERIAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_DATE' THEN
                    V_TEMP_ROW.TRANSACTION_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.TERMINAL_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.TRANSACTION_NUMBER                    :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'CUSTOMER_JOB_NUMBER' THEN
                    V_TEMP_ROW.CUSTOMER_JOB_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'GL_PRIME_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER               :=  V_ROW_VALUE;
                WHEN 'GL_SUB_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER                 :=  V_ROW_VALUE;
                WHEN 'ITEM_QUANTITY' THEN
                    V_TEMP_ROW.ITEM_QUANTITY                         :=  V_ROW_VALUE;
                WHEN 'ITEM_PRICE' THEN
                    V_TEMP_ROW.ITEM_PRICE                            :=  V_ROW_VALUE;
                WHEN 'ITEM_EXT_AMOUNT' THEN
                    V_TEMP_ROW.ITEM_EXT_AMOUNT                       :=  V_ROW_VALUE;
                WHEN 'BOOK_DATE_SEQUENCE' THEN
                    V_TEMP_ROW.BOOK_DATE_SEQUENCE                    :=  V_ROW_VALUE;
                WHEN 'LBR_TRANSACTION_DATE' THEN
                    V_TEMP_ROW.LBR_TRANSACTION_DATE                  :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LBR_TERMINAL_NUMBER' THEN
                    V_TEMP_ROW.LBR_TERMINAL_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'LBR_TRANSACTION_NUMBER' THEN
                    V_TEMP_ROW.LBR_TRANSACTION_NUMBER                :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'HST_STR_DRFTS_DTL_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END HST_STR_DRFTS_DTL_ROWTYPE_SP;
---------------------------SELECT PROCEDURES---------------------------
PROCEDURE CUSTOMER_SALES_TAX_S_SP (
/*******************************************************************************
	CUSTOMER_SALES_TAX_S_SP

	This procedure is intended to select records from CUSTOMER_SALES_TAX table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_SALES_TAX%ROWTYPE;
BEGIN

    CUSTOMER_SALES_TAX_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM CUSTOMER_SALES_TAX
         WHERE NVL(CUSTOMER_SALES_TAX_ID,-1)               = NVL(V_TEMP_ROW.CUSTOMER_SALES_TAX_ID,NVL(CUSTOMER_SALES_TAX_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_SALES_TAX_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_SALES_TAX_S_SP;

PROCEDURE CUSTOMER_DETAILS_S_SP (
/*******************************************************************************
	CUSTOMER_DETAILS_S_SP

	This procedure is intended to select records from CUSTOMER_DETAILS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_DETAILS%ROWTYPE;
BEGIN

    CUSTOMER_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM CUSTOMER_DETAILS
         WHERE NVL(CUSTOMER_DETAIL_ID,-1)                  = NVL(V_TEMP_ROW.CUSTOMER_DETAIL_ID,NVL(CUSTOMER_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SALES_NUMBER,'XXX')                     = NVL(V_TEMP_ROW.SALES_NUMBER,NVL(SALES_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_DETAILS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_DETAILS_S_SP;

PROCEDURE CUSTOMER_S_SP (
/*******************************************************************************
	CUSTOMER_S_SP

	This procedure is intended to select records from CUSTOMER table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 06/16/2014 AXK326/SXT410 Added new filters(Transaction data filter tag
          and Issue date filter tag).
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW               CUSTOMER%ROWTYPE;
    V_TRANSACTION_DATE_START CUSTOMER.TRANSACTION_DATE%TYPE;
    V_TRANSACTION_DATE_END   CUSTOMER.TRANSACTION_DATE%TYPE;
    V_ISSUE_DATE_START       CUSTOMER.ORGNL_POS_TRANSACTION_DATE%TYPE;
    V_ISSUE_DATE_END         CUSTOMER.ORGNL_POS_TRANSACTION_DATE%TYPE;
BEGIN
    CUSTOMER_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
                            
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/CUSTOMER/TRANSACTION_DATE_START/text()') = 1) THEN
        V_TRANSACTION_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/CUSTOMER/TRANSACTION_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/CUSTOMER/TRANSACTION_DATE_END/text()') = 1) THEN
        V_TRANSACTION_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/CUSTOMER/TRANSACTION_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/CUSTOMER/ISSUE_DATE_START/text()') = 1) THEN
        V_ISSUE_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/CUSTOMER/ISSUE_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/CUSTOMER/ISSUE_DATE_END/text()') = 1) THEN
        V_ISSUE_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/CUSTOMER/ISSUE_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM CUSTOMER
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
            AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))       = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
            AND NVL(CUSTOMER_ACCOUNT_NUMBER,'XXX')        = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(CUSTOMER_ACCOUNT_NUMBER,'XXX'))
            AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                        AND NVL(V_TRANSACTION_DATE_END,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
            AND NVL(TERMINAL_NUMBER,'XXX')                 = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
            AND NVL(TRANSACTION_NUMBER,'XXX')              = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
            AND NVL(ORGNL_POS_TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(ORGNL_POS_TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                        AND NVL(V_ISSUE_DATE_END,NVL(ORGNL_POS_TRANSACTION_DATE,TRUNC(SYSDATE)));
            
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_S_SP;

PROCEDURE STORE_DRAFTS_DETAIL_S_SP (
/*******************************************************************************
	STORE_DRAFTS_DETAIL_S_SP

	This procedure is intended to select records from STORE_DRAFTS_DETAIL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       STORE_DRAFTS_DETAIL%ROWTYPE;
BEGIN

    STORE_DRAFTS_DETAIL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM STORE_DRAFTS_DETAIL
         WHERE NVL(STORE_DRAFTS_DETAIL_ID,-1)              = NVL(V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID,NVL(STORE_DRAFTS_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_DETAIL_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_DETAIL_S_SP;

PROCEDURE STORE_DRAFTS_S_SP (
/*******************************************************************************
	STORE_DRAFTS_S_SP

	This procedure is intended to select records from STORE_DRAFTS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 08/15/2017 axt754 Added Logic - Limited Store Drafts by Divisions 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW               STORE_DRAFTS%ROWTYPE;
    V_CHECK_RANGE_START      STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_CHECK_RANGE_END        STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_TRANSACTION_DATE_START STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_TRANSACTION_DATE_END   STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_PAID_DATE_START        STORE_DRAFTS.PAID_DATE%TYPE;
    V_PAID_DATE_END          STORE_DRAFTS.PAID_DATE%TYPE;
    V_ISSUE_DATE_START       STORE_DRAFTS.ISSUE_DATE%TYPE;
    V_ISSUE_DATE_END         STORE_DRAFTS.ISSUE_DATE%TYPE;
    V_STORE_DRAFT_INDICATOR  VARCHAR2(100);
    V_USER_ID                VARCHAR2(10)  := NULL;
    V_DIVISION_VAL           VARCHAR2(100) := NULL; 
BEGIN

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/STORE_DRAFT_INDICATOR/text()') = 1) THEN
        V_STORE_DRAFT_INDICATOR   := UPPER(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/STORE_DRAFT_INDICATOR/text()').GETSTRINGVAL());
    END IF;
    
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/USER_ID/text()') = 1) THEN
        V_USER_ID   := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/USER_ID/text()').GETSTRINGVAL();
    END IF;
    
    STORE_DRAFTS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHECK_RANGE_START/text()') = 1) THEN
        V_CHECK_RANGE_START := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHECK_RANGE_START/text()').GETSTRINGVAL();
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/CHECK_RANGE_END/text()') = 1) THEN
        V_CHECK_RANGE_END := XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/CHECK_RANGE_END/text()').GETSTRINGVAL();
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_DATE_START/text()') = 1) THEN
        V_TRANSACTION_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/TRANSACTION_DATE_END/text()') = 1) THEN
        V_TRANSACTION_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/TRANSACTION_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/PAID_DATE_START/text()') = 1) THEN
        V_PAID_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/PAID_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/PAID_DATE_END/text()') = 1) THEN
        V_PAID_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/PAID_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/ISSUE_DATE_START/text()') = 1) THEN
        V_ISSUE_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/ISSUE_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/ISSUE_DATE_END/text()') = 1) THEN
        V_ISSUE_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/ISSUE_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    
    -- Get Divisions for the user who is doing the transaction
    V_DIVISION_VAL := SD_COMMON_TOOLS.GET_STORE_DRAFTS_DIVISIONS(V_USER_ID);

    --over write the values given by the rowtype procedure as we need to set them here for querying
    V_TEMP_ROW.OPEN_INDICATOR := NULL;
    V_TEMP_ROW.PAY_INDICATOR  := NULL;
    V_TEMP_ROW.VOID_INDICATOR := NULL;
    V_TEMP_ROW.STOP_INDICATOR := NULL;

    CASE V_STORE_DRAFT_INDICATOR 
        WHEN 'OPEN' THEN
            V_TEMP_ROW.OPEN_INDICATOR := 'Y';
        WHEN 'PAID' THEN
            V_TEMP_ROW.PAY_INDICATOR  := 'Y';
        WHEN 'VOID' THEN
            V_TEMP_ROW.VOID_INDICATOR := 'Y';
        WHEN 'STOP' THEN
            V_TEMP_ROW.STOP_INDICATOR := 'Y';
        ELSE NULL;
    END CASE;

    IF V_STORE_DRAFT_INDICATOR = 'MNL_DRFT' THEN
        --Need to manually set the TABLE_NAME and replace the tag STORE_DRAFTS to UNATTACHED_MNL_DRFT_DTL
        /*UNATTACHED_MNL_DRFT_DTL_S_SP('UNATTACHED_MNL_DRFT_DTL',
                                     REPLACE(IN_ROW_DATA,'STORE_DRAFTS>','UNATTACHED_MNL_DRFT_DTL>'),
                                     OUT_REF_CUR);*/
        OPEN OUT_REF_CUR FOR
            SELECT DISTINCT MD.*
              FROM UNATTACHED_MNL_DRFT_DTL MD
                   ,CCN_HIERARCHY_INFO CCH
             WHERE NVL(MD.COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(MD.COST_CENTER_CODE,'XXX'))
               /*AND NVL(DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(DRAFT_NUMBER,'XXX'))*/
               AND NVL(MD.TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(MD.TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(MD.TRANSACTION_DATE,TRUNC(SYSDATE)))
               AND NVL(MD.PAID_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(MD.PAID_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(MD.PAID_DATE,TRUNC(SYSDATE)))
               AND NVL(MD.ISSUE_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(MD.ISSUE_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_ISSUE_DATE_END,NVL(MD.ISSUE_DATE,TRUNC(SYSDATE)))
               AND NVL(MD.OPEN_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.OPEN_INDICATOR,NVL(MD.OPEN_INDICATOR,'XXX'))
               AND NVL(MD.PAY_INDICATOR,'XXX')                  = NVL(V_TEMP_ROW.PAY_INDICATOR,NVL(MD.PAY_INDICATOR,'XXX'))
               AND NVL(MD.VOID_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.VOID_INDICATOR,NVL(MD.VOID_INDICATOR,'XXX'))
               AND NVL(MD.STOP_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.STOP_INDICATOR,NVL(MD.STOP_INDICATOR,'XXX'))
               AND NVL(MD.CUSTOMER_ACCOUNT_NUMBER,'XXX')        = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(MD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(MD.TRANSACTION_NUMBER,'XXX')             = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(MD.TRANSACTION_NUMBER,'XXX'))
               AND NVL(MD.POS_TRANSACTION_CODE,'XXX')           = NVL(V_TEMP_ROW.POS_TRANSACTION_CODE,NVL(MD.POS_TRANSACTION_CODE,'XXX'))
               AND CCH.COST_CENTER_CODE (+)                     = MD.COST_CENTER_CODE
               AND INSTR(NVL(V_DIVISION_VAL,NVL(CCH.DIVISION,'XXX'))||',',NVL(CCH.DIVISION,'XXX')||',') > 0;
    ELSIF V_STORE_DRAFT_INDICATOR IS NULL THEN
        OPEN OUT_REF_CUR FOR
            SELECT DISTINCT SD.*
              FROM STORE_DRAFTS SD
                   ,CCN_HIERARCHY_INFO CCH
             WHERE NVL(SD.COST_CENTER_CODE,'XXX')               = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(SD.COST_CENTER_CODE,'XXX'))
               AND NVL(SD.DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(SD.DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(SD.DRAFT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(SD.TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
               AND NVL(SD.PAID_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(SD.PAID_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(SD.PAID_DATE,TRUNC(SYSDATE)))
               AND NVL(SD.ISSUE_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_ISSUE_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(SYSDATE)))
               AND NVL(SD.OPEN_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.OPEN_INDICATOR,NVL(SD.OPEN_INDICATOR,'XXX'))
               AND NVL(SD.PAY_INDICATOR,'XXX')                  = NVL(V_TEMP_ROW.PAY_INDICATOR,NVL(SD.PAY_INDICATOR,'XXX'))
               AND NVL(SD.VOID_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.VOID_INDICATOR,NVL(SD.VOID_INDICATOR,'XXX'))
               AND NVL(SD.STOP_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.STOP_INDICATOR,NVL(SD.STOP_INDICATOR,'XXX'))
               AND NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX')        = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_NUMBER,'XXX')             = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(SD.TRANSACTION_NUMBER,'XXX'))
               AND NVL(SD.POS_TRANSACTION_CODE,'XXX')           = NVL(V_TEMP_ROW.POS_TRANSACTION_CODE,NVL(SD.POS_TRANSACTION_CODE,'XXX'))
               AND CCH.COST_CENTER_CODE (+)                     = SD.COST_CENTER_CODE
               AND INSTR(NVL(V_DIVISION_VAL,NVL(CCH.DIVISION,'XXX'))||',',NVL(CCH.DIVISION,'XXX')||',') > 0
        UNION
            SELECT DISTINCT MD.*
              FROM UNATTACHED_MNL_DRFT_DTL MD
                   ,CCN_HIERARCHY_INFO CCH
             WHERE NVL(MD.COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(MD.COST_CENTER_CODE,'XXX'))
                /*AND NVL(DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(DRAFT_NUMBER,'XXX')) 
                                                             AND NVL(V_CHECK_RANGE_END,NVL(DRAFT_NUMBER,'XXX'))*/
                AND NVL(MD.TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(MD.TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                             AND NVL(V_TRANSACTION_DATE_END,NVL(MD.TRANSACTION_DATE,TRUNC(SYSDATE)))
                AND NVL(MD.PAID_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(MD.PAID_DATE,TRUNC(SYSDATE))) 
                                                             AND NVL(V_PAID_DATE_END,NVL(MD.PAID_DATE,TRUNC(SYSDATE)))
                AND NVL(MD.ISSUE_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(MD.ISSUE_DATE,TRUNC(SYSDATE))) 
                                                             AND NVL(V_ISSUE_DATE_END,NVL(MD.ISSUE_DATE,TRUNC(SYSDATE)))
                AND NVL(MD.OPEN_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.OPEN_INDICATOR,NVL(MD.OPEN_INDICATOR,'XXX'))
                AND NVL(MD.PAY_INDICATOR,'XXX')                  = NVL(V_TEMP_ROW.PAY_INDICATOR,NVL(MD.PAY_INDICATOR,'XXX'))
                AND NVL(MD.VOID_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.VOID_INDICATOR,NVL(MD.VOID_INDICATOR,'XXX'))
                AND NVL(MD.STOP_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.STOP_INDICATOR,NVL(MD.STOP_INDICATOR,'XXX'))
                AND NVL(MD.CUSTOMER_ACCOUNT_NUMBER,'XXX')        = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(MD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
                AND NVL(MD.TRANSACTION_NUMBER,'XXX')             = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(MD.TRANSACTION_NUMBER,'XXX'))
                AND NVL(MD.POS_TRANSACTION_CODE,'XXX')           = NVL(V_TEMP_ROW.POS_TRANSACTION_CODE,NVL(MD.POS_TRANSACTION_CODE,'XXX'))
                AND CCH.COST_CENTER_CODE (+)                     = MD.COST_CENTER_CODE
                AND INSTR(NVL(V_DIVISION_VAL,NVL(CCH.DIVISION,'XXX'))||',',NVL(CCH.DIVISION,'XXX')||',') > 0;
    ELSE
        OPEN OUT_REF_CUR FOR
            SELECT DISTINCT SD.*
              FROM STORE_DRAFTS SD
                   ,CCN_HIERARCHY_INFO CCH
             WHERE NVL(SD.COST_CENTER_CODE,'XXX')               = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(SD.COST_CENTER_CODE,'XXX'))
               AND NVL(SD.DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(SD.DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(SD.DRAFT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(SD.TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
               AND NVL(SD.PAID_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(SD.PAID_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(SD.PAID_DATE,TRUNC(SYSDATE)))
               AND NVL(SD.ISSUE_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(SD.ISSUE_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_ISSUE_DATE_END,NVL(SD.ISSUE_DATE,TRUNC(SYSDATE)))
               AND NVL(SD.OPEN_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.OPEN_INDICATOR,NVL(SD.OPEN_INDICATOR,'XXX'))
               AND NVL(SD.PAY_INDICATOR,'XXX')                  = NVL(V_TEMP_ROW.PAY_INDICATOR,NVL(SD.PAY_INDICATOR,'XXX'))
               AND NVL(SD.VOID_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.VOID_INDICATOR,NVL(SD.VOID_INDICATOR,'XXX'))
               AND NVL(SD.STOP_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.STOP_INDICATOR,NVL(SD.STOP_INDICATOR,'XXX'))
               AND NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX')        = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(SD.CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(SD.TRANSACTION_NUMBER,'XXX')             = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(SD.TRANSACTION_NUMBER,'XXX'))
               AND NVL(SD.POS_TRANSACTION_CODE,'XXX')           = NVL(V_TEMP_ROW.POS_TRANSACTION_CODE,NVL(SD.POS_TRANSACTION_CODE,'XXX'))
               AND CCH.COST_CENTER_CODE (+)                     = SD.COST_CENTER_CODE
               AND INSTR(NVL(V_DIVISION_VAL,NVL(CCH.DIVISION,'XXX'))||',',NVL(CCH.DIVISION,'XXX')||',') > 0;
    END IF;

EXCEPTION
    WHEN OTHERS THEN 
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_S_SP;

PROCEDURE UNATTACHED_MNL_DRFT_DTL_S_SP (
/*******************************************************************************
	UNATTACHED_MNL_DRFT_DTL_S_SP

	This procedure is intended to select records from UNATTACHED_MNL_DRFT_DTL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       UNATTACHED_MNL_DRFT_DTL%ROWTYPE;
BEGIN

    UNATHED_MNL_D_DTL_ROWTYPE_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA,
                                 V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM UNATTACHED_MNL_DRFT_DTL
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'UNATTACHED_MNL_DRFT_DTL_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END UNATTACHED_MNL_DRFT_DTL_S_SP;

PROCEDURE CUSTOMER_FORM_OF_PAY_S_SP (
/*******************************************************************************
	CUSTOMER_FORM_OF_PAY_S_SP

	This procedure is intended to select records from CUSTOMER_FORM_OF_PAY table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_FORM_OF_PAY%ROWTYPE;
BEGIN

    CUSTOMER_FOP_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM CUSTOMER_FORM_OF_PAY
         WHERE NVL(CUSTOMER_FORM_OF_PAY_ID,-1)             = NVL(V_TEMP_ROW.CUSTOMER_FORM_OF_PAY_ID,NVL(CUSTOMER_FORM_OF_PAY_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SUB_SEGMENT_CODE,'XXX')                 = NVL(V_TEMP_ROW.SUB_SEGMENT_CODE,NVL(SUB_SEGMENT_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_FORM_OF_PAY_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_FORM_OF_PAY_S_SP;

PROCEDURE CUSTOMER_BANK_CARD_S_SP (
/*******************************************************************************
	CUSTOMER_BANK_CARD_S_SP

	This procedure is intended to select records from CUSTOMER_BANK_CARD table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_BANK_CARD%ROWTYPE;
BEGIN

    CUSTOMER_BANK_CARD_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM CUSTOMER_BANK_CARD
         WHERE NVL(CUSTOMER_BANK_CARD_ID,-1)               = NVL(V_TEMP_ROW.CUSTOMER_BANK_CARD_ID,NVL(CUSTOMER_BANK_CARD_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SUB_SEGMENT_CODE,'XXX')                 = NVL(V_TEMP_ROW.SUB_SEGMENT_CODE,NVL(SUB_SEGMENT_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_BANK_CARD_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_BANK_CARD_S_SP;

PROCEDURE HST_STORE_DRAFTS_S_SP (
/*******************************************************************************
	HST_STORE_DRAFTS_S_SP

	This procedure is intended to select records from HST_STORE_DRAFTS table

Created : 09/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW               HST_STORE_DRAFTS%ROWTYPE;
    V_CHECK_RANGE_START      HST_STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_CHECK_RANGE_END        HST_STORE_DRAFTS.DRAFT_NUMBER%TYPE;
    V_TRANSACTION_DATE_START HST_STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_TRANSACTION_DATE_END   HST_STORE_DRAFTS.TRANSACTION_DATE%TYPE;
    V_PAID_DATE_START        HST_STORE_DRAFTS.PAID_DATE%TYPE;
    V_PAID_DATE_END          HST_STORE_DRAFTS.PAID_DATE%TYPE;
    V_ISSUE_DATE_START       HST_STORE_DRAFTS.ISSUE_DATE%TYPE;
    V_ISSUE_DATE_END         HST_STORE_DRAFTS.ISSUE_DATE%TYPE;
    V_STORE_DRAFT_INDICATOR  VARCHAR2(100);
BEGIN
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/STORE_DRAFT_INDICATOR/text()') = 1) THEN
        V_STORE_DRAFT_INDICATOR   := UPPER(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/STORE_DRAFT_INDICATOR/text()').GETSTRINGVAL());
    END IF;

    HST_STORE_DRAFTS_ROWTYPE_SP(IN_TABLE_NAME,
                                IN_ROW_DATA,
                                V_TEMP_ROW);

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/CHECK_RANGE_START/text()') = 1) THEN
        V_CHECK_RANGE_START := XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/CHECK_RANGE_START/text()').GETSTRINGVAL();
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/CHECK_RANGE_END/text()') = 1) THEN
        V_CHECK_RANGE_END := XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/CHECK_RANGE_END/text()').GETSTRINGVAL();
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/TRANSACTION_DATE_START/text()') = 1) THEN
        V_TRANSACTION_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/TRANSACTION_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/TRANSACTION_DATE_END/text()') = 1) THEN
        V_TRANSACTION_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/TRANSACTION_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/PAID_DATE_START/text()') = 1) THEN
        V_PAID_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/PAID_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/PAID_DATE_END/text()') = 1) THEN
        V_PAID_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/PAID_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/ISSUE_DATE_START/text()') = 1) THEN
        V_ISSUE_DATE_START := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/ISSUE_DATE_START/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/HST_STORE_DRAFTS/ISSUE_DATE_END/text()') = 1) THEN
        V_ISSUE_DATE_END   := TO_DATE(XMLTYPE(IN_ROW_DATA).EXTRACT('/HST_STORE_DRAFTS/ISSUE_DATE_END/text()').GETSTRINGVAL(),'MM-DD-YYYY');
    END IF;

    --over write the values given by the rowtype procedure as we need to set them here for querying
    V_TEMP_ROW.OPEN_INDICATOR := NULL;
    V_TEMP_ROW.PAY_INDICATOR  := NULL;
    V_TEMP_ROW.VOID_INDICATOR := NULL;
    V_TEMP_ROW.STOP_INDICATOR := NULL;

    CASE V_STORE_DRAFT_INDICATOR 
        WHEN 'OPEN' THEN
            V_TEMP_ROW.OPEN_INDICATOR := 'Y';
        WHEN 'PAID' THEN
            V_TEMP_ROW.PAY_INDICATOR  := 'Y';
        WHEN 'VOID' THEN
            V_TEMP_ROW.VOID_INDICATOR := 'Y';
        WHEN 'STOP' THEN
            V_TEMP_ROW.STOP_INDICATOR := 'Y';
        ELSE NULL;
    END CASE;

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM HST_STORE_DRAFTS
             WHERE NVL(COST_CENTER_CODE,'XXX')               = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
               AND NVL(DRAFT_NUMBER,'XXX') BETWEEN NVL(V_CHECK_RANGE_START,NVL(DRAFT_NUMBER,'XXX')) 
                                                            AND NVL(V_CHECK_RANGE_END,NVL(DRAFT_NUMBER,'XXX'))
               AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_TRANSACTION_DATE_START,NVL(TRANSACTION_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_TRANSACTION_DATE_END,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
               AND NVL(PAID_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_PAID_DATE_START,NVL(PAID_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_PAID_DATE_END,NVL(PAID_DATE,TRUNC(SYSDATE)))
               AND NVL(ISSUE_DATE,TRUNC(SYSDATE)) BETWEEN NVL(V_ISSUE_DATE_START,NVL(ISSUE_DATE,TRUNC(SYSDATE))) 
                                                            AND NVL(V_ISSUE_DATE_END,NVL(ISSUE_DATE,TRUNC(SYSDATE)))
               AND NVL(OPEN_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.OPEN_INDICATOR,NVL(OPEN_INDICATOR,'XXX'))
               AND NVL(PAY_INDICATOR,'XXX')                  = NVL(V_TEMP_ROW.PAY_INDICATOR,NVL(PAY_INDICATOR,'XXX'))
               AND NVL(VOID_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.VOID_INDICATOR,NVL(VOID_INDICATOR,'XXX'))
               AND NVL(STOP_INDICATOR,'XXX')                 = NVL(V_TEMP_ROW.STOP_INDICATOR,NVL(STOP_INDICATOR,'XXX'))
               AND NVL(CUSTOMER_ACCOUNT_NUMBER,'XXX')        = NVL(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,NVL(CUSTOMER_ACCOUNT_NUMBER,'XXX'))
               AND NVL(TRANSACTION_NUMBER,'XXX')             = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
               AND NVL(POS_TRANSACTION_CODE,'XXX')           = NVL(V_TEMP_ROW.POS_TRANSACTION_CODE,NVL(POS_TRANSACTION_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'HST_STORE_DRAFTS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END HST_STORE_DRAFTS_S_SP;

PROCEDURE HST_STORE_DRAFTS_DETAIL_S_SP (
/*******************************************************************************
	HST_STORE_DRAFTS_DETAIL_S_SP

	This procedure is intended to select records from HST_STORE_DRAFTS_DETAIL table

Created : 09/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       HST_STORE_DRAFTS_DETAIL%ROWTYPE;
BEGIN

   HST_STR_DRFTS_DTL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM HST_STORE_DRAFTS_DETAIL
         WHERE NVL(STORE_DRAFTS_DETAIL_ID,-1)              = NVL(V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID,NVL(STORE_DRAFTS_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'HST_STORE_DRAFTS_DETAIL_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END HST_STORE_DRAFTS_DETAIL_S_SP;
---------------------------INSERT PROCEDURES---------------------------
PROCEDURE CUSTOMER_SALES_TAX_I_SP (
/*******************************************************************************
	CUSTOMER_SALES_TAX_I_SP

	This procedure is intended to insert records into CUSTOMER_SALES_TAX table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_SALES_TAX%ROWTYPE;
BEGIN

    CUSTOMER_SALES_TAX_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    INSERT INTO CUSTOMER_SALES_TAX VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        CUSTOMER_SALES_TAX_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_SALES_TAX_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_SALES_TAX_I_SP;

PROCEDURE CUSTOMER_DETAILS_I_SP (
/*******************************************************************************
	CUSTOMER_DETAILS_I_SP

	This procedure is intended to insert records into CUSTOMER_DETAILS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_DETAILS%ROWTYPE;
BEGIN

    CUSTOMER_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    INSERT INTO CUSTOMER_DETAILS VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        CUSTOMER_DETAILS_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_DETAILS_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_DETAILS_I_SP;

PROCEDURE CUSTOMER_I_SP (
/*******************************************************************************
	CUSTOMER_I_SP

	This procedure is intended to insert records into CUSTOMER table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER%ROWTYPE;
BEGIN

    CUSTOMER_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    INSERT INTO CUSTOMER VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        CUSTOMER_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_I_SP;

PROCEDURE STORE_DRAFTS_DETAIL_I_SP (
/*******************************************************************************
	STORE_DRAFTS_DETAIL_I_SP

	This procedure is intended to insert records into STORE_DRAFTS_DETAIL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       STORE_DRAFTS_DETAIL%ROWTYPE;
BEGIN

    STORE_DRAFTS_DETAIL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    INSERT INTO STORE_DRAFTS_DETAIL VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STORE_DRAFTS_DETAIL_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_DETAIL_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_DETAIL_I_SP;

PROCEDURE STORE_DRAFTS_I_SP (
/*******************************************************************************
	STORE_DRAFTS_I_SP

	This procedure is intended to insert records into STORE_DRAFTS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 12/12/2014 axk326 CCN Project....
          During updates on unattached manual drafts, we should return TRUE if 
          it's already unattached as of that day
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW     STORE_DRAFTS%ROWTYPE;
    V_COUNT        NUMBER := 0;
    V_MNL_DRAFT    BOOLEAN := FALSE;
BEGIN

    STORE_DRAFTS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
    IF SD_BUSINESS_RULES_PKG.IS_UNATTACHED_STORE_DRAFT(V_TEMP_ROW) THEN
        V_MNL_DRAFT := TRUE;
    ELSE
        --During updates on unattached manual drafts, we should return TRUE if it's already unattached as og that day
        BEGIN
            SELECT COUNT(*)
              INTO V_COUNT
              FROM UNATTACHED_MNL_DRFT_DTL
             WHERE COST_CENTER_CODE    = V_TEMP_ROW.COST_CENTER_CODE
               AND CHECK_SERIAL_NUMBER = V_TEMP_ROW.CHECK_SERIAL_NUMBER;
            IF V_COUNT > 0 THEN
                V_MNL_DRAFT := TRUE;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    END IF;
    IF V_MNL_DRAFT THEN
        --Need to manually set the TABLE_NAME and replace the tag STORE_DRAFTS to UNATTACHED_MNL_DRFT_DTL
        UNATTACHED_MNL_DRFT_DTL_I_SP('UNATTACHED_MNL_DRFT_DTL',
                                     REPLACE(IN_ROW_DATA,'STORE_DRAFTS>','UNATTACHED_MNL_DRFT_DTL>'));
    ELSE
        INSERT INTO STORE_DRAFTS VALUES V_TEMP_ROW;
    END IF;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STORE_DRAFTS_U_SP(IN_TABLE_NAME,
                          IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_I_SP;

PROCEDURE UNATTACHED_MNL_DRFT_DTL_I_SP (
/*******************************************************************************
	UNATTACHED_MNL_DRFT_DTL_I_SP

	This procedure is intended to insert records into UNATTACHED_MNL_DRFT_DTL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 12/12/2014 axk326 CCN Project....
          Modified logic to accept original_net_amount to be net_amount when the 
          draft is created manually for the first time 
        : 02/13/2015 DXV848 CNN Project... commented the line NET_AMOUNT = original_net_amount
        : 09/27/2017 nxk927 CCN Project....
          Changed the process to hold the load date with time stamp
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_UPSERT_INDICATOR VARCHAR2(1);
    V_TEMP_ROW         UNATTACHED_MNL_DRFT_DTL%ROWTYPE;
BEGIN

    UNATHED_MNL_D_DTL_ROWTYPE_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA,
                                 V_TEMP_ROW);

    --If below indicator is I then insert, else it's an update
    IF (XMLTYPE(IN_ROW_DATA).EXISTSNODE('/STORE_DRAFTS/UPSERT_INDICATOR/text()') = 1) THEN
        V_UPSERT_INDICATOR   := UPPER(XMLTYPE(IN_ROW_DATA).EXTRACT('/STORE_DRAFTS/UPSERT_INDICATOR/text()').GETSTRINGVAL());
    END IF;
    
    V_TEMP_ROW.TRANSACTION_DATE    := TRUNC(SYSDATE);
    V_TEMP_ROW.LOAD_DATE           := SYSDATE;
    --V_TEMP_ROW.NET_AMOUNT          := V_TEMP_ROW.ORIGINAL_NET_AMOUNT; --DXV848 02/13/2015
    INSERT INTO UNATTACHED_MNL_DRFT_DTL VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        IF NVL(V_UPSERT_INDICATOR,'U') = 'I' THEN
            V_CODE  := SQLCODE;
            V_ERRM  := SUBSTR(SQLERRM,1,200);
            ERRPKG.RAISE_ERR(V_CODE, 'UNATTACHED_MNL_DRFT_DTL_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
        ELSE
            UNATTACHED_MNL_DRFT_DTL_U_SP(IN_TABLE_NAME,
                                         IN_ROW_DATA);
        END IF;
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'UNATTACHED_MNL_DRFT_DTL_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END UNATTACHED_MNL_DRFT_DTL_I_SP;

PROCEDURE CUSTOMER_FORM_OF_PAY_I_SP (
/*******************************************************************************
	CUSTOMER_FORM_OF_PAY_I_SP

	This procedure is intended to insert records into CUSTOMER_FORM_OF_PAY table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_FORM_OF_PAY%ROWTYPE;
BEGIN

    CUSTOMER_FOP_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    INSERT INTO CUSTOMER_FORM_OF_PAY VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        CUSTOMER_FORM_OF_PAY_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_FORM_OF_PAY_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_FORM_OF_PAY_I_SP;

PROCEDURE CUSTOMER_BANK_CARD_I_SP (
/*******************************************************************************
	CUSTOMER_BANK_CARD_I_SP

	This procedure is intended to insert records into CUSTOMER_BANK_CARD table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_BANK_CARD%ROWTYPE;
BEGIN

    CUSTOMER_BANK_CARD_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    INSERT INTO CUSTOMER_BANK_CARD VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        CUSTOMER_BANK_CARD_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_BANK_CARD_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_BANK_CARD_I_SP;

---------------------------UPDATE PROCEDURES---------------------------
PROCEDURE CUSTOMER_SALES_TAX_U_SP (
/*******************************************************************************
	CUSTOMER_SALES_TAX_U_SP

	This procedure is intended to updates records in CUSTOMER_SALES_TAX table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_SALES_TAX%ROWTYPE;
BEGIN

    CUSTOMER_SALES_TAX_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE CUSTOMER_SALES_TAX
           SET ROW = V_TEMP_ROW
         WHERE NVL(CUSTOMER_SALES_TAX_ID,-1)               = NVL(V_TEMP_ROW.CUSTOMER_SALES_TAX_ID,NVL(CUSTOMER_SALES_TAX_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_SALES_TAX_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_SALES_TAX_U_SP;

PROCEDURE CUSTOMER_DETAILS_U_SP (
/*******************************************************************************
	CUSTOMER_DETAILS_U_SP

	This procedure is intended to updates records in CUSTOMER_DETAILS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_DETAILS%ROWTYPE;
BEGIN

    CUSTOMER_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE CUSTOMER_DETAILS
           SET ROW = V_TEMP_ROW
         WHERE NVL(CUSTOMER_DETAIL_ID,-1)                  = NVL(V_TEMP_ROW.CUSTOMER_DETAIL_ID,NVL(CUSTOMER_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SALES_NUMBER,'XXX')                     = NVL(V_TEMP_ROW.SALES_NUMBER,NVL(SALES_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_DETAILS_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_DETAILS_U_SP;

PROCEDURE CUSTOMER_U_SP (
/*******************************************************************************
	CUSTOMER_U_SP

	This procedure is intended to updates records in CUSTOMER table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER%ROWTYPE;
BEGIN

    CUSTOMER_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE CUSTOMER
           SET ROW = V_TEMP_ROW
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_U_SP;

PROCEDURE STORE_DRAFTS_DETAIL_U_SP (
/*******************************************************************************
	STORE_DRAFTS_DETAIL_U_SP

	This procedure is intended to updates records in STORE_DRAFTS_DETAIL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       STORE_DRAFTS_DETAIL%ROWTYPE;
BEGIN

    STORE_DRAFTS_DETAIL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE STORE_DRAFTS_DETAIL
           SET ROW = V_TEMP_ROW
         WHERE NVL(STORE_DRAFTS_DETAIL_ID,-1)              = NVL(V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID,NVL(STORE_DRAFTS_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_DETAIL_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_DETAIL_U_SP;

PROCEDURE STORE_DRAFTS_U_SP (
/*******************************************************************************
	STORE_DRAFTS_U_SP

	This procedure is intended to updates records in STORE_DRAFTS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 01/13/2017 vxv336
          added STOP_PAY_MARKED_BY_CCN_IND for update
        : 03/12/2018 bxa919
          added VOID_MARKED_BY_CCN for update
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW               STORE_DRAFTS%ROWTYPE;
BEGIN

    STORE_DRAFTS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
        
        UPDATE STORE_DRAFTS
           SET STOP_PAY_DATE              = V_TEMP_ROW.STOP_PAY_DATE,
               STOP_PAY_REMOVE_DATE       = V_TEMP_ROW.STOP_PAY_REMOVE_DATE,
               VOID_DATE                  = V_TEMP_ROW.VOID_DATE,
               NET_AMOUNT                 = V_TEMP_ROW.NET_AMOUNT,
               CHANGE_DATE                = V_TEMP_ROW.CHANGE_DATE,
               AMOUNT_CHANGE_DATE         = V_TEMP_ROW.AMOUNT_CHANGE_DATE,
               OPEN_INDICATOR             = V_TEMP_ROW.OPEN_INDICATOR,
               PAY_INDICATOR              = V_TEMP_ROW.PAY_INDICATOR,
               STOP_INDICATOR             = V_TEMP_ROW.STOP_INDICATOR,
               VOID_INDICATOR             = V_TEMP_ROW.VOID_INDICATOR,
               STOP_PAY_MARKED_BY_CCN_IND = DECODE(V_TEMP_ROW.STOP_PAY_DATE, NULL, NULL, STOP_PAY_MARKED_BY_CCN_IND),
               VOID_MARKED_BY_CCN = DECODE(V_TEMP_ROW.VOID_DATE, NULL, NULL, VOID_MARKED_BY_CCN)
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_U_SP;

PROCEDURE UNATTACHED_MNL_DRFT_DTL_U_SP (
/*******************************************************************************
	UNATTACHED_MNL_DRFT_DTL_U_SP

	This procedure is intended to updates records in UNATTACHED_MNL_DRFT_DTL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 09/27/2017 nxk927 CCN Project....
          Changed the process to hold the load date with time stamp
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       UNATTACHED_MNL_DRFT_DTL%ROWTYPE;
BEGIN

    UNATHED_MNL_D_DTL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE UNATTACHED_MNL_DRFT_DTL
           --SET ROW = V_TEMP_ROW
           SET STOP_PAY_DATE        = V_TEMP_ROW.STOP_PAY_DATE,
               STOP_PAY_REMOVE_DATE = V_TEMP_ROW.STOP_PAY_REMOVE_DATE,
               VOID_DATE            = V_TEMP_ROW.VOID_DATE,
               NET_AMOUNT           = V_TEMP_ROW.NET_AMOUNT,
               CHANGE_DATE          = V_TEMP_ROW.CHANGE_DATE,
               OPEN_INDICATOR       = V_TEMP_ROW.OPEN_INDICATOR,
               PAY_INDICATOR        = V_TEMP_ROW.PAY_INDICATOR,
               STOP_INDICATOR       = V_TEMP_ROW.STOP_INDICATOR,
               VOID_INDICATOR       = V_TEMP_ROW.VOID_INDICATOR,
               LOAD_DATE            = SYSDATE
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'UNATTACHED_MNL_DRFT_DTL_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END UNATTACHED_MNL_DRFT_DTL_U_SP;

PROCEDURE CUSTOMER_FORM_OF_PAY_U_SP (
/*******************************************************************************
	CUSTOMER_FORM_OF_PAY_U_SP

	This procedure is intended to updates records in CUSTOMER_FORM_OF_PAY table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_FORM_OF_PAY%ROWTYPE;
BEGIN

    CUSTOMER_FOP_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE CUSTOMER_FORM_OF_PAY
           SET ROW = V_TEMP_ROW
         WHERE NVL(CUSTOMER_FORM_OF_PAY_ID,-1)             = NVL(V_TEMP_ROW.CUSTOMER_FORM_OF_PAY_ID,NVL(CUSTOMER_FORM_OF_PAY_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SUB_SEGMENT_CODE,'XXX')                 = NVL(V_TEMP_ROW.SUB_SEGMENT_CODE,NVL(SUB_SEGMENT_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_FORM_OF_PAY_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_FORM_OF_PAY_U_SP;

PROCEDURE CUSTOMER_BANK_CARD_U_SP (
/*******************************************************************************
	CUSTOMER_BANK_CARD_U_SP

	This procedure is intended to updates records in CUSTOMER_BANK_CARD table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_BANK_CARD%ROWTYPE;
BEGIN

    CUSTOMER_BANK_CARD_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

        UPDATE CUSTOMER_BANK_CARD
           SET ROW = V_TEMP_ROW
         WHERE NVL(CUSTOMER_BANK_CARD_ID,-1)               = NVL(V_TEMP_ROW.CUSTOMER_BANK_CARD_ID,NVL(CUSTOMER_BANK_CARD_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SUB_SEGMENT_CODE,'XXX')                 = NVL(V_TEMP_ROW.SUB_SEGMENT_CODE,NVL(SUB_SEGMENT_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_BANK_CARD_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_BANK_CARD_U_SP;

---------------------------DELETE PROCEDURES---------------------------
PROCEDURE CUSTOMER_SALES_TAX_D_SP (
/*******************************************************************************
	CUSTOMER_SALES_TAX_D_SP

	This procedure is intended to delete records from CUSTOMER_SALES_TAX table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_SALES_TAX%ROWTYPE;
BEGIN

    CUSTOMER_SALES_TAX_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);


    DELETE
      FROM CUSTOMER_SALES_TAX
         WHERE NVL(CUSTOMER_SALES_TAX_ID,-1)               = NVL(V_TEMP_ROW.CUSTOMER_SALES_TAX_ID,NVL(CUSTOMER_SALES_TAX_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_SALES_TAX_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_SALES_TAX_D_SP;

PROCEDURE CUSTOMER_DETAILS_D_SP (
/*******************************************************************************
	CUSTOMER_DETAILS_D_SP

	This procedure is intended to delete records from CUSTOMER_DETAILS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_DETAILS%ROWTYPE;
BEGIN

    CUSTOMER_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);


    DELETE
      FROM CUSTOMER_DETAILS
         WHERE NVL(CUSTOMER_DETAIL_ID,-1)                  = NVL(V_TEMP_ROW.CUSTOMER_DETAIL_ID,NVL(CUSTOMER_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SALES_NUMBER,'XXX')                     = NVL(V_TEMP_ROW.SALES_NUMBER,NVL(SALES_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_DETAILS_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_DETAILS_D_SP;

PROCEDURE CUSTOMER_D_SP (
/*******************************************************************************
	CUSTOMER_D_SP

	This procedure is intended to delete records from CUSTOMER table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER%ROWTYPE;
BEGIN

    CUSTOMER_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    SD_TABLE_IU_PKG.CUSTOMER_FORM_OF_PAY_D_SP('CUSTOMER_FORM_OF_PAY',IN_ROW_DATA);
    SD_TABLE_IU_PKG.CUSTOMER_BANK_CARD_D_SP('CUSTOMER_BANK_CARD',IN_ROW_DATA);
    SD_TABLE_IU_PKG.CUSTOMER_DETAILS_D_SP('CUSTOMER_DETAILS',IN_ROW_DATA);
    SD_TABLE_IU_PKG.CUSTOMER_SALES_TAX_D_SP('CUSTOMER_SALES_TAX',IN_ROW_DATA);

    DELETE
      FROM CUSTOMER
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_D_SP;

PROCEDURE STORE_DRAFTS_DETAIL_D_SP (
/*******************************************************************************
	STORE_DRAFTS_DETAIL_D_SP

	This procedure is intended to delete records from STORE_DRAFTS_DETAIL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       STORE_DRAFTS_DETAIL%ROWTYPE;
BEGIN

    STORE_DRAFTS_DETAIL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);


    DELETE
      FROM STORE_DRAFTS_DETAIL
         WHERE NVL(STORE_DRAFTS_DETAIL_ID,-1)              = NVL(V_TEMP_ROW.STORE_DRAFTS_DETAIL_ID,NVL(STORE_DRAFTS_DETAIL_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_DETAIL_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_DETAIL_D_SP;

PROCEDURE STORE_DRAFTS_D_SP (
/*******************************************************************************
	STORE_DRAFTS_D_SP

	This procedure is intended to delete records from STORE_DRAFTS table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       STORE_DRAFTS%ROWTYPE;
BEGIN

    STORE_DRAFTS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    SD_TABLE_IU_PKG.STORE_DRAFTS_DETAIL_D_SP('STORE_DRAFTS_DETAIL',IN_ROW_DATA);

    DELETE
      FROM STORE_DRAFTS
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'STORE_DRAFTS_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END STORE_DRAFTS_D_SP;

PROCEDURE UNATTACHED_MNL_DRFT_DTL_D_SP (
/*******************************************************************************
	UNATTACHED_MNL_DRFT_DTL_D_SP

	This procedure is intended to delete records from UNATTACHED_MNL_DRFT_DTL table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       UNATTACHED_MNL_DRFT_DTL%ROWTYPE;
BEGIN

    UNATHED_MNL_D_DTL_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);


    DELETE
      FROM UNATTACHED_MNL_DRFT_DTL
         WHERE NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(CHECK_SERIAL_NUMBER,'XXX')              = NVL(V_TEMP_ROW.CHECK_SERIAL_NUMBER,NVL(CHECK_SERIAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'UNATTACHED_MNL_DRFT_DTL_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END UNATTACHED_MNL_DRFT_DTL_D_SP;

PROCEDURE CUSTOMER_FORM_OF_PAY_D_SP (
/*******************************************************************************
	CUSTOMER_FORM_OF_PAY_D_SP

	This procedure is intended to delete records from CUSTOMER_FORM_OF_PAY table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_FORM_OF_PAY%ROWTYPE;
BEGIN

    CUSTOMER_FOP_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);


    DELETE
      FROM CUSTOMER_FORM_OF_PAY
         WHERE NVL(CUSTOMER_FORM_OF_PAY_ID,-1)             = NVL(V_TEMP_ROW.CUSTOMER_FORM_OF_PAY_ID,NVL(CUSTOMER_FORM_OF_PAY_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SUB_SEGMENT_CODE,'XXX')                 = NVL(V_TEMP_ROW.SUB_SEGMENT_CODE,NVL(SUB_SEGMENT_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_FORM_OF_PAY_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_FORM_OF_PAY_D_SP;

PROCEDURE CUSTOMER_BANK_CARD_D_SP (
/*******************************************************************************
	CUSTOMER_BANK_CARD_D_SP

	This procedure is intended to delete records from CUSTOMER_BANK_CARD table

Created : 05/22/2014 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       CUSTOMER_BANK_CARD%ROWTYPE;
BEGIN

    CUSTOMER_BANK_CARD_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);


    DELETE
      FROM CUSTOMER_BANK_CARD
         WHERE NVL(CUSTOMER_BANK_CARD_ID,-1)               = NVL(V_TEMP_ROW.CUSTOMER_BANK_CARD_ID,NVL(CUSTOMER_BANK_CARD_ID,-1))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(TRANSACTION_DATE,TRUNC(SYSDATE))        = NVL(V_TEMP_ROW.TRANSACTION_DATE,NVL(TRANSACTION_DATE,TRUNC(SYSDATE)))
           AND NVL(TERMINAL_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.TERMINAL_NUMBER,NVL(TERMINAL_NUMBER,'XXX'))
           AND NVL(TRANSACTION_NUMBER,'XXX')               = NVL(V_TEMP_ROW.TRANSACTION_NUMBER,NVL(TRANSACTION_NUMBER,'XXX'))
           AND NVL(SEGMENT_CODE,'XXX')                     = NVL(V_TEMP_ROW.SEGMENT_CODE,NVL(SEGMENT_CODE,'XXX'))
           AND NVL(SUB_SEGMENT_CODE,'XXX')                 = NVL(V_TEMP_ROW.SUB_SEGMENT_CODE,NVL(SUB_SEGMENT_CODE,'XXX'));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CUSTOMER_BANK_CARD_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END CUSTOMER_BANK_CARD_D_SP;

END SD_TABLE_IU_PKG;