CREATE OR REPLACE 
PACKAGE BODY          SD_RECONCILE_DIFF_REPORT_PKG
/**************************************************************** 
The package is used to compare the reconcile the storedrafts data.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed : 
*****************************************************************/
AS

C_CHAR                        CONSTANT VARCHAR2(3)    := 'XXX';
C_SCHEMA                      CONSTANT VARCHAR2(10)   := 'STORDRFT';
C_SEPARATOR                   CONSTANT VARCHAR2(1)    := ',';
C_FILE_HEADER                 CONSTANT VARCHAR2(1000) :='************************************STOREDRAFT RECONCILE REPORT************************************';
C_FILE_RECONCILE_LEGACY       CONSTANT VARCHAR2(1000) :='********************************MISMATCHED MAINFRAME AND POS DATA*************************';
C_FILE_LEGACY_ORPHAN_HEADER   CONSTANT VARCHAR2(1000) :='*************************************MAINFRAME DATA MISSING IN POS*****************************************';
C_POS_EXTRA_HEADER            CONSTANT VARCHAR2(1000) :='*****************************************POS EXTRA DATA*********************************************';
C_FILE_SUMMARY_HEADER         CONSTANT VARCHAR2(1000) :='******************************************SUMMARY REPORT*******************************************';   
C_MISMATCH_COMMENTS           CONSTANT VARCHAR2(1000) :='MISMATCHED MAINFRAME AND POS DATA';
C_MISSING_COMMENTS            CONSTANT VARCHAR2(1000) :='MAINFRAME DATA MISSING IN POS';
C_MISMATCH_IND                CONSTANT VARCHAR2(3)    :='***';  
G_UNMATCHED_COUNT                   NUMBER :=0;
G_ORPHAN_COUNT                      NUMBER :=0;
G_DB_DIRECTORY                      VARCHAR2(100);
G_HEADER                            VARCHAR2(32767);
G_REC1                              CLOB;
G_REC2                              CLOB;
G_REPORT                            CLOB; 
G_SUMMARY                           CLOB;
G_MISMATCH_COLUMN_NAME              VARCHAR2(4000);
PROCEDURE RESET_GLOBAL_VARIABLES_SP
/**************************************************************** 
This Procedure is used reset the global variables.

created : 12/22/2016 CCN Project
changed : 
*****************************************************************/
IS
BEGIN
    G_UNMATCHED_COUNT      :=0;
    G_ORPHAN_COUNT         :=0;
    G_DB_DIRECTORY         :='';
    G_HEADER               :='';
    G_REC1                 :='';
    G_REC2                 :='';
    G_REPORT               :=''; 
    G_SUMMARY              :='';
    G_MISMATCH_COLUMN_NAME :='';
END RESET_GLOBAL_VARIABLES_SP;

PROCEDURE UPDATE_COMMENTS_SP(
/**************************************************************** 
This Procedure is used compare the legacy Store drafts load and 
POSXML Store drafts load and creats a Difference file.

created : 12/21/2016 CCN Project
changed : 
*****************************************************************/
    IN_TABLE_NAME IN VARCHAR2, 
    IN_ROWID      IN VARCHAR2, 
    IN_COMMENTS   IN VARCHAR2,
    IN_LOAD_DATE  IN DATE)
IS
    V_UPD_QUERY VARCHAR2(32767);
BEGIN
   V_UPD_QUERY := 'UPDATE '||IN_TABLE_NAME||' SET COMMENTS = '''||IN_COMMENTS||''' WHERE ROWID = NVL('''||IN_ROWID||''',ROWID) 
                   AND TRUNC(LOAD_DATE) = TO_DATE('''||TO_CHAR(IN_LOAD_DATE,'DD-MON-YYYY')||''',''DD-MON-YYYY'')';
EXECUTE IMMEDIATE V_UPD_QUERY;

END UPDATE_COMMENTS_SP;

FUNCTION GET_LOADED_TABLE_COUNT(
/**************************************************************** 
The function is used to return the Table record count for a given load date. 

created : 12/21/2016 MXK766/NXK927
changed : 
*****************************************************************/
    IN_TABLE_NAME IN VARCHAR2,
    IN_LOAD_DATE  IN DATE) RETURN NUMBER
IS
    OUT_COUNT NUMBER := 0;
BEGIN
    EXECUTE IMMEDIATE 'SELECT COUNT(*)' || '  FROM ' || IN_TABLE_NAME || ' WHERE LOAD_DATE = :val'
    INTO OUT_COUNT
    USING TO_CHAR(IN_LOAD_DATE, 'DD-MON-YYYY');
    RETURN OUT_COUNT;
EXCEPTION
    WHEN OTHERS THEN
        RETURN OUT_COUNT;
END GET_LOADED_TABLE_COUNT;

FUNCTION RETURN_SUMMARY_STRING(
/**************************************************************** 
The function is used to return the summary data for the given tablename and date.

created : 12/21/2016 MXK766/NXK927
changed : 
*****************************************************************/
    IN_TABLE_NAME      IN VARCHAR2, 
    IN_DATE            IN DATE,
    IN_UNMATCHED_COUNT IN NUMBER,
    IN_ORPHAN_COUNT    IN NUMBER) RETURN VARCHAR2
IS
  V_MATCH_COUNT   NUMBER;
  V_TOTAL_COUNT   NUMBER;
  V_UNMTCHD_COUNT NUMBER := IN_UNMATCHED_COUNT;
BEGIN
    V_TOTAL_COUNT := GET_LOADED_TABLE_COUNT(IN_TABLE_NAME, IN_DATE);
    V_MATCH_COUNT := V_TOTAL_COUNT - (IN_UNMATCHED_COUNT + IN_ORPHAN_COUNT);
    IF V_MATCH_COUNT < 0 THEN
       V_MATCH_COUNT := 0;
    END IF;
    IF V_UNMTCHD_COUNT > V_TOTAL_COUNT THEN
       V_UNMTCHD_COUNT := V_TOTAL_COUNT;
    END IF;
    RETURN
    'Load Date,Processed Records,Matched Records Count,Unmatched Records Count,Missed Records Count'||CHR(10)||
    '"'||TO_CHAR(IN_DATE,'MM-DD-YYYY')||'"'|| CHR(9) ||C_SEPARATOR||'"'||GET_LOADED_TABLE_COUNT(IN_TABLE_NAME, IN_DATE)||'"'|| CHR(9) ||C_SEPARATOR
    ||'"'||V_MATCH_COUNT ||'"'|| CHR(9) ||C_SEPARATOR
    ||'"'||IN_UNMATCHED_COUNT||'"'|| CHR(9) ||C_SEPARATOR
    ||'"'||(GET_LOADED_TABLE_COUNT(IN_TABLE_NAME, IN_DATE) - V_MATCH_COUNT - V_UNMTCHD_COUNT) ||'"'|| CHR(9);
    
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END RETURN_SUMMARY_STRING;

PROCEDURE SD_MF_FF_DATA_LOAD_SP(
/**************************************************************** 
This Procedure is used to build the data required for the
reconciliation of data for the STOREDRAFTS feed.

created : 12/16/2016 MXK766/NXK927 CCN PROJECT....
changed : 
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
BEGIN
    LOAD_ISSUE_CHANGE_DATA_SP(IN_DATE);

    LOAD_INSR_LNITEM_RCNCL_DATA_SP(IN_DATE);

    LOAD_DISBRSMT_LNITEM_DATA_SP(IN_DATE);

    LOAD_CUSTOMER_DATA_SP(IN_DATE);

    LOAD_CUSTOMER_DTLS_DATA_SP(IN_DATE);

    LOAD_CSTMR_LINE_ITEM_DATA_SP(IN_DATE);

    LOAD_CSTMR_SALES_TAX_DATA_SP(IN_DATE);

    LOAD_CSTMR_FORM_OF_PAY_SP(IN_DATE);

    LOAD_CSTMR_BANK_CARD_SP(IN_DATE);

    LOAD_BANK_PAID_DATA_SP(IN_DATE);
EXCEPTION
    WHEN OTHERS THEN
    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                               'SD_POS_DATA_LOAD_SP',
                               SQLERRM||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                               '000000',
                               '0000000000'
                               );
END SD_MF_FF_DATA_LOAD_SP;

PROCEDURE GEN_DELTA_FILES_SP(
/*********************************************************************** 
This Procedure is Wrapper procedure, which is used to generate
all difference files in server.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed :
************************************************************************/
IN_LOADDATE IN DATE)
IS
    V_ERROR  VARCHAR2(100);
BEGIN

    LOAD_POS_CCN_ACCUMS(IN_LOADDATE);
    
    LOAD_POS_CSTMR_FORM_OF_PAY(IN_LOADDATE);
    
    -- Call STORE_DRAFTS_DIFF_sp procedure
    V_ERROR := 'DIff Tables between POSXML_ISSUE_CHG_DATA_TMP and FF_ISSUE_CHANGE_DATA_TMP';
    STORE_DRAFTS_DIFF_SP(IN_LOADDATE);

    -- Call STORE_DRAFT_INSTLR_DIFF_sp procedure
    V_ERROR := 'DIff Tables between POSXML_INSTLR_LN_ITEM_DATA_TMP and FF_INSTLR_LN_ITEM_DATA_TMP';
    STORE_DRAFT_INSTLR_DIFF_SP(IN_LOADDATE);

    -- Call STORE_DRAFT_DISBRSMT_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_DISBRSMT_LINE_ITEM_TMP and FF_DISBRSMT_LINE_ITEM_DATA_TMP';
    STORE_DRAFT_DISBRSMT_DIFF_SP(IN_LOADDATE);

    -- Call CUSTOMER_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_CSTMR_TMP and FF_CUSTOMER_TMP';
    CUSTOMER_DIFF_SP(IN_LOADDATE);

    -- Call CSTMR_DETAILS_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_CSTMR_DTLS_TMP and FF_CUSTOMER_DETAILS_TMP';
    CSTMR_DETAILS_DIFF_SP(IN_LOADDATE);

    -- Call CSTMR_LINE_ITEM_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_CUST_LINE_ITEM_DATA_TMP and CUSTOMER_LINE_ITEM_DATA';
    CSTMR_LINE_ITEM_DIFF_SP(IN_LOADDATE);

    -- Call CSTMR_SALES_TAX_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_CSTMR_SLS_TAX_TMP and FF_CSTMR_SALES_TAX_TMP';
    CSTMR_SALES_TAX_DIFF_SP(IN_LOADDATE);

    -- Call CSTMR_FORM_OF_PAY_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_CSTMR_FRM_OF_PAY_TMP and FF_CSTMR_FORM_OF_PAY_TMP';
    CSTMR_FORM_OF_PAY_DIFF_SP(IN_LOADDATE);

    -- Call CSTMR_BANK_CARD_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_CSTMR_BNK_CRD_TMP and FF_CSTMR_BANK_CARD_TMP';
    CSTMR_BANK_CARD_DIFF_SP(IN_LOADDATE);

    -- Call BANK_PAID_DATA_DIFF_sp procedure 
    V_ERROR := 'DIff Tables between POSXML_BNK_PAID_DATA_TMP and FF_BANK_PAID_DATA';
    BANK_PAID_DATA_DIFF_SP(IN_LOADDATE);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                   ,'GEN_DELTA_FILES_sp'||V_ERROR
                                   ,SQLERRM||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                   ,'000000'
                                   ,'0000000000');
END GEN_DELTA_FILES_SP;

PROCEDURE LOAD_ISSUE_CHANGE_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD ISSUE_CHANGE_DATA

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
CURSOR CUR IS
    SELECT TRANSACTION_SOURCE
           ,TRANSACTION_TYPE
           ,COST_CENTER_CODE
           ,CHECK_SERIAL_NUMBER
           ,DRAFT_NUMBER
           ,PROCESS_DATE
           ,FILLER
           ,TRANSACTION_SEGMENT_TYPE
           ,NET_AMOUNT_SIGN
           ,NET_AMOUNT
           ,GROSS_AMOUNT_SIGN
           ,GROSS_AMOUNT
           ,RETAINAGE_AMOUNT_SIGN
           ,RETAINAGE_AMOUNT
           ,ISSUE_DATE
           ,TRANSACTION_DATE
           ,TERMINAL_NUMBER
           ,TRANSACTION_NUMBER
           ,CUSTOMER_ACCOUNT_NUMBER
           ,CUSTOMER_JOB_NUMBER
           ,POS_TRANSACTION_CODE
           ,PAYEE_NAME
           ,ADDRESS_LINE_1
           ,ADDRESS_LINE_2
           ,CITY
           ,STATE_CODE
           ,ZIP_CODE
           ,PHONE_NUMBER
           ,TRANSACTION_TIME
           ,EMPLOYEE_NUMBER
           ,BOOK_DATE
           ,CYCLE_RUN_NUMBER
           ,REASON_CODE
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_ISSUE_CHANGE_DATA;

BEGIN    
    DELETE FROM ISSUE_CHANGE_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO ISSUE_CHANGE_DATA VALUES REC;
    END LOOP;
    COMMIT;    
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);    
END LOAD_ISSUE_CHANGE_DATA_SP;

PROCEDURE LOAD_INSR_LNITEM_RCNCL_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD INSTLR_LN_ITEM_DATA

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT TRANSACTION_SOURCE
           ,TRANSACTION_TYPE
           ,COST_CENTER_CODE
           ,CHECK_SERIAL_NUMBER
           ,PROCESS_DATE
           ,FILLER
           ,TRANSACTION_SEGMENT_TYPE
           ,ITEM_EXT_AMOUNT_SIGN
           ,ITEM_EXT_AMOUNT
           ,ORGNL_TERMINAL_NUMBER
           ,ORGNL_TRANSACTION_NUMBER
           ,ITEM_QUANTITY_SIGN
           ,ITEM_QUANTITY
           ,ITEM_PRICE_SIGN
           ,ITEM_PRICE
           ,GL_PRIME_ACCOUNT_NUMBER
           ,GL_SUB_ACCOUNT_NUMBER
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_INSTALLER_LINE_ITEM_DATA;
BEGIN    
    DELETE FROM INSTLR_LN_ITEM_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO INSTLR_LN_ITEM_DATA VALUES REC;
    END LOOP;
    COMMIT;    
EXCEPTION
WHEN OTHERS THEN

    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
    
END LOAD_INSR_LNITEM_RCNCL_DATA_SP;

PROCEDURE LOAD_DISBRSMT_LNITEM_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD DISBRSMT_LINE_ITEM_DATA

created : 12/21/2016 nxk927
changed : 
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT TRANSACTION_SOURCE
           ,TRANSACTION_TYPE
           ,COST_CENTER_CODE
           ,CHECK_SERIAL_NUMBER
           ,PROCESS_DATE
           ,FILLER
           ,TRANSACTION_SEGMENT_TYPE
           ,ITEM_EXT_AMOUNT_SIGN
           ,ITEM_EXT_AMOUNT
           ,GL_PRIME_ACCOUNT_NUMBER
           ,GL_SUB_ACCOUNT_NUMBER
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_DISBURSMENT_LINE_ITEM_DATA;
BEGIN
    DELETE FROM DISBRSMT_LINE_ITEM_DATA WHERE LOAD_DATE =IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO DISBRSMT_LINE_ITEM_DATA VALUES REC;
    END LOOP;
    COMMIT;    
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);    
END LOAD_DISBRSMT_LNITEM_DATA_SP;

PROCEDURE LOAD_CUSTOMER_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD CUSTOMER_DATA

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT COST_CENTER_CODE
           ,TERMINAL_NUMBER
           ,TRANSACTION_NUMBER
           ,SORT_FORCE
           ,SEGMENT_CODE
           ,SUB_SEGMENT_CODE
           ,FILLER
           ,TRANSACTION_DATE
           ,CUSTOMER_ACCOUNT_NUMBER
           ,CUSTOMER_JOB_NUMBER
           ,POS_TRANSACTION_NUMBER_BATCH
           ,POS_TRANSACTION_TIME
           ,CYCLE_RUN_NUMBER
           ,EMPLOYEE_NUMBER
           ,POS_MODE_INDICATOR
           ,BUSINESS_TYPE_CODE
           ,SLS_TERRITORY_NUMBER
           ,SLS_TERRITORY_NUMBER_NO_CORR
           ,TERRITORY_SPLIT_INDICATOR
           ,POS_TRANSACTION_CODE
           ,POS_TRANSACTION_DATE
           ,POS_TERMINAL_NUMBER
           ,POS_TRANSACTION_NUMBER
           ,DATA_INDICATOR
           ,PURCHASE_ORDER_NUMBER
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_CUSTOMER;
BEGIN
    DELETE FROM CUSTOMER_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO CUSTOMER_DATA VALUES REC;
    END LOOP;
    COMMIT;
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_CUSTOMER_DATA_SP;


PROCEDURE LOAD_CUSTOMER_DTLS_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD DLY_CUSTOMER_DETAILS

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT COST_CENTER_CODE
           ,TERMINAL_NUMBER
           ,TRANSACTION_NUMBER
           ,SALES_NUMBER
           ,ITEM_QUANTITY
           ,ITEM_PRICE
           ,ITEM_EXTERNAL_AMOUNT
           ,GL_PRIME_ACCOUNT
           ,GL_SUB_ACCOUNT
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_CUSTOMER_DETAILS;

BEGIN
    DELETE FROM CUSTOMER_DETAILS_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO CUSTOMER_DETAILS_DATA VALUES REC;
    END LOOP;
    COMMIT;   
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_CUSTOMER_DTLS_DATA_SP;

PROCEDURE LOAD_CSTMR_LINE_ITEM_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD CUSTOMER_LINE_ITEM_DATA

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT TRANSACTION_SOURCE
           ,TRANSACTION_TYPE
           ,COST_CENTER_CODE
           ,CHECK_SERIAL_NUMBER
           ,PROCESS_DATE
           ,FILLER
           ,TRANSACTION_SEGMENT_TYPE
           ,ITEM_EXT_AMOUNT_SIGN
           ,ITEM_EXT_AMOUNT
           ,ORGNL_CUSTOMER_ACCOUNT_NUMBER
           ,ORGNL_JOB_NUMBER
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_CUSTOMER_LINE_ITEM_DATA;
BEGIN
    DELETE FROM CUSTOMER_LINE_ITEM_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO CUSTOMER_LINE_ITEM_DATA VALUES REC;
    END LOOP;
    COMMIT;
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_CSTMR_LINE_ITEM_DATA_SP;

PROCEDURE LOAD_CSTMR_SALES_TAX_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD CSTMR_SALES_TAX

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT COST_CENTER_CODE
           ,TERMINAL_NUMBER
           ,TRANSACTION_NUMBER
           ,SORT_FORCE
           ,SEGMENT_CODE
           ,SUB_SEGMENT_CODE
           ,FILLER
           ,SALES_TAX_CORR_INDICATOR
           ,SALES_TAX_COLL_AMOUNT_SIGN
           ,SALES_TAX_COLL_AMOUNT
           ,SALES_TAX_INDICATOR
           ,SALES_TAX_RATE_SIGN
           ,SALES_TAX_RATE
           ,SALES_TAX_CODE
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_CSTMR_SALES_TAX;

BEGIN
    DELETE FROM CSTMR_SALES_TAX_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO CSTMR_SALES_TAX_DATA VALUES REC;
    END LOOP;
    COMMIT;   
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_CSTMR_SALES_TAX_DATA_SP;

PROCEDURE LOAD_CSTMR_FORM_OF_PAY_SP(
/**************************************************************** 
This Procedure is used to LOAD CSTMR_FORM_OF_PAY

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT COST_CENTER_CODE
           ,TERMINAL_NUMBER
           ,TRANSACTION_NUMBER
           ,SORT_FORCE
           ,SEGMENT_CODE
           ,SUB_SEGMENT_CODE
           ,FILLER
           ,PAY_DISC_CODE
           ,TRANSACTION_TOTAL_AMOUNT_SIGN
           ,TRANSACTION_TOTAL_AMOUNT
           ,POS_LINE_CNT
           ,PAY_AMOUNT_SIGN
           ,PAY_AMOUNT
           ,POS_DISC_SIGN
           ,POS_DISC
           ,SALES_DISC_AMOUNT_SIGN
           ,SALES_DISC_AMOUNT
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_CSTMR_FORM_OF_PAY;

BEGIN
    DELETE FROM CSTMR_FORM_OF_PAY_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO CSTMR_FORM_OF_PAY_DATA VALUES REC;
    END LOOP;
    COMMIT;
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_CSTMR_FORM_OF_PAY_SP;

PROCEDURE LOAD_CSTMR_BANK_CARD_SP(
/**************************************************************** 
This Procedure is used to LOAD CSTMR_BANK_CARD

created : 12/21/2016 nxk927
changed :
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT COST_CENTER_CODE
           ,TERMINAL_NUMBER
           ,TRANSACTION_NUMBER
           ,SORT_FORCE
           ,SEGMENT_CODE
           ,SUB_SEGMENT_CODE
           ,FILLER
           ,BANK_CARD_ACCOUNT_NUMBER
           ,BANK_AUTH
           ,BANK_AMOUNT_SIGN
           ,BANK_AMOUNT
           ,BANK_TYPE
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_CSTMR_BANK_CARD;

BEGIN
    DELETE FROM CSTMR_BANK_CARD_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO CSTMR_BANK_CARD_DATA VALUES REC;
    END LOOP;
    COMMIT;
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_CSTMR_BANK_CARD_SP;

PROCEDURE LOAD_BANK_PAID_DATA_SP(
/**************************************************************** 
This Procedure is used to LOAD BANK_PAID_DATA
        
created : 12/21/2016 nxk927
changed :  
*****************************************************************/
    IN_DATE IN DATE)
IS
    V_ERROR VARCHAR2(4000);
    CURSOR CUR IS
    SELECT TRANSACTION_SOURCE
           ,TRANSACTION_TYPE
           ,COST_CENTER_CODE
           ,CHECK_SERIAL_NUMBER
           ,PROCESS_DATE
           ,FILLER
           ,TRANSACTION_SEGMENT_TYPE
           ,PAID_DATE
           ,STOP_PAY_DATE
           ,STOP_PAY_REMOVE_DATE
           ,VOID_DATE
           ,BANK_PAID_AMOUNT_SIGN
           ,BANK_PAID_AMOUNT
           ,BANK_NUMBER
           ,BANK_ACCOUNT_NUMBER
           ,CPCS_NUMBER
           ,FILLER1
           ,PAYEE_INFO
           ,ADDITIONAL_INFO
           ,FS_ACCOUNT_NUMBER1
           ,FS_AMOUNT_SIGN1
           ,FS_AMOUNT1
           ,FS_ACCOUNT_NUMBER2
           ,FS_AMOUNT_SIGN2
           ,FS_AMOUNT2
           ,FS_ACCOUNT_NUMBER3
           ,FS_AMOUNT_SIGN3
           ,FS_AMOUNT3
           ,'MAINFRAME' DATA_SOURCE
           ,IN_DATE LOAD_DATE
           ,NULL COMMENTS
      FROM DLY_BANK_PAID_DATA;

BEGIN
    DELETE FROM BANK_PAID_DATA WHERE LOAD_DATE = IN_DATE;
    FOR REC IN CUR LOOP
        INSERT INTO BANK_PAID_DATA VALUES REC;
    END LOOP;
    COMMIT;
EXCEPTION
WHEN OTHERS THEN
    V_ERROR := SQLCODE||'-'||SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    RAISE_APPLICATION_ERROR(-20001,V_ERROR);
END LOAD_BANK_PAID_DATA_SP;

PROCEDURE CSTMR_LINE_ITEM_DIFF_SP(
/*********************************************************************** 
This Procedure is used compare the legacy customer Line details load 
and the POSXML customer Line details load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed :
************************************************************************/
    IN_DATE IN DATE)
IS
    CURSOR CUR IS
        SELECT 
           FF.ROWID AS TGT_ROWID
          ,CAST(FF.COST_CENTER_CODE AS VARCHAR2(100)) COST_CENTER_CODE1
          ,FF.CHECK_SERIAL_NUMBER AS CHECK_SERIAL_NUMBER1
          ,FF.PROCESS_DATE AS PROCESS_DATE1
          ,CAST(FF.ITEM_EXT_AMOUNT_SIGN  AS VARCHAR2(100)) ITEM_EXT_AMOUNT_SIGN1
          ,CAST(FF.ITEM_EXT_AMOUNT  AS VARCHAR2(100)) ITEM_EXT_AMOUNT1
          ,CAST(FF.ORGNL_CUSTOMER_ACCOUNT_NUMBER  AS VARCHAR2(100)) ORGNL_CUSTOMER_ACCOUNT_NUMBER1
          ,CAST(FF.ORGNL_JOB_NUMBER  AS VARCHAR2(100)) ORGNL_JOB_NUMBER1
          ,CAST(POS.COST_CENTER_CODE  AS VARCHAR2(100)) COST_CENTER_CODE2
          ,POS.CHECK_SERIAL_NUMBER AS CHECK_SERIAL_NUMBER2
          ,POS.PROCESS_DATE AS PROCESS_DATE2
          ,CAST(POS.ITEM_EXT_AMOUNT_SIGN  AS VARCHAR2(100)) ITEM_EXT_AMOUNT_SIGN2
          ,CAST(POS.ITEM_EXT_AMOUNT  AS VARCHAR2(100)) ITEM_EXT_AMOUNT2
          ,CAST(LPAD(POS.ORGNL_CUSTOMER_ACCOUNT_NUMBER,9,'0')  AS VARCHAR2(100)) ORGNL_CUSTOMER_ACCOUNT_NUMBER2 --Added by mxk766
          ,CAST(POS.ORGNL_JOB_NUMBER  AS VARCHAR2(100)) ORGNL_JOB_NUMBER2
        FROM (SELECT * FROM CUSTOMER_LINE_ITEM_DATA WHERE LOAD_DATE = IN_DATE) FF
        LEFT OUTER JOIN 
            (
            SELECT 
                'O' TRANSACTION_SOURCE,
                'O' TRANSACTION_TYPE,
                CH.STORE_NO COST_CENTER_CODE,
                LPAD(CDL.DRAFT_NBR ,10,'0') AS CHECK_SERIAL_NUMBER,
                '1'||TO_CHAR(TO_DATE(IN_DATE), 'yymmdd') AS PROCESS_DATE,
                NULL FILLER,
                'O' TRANSACTION_SEGMENT_TYPE,
                --NULL ITEM_EXT_AMOUNT_SIGN,
                (CASE WHEN CDL.DRAFT_AMT < 0 THEN '-' ELSE NULL END) ITEM_EXT_AMOUNT_SIGN,
                SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CDL.DRAFT_AMT, '-', ''), '0', '9', '2')ITEM_EXT_AMOUNT,
                (CASE WHEN TRIM(CDL.DRAFT_ACCT_NBR) = '1' THEN '000000000' ELSE TRIM(CDL.DRAFT_ACCT_NBR) END) ORGNL_CUSTOMER_ACCOUNT_NUMBER,
                SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.JOBNBR, '0', '2')ORGNL_JOB_NUMBER
            FROM 
                 PNP_CCN_HEADERS CH,
                 PNP_CCN_DRAFT_LOGS CDL
           WHERE CH.TRAN_GUID = CDL.TRAN_GUID
             AND CH.TRANID IN ('19', '91')
             AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                       FROM PNP_CCN_LOAD_STATUS)
             AND CH.RLS_RUN_CYCLE = CDL.RLS_RUN_CYCLE
            )POS
       ON (
           FF.CHECK_SERIAL_NUMBER = POS.CHECK_SERIAL_NUMBER AND 
           FF.ITEM_EXT_AMOUNT     = POS.ITEM_EXT_AMOUNT
           )
   WHERE FF.CHECK_SERIAL_NUMBER IS NULL OR
       POS.CHECK_SERIAL_NUMBER IS NULL OR 
       NVL(FF.COST_CENTER_CODE,C_CHAR) <> NVL(POS.COST_CENTER_CODE,C_CHAR) OR
       --NVL(FF.PROCESS_DATE,C_CHAR) <> NVL(POS.PROCESS_DATE,C_CHAR) OR
       NVL(FF.ITEM_EXT_AMOUNT_SIGN,C_CHAR) <> NVL(POS.ITEM_EXT_AMOUNT_SIGN,C_CHAR) OR
       NVL(FF.ITEM_EXT_AMOUNT,C_CHAR) <> NVL(POS.ITEM_EXT_AMOUNT,C_CHAR) OR
       NVL(FF.ORGNL_CUSTOMER_ACCOUNT_NUMBER,C_CHAR) <> NVL(POS.ORGNL_CUSTOMER_ACCOUNT_NUMBER,C_CHAR) OR
       NVL(FF.ORGNL_JOB_NUMBER,C_CHAR) <> NVL(POS.ORGNL_JOB_NUMBER,C_CHAR)
       ;

    V_FILE_NAME                   VARCHAR2(100) := 'CSTMR_LINE_ITEM_DIFF';
    
     
BEGIN
    RESET_GLOBAL_VARIABLES_SP; 
    
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CUSTOMER_LINE_ITEM_DATA'); 

    UPDATE_COMMENTS_SP('CUSTOMER_LINE_ITEM_DATA',NULL,NULL,IN_DATE);

    FOR REC IN CUR    LOOP
        IF  REC.COST_CENTER_CODE2 IS NULL OR REC.CHECK_SERIAL_NUMBER2 IS NULL THEN      
            G_REC1 := G_REC1 || 'LEGACY'||C_SEPARATOR
                           ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.CHECK_SERIAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.PROCESS_DATE1||'"'||C_SEPARATOR
                           ||'"'||REC.ITEM_EXT_AMOUNT_SIGN1||'"'||C_SEPARATOR
                           ||'"'||REC.ITEM_EXT_AMOUNT1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.ORGNL_JOB_NUMBER1||'"'|| CHR(10);
           G_ORPHAN_COUNT := G_ORPHAN_COUNT+1;
           UPDATE_COMMENTS_SP('CUSTOMER_LINE_ITEM_DATA',REC.TGT_ROWID, 'DATA MISSING FROM NEW POS',IN_DATE);
       ELSIF (NVL(REC.COST_CENTER_CODE1,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) OR
            -- NVL(REC.PROCESS_DATE1,C_CHAR) <> NVL(REC.PROCESS_DATE2,C_CHAR) OR
             NVL(REC.ITEM_EXT_AMOUNT_SIGN1,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT_SIGN2,C_CHAR) OR
             NVL(REC.ITEM_EXT_AMOUNT1,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT2,C_CHAR) OR
             NVL(REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER1,C_CHAR) <> NVL(REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER2,C_CHAR) OR
             NVL(REC.ORGNL_JOB_NUMBER1,C_CHAR) <> NVL(REC.ORGNL_JOB_NUMBER2,C_CHAR)) THEN
             
             IF NVL(REC.COST_CENTER_CODE1,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) THEN
                REC.COST_CENTER_CODE1 := C_MISMATCH_IND||REC.COST_CENTER_CODE1;
                REC.COST_CENTER_CODE2 := C_MISMATCH_IND||REC.COST_CENTER_CODE2;
                G_MISMATCH_COLUMN_NAME:= 'COST_CENTER_CODE';
             END IF;
             IF NVL(REC.ITEM_EXT_AMOUNT_SIGN1,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT_SIGN2,C_CHAR) THEN
                REC.ITEM_EXT_AMOUNT_SIGN1 := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT_SIGN1;
                REC.ITEM_EXT_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT_SIGN2;
                G_MISMATCH_COLUMN_NAME    := G_MISMATCH_COLUMN_NAME || 'ITEM_EXT_AMOUNT_SIGN';
             END IF;
             IF NVL(REC.ITEM_EXT_AMOUNT1,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT2,C_CHAR) THEN
                REC.ITEM_EXT_AMOUNT1   := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT1;
                REC.ITEM_EXT_AMOUNT2   := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT2;
                G_MISMATCH_COLUMN_NAME := G_MISMATCH_COLUMN_NAME || 'ITEM_EXT_AMOUNT';
             END IF;
             IF NVL(REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER1,C_CHAR) <> NVL(REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER2,C_CHAR) THEN
                REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER1 := C_MISMATCH_IND||REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER1;
                REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER2;
                G_MISMATCH_COLUMN_NAME             := G_MISMATCH_COLUMN_NAME || 'ORGNL_CUSTOMER_ACCOUNT_NUMBER';
             END IF;
             IF NVL(REC.ORGNL_JOB_NUMBER1,C_CHAR) <> NVL(REC.ORGNL_JOB_NUMBER2,C_CHAR) THEN
                REC.ORGNL_JOB_NUMBER1 := C_MISMATCH_IND||REC.ORGNL_JOB_NUMBER1;
                REC.ORGNL_JOB_NUMBER2 := C_MISMATCH_IND||REC.ORGNL_JOB_NUMBER2;
                G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME || 'ORGNL_JOB_NUMBER';
             END IF;
             
             G_REC2 := G_REC2 || 'LEGACY'||C_SEPARATOR
                           ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.CHECK_SERIAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.PROCESS_DATE1||'"'||C_SEPARATOR
                           ||'"'||REC.ITEM_EXT_AMOUNT_SIGN1||'"'||C_SEPARATOR
                           ||'"'||REC.ITEM_EXT_AMOUNT1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.ORGNL_JOB_NUMBER1||'"'||CHR(10)||
                           'POS'||C_SEPARATOR
                           ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.CHECK_SERIAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.PROCESS_DATE2||'"'||C_SEPARATOR
                           ||'"'||REC.ITEM_EXT_AMOUNT_SIGN2||'"'||C_SEPARATOR
                           ||'"'||REC.ITEM_EXT_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.ORGNL_CUSTOMER_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.ORGNL_JOB_NUMBER2||'"'|| CHR(10);
          G_UNMATCHED_COUNT := G_UNMATCHED_COUNT+1;
          UPDATE_COMMENTS_SP('CUSTOMER_LINE_ITEM_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS - COLUMN/S TO CHECK :' || G_MISMATCH_COLUMN_NAME,IN_DATE);
          G_MISMATCH_COLUMN_NAME := NULL;
        END IF;        
    END LOOP;

    G_UNMATCHED_COUNT:= G_UNMATCHED_COUNT;
    G_ORPHAN_COUNT := G_ORPHAN_COUNT;
    G_REPORT := C_FILE_HEADER||CHR(10)||
                C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC2||CHR(10)||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC1||CHR(10)||
                C_FILE_SUMMARY_HEADER||CHR(10)||
                RETURN_SUMMARY_STRING('CUSTOMER_LINE_ITEM_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
    
    
EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                   ,'CSTMR_LINE_ITEM_DIFF_sp'
                                   ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                   ,'000000'
                                   ,'0000000000');
END CSTMR_LINE_ITEM_DIFF_SP;



PROCEDURE CSTMR_SALES_TAX_DIFF_SP(
/*********************************************************************** 
        This Procedure is used compare the legacy customer sales tax load 
        and the POSXML customer sales tax load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed : 
************************************************************************/
IN_DATE IN DATE)
IS
CURSOR CUR IS
  SELECT FF.ROWID TGT_ROWID
        ,FF.COST_CENTER_CODE AS COST_CENTER_CODE1
        ,FF.TERMINAL_NUMBER AS TERMINAL_NUMBER1
        ,FF.TRANSACTION_NUMBER AS TRANSACTION_NUMBER1
        ,FF.SALES_TAX_COLL_AMOUNT AS SALES_TAX_COLL_AMOUNT1
        ,FF.SALES_TAX_RATE AS SALES_TAX_RATE1
        ,CAST(FF.SALES_TAX_CODE AS VARCHAR2(100)) AS SALES_TAX_CODE1
        ,POS.COST_CENTER_CODE AS  COST_CENTER_CODE2
        ,POS.TERMINAL_NUMBER AS  TERMINAL_NUMBER2
        ,POS.TRANSACTION_NUMBER AS  TRANSACTION_NUMBER2
        ,POS.SALES_TAX_COLL_AMOUNT  AS  SALES_TAX_COLL_AMOUNT2
        ,POS.SALES_TAX_RATE  AS  SALES_TAX_RATE2
        ,CAST(POS.SALES_TAX_CODE AS VARCHAR2(100)) AS  SALES_TAX_CODE2
   FROM (SELECT * FROM CSTMR_SALES_TAX_DATA WHERE LOAD_DATE= IN_DATE) FF
   LEFT OUTER JOIN (SELECT CH.STORE_NO COST_CENTER_CODE,
                          CH.TERMNBR TERMINAL_NUMBER,
                          LPAD(CH.TRANNBR,5,'0') TRANSACTION_NUMBER,
                          'O' SORT_FORCE,                      
                          'O' SEGMENT_CODE,                    
                          'O' SUB_SEGMENT_CODE,                
                          NULL FILLER,
                          'O' SALES_TAX_CORR_INDICATOR,        
                          --NULL SALES_TAX_COLL_AMOUNT_SIGN,
                          (CASE WHEN SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE((NVL(CTW.AMT, 0)+NVL(CTW.GSTAMT, 0))*100, '-', ''), '0', '7') < 0 THEN '-' ELSE NULL END) SALES_TAX_COLL_AMOUNT_SIGN,
                          SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE((NVL(CTW.AMT, 0)+NVL(CTW.GSTAMT, 0))*100, '-', ''), '0', '7') SALES_TAX_COLL_AMOUNT,       
                          '1' SALES_TAX_INDICATOR,
                          --NULL SALES_TAX_RATE_SIGN,
                          (CASE WHEN CTW.PCT < 0 THEN '-' ELSE NULL END) SALES_TAX_RATE_SIGN,
                          SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CTW.PCT*1000, '-', ''), '0', '5') SALES_TAX_RATE, 
                          CTW.ID SALES_TAX_CODE                
                     FROM PNP_CCN_HEADERS CH,
                          PNP_CCN_TW_TAX_TTL CTW
                    WHERE CH.TRAN_GUID = CTW.TRAN_GUID
                     -- AND CH.TRANID IN ('10', '11', '19', '22', '31', '41')
                    AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                              FROM PNP_CCN_LOAD_STATUS)
                   AND CH.RLS_RUN_CYCLE = CTW.RLS_RUN_CYCLE) POS
       ON FF.COST_CENTER_CODE = POS.COST_CENTER_CODE
   AND FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER
   AND FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER
   AND FF.SALES_TAX_COLL_AMOUNT = POS.SALES_TAX_COLL_AMOUNT
   AND FF.SALES_TAX_RATE = POS.SALES_TAX_RATE
 WHERE FF.COST_CENTER_CODE  IS NULL OR  
       FF.TERMINAL_NUMBER  IS NULL OR  
       FF.TRANSACTION_NUMBER  IS NULL OR 
       FF.SALES_TAX_COLL_AMOUNT IS NULL OR
       FF.SALES_TAX_RATE IS NULL OR
       POS.COST_CENTER_CODE  IS NULL OR 
       POS.TERMINAL_NUMBER  IS NULL OR 
       POS.TRANSACTION_NUMBER  IS NULL OR 
       POS.SALES_TAX_COLL_AMOUNT IS NULL OR
       POS.SALES_TAX_RATE IS NULL OR
       NVL(FF.SALES_TAX_CODE,'1') <> NVL(POS.SALES_TAX_CODE,'1');

V_FILE_NAME                   VARCHAR2(100) := 'CSTMR_SALES_TAX_DIFF';

BEGIN
    RESET_GLOBAL_VARIABLES_SP;

    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CSTMR_SALES_TAX'); 

    UPDATE_COMMENTS_SP('CSTMR_SALES_TAX_DATA',NULL,NULL,IN_DATE);

    FOR REC IN CUR  LOOP
         IF REC.COST_CENTER_CODE2 IS NULL OR REC.TERMINAL_NUMBER2 IS NULL OR REC.TRANSACTION_NUMBER2 IS NULL THEN
            G_REC1 := G_REC1
                          || 'LEGACY'||C_SEPARATOR
                          ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.TERMINAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.TRANSACTION_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_COLL_AMOUNT1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_RATE1||'"'||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_CODE1||'"'||CHR(10)
                          ;
             G_ORPHAN_COUNT := G_ORPHAN_COUNT + 1;
             UPDATE_COMMENTS_SP('CSTMR_SALES_TAX_DATA',REC.TGT_ROWID, 'DATA MISSING FROM NEW POS',IN_DATE);
         ELSIF NVL(REC.SALES_TAX_CODE1,C_CHAR) <> NVL(REC.SALES_TAX_CODE2,C_CHAR) THEN
            REC.SALES_TAX_CODE1 := C_MISMATCH_IND || REC.SALES_TAX_CODE1;
            REC.SALES_TAX_CODE2 := C_MISMATCH_IND || REC.SALES_TAX_CODE2;
            G_MISMATCH_COLUMN_NAME  := 'SALES_TAX_CODE';
             
            G_REC2 := G_REC2
                          || 'LEGACY'||C_SEPARATOR
                          ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.TERMINAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.TRANSACTION_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_COLL_AMOUNT1||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_RATE1||'"'||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_CODE1||'"'||CHR(10) ||
                          'POS'||C_SEPARATOR
                          ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_COLL_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_RATE2||'"'||C_SEPARATOR
                          ||'"'||REC.SALES_TAX_CODE2||'"'|| CHR(10);
               G_UNMATCHED_COUNT := G_UNMATCHED_COUNT + 1;
               UPDATE_COMMENTS_SP('CSTMR_SALES_TAX_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS - COLUMN/S TO CHECK :' || G_MISMATCH_COLUMN_NAME,IN_DATE);
               G_MISMATCH_COLUMN_NAME := NULL;
          END IF;
    END LOOP;
    G_REPORT := C_FILE_HEADER||CHR(10)||
                C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC2||CHR(10)||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC1||CHR(10)||
                C_FILE_SUMMARY_HEADER||CHR(10)||
                RETURN_SUMMARY_STRING('CSTMR_SALES_TAX_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'CSTMR_SALES_TAX_DIFF_sp'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END CSTMR_SALES_TAX_DIFF_SP;

PROCEDURE LOAD_POS_CCN_ACCUMS(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POS_CCN_LOAD_STATUS" with data extracted from new interface tables
created : 03/02/2017 nxk927 CCN Project....
changed : 
*****************************************************************************/
IN_DATE     IN DATE)
AS

CURSOR POS_SD_CUR IS
    SELECT ACC.TRAN_GUID,
           CH.STORE_NO COST_CENTER_CODE,
           CH.TERMNBR TERMINAL_NUMBER,
           LPAD(CH.TRANNBR,5,'0') TRANSACTION_NUMBER,  --CHANGED BY MXK766
           'O' SORT_FORCE,
           'O' SEGMENT_CODE,
           'O' SUB_SEGMENT_CODE,
           NULL AS FILLER,
           '0' PAY_DISC_CODE,
--           (CASE WHEN 
--                   CH.TRANID in ('10','19', '31') then
--                      DECODE(ACC.ACCUM_ID, '93' ,(CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL)
--                 ELSE
--                   DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8', (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL)
--            END) TRANSACTION_TOTAL_AMOUNT_SIGN,
--           (CASE WHEN 
--                    CH.TRANID in ('10', '19','31') then
--                       DECODE(ACC.ACCUM_ID, '93' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000')  
--                 ELSE
--                    DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000')
--            END) TRANSACTION_TOTAL_AMOUNT,
           --DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8', (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL) TRANSACTION_TOTAL_AMOUNT_SIGN,
           --DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000') TRANSACTION_TOTAL_AMOUNT,
           NULL TRANSACTION_TOTAL_AMOUNT_SIGN,
           CH.TRAN_TOTAL TRANSACTION_TOTAL_AMOUNT,
           '0' POS_LINE_CNT,
           (CASE WHEN ACC.AMT < 0 THEN '-' ELSE NULL END) PAY_AMOUNT_SIGN,
           LPAD(REPLACE(ACC.AMT*100,'-',''),'7',0) PAY_AMOUNT,
           NULL POS_DISC_SIGN,
           '0000000' POS_DISC,
           NULL SALES_DISC_AMOUNT_SIGN,
           '0000000' SALES_DISC_AMOUNT,
           ACC.RLS_RUN_CYCLE,
           ACC.ACCUM_ID,
           CH.TRANID,
           ACC.SEQNBR           
      FROM PNP.CCN_ACCUMS ACC, 
           PNP_CCN_HEADERS CH
     WHERE CH.TRANID IN ('10', '11', '13', '19', '22', '31', '41', '82', '91') 
       AND ACC.TRAN_GUID      = CH.TRAN_GUID
       AND ACC.RLS_RUN_CYCLE  = CH.RLS_RUN_CYCLE
       AND CH.RLS_RUN_CYCLE   = (SELECT MAX(RLS_RUN_CYCLE)
                                   FROM PNP_CCN_LOAD_STATUS)
       AND EXISTS (SELECT 1
                      FROM PNP_CCN_SALES_LINES
                     WHERE SALESNBR = '000009126'
                       AND RLS_RUN_CYCLE = CH.RLS_RUN_CYCLE
                       AND TRAN_GUID =     CH.TRAN_GUID)
      ORDER BY CH.TRAN_GUID, ACC.ACCUM_ID desc;

V_PREV_REC VARCHAR2(35):= 'XXXXXXXXXXX'; 

BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE DLY_POS_CCN_ACCUMS';

   FOR REC IN POS_SD_CUR LOOP
   IF REC.TRANID in ('10','19', '31') THEN
      IF REC.ACCUM_ID = '95' THEN
         REC.TRANSACTION_TOTAL_AMOUNT_SIGN := (CASE WHEN REC.TRANSACTION_TOTAL_AMOUNT < 0 THEN '-' ELSE NULL END);
         REC.TRANSACTION_TOTAL_AMOUNT      := LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(REC.TRANSACTION_TOTAL_AMOUNT, '-', ''), '0', '7', '2'),7,'0');
         V_PREV_REC := REC.TRAN_GUID;
       ELSIF V_PREV_REC <> REC.TRAN_GUID AND REC.ACCUM_ID = '93' THEN
          REC.TRANSACTION_TOTAL_AMOUNT_SIGN := (CASE WHEN REC.TRANSACTION_TOTAL_AMOUNT < 0 THEN '-' ELSE NULL END);
          REC.TRANSACTION_TOTAL_AMOUNT      := LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(REC.TRANSACTION_TOTAL_AMOUNT, '-', ''), '0', '7', '2'),7,'0');
       ELSE
          REC.TRANSACTION_TOTAL_AMOUNT_SIGN := NULL;
          REC.TRANSACTION_TOTAL_AMOUNT      :=  '0000000';
       END IF;
    ELSE
         IF SUBSTR(REC.ACCUM_ID,1,1) = '8' THEN
             REC.TRANSACTION_TOTAL_AMOUNT_SIGN := (CASE WHEN REC.TRANSACTION_TOTAL_AMOUNT < 0 THEN '-' ELSE NULL END);
             REC.TRANSACTION_TOTAL_AMOUNT      := LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(REC.TRANSACTION_TOTAL_AMOUNT, '-', ''), '0', '7', '2'),7,'0');
          ELSE
             REC.TRANSACTION_TOTAL_AMOUNT_SIGN := NULL;
             REC.TRANSACTION_TOTAL_AMOUNT      := '0000000';
          END IF;
    END IF;
            
    INSERT INTO DLY_POS_CCN_ACCUMS VALUES REC;
        
        
   END LOOP;
COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_POS_CCN_ACCUMS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POS_CCN_ACCUMS;

PROCEDURE LOAD_POS_CSTMR_FORM_OF_PAY(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POS_CSTMR_FRM_OF_PAY_TMP" with data extracted from new interface tables
created : 06/02/2016 axk326 CCN Project....
changed : Added padding to the TRANNBR Field
*****************************************************************************/
IN_DATE     IN DATE)
AS

CURSOR POS_SD_CUR IS
    SELECT *
      FROM DLY_POS_CCN_ACCUMS
     WHERE ((TRANID IN ('11', '13','22','41', '82', '91') and SUBSTR(ACCUM_ID,1,1) <> '7')
           OR 
           TRANID IN ('10', '19','31'))-- and ACCUM_ID NOT IN ('72','73','74'))
           --TRANID IN ('10', '19','31') and ACCUM_ID NOT IN ('81','73'))
           --OR  TRANID IN ('19','31') and ACCUM_ID <> '73') --(10,19,31)   ('10', '11', '13', '19', '22', '31', '41', '82', '91')
       AND ACCUM_ID <> '92'
     ORDER BY DECODE(ACCUM_ID,'95', '70', ACCUM_ID);
      /*SELECT ACC.TRAN_GUID,
           CH.STORE_NO COST_CENTER_CODE,
           CH.TERMNBR TERMINAL_NUMBER,
           LPAD(CH.TRANNBR,5,'0') TRANSACTION_NUMBER,  --CHANGED BY MXK766
           'O' SORT_FORCE,
           'O' SEGMENT_CODE,
           'O' SUB_SEGMENT_CODE,
           NULL AS FILLER,
           '0' PAY_DISC_CODE,
           --NULL TRANSACTION_TOTAL_AMOUNT_SIGN,
          --nxk927 03/23/2017
          -- DECODE(ACC.ACCUM_ID, '8c', (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL) TRANSACTION_TOTAL_AMOUNT_SIGN,
          --DECODE(ACC.ACCUM_ID, '8c' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000') TRANSACTION_TOTAL_AMOUNT,
           DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8', (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL) TRANSACTION_TOTAL_AMOUNT_SIGN,
           DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000') TRANSACTION_TOTAL_AMOUNT,
           '0' POS_LINE_CNT,
           --NULL PAY_AMOUNT_SIGN,
           (CASE WHEN ACC.AMT < 0 THEN '-' ELSE NULL END) PAY_AMOUNT_SIGN,
           LPAD(REPLACE(ACC.AMT*100,'-',''),'7',0) PAY_AMOUNT,
           NULL POS_DISC_SIGN,
           '0000000' POS_DISC,
--           (CASE WHEN SUBSTR(ACC.ACCUM_ID,1,1) = '8' THEN
--                    DECODE((SELECT SIGN(ACC.AMT)
--                              FROM PNP.CCN_ACCUMS
--                             WHERE TRAN_GUID = CH.TRAN_GUID
--                               AND ACCUM_ID  = '92'), '-1', '-', NULL)
--                ELSE NULL
--           END) SALES_DISC_AMOUNT_SIGN,
           NULL SALES_DISC_AMOUNT_SIGN,
--           (CASE WHEN SUBSTR(ACC.ACCUM_ID,1,1) = '8' THEN
--                    (SELECT LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(ACC.AMT, '-', ''), '0', '7', '2'),7,'0')
--                      FROM PNP.CCN_ACCUMS
--                     WHERE TRAN_GUID = CH.TRAN_GUID
--                       AND ACCUM_ID  = '92')
--                ELSE '0000000'
--           END) SALES_DISC_AMOUNT,
           '0000000' SALES_DISC_AMOUNT,
           ACC.RLS_RUN_CYCLE,
           ACC.ACCUM_ID
      FROM PNP.CCN_ACCUMS ACC, 
           PNP_CCN_HEADERS CH
     WHERE CH.TRANID IN ('10', '11', '13', '19', '22', '31', '41', '82', '91')
       AND ACC.TRAN_GUID      = CH.TRAN_GUID
       AND ACC.RLS_RUN_CYCLE  = CH.RLS_RUN_CYCLE
       AND CH.RLS_RUN_CYCLE   IN (SELECT RLS_RUN_CYCLE
                                    FROM POS_CCN_LOAD_STATUS
                                   WHERE LOAD_DATE = IN_DATE)
       AND EXISTS (SELECT 1
                      FROM PNP_CCN_SALES_LINES
                     WHERE SALESNBR = '000009126'
                       AND RLS_RUN_CYCLE = CH.RLS_RUN_CYCLE
                       AND TRAN_GUID =     CH.TRAN_GUID)
       AND SUBSTR(ACC.ACCUM_ID,1,1) <> '7'
       AND ACC.ACCUM_ID <> '92';*/

      V_COUNT     NUMBER := 0;
      V_TCOUNT    NUMBER := 0;
      V_TEMP_ROW  POS_CSTMR_FORM_OF_PAY%ROWTYPE;
      V_PREV_REC  VARCHAR2(35):= 'XXXXXXXXXXX'; 
      V_FLAG      VARCHAR2(35):= 'N'; 
      

BEGIN
    
    EXECUTE IMMEDIATE 'TRUNCATE TABLE POS_CSTMR_FORM_OF_PAY';
    V_FLAG := 'N';
FOR REC IN POS_SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.TRANGUID                                := rec.TRAN_GUID;
           --V_TEMP_ROW.CUSTOMER_FORM_OF_PAY_ID                 := rec.SRLNO;
           V_TEMP_ROW.COST_CENTER_CODE                        := rec. COST_CENTER_CODE;
           V_TEMP_ROW.TERMINAL_NUMBER                         := rec.TERMINAL_NUMBER;
           V_TEMP_ROW.TRANSACTION_NUMBER                      := rec.TRANSACTION_NUMBER;
           V_TEMP_ROW.SORT_FORCE                              := rec.SORT_FORCE;
           V_TEMP_ROW.SEGMENT_CODE                            := rec.SEGMENT_CODE;
           V_TEMP_ROW.SUB_SEGMENT_CODE                        := rec.SUB_SEGMENT_CODE;
           V_TEMP_ROW.FILLER                                  := rec.FILLER;
           V_TEMP_ROW.PAY_DISC_CODE                           := rec.PAY_DISC_CODE;
           V_TEMP_ROW.TRANSACTION_TOTAL_AMOUNT_SIGN           := rec.TRANSACTION_TOTAL_AMOUNT_SIGN;
           V_TEMP_ROW.TRANSACTION_TOTAL_AMOUNT                := rec.TRANSACTION_TOTAL_AMOUNT;
           V_TEMP_ROW.POS_LINE_CNT                            := rec.POS_LINE_CNT;
           V_TEMP_ROW.PAY_AMOUNT_SIGN                         := rec.PAY_AMOUNT_SIGN;
           V_TEMP_ROW.PAY_AMOUNT                              := rec.PAY_AMOUNT;
           V_TEMP_ROW.POS_DISC_SIGN                           := rec.POS_DISC_SIGN;
           V_TEMP_ROW.POS_DISC                                := rec.POS_DISC;
           V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN                  := rec.SALES_DISC_AMOUNT_SIGN;
           V_TEMP_ROW.SALES_DISC_AMOUNT                       := rec.SALES_DISC_AMOUNT;
           BEGIN
               SELECT PAY_AMOUNT_SIGN, -- (CASE WHEN AMT < 0 THEN '-' ELSE NULL END),
                      PAY_AMOUNT--LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(AMT, '-', ''), '0', '7', '2'),7,'0')
                 INTO V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN,
                      V_TEMP_ROW.SALES_DISC_AMOUNT
                 FROM DLY_POS_CCN_ACCUMS
                WHERE TRAN_GUID = rec.TRAN_GUID
                  AND ACCUM_ID  = '92';
                  
          EXCEPTION
              WHEN OTHERS THEN
                  V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN :=NULL;
                  V_TEMP_ROW.SALES_DISC_AMOUNT  :=  '0000000';
           END; 
           
           IF REC.TRANID in ('10','19', '31') THEN
              IF REC.ACCUM_ID = '95' THEN
                 V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN;
                 V_TEMP_ROW.SALES_DISC_AMOUNT      := V_TEMP_ROW.SALES_DISC_AMOUNT;
                 V_PREV_REC := REC.TRAN_GUID;
              ELSIF V_PREV_REC <> REC.TRAN_GUID AND REC.ACCUM_ID = '93' THEN
                 V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN;
                 V_TEMP_ROW.SALES_DISC_AMOUNT      := V_TEMP_ROW.SALES_DISC_AMOUNT;
              ELSE
                 V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := NULL;
                 V_TEMP_ROW.SALES_DISC_AMOUNT      := '0000000';
              END IF;
           ELSIF REC.TRANID in ('41') THEN
              IF REC.ACCUM_ID = '94' THEN
                 V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN;
                 V_TEMP_ROW.SALES_DISC_AMOUNT      := V_TEMP_ROW.SALES_DISC_AMOUNT;
              ELSE
                V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := NULL;
                V_TEMP_ROW.SALES_DISC_AMOUNT      := '0000000';   
              END IF;
           ELSE
             IF SUBSTR(REC.ACCUM_ID,1,1) = '8' THEN
                 V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN;
                 V_TEMP_ROW.SALES_DISC_AMOUNT      := V_TEMP_ROW.SALES_DISC_AMOUNT;
             ELSE
                V_TEMP_ROW.SALES_DISC_AMOUNT_SIGN := NULL;
                V_TEMP_ROW.SALES_DISC_AMOUNT      := '0000000';
             END IF;
           END IF;
           IF REC.ACCUM_ID IN ('71','72','73','74','75','76') THEN
              IF NVL(V_TEMP_ROW.PAY_AMOUNT_SIGN,'+') = '+' THEN
                 V_TEMP_ROW.PAY_AMOUNT_SIGN := '-';
              ELSE V_TEMP_ROW.PAY_AMOUNT_SIGN := '+';
              V_FLAG := 'Y';
              END IF;
           END IF;
           V_TEMP_ROW.RUNCYCLE                                := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.LOAD_DATE                               := IN_DATE;
           
           --INSERT INTO POS_CSTMR_FORM_OF_PAY VALUES V_TEMP_ROW;
           IF REC.ACCUM_ID IN ('81','82','83','84','85','86')  THEN
              IF V_FLAG <> 'Y' THEN 
                 INSERT INTO POS_CSTMR_FORM_OF_PAY VALUES V_TEMP_ROW;
              END IF;
           ELSE
              INSERT INTO POS_CSTMR_FORM_OF_PAY VALUES V_TEMP_ROW;
           END IF;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_POS_CSTMR_FORM_OF_PAY',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           'TermNbr: '||NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           'TranNbr: '||NVL(rec.TRANSACTION_NUMBER,''));
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_POS_CSTMR_FORM_OF_PAY',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');

END LOAD_POS_CSTMR_FORM_OF_PAY;

PROCEDURE CSTMR_FORM_OF_PAY_DIFF_SP(
/***********************************************************************
        This Procedure is used compare the legacy customer form of pay load
        and the POSXML customer form of pay load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed : 
************************************************************************/
IN_DATE IN DATE)
IS
CURSOR CUR IS
--    SELECT FF.ROWID TGT_ROWID
--        ,FF.COST_CENTER_CODE COST_CENTER_CODE1
--        ,FF.TERMINAL_NUMBER TERMINAL_NUMBER1
--        ,FF.TRANSACTION_NUMBER TRANSACTION_NUMBER1
--        ,FF.PAY_DISC_CODE PAY_DISC_CODE1
--        ,FF.TRANSACTION_TOTAL_AMOUNT_SIGN TRANSACTION_TOTAL_AMOUNT_SIGN1
--        ,CAST(FF.TRANSACTION_TOTAL_AMOUNT AS VARCHAR2(100)) TRANSACTION_TOTAL_AMOUNT1
--        ,POS.COST_CENTER_CODE COST_CENTER_CODE2
--        ,POS.TERMINAL_NUMBER TERMINAL_NUMBER2
--        ,POS.TRANSACTION_NUMBER TRANSACTION_NUMBER2
--        ,POS.PAY_DISC_CODE PAY_DISC_CODE2
--        ,POS.TRANSACTION_TOTAL_AMOUNT_SIGN TRANSACTION_TOTAL_AMOUNT_SIGN2
--        ,CAST(POS.TRANSACTION_TOTAL_AMOUNT AS VARCHAR2(100)) TRANSACTION_TOTAL_AMOUNT2
--  FROM (
--       SELECT *
--         FROM CSTMR_FORM_OF_PAY_DATA FF
--        WHERE  LOAD_DATE = IN_DATE) FF
--         -- AND TRANSACTION_TOTAL_AMOUNT<>'0000000')FF
--  LEFT OUTER JOIN (SELECT CH.STORE_NO COST_CENTER_CODE,
--                          CH.TERMNBR TERMINAL_NUMBER,
--                          LPAD(CH.TRANNBR,5,'0') TRANSACTION_NUMBER,  --CHANGED BY MXK766
--                          'O' SORT_FORCE,
--                          'O' SEGMENT_CODE,
--                          'O' SUB_SEGMENT_CODE,
--                          NULL AS FILLER,
--                          '0' PAY_DISC_CODE,
--                          --NULL TRANSACTION_TOTAL_AMOUNT_SIGN,
--                          --DECODE(ACC.ACCUM_ID, '8c', (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL) TRANSACTION_TOTAL_AMOUNT_SIGN,
--                          --DECODE(ACC.ACCUM_ID, '8c' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000') TRANSACTION_TOTAL_AMOUNT,
--                          DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8', (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END), NULL) TRANSACTION_TOTAL_AMOUNT_SIGN,
--                          DECODE(SUBSTR(ACC.ACCUM_ID,1,1), '8' ,LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '7', '2'),7,'0'),'0000000') TRANSACTION_TOTAL_AMOUNT,
--                          '0' POS_LINE_CNT,
--                          --NULL PAY_AMOUNT_SIGN,
--                          (CASE WHEN ACC.AMT < 0 THEN '-' ELSE NULL END) PAY_AMOUNT_SIGN,
--                          LPAD(REPLACE(ACC.AMT*100,'-',''),'7',0) PAY_AMOUNT,
--                          NULL POS_DISC_SIGN,
--                          '0000000' POS_DISC,
--                          NULL SALES_DISC_AMOUNT_SIGN,
--                          '0000000' SALES_DISC_AMOUNT
--                     FROM PNP.CCN_ACCUMS ACC, 
--                          PNP_CCN_HEADERS CH
--                    WHERE CH.TRANID IN ('10', '11', '13', '19', '22', '31', '41', '82', '91')
--                      AND ACC.TRAN_GUID      = CH.TRAN_GUID
--                      AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
--                                                FROM PNP_CCN_LOAD_STATUS)
--                      AND ACC.RLS_RUN_CYCLE  = CH.RLS_RUN_CYCLE
--                      AND EXISTS (SELECT 1
--                                    FROM PNP_CCN_SALES_LINES
--                                   WHERE SALESNBR = '000009126'
--                                     AND RLS_RUN_CYCLE = CH.RLS_RUN_CYCLE
--                                     AND TRAN_GUID =     CH.TRAN_GUID)) POS
--   ON FF.COST_CENTER_CODE = POS.COST_CENTER_CODE
--   AND FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER
--   AND FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER
--   AND FF.TRANSACTION_TOTAL_AMOUNT = POS.TRANSACTION_TOTAL_AMOUNT
--   AND FF.PAY_AMOUNT = POS.PAY_AMOUNT
-- WHERE FF.COST_CENTER_CODE  IS NULL OR  
--       FF.TERMINAL_NUMBER  IS NULL OR  
--       FF.TRANSACTION_NUMBER  IS NULL OR 
--       POS.COST_CENTER_CODE  IS NULL OR 
--       POS.TERMINAL_NUMBER  IS NULL OR 
--       POS.TRANSACTION_NUMBER  IS NULL;

    SELECT FF.ROWID TGT_ROWID
        ,FF.COST_CENTER_CODE COST_CENTER_CODE1
        ,FF.TERMINAL_NUMBER TERMINAL_NUMBER1
        ,FF.TRANSACTION_NUMBER TRANSACTION_NUMBER1
        ,FF.PAY_DISC_CODE PAY_DISC_CODE1
        ,FF.TRANSACTION_TOTAL_AMOUNT_SIGN TRANSACTION_TOTAL_AMOUNT_SIGN1
        ,CAST(FF.TRANSACTION_TOTAL_AMOUNT AS VARCHAR2(100)) TRANSACTION_TOTAL_AMOUNT1
        ,POS.COST_CENTER_CODE COST_CENTER_CODE2
        ,POS.TERMINAL_NUMBER TERMINAL_NUMBER2
        ,POS.TRANSACTION_NUMBER TRANSACTION_NUMBER2
        ,POS.PAY_DISC_CODE PAY_DISC_CODE2
        ,POS.TRANSACTION_TOTAL_AMOUNT_SIGN TRANSACTION_TOTAL_AMOUNT_SIGN2
        ,CAST(POS.TRANSACTION_TOTAL_AMOUNT AS VARCHAR2(100)) TRANSACTION_TOTAL_AMOUNT2
  FROM (
       SELECT *
         FROM CSTMR_FORM_OF_PAY_DATA FF
        WHERE  LOAD_DATE = IN_DATE) FF
         -- AND TRANSACTION_TOTAL_AMOUNT<>'0000000')FF
  LEFT OUTER JOIN (SELECT COST_CENTER_CODE,
                          TERMINAL_NUMBER,
                          TRANSACTION_NUMBER,  --CHANGED BY MXK766
                          'O' SORT_FORCE,
                          'O' SEGMENT_CODE,
                          'O' SUB_SEGMENT_CODE,
                          NULL AS FILLER,
                          '0' PAY_DISC_CODE,
                          TRANSACTION_TOTAL_AMOUNT_SIGN,
                          TRANSACTION_TOTAL_AMOUNT,
                          '0' POS_LINE_CNT,
                          PAY_AMOUNT_SIGN,
                          PAY_AMOUNT,
                          POS_DISC_SIGN,
                          POS_DISC,
                          SALES_DISC_AMOUNT_SIGN,
                          SALES_DISC_AMOUNT
                     FROM POS_CSTMR_FORM_OF_PAY) POS
   ON FF.COST_CENTER_CODE = POS.COST_CENTER_CODE
   AND FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER
   AND FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER
   AND TO_NUMBER(FF.TRANSACTION_TOTAL_AMOUNT) = TO_NUMBER(POS.TRANSACTION_TOTAL_AMOUNT)
   AND FF.PAY_AMOUNT = POS.PAY_AMOUNT
 WHERE FF.COST_CENTER_CODE  IS NULL OR  
       FF.TERMINAL_NUMBER  IS NULL OR  
       FF.TRANSACTION_NUMBER  IS NULL OR 
       POS.COST_CENTER_CODE  IS NULL OR 
       POS.TERMINAL_NUMBER  IS NULL OR 
       POS.TRANSACTION_NUMBER  IS NULL;
       
V_FILE_NAME                   VARCHAR2(100) := 'CSTMR_FORM_OF_PAY_DIFF';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CSTMR_FORM_OF_PAY');

    UPDATE_COMMENTS_SP('CSTMR_FORM_OF_PAY_DATA',NULL,NULL,IN_DATE);

    FOR REC IN CUR LOOP
        IF REC.COST_CENTER_CODE2 IS NULL OR REC.TERMINAL_NUMBER2 IS NULL OR REC.TRANSACTION_NUMBER2 IS NULL THEN
            G_REC1 := G_REC1
                           || 'LEGACY'||C_SEPARATOR
                           ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.TERMINAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                           ||'"'||REC.TRANSACTION_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.PAY_DISC_CODE1||'"'||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_TOTAL_AMOUNT_SIGN1||'"'||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_TOTAL_AMOUNT1||'"'|| CHR(10);            -- space issue in one record axk326
              G_ORPHAN_COUNT := G_ORPHAN_COUNT + 1;
              UPDATE_COMMENTS_SP('CSTMR_FORM_OF_PAY_DATA',REC.TGT_ROWID, 'DATA MISSING FROM NEW POS',IN_DATE);
         ELSIF NVL(REC.TRANSACTION_TOTAL_AMOUNT1,C_CHAR) <> NVL(REC.TRANSACTION_TOTAL_AMOUNT2,C_CHAR) THEN
            REC.TRANSACTION_TOTAL_AMOUNT1 := C_MISMATCH_IND||REC.TRANSACTION_TOTAL_AMOUNT1;
            REC.TRANSACTION_TOTAL_AMOUNT2 := C_MISMATCH_IND||REC.TRANSACTION_TOTAL_AMOUNT2;
            G_MISMATCH_COLUMN_NAME        := 'TRANSACTION_TOTAL_AMOUNT';
             
            G_REC2 :=  G_REC2
                           || 'LEGACY'||C_SEPARATOR
                           ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.TERMINAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                           ||'"'||REC.TRANSACTION_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.PAY_DISC_CODE1||'"'||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_TOTAL_AMOUNT_SIGN1||'"'||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_TOTAL_AMOUNT1||'"'|| CHR(10) ||
                           'POS'||C_SEPARATOR
                           ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                           ||'"'||REC.PAY_DISC_CODE2||'"'||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_TOTAL_AMOUNT_SIGN2||'"'||C_SEPARATOR
                           ||'"'||REC.TRANSACTION_TOTAL_AMOUNT2||'"'|| CHR(10);
              G_UNMATCHED_COUNT := G_UNMATCHED_COUNT + 1;
              UPDATE_COMMENTS_SP('CSTMR_FORM_OF_PAY_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS -COLUMN/S TO CHECK : '||G_MISMATCH_COLUMN_NAME,IN_DATE);
              G_MISMATCH_COLUMN_NAME := NULL;
      END IF;
    END LOOP;
    G_REPORT := C_FILE_HEADER||CHR(10)||
                C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC2||CHR(10)||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC1||CHR(10)||
                C_FILE_SUMMARY_HEADER||CHR(10)||
                RETURN_SUMMARY_STRING('CSTMR_FORM_OF_PAY_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
    
EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                   ,'CSTMR_FORM_OF_PAY_DIFF_sp'
                                   ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                   ,'000000'
                                   ,'0000000000');
END CSTMR_FORM_OF_PAY_DIFF_SP;


PROCEDURE CSTMR_BANK_CARD_DIFF_SP(
/*********************************************************************** 
        This Procedure is used compare the legacy customer bank paid data load 
        and the POSXML customer bank paid data load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed :
************************************************************************/
IN_DATE IN DATE)
IS
CURSOR CUR IS
  SELECT FF.ROWID TGT_ROWID
        ,FF.COST_CENTER_CODE COST_CENTER_CODE1
        ,FF.TERMINAL_NUMBER TERMINAL_NUMBER1
        ,FF.TRANSACTION_NUMBER TRANSACTION_NUMBER1
        ,FF.BANK_CARD_ACCOUNT_NUMBER BANK_CARD_ACCOUNT_NUMBER1
        ,FF.BANK_AMOUNT_SIGN BANK_AMOUNT_SIGN1
        ,CAST(FF.BANK_AMOUNT AS VARCHAR2(100))BANK_AMOUNT1
        ,POS.COST_CENTER_CODE COST_CENTER_CODE2
        ,POS.TERMINAL_NUMBER TERMINAL_NUMBER2
        ,POS.TRANSACTION_NUMBER TRANSACTION_NUMBER2
        ,POS.BANK_CARD_ACCOUNT_NUMBER BANK_CARD_ACCOUNT_NUMBER2
        ,POS.BANK_AMOUNT_SIGN BANK_AMOUNT_SIGN2
        ,CAST(POS.BANK_AMOUNT AS VARCHAR2(100)) BANK_AMOUNT2
   FROM (SELECT * FROM CSTMR_BANK_CARD_DATA WHERE LOAD_DATE = IN_DATE) FF
  LEFT OUTER JOIN (SELECT CH.STORE_NO COST_CENTER_CODE,
                          CH.TERMNBR TERMINAL_NUMBER,
                          LPAD(TRIM(CH.TRANNBR),5,'0') TRANSACTION_NUMBER,
                          'O' SORT_FORCE,
                          'O' SEGMENT_CODE,
                          'O' SUB_SEGMENT_CODE,
                          NULL FILLER,
                          SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(TRIM(REPLACE(CBC.BC_BIN, '-', '')), '0', '16') BANK_CARD_ACCOUNT_NUMBER,
                          CBC.BC_AUTH_NO BANK_AUTH,
                          --NULL BANK_AMOUNT_SIGN,
                          (CASE WHEN CBC.BC_AMT < 0 THEN '-' ELSE NULL END) BANK_AMOUNT_SIGN,
                          SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CBC.BC_AMT, '-', ''), '0', '9', '2')BANK_AMOUNT,
                          'O' BANK_TYPE
                     FROM PNP_CCN_HEADERS CH,
                          PNP_CCN_BANK_CARDS CBC
                    WHERE CH.TRAN_GUID = CBC.TRAN_GUID
                      AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                                FROM PNP_CCN_LOAD_STATUS
        )
                      AND CH.RLS_RUN_CYCLE = CBC.RLS_RUN_CYCLE) POS
                     -- AND CH.TRANID IN ('11')) POS                        -- axk326 removed this filter as the comparison has to happen across all tranID's.
    ON FF.COST_CENTER_CODE = POS.COST_CENTER_CODE  
   AND FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER  
   AND FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER 
   AND FF.BANK_CARD_ACCOUNT_NUMBER = POS.BANK_CARD_ACCOUNT_NUMBER
 WHERE FF.COST_CENTER_CODE  IS NULL OR  
       FF.TERMINAL_NUMBER  IS NULL OR  
       FF.TRANSACTION_NUMBER  IS NULL OR 
       FF.BANK_CARD_ACCOUNT_NUMBER IS NULL OR
       POS.COST_CENTER_CODE  IS NULL OR 
       POS.TERMINAL_NUMBER  IS NULL OR 
       POS.TRANSACTION_NUMBER  IS NULL OR 
       POS.BANK_CARD_ACCOUNT_NUMBER IS NULL OR
       NVL(FF.BANK_AMOUNT,C_CHAR) <> NVL(POS.BANK_AMOUNT,C_CHAR);

V_FILE_NAME                   VARCHAR2(100) := 'BANK_CARD_DIFF';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CSTMR_BANK_CARD');

    UPDATE_COMMENTS_SP('CSTMR_BANK_CARD_DATA',NULL,NULL,IN_DATE);

    FOR REC IN CUR  LOOP
        IF REC.COST_CENTER_CODE2 IS NULL OR REC.TERMINAL_NUMBER2 IS NULL OR REC.TRANSACTION_NUMBER2 IS NULL THEN
               G_REC1 := G_REC1
                             ||'LEGACY'||C_SEPARATOR
                             ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                             ||'"'||REC.TERMINAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                             ||'"'||REC.TRANSACTION_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                             ||'"'||REC.BANK_CARD_ACCOUNT_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                             ||'"'||REC.BANK_AMOUNT_SIGN1||'"'||C_SEPARATOR
                             ||'"'||REC.BANK_AMOUNT1||'"'|| CHR(10);
               G_ORPHAN_COUNT := G_ORPHAN_COUNT + 1;
               UPDATE_COMMENTS_SP('CSTMR_BANK_CARD_DATA',REC.TGT_ROWID, 'DATA MISSING FROM NEW POS',IN_DATE);
             ELSIF REC.BANK_CARD_ACCOUNT_NUMBER1 <> REC.BANK_CARD_ACCOUNT_NUMBER2 OR NVL(REC.BANK_AMOUNT1,C_CHAR) <> NVL(REC.BANK_AMOUNT2,C_CHAR) THEN
                   REC.BANK_CARD_ACCOUNT_NUMBER1 := C_MISMATCH_IND||REC.BANK_CARD_ACCOUNT_NUMBER1;
                   REC.BANK_CARD_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.BANK_CARD_ACCOUNT_NUMBER2;
                   G_MISMATCH_COLUMN_NAME:= 'BANK_CARD_ACCOUNT_NUMBER';
             
                   G_REC2 := G_REC2
                                 ||'LEGACY'||C_SEPARATOR
                                  ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.TERMINAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.TRANSACTION_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.BANK_CARD_ACCOUNT_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.BANK_AMOUNT_SIGN1||'"'||C_SEPARATOR
                                  ||'"'||REC.BANK_AMOUNT1||'"'|| CHR(10)||
                                 'POS'||C_SEPARATOR
                                  ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.BANK_CARD_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                  ||'"'||REC.BANK_AMOUNT_SIGN2||'"'||C_SEPARATOR
                                  ||'"'||REC.BANK_AMOUNT2||'"'|| CHR(9) || CHR(10);
                  G_UNMATCHED_COUNT := G_UNMATCHED_COUNT + 1;
                  UPDATE_COMMENTS_SP('CSTMR_BANK_CARD_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS - COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
                  G_MISMATCH_COLUMN_NAME := NULL;
        END IF;
    END LOOP;
    G_REPORT := C_FILE_HEADER||CHR(10)||
                C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC2||CHR(10)||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC1||CHR(10)||
                C_FILE_SUMMARY_HEADER||CHR(10)||
                RETURN_SUMMARY_STRING('CSTMR_BANK_CARD_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);
                
    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                   ,'BANK_PAID_DATA_DIFF_sp'
                                   ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                   ,'000000'
                                   ,'0000000000');
END CSTMR_BANK_CARD_DIFF_SP;

PROCEDURE BANK_PAID_DATA_DIFF_SP(
/*********************************************************************** 
        This Procedure is used compare the legacy customer bank paid data load 
        and the POSXML customer bank paid data load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed :
************************************************************************/
    IN_DATE DATE)
IS
    CURSOR CUR IS
    SELECT FF.ROWID TGT_ROWID
          ,CAST(FF.TRANSACTION_SOURCE AS VARCHAR2(100)) TRANSACTION_SOURCE1
          ,CAST(FF.TRANSACTION_TYPE AS VARCHAR2(100)) TRANSACTION_TYPE1
          ,CAST(FF.COST_CENTER_CODE AS VARCHAR2(100)) COST_CENTER_CODE1
          ,FF.CHECK_SERIAL_NUMBER CHECK_SERIAL_NUMBER1
          ,CAST(FF.PROCESS_DATE AS VARCHAR2(100)) PROCESS_DATE1
          ,CAST(FF.TRANSACTION_SEGMENT_TYPE AS VARCHAR2(100)) TRANSACTION_SEGMENT_TYPE1
          ,CAST(FF.PAID_DATE AS VARCHAR2(100)) PAID_DATE1
          ,CAST(FF.STOP_PAY_DATE AS VARCHAR2(100)) STOP_PAY_DATE1
          ,CAST(FF.STOP_PAY_REMOVE_DATE AS VARCHAR2(100)) STOP_PAY_REMOVE_DATE1
          ,CAST(FF.VOID_DATE AS VARCHAR2(100)) VOID_DATE1
          ,CAST(FF.BANK_PAID_AMOUNT_SIGN AS VARCHAR2(100)) BANK_PAID_AMOUNT_SIGN1
          ,CAST(FF.BANK_PAID_AMOUNT AS VARCHAR2(100)) BANK_PAID_AMOUNT1
          ,CAST(FF.BANK_NUMBER AS VARCHAR2(100)) BANK_NUMBER1
          ,CAST(FF.BANK_ACCOUNT_NUMBER AS VARCHAR2(100)) BANK_ACCOUNT_NUMBER1
          ,CAST(FF.CPCS_NUMBER AS VARCHAR2(100)) CPCS_NUMBER1
          ,CAST(FF.PAYEE_INFO AS VARCHAR2(100)) PAYEE_INFO1
          ,CAST(FF.ADDITIONAL_INFO AS VARCHAR2(100)) ADDITIONAL_INFO1
          ,CAST(FF.FS_ACCOUNT_NUMBER1 AS VARCHAR2(100)) FS_ACCOUNT_NUMBER11
          ,CAST(FF.FS_AMOUNT_SIGN1 AS VARCHAR2(100)) FS_AMOUNT_SIGN11
          ,CAST(FF.FS_AMOUNT1 AS VARCHAR2(100)) FS_AMOUNT11
          ,CAST(FF.FS_ACCOUNT_NUMBER2 AS VARCHAR2(100)) FS_ACCOUNT_NUMBER21
          ,CAST(FF.FS_AMOUNT_SIGN2 AS VARCHAR2(100)) FS_AMOUNT_SIGN21
          ,CAST(FF.FS_AMOUNT2 AS VARCHAR2(100)) FS_AMOUNT21
          ,CAST(FF.FS_ACCOUNT_NUMBER3 AS VARCHAR2(100)) FS_ACCOUNT_NUMBER31
          ,CAST(FF.FS_AMOUNT_SIGN3 AS VARCHAR2(100)) FS_AMOUNT_SIGN31
          ,CAST(FF.FS_AMOUNT3 AS VARCHAR2(100)) FS_AMOUNT31
          ,CAST(POS.TRANSACTION_SOURCE AS VARCHAR2(100)) TRANSACTION_SOURCE2
          ,CAST(POS.TRANSACTION_TYPE AS VARCHAR2(100)) TRANSACTION_TYPE2
          ,CAST(POS.COST_CENTER_CODE AS VARCHAR2(100)) COST_CENTER_CODE2
          ,POS.CHECK_SERIAL_NUMBER AS CHECK_SERIAL_NUMBER2
          ,CAST('1'||TO_CHAR(TO_DATE(IN_DATE), 'yymmdd') AS VARCHAR2(100)) AS PROCESS_DATE2
          --,CAST(POS.PROCESS_DATE AS VARCHAR2(100)) PROCESS_DATE2
          ,CAST(POS.TRANSACTION_SEGMENT_TYPE AS VARCHAR2(100)) TRANSACTION_SEGMENT_TYPE2
          ,CAST(POS.PAID_DATE AS VARCHAR2(100)) PAID_DATE2
          ,CAST(POS.STOP_PAY_DATE AS VARCHAR2(100)) STOP_PAY_DATE2
          ,CAST(POS.STOP_PAY_REMOVE_DATE AS VARCHAR2(100)) STOP_PAY_REMOVE_DATE2
          ,CAST(POS.VOID_DATE AS VARCHAR2(100)) VOID_DATE2
          ,CAST((CASE WHEN POS.BANK_PAID_AMOUNT_SIGN < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) BANK_PAID_AMOUNT_SIGN2
          --,CAST(POS.BANK_PAID_AMOUNT_SIGN AS VARCHAR2(100)) BANK_PAID_AMOUNT_SIGN2
          ,CAST(POS.BANK_PAID_AMOUNT AS VARCHAR2(100)) BANK_PAID_AMOUNT2
          ,CAST(POS.BANK_NUMBER AS VARCHAR2(100)) BANK_NUMBER2
          ,CAST(POS.BANK_ACCOUNT_NUMBER AS VARCHAR2(100)) BANK_ACCOUNT_NUMBER2
          ,CAST(POS.CPCS_NUMBER AS VARCHAR2(100)) CPCS_NUMBER2
          ,CAST(POS.PAYEE_INFO AS VARCHAR2(100)) PAYEE_INFO2
          ,CAST(POS.ADDITIONAL_INFO AS VARCHAR2(100)) ADDITIONAL_INFO2
          ,CAST(POS.FS_ACCOUNT_NUMBER1 AS VARCHAR2(100)) FS_ACCOUNT_NUMBER12
          ,CAST((CASE WHEN POS.FS_AMOUNT_SIGN1 < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) FS_AMOUNT_SIGN12
          --,CAST(POS.FS_AMOUNT_SIGN1 AS VARCHAR2(100)) FS_AMOUNT_SIGN12
          ,CAST(POS.FS_AMOUNT1 AS VARCHAR2(100)) FS_AMOUNT12
          ,CAST(POS.FS_ACCOUNT_NUMBER2 AS VARCHAR2(100)) FS_ACCOUNT_NUMBER22
          ,CAST((CASE WHEN POS.FS_AMOUNT_SIGN2 < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) FS_AMOUNT_SIGN22
          --,CAST(POS.FS_AMOUNT_SIGN2 AS VARCHAR2(100)) FS_AMOUNT_SIGN22
          ,CAST(POS.FS_AMOUNT2 AS VARCHAR2(100)) FS_AMOUNT22
          ,CAST(POS.FS_ACCOUNT_NUMBER3 AS VARCHAR2(100)) FS_ACCOUNT_NUMBER32
          ,CAST((CASE WHEN POS.FS_AMOUNT_SIGN3 < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) FS_AMOUNT_SIGN32
          --,CAST(POS.FS_AMOUNT_SIGN3 AS VARCHAR2(100)) FS_AMOUNT_SIGN32
          ,CAST(POS.FS_AMOUNT3 AS VARCHAR2(100)) FS_AMOUNT32
      FROM (SELECT * FROM BANK_PAID_DATA WHERE LOAD_DATE = IN_DATE)  FF
      LEFT OUTER JOIN POSXML_BNK_PAID_DATA_TMP POS
           ON FF.CHECK_SERIAL_NUMBER = POS.CHECK_SERIAL_NUMBER
     WHERE FF.CHECK_SERIAL_NUMBER IS NULL OR
           POS.CHECK_SERIAL_NUMBER IS NULL OR 
           NVL(FF.TRANSACTION_SOURCE,C_CHAR) <> NVL(POS.TRANSACTION_SOURCE,C_CHAR) OR
           NVL(FF.TRANSACTION_TYPE,C_CHAR) <> NVL(POS.TRANSACTION_TYPE,C_CHAR) OR
           NVL(FF.COST_CENTER_CODE,C_CHAR) <> NVL(POS.COST_CENTER_CODE,C_CHAR) OR
           --NVL(FF.PROCESS_DATE,C_CHAR) <> NVL(POS.PROCESS_DATE,C_CHAR) OR
           NVL(FF.TRANSACTION_SEGMENT_TYPE,C_CHAR) <> NVL(POS.TRANSACTION_SEGMENT_TYPE,C_CHAR) OR
           NVL(FF.PAID_DATE,C_CHAR) <> NVL(POS.PAID_DATE,C_CHAR) OR
           NVL(FF.STOP_PAY_DATE,C_CHAR) <> NVL(POS.STOP_PAY_DATE,C_CHAR) OR
           NVL(FF.STOP_PAY_REMOVE_DATE,C_CHAR) <> NVL(POS.STOP_PAY_REMOVE_DATE,C_CHAR) OR
           NVL(FF.VOID_DATE,C_CHAR) <> NVL(POS.VOID_DATE,C_CHAR) OR
           NVL(FF.BANK_PAID_AMOUNT_SIGN,C_CHAR) <> NVL(POS.BANK_PAID_AMOUNT_SIGN,C_CHAR) OR
           NVL(FF.BANK_PAID_AMOUNT,C_CHAR) <> NVL(POS.BANK_PAID_AMOUNT,C_CHAR) OR
           NVL(FF.BANK_NUMBER,C_CHAR) <> NVL(POS.BANK_NUMBER,C_CHAR) OR
           NVL(FF.BANK_ACCOUNT_NUMBER,C_CHAR) <> NVL(POS.BANK_ACCOUNT_NUMBER,C_CHAR) OR
           NVL(FF.CPCS_NUMBER,C_CHAR) <> NVL(POS.CPCS_NUMBER,C_CHAR) OR
           NVL(FF.PAYEE_INFO,C_CHAR) <> NVL(POS.PAYEE_INFO,C_CHAR) OR
           NVL(FF.ADDITIONAL_INFO,C_CHAR) <> NVL(POS.ADDITIONAL_INFO,C_CHAR) OR
           NVL(FF.FS_ACCOUNT_NUMBER1,C_CHAR) <> NVL(POS.FS_ACCOUNT_NUMBER1,C_CHAR) OR
           NVL(FF.FS_AMOUNT_SIGN1,C_CHAR) <> NVL(POS.FS_AMOUNT_SIGN1,C_CHAR) OR
           NVL(FF.FS_AMOUNT1,C_CHAR) <> NVL(POS.FS_AMOUNT1,C_CHAR) OR
           NVL(FF.FS_ACCOUNT_NUMBER2,C_CHAR) <> NVL(POS.FS_ACCOUNT_NUMBER2,C_CHAR) OR
           NVL(FF.FS_AMOUNT_SIGN2,C_CHAR) <> NVL(POS.FS_AMOUNT_SIGN2,C_CHAR) OR
           NVL(FF.FS_AMOUNT2,C_CHAR) <> NVL(POS.FS_AMOUNT2,C_CHAR) OR
           NVL(FF.FS_ACCOUNT_NUMBER3,C_CHAR) <> NVL(POS.FS_ACCOUNT_NUMBER3,C_CHAR) OR
           NVL(FF.FS_AMOUNT_SIGN3,C_CHAR) <> NVL(POS.FS_AMOUNT_SIGN3,C_CHAR) OR
           NVL(FF.FS_AMOUNT3,C_CHAR) <> NVL(POS.FS_AMOUNT3,C_CHAR)
           ;

    V_FILE_NAME  VARCHAR2(100) := 'BANK_PAID_DATA_DIFF';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('BANK_PAID_DATA');

    UPDATE_COMMENTS_SP('BANK_PAID_DATA',NULL,NULL,IN_DATE);

    FOR REC IN CUR  LOOP
        IF REC.CHECK_SERIAL_NUMBER2 IS NULL THEN
            G_REC1 := G_REC1 || 'LEGACY'||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_SOURCE1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.TRANSACTION_TYPE1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.CHECK_SERIAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.PROCESS_DATE1||'"'||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_SEGMENT_TYPE1||'"'||C_SEPARATOR
                      ||'"'||REC.PAID_DATE1||'"'||C_SEPARATOR
                      ||'"'||REC.STOP_PAY_DATE1||'"'||C_SEPARATOR
                      ||'"'||REC.STOP_PAY_REMOVE_DATE1||'"'||C_SEPARATOR
                      ||'"'||REC.VOID_DATE1||'"'||C_SEPARATOR
                      ||'"'||REC.BANK_PAID_AMOUNT_SIGN1||'"'||C_SEPARATOR
                      ||'"'||REC.BANK_PAID_AMOUNT1||'"'||C_SEPARATOR
                      ||'"'||REC.BANK_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.BANK_ACCOUNT_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.CPCS_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.PAYEE_INFO1||'"'||C_SEPARATOR
                      ||'"'||REC.ADDITIONAL_INFO1||'"'||C_SEPARATOR
                      ||'"'||REC.FS_ACCOUNT_NUMBER11||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.FS_AMOUNT_SIGN11||'"'||C_SEPARATOR
                      ||'"'||REC.FS_AMOUNT11||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.FS_ACCOUNT_NUMBER21||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.FS_AMOUNT_SIGN21||'"'||C_SEPARATOR
                      ||'"'||REC.FS_AMOUNT21||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.FS_ACCOUNT_NUMBER31||'"'|| CHR(9) ||C_SEPARATOR 
                      ||'"'||REC.FS_AMOUNT_SIGN31||'"'||C_SEPARATOR
                      ||'"'||REC.FS_AMOUNT31||'"'|| CHR(9) || CHR(10)
                      ;
            G_ORPHAN_COUNT := G_ORPHAN_COUNT + 1;
            UPDATE_COMMENTS_SP('BANK_PAID_DATA',REC.TGT_ROWID, 'DATA MISSING FROM NEW POS',IN_DATE);
        ELSIF NVL(REC.TRANSACTION_SOURCE1,C_CHAR) <> NVL(REC.TRANSACTION_SOURCE2,C_CHAR) OR
              NVL(REC.TRANSACTION_TYPE1,C_CHAR) <> NVL(REC.TRANSACTION_TYPE2,C_CHAR) OR
              NVL(REC.COST_CENTER_CODE1,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) OR
              --NVL(REC.PROCESS_DATE1,C_CHAR) <> NVL(REC.PROCESS_DATE2,C_CHAR) OR
              NVL(REC.TRANSACTION_SEGMENT_TYPE1,C_CHAR) <> NVL(REC.TRANSACTION_SEGMENT_TYPE2,C_CHAR) OR
              NVL(REC.PAID_DATE1,C_CHAR) <> NVL(REC.PAID_DATE2,C_CHAR) OR
              NVL(REC.STOP_PAY_DATE1,C_CHAR) <> NVL(REC.STOP_PAY_DATE2,C_CHAR) OR
              NVL(REC.STOP_PAY_REMOVE_DATE1,C_CHAR) <> NVL(REC.STOP_PAY_REMOVE_DATE2,C_CHAR) OR
              NVL(REC.VOID_DATE1,C_CHAR) <> NVL(REC.VOID_DATE2,C_CHAR) OR
              NVL(REC.BANK_PAID_AMOUNT_SIGN1,C_CHAR) <> NVL(REC.BANK_PAID_AMOUNT_SIGN2,C_CHAR) OR
              NVL(REC.BANK_PAID_AMOUNT1,C_CHAR) <> NVL(REC.BANK_PAID_AMOUNT2,C_CHAR) OR
              NVL(REC.BANK_NUMBER1,C_CHAR) <> NVL(REC.BANK_NUMBER2,C_CHAR) OR
              NVL(REC.BANK_ACCOUNT_NUMBER1,C_CHAR) <> NVL(REC.BANK_ACCOUNT_NUMBER2,C_CHAR) OR
              NVL(REC.CPCS_NUMBER1,C_CHAR) <> NVL(REC.CPCS_NUMBER2,C_CHAR) OR
              NVL(REC.PAYEE_INFO1,C_CHAR) <> NVL(REC.PAYEE_INFO2,C_CHAR) OR
              NVL(REC.ADDITIONAL_INFO1,C_CHAR) <> NVL(REC.ADDITIONAL_INFO2,C_CHAR) OR
              NVL(REC.FS_ACCOUNT_NUMBER11,C_CHAR) <> NVL(REC.FS_ACCOUNT_NUMBER12,C_CHAR) OR
              NVL(REC.FS_AMOUNT_SIGN11,C_CHAR) <> NVL(REC.FS_AMOUNT_SIGN12,C_CHAR) OR
              NVL(REC.FS_AMOUNT11,C_CHAR) <> NVL(REC.FS_AMOUNT12,C_CHAR) OR
              NVL(REC.FS_ACCOUNT_NUMBER21,C_CHAR) <> NVL(REC.FS_ACCOUNT_NUMBER22,C_CHAR) OR
              NVL(REC.FS_AMOUNT_SIGN21,C_CHAR) <> NVL(REC.FS_AMOUNT_SIGN22,C_CHAR) OR
              NVL(REC.FS_AMOUNT21,C_CHAR) <> NVL(REC.FS_AMOUNT22,C_CHAR) OR
              NVL(REC.FS_ACCOUNT_NUMBER31,C_CHAR) <> NVL(REC.FS_ACCOUNT_NUMBER32,C_CHAR) OR
              NVL(REC.FS_AMOUNT_SIGN31,C_CHAR) <> NVL(REC.FS_AMOUNT_SIGN32,C_CHAR) OR
              NVL(REC.FS_AMOUNT31,C_CHAR) <> NVL(REC.FS_AMOUNT32,C_CHAR) THEN

              IF NVL(REC.TRANSACTION_SOURCE1,C_CHAR) <> NVL(REC.TRANSACTION_SOURCE2,C_CHAR) THEN
                 REC.TRANSACTION_SOURCE1 := C_MISMATCH_IND||REC.TRANSACTION_SOURCE1;
                 REC.TRANSACTION_SOURCE2 := C_MISMATCH_IND||REC.TRANSACTION_SOURCE2;
                 G_MISMATCH_COLUMN_NAME:= 'TRANSACTION_SOURCE';
              END IF;
              IF NVL(REC.TRANSACTION_TYPE1,C_CHAR) <> NVL(REC.TRANSACTION_TYPE2,C_CHAR) THEN
                 REC.TRANSACTION_TYPE1 := C_MISMATCH_IND||REC.TRANSACTION_TYPE1;
                 REC.TRANSACTION_TYPE2 := C_MISMATCH_IND||REC.TRANSACTION_TYPE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TRANSACTION_TYPE';
              END IF;
              IF NVL(REC.COST_CENTER_CODE1,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) THEN
                 REC.COST_CENTER_CODE1 := C_MISMATCH_IND||REC.COST_CENTER_CODE1;
                 REC.COST_CENTER_CODE2 := C_MISMATCH_IND||REC.COST_CENTER_CODE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'COST_CENTER_CODE';
              END IF;
              /*IF NVL(REC.PROCESS_DATE1,C_CHAR) <> NVL(REC.PROCESS_DATE2,C_CHAR) THEN
                 REC.PROCESS_DATE1 := C_MISMATCH_IND||REC.PROCESS_DATE1;
                 REC.PROCESS_DATE2 := C_MISMATCH_IND||REC.PROCESS_DATE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'PROCESS_DATE';
              END IF;*/
              IF NVL(REC.TRANSACTION_SEGMENT_TYPE1,C_CHAR) <> NVL(REC.TRANSACTION_SEGMENT_TYPE2,C_CHAR) THEN
                 REC.TRANSACTION_SEGMENT_TYPE1 := C_MISMATCH_IND||REC.TRANSACTION_SEGMENT_TYPE1;
                 REC.TRANSACTION_SEGMENT_TYPE2 := C_MISMATCH_IND||REC.TRANSACTION_SEGMENT_TYPE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TRANSACTION_SEGMENT_TYPE';
              END IF;
              IF NVL(REC.PAID_DATE1,C_CHAR) <> NVL(REC.PAID_DATE2,C_CHAR) THEN
                 REC.PAID_DATE1 := C_MISMATCH_IND||REC.PAID_DATE1;
                 REC.PAID_DATE2 := C_MISMATCH_IND||REC.PAID_DATE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'PAID_DATE';
              END IF;
              IF NVL(REC.PAID_DATE1,C_CHAR) <> NVL(REC.STOP_PAY_DATE2,C_CHAR) THEN
                 REC.STOP_PAY_DATE1 := C_MISMATCH_IND||REC.STOP_PAY_DATE1;
                 REC.STOP_PAY_DATE2 := C_MISMATCH_IND||REC.STOP_PAY_DATE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'STOP_PAY_DATE';
              END IF;
              IF NVL(REC.STOP_PAY_REMOVE_DATE1,C_CHAR) <> NVL(REC.STOP_PAY_REMOVE_DATE2,C_CHAR) THEN
                 REC.STOP_PAY_REMOVE_DATE1 := C_MISMATCH_IND||REC.STOP_PAY_REMOVE_DATE1;
                 REC.STOP_PAY_REMOVE_DATE2 := C_MISMATCH_IND||REC.STOP_PAY_REMOVE_DATE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'STOP_PAY_REMOVE_DATE';
              END IF;
              IF NVL(REC.VOID_DATE1,C_CHAR) <> NVL(REC.VOID_DATE1,C_CHAR) THEN
                 REC.VOID_DATE1 := C_MISMATCH_IND||REC.VOID_DATE1;
                 REC.VOID_DATE2 := C_MISMATCH_IND||REC.VOID_DATE2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'VOID_DATE';
              END IF;
              IF NVL(REC.BANK_PAID_AMOUNT_SIGN1,C_CHAR) <> NVL(REC.BANK_PAID_AMOUNT_SIGN2,C_CHAR) THEN
                 REC.BANK_PAID_AMOUNT_SIGN1 := C_MISMATCH_IND||REC.BANK_PAID_AMOUNT_SIGN1;
                 REC.BANK_PAID_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.BANK_PAID_AMOUNT_SIGN2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'BANK_PAID_AMOUNT_SIGN';
              END IF;
              IF NVL(REC.BANK_PAID_AMOUNT1,C_CHAR) <> NVL(REC.BANK_PAID_AMOUNT2,C_CHAR) THEN
                 REC.BANK_PAID_AMOUNT1 := C_MISMATCH_IND||REC.BANK_PAID_AMOUNT1;
                 REC.BANK_PAID_AMOUNT2 := C_MISMATCH_IND||REC.BANK_PAID_AMOUNT2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'BANK_PAID_AMOUNT';
              END IF;
              IF NVL(REC.BANK_NUMBER1,C_CHAR) <> NVL(REC.BANK_NUMBER2,C_CHAR) THEN
                 REC.BANK_NUMBER1 := C_MISMATCH_IND||REC.BANK_NUMBER1;
                 REC.BANK_NUMBER2 := C_MISMATCH_IND||REC.BANK_NUMBER2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'BANK_NUMBER';
              END IF;
              IF NVL(REC.BANK_ACCOUNT_NUMBER1,C_CHAR) <> NVL(REC.BANK_ACCOUNT_NUMBER2,C_CHAR) THEN
                 REC.BANK_ACCOUNT_NUMBER1 := C_MISMATCH_IND||REC.BANK_ACCOUNT_NUMBER1;
                 REC.BANK_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.BANK_ACCOUNT_NUMBER2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'BANK_ACCOUNT_NUMBER';
              END IF;
              IF NVL(REC.CPCS_NUMBER1,C_CHAR) <> NVL(REC.CPCS_NUMBER2,C_CHAR) THEN
                 REC.CPCS_NUMBER1 := C_MISMATCH_IND||REC.CPCS_NUMBER1;
                 REC.CPCS_NUMBER2 := C_MISMATCH_IND||REC.CPCS_NUMBER2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'CPCS_NUMBER';
              END IF;
              IF NVL(REC.PAYEE_INFO1,C_CHAR) <> NVL(REC.PAYEE_INFO2,C_CHAR) THEN
                 REC.PAYEE_INFO1 := C_MISMATCH_IND||REC.PAYEE_INFO1;
                 REC.PAYEE_INFO2 := C_MISMATCH_IND||REC.PAYEE_INFO2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'PAYEE_INFO';
              END IF;
              IF NVL(REC.ADDITIONAL_INFO1,C_CHAR) <> NVL(REC.ADDITIONAL_INFO2,C_CHAR) THEN
                 REC.ADDITIONAL_INFO1 := C_MISMATCH_IND||REC.ADDITIONAL_INFO1;
                 REC.ADDITIONAL_INFO2 := C_MISMATCH_IND||REC.ADDITIONAL_INFO2;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ADDITIONAL_INFO';
              END IF;
              IF NVL(REC.FS_ACCOUNT_NUMBER11,C_CHAR) <> NVL(REC.FS_ACCOUNT_NUMBER12,C_CHAR) THEN
                 REC.FS_ACCOUNT_NUMBER11 := C_MISMATCH_IND||REC.FS_ACCOUNT_NUMBER11;
                 REC.FS_ACCOUNT_NUMBER12 := C_MISMATCH_IND||REC.FS_ACCOUNT_NUMBER12;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_ACCOUNT_NUMBER1';
              END IF;
              IF NVL(REC.FS_AMOUNT_SIGN11,C_CHAR) <> NVL(REC.FS_AMOUNT_SIGN12,C_CHAR) THEN
                 REC.FS_AMOUNT_SIGN11 := C_MISMATCH_IND||REC.FS_AMOUNT_SIGN11;
                 REC.FS_AMOUNT_SIGN12 := C_MISMATCH_IND||REC.FS_AMOUNT_SIGN12;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_AMOUNT_SIGN1';
              END IF;
              IF NVL(REC.FS_AMOUNT11,C_CHAR) <> NVL(REC.FS_AMOUNT12,C_CHAR) THEN
                 REC.FS_AMOUNT11 := C_MISMATCH_IND||REC.FS_AMOUNT11;
                 REC.FS_AMOUNT12 := C_MISMATCH_IND||REC.FS_AMOUNT12;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_AMOUNT1';
              END IF;
              IF NVL(REC.FS_ACCOUNT_NUMBER21,C_CHAR) <> NVL(REC.FS_ACCOUNT_NUMBER22,C_CHAR) THEN
                REC.FS_ACCOUNT_NUMBER21 := C_MISMATCH_IND||REC.FS_ACCOUNT_NUMBER21;
                REC.FS_ACCOUNT_NUMBER22 := C_MISMATCH_IND||REC.FS_ACCOUNT_NUMBER22;
                G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_ACCOUNT_NUMBER2';
              END IF;
              IF NVL(REC.FS_AMOUNT_SIGN21,C_CHAR) <> NVL(REC.FS_AMOUNT_SIGN22,C_CHAR) THEN
                 REC.FS_AMOUNT_SIGN21 := C_MISMATCH_IND||REC.FS_AMOUNT_SIGN21;
                 REC.FS_AMOUNT_SIGN22 := C_MISMATCH_IND||REC.FS_AMOUNT_SIGN22;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_AMOUNT_SIGN2';
              END IF;
              IF NVL(REC.FS_AMOUNT21,C_CHAR) <> NVL(REC.FS_AMOUNT22,C_CHAR) THEN
                 REC.FS_AMOUNT21 := C_MISMATCH_IND||REC.FS_AMOUNT21;
                 REC.FS_AMOUNT22 := C_MISMATCH_IND||REC.FS_AMOUNT22;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_AMOUNT2';
              END IF;
              IF NVL(REC.FS_ACCOUNT_NUMBER31,C_CHAR) <> NVL(REC.FS_ACCOUNT_NUMBER32,C_CHAR) THEN
                 REC.FS_ACCOUNT_NUMBER31 := C_MISMATCH_IND||REC.FS_ACCOUNT_NUMBER31;
                 REC.FS_ACCOUNT_NUMBER32 := C_MISMATCH_IND||REC.FS_ACCOUNT_NUMBER32;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_ACCOUNT_NUMBER3';
              END IF;
              IF NVL(REC.FS_AMOUNT_SIGN31,C_CHAR) <> NVL(REC.FS_AMOUNT_SIGN32,C_CHAR) THEN
                 REC.FS_AMOUNT_SIGN31 := C_MISMATCH_IND||REC.FS_AMOUNT_SIGN31;
                 REC.FS_AMOUNT_SIGN32 := C_MISMATCH_IND||REC.FS_AMOUNT_SIGN32;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_AMOUNT_SIGN3';
              END IF;
              IF NVL(REC.FS_AMOUNT31,C_CHAR) <> NVL(REC.FS_AMOUNT32,C_CHAR) THEN
                 REC.FS_AMOUNT31 := C_MISMATCH_IND||REC.FS_AMOUNT31;
                 REC.FS_AMOUNT32 := C_MISMATCH_IND||REC.FS_AMOUNT32;
                 G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'FS_AMOUNT3';
              END IF; 
               
              G_REC2 := G_REC2||
                            'LEGACY'||C_SEPARATOR
                             ||'"'||REC.TRANSACTION_SOURCE1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.TRANSACTION_TYPE1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.COST_CENTER_CODE1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.CHECK_SERIAL_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.PROCESS_DATE1||'"'||C_SEPARATOR
                             ||'"'||REC.TRANSACTION_SEGMENT_TYPE1||'"'||C_SEPARATOR
                             ||'"'||REC.PAID_DATE1||'"'||C_SEPARATOR
                             ||'"'||REC.STOP_PAY_DATE1||'"'||C_SEPARATOR
                             ||'"'||REC.STOP_PAY_REMOVE_DATE1||'"'||C_SEPARATOR
                             ||'"'||REC.VOID_DATE1||'"'||C_SEPARATOR
                             ||'"'||REC.BANK_PAID_AMOUNT_SIGN1||'"'||C_SEPARATOR
                             ||'"'||REC.BANK_PAID_AMOUNT1||'"'||C_SEPARATOR
                             ||'"'||REC.BANK_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.BANK_ACCOUNT_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.CPCS_NUMBER1||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.PAYEE_INFO1||'"'||C_SEPARATOR
                             ||'"'||REC.ADDITIONAL_INFO1||'"'||C_SEPARATOR
                             ||'"'||REC.FS_ACCOUNT_NUMBER11||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT_SIGN11||'"'||C_SEPARATOR
                             ||'"'||REC.FS_AMOUNT11||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_ACCOUNT_NUMBER21||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT_SIGN21||'"'||C_SEPARATOR
                             ||'"'||REC.FS_AMOUNT21||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_ACCOUNT_NUMBER31||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT_SIGN31||'"'||C_SEPARATOR
                             ||'"'||REC.FS_AMOUNT31||'"'|| CHR(9) ||CHR(10)|| 
                             'POS'||C_SEPARATOR
                             ||'"'||REC.TRANSACTION_SOURCE2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.TRANSACTION_TYPE2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.CHECK_SERIAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.PROCESS_DATE2||'"'||C_SEPARATOR
                             ||'"'||REC.TRANSACTION_SEGMENT_TYPE2||'"'||C_SEPARATOR
                             ||'"'||REC.PAID_DATE2||'"'||C_SEPARATOR
                             ||'"'||REC.STOP_PAY_DATE2||'"'||C_SEPARATOR
                             ||'"'||REC.STOP_PAY_REMOVE_DATE2||'"'||C_SEPARATOR
                             ||'"'||REC.VOID_DATE2||'"'||C_SEPARATOR
                             ||'"'||REC.BANK_PAID_AMOUNT_SIGN2||'"'||C_SEPARATOR
                             ||'"'||REC.BANK_PAID_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.BANK_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.BANK_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.CPCS_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.PAYEE_INFO2||'"'||C_SEPARATOR       
                             ||'"'||REC.ADDITIONAL_INFO2||'"'||C_SEPARATOR
                             ||'"'||REC.FS_ACCOUNT_NUMBER12||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT_SIGN12||'"'||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT12||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_ACCOUNT_NUMBER22||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT_SIGN22||'"'||C_SEPARATOR
                             ||'"'||REC.FS_AMOUNT22||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_ACCOUNT_NUMBER32||'"'|| CHR(9) ||C_SEPARATOR 
                             ||'"'||REC.FS_AMOUNT_SIGN32||'"'||C_SEPARATOR
                             ||'"'||REC.FS_AMOUNT32||'"'|| CHR(9) || CHR(10);
            G_UNMATCHED_COUNT := G_UNMATCHED_COUNT + 1;
            UPDATE_COMMENTS_SP('BANK_PAID_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS- COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
            G_MISMATCH_COLUMN_NAME := NULL;
        END IF;
    END LOOP;
    G_REPORT := C_FILE_HEADER||CHR(10)||
                C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC2||CHR(10)||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10)||
                G_REC1||CHR(10)||
                C_FILE_SUMMARY_HEADER||CHR(10)||
                RETURN_SUMMARY_STRING('BANK_PAID_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                   ,'BANK_PAID_DATA_DIFF_sp'
                                   ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                   ,'000000'
                                   ,'0000000000');
END BANK_PAID_DATA_DIFF_SP; 

PROCEDURE STORE_DRAFTS_DIFF_SP(
/****************************************************************
        This Procedure is used compare the legacy Store drafts load and
        POSXML Store drafts load and creats a Difference file.

created : 12/21/2016  MXK766/NXK927 CCN Project
changed :
*****************************************************************/
    IN_DATE IN DATE)IS

    CURSOR CUR IS
    SELECT
    TGT_ROWID,
    TRANSACTION_SOURCE AS TRANSACTION_SOURCE,
    TRANSACTION_TYPE AS TRANSACTION_TYPE,
    CAST(COST_CENTER_CODE AS VARCHAR2(100)) AS COST_CENTER_CODE,
    CHECK_SERIAL_NUMBER AS CHECK_SERIAL_NUMBER,
    CAST(DRAFT_NUMBER AS VARCHAR2(100)) AS DRAFT_NUMBER,
    PROCESS_DATE AS PROCESS_DATE,
    FILLER AS FILLER,
    TRANSACTION_SEGMENT_TYPE AS TRANSACTION_SEGMENT_TYPE,
    CAST(NET_AMOUNT_SIGN AS VARCHAR2(100)) AS NET_AMOUNT_SIGN,
    CAST(NET_AMOUNT AS VARCHAR2(100)) AS NET_AMOUNT,
    CAST(GROSS_AMOUNT_SIGN AS VARCHAR2(100)) AS GROSS_AMOUNT_SIGN,
    CAST(GROSS_AMOUNT AS VARCHAR2(100)) AS GROSS_AMOUNT,
    CAST(RETAINAGE_AMOUNT_SIGN AS VARCHAR2(100)) AS RETAINAGE_AMOUNT_SIGN,
    CAST(RETAINAGE_AMOUNT AS VARCHAR2(100)) AS RETAINAGE_AMOUNT,
    CAST(ISSUE_DATE AS VARCHAR2(100)) AS ISSUE_DATE,
    CAST(TRANSACTION_DATE AS VARCHAR2(100)) AS TRANSACTION_DATE,
    CAST(TERMINAL_NUMBER AS VARCHAR2(100)) AS TERMINAL_NUMBER,
    CAST(TRANSACTION_NUMBER AS VARCHAR2(100)) AS TRANSACTION_NUMBER,
    CAST(CUSTOMER_ACCOUNT_NUMBER AS VARCHAR2(100)) AS CUSTOMER_ACCOUNT_NUMBER,
    CAST(CUSTOMER_JOB_NUMBER AS VARCHAR2(100)) AS CUSTOMER_JOB_NUMBER,
    CAST(POS_TRANSACTION_CODE AS VARCHAR2(100)) AS POS_TRANSACTION_CODE,
    CAST(PAYEE_NAME AS VARCHAR2(100)) AS PAYEE_NAME,
    CAST(ADDRESS_LINE_1 AS VARCHAR2(100)) AS ADDRESS_LINE_1,
    CAST(ADDRESS_LINE_2 AS VARCHAR2(100)) AS ADDRESS_LINE_2,
    CAST(CITY AS VARCHAR2(100)) AS CITY,
    CAST(STATE_CODE AS VARCHAR2(100)) AS STATE_CODE,
    CAST(ZIP_CODE AS VARCHAR2(100)) AS ZIP_CODE,
    CAST(PHONE_NUMBER AS VARCHAR2(100)) AS PHONE_NUMBER,
    CAST(TRANSACTION_TIME AS VARCHAR2(100)) AS TRANSACTION_TIME,
    CAST(EMPLOYEE_NUMBER AS VARCHAR2(100)) AS EMPLOYEE_NUMBER,
    BOOK_DATE AS BOOK_DATE,
    CYCLE_RUN_NUMBER AS CYCLE_RUN_NUMBER,
    TRANSACTION_SOURCE2 AS TRANSACTION_SOURCE2,
    TRANSACTION_TYPE2 AS TRANSACTION_TYPE2,
    CAST(COST_CENTER_CODE2 AS VARCHAR2(100))  AS COST_CENTER_CODE2,
    CHECK_SERIAL_NUMBER2 AS CHECK_SERIAL_NUMBER2,
    CAST(DRAFT_NUMBER2 AS VARCHAR2(100))  AS DRAFT_NUMBER2,
    PROCESS_DATE2 AS PROCESS_DATE2,
    TRANSACTION_SEGMENT_TYPE2 AS TRANSACTION_SEGMENT_TYPE2,
    CAST(NET_AMOUNT2 AS VARCHAR2(100))  AS NET_AMOUNT2,
    CAST(GROSS_AMOUNT2 AS VARCHAR2(100)) AS GROSS_AMOUNT2,               -- axk326, CAST being added
    CAST(RETAINAGE_AMOUNT2 AS VARCHAR2(100))  AS RETAINAGE_AMOUNT2,
    CAST(ISSUE_DATE2 AS VARCHAR2(100))  AS ISSUE_DATE2,
    CAST(TRANSACTION_DATE2 AS VARCHAR2(100))  AS TRANSACTION_DATE2,
    CAST(TERMINAL_NUMBER2 AS VARCHAR2(100))  AS TERMINAL_NUMBER2,
    CAST(TRANSACTION_NUMBER2 AS VARCHAR2(100))  AS TRANSACTION_NUMBER2,
    CAST(CUSTOMER_ACCOUNT_NUMBER2 AS VARCHAR2(100))  AS CUSTOMER_ACCOUNT_NUMBER2,
    CAST(CUSTOMER_JOB_NUMBER2 AS VARCHAR2(100))  AS CUSTOMER_JOB_NUMBER2,
    CAST(POS_TRANSACTION_CODE2 AS VARCHAR2(100))  AS POS_TRANSACTION_CODE2,
    CAST(PAYEE_NAME2 AS VARCHAR2(100))  AS PAYEE_NAME2,
    CAST(ADDRESS_LINE_12 AS VARCHAR2(100))  AS ADDRESS_LINE_12,
    CAST(ADDRESS_LINE_22 AS VARCHAR2(100))  AS ADDRESS_LINE_22,
    CAST(CITY2 AS VARCHAR2(100)) AS CITY2,
    CAST(STATE_CODE2 AS VARCHAR2(100)) AS STATE_CODE2,
    CAST(ZIP_CODE2 AS VARCHAR2(100)) AS ZIP_CODE2,
    CAST(PHONE_NUMBER2 AS VARCHAR2(100)) AS PHONE_NUMBER2,
    CAST(TRANSACTION_TIME2 AS VARCHAR2(100)) AS TRANSACTION_TIME2,
    CAST(EMPLOYEE_NUMBER2 AS VARCHAR2(100)) AS EMPLOYEE_NUMBER2,
    CYCLE_RUN_NUMBER2 AS CYCLE_RUN_NUMBER2,
    REASON_CODE2 AS REASON_CODE2,
    FILLER2 AS FILLER2,
    CAST(NET_AMOUNT_SIGN2 AS VARCHAR2(100)) AS NET_AMOUNT_SIGN2,
    CAST(GROSS_AMOUNT_SIGN2 AS VARCHAR2(100)) AS GROSS_AMOUNT_SIGN2,
    CAST(RETAINAGE_AMOUNT_SIGN2 AS VARCHAR2(100)) AS RETAINAGE_AMOUNT_SIGN2,
    BOOK_DATE2 AS BOOK_DATE2
    FROM
    (
     SELECT FF.ROWID AS TGT_ROWID,
          FF.*
     FROM ISSUE_CHANGE_DATA FF
     WHERE FF.LOAD_DATE = IN_DATE
     )FF
    LEFT JOIN
    (
     SELECT 'O' TRANSACTION_SOURCE2,
            'O' TRANSACTION_TYPE2,
            CH.STORE_NO COST_CENTER_CODE2,
            LPAD(CDL.DRAFT_NBR,10,'0') AS  CHECK_SERIAL_NUMBER2,
            SUBSTR(CDL.DRAFT_NBR, 5, 4) DRAFT_NUMBER2,
            '1'||TO_CHAR(TO_DATE(IN_DATE), 'yymmdd') AS PROCESS_DATE2,
            NULL FILLER2,
            'O' TRANSACTION_SEGMENT_TYPE2,
            --NULL NET_AMOUNT_SIGN2,
            (CASE WHEN CDL.DRAFT_AMT < 0 THEN '-' ELSE NULL END) NET_AMOUNT_SIGN2,
            SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CDL.DRAFT_AMT, '-', ''), '0', '9', '2')NET_AMOUNT2,
            --NULL GROSS_AMOUNT_SIGN2,
--            (CASE WHEN CH.TRAN_TOTAL < 0 THEN '-' ELSE NULL END) GROSS_AMOUNT_SIGN2,
--            SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.TRAN_TOTAL, '-', ''), '0', '9', '2')GROSS_AMOUNT2,
--            --NULL RETAINAGE_AMOUNT_SIGN2,
            (CASE WHEN CH.INST_RETAINAGE < 0 THEN '-' ELSE NULL END) RETAINAGE_AMOUNT_SIGN2,
            LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CH.INST_RETAINAGE, '-', ''), '0', '9', '2'),9,'0') RETAINAGE_AMOUNT2,
            (CASE WHEN (SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE((NVL(CDL.DRAFT_AMT,0) +NVL(CH.INST_RETAINAGE,0)), '-', ''), '0', '9', '2')) < 0 THEN '-' ELSE NULL END) GROSS_AMOUNT_SIGN2,
            (SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE((NVL(CDL.DRAFT_AMT,0) +NVL(CH.INST_RETAINAGE,0)), '-', ''), '0', '9', '2')) GROSS_AMOUNT2,
            '1'||TO_CHAR(TO_DATE(CH.CTL_DT), 'yymmdd')ISSUE_DATE2,
            '1'||TO_CHAR(TO_DATE(CH.TRAN_DATE), 'yymmdd')TRANSACTION_DATE2,
            TO_CHAR(CH.TERMNBR) TERMINAL_NUMBER2,
            LPAD(CH.TRANNBR,5,'0') TRANSACTION_NUMBER2,
            (CASE WHEN CH.TRANID = '82' 
                  THEN '000000000' ELSE DECODE (CDL.DRAFT_ACCT_NBR , '0', SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CDL.DRAFT_ACCT_NBR, '0', '9')
                                                                   , '1', '000000000', CDL.DRAFT_ACCT_NBR) END) CUSTOMER_ACCOUNT_NUMBER2,
            (CASE WHEN CH.TRANID = '82' THEN '01' WHEN CH.TRANID = '19' THEN '01' ELSE SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.JOBNBR, '0', '2') END) CUSTOMER_JOB_NUMBER2,
            TO_CHAR(CH.TRANID) POS_TRANSACTION_CODE2,
            CH.BILLNM PAYEE_NAME2,
            CH.BILLADDR1 ADDRESS_LINE_12,
            CH.BILLADDR2 ADDRESS_LINE_22,
            CH.BILLCITY CITY2,
            CH.BILLST STATE_CODE2,
            CH.BILLZIP ZIP_CODE2,
            CH.BILLPHONE PHONE_NUMBER2,
            TO_CHAR(CH.TRAN_TIMESTAMP, 'HH24MI') AS TRANSACTION_TIME2,
            LPAD(TRIM(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.EMP_NO, '0', '2')),'2',0) EMPLOYEE_NUMBER2,
            NULL AS BOOK_DATE2,
            SUBSTR(CH.RLS_RUN_CYCLE, 1, 2) CYCLE_RUN_NUMBER2,
            SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.REASON_CODE, '0', '2') REASON_CODE2
      FROM  PNP_CCN_DRAFT_LOGS CDL,
            PNP_CCN_HEADERS CH
      WHERE CDL.TRAN_GUID      = CH.TRAN_GUID
        AND CDL.RLS_RUN_CYCLE = CH.RLS_RUN_CYCLE
        AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                       FROM PNP_CCN_LOAD_STATUS))POS
       ON (POS.CHECK_SERIAL_NUMBER2 = FF.CHECK_SERIAL_NUMBER)
       WHERE 
           NVL(FF.COST_CENTER_CODE,C_CHAR) <> NVL(POS.COST_CENTER_CODE2,C_CHAR) OR
           NVL(FF.DRAFT_NUMBER,C_CHAR) <> NVL(POS.DRAFT_NUMBER2,C_CHAR) OR  
           NVL(FF.NET_AMOUNT,C_CHAR) <> NVL(POS.NET_AMOUNT2,C_CHAR) OR 
           NVL(FF.NET_AMOUNT_SIGN,C_CHAR) <> NVL(POS.NET_AMOUNT_SIGN2,C_CHAR) OR
           NVL(FF.GROSS_AMOUNT_SIGN,C_CHAR) <> NVL(POS.GROSS_AMOUNT_SIGN2,C_CHAR) OR
           NVL(FF.RETAINAGE_AMOUNT_SIGN,C_CHAR) <> NVL(POS.RETAINAGE_AMOUNT_SIGN2,C_CHAR) OR
           NVL(FF.GROSS_AMOUNT,C_CHAR) <> NVL(POS.GROSS_AMOUNT2,C_CHAR) OR 
           NVL(FF.RETAINAGE_AMOUNT,C_CHAR) <> NVL(POS.RETAINAGE_AMOUNT2,C_CHAR) OR
           NVL(FF.ISSUE_DATE,C_CHAR) <> NVL(POS.ISSUE_DATE2,C_CHAR) OR
           NVL(FF.TRANSACTION_DATE,C_CHAR) <> NVL(POS.TRANSACTION_DATE2,C_CHAR) OR
           NVL(FF.TERMINAL_NUMBER,C_CHAR) <> NVL(POS.TERMINAL_NUMBER2,C_CHAR) OR
           NVL(FF.TRANSACTION_NUMBER,C_CHAR) <> NVL(POS.TRANSACTION_NUMBER2,C_CHAR) OR
           NVL(FF.CUSTOMER_ACCOUNT_NUMBER,C_CHAR) <> NVL(POS.CUSTOMER_ACCOUNT_NUMBER2,C_CHAR) OR
           NVL(FF.CUSTOMER_JOB_NUMBER,C_CHAR) <> NVL(POS.CUSTOMER_JOB_NUMBER2,C_CHAR) OR
           NVL(FF.POS_TRANSACTION_CODE,C_CHAR) <> NVL(POS.POS_TRANSACTION_CODE2,C_CHAR) OR
           NVL(FF.PAYEE_NAME,C_CHAR) <> NVL(POS.PAYEE_NAME2,C_CHAR) OR
           NVL(FF.ADDRESS_LINE_1,C_CHAR) <> NVL(POS.ADDRESS_LINE_12,C_CHAR) OR
           NVL(FF.ADDRESS_LINE_2,C_CHAR) <> NVL(POS.ADDRESS_LINE_22,C_CHAR) OR
           NVL(FF.CITY,C_CHAR) <> NVL(POS.CITY2,C_CHAR) OR
           NVL(FF.STATE_CODE,C_CHAR) <> NVL(POS.STATE_CODE2,C_CHAR) OR
           NVL(FF.ZIP_CODE,C_CHAR) <> NVL(POS.ZIP_CODE2,C_CHAR) OR
           NVL(FF.PHONE_NUMBER,C_CHAR) <> NVL(POS.PHONE_NUMBER2,C_CHAR) OR
           NVL(FF.TRANSACTION_TIME,C_CHAR) <> NVL(POS.TRANSACTION_TIME2,C_CHAR) OR
           NVL(FF.EMPLOYEE_NUMBER,C_CHAR) <> NVL(POS.EMPLOYEE_NUMBER2,C_CHAR);

    V_FILE_NAME                         VARCHAR2(100) := 'ISSUE_CHANGE_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;

    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('ISSUE_CHANGE_DATA');

    UPDATE_COMMENTS_SP('ISSUE_CHANGE_DATA',NULL,NULL,IN_DATE);

    FOR REC IN CUR LOOP

        IF REC.CHECK_SERIAL_NUMBER2 IS NULL THEN
            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1;
            UPDATE_COMMENTS_SP('ISSUE_CHANGE_DATA',REC.TGT_ROWID, C_MISSING_COMMENTS,IN_DATE);
            G_REC1 :=  G_REC1 || 'LEGACY'||C_SEPARATOR
                       ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR 
                       ||'"'||REC.CHECK_SERIAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.DRAFT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.PROCESS_DATE||'"'||C_SEPARATOR
                       ||'"'||REC.NET_AMOUNT_SIGN||'"'||C_SEPARATOR
                       ||'"'||REC.NET_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GROSS_AMOUNT_SIGN||'"'||C_SEPARATOR
                       ||'"'||REC.GROSS_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.RETAINAGE_AMOUNT_SIGN||'"'||C_SEPARATOR
                       ||'"'||REC.RETAINAGE_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.ISSUE_DATE||'"'||C_SEPARATOR
                       ||'"'||REC.TRANSACTION_DATE||'"'||C_SEPARATOR
                       ||'"'||REC.TERMINAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.TRANSACTION_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.CUSTOMER_JOB_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.POS_TRANSACTION_CODE||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.PAYEE_NAME||'"'||C_SEPARATOR
                       ||'"'||REC.ADDRESS_LINE_1||'"'||C_SEPARATOR
                       ||'"'||REC.ADDRESS_LINE_2||'"'||C_SEPARATOR
                       ||'"'||REC.CITY||'"'||C_SEPARATOR
                       ||'"'||REC.STATE_CODE||'"'||C_SEPARATOR
                       ||'"'||REC.ZIP_CODE||'"'||C_SEPARATOR
                       ||'"'||REC.PHONE_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.TRANSACTION_TIME||'"'||C_SEPARATOR
                       ||'"'||REC.EMPLOYEE_NUMBER||'"'|| CHR(9) ||CHR(10);
        ELSIF  REC.CHECK_SERIAL_NUMBER IS NOT NULL AND REC.CHECK_SERIAL_NUMBER2 IS NOT NULL THEN
               G_UNMATCHED_COUNT := G_UNMATCHED_COUNT+1;
               IF NVL(REC.COST_CENTER_CODE,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) THEN
                  REC.COST_CENTER_CODE := C_MISMATCH_IND||REC.COST_CENTER_CODE;
                  REC.COST_CENTER_CODE2 := C_MISMATCH_IND||REC.COST_CENTER_CODE2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'COST_CENTER_CODE';
               END IF;
               IF NVL(REC.DRAFT_NUMBER,C_CHAR) <> NVL(REC.DRAFT_NUMBER2,C_CHAR) THEN
                  REC.DRAFT_NUMBER := C_MISMATCH_IND||REC.DRAFT_NUMBER;
                  REC.DRAFT_NUMBER2 := C_MISMATCH_IND||REC.DRAFT_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'DRAFT_NUMBER';
               END IF;
               IF NVL(REC.NET_AMOUNT,C_CHAR) <> NVL(REC.NET_AMOUNT2,C_CHAR) THEN
                  REC.NET_AMOUNT := C_MISMATCH_IND||REC.NET_AMOUNT;
                  REC.NET_AMOUNT2 := C_MISMATCH_IND||REC.NET_AMOUNT2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'NET_AMOUNT';
               END IF;
               IF NVL(REC.GROSS_AMOUNT,C_CHAR) <> NVL(REC.GROSS_AMOUNT2,C_CHAR) THEN
                  REC.GROSS_AMOUNT := C_MISMATCH_IND||REC.GROSS_AMOUNT;
                  REC.GROSS_AMOUNT2 := C_MISMATCH_IND||REC.GROSS_AMOUNT2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GROSS_AMOUNT';
               END IF;
               IF NVL(REC.RETAINAGE_AMOUNT,C_CHAR) <> NVL(REC.RETAINAGE_AMOUNT2,C_CHAR) THEN
                  REC.RETAINAGE_AMOUNT := C_MISMATCH_IND||REC.RETAINAGE_AMOUNT;
                  REC.RETAINAGE_AMOUNT2 := C_MISMATCH_IND||REC.RETAINAGE_AMOUNT2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'RETAINAGE_AMOUNT';
               END IF;
               IF NVL(REC.ISSUE_DATE,C_CHAR) <> NVL(REC.ISSUE_DATE2,C_CHAR) THEN
                  REC.ISSUE_DATE := C_MISMATCH_IND||REC.ISSUE_DATE;
                  REC.ISSUE_DATE2 := C_MISMATCH_IND||REC.ISSUE_DATE2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ISSUE_DATE';
               END IF;
               IF NVL(REC.TRANSACTION_DATE,C_CHAR) <> NVL(REC.TRANSACTION_DATE2,C_CHAR) THEN
                  REC.TRANSACTION_DATE := C_MISMATCH_IND||REC.TRANSACTION_DATE;
                  REC.TRANSACTION_DATE2 := C_MISMATCH_IND||REC.TRANSACTION_DATE2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TRANSACTION_DATE';
               END IF;
               IF NVL(REC.TERMINAL_NUMBER,C_CHAR) <> NVL(REC.TERMINAL_NUMBER2,C_CHAR) THEN
                  REC.TERMINAL_NUMBER := C_MISMATCH_IND||REC.TERMINAL_NUMBER;
                  REC.TERMINAL_NUMBER2 := C_MISMATCH_IND||REC.TERMINAL_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TERMINAL_NUMBER';
               END IF;
               IF NVL(REC.TRANSACTION_NUMBER,C_CHAR) <> NVL(REC.TRANSACTION_NUMBER2,C_CHAR) THEN
                  REC.TRANSACTION_NUMBER := C_MISMATCH_IND||REC.TRANSACTION_NUMBER;
                  REC.TRANSACTION_NUMBER2 := C_MISMATCH_IND||REC.TRANSACTION_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TRANSACTION_NUMBER';
               END IF;
               IF NVL(REC.CUSTOMER_ACCOUNT_NUMBER,C_CHAR) <> NVL(REC.CUSTOMER_ACCOUNT_NUMBER2,C_CHAR) THEN
                  REC.CUSTOMER_ACCOUNT_NUMBER := C_MISMATCH_IND||REC.CUSTOMER_ACCOUNT_NUMBER;
                  REC.CUSTOMER_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.CUSTOMER_ACCOUNT_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'CUSTOMER_ACCOUNT_NUMBER';
               END IF;
               IF NVL(REC.CUSTOMER_JOB_NUMBER,C_CHAR) <> NVL(REC.CUSTOMER_JOB_NUMBER2,C_CHAR) THEN
                  REC.CUSTOMER_JOB_NUMBER := C_MISMATCH_IND||REC.CUSTOMER_JOB_NUMBER;
                  REC.CUSTOMER_JOB_NUMBER2 := C_MISMATCH_IND||REC.CUSTOMER_JOB_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'CUSTOMER_JOB_NUMBER';
               END IF;
               IF NVL(REC.POS_TRANSACTION_CODE,C_CHAR) <> NVL(REC.POS_TRANSACTION_CODE2,C_CHAR) THEN
                  REC.POS_TRANSACTION_CODE := C_MISMATCH_IND||REC.POS_TRANSACTION_CODE;
                  REC.POS_TRANSACTION_CODE2 := C_MISMATCH_IND||REC.POS_TRANSACTION_CODE2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'POS_TRANSACTION_CODE';
               END IF;
               IF NVL(REC.PAYEE_NAME,C_CHAR) <> NVL(REC.PAYEE_NAME2,C_CHAR) THEN
                  REC.PAYEE_NAME := C_MISMATCH_IND||REC.PAYEE_NAME;
                  REC.PAYEE_NAME2 := C_MISMATCH_IND||REC.PAYEE_NAME2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'PAYEE_NAME';
               END IF;
               IF NVL(REC.ADDRESS_LINE_1,C_CHAR) <> NVL(REC.ADDRESS_LINE_12,C_CHAR) THEN
                  REC.ADDRESS_LINE_1 := C_MISMATCH_IND||REC.ADDRESS_LINE_1;
                  REC.ADDRESS_LINE_12 := C_MISMATCH_IND||REC.ADDRESS_LINE_12;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ADDRESS_LINE_1';
               END IF;
               IF NVL(REC.ADDRESS_LINE_2,C_CHAR) <> NVL(REC.ADDRESS_LINE_22,C_CHAR) THEN
                  REC.ADDRESS_LINE_2 := C_MISMATCH_IND||REC.ADDRESS_LINE_2;
                  REC.ADDRESS_LINE_22 := C_MISMATCH_IND||REC.ADDRESS_LINE_22;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ADDRESS_LINE_2';
               END IF;
               IF NVL(REC.CITY,C_CHAR) <> NVL(REC.CITY2,C_CHAR) THEN
                  REC.CITY := C_MISMATCH_IND||REC.CITY;
                  REC.CITY2 := C_MISMATCH_IND||REC.CITY2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'CITY';
               END IF;
               IF NVL(REC.STATE_CODE,C_CHAR) <> NVL(REC.STATE_CODE2,C_CHAR) THEN
                  REC.STATE_CODE := C_MISMATCH_IND||REC.STATE_CODE;
                  REC.STATE_CODE2 := C_MISMATCH_IND||REC.STATE_CODE2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'STATE_CODE';
               END IF;
               IF NVL(REC.ZIP_CODE,C_CHAR) <> NVL(REC.ZIP_CODE2,C_CHAR) THEN
                  REC.ZIP_CODE := C_MISMATCH_IND||REC.ZIP_CODE;
                  REC.ZIP_CODE2 := C_MISMATCH_IND||REC.ZIP_CODE2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ZIP_CODE';
               END IF;
               IF NVL(REC.PHONE_NUMBER,C_CHAR) <> NVL(REC.PHONE_NUMBER2,C_CHAR) THEN
                  REC.PHONE_NUMBER := C_MISMATCH_IND||REC.PHONE_NUMBER;
                  REC.PHONE_NUMBER2 := C_MISMATCH_IND||REC.PHONE_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'PHONE_NUMBER';
               END IF;
               IF NVL(REC.EMPLOYEE_NUMBER,C_CHAR) <> NVL(REC.EMPLOYEE_NUMBER2,C_CHAR) THEN
                  REC.EMPLOYEE_NUMBER := C_MISMATCH_IND||REC.EMPLOYEE_NUMBER;
                  REC.EMPLOYEE_NUMBER2 := C_MISMATCH_IND||REC.EMPLOYEE_NUMBER2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'EMPLOYEE_NUMBER';
               END IF;
               IF NVL(REC.TRANSACTION_TIME,C_CHAR) <> NVL(REC.TRANSACTION_TIME2,C_CHAR) THEN
                  REC.TRANSACTION_TIME := C_MISMATCH_IND||REC.TRANSACTION_TIME;
                  REC.TRANSACTION_TIME2 := C_MISMATCH_IND||REC.TRANSACTION_TIME2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TRANSACTION_TIME';
               END IF;
               IF NVL(REC.NET_AMOUNT_SIGN,C_CHAR) <> NVL(REC.NET_AMOUNT_SIGN2,C_CHAR) THEN
                  REC.NET_AMOUNT_SIGN := C_MISMATCH_IND||REC.NET_AMOUNT_SIGN;
                  REC.NET_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.NET_AMOUNT_SIGN2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'NET_AMOUNT_SIGN';
               END IF;
               IF NVL(REC.GROSS_AMOUNT_SIGN,C_CHAR) <> NVL(REC.GROSS_AMOUNT_SIGN2,C_CHAR) THEN
                  REC.GROSS_AMOUNT_SIGN := C_MISMATCH_IND||REC.GROSS_AMOUNT_SIGN;
                  REC.GROSS_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.GROSS_AMOUNT_SIGN2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GROSS_AMOUNT_SIGN';
               END IF;
               IF NVL(REC.RETAINAGE_AMOUNT_SIGN,C_CHAR) <> NVL(REC.RETAINAGE_AMOUNT_SIGN2,C_CHAR) THEN
                  REC.RETAINAGE_AMOUNT_SIGN := C_MISMATCH_IND||REC.RETAINAGE_AMOUNT_SIGN;
                  REC.RETAINAGE_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.RETAINAGE_AMOUNT_SIGN2;
                  G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'RETAINAGE_AMOUNT_SIGN';
               END IF;
               G_REC2            :=  G_REC2 || 'LEGACY'||C_SEPARATOR
                                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.CHECK_SERIAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.DRAFT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.PROCESS_DATE||'"'||C_SEPARATOR
                                      ||'"'||REC.NET_AMOUNT_SIGN||'"'||C_SEPARATOR
                                      ||'"'||REC.NET_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.GROSS_AMOUNT_SIGN||'"'||C_SEPARATOR
                                      ||'"'||REC.GROSS_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.RETAINAGE_AMOUNT_SIGN||'"'||C_SEPARATOR
                                      ||'"'||REC.RETAINAGE_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.ISSUE_DATE||'"'||C_SEPARATOR
                                      ||'"'||REC.TRANSACTION_DATE||'"'||C_SEPARATOR
                                      ||'"'||REC.TERMINAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.TRANSACTION_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.CUSTOMER_JOB_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.POS_TRANSACTION_CODE||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.PAYEE_NAME||'"'||C_SEPARATOR
                                      ||'"'||REC.ADDRESS_LINE_1||'"'||C_SEPARATOR
                                      ||'"'||REC.ADDRESS_LINE_2||'"'||C_SEPARATOR
                                      ||'"'||REC.CITY||'"'||C_SEPARATOR
                                      ||'"'||REC.STATE_CODE||'"'||C_SEPARATOR
                                      ||'"'||REC.ZIP_CODE||'"'||C_SEPARATOR
                                      ||'"'||REC.PHONE_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.TRANSACTION_TIME||'"'||C_SEPARATOR
                                      ||'"'||REC.EMPLOYEE_NUMBER||'"'|| CHR(9) || CHR(10) ||
                                      'POS'||C_SEPARATOR
                                      ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.CHECK_SERIAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.DRAFT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR 
                                      ||'"'||REC.PROCESS_DATE2||'"'||C_SEPARATOR
                                      ||'"'||REC.NET_AMOUNT_SIGN2||'"'||C_SEPARATOR
                                      ||'"'||REC.NET_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.GROSS_AMOUNT_SIGN2||'"'||C_SEPARATOR
                                      ||'"'||REC.GROSS_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.RETAINAGE_AMOUNT_SIGN2||'"'||C_SEPARATOR
                                      ||'"'||REC.RETAINAGE_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.ISSUE_DATE2||'"'||C_SEPARATOR
                                      ||'"'||REC.TRANSACTION_DATE2||'"'||C_SEPARATOR
                                      ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.CUSTOMER_JOB_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.POS_TRANSACTION_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.PAYEE_NAME2||'"'||C_SEPARATOR
                                      ||'"'||REC.ADDRESS_LINE_12||'"'||C_SEPARATOR
                                      ||'"'||REC.ADDRESS_LINE_22||'"'||C_SEPARATOR
                                      ||'"'||REC.CITY2||'"'||C_SEPARATOR
                                      ||'"'||REC.STATE_CODE2||'"'||C_SEPARATOR
                                      ||'"'||REC.ZIP_CODE2||'"'||C_SEPARATOR
                                      ||'"'||REC.PHONE_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                                      ||'"'||REC.TRANSACTION_TIME2||'"'||C_SEPARATOR
                                      ||'"'||REC.EMPLOYEE_NUMBER2||'"'|| CHR(9) ||CHR(10);
               UPDATE_COMMENTS_SP('ISSUE_CHANGE_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS- COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
               G_MISMATCH_COLUMN_NAME := NULL;
        END IF;

    END LOOP;

    G_REPORT := C_FILE_HEADER||CHR(10);
    G_REPORT := G_REPORT||C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10) 
                ||G_REC2||CHR(10);             
    G_REPORT := G_REPORT|| 
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                RETURN_SUMMARY_STRING('ISSUE_CHANGE_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                   ,'STORE_DRAFTS_DIFF_sp'
                                   ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                   ,'000000'
                                   ,'0000000000');
END STORE_DRAFTS_DIFF_SP;

PROCEDURE STORE_DRAFT_INSTLR_DIFF_SP(
/**************************************************************** 
        This Procedure is used compare the legacy Store drafts Installer lines details load 
        and the POSXML Store drafts Installer lines details load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed : 
*****************************************************************/
    IN_DATE IN DATE)
IS

   CURSOR FF_RECONCILE_CUR IS
   SELECT 
     ITEM_EXT_AMOUNT_SIGN2 AS ITEM_EXT_AMOUNT_SIGN2,
     CAST(ITEM_EXT_AMOUNT2 AS VARCHAR2(100)) AS ITEM_EXT_AMOUNT2,
     ORGNL_TERMINAL_NUMBER2 AS ORGNL_TERMINAL_NUMBER2,
     ORGNL_TRANSACTION_NUMBER2 AS ORGNL_TRANSACTION_NUMBER2,
     CAST(ITEM_QTY_SIGN2 AS VARCHAR2(100)) AS ITEM_QTY_SIGN2,
     CAST(ITEM_QTY2 AS VARCHAR2(100)) AS ITEM_QTY2,
     CAST(ITEM_PRICE_SIGN2 AS VARCHAR2(100)) AS ITEM_PRICE_SIGN2,
     CAST(ITEM_PRICE2 AS VARCHAR2(100)) AS ITEM_PRICE2,
     CAST(GL_PRIME_ACCOUNT_NUMBER2 AS VARCHAR2(100)) AS GL_PRIME_ACCOUNT_NUMBER2,
     CAST(GL_SUB_ACCOUNT_NUMBER2 AS VARCHAR2(100)) AS GL_SUB_ACCOUNT_NUMBER2,
     TRANSACTION_SOURCE AS TRANSACTION_SOURCE,
     TRANSACTION_TYPE AS TRANSACTION_TYPE,
     CAST(COST_CENTER_CODE AS VARCHAR2(100)) AS COST_CENTER_CODE,
     CHECK_SERIAL_NUMBER AS CHECK_SERIAL_NUMBER,
     PROCESS_DATE AS PROCESS_DATE,
     FILLER AS FILLER,
     TRANSACTION_SEGMENT_TYPE AS TRANSACTION_SEGMENT_TYPE,
     CAST(ITEM_EXT_AMOUNT_SIGN AS VARCHAR2(100)) AS ITEM_EXT_AMOUNT_SIGN,
     CAST(ITEM_EXT_AMOUNT AS VARCHAR2(100)) AS ITEM_EXT_AMOUNT,
     ORGNL_TERMINAL_NUMBER AS ORGNL_TERMINAL_NUMBER,
     ORGNL_TRANSACTION_NUMBER AS ORGNL_TRANSACTION_NUMBER,
     ITEM_QUANTITY_SIGN AS ITEM_QUANTITY_SIGN,
     CAST(ITEM_QUANTITY AS VARCHAR2(100)) AS ITEM_QUANTITY,
     CAST(ITEM_PRICE_SIGN AS VARCHAR2(100)) AS ITEM_PRICE_SIGN,
     CAST(ITEM_PRICE AS VARCHAR2(100)) AS ITEM_PRICE,
     CAST(GL_PRIME_ACCOUNT_NUMBER AS VARCHAR2(100)) AS GL_PRIME_ACCOUNT_NUMBER,
     CAST(GL_SUB_ACCOUNT_NUMBER AS VARCHAR2(100)) AS GL_SUB_ACCOUNT_NUMBER,
     DATA_SOURCE AS DATA_SOURCE,
     LOAD_DATE AS LOAD_DATE,
     COMMENTS AS COMMENTS,
     TGT_ROWID AS TGT_ROWID,
     TRANSACTION_SOURCE2 AS TRANSACTION_SOURCE2,
     TRANSACTION_TYPE2 AS TRANSACTION_TYPE2,
     CAST(COST_CENTER_CODE2 AS VARCHAR2(100)) AS COST_CENTER_CODE2,
     CHECK_SERIAL_NUMBER2 AS CHECK_SERIAL_NUMBER2,
     PROCESS_DATE2 AS PROCESS_DATE2,
     FILLER2 AS FILLER2,
     TRANSACTION_SEGMENT_TYPE2 AS TRANSACTION_SEGMENT_TYPE2
   FROM 
   (
   SELECT T.*, ROWID AS TGT_ROWID
   FROM INSTLR_LN_ITEM_DATA T
   WHERE LOAD_DATE = IN_DATE
   ) FF
   LEFT JOIN
   (SELECT
       'O' TRANSACTION_SOURCE2,
       'O' TRANSACTION_TYPE2,
       CH.STORE_NO COST_CENTER_CODE2,
       LPAD(CDL.DRAFT_NBR ,10,'0') AS CHECK_SERIAL_NUMBER2,
       '1'||TO_CHAR(TO_DATE(IN_DATE), 'yymmdd') AS PROCESS_DATE2,
       --NULL AS  PROCESS_DATE2,
       CAST(NULL AS VARCHAR2(100)) FILLER2,
       'O' TRANSACTION_SEGMENT_TYPE2,
       --CAST(NULL AS VARCHAR2(100)) ITEM_EXT_AMOUNT_SIGN2,
       --CAST((CASE WHEN CIL.IL_EXTENDED_PRICE < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) ITEM_EXT_AMOUNT_SIGN2,
       NULL ITEM_EXT_AMOUNT_SIGN2,
       LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CIL.IL_EXTENDED_PRICE, '-', ''), '0', '9', '2'),9,'0')ITEM_EXT_AMOUNT2,
       CIL.IL_P_TERM_NBR ORGNL_TERMINAL_NUMBER2,
       CIL.IL_P_TRAN_NBR AS ORGNL_TRANSACTION_NUMBER2,
       --CAST(NULL AS VARCHAR2(100)) ITEM_QTY_SIGN2,
       --CAST((CASE WHEN CIL.IL_QTY < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) ITEM_QTY_SIGN2,
       NULL ITEM_QTY_SIGN2,
       SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CIL.IL_QTY, '0', '7', '2')ITEM_QTY2,
       --CAST(NULL AS VARCHAR2(100)) ITEM_PRICE_SIGN2,
       --CAST((CASE WHEN CIL.IL_PRICE < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) ITEM_PRICE_SIGN2,
       NULL ITEM_PRICE_SIGN2,
       LPAD(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CIL.IL_PRICE, '-', ''), '0', '7', '2'),7,'0') ITEM_PRICE2,
       NULL GL_PRIME_ACCOUNT_NUMBER2,
       NULL GL_SUB_ACCOUNT_NUMBER2
     FROM 
        PNP_CCN_HEADERS CH,
        PNP_CCN_DRAFT_LOGS CDL,
        PNP_CCN_INSTALLER_LINES CIL
     WHERE CH.TRAN_GUID = CDL.TRAN_GUID
       AND CH.TRAN_GUID = CIL.TRAN_GUID
       AND TO_CHAR(CH.TRANID) = '13'
       AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                 FROM PNP_CCN_LOAD_STATUS)
      AND CH.RLS_RUN_CYCLE = CDL.RLS_RUN_CYCLE
      AND CH.RLS_RUN_CYCLE = CIL.RLS_RUN_CYCLE) POS
     ON
     (
      FF.CHECK_SERIAL_NUMBER = POS.CHECK_SERIAL_NUMBER2 AND 
      FF.ITEM_EXT_AMOUNT = POS.ITEM_EXT_AMOUNT2 AND
      FF.ITEM_QUANTITY = POS.ITEM_QTY2 AND
      FF.ITEM_PRICE = POS.ITEM_PRICE2 AND
      FF.ORGNL_TRANSACTION_NUMBER=POS.ORGNL_TRANSACTION_NUMBER2
      )
      WHERE
      NVL(FF.COST_CENTER_CODE,C_CHAR) <> NVL(POS.COST_CENTER_CODE2,C_CHAR) OR
      NVL(FF.ITEM_EXT_AMOUNT,C_CHAR) <> NVL(POS.ITEM_EXT_AMOUNT2,C_CHAR) OR
      NVL(FF.ITEM_QUANTITY,C_CHAR) <> NVL(POS.ITEM_QTY2,C_CHAR) OR
      NVL(FF.ITEM_PRICE,C_CHAR) <> NVL(POS.ITEM_PRICE2,C_CHAR) OR
      NVL(FF.ITEM_EXT_AMOUNT_SIGN,C_CHAR) <> NVL(POS.ITEM_EXT_AMOUNT_SIGN2,C_CHAR) OR
      NVL(FF.ITEM_QUANTITY_SIGN,C_CHAR) <> NVL(POS.ITEM_QTY_SIGN2,C_CHAR) OR
      NVL(FF.ITEM_PRICE_SIGN,C_CHAR) <> NVL(POS.ITEM_PRICE_SIGN2,C_CHAR) OR
      NVL(FF.GL_PRIME_ACCOUNT_NUMBER,C_CHAR) <> NVL(POS.GL_PRIME_ACCOUNT_NUMBER2,C_CHAR) OR
      NVL(FF.GL_SUB_ACCOUNT_NUMBER,C_CHAR) <> NVL(POS.GL_SUB_ACCOUNT_NUMBER2,C_CHAR);


    V_FILE_NAME                         VARCHAR2(100) := 'INSTLR_LN_ITEM_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;

    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('INSTLR_LN_ITEM_DATA'); 

    UPDATE_COMMENTS_SP('INSTLR_LN_ITEM_DATA',NULL,NULL,IN_DATE);

    FOR REC IN FF_RECONCILE_CUR LOOP

        IF  REC.CHECK_SERIAL_NUMBER2 IS NULL THEN
            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1;
            UPDATE_COMMENTS_SP('INSTLR_LN_ITEM_DATA',REC.TGT_ROWID, C_MISSING_COMMENTS,IN_DATE);
            G_REC1 :=   G_REC1 ||  'LEGACY'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.CHECK_SERIAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.PROCESS_DATE||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_EXT_AMOUNT_SIGN||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_EXT_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY_SIGN||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE_SIGN||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_PRIME_ACCOUNT_NUMBER||'"'||C_SEPARATOR
                      ||'"'||REC.GL_SUB_ACCOUNT_NUMBER||'"'||CHR(10); 
        ELSIF  
            REC.CHECK_SERIAL_NUMBER IS NOT NULL AND REC.CHECK_SERIAL_NUMBER2 IS NOT NULL THEN
            G_UNMATCHED_COUNT := G_UNMATCHED_COUNT+1; 
            IF NVL(REC.COST_CENTER_CODE,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) THEN
               REC.COST_CENTER_CODE := C_MISMATCH_IND||REC.COST_CENTER_CODE;
               REC.COST_CENTER_CODE2 := C_MISMATCH_IND||REC.COST_CENTER_CODE2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'COST_CENTER_CODE';
            END IF;
            IF NVL(REC.ITEM_EXT_AMOUNT,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT2,C_CHAR) THEN
               REC.ITEM_EXT_AMOUNT := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT;
               REC.ITEM_EXT_AMOUNT2 := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_EXT_AMOUNT';
            END IF;
            IF NVL(REC.ITEM_QUANTITY,C_CHAR) <> NVL(REC.ITEM_QTY2,C_CHAR) THEN
               REC.ITEM_QUANTITY := C_MISMATCH_IND||REC.ITEM_QUANTITY;
               REC.ITEM_QTY2 := C_MISMATCH_IND||REC.ITEM_QTY2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_QUANTITY';
            END IF;
            IF NVL(REC.ITEM_PRICE,C_CHAR) <> NVL(REC.ITEM_PRICE2,C_CHAR) THEN
               REC.ITEM_PRICE := C_MISMATCH_IND||REC.ITEM_PRICE;
               REC.ITEM_PRICE2 := C_MISMATCH_IND||REC.ITEM_PRICE2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_PRICE';
            END IF;
            IF NVL(REC.GL_PRIME_ACCOUNT_NUMBER,C_CHAR) <> NVL(REC.GL_PRIME_ACCOUNT_NUMBER2,C_CHAR) THEN
               REC.GL_PRIME_ACCOUNT_NUMBER := C_MISMATCH_IND||REC.GL_PRIME_ACCOUNT_NUMBER;
               REC.GL_PRIME_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.GL_PRIME_ACCOUNT_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GL_PRIME_ACCOUNT_NUMBER';
            END IF;
            IF NVL(REC.GL_SUB_ACCOUNT_NUMBER,C_CHAR) <> NVL(REC.GL_SUB_ACCOUNT_NUMBER2,C_CHAR) THEN
               REC.GL_SUB_ACCOUNT_NUMBER := C_MISMATCH_IND||REC.GL_SUB_ACCOUNT_NUMBER;
               REC.GL_SUB_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.GL_SUB_ACCOUNT_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GL_SUB_ACCOUNT_NUMBER';
            END IF;
            IF NVL(REC.ITEM_EXT_AMOUNT_SIGN,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT_SIGN2,C_CHAR) THEN
               REC.ITEM_EXT_AMOUNT_SIGN := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT_SIGN;
               REC.ITEM_EXT_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT_SIGN2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_EXT_AMOUNT_SIGN';
            END IF;
            IF NVL(REC.ITEM_QUANTITY_SIGN,C_CHAR) <> NVL(REC.ITEM_QTY_SIGN2,C_CHAR) THEN
               REC.ITEM_QUANTITY_SIGN := C_MISMATCH_IND||REC.ITEM_QUANTITY_SIGN;
               REC.ITEM_QTY_SIGN2 := C_MISMATCH_IND||REC.ITEM_QTY_SIGN2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_QUANTITY_SIGN';
            END IF;
            IF NVL(REC.ITEM_PRICE_SIGN,C_CHAR) <> NVL(REC.ITEM_PRICE_SIGN2,C_CHAR) THEN
               REC.ITEM_PRICE_SIGN := C_MISMATCH_IND||REC.ITEM_PRICE_SIGN;
               REC.ITEM_PRICE_SIGN2 := C_MISMATCH_IND||REC.ITEM_PRICE_SIGN2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_PRICE_SIGN';
            END IF;
            G_REC2 := G_REC2 || 'LEGACY'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.CHECK_SERIAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.PROCESS_DATE||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_EXT_AMOUNT_SIGN||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_EXT_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY_SIGN||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE_SIGN||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_PRIME_ACCOUNT_NUMBER||'"'||C_SEPARATOR
                      ||'"'||REC.GL_SUB_ACCOUNT_NUMBER||'"'||C_SEPARATOR||CHR(10)||
                                      'POS'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.CHECK_SERIAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.PROCESS_DATE2||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_EXT_AMOUNT_SIGN2||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_EXT_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_QTY_SIGN2||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_QTY2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE_SIGN2||'"'||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_PRIME_ACCOUNT_NUMBER2||'"'||C_SEPARATOR
                      ||'"'||REC.GL_SUB_ACCOUNT_NUMBER2||'"'||CHR(10);
             UPDATE_COMMENTS_SP('INSTLR_LN_ITEM_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS- COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
             G_MISMATCH_COLUMN_NAME :=NULL;
        END IF;

    END LOOP;

    G_REPORT := C_FILE_HEADER||CHR(10);
    G_REPORT := G_REPORT||C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10) 
                ||G_REC2||CHR(10);             
    G_REPORT := G_REPORT|| 
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                 RETURN_SUMMARY_STRING('INSTLR_LN_ITEM_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);
                             
    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'STORE_DRAFT_INSTLR_DIFF_sp'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END STORE_DRAFT_INSTLR_DIFF_SP;



PROCEDURE STORE_DRAFT_DISBRSMT_DIFF_SP(
/**************************************************************** 
This Procedure is used compare the legacy Store drafts disbusement load 
and the POSXML Store drafts disbusement load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed : 
*****************************************************************/
    IN_DATE IN DATE)
IS

    CURSOR FF_RECONCILE_CUR IS
    SELECT 
        TRANSACTION_SOURCE AS TRANSACTION_SOURCE,
        TRANSACTION_TYPE AS TRANSACTION_TYPE,
        CAST(COST_CENTER_CODE AS VARCHAR2(100)) AS COST_CENTER_CODE,
        CAST(CHECK_SERIAL_NUMBER AS VARCHAR2(100)) AS CHECK_SERIAL_NUMBER,
        PROCESS_DATE AS PROCESS_DATE,
        FILLER AS FILLER,
        TRANSACTION_SEGMENT_TYPE AS TRANSACTION_SEGMENT_TYPE,
        CAST(ITEM_EXT_AMOUNT_SIGN AS VARCHAR2(100)) AS ITEM_EXT_AMOUNT_SIGN,
        ITEM_EXT_AMOUNT AS ITEM_EXT_AMOUNT,
        CAST(GL_PRIME_ACCOUNT_NUMBER AS VARCHAR2(100)) AS GL_PRIME_ACCOUNT_NUMBER,
        CAST(GL_SUB_ACCOUNT_NUMBER AS VARCHAR2(100)) AS GL_SUB_ACCOUNT_NUMBER,
        DATA_SOURCE AS DATA_SOURCE,
        LOAD_DATE AS LOAD_DATE,
        COMMENTS AS COMMENTS,
        TGT_ROWID AS TGT_ROWID,
        TRANSACTION_SOURCE2 AS TRANSACTION_SOURCE2,
        TRANSACTION_TYPE2 AS TRANSACTION_TYPE2,
        CAST(COST_CENTER_CODE2 AS VARCHAR2(100)) AS COST_CENTER_CODE2,
        CAST(CHECK_SERIAL_NUMBER2 AS VARCHAR2(100)) AS CHECK_SERIAL_NUMBER2,
        PROCESS_DATE2 AS PROCESS_DATE2,
        FILLER2 AS FILLER2,
        TRANSACTION_SEGMENT_TYPE2 AS TRANSACTION_SEGMENT_TYPE2,
        CAST(ITEM_EXT_AMOUNT_SIGN2 AS VARCHAR2(100)) AS ITEM_EXT_AMOUNT_SIGN2,
        ITEM_EXT_AMOUNT2 AS ITEM_EXT_AMOUNT2,
        CAST(GL_PRIME_ACCOUNT_NUMBER2 AS VARCHAR2(100)) AS GL_PRIME_ACCOUNT_NUMBER2,
        CAST(GL_SUB_ACCOUNT_NUMBER2 AS VARCHAR2(100)) AS GL_SUB_ACCOUNT_NUMBER2 
    FROM
    (SELECT FF.*, ROWID AS TGT_ROWID FROM DISBRSMT_LINE_ITEM_DATA FF WHERE LOAD_DATE = IN_DATE) FF
    LEFT JOIN
    (
    SELECT 
        'O' TRANSACTION_SOURCE2,
        'O' TRANSACTION_TYPE2,
        CH.STORE_NO COST_CENTER_CODE2,
        LPAD(CDL.DRAFT_NBR ,10,'0') AS CHECK_SERIAL_NUMBER2,
        '1'||TO_CHAR(TO_DATE(IN_DATE), 'yymmdd') AS PROCESS_DATE2,
        --NULL AS PROCESS_DATE2, 
        CAST(NULL AS VARCHAR2(100))FILLER2,
        'O' TRANSACTION_SEGMENT_TYPE2,
        --CAST(NULL AS VARCHAR2(100)) ITEM_EXT_AMOUNT_SIGN2,
        --CAST((CASE WHEN CML.AMT < 0 THEN '-' ELSE NULL END) AS VARCHAR2(100)) ITEM_EXT_AMOUNT_SIGN2,
        NULL ITEM_EXT_AMOUNT_SIGN2,  -- Not considering the sign instead of negating
        SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CML.AMT, '-', ''), '0', '9', '2')ITEM_EXT_AMOUNT2,
       -- SUBSTR(CML.PRIMESUB, 1, 4) GL_PRIME_ACCOUNT_NUMBER2,
        SUBSTR(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CML.PRIMESUB, '0', 7), 1, 4) GL_PRIME_ACCOUNT_NUMBER2,
        SUBSTR(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CML.PRIMESUB, '0', 7), 5, 3)GL_SUB_ACCOUNT_NUMBER2
    FROM PNP_CCN_HEADERS CH,
         PNP_CCN_DRAFT_LOGS CDL,
         PNP_CCN_MISC_LINES CML
    WHERE CH.TRAN_GUID       = CDL.TRAN_GUID
      AND CH.TRAN_GUID       = CML.TRAN_GUID
      AND TO_CHAR(CH.TRANID) = '82'
      AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                FROM PNP_CCN_LOAD_STATUS)
      AND CH.RLS_RUN_CYCLE = CDL.RLS_RUN_CYCLE
      AND CH.RLS_RUN_CYCLE = CML.RLS_RUN_CYCLE) POS
    ON (
        FF.CHECK_SERIAL_NUMBER = POS.CHECK_SERIAL_NUMBER2 AND 
        FF.ITEM_EXT_AMOUNT = POS.ITEM_EXT_AMOUNT2 
        )
    WHERE 
        NVL(FF.COST_CENTER_CODE,C_CHAR)       <> NVL(POS.COST_CENTER_CODE2,C_CHAR)        OR
        NVL(FF.CHECK_SERIAL_NUMBER,C_CHAR)    <> NVL(POS.CHECK_SERIAL_NUMBER2,C_CHAR)     OR 
        NVL(FF.ITEM_EXT_AMOUNT_SIGN,C_CHAR)   <> NVL(POS.ITEM_EXT_AMOUNT_SIGN2,C_CHAR)     OR
        NVL(FF.GL_PRIME_ACCOUNT_NUMBER,C_CHAR)<> NVL(POS.GL_PRIME_ACCOUNT_NUMBER2,C_CHAR) OR
        NVL(FF.GL_SUB_ACCOUNT_NUMBER,C_CHAR)  <> NVL(POS.GL_SUB_ACCOUNT_NUMBER2,C_CHAR);


V_FILE_NAME                         VARCHAR2(100) := 'DISBRSMT_LINE_ITEM_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;

    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);

    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('DISBRSMT_LINE_ITEM_DATA');

    UPDATE_COMMENTS_SP('DISBRSMT_LINE_ITEM_DATA',NULL,NULL,IN_DATE);

    FOR REC IN FF_RECONCILE_CUR LOOP

        IF REC.CHECK_SERIAL_NUMBER2 IS NULL THEN
            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1; 
            UPDATE_COMMENTS_SP('DISBRSMT_LINE_ITEM_DATA',REC.TGT_ROWID, C_MISSING_COMMENTS,IN_DATE);
            G_REC1 :=   G_REC1||'LEGACY'||C_SEPARATOR
                       ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.CHECK_SERIAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.PROCESS_DATE||'"'||C_SEPARATOR
                       ||'"'||REC.ITEM_EXT_AMOUNT_SIGN||'"'||C_SEPARATOR
                       ||'"'||REC.ITEM_EXT_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GL_PRIME_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GL_SUB_ACCOUNT_NUMBER||'"'|| CHR(9) ||CHR(10);
        ELSIF  
            REC.CHECK_SERIAL_NUMBER IS NOT NULL AND REC.CHECK_SERIAL_NUMBER2 IS NOT NULL THEN
            G_UNMATCHED_COUNT := G_UNMATCHED_COUNT+1;
            
            IF NVL(REC.COST_CENTER_CODE,C_CHAR) <> NVL(REC.COST_CENTER_CODE2,C_CHAR) THEN
               REC.COST_CENTER_CODE := C_MISMATCH_IND||REC.COST_CENTER_CODE;
               REC.COST_CENTER_CODE2 := C_MISMATCH_IND||REC.COST_CENTER_CODE2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'COST_CENTER_CODE';
            END IF;
            IF NVL(REC.CHECK_SERIAL_NUMBER,C_CHAR) <> NVL(REC.CHECK_SERIAL_NUMBER2,C_CHAR) THEN
               REC.CHECK_SERIAL_NUMBER := C_MISMATCH_IND||REC.CHECK_SERIAL_NUMBER;
               REC.CHECK_SERIAL_NUMBER2 := C_MISMATCH_IND||REC.CHECK_SERIAL_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'CHECK_SERIAL_NUMBER';
            END IF;
            IF NVL(REC.GL_PRIME_ACCOUNT_NUMBER,C_CHAR) <> NVL(REC.GL_PRIME_ACCOUNT_NUMBER2,C_CHAR) THEN
               REC.GL_PRIME_ACCOUNT_NUMBER := C_MISMATCH_IND||REC.GL_PRIME_ACCOUNT_NUMBER;
               REC.GL_PRIME_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.GL_PRIME_ACCOUNT_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GL_PRIME_ACCOUNT_NUMBER';
            END IF;
            IF NVL(REC.GL_SUB_ACCOUNT_NUMBER,C_CHAR) <> NVL(REC.GL_SUB_ACCOUNT_NUMBER2,C_CHAR) THEN
               REC.GL_SUB_ACCOUNT_NUMBER := C_MISMATCH_IND||REC.GL_SUB_ACCOUNT_NUMBER;
               REC.GL_SUB_ACCOUNT_NUMBER2 := C_MISMATCH_IND||REC.GL_SUB_ACCOUNT_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GL_SUB_ACCOUNT_NUMBER';
            END IF;
            IF NVL(REC.ITEM_EXT_AMOUNT_SIGN,C_CHAR) <> NVL(REC.ITEM_EXT_AMOUNT_SIGN2,C_CHAR) THEN
               REC.ITEM_EXT_AMOUNT_SIGN := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT_SIGN;
               REC.ITEM_EXT_AMOUNT_SIGN2 := C_MISMATCH_IND||REC.ITEM_EXT_AMOUNT_SIGN2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'ITEM_EXT_AMOUNT_SIGN';
            END IF;
            G_REC2 := G_REC2||'LEGACY'||C_SEPARATOR
                       ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.CHECK_SERIAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.PROCESS_DATE||'"'||C_SEPARATOR
                       ||'"'||REC.ITEM_EXT_AMOUNT_SIGN||'"'||C_SEPARATOR
                       ||'"'||REC.ITEM_EXT_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GL_PRIME_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GL_SUB_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR||CHR(10)||
                                      'POS'||C_SEPARATOR
                       ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.CHECK_SERIAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.PROCESS_DATE2||'"'||C_SEPARATOR
                       ||'"'||REC.ITEM_EXT_AMOUNT_SIGN2||'"'||C_SEPARATOR
                       ||'"'||REC.ITEM_EXT_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GL_PRIME_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                       ||'"'||REC.GL_SUB_ACCOUNT_NUMBER2||'"'|| CHR(9) ||CHR(10); 
        UPDATE_COMMENTS_SP('DISBRSMT_LINE_ITEM_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS- COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
        G_MISMATCH_COLUMN_NAME := NULL;
        END IF;

    END LOOP; 

    G_REPORT := C_FILE_HEADER||CHR(10);
    G_REPORT := G_REPORT||C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)
                ||G_REC2||CHR(10);
    G_REPORT := G_REPORT||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                 RETURN_SUMMARY_STRING('DISBRSMT_LINE_ITEM_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);

 COMMIT; 

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'STORE_DRAFT_DISBRSMT_DIFF_sp'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END STORE_DRAFT_DISBRSMT_DIFF_SP;


PROCEDURE CUSTOMER_DIFF_SP(
/**************************************************************** 
This Procedure is used compare the legacy customer load 
and the POSXML customer load and creats a Difference file.

created : 12/21/2016 MXK766/NXK927 CCN Project
changed : 
*****************************************************************/
    IN_DATE IN DATE)
IS
    CURSOR FF_RECONCILE_CUR IS
    SELECT 
        COST_CENTER_CODE AS COST_CENTER_CODE,
        TERMINAL_NUMBER AS TERMINAL_NUMBER,
        TRANSACTION_NUMBER AS TRANSACTION_NUMBER,
        SORT_FORCE AS SORT_FORCE,
        SEGMENT_CODE AS SEGMENT_CODE,
        SUB_SEGMENT_CODE AS SUB_SEGMENT_CODE,
        FILLER AS FILLER,
        CAST(TRANSACTION_DATE AS VARCHAR2(100)) AS TRANSACTION_DATE,
        CUSTOMER_ACCOUNT_NUMBER AS CUSTOMER_ACCOUNT_NUMBER,
        CAST(CUSTOMER_JOB_NUMBER AS VARCHAR2(100)) AS CUSTOMER_JOB_NUMBER,
        POS_TRANSACTION_NUMBER_BATCH AS POS_TRANSACTION_NUMBER_BATCH,
        CAST(POS_TRANSACTION_TIME AS VARCHAR2(100)) AS POS_TRANSACTION_TIME,
        CYCLE_RUN_NUMBER AS CYCLE_RUN_NUMBER,
        CAST(EMPLOYEE_NUMBER AS VARCHAR2(100)) AS EMPLOYEE_NUMBER,
        POS_MODE_INDICATOR AS POS_MODE_INDICATOR,
        BUSINESS_TYPE_CODE AS BUSINESS_TYPE_CODE,
        SLS_TERRITORY_NUMBER AS SLS_TERRITORY_NUMBER,
        SLS_TERRITORY_NUMBER_NO_CORR AS SLS_TERRITORY_NUMBER_NO_CORR,
        TERRITORY_SPLIT_INDICATOR AS TERRITORY_SPLIT_INDICATOR,
        CAST(POS_TRANSACTION_CODE AS VARCHAR2(100)) AS POS_TRANSACTION_CODE,
        POS_TRANSACTION_DATE AS POS_TRANSACTION_DATE,
        POS_TERMINAL_NUMBER AS POS_TERMINAL_NUMBER,
        POS_TRANSACTION_NUMBER AS POS_TRANSACTION_NUMBER,
        DATA_INDICATOR AS DATA_INDICATOR,
        PURCHASE_ORDER_NUMBER AS PURCHASE_ORDER_NUMBER,
        DATA_SOURCE AS DATA_SOURCE,
        LOAD_DATE AS LOAD_DATE,
        COMMENTS AS COMMENTS,
        TGT_ROWID AS TGT_ROWID,
        COST_CENTER_CODE2 AS COST_CENTER_CODE2,
        TERMINAL_NUMBER2 AS TERMINAL_NUMBER2,
        TRANSACTION_NUMBER2 AS TRANSACTION_NUMBER2,
        SORT_FORCE2 AS SORT_FORCE2,
        SEGMENT_CODE2 AS SEGMENT_CODE2,
        SUB_SEGMENT_CODE2 AS SUB_SEGMENT_CODE2,
        FILLER2 AS FILLER2,
        CAST(TRANSACTION_DATE2 AS VARCHAR2(100)) AS TRANSACTION_DATE2,
        CUSTOMER_ACCOUNT_NUMBER2 AS CUSTOMER_ACCOUNT_NUMBER2,
        CAST(CUSTOMER_JOB_NUMBER2 AS VARCHAR2(100)) AS CUSTOMER_JOB_NUMBER2,
        POS_TRANSACTION_NUMBER_BATCH2 AS POS_TRANSACTION_NUMBER_BATCH2,
        CAST(POS_TRANSACTION_TIME2 AS VARCHAR2(100)) AS POS_TRANSACTION_TIME2,
        CYCLE_RUN_NUMBER2 AS CYCLE_RUN_NUMBER2,
        CAST(EMPLOYEE_NUMBER2 AS VARCHAR2(100)) AS EMPLOYEE_NUMBER2,
        POS_MODE_INDICATOR2 AS POS_MODE_INDICATOR2,
        BUSINESS_TYPE_CODE2 AS BUSINESS_TYPE_CODE2,
        SLS_TERRITORY_NUMBER2 AS SLS_TERRITORY_NUMBER2,
        SLS_TERRITORY_NUMBER_NO_CORR2 AS SLS_TERRITORY_NUMBER_NO_CORR2,
        TERRITORY_SPLIT_INDICATOR2 AS TERRITORY_SPLIT_INDICATOR2,
        CAST(POS_TRANSACTION_CODE2 AS VARCHAR2(100)) AS POS_TRANSACTION_CODE2,
        POS_TRANSACTION_DATE2 AS POS_TRANSACTION_DATE2,
        POS_TERMINAL_NUMBER2 AS POS_TERMINAL_NUMBER2,
        POS_TRANSACTION_NUMBER2 AS POS_TRANSACTION_NUMBER2,
        DATA_INDICATOR2 AS DATA_INDICATOR2,
        PURCHASE_ORDER_NUMBER2 AS PURCHASE_ORDER_NUMBER2 
    FROM
    (
    SELECT FF.*, ROWID AS TGT_ROWID FROM CUSTOMER_DATA FF WHERE LOAD_DATE = IN_DATE
    ) FF
    LEFT JOIN 
    (
    SELECT 
        CH.STORE_NO COST_CENTER_CODE2,
        TRIM(TO_CHAR(CH.TERMNBR)) TERMINAL_NUMBER2,
        LPAD(TRIM(CH.TRANNBR),5,'0') TRANSACTION_NUMBER2,
        'O' SORT_FORCE2,
        'O' SEGMENT_CODE2,
        'O' SUB_SEGMENT_CODE2,
        NULL FILLER2,
        '1'||TO_CHAR(TO_DATE(CH.TRAN_DATE), 'yymmdd')TRANSACTION_DATE2,
        (CASE TRIM(CH.ACCTNBR) WHEN '1' THEN '000000000' WHEN '9' THEN '000000000' ELSE TRIM(CH.ACCTNBR) END) CUSTOMER_ACCOUNT_NUMBER2,
        (CASE TRIM(CH.ACCTNBR) WHEN '1' THEN '00' ELSE SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.JOBNBR, '0', '2') END)CUSTOMER_JOB_NUMBER2,
        'O' POS_TRANSACTION_NUMBER_BATCH2, 
        SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(TO_CHAR(CH.TRAN_TIMESTAMP, 'HH24MI'), '0', '4') AS POS_TRANSACTION_TIME2,
        SUBSTR(CH.RLS_RUN_CYCLE, 1, 2) CYCLE_RUN_NUMBER2,
        LPAD(TRIM(CH.EMP_NO),'2',0) EMPLOYEE_NUMBER2,
        'O' POS_MODE_INDICATOR2,          
        SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CH.CUSTTYPNBR, '0', '2') BUSINESS_TYPE_CODE2,
        CH.TERRNBR SLS_TERRITORY_NUMBER2,
        'O' SLS_TERRITORY_NUMBER_NO_CORR2,
        'O' TERRITORY_SPLIT_INDICATOR2,
        TRIM(TO_CHAR(CH.TRANID)) POS_TRANSACTION_CODE2,
        'O' POS_TRANSACTION_DATE2,
        'O' POS_TERMINAL_NUMBER2,
        'O' POS_TRANSACTION_NUMBER2,
        'O' DATA_INDICATOR2,
        SUBSTR(CH.PONBR, 1, 20) PURCHASE_ORDER_NUMBER2
    FROM PNP_CCN_HEADERS CH
   WHERE CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                FROM PNP_CCN_LOAD_STATUS)) POS
    ON (
        FF.COST_CENTER_CODE = POS.COST_CENTER_CODE2     AND 
        FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER2       AND 
        FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER2 AND 
        FF.CUSTOMER_ACCOUNT_NUMBER = POS.CUSTOMER_ACCOUNT_NUMBER2
        )
    WHERE 
       -- NVL(FF.TRANSACTION_DATE,C_CHAR) <> NVL(POS.TRANSACTION_DATE2,C_CHAR)         OR
       -- NVL(FF.CUSTOMER_JOB_NUMBER,C_CHAR) <> NVL(POS.CUSTOMER_JOB_NUMBER2,C_CHAR)   OR
       -- NVL(FF.POS_TRANSACTION_TIME,C_CHAR) <> NVL(POS.POS_TRANSACTION_TIME2,C_CHAR) OR
        NVL(FF.EMPLOYEE_NUMBER,C_CHAR) <> NVL(POS.EMPLOYEE_NUMBER2,C_CHAR)           OR
        NVL(FF.POS_TRANSACTION_CODE,C_CHAR) <> NVL(POS.POS_TRANSACTION_CODE2,C_CHAR);
      
V_FILE_NAME                         VARCHAR2(100) := 'CUSTOMER_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);
    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CUSTOMER_DATA');
    UPDATE_COMMENTS_SP('CUSTOMER_DATA',NULL,NULL,IN_DATE);

    FOR REC IN FF_RECONCILE_CUR LOOP
        IF REC.COST_CENTER_CODE2 IS NULL THEN
            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1; 
            UPDATE_COMMENTS_SP('CUSTOMER_DATA',REC.TGT_ROWID, C_MISSING_COMMENTS,IN_DATE);
            G_REC1 := G_REC1||'LEGACY'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TERMINAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_DATE||'"'||C_SEPARATOR
                      ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.CUSTOMER_JOB_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.POS_TRANSACTION_TIME||'"'||C_SEPARATOR
                      ||'"'||REC.EMPLOYEE_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.BUSINESS_TYPE_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.SLS_TERRITORY_NUMBER||'"'||C_SEPARATOR
                      ||'"'||REC.POS_TRANSACTION_CODE||'"'|| CHR(9) ||CHR(10);
        ELSIF  REC.COST_CENTER_CODE IS NOT NULL AND REC.COST_CENTER_CODE2 IS NOT NULL THEN  
            G_UNMATCHED_COUNT := G_UNMATCHED_COUNT+1; 
            
            IF NVL(REC.TRANSACTION_DATE,C_CHAR) <> NVL(REC.TRANSACTION_DATE2,C_CHAR) THEN
               REC.TRANSACTION_DATE := C_MISMATCH_IND||REC.TRANSACTION_DATE;
               REC.TRANSACTION_DATE2 := C_MISMATCH_IND||REC.TRANSACTION_DATE2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'TRANSACTION_DATE';
            END IF;
            IF NVL(REC.CUSTOMER_JOB_NUMBER,C_CHAR) <> NVL(REC.CUSTOMER_JOB_NUMBER2,C_CHAR) THEN
               REC.CUSTOMER_JOB_NUMBER := C_MISMATCH_IND||REC.CUSTOMER_JOB_NUMBER;
               REC.CUSTOMER_JOB_NUMBER2 := C_MISMATCH_IND||REC.CUSTOMER_JOB_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'CUSTOMER_JOB_NUMBER';
            END IF;
            IF NVL(REC.POS_TRANSACTION_TIME,C_CHAR) <> NVL(REC.POS_TRANSACTION_TIME2,C_CHAR) THEN
               REC.POS_TRANSACTION_TIME := C_MISMATCH_IND||REC.POS_TRANSACTION_TIME;
               REC.POS_TRANSACTION_TIME2 := C_MISMATCH_IND||REC.POS_TRANSACTION_TIME2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'POS_TRANSACTION_TIME';
            END IF;
            IF NVL(REC.EMPLOYEE_NUMBER,C_CHAR) <> NVL(REC.EMPLOYEE_NUMBER2,C_CHAR) THEN
               REC.EMPLOYEE_NUMBER := C_MISMATCH_IND||REC.EMPLOYEE_NUMBER;
               REC.EMPLOYEE_NUMBER2 := C_MISMATCH_IND||REC.EMPLOYEE_NUMBER2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'EMPLOYEE_NUMBER';
            END IF;
            IF NVL(REC.POS_TRANSACTION_CODE,C_CHAR) <> NVL(REC.POS_TRANSACTION_CODE2,C_CHAR) THEN
               REC.POS_TRANSACTION_CODE := C_MISMATCH_IND||REC.POS_TRANSACTION_CODE;
               REC.POS_TRANSACTION_CODE2 := C_MISMATCH_IND||REC.POS_TRANSACTION_CODE2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'POS_TRANSACTION_CODE';
            END IF;
            G_REC2 := G_REC2||'LEGACY'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TERMINAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_DATE||'"'||C_SEPARATOR
                      ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.CUSTOMER_JOB_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.POS_TRANSACTION_TIME||'"'||C_SEPARATOR
                      ||'"'||REC.EMPLOYEE_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.BUSINESS_TYPE_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.SLS_TERRITORY_NUMBER||'"'||C_SEPARATOR
                      ||'"'||REC.POS_TRANSACTION_CODE||'"'|| CHR(9) ||C_SEPARATOR||CHR(10)||
                                      'POS'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_DATE2||'"'||C_SEPARATOR
                      ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.CUSTOMER_JOB_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.POS_TRANSACTION_TIME2||'"'||C_SEPARATOR
                      ||'"'||REC.EMPLOYEE_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.BUSINESS_TYPE_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.SLS_TERRITORY_NUMBER2||'"'||C_SEPARATOR
                      ||'"'||REC.POS_TRANSACTION_CODE2||'"'|| CHR(9) ||CHR(10);
            UPDATE_COMMENTS_SP('CUSTOMER_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS- COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
            G_MISMATCH_COLUMN_NAME := NULL;          
        END IF;
    END LOOP; 

    G_REPORT := C_FILE_HEADER||CHR(10);
    G_REPORT := G_REPORT||C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10) 
                ||G_REC2||CHR(10);             
    G_REPORT := G_REPORT|| 
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                 RETURN_SUMMARY_STRING('CUSTOMER_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);
                             
    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'CUSTOMER_DIFF_sp'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END CUSTOMER_DIFF_SP;


PROCEDURE CSTMR_DETAILS_DIFF_SP(
/*********************************************************************** 
This Procedure is used compare the legacy customer details load 
and the POSXML customer details load and creats a Difference file.
        
created : 12/21/2016 MXK766/NXK927 CCN Project
changed :  
************************************************************************/
    IN_DATE IN DATE)
IS
    CURSOR FF_RECONCILE_CUR IS
    SELECT 
       TERMINAL_NUMBER2 AS TERMINAL_NUMBER2,
       TRANSACTION_NUMBER2 AS TRANSACTION_NUMBER2,
       SORT_FORCE2 AS SORT_FORCE2,
       SEGMENT_CODE2 AS SEGMENT_CODE2,
       SUB_SEGMENT_CODE2 AS SUB_SEGMENT_CODE2,
       FILLER2 AS FILLER2,
       SALES_NUMBER2 AS SALES_NUMBER2,
       ITEM_QUANTITY_SIGN2 AS ITEM_QUANTITY_SIGN2,
       ITEM_QUANTITY2 AS ITEM_QUANTITY2,
       ITEM_PRICE_SIGN2 AS ITEM_PRICE_SIGN2,
       ITEM_PRICE2 AS ITEM_PRICE2,
       ITEM_EXTERNAL_AMOUNT_SIGN2 AS ITEM_EXTERNAL_AMOUNT_SIGN2,
       ITEM_EXTERNAL_AMOUNT2 AS ITEM_EXTERNAL_AMOUNT2,
       ITEM_DISC_AMOUNT_SIGN2 AS ITEM_DISC_AMOUNT_SIGN2,
       ITEM_DISC_AMOUNT2 AS ITEM_DISC_AMOUNT2,
       ITEM_SALES_TAX_INDICATOR2 AS ITEM_SALES_TAX_INDICATOR2,
       ITEM_DISC_CODE2 AS ITEM_DISC_CODE2,
       ITEM_DISC_TYPE2 AS ITEM_DISC_TYPE2,
       SALES_PROMO_CODE2 AS SALES_PROMO_CODE2,
       CAST(GL_PRIME_ACCOUNT2 AS VARCHAR2(100)) AS GL_PRIME_ACCOUNT2,
       CAST(GL_SUB_ACCOUNT2 AS VARCHAR2(100)) AS GL_SUB_ACCOUNT2,
       SCHEDULE_TYPE2 AS SCHEDULE_TYPE2,
       SCHEDULE_VERSION2 AS SCHEDULE_VERSION2,
       PRICE_LVL_CODE2 AS PRICE_LVL_CODE2,
       PERCENT_OFF_LVL2 AS PERCENT_OFF_LVL2,
       PROD_DESC_SOURCE2 AS PROD_DESC_SOURCE2,
       ORGNL_POS_TERMINAL_NUMBER2 AS ORGNL_POS_TERMINAL_NUMBER2,
       ORGNL_POS_TRANSACTION_NUMBER2 AS ORGNL_POS_TRANSACTION_NUMBER2,
       COST_CENTER_CODE AS COST_CENTER_CODE,
       TERMINAL_NUMBER AS TERMINAL_NUMBER,
       TRANSACTION_NUMBER AS TRANSACTION_NUMBER,
       SALES_NUMBER AS SALES_NUMBER,
       ITEM_QUANTITY AS ITEM_QUANTITY,
       ITEM_PRICE AS ITEM_PRICE,
       ITEM_EXTERNAL_AMOUNT AS ITEM_EXTERNAL_AMOUNT,
       CAST(GL_PRIME_ACCOUNT AS VARCHAR2(100)) AS GL_PRIME_ACCOUNT,
       CAST(GL_SUB_ACCOUNT AS VARCHAR2(100)) AS GL_SUB_ACCOUNT,
       DATA_SOURCE AS DATA_SOURCE,
       LOAD_DATE AS LOAD_DATE,
       COMMENTS AS COMMENTS,
       TGT_ROWID AS TGT_ROWID,
       COST_CENTER_CODE2 AS COST_CENTER_CODE2
    FROM
    (SELECT FF.*, ROWID AS TGT_ROWID FROM CUSTOMER_DETAILS_DATA FF WHERE LOAD_DATE = IN_DATE) FF
    LEFT JOIN 
    (
     SELECT 
         CH.STORE_NO COST_CENTER_CODE2,
         TO_CHAR(CH.TERMNBR) TERMINAL_NUMBER2,
         LPAD(TRIM(CH.TRANNBR),5,'0') TRANSACTION_NUMBER2,
         'O' SORT_FORCE2,
         'O' SEGMENT_CODE2,
         'O' SUB_SEGMENT_CODE2,
         NULL FILLER2,
         (CASE SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CSL.SALESNBR, '0', '9') 
          WHEN '000009126' THEN '000912600' 
          WHEN '000009159' THEN '000915900' 
          WHEN '000009217' THEN '000921700'
          WHEN '000009118' THEN '000911800'
          WHEN '000009134' THEN '000913400'
          ELSE SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CSL.SALESNBR, '0', '9') END) SALES_NUMBER2,
         (CASE WHEN CSL.QTY < 0 THEN '-' ELSE NULL END) ITEM_QUANTITY_SIGN2,
         SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CSL.QTY, '0', '7', '2')ITEM_QUANTITY2,
         (CASE WHEN CSL.PR < 0 THEN '-' ELSE NULL END) ITEM_PRICE_SIGN2,
         SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CSL.PR, '-', ''), '0', '7', '2'), '0', '7')ITEM_PRICE2,
         (CASE WHEN CSL.EXTENDED_PRICE < 0 THEN '-' ELSE NULL END) ITEM_EXTERNAL_AMOUNT_SIGN2,
         SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(REPLACE(CSL.EXTENDED_PRICE, '-', ''), '0', '7', '2'), '0', '7')ITEM_EXTERNAL_AMOUNT2,
         NULL ITEM_DISC_AMOUNT_SIGN2,
         '0000000' ITEM_DISC_AMOUNT2,
         '0' ITEM_SALES_TAX_INDICATOR2,     
         '0' ITEM_DISC_CODE2,
         '0' ITEM_DISC_TYPE2,
         '0' SALES_PROMO_CODE2,
         CSL.PRIME GL_PRIME_ACCOUNT2,
         CSL.SUB GL_SUB_ACCOUNT2,
         NULL SCHEDULE_TYPE2,
         NULL SCHEDULE_VERSION2,
         NULL PRICE_LVL_CODE2,
         '000' PERCENT_OFF_LVL2,
         NULL PROD_DESC_SOURCE2,
         '00000' ORGNL_POS_TERMINAL_NUMBER2,
         '00000' ORGNL_POS_TRANSACTION_NUMBER2
    FROM PNP_CCN_HEADERS CH,
         PNP_CCN_SALES_LINES CSL
   WHERE CH.TRAN_GUID = CSL.TRAN_GUID 
     AND CH.RLS_RUN_CYCLE = (SELECT MAX(RLS_RUN_CYCLE) 
                                FROM PNP_CCN_LOAD_STATUS)
     AND CH.RLS_RUN_CYCLE = CSL.RLS_RUN_CYCLE)POS
    ON 
    (
    FF.COST_CENTER_CODE = POS.COST_CENTER_CODE2  
    AND FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER2  
    AND FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER2 
    AND FF.SALES_NUMBER = POS.SALES_NUMBER2
    AND FF.ITEM_QUANTITY = POS.ITEM_QUANTITY2
    AND FF.ITEM_PRICE = POS.ITEM_PRICE2
    AND FF.ITEM_EXTERNAL_AMOUNT = POS.ITEM_EXTERNAL_AMOUNT2
    ) 
    WHERE 
        NVL(FF.GL_PRIME_ACCOUNT,C_CHAR) <> NVL(POS.GL_PRIME_ACCOUNT2,C_CHAR) OR
        NVL(FF.GL_SUB_ACCOUNT,C_CHAR) <> NVL(POS.GL_SUB_ACCOUNT2,C_CHAR);
      
    V_FILE_NAME    VARCHAR2(100) := 'CUSTOMER_DETAILS_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);
    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CUSTOMER_DETAILS_DATA');
    UPDATE_COMMENTS_SP('CUSTOMER_DETAILS_DATA',NULL,NULL,IN_DATE);

    FOR REC IN FF_RECONCILE_CUR LOOP

        IF REC.COST_CENTER_CODE2 IS NULL THEN
            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1; 
            UPDATE_COMMENTS_SP('CUSTOMER_DETAILS_DATA',REC.TGT_ROWID, C_MISSING_COMMENTS,IN_DATE);
            G_REC1 := G_REC1||'LEGACY'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TERMINAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.SALES_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_EXTERNAL_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_PRIME_ACCOUNT||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_SUB_ACCOUNT||'"'|| CHR(9) ||CHR(10);
        ELSIF  
            REC.COST_CENTER_CODE IS NOT NULL AND REC.COST_CENTER_CODE2 IS NOT NULL THEN
            G_UNMATCHED_COUNT := G_UNMATCHED_COUNT+1;
            
             IF NVL(REC.GL_PRIME_ACCOUNT,C_CHAR) <> NVL(REC.GL_PRIME_ACCOUNT2,C_CHAR) THEN
               REC.GL_PRIME_ACCOUNT  := C_MISMATCH_IND||REC.GL_PRIME_ACCOUNT;
               REC.GL_PRIME_ACCOUNT2 := C_MISMATCH_IND||REC.GL_PRIME_ACCOUNT2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GL_PRIME_ACCOUNT';
            END IF;
            IF NVL(REC.GL_SUB_ACCOUNT,C_CHAR) <> NVL(REC.GL_SUB_ACCOUNT2,C_CHAR) THEN
               REC.GL_SUB_ACCOUNT  := C_MISMATCH_IND||REC.GL_SUB_ACCOUNT;
               REC.GL_SUB_ACCOUNT2 := C_MISMATCH_IND||REC.GL_SUB_ACCOUNT2;
               G_MISMATCH_COLUMN_NAME:= G_MISMATCH_COLUMN_NAME||','||'GL_SUB_ACCOUNT';
            END IF;
            G_REC2 := G_REC2||'LEGACY'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TERMINAL_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.SALES_NUMBER||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_EXTERNAL_AMOUNT||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_PRIME_ACCOUNT||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_SUB_ACCOUNT||'"'|| CHR(9) ||C_SEPARATOR||CHR(10)||
                                      'POS'||C_SEPARATOR
                      ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.SALES_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_QUANTITY2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_PRICE2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.ITEM_EXTERNAL_AMOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_PRIME_ACCOUNT2||'"'|| CHR(9) ||C_SEPARATOR
                      ||'"'||REC.GL_SUB_ACCOUNT2||'"'|| CHR(9) ||CHR(10);
           UPDATE_COMMENTS_SP('CUSTOMER_DETAILS_DATA',REC.TGT_ROWID, 'MAINFRAME DATA MIS-MATCH WITH NEW POS- COLUMNS TO CHECK: '|| G_MISMATCH_COLUMN_NAME,IN_DATE);
           G_MISMATCH_COLUMN_NAME := NULL;           
        END IF;

    END LOOP;

    G_REPORT := C_FILE_HEADER||CHR(10);
    G_REPORT := G_REPORT||C_FILE_RECONCILE_LEGACY||CHR(10)||
                G_HEADER||CHR(10)
                ||G_REC2||CHR(10);
    G_REPORT := G_REPORT||
                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                 RETURN_SUMMARY_STRING('CUSTOMER_DETAILS_DATA',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);

    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'CSTMR_DETAILS_DIFF_sp'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END CSTMR_DETAILS_DIFF_SP;

--PROCEDURE POS_CUSTOMER_DIFF_SP(
--/**************************************************************** 
--This Procedure is used compare the legacy customer load 
--and the POSXML customer load and creats a Difference file.
--
--created : 02/23/2016 NXK927/VXV CCN Project
--changed : 
--*****************************************************************/
--    IN_DATE IN DATE)
--IS
--    CURSOR FF_RECONCILE_CUR IS
--    SELECT 
--        COST_CENTER_CODE AS COST_CENTER_CODE,
--        TERMINAL_NUMBER AS TERMINAL_NUMBER,
--        TRANSACTION_NUMBER AS TRANSACTION_NUMBER,
--        SORT_FORCE AS SORT_FORCE,
--        SEGMENT_CODE AS SEGMENT_CODE,
--        SUB_SEGMENT_CODE AS SUB_SEGMENT_CODE,
--        FILLER AS FILLER,
--        CAST(TRANSACTION_DATE AS VARCHAR2(100)) AS TRANSACTION_DATE,
--        CUSTOMER_ACCOUNT_NUMBER AS CUSTOMER_ACCOUNT_NUMBER,
--        CAST(CUSTOMER_JOB_NUMBER AS VARCHAR2(100)) AS CUSTOMER_JOB_NUMBER,
--        POS_TRANSACTION_NUMBER_BATCH AS POS_TRANSACTION_NUMBER_BATCH,
--        CAST(POS_TRANSACTION_TIME AS VARCHAR2(100)) AS POS_TRANSACTION_TIME,
--        CYCLE_RUN_NUMBER AS CYCLE_RUN_NUMBER,
--        CAST(EMPLOYEE_NUMBER AS VARCHAR2(100)) AS EMPLOYEE_NUMBER,
--        POS_MODE_INDICATOR AS POS_MODE_INDICATOR,
--        BUSINESS_TYPE_CODE AS BUSINESS_TYPE_CODE,
--        SLS_TERRITORY_NUMBER AS SLS_TERRITORY_NUMBER,
--        SLS_TERRITORY_NUMBER_NO_CORR AS SLS_TERRITORY_NUMBER_NO_CORR,
--        TERRITORY_SPLIT_INDICATOR AS TERRITORY_SPLIT_INDICATOR,
--        CAST(POS_TRANSACTION_CODE AS VARCHAR2(100)) AS POS_TRANSACTION_CODE,
--        POS_TRANSACTION_DATE AS POS_TRANSACTION_DATE,
--        POS_TERMINAL_NUMBER AS POS_TERMINAL_NUMBER,
--        POS_TRANSACTION_NUMBER AS POS_TRANSACTION_NUMBER,
--        DATA_INDICATOR AS DATA_INDICATOR,
--        PURCHASE_ORDER_NUMBER AS PURCHASE_ORDER_NUMBER,
--        DATA_SOURCE AS DATA_SOURCE,
--        LOAD_DATE AS LOAD_DATE,
--        COMMENTS AS COMMENTS,
--        TGT_ROWID AS TGT_ROWID,
--        COST_CENTER_CODE2 AS COST_CENTER_CODE2,
--        TERMINAL_NUMBER2 AS TERMINAL_NUMBER2,
--        TRANSACTION_NUMBER2 AS TRANSACTION_NUMBER2,
--        SORT_FORCE2 AS SORT_FORCE2,
--        SEGMENT_CODE2 AS SEGMENT_CODE2,
--        SUB_SEGMENT_CODE2 AS SUB_SEGMENT_CODE2,
--        FILLER2 AS FILLER2,
--        CAST(TRANSACTION_DATE2 AS VARCHAR2(100)) AS TRANSACTION_DATE2,
--        CUSTOMER_ACCOUNT_NUMBER2 AS CUSTOMER_ACCOUNT_NUMBER2,
--        CAST(CUSTOMER_JOB_NUMBER2 AS VARCHAR2(100)) AS CUSTOMER_JOB_NUMBER2,
--        POS_TRANSACTION_NUMBER_BATCH2 AS POS_TRANSACTION_NUMBER_BATCH2,
--        CAST(POS_TRANSACTION_TIME2 AS VARCHAR2(100)) AS POS_TRANSACTION_TIME2,
--        CYCLE_RUN_NUMBER2 AS CYCLE_RUN_NUMBER2,
--        CAST(EMPLOYEE_NUMBER2 AS VARCHAR2(100)) AS EMPLOYEE_NUMBER2,
--        POS_MODE_INDICATOR2 AS POS_MODE_INDICATOR2,
--        BUSINESS_TYPE_CODE2 AS BUSINESS_TYPE_CODE2,
--        SLS_TERRITORY_NUMBER2 AS SLS_TERRITORY_NUMBER2,
--        SLS_TERRITORY_NUMBER_NO_CORR2 AS SLS_TERRITORY_NUMBER_NO_CORR2,
--        TERRITORY_SPLIT_INDICATOR2 AS TERRITORY_SPLIT_INDICATOR2,
--        CAST(POS_TRANSACTION_CODE2 AS VARCHAR2(100)) AS POS_TRANSACTION_CODE2,
--        POS_TRANSACTION_DATE2 AS POS_TRANSACTION_DATE2,
--        POS_TERMINAL_NUMBER2 AS POS_TERMINAL_NUMBER2,
--        POS_TRANSACTION_NUMBER2 AS POS_TRANSACTION_NUMBER2,
--        DATA_INDICATOR2 AS DATA_INDICATOR2,
--        PURCHASE_ORDER_NUMBER2 AS PURCHASE_ORDER_NUMBER2 
--    FROM
--    (SELECT 
--        CH.COST_CENTER_CODE COST_CENTER_CODE2,
--        CH.TERMINAL_NUMBER TERMINAL_NUMBER2,
--        CH.TRANSACTION_NUMBER TRANSACTION_NUMBER2,
--        CH.SORT_FORCE SORT_FORCE2,
--        CH.SEGMENT_CODE SEGMENT_CODE2,
--        CH.SUB_SEGMENT_CODE SUB_SEGMENT_CODE2,
--        CH.FILLER FILLER2,
--        CH.TRANSACTION_DATE TRANSACTION_DATE2,
--        CH.CUSTOMER_ACCOUNT_NUMBER CUSTOMER_ACCOUNT_NUMBER2,
--        CH.CUSTOMER_JOB_NUMBER CUSTOMER_JOB_NUMBER2,
--        CH.POS_TRANSACTION_NUMBER_BATCH POS_TRANSACTION_NUMBER_BATCH2, 
--        CH.POS_TRANSACTION_TIME POS_TRANSACTION_TIME2,
--        CH.CYCLE_RUN_NUMBER CYCLE_RUN_NUMBER2,
--        CH.EMPLOYEE_NUMBER EMPLOYEE_NUMBER2,
--        CH.POS_MODE_INDICATOR POS_MODE_INDICATOR2,          
--        CH.BUSINESS_TYPE_CODE BUSINESS_TYPE_CODE2,
--        CH.SLS_TERRITORY_NUMBER SLS_TERRITORY_NUMBER2,
--        CH.SLS_TERRITORY_NUMBER_NO_CORR SLS_TERRITORY_NUMBER_NO_CORR2,
--        CH.TERRITORY_SPLIT_INDICATOR TERRITORY_SPLIT_INDICATOR2,
--        Ch.POS_TRANSACTION_CODE POS_TRANSACTION_CODE2,
--        'O' POS_TRANSACTION_DATE2,
--        'O' POS_TERMINAL_NUMBER2,
--        'O' POS_TRANSACTION_NUMBER2,
--        'O' DATA_INDICATOR2,
--        CH.PURCHASE_ORDER_NUMBER PURCHASE_ORDER_NUMBER2
--    FROM DLY_POS_CUSTOMER  CH
--  WHERE LOAD_DATE = IN_DATE
--   ) POS
--    LEFT JOIN 
--    (SELECT FF.*, ROWID AS TGT_ROWID FROM CUSTOMER_DATA FF --WHERE LOAD_DATE = IN_DATE
--    ) FF
--    ON (
--        FF.COST_CENTER_CODE = POS.COST_CENTER_CODE2     AND 
--        FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER2       AND 
--        FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER2 AND 
--        FF.CUSTOMER_ACCOUNT_NUMBER = POS.CUSTOMER_ACCOUNT_NUMBER2
--        )
--    WHERE 
--       -- NVL(FF.TRANSACTION_DATE,C_CHAR) <> NVL(POS.TRANSACTION_DATE2,C_CHAR)         OR
--       -- NVL(FF.CUSTOMER_JOB_NUMBER,C_CHAR) <> NVL(POS.CUSTOMER_JOB_NUMBER2,C_CHAR)   OR
--       -- NVL(FF.POS_TRANSACTION_TIME,C_CHAR) <> NVL(POS.POS_TRANSACTION_TIME2,C_CHAR) OR
--        NVL(FF.EMPLOYEE_NUMBER,C_CHAR) <> NVL(POS.EMPLOYEE_NUMBER2,C_CHAR)           OR
--        NVL(FF.POS_TRANSACTION_CODE,C_CHAR) <> NVL(POS.POS_TRANSACTION_CODE2,C_CHAR);
--      
--V_FILE_NAME                         VARCHAR2(100) := 'POS_CUSTOMER_DATA';
--BEGIN
--    RESET_GLOBAL_VARIABLES_SP;
--    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);
--    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CUSTOMER_DATA');
--   
--    FOR REC IN FF_RECONCILE_CUR LOOP
--        IF REC.COST_CENTER_CODE IS NULL THEN
--            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1; 
--
--            G_REC1 := G_REC1||'LEGACY'||C_SEPARATOR
--                      ||'"'||REC.COST_CENTER_CODE2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.TERMINAL_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.TRANSACTION_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.TRANSACTION_DATE2||'"'||C_SEPARATOR
--                      ||'"'||REC.CUSTOMER_ACCOUNT_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.CUSTOMER_JOB_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.POS_TRANSACTION_TIME2||'"'||C_SEPARATOR
--                      ||'"'||REC.EMPLOYEE_NUMBER2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.BUSINESS_TYPE_CODE2||'"'|| CHR(9) ||C_SEPARATOR
--                      ||'"'||REC.SLS_TERRITORY_NUMBER2||'"'||C_SEPARATOR
--                      ||'"'||REC.POS_TRANSACTION_CODE2||'"'|| CHR(9) ||CHR(10);
--        END IF;
--    END LOOP; 
--
--    G_REPORT := C_FILE_HEADER||CHR(10);
--    G_REPORT := G_REPORT||C_FILE_RECONCILE_LEGACY||CHR(10)||
--                G_HEADER||CHR(10) 
--                ||G_REC2||CHR(10);  
--    G_REPORT := G_REPORT|| 
--                C_FILE_LEGACY_ORPHAN_HEADER||CHR(10)||
--                G_HEADER||CHR(10) ||
--                G_REC1||CHR(10);
--    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
--                 RETURN_SUMMARY_STRING('DLY_POS_CUSTOMER',IN_DATE,G_UNMATCHED_COUNT,G_ORPHAN_COUNT);
--                             
--    G_REPORT := G_REPORT|| G_SUMMARY;
--
--    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
--    
--    COMMIT;
--EXCEPTION
--    WHEN OTHERS THEN
--        ROLLBACK; 
--        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
--                                  ,'POS_CUSTOMER_DIFF_SP'
--                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
--                                  ,'000000'
--                                  ,'0000000000');
--END POS_CUSTOMER_DIFF_SP;

PROCEDURE POS_CUSTOMER_DIFF_SP(
/**************************************************************** 
This Procedure is used compare the legacy customer load 
and the POSXML customer load and creats a Difference file.

created : 02/23/2016 NXK927/VXV CCN Project
changed : 
*****************************************************************/
    IN_DATE IN DATE)
IS
    CURSOR FF_RECONCILE_CUR IS
     SELECT 
        CH.COST_CENTER_CODE ||','||
        CH.TERMINAL_NUMBER  ||','||
        CH.TRANSACTION_NUMBER ||','||
        CH.TRANSACTION_DATE ||','||
        CH.CUSTOMER_ACCOUNT_NUMBER ||','||
        CH.CUSTOMER_JOB_NUMBER ||','||
        CH.POS_TRANSACTION_TIME ||','||
        CH.EMPLOYEE_NUMBER ||','||
        CH.BUSINESS_TYPE_CODE ||','||
        CH.SLS_TERRITORY_NUMBER||','||
        Ch.POS_TRANSACTION_CODE || chr(10) AS CUSTDATA
    FROM DLY_POS_CUSTOMER  CH
  WHERE LOAD_DATE = IN_DATE
    AND NOT EXISTS (SELECT 1 
                      FROM CUSTOMER_DATA FF
                     WHERE FF.COST_CENTER_CODE = CH.COST_CENTER_CODE
                       AND FF.TERMINAL_NUMBER = CH.TERMINAL_NUMBER
                       AND FF.TRANSACTION_NUMBER = CH.TRANSACTION_NUMBER
                       AND FF.CUSTOMER_ACCOUNT_NUMBER = CH.CUSTOMER_ACCOUNT_NUMBER);
      
V_FILE_NAME                         VARCHAR2(100) := 'POS_CUSTOMER_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);
    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CUSTOMER_DATA');
   
    FOR REC IN FF_RECONCILE_CUR LOOP
        --IF REC.COST_CENTER_CODE IS NULL THEN
            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1; 

            G_REC1 := G_REC1 || REC.CUSTDATA;
        --END IF;
    END LOOP; 

    G_REPORT := C_FILE_HEADER||CHR(10);
 
    G_REPORT := G_REPORT|| 
                C_POS_EXTRA_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                 RETURN_SUMMARY_STRING('DLY_POS_CUSTOMER',IN_DATE,0,G_ORPHAN_COUNT);
                             
    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'POS_CUSTOMER_DIFF_SP'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END POS_CUSTOMER_DIFF_SP;


PROCEDURE POS_CSTMR_DETAILS_DIFF_SP(
/*********************************************************************** 
This Procedure is used compare the legacy customer details load 
and the POSXML customer details load and creats a Difference file.
        
created : 12/21/2016 MXK766/NXK927 CCN Project
changed :  
************************************************************************/
    IN_DATE IN DATE)
IS
    CURSOR FF_RECONCILE_CUR IS
    SELECT  COST_CENTER_CODE ||','||
         TERMINAL_NUMBER  ||','||
         TRANSACTION_NUMBER ||','||
         SALES_NUMBER ||','||
         ITEM_QUANTITY ||','||
         ITEM_PRICE   ||','||
         ITEM_EXTERNAL_AMOUNT ||','||
         GL_PRIME_ACCOUNT ||','||
         GL_SUB_ACCOUNT || CHR(10) AS CUSTDATA
    FROM DLY_POS_CUSTOMER_DETAILS POS
    WHERE LOAD_DATE = IN_DATE
    AND NOT EXISTS  (SELECT 1 
                          FROM CUSTOMER_DETAILS_DATA FF
                         WHERE FF.COST_CENTER_CODE = POS.COST_CENTER_CODE
                           AND FF.TERMINAL_NUMBER = POS.TERMINAL_NUMBER
                           AND FF.TRANSACTION_NUMBER = POS.TRANSACTION_NUMBER
                           AND FF.SALES_NUMBER = POS.SALES_NUMBER
                           AND FF.ITEM_QUANTITY = POS.ITEM_QUANTITY
                           AND FF.ITEM_PRICE = POS.ITEM_PRICE
                          AND FF.ITEM_EXTERNAL_AMOUNT = POS.ITEM_EXTERNAL_AMOUNT);
      
    V_FILE_NAME    VARCHAR2(100) := 'POS_CUSTOMER_DETAILS_DATA';
BEGIN
    RESET_GLOBAL_VARIABLES_SP;
    G_DB_DIRECTORY := CCN_COMMON_TOOLS.GET_DATAFILE_PATH_FNC(C_SCHEMA);
    G_HEADER   :=   CCN_COMMON_TOOLS.RETURN_HEADER_STRING('CUSTOMER_DETAILS_DATA');

    FOR REC IN FF_RECONCILE_CUR LOOP

            G_ORPHAN_COUNT := G_ORPHAN_COUNT+1; 
            
            G_REC1 := G_REC1 || REC.CUSTDATA;         

    END LOOP;

    G_REPORT := C_FILE_HEADER||CHR(10);
    
    G_REPORT := G_REPORT||
                C_POS_EXTRA_HEADER||CHR(10)||
                G_HEADER||CHR(10) ||
                G_REC1||CHR(10);
    G_SUMMARY  :=C_FILE_SUMMARY_HEADER||CHR(10)||
                 RETURN_SUMMARY_STRING('DLY_POS_CUSTOMER_DETAILS',IN_DATE,0,G_ORPHAN_COUNT);

    G_REPORT := G_REPORT|| G_SUMMARY;

    CCN_COMMON_TOOLS.WRITE_CLOB_ON_SERVER(G_DB_DIRECTORY,V_FILE_NAME || TO_CHAR(SYSDATE,'_MMDDYY') ||'.csv',G_REPORT);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE
                                  ,'CSTMR_DETAILS_DIFF_sp'
                                  ,SQLERRM||'-'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,'000000'
                                  ,'0000000000');
END POS_CSTMR_DETAILS_DIFF_SP;

END SD_RECONCILE_DIFF_REPORT_PKG;

