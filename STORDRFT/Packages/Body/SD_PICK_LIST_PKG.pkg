create or replace PACKAGE BODY SD_PICK_LIST_PKG
    AS
/**********************************************************
	SD_PICK_LIST_PKG

	This Package is intended to return values for picklists and 
	picklist screen

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/

PROCEDURE CODE_HEADER_ROWTYPE_SP (
/*******************************************************************************
	CODE_HEADER_ROWTYPE_SP

	This procedure is intended to insert new CODE_HEADER records

created : 04/29/2013 jxc517 CCN Project....
changed : 
*******************************************************************************/

in_TABLE_NAME           IN      VARCHAR2 
,in_Row_data            IN      varchar2--sys.xmltype
,out_CODE_HEADER_type       out CODE_HEADER%rowtype)
is 
    v_code number;
    v_errm varchar2(500);

cursor table_fields_cur is
    SELECT column_name
           ,data_length column_size
           ,data_type
      FROM all_tab_columns
     WHERE TABLE_NAME = in_table_name
     order by column_id asc;

    v_CODE_HEADER_row        CODE_HEADER%rowtype;
    v_row_value              varchar2(500);
    v_Row_data               sys.xmltype := xmltype(in_Row_data);
begin
    for table_fields_rec in table_fields_cur loop
        if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
            --v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
            case table_fields_rec.column_name
                when 'CODE_HEADER_NAME' then 
                    v_CODE_HEADER_row.CODE_HEADER_NAME            :=  v_row_value;
                when 'CODE_HEADER_TYPE' then 
                    v_CODE_HEADER_row.CODE_HEADER_TYPE            :=  v_row_value;
                when 'CODE_HEADER_DESCRIPTION' then 
                    v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION     :=  v_row_value;
                when 'CODE_HEADER_EXPIRE_FLAG' then 
                   v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG      :=  v_row_value;
                when 'CODE_HEADER_EXPIRE_USER' then 
                    v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER     :=  v_row_value;
                when 'CODE_HEADER_EXPIRE_EFF_DATE' then 
                    v_CODE_HEADER_row.CODE_HEADER_EXPIRE_EFF_DATE :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                when 'CODE_HEADER_DTL_VAL_SIZE' then 
                    v_CODE_HEADER_row.CODE_HEADER_DTL_VAL_SIZE    :=  v_row_value;
                when 'CODE_HEADER_DTL_VAL_DEFAULT' then 
                    v_CODE_HEADER_row.CODE_HEADER_DTL_VAL_DEFAULT :=  v_row_value;
                when 'CODE_HEADER_CREATE_USER' then 
                    v_CODE_HEADER_row.CODE_HEADER_CREATE_USER     :=  v_row_value;
                when 'CODE_HEADER_EFF_DATE' then 
                    v_CODE_HEADER_row.CODE_HEADER_EFF_DATE        :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                ELSE null;
            END CASE;
        end if;
    end loop ;
    out_CODE_HEADER_type  := v_CODE_HEADER_row;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'CODE_HEADER_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
end CODE_HEADER_ROWTYPE_SP;

PROCEDURE CODE_DETAIL_ROWTYPE_SP (
/*******************************************************************************
	CODE_DETAIL_ROWTYPE_SP

	This procedure is intended to insert new CODE_DETAIL records

created : 04/29/2013 jxc517 CCN Project....
changed : 
*******************************************************************************/

in_TABLE_NAME           IN      VARCHAR2 
,in_Row_data            IN      varchar2--sys.xmltype
,out_CODE_DETAIL_type       out CODE_DETAIL%rowtype)
is 
    v_code number;
    v_errm varchar2(500);

cursor table_fields_cur is
    SELECT column_name
           ,data_length column_size
           ,data_type
      FROM all_tab_columns
     WHERE TABLE_NAME = in_table_name
     order by column_id asc;

    v_CODE_DETAIL_row        CODE_DETAIL%rowtype;
    v_row_value              varchar2(500);
    v_Row_data               sys.xmltype := xmltype(in_Row_data);
begin
    for table_fields_rec in table_fields_cur loop
        if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal();
            --v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
            case table_fields_rec.column_name
                when 'CODE_HEADER_NAME' then 
                    v_CODE_DETAIL_row.CODE_HEADER_NAME            :=  v_row_value;
                when 'CODE_HEADER_TYPE' then 
                    v_CODE_DETAIL_row.CODE_HEADER_TYPE            :=  v_row_value;
                when 'CODE_DETAIL_VALUE' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_VALUE           :=  v_row_value;
                when 'CODE_DETAIL_DESCRIPTION' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION     :=  v_row_value;
                when 'CODE_DETAIL_EXPIRE_FLAG' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG     :=  v_row_value;
                when 'CODE_DETAIL_EXPIRE_USER' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER     :=  v_row_value;
                when 'CODE_DETAIL_EXPIRE_EFF_DATE' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                when 'CODE_DETAIL_ID' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_ID              :=  v_row_value;
                when 'CODE_DETAIL_CREATE_USER' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_CREATE_USER     :=  v_row_value;
                when 'CODE_DETAIL_EFF_DATE' then 
                    v_CODE_DETAIL_row.CODE_DETAIL_EFF_DATE        :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                ELSE null;
            END CASE;
        end if;
    end loop ;
    out_CODE_DETAIL_type  := v_CODE_DETAIL_row;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'CODE_DETAIL_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
end CODE_DETAIL_ROWTYPE_SP;

	PROCEDURE CODE_HEADER_S_SP (
/**********************************************************
	CODE_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE HEADER table

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/	
	in_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
	,in_HEADER_TYPE IN CODE_HEADER.CODE_HEADER_TYPE%TYPE
	, out_CODE_HEADER_CUR OUT REF_CUR_CODE)
IS       
  V_CODE NUMBER;
  v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_HEADER_CUR FOR
		  SELECT *
		  FROM 	CODE_HEADER
		  WHERE CODE_HEADER_NAME = NVL(in_HEADER_NAME, CODE_HEADER_NAME)
		  AND   CODE_HEADER_TYPE = NVL(in_HEADER_TYPE, CODE_HEADER_TYPE);

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'CODE_HEADER_S_SP, ' || ' ' || 'in_HEADER_NAME is ' || in_HEADER_NAME, v_errm);	  

END CODE_HEADER_S_SP;

	PROCEDURE CODE_DETAIL_S_SP (
/**********************************************************
	CODE_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_DETAIL table.  

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
	in_HEADER_NAME IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
	,in_HEADER_TYPE IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
	--,in_DETAIL_VALUE IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
	, out_CODE_DETAIL_CUR OUT REF_CUR_CODE)
IS       
  V_CODE NUMBER;
  V_ERRM VARCHAR2(500);
  
	BEGIN

		  OPEN out_CODE_DETAIL_CUR FOR
			  
		  SELECT * 
		  FROM CODE_DETAIL
		  WHERE CODE_HEADER_NAME = NVL(in_HEADER_NAME, CODE_HEADER_NAME)
		  AND   CODE_HEADER_TYPE = NVL(in_HEADER_TYPE, CODE_HEADER_TYPE)
          order by CODE_DETAIL_ID;
		  --AND   CODE_DETAIL_VALUE = in_DETAIL_VALUE;

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_S_SP, ' || ' ' || 'in_HEADER_NAME is ' || IN_HEADER_NAME, V_ERRM);	  
	  
	END CODE_DETAIL_S_SP;

FUNCTION GET_CODE_DETAIL_VALUE_DSCRPTN (
/**********************************************************
	GET_CODE_DETAIL_VALUE_DSCRPTN

	This procedure is intended to return the description for the code detail value
  from CODE_DETAIL table based on the passed parameters.  

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
	in_HEADER_NAME  IN CODE_DETAIL.CODE_HEADER_NAME%TYPE,
	in_HEADER_TYPE  IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE,
	in_DETAIL_VALUE IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE)
RETURN VARCHAR2
IS       
  V_CODE_DETAIL_DESCRIPTION    CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
BEGIN

		  SELECT CODE_DETAIL_DESCRIPTION
        INTO V_CODE_DETAIL_DESCRIPTION
		    FROM CODE_DETAIL
		   WHERE UPPER(CODE_HEADER_NAME)  = UPPER(in_HEADER_NAME)
		     AND UPPER(CODE_HEADER_TYPE)  = UPPER(in_HEADER_TYPE)
         AND UPPER(CODE_DETAIL_VALUE) = UPPER(in_DETAIL_VALUE);

      RETURN V_CODE_DETAIL_DESCRIPTION;

EXCEPTION
    WHEN OTHERS THEN 
        RETURN NULL;
END GET_CODE_DETAIL_VALUE_DSCRPTN;

	PROCEDURE CODE_DETAIL_DESC_SP (
/**********************************************************
	CODE_DETAIL_DESC_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_DETAIL table.  

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
	in_HEADER_NAME IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
	,in_HEADER_TYPE IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
	,in_DETAIL_VALUE IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
	, out_CODE_DETAIL_CUR OUT REF_CUR_CODE)
IS       
  V_CODE NUMBER;
  V_ERRM VARCHAR2(500);
  
	BEGIN

		  OPEN out_CODE_DETAIL_CUR FOR
			  
		  SELECT * 
		  FROM CODE_DETAIL
		  WHERE CODE_HEADER_NAME = NVL(in_HEADER_NAME, CODE_HEADER_NAME)
		  AND   CODE_HEADER_TYPE = NVL(in_HEADER_TYPE, CODE_HEADER_TYPE)
		  and   CODE_DETAIL_VALUE = NVL(in_DETAIL_VALUE, CODE_DETAIL_VALUE)
          order by CODE_DETAIL_ID;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_DESC_SP, ' || ' ' || 'in_HEADER_NAME is ' || IN_HEADER_NAME, V_ERRM);	  
	    
	END CODE_DETAIL_DESC_SP;

PROCEDURE CODE_DETAIL_INSERT(
/**********************************************************
	CODE_DETAIL_INSERT

	This procedure will insert into the CODE_DETAIL table 

<CODE_DETAIL_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<CODE_DETAIL_TABLE>
  <CODE_DETAIL>
    <CODE_HEADER_NAME>COUNTRY_CODE</CODE_HEADER_NAME>
    <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE>
    <CODE_DETAIL_VALUE>ABW</CODE_DETAIL_VALUE>
    <CODE_DETAIL_DESCRIPTION>ARUBA</CODE_DETAIL_DESCRIPTION>
    <CODE_DETAIL_EXPIRE_FLAG/>
    <CODE_DETAIL_EXPIRE_USER/>
    <CODE_DETAIL_EXPIRE_EFF_DATE/>
    <CODE_DETAIL_ID>2</CODE_DETAIL_ID>
  </CODE_DETAIL>
  <CODE_DETAIL>
    <CODE_HEADER_NAME>COUNTRY_CODE</CODE_HEADER_NAME>
    <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE>
    <CODE_DETAIL_VALUE>ANT</CODE_DETAIL_VALUE>
    <CODE_DETAIL_DESCRIPTION>NETHERLANDS ANTILLES</CODE_DETAIL_DESCRIPTION>
    <CODE_DETAIL_EXPIRE_FLAG/>
    <CODE_DETAIL_EXPIRE_USER/>
    <CODE_DETAIL_EXPIRE_EFF_DATE/>
    <CODE_DETAIL_ID>3</CODE_DETAIL_ID>
  </CODE_DETAIL>
  <CODE_DETAIL>
    <CODE_HEADER_NAME>COUNTRY_CODE</CODE_HEADER_NAME>
    <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE>
    <CODE_DETAIL_VALUE>CAN</CODE_DETAIL_VALUE>
    <CODE_DETAIL_DESCRIPTION>CANADA</CODE_DETAIL_DESCRIPTION>
    <CODE_DETAIL_EXPIRE_FLAG/>
    <CODE_DETAIL_EXPIRE_USER/>
    <CODE_DETAIL_EXPIRE_EFF_DATE/>
    <CODE_DETAIL_ID>4</CODE_DETAIL_ID>
  </CODE_DETAIL>
</CODE_DETAIL_TABLE>
</CODE_DETAIL_UI>

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_XML                      XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_COUNT				             NUMBER := 1;
    V_CONTEXT                  VARCHAR2(100);
    V_CODE_DETAIL_ROW          CODE_DETAIL%ROWTYPE;
    V_CODE_HEADER_DTL_VAL_SIZE CODE_HEADER.CODE_HEADER_DTL_VAL_SIZE%TYPE;
    V_CODE                     NUMBER;
    V_ERRM                     VARCHAR2(500);
    invalid_code_hdr_size_err  EXCEPTION;
BEGIN
    WHILE V_XML.EXISTSNODE('/CODE_DETAIL_UI/CODE_DETAIL_TABLE/CODE_DETAIL' ||  '[' || V_COUNT || ']') = 1 LOOP
        
        V_CONTEXT := 'Building CODE_DETAIL record type';
        CODE_DETAIL_ROWTYPE_SP('CODE_DETAIL',
                               V_XML.EXTRACT('/CODE_DETAIL_UI/CODE_DETAIL_TABLE/CODE_DETAIL' || '[' || V_COUNT || ']').getCLOBVal(),
                               V_CODE_DETAIL_ROW);

        BEGIN
            SELECT CODE_HEADER_DTL_VAL_SIZE
              INTO V_CODE_HEADER_DTL_VAL_SIZE
              FROM CODE_HEADER
             WHERE CODE_HEADER_NAME   	= V_CODE_DETAIL_ROW.CODE_HEADER_NAME
               AND CODE_HEADER_TYPE    = V_CODE_DETAIL_ROW.CODE_HEADER_TYPE;
        EXCEPTION 
            WHEN OTHERS THEN
                V_CODE_HEADER_DTL_VAL_SIZE := NULL;
        END;

        IF V_CODE_HEADER_DTL_VAL_SIZE <> LENGTH(V_CODE_DETAIL_ROW.CODE_DETAIL_VALUE) THEN
            RAISE invalid_code_hdr_size_err;
        END IF;

        V_CONTEXT := 'Inserted in to code_detail table';
        INSERT INTO CODE_DETAIL  VALUES V_CODE_DETAIL_ROW;

        V_COUNT := V_COUNT + 1;
    END LOOP;   

EXCEPTION
    WHEN invalid_code_hdr_size_err THEN
        errpkg.raise_err(errnums.en_code_detail_val_size_err, 
                         'Size of the code detail value should not exceed the value defined in the code header');
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_INSERT, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	  
	    
END CODE_DETAIL_INSERT;


PROCEDURE CODE_DETAIL_UPDATE(
/**********************************************************
	CODE_DETAIL_UPDATE

	This procedure will UPDATE into the table CODE_DETAIL

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_XML                     XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_COUNT				            NUMBER := 1;
    V_CONTEXT                 varchar2(100);
    V_CODE_DETAIL_ROW         CODE_DETAIL%ROWTYPE;
     V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
BEGIN
    WHILE V_XML.EXISTSNODE('/CODE_DETAIL_UI/CODE_DETAIL_TABLE/CODE_DETAIL' ||  '[' || V_COUNT || ']') = 1 LOOP
        
        V_CONTEXT := 'Building CODE_DETAIL record type';
        CODE_DETAIL_ROWTYPE_SP('CODE_DETAIL',
                               V_XML.EXTRACT('/CODE_DETAIL_UI/CODE_DETAIL_TABLE/CODE_DETAIL' || '[' || V_COUNT || ']').getCLOBVal(),
                               V_CODE_DETAIL_ROW);

        V_CONTEXT := 'Updating code_detail table';
        UPDATE CODE_DETAIL  SET ROW = V_CODE_DETAIL_ROW
         WHERE CODE_HEADER_NAME   	= V_CODE_DETAIL_ROW.CODE_HEADER_NAME
           AND CODE_HEADER_TYPE    	= V_CODE_DETAIL_ROW.CODE_HEADER_TYPE
          AND  CODE_DETAIL_VALUE   	= V_CODE_DETAIL_ROW.CODE_DETAIL_VALUE;

        V_COUNT := V_COUNT + 1;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_UPDATE, ' || ' ' || 'in_XML is ' || IN_XML, V_ERRM);	  
	    
END CODE_DETAIL_UPDATE;

PROCEDURE CODE_DETAIL_DELETE(
/**********************************************************
	CODE_DETAIL_DELETE

	This procedure will UPDATE THE EXISTING CODES FROM the table CODE_DETAIL

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_CONTEXT                      VARCHAR2(100);
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
BEGIN

    V_CONTEXT := 'UPDATING FROM CODE_DETAIL';
    SD_PICK_LIST_PKG.CODE_DETAIL_UPDATE(in_XML);

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_DELETE, ' || ' ' || 'in_XML is ' || IN_XML, V_ERRM);	  
	    
   
END CODE_DETAIL_DELETE;

PROCEDURE CODE_HEADER_INSERT(
/**********************************************************
	CODE_HEADER_INSERT

	This procedure will insert into the table CODE_HEADER

<CODE_HEADER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<CODE_HEADER>
  <CODE_HEADER_NAME>COUNTRY_CODE</CODE_HEADER_NAME>
  <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE>
  <CODE_HEADER_DESCRIPTION>COST CENTER COUNTRY CODES</CODE_HEADER_DESCRIPTION>
  <CODE_HEADER_EXPIRE_FLAG></CODE_HEADER_EXPIRE_FLAG>
  <CODE_HEADER_EXPIRE_USER></CODE_HEADER_EXPIRE_USER>
  <CODE_HEADER_EXPIRE_EFF_DATE></CODE_HEADER_EXPIRE_EFF_DATE>
  <CODE_HEADER_DTL_VAL_SIZE>3</CODE_HEADER_DTL_VAL_SIZE>
  <CODE_HEADER_DTL_VAL_DEFAULT></CODE_HEADER_DTL_VAL_DEFAULT>
  <CODE_HEADER_FLAG>S</CODE_HEADER_FLAG>
</CODE_HEADER>
</CODE_HEADER_UI>

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
    in_XML                          VARCHAR2)
IS
    V_CONTEXT                       varchar2(100);
    V_CODE_HEADER_ROW              CODE_HEADER%rowtype;
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
BEGIN

    V_CONTEXT := 'Building CODE_HEADER record type';
    CODE_HEADER_ROWTYPE_SP('CODE_HEADER',
                           --in_XML,
                           SYS.XMLTYPE(in_XML).EXTRACT('/CODE_HEADER_UI/CODE_HEADER[1]').getCLOBVal(),
                           V_CODE_HEADER_ROW);
                                
    V_CONTEXT := 'Inserting in to CODE_HEADER table';
    INSERT INTO CODE_HEADER VALUES V_CODE_HEADER_ROW;

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_HEADER_INSERT, ' || ' ' || 'in_XML is ' || IN_XML, V_ERRM);	  
	 

END CODE_HEADER_INSERT;


PROCEDURE CODE_HEADER_UPDATE(
/**********************************************************
	CODE_HEADER_UPDATE
	
	This procedure will UPDATE into the table CODE_HEADER

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_CONTEXT                       varchar2(100);
    V_CODE_HEADER_ROW               CODE_HEADER%rowtype;
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
BEGIN

    V_CONTEXT := 'Building CODE_HEADER record type';
    CODE_HEADER_ROWTYPE_SP('CODE_HEADER',
                           SYS.XMLTYPE(in_XML).EXTRACT('/CODE_HEADER_UI/CODE_HEADER[1]').getCLOBVal(),
                           V_CODE_HEADER_ROW);
                                
    V_CONTEXT := 'Updating CODE_HEADER table';
    UPDATE CODE_HEADER 
       SET ROW = V_CODE_HEADER_ROW
     WHERE CODE_HEADER_NAME         = V_CODE_HEADER_ROW.CODE_HEADER_NAME
       AND CODE_HEADER_TYPE         = V_CODE_HEADER_ROW.CODE_HEADER_TYPE
       AND CODE_HEADER_DESCRIPTION  = V_CODE_HEADER_ROW.CODE_HEADER_DESCRIPTION;

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_HEADER_UPDATE, ' || ' ' || 'in_XML is ' || IN_XML, V_ERRM);	  
	 
    
END CODE_HEADER_UPDATE;

PROCEDURE CODE_HEADER_DELETE(
/**********************************************************
	CODE_HEADER_DELETE

	This procedure will update existing code header FROM the table CODE_HEADER

created : 04/29/2013 jxc517 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_CONTEXT        VARCHAR2(100);
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
BEGIN

    V_CONTEXT := 'UPDATING FROM CODE_HEADER';
    SD_PICK_LIST_PKG.CODE_HEADER_UPDATE(IN_XML);  
    
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_HEADER_DELETE, ' || ' ' || 'in_XML is ' || IN_XML, V_ERRM);	  

END CODE_HEADER_DELETE;

END SD_PICK_LIST_PKG;

