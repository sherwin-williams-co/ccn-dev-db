create or replace PACKAGE body SD_DAILY_LOAD
/****************************************************************************** 
This package BODY will load:
  
created : 06/11/2014 jxc517 CCN Project....
changed :
******************************************************************************/
AS

PROCEDURE LOAD_DLY_CUSTOMER(
/*****************************************************************************
	LOAD_DLY_CUSTOMER

	This function will load the CUSTOMER table from data  
	file from legacy idms database.  

created : 06/11/2014 jxc517 CCN Project....
changed : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
    CURSOR TEMP_CUR is
        SELECT DLY.*, (SELECT COST_CENTER_CODE 
                         FROM COST_CENTER 
                        WHERE SUBSTR(COST_CENTER_CODE,3) = TRIM(DLY.COST_CENTER_CODE)) CC_CODE
          FROM DLY_POS_CUSTOMER DLY
         WHERE LOAD_DATE > IN_DATE;

    V_COMMIT           NUMBER := 0;
    V_TEMP_ROW         CUSTOMER%ROWTYPE;
    V_COST_CENTER_CODE CUSTOMER.COST_CENTER_CODE%TYPE;
BEGIN

    FOR rec IN TEMP_CUR LOOP
        BEGIN
            V_TEMP_ROW.COST_CENTER_CODE             := rec.CC_CODE;
            V_TEMP_ROW.TRANSACTION_DATE             := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec.TRANSACTION_DATE,'YYMMDD');
            V_TEMP_ROW.TERMINAL_NUMBER              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRANSACTION_NUMBER           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CUSTOMER_ACCOUNT_NUMBER);
            V_TEMP_ROW.CUSTOMER_JOB_NUMBER          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CUSTOMER_JOB_NUMBER);
            V_TEMP_ROW.POS_TRANSACTION_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRANSACTION_CODE);
            V_TEMP_ROW.POS_TRANSACTION_BATCH_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRANSACTION_NUMBER_BATCH);
            V_TEMP_ROW.POS_TRANSACTION_TIME         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRANSACTION_TIME);
            V_TEMP_ROW.CYCLE_RUN_NUMBER             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CYCLE_RUN_NUMBER);
            V_TEMP_ROW.EMPLOYEE_NUMBER              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EMPLOYEE_NUMBER);
            V_TEMP_ROW.BUSSINESS_TYPE_CODE          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BUSINESS_TYPE_CODE);
            V_TEMP_ROW.SALES_TERRITORY_NUMBER       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TERRITORY_NUMBER);
            V_TEMP_ROW.SALES_TERRITORY_NUMBER_COR   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TERRITORY_NUMBER_NO_CORR);
            V_TEMP_ROW.ORGNL_POS_TRANSACTION_DATE   := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec.POS_TRANSACTION_DATE,'YYMMDD');
            V_TEMP_ROW.ORGNL_POS_TERM_NUMBER        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TERMINAL_NUMBER);
            V_TEMP_ROW.ORGNL_POS_TRANSACTION_NBR    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRANSACTION_NUMBER);
            V_TEMP_ROW.PURCHASE_ORDER_NUMBER        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PURCHASE_ORDER_NUMBER);
            V_TEMP_ROW.BOOK_DATE_SEQUENCE           := NULL;

            INSERT INTO CUSTOMER VALUES V_TEMP_ROW;

            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_CUSTOMER',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
                                           
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_CUSTOMER',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_CUSTOMER;

FUNCTION GET_DISC_AMT_TYPE
/******************************************************************
This function will return the discount and the discount type
based on the inidcator passed in

created : 06/10/2017 nxk927 CCN Project....
changed :
******************************************************************/
(IN_TRAN_GUID        IN   VARCHAR2
,IN_SEQNBR           IN   VARCHAR2
,IN_IND              IN   VARCHAR2) RETURN VARCHAR2
IS
    V_RETURN_VALUE         VARCHAR2(100);
    V_ITEM_DISCOUNT_AMOUNT VARCHAR2(100);
    V_ITEM_DISCOUNT_TYPE   VARCHAR2(100);
BEGIN
    SELECT NVL(NONTAXAMT,0) + NVL(TAXAMT,0),
           NVL(TYP,0)
      INTO V_ITEM_DISCOUNT_AMOUNT,
           V_ITEM_DISCOUNT_TYPE
      FROM DLY_POS_CCN_DISC
     WHERE TRAN_GUID = HEXTORAW(IN_TRAN_GUID)
       AND SEQNBR    = IN_SEQNBR;
   IF IN_IND = 'A' THEN 
      V_RETURN_VALUE := V_ITEM_DISCOUNT_AMOUNT;
   ELSE
      V_RETURN_VALUE := V_ITEM_DISCOUNT_TYPE;
   END IF;
   RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
         RETURN V_RETURN_VALUE; 
END GET_DISC_AMT_TYPE;

PROCEDURE LOAD_DLY_CUSTOMER_DETAILS(
/*****************************************************************************
	LOAD_DLY_CUSTOMER_DETAILS

	This function will load the CUSTOMER_DETAILS table from data  
	file from legacy idms database.  

created : 06/11/2014 jxc517 CCN Project....
changed : 12/05/2014 axk326 CCN Project....
          Code Modified to accept minus signs for amounts in customer_details
        : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
    CURSOR TEMP_CUR is
        SELECT A.SEQNBR,
               C.COST_CENTER_CODE CC_CODE,
               TO_DATE(SUBSTR(B.TRANSACTION_DATE,2),'YYMMDD') TRANSACTION_DATE,
               A.COST_CENTER_CODE, 
               A.TERMINAL_NUMBER, 
               A.TRANSACTION_NUMBER, 
               A.SORT_FORCE, 
               A.SEGMENT_CODE, 
               A.SUB_SEGMENT_CODE, 
               A.FILLER, 
               A.SALES_NUMBER, 
               A.ITEM_QUANTITY_SIGN, 
               A.ITEM_QUANTITY, 
               A.ITEM_PRICE_SIGN, 
               A.ITEM_PRICE, 
               A.ITEM_EXTERNAL_AMOUNT_SIGN, 
               A.ITEM_EXTERNAL_AMOUNT, 
               A.ITEM_DISC_AMOUNT_SIGN, 
               GET_DISC_AMT_TYPE(A.TRANGUID,A.SEQNBR, 'A') ITEM_DISC_AMOUNT, 
               A.ITEM_SALES_TAX_INDICATOR, 
               GET_DISC_AMT_TYPE(A.TRANGUID,A.SEQNBR, 'B' ) ITEM_DISC_CODE, 
               A.ITEM_DISC_TYPE, 
               A.SALES_PROMO_CODE, 
               A.GL_PRIME_ACCOUNT, 
               A.GL_SUB_ACCOUNT, 
               A.SCHEDULE_TYPE, 
               A.SCHEDULE_VERSION, 
               A.PRICE_LVL_CODE, 
               A.PERCENT_OFF_LVL, 
               A.PROD_DESC_SOURCE, 
               A.ORGNL_POS_TERMINAL_NUMBER, 
               A.ORGNL_POS_TRANSACTION_NUMBER
          FROM (SELECT  * 
                  FROM DLY_POS_CUSTOMER_DETAILS 
                 WHERE LOAD_DATE > IN_DATE) A,
               (SELECT  * 
                  FROM DLY_POS_CUSTOMER 
                 WHERE LOAD_DATE > IN_DATE) B,
               COST_CENTER C
         WHERE A.COST_CENTER_CODE            = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.COST_CENTER_CODE            = B.COST_CENTER_CODE
           AND SUBSTR(C.COST_CENTER_CODE,3)  = B.COST_CENTER_CODE
           AND A.TERMINAL_NUMBER             = B.TERMINAL_NUMBER
           AND A.TRANSACTION_NUMBER          = B.TRANSACTION_NUMBER;

    V_COMMIT         NUMBER := 0;
    V_TEMP_ROW       CUSTOMER_DETAILS%ROWTYPE;
BEGIN
    
    FOR rec IN TEMP_CUR LOOP
        BEGIN
            V_TEMP_ROW.CUSTOMER_DETAIL_ID         := rec.SEQNBR;
            V_TEMP_ROW.COST_CENTER_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CC_CODE);
            V_TEMP_ROW.TRANSACTION_DATE           := rec.TRANSACTION_DATE;
            V_TEMP_ROW.TERMINAL_NUMBER            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRANSACTION_NUMBER         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_TEMP_ROW.SEGMENT_CODE               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SEGMENT_CODE);
            V_TEMP_ROW.SALES_NUMBER               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_NUMBER);
            V_TEMP_ROW.ITEM_QUANTITY              := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_QUANTITY,7,2);
            V_TEMP_ROW.ITEM_QUANTITY              := CASE rec.ITEM_QUANTITY_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_QUANTITY ELSE V_TEMP_ROW.ITEM_QUANTITY END;
            V_TEMP_ROW.ITEM_PRICE                 := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.Item_Price,7,2);
            V_TEMP_ROW.ITEM_PRICE                 := CASE rec.ITEM_PRICE_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_PRICE ELSE V_TEMP_ROW.ITEM_PRICE END;
            V_TEMP_ROW.ITEM_EXT_AMOUNT            := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_EXTERNAL_AMOUNT,7,2); 
            V_TEMP_ROW.ITEM_EXT_AMOUNT            := CASE rec.ITEM_EXTERNAL_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_EXT_AMOUNT ELSE V_TEMP_ROW.ITEM_EXT_AMOUNT END;
            V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT       := NVL(rec.ITEM_DISC_AMOUNT,0);
            V_TEMP_ROW.ITEM_EXT_AMOUNT            := V_TEMP_ROW.ITEM_EXT_AMOUNT + NVL(V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT,0);
            V_TEMP_ROW.ITEM_SALES_TAX_IND         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ITEM_SALES_TAX_INDICATOR);
            V_TEMP_ROW.ITEM_DISCOUNT_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ITEM_DISC_CODE);
            V_TEMP_ROW.ITEM_DISCOUNT_TYPE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ITEM_DISC_TYPE);
            V_TEMP_ROW.SALES_PROMO_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_PROMO_CODE);
            V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GL_PRIME_ACCOUNT);
            V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GL_SUB_ACCOUNT);
            V_TEMP_ROW.SCHEDULE_TYPE              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SCHEDULE_TYPE);
            V_TEMP_ROW.SCHEDULE_VERSION           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SCHEDULE_VERSION);
            V_TEMP_ROW.PRICE_LEVEL_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PRICE_LVL_CODE);
            V_TEMP_ROW.PERCENT_OFF_LEVEL          := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.PERCENT_OFF_LVL,7,2);
            V_TEMP_ROW.PROD_DESC_SRCE             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PROD_DESC_SOURCE);
            V_TEMP_ROW.ORGNL_POS_TERM_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_POS_TERMINAL_NUMBER);
            V_TEMP_ROW.ORGNL_POS_TRANS_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_POS_TRANSACTION_NUMBER);

            

            INSERT INTO CUSTOMER_DETAILS VALUES V_TEMP_ROW;

            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_CUSTOMER_DETAILS',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
                                           
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_CUSTOMER_DETAILS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_CUSTOMER_DETAILS;

PROCEDURE LOAD_DLY_CSTMR_FORM_OF_PAY(
/*****************************************************************************
	LOAD_DLY_CSTMR_FORM_OF_PAY

	This function will load the CUSTOMER_FORM_OF_PAY table from data  
	file from legacy idms database.  

created : 06/11/2014 jxc517 CCN Project....
changed : 12/16/2014 axk326 CCN Project....
          Code changed to accept negative values for the amounts as per the 
          part of the dailyload process
        : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
    CURSOR TEMP_CUR is
        SELECT ROW_NUMBER( ) OVER (PARTITION BY C.COST_CENTER_CODE,B.TRANSACTION_DATE,A.TERMINAL_NUMBER,A.TRANSACTION_NUMBER ORDER BY B.TRANSACTION_DATE) SRLNO,
               C.COST_CENTER_CODE CC_CODE,
               A.*,
               TO_DATE(SUBSTR(B.TRANSACTION_DATE,2),'YYMMDD') TRANSACTION_DATE
          FROM (SELECT  * 
                  FROM DLY_POS_CSTMR_FORM_OF_PAY 
                 WHERE LOAD_DATE > IN_DATE)  A,
               (SELECT  * 
                  FROM DLY_POS_CUSTOMER 
                 WHERE LOAD_DATE > IN_DATE) B,
               COST_CENTER C
         WHERE A.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.COST_CENTER_CODE   = B.COST_CENTER_CODE
           AND B.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.TERMINAL_NUMBER    = B.TERMINAL_NUMBER
           AND A.TRANSACTION_NUMBER = B.TRANSACTION_NUMBER;

    V_COMMIT     NUMBER := 0;
    V_TEMP_ROW   CUSTOMER_FORM_OF_PAY%ROWTYPE;
BEGIN

    FOR rec IN TEMP_CUR LOOP
        BEGIN
            V_TEMP_ROW.CUSTOMER_FORM_OF_PAY_ID  := rec.SRLNO;
            V_TEMP_ROW.COST_CENTER_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CC_CODE);
            V_TEMP_ROW.TRANSACTION_DATE         := rec.TRANSACTION_DATE;
            V_TEMP_ROW.TERMINAL_NUMBER          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRANSACTION_NUMBER       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_TEMP_ROW.SEGMENT_CODE             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SEGMENT_CODE);
            V_TEMP_ROW.SUB_SEGMENT_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SUB_SEGMENT_CODE);
            V_TEMP_ROW.PAY_DISC_CODE            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PAY_DISC_CODE);
            V_TEMP_ROW.TRANSACTION_TOTAL_AMT    := rec.TRANSACTION_TOTAL_AMOUNT/100;
            V_TEMP_ROW.TRANSACTION_TOTAL_AMT    := CASE rec.TRANSACTION_TOTAL_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.TRANSACTION_TOTAL_AMT ELSE V_TEMP_ROW.TRANSACTION_TOTAL_AMT END;
            V_TEMP_ROW.POS_LINE_COUNT           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_LINE_CNT);
            V_TEMP_ROW.PAY_AMOUNT               := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.PAY_AMOUNT,7,2);  
            V_TEMP_ROW.PAY_AMOUNT               := CASE rec.PAY_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.PAY_AMOUNT ELSE V_TEMP_ROW.PAY_AMOUNT END;
            V_TEMP_ROW.PAY_DISCOUNT             := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.POS_DISC,7,2);
            V_TEMP_ROW.PAY_DISCOUNT             := CASE rec.POS_DISC_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.PAY_DISCOUNT ELSE V_TEMP_ROW.PAY_DISCOUNT END;
            V_TEMP_ROW.SALES_DISCOUNT_AMT       := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.SALES_DISC_AMOUNT,7,2);  
            V_TEMP_ROW.SALES_DISCOUNT_AMT       := CASE rec.SALES_DISC_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.SALES_DISCOUNT_AMT ELSE V_TEMP_ROW.SALES_DISCOUNT_AMT END;
            
            INSERT INTO CUSTOMER_FORM_OF_PAY VALUES V_TEMP_ROW;

            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_CSTMR_FORM_OF_PAY',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_CSTMR_FORM_OF_PAY',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_CSTMR_FORM_OF_PAY;

PROCEDURE LOAD_DLY_CSTMR_BANK_CARD(
/*****************************************************************************
	LOAD_DLY_CSTMR_BANK_CARD

	This function will load the CUSTOMER_BANK_CARD table from data  
	file from legacy idms database.  

created : 06/11/2014 jxc517 CCN Project....
changed : 12/16/2014 axk326 CCN Project....
          Code changed to accept the negative signs for the amounts when doing the daily load process
        : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
    CURSOR TEMP_CUR is
        SELECT ROW_NUMBER( ) OVER (PARTITION BY C.COST_CENTER_CODE,B.TRANSACTION_DATE,A.TERMINAL_NUMBER,A.TRANSACTION_NUMBER ORDER BY B.TRANSACTION_DATE) SRLNO,
               C.COST_CENTER_CODE CC_CODE,
               A.*,
               TO_DATE(SUBSTR(B.TRANSACTION_DATE,2),'YYMMDD') TRANSACTION_DATE
          FROM (SELECT  * 
                  FROM DLY_POS_CSTMR_BANK_CARD 
                 WHERE LOAD_DATE > IN_DATE) A,
               (SELECT  * 
                  FROM DLY_POS_CUSTOMER 
                 WHERE LOAD_DATE > IN_DATE) B,
               COST_CENTER C
         WHERE A.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.COST_CENTER_CODE   = B.COST_CENTER_CODE
           AND B.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.TERMINAL_NUMBER    = B.TERMINAL_NUMBER
           AND A.TRANSACTION_NUMBER = B.TRANSACTION_NUMBER;

    V_COMMIT     NUMBER := 0;
    V_TEMP_ROW   CUSTOMER_BANK_CARD%ROWTYPE;
BEGIN

    FOR rec IN TEMP_CUR LOOP
        BEGIN
            V_TEMP_ROW.CUSTOMER_BANK_CARD_ID    := rec.SRLNO;
            V_TEMP_ROW.COST_CENTER_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CC_CODE);
            V_TEMP_ROW.TRANSACTION_DATE         := rec.TRANSACTION_DATE;
            V_TEMP_ROW.TERMINAL_NUMBER          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRANSACTION_NUMBER       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_TEMP_ROW.SEGMENT_CODE             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SEGMENT_CODE);
            V_TEMP_ROW.SUB_SEGMENT_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SUB_SEGMENT_CODE);
            V_TEMP_ROW.BANK_CARD_ACCOUNT_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_CARD_ACCOUNT_NUMBER);
            V_TEMP_ROW.BANK_AUTH                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_AUTH);
            V_TEMP_ROW.BANK_AMOUNT              := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.BANK_AMOUNT,9,2);
            V_TEMP_ROW.BANK_AMOUNT              := CASE rec.BANK_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.BANK_AMOUNT ELSE V_TEMP_ROW.BANK_AMOUNT END;
            V_TEMP_ROW.BANK_TYPE                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_TYPE);

            INSERT INTO CUSTOMER_BANK_CARD VALUES V_TEMP_ROW;

            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_CSTMR_BANK_CARD',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_CSTMR_BANK_CARD',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_CSTMR_BANK_CARD;

PROCEDURE LOAD_DLY_CSTMR_SALES_TAX(
/*****************************************************************************
	LOAD_DLY_CSTMR_SALES_TAX

	This function will load the CUSTOMER_SALES_TAX table from data  
	file from legacy idms database.  

created : 06/11/2014 jxc517 CCN Project....
changed : 12/16/2014 axk326 CCN Project....
          Code changed to accept negative signs to amounts as part fo the daily load process
        : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
    CURSOR TEMP_CUR is
        SELECT ROW_NUMBER( ) OVER (PARTITION BY C.COST_CENTER_CODE,B.TRANSACTION_DATE,A.TERMINAL_NUMBER,A.TRANSACTION_NUMBER ORDER BY B.TRANSACTION_DATE) SRLNO,
               C.COST_CENTER_CODE CC_CODE,
               A.*,
               TO_DATE(SUBSTR(B.TRANSACTION_DATE,2),'YYMMDD') TRANSACTION_DATE
          FROM (SELECT  * 
                  FROM DLY_POS_CSTMR_SALES_TAX 
                 WHERE LOAD_DATE > IN_DATE) A,
               (SELECT  * 
                  FROM DLY_POS_CUSTOMER 
                 WHERE LOAD_DATE > IN_DATE) B,
               COST_CENTER C
         WHERE A.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.COST_CENTER_CODE   = B.COST_CENTER_CODE
           AND B.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.TERMINAL_NUMBER    = B.TERMINAL_NUMBER
           AND A.TRANSACTION_NUMBER = B.TRANSACTION_NUMBER;

    V_COMMIT     NUMBER := 0;
    V_TEMP_ROW   CUSTOMER_SALES_TAX%ROWTYPE;
BEGIN

    FOR rec IN TEMP_CUR LOOP
        BEGIN
            V_TEMP_ROW.CUSTOMER_SALES_TAX_ID    := rec.SRLNO;
            V_TEMP_ROW.COST_CENTER_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CC_CODE);
            V_TEMP_ROW.TRANSACTION_DATE         := rec.TRANSACTION_DATE;
            V_TEMP_ROW.TERMINAL_NUMBER          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRANSACTION_NUMBER       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_TEMP_ROW.SALES_TAX_CORR_IND       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_TAX_CORR_INDICATOR);
            V_TEMP_ROW.SALES_TAX_COLL_AMT       := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.SALES_TAX_COLL_AMOUNT,7,2); 
            V_TEMP_ROW.SALES_TAX_COLL_AMT       := CASE rec.SALES_TAX_COLL_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.SALES_TAX_COLL_AMT ELSE V_TEMP_ROW.SALES_TAX_COLL_AMT END;
            V_TEMP_ROW.SALES_TAX_IND            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_TAX_INDICATOR);
            V_TEMP_ROW.SALES_TAX_RATE           := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.SALES_TAX_RATE,5,3); 
            V_TEMP_ROW.SALES_TAX_RATE           := CASE rec.SALES_TAX_RATE_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.SALES_TAX_RATE ELSE V_TEMP_ROW.SALES_TAX_RATE END;
            V_TEMP_ROW.SALES_TAX_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_TAX_CODE);

            INSERT INTO CUSTOMER_SALES_TAX VALUES V_TEMP_ROW;

            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_CSTMR_SALES_TAX',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_CSTMR_SALES_TAX',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_CSTMR_SALES_TAX;

PROCEDURE LOAD_DLY_STORE_DRAFTS(
/*****************************************************************************
	LOAD_DLY_STORE_DRAFTS

	This function will load the STORE_DRAFTS table from daily data  
	file from legacy idms database.  

created : 06/12/2014 jxc517 CCN Project....
changed : 11/24/2014 axk326 CCN Project....
          Code change to reflect the original net amount value
          12/09/2014 axk326 CCN Project....
          Code change to check for check_serial_number if it already exists
          12/16/2014 axk326 CCN Project....
          code changed to accept the negative values for the amount fields while 
          lodaing from dailyload process 
          06/19/2015 nxk927 
          changed code to overwrite all the info coming in file besides the paid information.
          01/16/2017 vxv336 
          Replaced separate calls with a single call to get STORE_DRAFTS FLAGS
        : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
    CURSOR STOREDRAFT_TEMP_CUR is
        SELECT ICD.*, (SELECT COST_CENTER_CODE 
                         FROM COST_CENTER 
                        WHERE SUBSTR(COST_CENTER_CODE,3) = TRIM(ICD.COST_CENTER_CODE)) CC_CODE
          FROM DLY_POS_ISSUE_CHANGE_DATA ICD
         WHERE LOAD_DATE > IN_DATE;


    V_COMMIT                      NUMBER := 0;
    V_COUNT                       NUMBER := 0;
    V_STOREDRAFT_TEMP_ROW         STORE_DRAFTS%ROWTYPE;
    V_COST_CENTER_CODE            STORE_DRAFTS.COST_CENTER_CODE%TYPE;

BEGIN

    FOR rec IN STOREDRAFT_TEMP_CUR LOOP
        BEGIN
            V_STOREDRAFT_TEMP_ROW.COST_CENTER_CODE        := REC.CC_CODE;
            V_STOREDRAFT_TEMP_ROW.CHECK_SERIAL_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHECK_SERIAL_NUMBER);
            V_STOREDRAFT_TEMP_ROW.DRAFT_NUMBER            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DRAFT_NUMBER);
            V_STOREDRAFT_TEMP_ROW.TRANSACTION_DATE        := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec.TRANSACTION_DATE,'YYMMDD');
            V_STOREDRAFT_TEMP_ROW.TERMINAL_NUMBER         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_STOREDRAFT_TEMP_ROW.TRANSACTION_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_STOREDRAFT_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CUSTOMER_ACCOUNT_NUMBER);
            V_STOREDRAFT_TEMP_ROW.CUSTOMER_JOB_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CUSTOMER_JOB_NUMBER);
            V_STOREDRAFT_TEMP_ROW.POS_TRANSACTION_CODE    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRANSACTION_CODE);
            V_STOREDRAFT_TEMP_ROW.POS_TRANSACTION_TIME    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_TIME);
            V_STOREDRAFT_TEMP_ROW.PAYEE_NAME              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PAYEE_NAME);
            V_STOREDRAFT_TEMP_ROW.ADDRESS_LINE_1          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ADDRESS_LINE_1);
            V_STOREDRAFT_TEMP_ROW.ADDRESS_LINE_2          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ADDRESS_LINE_2);
            V_STOREDRAFT_TEMP_ROW.CITY                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CITY);
            V_STOREDRAFT_TEMP_ROW.STATE_CODE              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STATE_CODE);
            V_STOREDRAFT_TEMP_ROW.ZIP_CODE_PREFIX         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(SUBSTR(rec.ZIP_CODE,1,6));
            V_STOREDRAFT_TEMP_ROW.ZIP_CODE_SUFFIX         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(SUBSTR(rec.ZIP_CODE,7));
            V_STOREDRAFT_TEMP_ROW.PHONE_AREA_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(SUBSTR(rec.PHONE_NUMBER,1,3));
            V_STOREDRAFT_TEMP_ROW.PHONE_NUMBER            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(SUBSTR(rec.PHONE_NUMBER,4));
            V_STOREDRAFT_TEMP_ROW.EMPLOYEE_NUMBER         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EMPLOYEE_NUMBER);
            V_STOREDRAFT_TEMP_ROW.ISSUE_DATE              := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec.ISSUE_DATE,'YYMMDD');
            V_STOREDRAFT_TEMP_ROW.GROSS_AMOUNT            := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.GROSS_AMOUNT,9,2);
            V_STOREDRAFT_TEMP_ROW.GROSS_AMOUNT            := CASE rec.GROSS_AMOUNT_SIGN WHEN '-' THEN -1 * V_STOREDRAFT_TEMP_ROW.GROSS_AMOUNT ELSE V_STOREDRAFT_TEMP_ROW.GROSS_AMOUNT END;
            V_STOREDRAFT_TEMP_ROW.RETAIN_AMOUNT           := rec.RETAINAGE_AMOUNT/100;
            V_STOREDRAFT_TEMP_ROW.RETAIN_AMOUNT           := CASE rec.RETAINAGE_AMOUNT_SIGN WHEN '-' THEN -1 * V_STOREDRAFT_TEMP_ROW.RETAIN_AMOUNT ELSE V_STOREDRAFT_TEMP_ROW.RETAIN_AMOUNT END;
            V_STOREDRAFT_TEMP_ROW.NET_AMOUNT              := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.NET_AMOUNT,9,2); 
            V_STOREDRAFT_TEMP_ROW.NET_AMOUNT              := CASE rec.NET_AMOUNT_SIGN WHEN '-' THEN -1 * V_STOREDRAFT_TEMP_ROW.NET_AMOUNT ELSE V_STOREDRAFT_TEMP_ROW.NET_AMOUNT END;
            V_STOREDRAFT_TEMP_ROW.ORIGINAL_NET_AMOUNT     := NVL(CCN_COMMON_TOOLS.RETURN_NUMBER(rec.GROSS_AMOUNT,9,2),0) - 
                                                             NVL(CCN_COMMON_TOOLS.RETURN_NUMBER(rec.RETAINAGE_AMOUNT,9,2),0);
            V_STOREDRAFT_TEMP_ROW.TRANSACTION_SOURCE      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_SOURCE);
            V_STOREDRAFT_TEMP_ROW.SLS_BOOK_DATE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BOOK_DATE);
            V_STOREDRAFT_TEMP_ROW.CYCLE_RUN_NUMBER        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CYCLE_RUN_NUMBER);
            V_STOREDRAFT_TEMP_ROW.REASON_CODE             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.REASON_CODE);
            
			      FOR rec1 IN (SELECT *
                           FROM DLY_POS_BANK_PAID_DATA
                           WHERE COST_CENTER_CODE    = rec.COST_CENTER_CODE
                             AND CHECK_SERIAL_NUMBER = REC.CHECK_SERIAL_NUMBER
                             AND LOAD_DATE >= IN_DATE) LOOP
                V_STOREDRAFT_TEMP_ROW.BANK_NUMBER             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec1.BANK_NUMBER);
                V_STOREDRAFT_TEMP_ROW.BANK_ACCOUNT_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC1.BANK_ACCOUNT_NUMBER);
                V_STOREDRAFT_TEMP_ROW.BANK_PAID_AMOUNT        := CCN_COMMON_TOOLS.RETURN_NUMBER(REC1.BANK_PAID_AMOUNT,9,2);
                V_STOREDRAFT_TEMP_ROW.PAID_DATE               := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec1.PAID_DATE,'YYMMDD');
                V_STOREDRAFT_TEMP_ROW.STOP_PAY_DATE           := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec1.STOP_PAY_DATE,'YYMMDD');
                V_STOREDRAFT_TEMP_ROW.STOP_PAY_REMOVE_DATE    := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec1.STOP_PAY_REMOVE_DATE,'YYMMDD');
                V_STOREDRAFT_TEMP_ROW.VOID_DATE               := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec1.VOID_DATE,'YYMMDD');
            END LOOP;
            
            SD_BUSINESS_RULES_PKG.SET_STORE_DRAFT_FLAGS(V_STOREDRAFT_TEMP_ROW);

            V_STOREDRAFT_TEMP_ROW.LOAD_DATE      := SYSDATE;
                 
                   
            IF SD_BUSINESS_RULES_PKG.IS_UNATTACHED_STORE_DRAFT(V_STOREDRAFT_TEMP_ROW) THEN
                INSERT INTO UNATTACHED_MNL_DRFT_DTL VALUES V_STOREDRAFT_TEMP_ROW;
            ELSE
                IF V_STOREDRAFT_TEMP_ROW.TRANSACTION_DATE <= ADD_MONTHS(TRUNC(SYSDATE),-1 * SD_BUSINESS_RULES_PKG.G_HISTORY_MONTHS) THEN
                    INSERT INTO HST_STORE_DRAFTS VALUES V_STOREDRAFT_TEMP_ROW;
                ELSE
                    SELECT COUNT(*)
                      INTO V_COUNT
                      FROM STORE_DRAFTS
                     WHERE COST_CENTER_CODE    = V_STOREDRAFT_TEMP_ROW.COST_CENTER_CODE
                       AND CHECK_SERIAL_NUMBER = V_STOREDRAFT_TEMP_ROW.CHECK_SERIAL_NUMBER;
                    IF V_COUNT = 0 THEN
                        INSERT INTO STORE_DRAFTS VALUES V_STOREDRAFT_TEMP_ROW;
                    ELSE
                        SELECT BANK_PAID_AMOUNT,
                               PAID_DATE
                          INTO V_STOREDRAFT_TEMP_ROW.BANK_PAID_AMOUNT,
                               V_STOREDRAFT_TEMP_ROW.PAID_DATE
                          FROM STORE_DRAFTS
                         WHERE CHECK_SERIAL_NUMBER = REC.CHECK_SERIAL_NUMBER;
				   
                        UPDATE STORE_DRAFTS
                           SET ROW = V_STOREDRAFT_TEMP_ROW
                         WHERE COST_CENTER_CODE    = V_STOREDRAFT_TEMP_ROW.COST_CENTER_CODE
                            AND CHECK_SERIAL_NUMBER = V_STOREDRAFT_TEMP_ROW.CHECK_SERIAL_NUMBER;
                       ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                                  'LOAD_DLY_STORE_DRAFTS',
                                                  'DUPLICATE_SERIAL_NUMBER',
                                                  NVL(V_COST_CENTER_CODE,rec.COST_CENTER_CODE),
                                                  NVL(rec.CHECK_SERIAL_NUMBER,'')||':'||
                                                  NVL(rec.TRANSACTION_DATE,'')||':'||
                                                  NVL(rec.TERMINAL_NUMBER,'')||':'||
                                                  NVL(rec.TRANSACTION_NUMBER,''));
                    END IF;
                END IF;
            END IF;

            V_STOREDRAFT_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN 
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_STORE_DRAFTS',
                                           SQLERRM,
                                           NVL(V_COST_CENTER_CODE,rec.COST_CENTER_CODE),
                                           NVL(rec.CHECK_SERIAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
                                           
                                           
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN  
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_STORE_DRAFTS',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_STORE_DRAFTS;

PROCEDURE LOAD_DLY_STORE_DRAFTS_DETAIL(
/*****************************************************************************
	LOAD_DLY_STORE_DRAFTS_DETAIL

	This function will load the STORE_DRAFT_DETAIL table from daily data  
	file from TEMP_STORE_DRAFT_DETAIL table

created : 06/12/2014 jxc517 CCN Project....
changed : 12/11/2014 nxk927 
		      changed Union to union all that was excluding all the other records assuming they were dups          
          12/16/2014 axk326 
          Changed the dailyload code to accept the negative signs for the amounts in all the required fields.
        : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process as we won't be taking the
          data from the external table
        : 09/27/2017 nxk927 CCN Project....
          Load date field will be stored with the time stamp and
          using the last batch run date to get the desired data
******************************************************************************/
IN_DATE IN DATE) IS
 CURSOR STOREDRAFT_DETAIL_CUR IS   
        SELECT ROW_NUMBER( ) OVER (PARTITION BY A.COST_CENTER_CODE,B.TRANSACTION_DATE,A.CHECK_SERIAL_NUMBER ORDER BY B.TRANSACTION_DATE) SRLNO,
               B.TRANSACTION_DATE,
               (SELECT COST_CENTER_CODE
                 FROM COST_CENTER
                WHERE A.COST_CENTER_CODE    = SUBSTR(COST_CENTER_CODE,3)
                  AND CATEGORY = 'S') CC_CODE,
               A.*
          FROM DLY_POS_ISSUE_CHANGE_DATA B,
               (SELECT TRANGUID,
                       TRANSACTION_SOURCE,
                       TRANSACTION_TYPE,
                       COST_CENTER_CODE,
                       CHECK_SERIAL_NUMBER,
                       PROCESS_DATE,
                       TRANSACTION_SEGMENT_TYPE,
                       ITEM_EXT_AMOUNT,
                       NULL ORGNL_CUSTOMER_ACCOUNT_NUMBER,
                       NULL ORGNL_JOB_NUMBER,
                       GL_PRIME_ACCOUNT_NUMBER,
                       GL_SUB_ACCOUNT_NUMBER,
                       NULL ORGNL_TERMINAL_NUMBER,
                       NULL ORGNL_TRANSACTION_NUMBER,
                       NULL ITEM_QUANTITY,
                       NULL ITEM_PRICE,
                       ITEM_EXT_AMOUNT_SIGN,
                       NULL ITEM_QUANTITY_SIGN,
                       NULL ITEM_PRICE_SIGN,
                       RUNCYCLE,
                       LOAD_DATE
                  FROM DLY_POS_DSBRSMNT_LN_ITM_DATA
                 WHERE LOAD_DATE > IN_DATE
                 UNION ALL
                SELECT TRANGUID,
                       TRANSACTION_SOURCE,
                       TRANSACTION_TYPE,
                       COST_CENTER_CODE,
                       CHECK_SERIAL_NUMBER,
                       PROCESS_DATE,
                       TRANSACTION_SEGMENT_TYPE,
                       ITEM_EXT_AMOUNT,
                       ORGNL_CUSTOMER_ACCOUNT_NUMBER,
                       ORGNL_JOB_NUMBER,
                       NULL GL_PRIME_ACCOUNT_NUMBER,
                       NULL GL_SUB_ACCOUNT_NUMBER,
                       NULL ORGNL_TERMINAL_NUMBER,
                       NULL ORGNL_TRANSACTION_NUMBER,
                       NULL ITEM_QUANTITY,
                       NULL ITEM_PRICE,
                       ITEM_EXT_AMOUNT_SIGN,
                       NULL ITEM_QUANTITY_SIGN,
                       NULL ITEM_PRICE_SIGN,
                       RUNCYCLE,
                       LOAD_DATE
                  FROM DLY_POS_CSTMR_LINE_ITEM_DATA
                 WHERE LOAD_DATE > IN_DATE
                 UNION ALL
                SELECT TRANGUID,
                       TRANSACTION_SOURCE,
                       TRANSACTION_TYPE,
                       COST_CENTER_CODE,
                       CHECK_SERIAL_NUMBER,
                       PROCESS_DATE,
                       TRANSACTION_SEGMENT_TYPE,
                       ITEM_EXT_AMOUNT,
                       NULL ORGNL_CUSTOMER_ACCOUNT_NUMBER,
                       NULL ORGNL_JOB_NUMBER,
                       GL_PRIME_ACCOUNT_NUMBER,
                       GL_SUB_ACCOUNT_NUMBER,
                       ORGNL_TERMINAL_NUMBER,
                       ORGNL_TRANSACTION_NUMBER,
                       ITEM_QUANTITY,
                       ITEM_PRICE,
                       ITEM_EXT_AMOUNT_SIGN,
                       ITEM_QUANTITY_SIGN,
                       ITEM_PRICE_SIGN,
                       RUNCYCLE,
                       LOAD_DATE
                  FROM DLY_POS_INSTLLR_LN_ITM_DATA
                 WHERE LOAD_DATE > IN_DATE) A
         WHERE A.COST_CENTER_CODE    = B.COST_CENTER_CODE(+)
           AND A.CHECK_SERIAL_NUMBER = B.CHECK_SERIAL_NUMBER(+);

    V_COMMIT                      INTEGER := 0;
    V_STOREDRAFT_DETAIL_ROW       STORE_DRAFTS_DETAIL%ROWTYPE;
    V_UNMTCHED_STOREDRAFT_DTL_ROW UNATTACHED_MNL_DRFT_DTL%ROWTYPE;
BEGIN

    FOR rec IN STOREDRAFT_DETAIL_CUR LOOP
        BEGIN
            V_STOREDRAFT_DETAIL_ROW.STORE_DRAFTS_DETAIL_ID        := rec.SRLNO;
            V_STOREDRAFT_DETAIL_ROW.COST_CENTER_CODE        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CC_CODE);
            V_STOREDRAFT_DETAIL_ROW.CHECK_SERIAL_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHECK_SERIAL_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.TRANSACTION_DATE        := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec.TRANSACTION_DATE,'YYMMDD');
            V_STOREDRAFT_DETAIL_ROW.TERMINAL_NUMBER         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_TERMINAL_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.TRANSACTION_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_TRANSACTION_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.CUSTOMER_ACCOUNT_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_CUSTOMER_ACCOUNT_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.CUSTOMER_JOB_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_JOB_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.GL_PRIME_ACCOUNT_NUMBER := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GL_PRIME_ACCOUNT_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.GL_SUB_ACCOUNT_NUMBER   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GL_SUB_ACCOUNT_NUMBER);
            V_STOREDRAFT_DETAIL_ROW.ITEM_QUANTITY           := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_QUANTITY,7,2);
            V_STOREDRAFT_DETAIL_ROW.ITEM_QUANTITY           := CASE rec.ITEM_QUANTITY_SIGN WHEN '-' THEN -1 * V_STOREDRAFT_DETAIL_ROW.ITEM_QUANTITY ELSE V_STOREDRAFT_DETAIL_ROW.ITEM_QUANTITY END; 
            V_STOREDRAFT_DETAIL_ROW.ITEM_PRICE              := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_PRICE,7,2);
            V_STOREDRAFT_DETAIL_ROW.ITEM_PRICE              := CASE rec.ITEM_PRICE_SIGN WHEN '-' THEN -1 * V_STOREDRAFT_DETAIL_ROW.ITEM_PRICE ELSE V_STOREDRAFT_DETAIL_ROW.ITEM_PRICE END;
            V_STOREDRAFT_DETAIL_ROW.ITEM_EXT_AMOUNT         := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_EXT_AMOUNT,9,2); --actual table has 7,2
            V_STOREDRAFT_DETAIL_ROW.ITEM_EXT_AMOUNT         := CASE rec.ITEM_EXT_AMOUNT_SIGN WHEN '-' THEN -1 * V_STOREDRAFT_DETAIL_ROW.ITEM_EXT_AMOUNT ELSE V_STOREDRAFT_DETAIL_ROW.ITEM_EXT_AMOUNT END;
            
            IF V_STOREDRAFT_DETAIL_ROW.TRANSACTION_DATE <= ADD_MONTHS(TRUNC(SYSDATE),-1 * SD_BUSINESS_RULES_PKG.G_HISTORY_MONTHS) THEN
                INSERT INTO HST_STORE_DRAFTS_DETAIL VALUES V_STOREDRAFT_DETAIL_ROW;
            ELSE
                INSERT INTO STORE_DRAFTS_DETAIL VALUES V_STOREDRAFT_DETAIL_ROW;
            END IF;

            V_STOREDRAFT_DETAIL_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                BEGIN
                    SELECT *
                      INTO V_UNMTCHED_STOREDRAFT_DTL_ROW
                      FROM UNATTACHED_MNL_DRFT_DTL
                     WHERE COST_CENTER_CODE    = rec.COST_CENTER_CODE
                       AND CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER
                       AND ROWNUM < 2;
                      
                    INSERT INTO STORE_DRAFTS VALUES V_UNMTCHED_STOREDRAFT_DTL_ROW;
                    INSERT INTO UNATTACHED_MNL_DRFT_DTL_HST VALUES V_UNMTCHED_STOREDRAFT_DTL_ROW;
                    DELETE
                      FROM UNATTACHED_MNL_DRFT_DTL
                     WHERE COST_CENTER_CODE    = V_UNMTCHED_STOREDRAFT_DTL_ROW.COST_CENTER_CODE
                       AND CHECK_SERIAL_NUMBER = V_UNMTCHED_STOREDRAFT_DTL_ROW.CHECK_SERIAL_NUMBER
                       AND TRANSACTION_DATE    = V_UNMTCHED_STOREDRAFT_DTL_ROW.TRANSACTION_DATE;
                    INSERT INTO STORE_DRAFTS_DETAIL VALUES V_STOREDRAFT_DETAIL_ROW;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                                   'LOAD_DLY_STORE_DRAFTS_DETAIL',
                                                   SQLERRM,
                                                   NVL(rec.CC_CODE,rec.COST_CENTER_CODE),
                                                   NVL(rec.CHECK_SERIAL_NUMBER,'')||':'||
                                                   NVL(rec.TRANSACTION_DATE,'') ||':'||
                                                   NVL(rec.ORGNL_TERMINAL_NUMBER,'')||':'||
                                                   NVL(rec.ORGNL_TRANSACTION_NUMBER,'')
                                                   );
                END;
        END;
    END LOOP;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_STORE_DRAFTS_DETAIL',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END LOAD_DLY_STORE_DRAFTS_DETAIL;

PROCEDURE CCN_SD_DAILY_HST_LOAD_SP
/******************************************************************
CCN_SD_DAILY_HST_LOAD_SP

This Procedure is a wrapper for the Daily Load of the store drafts history tables
    * Loads all the store drafts tables

created : 06/26/2014 jxc517 CCN Project....
changed :
******************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_MONTHS     NUMBER := SD_BUSINESS_RULES_PKG.G_HISTORY_MONTHS;
BEGIN

      INSERT INTO HST_STORE_DRAFTS
          SELECT *
            FROM STORE_DRAFTS
           WHERE TRANSACTION_DATE <= ADD_MONTHS(TRUNC(SYSDATE),-1 * V_MONTHS);

      INSERT INTO HST_STORE_DRAFTS_DETAIL
          SELECT *
            FROM STORE_DRAFTS_DETAIL
           WHERE TRANSACTION_DATE <= ADD_MONTHS(TRUNC(SYSDATE),-1 * V_MONTHS);

      DELETE FROM STORE_DRAFTS_DETAIL
       WHERE TRANSACTION_DATE <= ADD_MONTHS(TRUNC(SYSDATE),-1 * V_MONTHS);

      DELETE FROM STORE_DRAFTS
       WHERE TRANSACTION_DATE <= ADD_MONTHS(TRUNC(SYSDATE),-1 * V_MONTHS);

      COMMIT;
       
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CCN_SD_DAILY_HST_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END CCN_SD_DAILY_HST_LOAD_SP;

PROCEDURE CCN_SD_ATTACH_MNL_DRFT_DTL_SP
/******************************************************************
CCN_SD_ATTACH_MNL_DRFT_DTL_SP

This Procedure will check the data from UNATTACHED_MNL_DRFT_DTL and if parent found
in STORE_DRAFTS table pushes that records to STORE_DRAFTS_DETAIL as well as 
UNATTACHED_MNL_DRFT_DTL_HST table

Created : 08/25/2014 jxc517 CCN Project....
Changed : 09/15/2014 jxc517 CCN Project....Modified IF condition to include "NOT"
        : 02/27/2017 gxg192 Changes to load data into STORE_DRAFTS only after POS is received
        : 03/06/2017 gxg192 Removed call to SD_BUSINESS_RULES_PKG.IS_UNATTACHED_STORE_DRAFT
                            function and changes to optimize code
******************************************************************/
AS
BEGIN

    /*If POS is received for an unattached manual draft, then store drafts table is updated
      with paid details from unattached table and unattached draft is removed;
      else the draft is kept in UNATTACHED_MNL_DRFT_DTL table till POS is received for it.*/
    FOR rec IN (SELECT * FROM UNATTACHED_MNL_DRFT_DTL) LOOP
        BEGIN
            UPDATE STORE_DRAFTS
               SET BANK_PAID_AMOUNT     = rec.BANK_PAID_AMOUNT,
                   PAID_DATE            = rec.PAID_DATE
             WHERE CHECK_SERIAL_NUMBER  = rec.CHECK_SERIAL_NUMBER;

            IF SQL%ROWCOUNT <> 0 THEN
                INSERT INTO UNATTACHED_MNL_DRFT_DTL_HST VALUES rec;

                DELETE
                  FROM UNATTACHED_MNL_DRFT_DTL
                 WHERE CHECK_SERIAL_NUMBER = rec.CHECK_SERIAL_NUMBER;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                            'CCN_SD_ATTACH_MNL_DRFT_DTL_SP',
                                            SQLERRM,
                                            rec.COST_CENTER_CODE,
                                            rec.CHECK_SERIAL_NUMBER);
        END;
    END LOOP;

END CCN_SD_ATTACH_MNL_DRFT_DTL_SP;

PROCEDURE DAILY_LOAD_SP(
/******************************************************************
   DAILY_LOAD_SP

   This Procedure is a wrapper for the daily Load of the store drafts tables
    * Loads all the store drafts tables

created : 06/11/2014 jxc517 CCN Project....
changed : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process
******************************************************************/
IN_DATE IN DATE) AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CUSTOMER Table ';
      LOAD_DLY_CUSTOMER(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('CUSTOMER loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CUSTOMER_DETAILS Table ';
      LOAD_DLY_CUSTOMER_DETAILS(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('CUSTOMER_DETAILS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CUSTOMER_FORM_OF_PAY Table ';
      LOAD_DLY_CSTMR_FORM_OF_PAY(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('CUSTOMER_FORM_OF_PAY loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CUSTOMER_BANK_CARD Table ';
      LOAD_DLY_CSTMR_BANK_CARD(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('CUSTOMER_BANK_CARD loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      --Bank card not loaded as sub_segment_code came as null from daily files
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load CUSTOMER_SALES_TAX Table ';
      LOAD_DLY_CSTMR_SALES_TAX(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('CUSTOMER_SALES_TAX loaded in : '|| (dbms_utility.get_time - v_start_time)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load STORE_DRAFTS Table ';
      LOAD_DLY_STORE_DRAFTS(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('STORE_DRAFTS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load STORE_DRAFTS_DETAIL Table ';
      LOAD_DLY_STORE_DRAFTS_DETAIL(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('STORE_DRAFTS_DETAIL loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load STORE_DRAFTS and UNATTACHED_MNL_DRFT_DTL_HST Table ';
      CCN_SD_ATTACH_MNL_DRFT_DTL_SP();
      DBMS_OUTPUT.PUT_LINE('STORE_DRAFTS and UNATTACHED_MNL_DRFT_DTL_HST loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load HST_STORE_DRAFTS and HST_STORE_DRAFTS_DETAIL Table ';
      CCN_SD_DAILY_HST_LOAD_SP();
      DBMS_OUTPUT.PUT_LINE('HST_STORE_DRAFTS and HST_STORE_DRAFTS_DETAIL loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');


EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'DAILY_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END DAILY_LOAD_SP;

PROCEDURE CCN_SD_DAILY_LOAD_SP
/******************************************************************
CCN_SD_DAILY_LOAD_SP

This Procedure is a wrapper for the Daily Load of the store drafts tables
    * Loads all the store drafts tables

created : 06/11/2014 jxc517 CCN Project....
changed : 06/10/2017 nxk927 CCN Project....
          Passing the data parameter for the daily load process
changed : 10/03/2017 nxk927 CCN Project....
          removing the date parameter for the daily load process
******************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME DATE := SYSDATE;
    V_CLOB       CLOB;

V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_DATE              DATE := NVL(CCN_BATCH_PKG.GET_LAST_RUNDATE('SD_DAILY_DRFT_LOAD'),TRUNC(SYSDATE));
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('SD_DAILY_DRFT_LOAD', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        POS_SD_DAILY_LOAD.POS_SD_DAILY_LOAD_SP();
        
        DAILY_LOAD_SP(V_DATE);
        FOR rec IN (SELECT * FROM ERROR_LOG WHERE ERROR_DATE >= V_START_TIME) LOOP
            V_CLOB := V_CLOB || rec.COST_CENTER ||','|| rec.ERROR_TEXT || CHR(10);
        END LOOP;
        IF V_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('SD_DRFT_LOAD_ERRORS',NULL, NULL, V_CLOB);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('SD_DAILY_DRFT_LOAD', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CCN_SD_DAILY_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '0000000000'); 
END CCN_SD_DAILY_LOAD_SP;

END SD_DAILY_LOAD;