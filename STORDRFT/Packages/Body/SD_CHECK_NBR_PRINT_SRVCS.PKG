create or replace PACKAGE BODY SD_CHECK_NBR_PRINT_SRVCS
AS

FUNCTION GET_PREV_PRINT_DRAFT_END_NBR(
/**********************************************************
This function will get last ending draft number for COST_CENTER passed.

Created : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN project Team....  
Changed : 
**********************************************************/
    IN_COST_CENTER_CODE    IN    VARCHAR2
) RETURN NUMBER
IS
    V_RETURN_VALUE    NUMBER := 9999;
BEGIN
    SELECT ORDERED_ENDNG_DRFT
      INTO V_RETURN_VALUE
      FROM SD_CHECK_NBR_TRCKNG_DTLS
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND CHKS_ORDERED_DATE = (SELECT MAX(CHKS_ORDERED_DATE)
                                  FROM SD_CHECK_NBR_TRCKNG_DTLS
                                 WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE);

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END GET_PREV_PRINT_DRAFT_END_NBR;

FUNCTION GET_STORE_DRAFT_RUN_TYPE_REC(
/**********************************************************
This function will get run type detail for COST_CENTER passed.

Created : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN project Team.... 
Changed : 
**********************************************************/
    IN_COST_CENTER_CODE    IN    VARCHAR2
) RETURN STORE_RUN_TYPE_DETAILS%ROWTYPE
IS
    V_RETURN_VALUE    STORE_RUN_TYPE_DETAILS%ROWTYPE;
BEGIN
    SELECT *
      INTO V_RETURN_VALUE
      FROM STORE_RUN_TYPE_DETAILS
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND EXPIRATION_DATE IS NULL;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END GET_STORE_DRAFT_RUN_TYPE_REC;

FUNCTION GET_SD_CHK_TYP_REC(
/**********************************************************
This function will no of books ,checks per book , threshold, bank acccount number and routing number for run type passed.

Created : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN project Team.... 
Changed : 
**********************************************************/
    IN_RUN_TYPE      IN    VARCHAR2
) RETURN SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE
IS
    V_RETURN_VALUE    SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE;
BEGIN
    SELECT *
      INTO V_RETURN_VALUE
      FROM SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS
     WHERE STORE_DRAFT_CHECK_RUN_TYPE = IN_RUN_TYPE
       AND EXPIRATION_DATE IS NULL;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END GET_SD_CHK_TYP_REC;

PROCEDURE LOAD_EXTRACT_TBL(
/**********************************************************
This procedure will print drafts of 2 letters 'A' and 'B' from previous end draft number for the cost center passed.
After printing it update an entry in SD_CHECK_NBR_TRCKNG_DTLS for the next available draft number to use.

Created : 1/11/2019 kxm302 CCN Project Team.... 
Changed : 7/15/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
          Moved Insert code to SD_TABLE_IU_PKG
**********************************************************/
    IN_COST_CENTER_CODE           IN      VARCHAR2,
    IN_PREV_PRINT_DRAFT_END_NBR   IN      NUMBER,
    IN_SD_CHK_TYP_REC             IN      SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE,
    IN_ORDER_DATE                 IN      DATE DEFAULT NULL)
IS
    V_TOTAL_CHECKS                   NUMBER;
    V_DRAFT_NBR                      NUMBER;
    V_TERMINAL_NUMBER                VARCHAR2(5) := CCN_COMMON_TOOLS.GET_DESIGNATED_TERMINAL_NUMBER(IN_COST_CENTER_CODE);
    V_COUNTRY_CODE                   VARCHAR2(4);
    V_STARTING_DRAFT_NUMBER          NUMBER;
    V_CHK_NBR_PRNT_EXTRCT_DTL_REC    SD_CHECK_NBR_PRNT_EXTRCT_DTLS%ROWTYPE;
    V_CHK_NBR_TRCKNG_DTLS_REC        SD_CHECK_NBR_TRCKNG_DTLS%ROWTYPE;
    V_PREV_PRINT_DRAFT_END_NBR       NUMBER;
BEGIN
   --business rule to validate terminal number
    SD_BUSINESS_RULES_PKG.SD_VALIDATE_TERMINAL(IN_COST_CENTER_CODE,V_TERMINAL_NUMBER);
    V_TOTAL_CHECKS   := IN_SD_CHK_TYP_REC.NO_OF_BOOKS * (IN_SD_CHK_TYP_REC.CHECKS_PER_BOOK/2);
    SELECT COUNTRY_CODE
      INTO V_COUNTRY_CODE
      FROM COST_CENTER
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    IF V_COUNTRY_CODE = 'USA' THEN
        V_PREV_PRINT_DRAFT_END_NBR := LEAST(IN_PREV_PRINT_DRAFT_END_NBR, 9999);
    ELSIF V_COUNTRY_CODE = 'CAN' THEN
        V_PREV_PRINT_DRAFT_END_NBR := LEAST(IN_PREV_PRINT_DRAFT_END_NBR, 999);
    END IF;
    FOR draft_iterator IN 1 .. V_TOTAL_CHECKS LOOP
        V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator;
        --The iteration should go back to 1000 after 9999 for USA
        IF V_COUNTRY_CODE = 'USA' AND V_DRAFT_NBR > 9999 THEN
            V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator - 9000;
        --The iteration should go back to 100 after 999 for CAN
        ELSIF V_COUNTRY_CODE = 'CAN' AND V_DRAFT_NBR > 999 THEN
            V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator - 900;
        END IF;
        --Below condition is to make sure new cost centers are allowed to have place order feature
        --and ordering starts for those from 1000 and 100 respectively for USA and CAN cost centers
        IF draft_iterator = 1 THEN
            V_STARTING_DRAFT_NUMBER := V_DRAFT_NBR;
        END IF;

        --Building record for SD_CHECK_NBR_PRNT_EXTRCT_DTLS
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHKS_ORDERED_DATE   := NVL(IN_ORDER_DATE, TRUNC(SYSDATE));
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.SRT_CHKDLY_SEQ_NBR  := draft_iterator;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.COST_CENTER_CODE    := IN_COST_CENTER_CODE;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.TERMINAL_NUMBER     := V_TERMINAL_NUMBER;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ORDERED_DRFT_NUMBER := V_DRAFT_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT         := CCN_COMMON_TOOLS.MODULUS_10(V_TERMINAL_NUMBER || V_DRAFT_NBR);
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ROUTING_NBR         := IN_SD_CHK_TYP_REC.BANK_ROUTING_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ACCOUNT_NUMBER      := IN_SD_CHK_TYP_REC.BANK_ACCOUNT_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.LETTER              := 'A';
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.RUN_TYPE            := IN_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.RUNTYPE_DESCRIPTION := CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('STORE_DRAFT_CHECK_RUN_TYPE', 'COD', IN_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE);
        --New logic 5 digit terminal number + 4 digit draft + 1 digit check digit number for USA
        --New logic 5 digit terminal number + 3 digit draft + 1 digit check digit number for CAN
        --Left padding with 0's to make sure this field is always 10 characters even for Canadian Stores
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CCN_CHECK_SERIAL_NUMBER := LPAD(V_TERMINAL_NUMBER || V_DRAFT_NBR || V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT, 10, '0');

        SD_TABLE_IU_PKG.CHECK_NBR_PRNT_EXTRCT_DTLS_I_SP(V_CHK_NBR_PRNT_EXTRCT_DTL_REC);

        V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator + V_TOTAL_CHECKS;
        --The iteration should go back to 1000 after 9999 for USA
        IF V_COUNTRY_CODE = 'USA' AND V_DRAFT_NBR > 9999 THEN
            V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator + V_TOTAL_CHECKS - 9000;
        --The iteration should go back to 100 after 999 for CAN
        ELSIF V_COUNTRY_CODE = 'CAN' AND V_DRAFT_NBR > 999 THEN
            V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator + V_TOTAL_CHECKS - 900;
        END IF;
        -- Resetting few field values for Letter 'B'
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ORDERED_DRFT_NUMBER := V_DRAFT_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT         := CCN_COMMON_TOOLS.MODULUS_10(V_TERMINAL_NUMBER || V_DRAFT_NBR);
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.LETTER              := 'B';
        --New logic 5 digit terminal number + 4 digit draft + 1 digit check digit number for USA
        --New logic 5 digit terminal number + 3 digit draft + 1 digit check digit number for CAN
        --Left padding with 0's to make sure this field is always 10 characters even for Canadian Stores
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CCN_CHECK_SERIAL_NUMBER := LPAD(V_TERMINAL_NUMBER || V_DRAFT_NBR || V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT, 10, '0');

        SD_TABLE_IU_PKG.CHECK_NBR_PRNT_EXTRCT_DTLS_I_SP(V_CHK_NBR_PRNT_EXTRCT_DTL_REC);
    END LOOP;

    --Building record for SD_CHECK_NBR_TRCKNG_DTLS
    V_CHK_NBR_TRCKNG_DTLS_REC.COST_CENTER_CODE    := IN_COST_CENTER_CODE;
    V_CHK_NBR_TRCKNG_DTLS_REC.CHKS_ORDERED_DATE   := NVL(IN_ORDER_DATE, SYSDATE);
    V_CHK_NBR_TRCKNG_DTLS_REC.ORDERED_STRTNG_DRFT := V_STARTING_DRAFT_NUMBER;
    V_CHK_NBR_TRCKNG_DTLS_REC.ORDERED_ENDNG_DRFT  := V_DRAFT_NBR;

    SD_TABLE_IU_PKG.CHECK_NBR_TRCKNG_DTLS_I_SP(V_CHK_NBR_TRCKNG_DTLS_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'LOAD_EXTRACT_TBL',  SQLERRM);
END LOAD_EXTRACT_TBL;

PROCEDURE INITLD_LOAD_EXTRACT_TBL(
/**********************************************************
Init load should not differentiate USA and CAN stores as currently
for both the countries the draft numbers start from 1000 to 9999

Created : 07/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
Changed : 
**********************************************************/
    IN_COST_CENTER_CODE           IN      VARCHAR2,
    IN_PREV_PRINT_DRAFT_END_NBR   IN      NUMBER,
    IN_SD_CHK_TYP_REC             IN      SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE,
    IN_ORDER_DATE                 IN      DATE DEFAULT NULL)
IS
    V_TOTAL_CHECKS                   NUMBER;
    V_DRAFT_NBR                      NUMBER;
    V_TERMINAL_NUMBER                VARCHAR2(5) := CCN_COMMON_TOOLS.GET_DESIGNATED_TERMINAL_NUMBER(IN_COST_CENTER_CODE);
    V_COUNTRY_CODE                   VARCHAR2(4);
    V_STARTING_DRAFT_NUMBER          NUMBER;
    V_CHK_NBR_PRNT_EXTRCT_DTL_REC    SD_CHECK_NBR_PRNT_EXTRCT_DTLS%ROWTYPE;
    V_CHK_NBR_TRCKNG_DTLS_REC        SD_CHECK_NBR_TRCKNG_DTLS%ROWTYPE;
    V_PREV_PRINT_DRAFT_END_NBR       NUMBER := LEAST(IN_PREV_PRINT_DRAFT_END_NBR, 9999);
BEGIN
    V_TOTAL_CHECKS   := IN_SD_CHK_TYP_REC.NO_OF_BOOKS * (IN_SD_CHK_TYP_REC.CHECKS_PER_BOOK/2);

    FOR draft_iterator IN 1 .. V_TOTAL_CHECKS LOOP
        V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator;
        IF V_DRAFT_NBR > 9999 THEN
            V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator - 9000;
        END IF;
        --Below condition is to make sure new cost centers are allowed to have place order feature
        --and ordering starts for those from 1000 and 100 respectively for USA and CAN cost centers
        IF draft_iterator = 1 THEN
            V_STARTING_DRAFT_NUMBER := V_DRAFT_NBR;
        END IF;

        --Building record for SD_CHECK_NBR_PRNT_EXTRCT_DTLS
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHKS_ORDERED_DATE   := NVL(IN_ORDER_DATE, TRUNC(SYSDATE));
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.SRT_CHKDLY_SEQ_NBR  := draft_iterator;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.COST_CENTER_CODE    := IN_COST_CENTER_CODE;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.TERMINAL_NUMBER     := V_TERMINAL_NUMBER;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ORDERED_DRFT_NUMBER := V_DRAFT_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT         := CCN_COMMON_TOOLS.MODULUS_10(SUBSTR(IN_COST_CENTER_CODE, 3) || V_DRAFT_NBR);
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ROUTING_NBR         := IN_SD_CHK_TYP_REC.BANK_ROUTING_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ACCOUNT_NUMBER      := IN_SD_CHK_TYP_REC.BANK_ACCOUNT_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.LETTER              := 'A';
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.RUN_TYPE            := IN_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.RUNTYPE_DESCRIPTION := CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('STORE_DRAFT_CHECK_RUN_TYPE', 'COD', IN_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE);
        --Initload uses old logic 0 + 4 digit store + 4 digit draft + 1 check digit
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CCN_CHECK_SERIAL_NUMBER := '0' || SUBSTR(IN_COST_CENTER_CODE,-4) || V_DRAFT_NBR || V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT; 

        SD_TABLE_IU_PKG.CHECK_NBR_PRNT_EXTRCT_DTLS_I_SP(V_CHK_NBR_PRNT_EXTRCT_DTL_REC);

        V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator + V_TOTAL_CHECKS;
        IF V_DRAFT_NBR > 9999 THEN
            V_DRAFT_NBR := V_PREV_PRINT_DRAFT_END_NBR + draft_iterator + V_TOTAL_CHECKS - 9000;
        END IF;
        -- Resetting few field values for Letter 'B'
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.ORDERED_DRFT_NUMBER := V_DRAFT_NBR;
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT         := CCN_COMMON_TOOLS.MODULUS_10(SUBSTR(IN_COST_CENTER_CODE, 3) || V_DRAFT_NBR);
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.LETTER              := 'B';
        --Initload uses old logic 0 + 4 digit store + 4 digit draft + 1 check digit
        V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CCN_CHECK_SERIAL_NUMBER := '0' || SUBSTR(IN_COST_CENTER_CODE,-4) || V_DRAFT_NBR || V_CHK_NBR_PRNT_EXTRCT_DTL_REC.CHECK_DIGIT;

        SD_TABLE_IU_PKG.CHECK_NBR_PRNT_EXTRCT_DTLS_I_SP(V_CHK_NBR_PRNT_EXTRCT_DTL_REC);
    END LOOP;

    --Building record for SD_CHECK_NBR_TRCKNG_DTLS
    V_CHK_NBR_TRCKNG_DTLS_REC.COST_CENTER_CODE    := IN_COST_CENTER_CODE;
    V_CHK_NBR_TRCKNG_DTLS_REC.CHKS_ORDERED_DATE   := NVL(IN_ORDER_DATE, SYSDATE);
    V_CHK_NBR_TRCKNG_DTLS_REC.ORDERED_STRTNG_DRFT := V_STARTING_DRAFT_NUMBER;
    V_CHK_NBR_TRCKNG_DTLS_REC.ORDERED_ENDNG_DRFT  := V_DRAFT_NBR;

    SD_TABLE_IU_PKG.CHECK_NBR_TRCKNG_DTLS_I_SP(V_CHK_NBR_TRCKNG_DTLS_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'INITLD_LOAD_EXTRACT_TBL',  SQLERRM);
END INITLD_LOAD_EXTRACT_TBL;

PROCEDURE SD_CHECK_NBR_PRINT_PROCESS
/**********************************************************
This procedure will go ahead and place draft print order if unused drafts less then threshold.

Created : 07/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
Changed : 
**********************************************************/
IS
    CURSOR cc_main_cursor IS
        SELECT DISTINCT COST_CENTER_CODE
          FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
         ORDER BY 1;

    V_STR_DRFT_RUN_TYPE_REC    STORE_RUN_TYPE_DETAILS%ROWTYPE;
    V_PREV_END_DRFT_NBR        NUMBER;
    V_SD_CHK_TYP_REC           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE;
    V_COST_CENTER_CODE         SD_CHECK_NBR_PRNT_EXTRCT_DTLS.COST_CENTER_CODE%TYPE;

FUNCTION GET_UNUSED_DRAFT_COUNT(IN_COST_CENTER   IN   VARCHAR2) RETURN NUMBER
IS
    V_RETURN_VAL   NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_RETURN_VAL
      FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
     WHERE USED_IN_POS_ON_DATE IS NULL
       AND COST_CENTER_CODE = IN_COST_CENTER
      GROUP BY COST_CENTER_CODE
      ORDER BY 1;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_UNUSED_DRAFT_COUNT;

BEGIN
    FOR rec IN cc_main_cursor LOOP
        V_STR_DRFT_RUN_TYPE_REC  := GET_STORE_DRAFT_RUN_TYPE_REC(rec.COST_CENTER_CODE);
        V_SD_CHK_TYP_REC         := GET_SD_CHK_TYP_REC(V_STR_DRFT_RUN_TYPE_REC.STORE_DRAFT_CHECK_RUN_TYPE);
        V_COST_CENTER_CODE       := rec.cost_center_code;
        IF GET_UNUSED_DRAFT_COUNT(rec.COST_CENTER_CODE) <= V_SD_CHK_TYP_REC.STORE_DRFT_THRESHOLD THEN
            V_PREV_END_DRFT_NBR      := GET_PREV_PRINT_DRAFT_END_NBR(rec.COST_CENTER_CODE);
            LOAD_EXTRACT_TBL(rec.COST_CENTER_CODE,
                             V_PREV_END_DRFT_NBR,
                             V_SD_CHK_TYP_REC);
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,'SD_CHECK_NBR_PRINT_PROCESS',SQLERRM,V_COST_CENTER_CODE,'0000000000');
END SD_CHECK_NBR_PRINT_PROCESS;

PROCEDURE SD_CHECK_NBR_PRINT_PROCESS(
/**********************************************************
This procedure will go ahead and place draft print order on demand for the cost center passed.

Created : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN project Team.... 
Changed : 
**********************************************************/
    IN_COST_CENTER_CODE   IN    VARCHAR2)
IS
    V_STR_DRFT_REC             STORE_RUN_TYPE_DETAILS%ROWTYPE;
    V_PREV_END_DRFT_NBR        NUMBER;
    V_SD_CHK_TYP_REC           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE;
    no_run_type_err            EXCEPTION;
BEGIN
    V_STR_DRFT_REC           := GET_STORE_DRAFT_RUN_TYPE_REC(IN_COST_CENTER_CODE);
    V_SD_CHK_TYP_REC         := GET_SD_CHK_TYP_REC(V_STR_DRFT_REC.STORE_DRAFT_CHECK_RUN_TYPE);
    V_PREV_END_DRFT_NBR      := GET_PREV_PRINT_DRAFT_END_NBR(IN_COST_CENTER_CODE);

    IF V_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE IS NULL THEN
       RAISE no_run_type_err;
    END IF;

    LOAD_EXTRACT_TBL(IN_COST_CENTER_CODE,
                     V_PREV_END_DRFT_NBR,
                     V_SD_CHK_TYP_REC);
EXCEPTION
    WHEN no_run_type_err THEN
       ERRPKG.RAISE_ERR(errnums.en_no_run_type_err,'To place order Run Type should exist in Run Type Maintenance window');                     
END SD_CHECK_NBR_PRINT_PROCESS;

PROCEDURE SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_UPSERT_SP (
/**********************************************************
This procedure will insert/update into the SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS table.

<SD_CHECK_NBR_PRNT_UI>
 <SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS>
   <STORE_DRAFT_CHECK_RUN_TYPE>S</STORE_DRAFT_CHECK_RUN_TYPE>
   <NO_OF_BOOKS>2</NO_OF_BOOKS>
   <CHECKS_PER_BOOK>201</CHECKS_PER_BOOK>
   <STORE_DRFT_THRESHOLD>10</STORE_DRFT_THRESHOLD>
   <BANK_ACCOUNT_NBR>9823469237</BANK_ACCOUNT_NBR>
   <BANK_ROUTING_NBR>242352353456</BANK_ROUTING_NBR>
   <CREATED_BY_USER_ID>kxm302</CREATED_BY_USER_ID>
   <CREATED_ON_DATE>01-11-2019</CREATED_ON_DATE>
 </SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS>
 <SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS>
   <STORE_DRAFT_CHECK_RUN_TYPE>L</STORE_DRAFT_CHECK_RUN_TYPE>
   <NO_OF_BOOKS>2</NO_OF_BOOKS>
   <CHECKS_PER_BOOK>76</CHECKS_PER_BOOK>
   <STORE_DRFT_THRESHOLD>40</STORE_DRFT_THRESHOLD>
   <BANK_ACCOUNT_NBR>9823469237</BANK_ACCOUNT_NBR>
   <BANK_ROUTING_NBR>242352353456</BANK_ROUTING_NBR>
   <CREATED_BY_USER_ID>kxm302</CREATED_BY_USER_ID>
   <CREATED_ON_DATE>01-11-2019</CREATED_ON_DATE>
 </SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS>
</SD_CHECK_NBR_PRNT_UI>

Created : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN project Team.... 
Changed : 7/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
          Added business rule to validate the existence of check run type 
          in code_detail table. 
**********************************************************/
    IN_XML                CLOB)
IS
    V_XML                                    XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_COUNT				                      NUMBER := 1;
    V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_ROW    SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE;
BEGIN
    WHILE V_XML.EXISTSNODE('/SD_CHECK_NBR_PRNT_UI/SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS' ||  '[' || V_COUNT || ']') = 1 LOOP
        SD_TABLE_IU_PKG.SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_ROWTYPE_SP (
               'SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS',
               V_XML.EXTRACT('/SD_CHECK_NBR_PRNT_UI/SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS' || '[' || V_COUNT || ']').GETCLOBVAL(),
               V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_ROW);

         --business rule validation to check the existence of check run type in code_detail table.
        SD_BUSINESS_RULES_PKG.SD_VALIDATE_RUN_TYPE_DETAILS(V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_ROW);
        SD_TABLE_IU_PKG.SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_I_SP(V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_ROW);
        V_COUNT := V_COUNT + 1;
    END LOOP;
    ERRPKG.RAISE_WARNINGS();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_UPSERT_SP', SQLERRM);
END SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_UPSERT_SP;

PROCEDURE STORE_RUN_TYPE_DETAILS_UPSERT_SP (
/**********************************************************
This procedure will insert/update into the STORE_RUN_TYPE_DETAILS table.

<STORE_RUN_TYPE_DETAILS_UI>
 <STORE_RUN_TYPE_DETAILS>
   <COST_CENTER_CODE>701004</COST_CENTER_CODE>
   <STORE_DRAFT_CHECK_RUN_TYPE>S</STORE_DRAFT_CHECK_RUN_TYPE>
   <CREATED_BY_USER_ID>kxm302</CREATED_BY_USER_ID>
   <CREATED_ON_DATE>01-11-2019</CREATED_ON_DATE>
 </STORE_RUN_TYPE_DETAILS>
</STORE_RUN_TYPE_DETAILS_UI> 

Created : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN project Team.... 
        : Added Business rule to check Run Type available in Run Type Maintenance window to place order in check order details.
Changed :
**********************************************************/
    IN_XML                CLOB)
IS
    V_XML                                XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_COUNT                              NUMBER := 1;
    V_STORE_RUN_TYPE_DETAILS_ROW         STORE_RUN_TYPE_DETAILS%ROWTYPE;
BEGIN
    SD_TABLE_IU_PKG.STORE_RUN_TYPE_DETAILS_ROWTYPE_SP('STORE_RUN_TYPE_DETAILS',
        V_XML.EXTRACT('/STORE_RUN_TYPE_DETAILS_UI/STORE_RUN_TYPE_DETAILS' || '[' || V_COUNT || ']').GETCLOBVAL(),
        V_STORE_RUN_TYPE_DETAILS_ROW);

    --Business rule to check Run Type available in Run Type Maintenance window to place order in check order details.
    SD_BUSINESS_RULES_PKG.SD_RUN_TYPE_VALIDATION(V_STORE_RUN_TYPE_DETAILS_ROW);

    SD_TABLE_IU_PKG.STORE_RUN_TYPE_DETAILS_I_SP(V_STORE_RUN_TYPE_DETAILS_ROW);
END STORE_RUN_TYPE_DETAILS_UPSERT_SP;

PROCEDURE INITIAL_DRAFT_DTLS_LOAD_PROCESS
/**********************************************************
This procedure will be a one-time run that loads the initial data as provided from
1) Julio's team => Run type details
2) Pat's team => Run type tie back with stores
3) Jason's team => previous order date/check draft numbers

Created : 7/15/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team.... 
Changed : 
**********************************************************/
IS
    V_STR_DRFT_RUN_TYPE_REC   STORE_RUN_TYPE_DETAILS%ROWTYPE;
    V_PREV_END_DRFT_NBR        NUMBER;
    V_SD_CHK_TYP_REC           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE;
    no_run_type_err            EXCEPTION;

    V_CHK_NBR_PRNT_EXTRCT_DTL_REC    SD_CHECK_NBR_PRNT_EXTRCT_DTLS%ROWTYPE;
BEGIN
    DELETE FROM STORE_RUN_TYPE_DETAILS;
    DELETE FROM SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS;
    DELETE FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS;
    DELETE FROM SD_CHECK_NBR_TRCKNG_DTLS;

    --Load run type data received from Julio's team
    --Load threshold data received from Jason's team
    INSERT INTO SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS VALUES ('L',5,50,10,'8800600275','061100790',TRUNC(SYSDATE),null,null,TRUNC(SYSDATE));
    INSERT INTO SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS VALUES ('S',1,50,10,'8800600275','061100790',TRUNC(SYSDATE),null,null,TRUNC(SYSDATE));
    INSERT INTO SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS VALUES ('A',1,50,10,'8800600853','061100790',TRUNC(SYSDATE),null,null,TRUNC(SYSDATE));
    INSERT INTO SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS VALUES ('C',1,50,10,'101 283 0','04222 003',TRUNC(SYSDATE),null,null,TRUNC(SYSDATE));
    COMMIT;

    --Load run type tie back to store using data received from Pat's team
    BEGIN
        FOR rec IN (SELECT * FROM TEMP_STORE_RUN_TYPE_DETAILS ORDER BY 1) LOOP
            BEGIN
                INSERT INTO STORE_RUN_TYPE_DETAILS VALUES (rec.COST_CENTER_CODE, rec.RUN_TYPE, TRUNC(SYSDATE), NULL, 'INITLD', TRUNC(SYSDATE));
                COMMIT;
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Error : ' || rec.COST_CENTER_CODE || ' - ' || SQLCODE || ' >>> ' || SQLERRM);
            END;
        END LOOP;
    END;

    --Load ordered drafts details using data received from Jason's team
    FOR rec IN (SELECT * FROM TEMP_SD_ORDER_DETAILS) LOOP
        BEGIN
            V_STR_DRFT_RUN_TYPE_REC  := GET_STORE_DRAFT_RUN_TYPE_REC(rec.COST_CENTER_CODE);
            V_SD_CHK_TYP_REC         := GET_SD_CHK_TYP_REC(V_STR_DRFT_RUN_TYPE_REC.STORE_DRAFT_CHECK_RUN_TYPE);
            V_PREV_END_DRFT_NBR      := rec.END_DRFT_NBR - (V_SD_CHK_TYP_REC.NO_OF_BOOKS * V_SD_CHK_TYP_REC.CHECKS_PER_BOOK + 1);

            IF V_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE IS NULL THEN
                RAISE no_run_type_err;
            END IF;
            INITLD_LOAD_EXTRACT_TBL(rec.COST_CENTER_CODE,
                                    V_PREV_END_DRFT_NBR,
                                    V_SD_CHK_TYP_REC,
                                    TO_DATE(rec.LAST_ORDER_DATE,'MM/DD/YYYY'));

            FOR rec1 IN (SELECT COST_CENTER_CODE,
                                CHECK_SERIAL_NUMBER,
                                TRANSACTION_DATE
                           FROM (SELECT COST_CENTER_CODE,
                                        CHECK_SERIAL_NUMBER,
                                        TRANSACTION_DATE
                                   FROM STORE_DRAFTS
                              UNION ALL
                                 SELECT COST_CENTER_CODE,
                                        CHECK_SERIAL_NUMBER,
                                        TRANSACTION_DATE
                                   FROM UNATTACHED_MNL_DRFT_DTL)
                          WHERE COST_CENTER_CODE = rec.COST_CENTER_CODE
                            AND CHECK_SERIAL_NUMBER IN (SELECT CCN_CHECK_SERIAL_NUMBER
                                                          FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
                                                         WHERE COST_CENTER_CODE = rec.COST_CENTER_CODE
                                                           AND USED_IN_POS_ON_DATE IS NULL)) LOOP 
                SD_TABLE_IU_PKG.MARK_CHK_NBR_AS_USED_IN_POS(rec1.CHECK_SERIAL_NUMBER, rec1.TRANSACTION_DATE);
            END LOOP;
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error : ' || rec.COST_CENTER_CODE || ' - ' || SQLCODE || ' >>> ' || SQLERRM);
        END;
    END LOOP;
EXCEPTION 
    WHEN no_run_type_err THEN
       ERRPKG.RAISE_ERR(errnums.en_no_run_type_err,'To place order Run Type should exist in Run Type Maintenance window');                     
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'INITIAL_DRAFT_DTLS_LOAD_PROCESS',  SQLERRM);
END INITIAL_DRAFT_DTLS_LOAD_PROCESS;

FUNCTION GET_CHECK_SERIAL_NUMBER(
/****************************************************************************************
This function will return 10 digit check serial number for the check serial number passed.

Created : 7/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team.... 
Changed : 
*****************************************************************************************/
IN_CHECK_SERIAL_NUMBER   IN   STORE_DRAFTS.CHECK_SERIAL_NUMBER%TYPE,
IN_TRANSACTION_DATE      IN   STORE_DRAFTS.TRANSACTION_DATE%TYPE DEFAULT NULL)
RETURN VARCHAR2
IS
    V_CHECK_SERIAL_NUMBER          VARCHAR2(10);
    invalid_check_number_err       EXCEPTION;
BEGIN
    BEGIN
        IF IN_TRANSACTION_DATE IS NOT NULL THEN
            SELECT CCN_CHECK_SERIAL_NUMBER
              INTO V_CHECK_SERIAL_NUMBER
              FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
             WHERE CCN_CHECK_SERIAL_NUMBER = IN_CHECK_SERIAL_NUMBER
               AND USED_IN_POS_ON_DATE = IN_TRANSACTION_DATE;
        ELSE 
            SELECT CCN_CHECK_SERIAL_NUMBER
              INTO V_CHECK_SERIAL_NUMBER
              FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
             WHERE CCN_CHECK_SERIAL_NUMBER = IN_CHECK_SERIAL_NUMBER
               AND USED_IN_POS_ON_DATE IS NULL;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE invalid_check_number_err;
    END;
    RETURN V_CHECK_SERIAL_NUMBER;
EXCEPTION
     WHEN invalid_check_number_err THEN
          errpkg.raise_err(errnums.en_inv_check_num_err,'Please enter a valid 4 digit unused printed check number.');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'GET_CHECK_SERIAL_NUMBER',  SQLERRM);
END GET_CHECK_SERIAL_NUMBER;

FUNCTION GET_CHECK_SERIAL_NUMBER(
/*********************************************************************************
This is an overloading function and will return  10 digit check serial number for
the cost centger and draft number passed.

Created : 7/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team.... 
Changed : 
***********************************************************************************/
IN_COST_CENTER_CODE  IN      SD_CHECK_NBR_PRNT_EXTRCT_DTLS.COST_CENTER_CODE%TYPE,
IN_DRAFT_NUMBER      IN      SD_CHECK_NBR_PRNT_EXTRCT_DTLS.CCN_CHECK_SERIAL_NUMBER%TYPE,
IN_TRANSACTION_DATE  IN      STORE_DRAFTS.TRANSACTION_DATE%TYPE DEFAULT NULL)
RETURN VARCHAR2
IS
    V_CHECK_SERIAL_NUMBER          VARCHAR2(10);
    invalid_check_number_err       EXCEPTION;
BEGIN
    BEGIN
        IF IN_TRANSACTION_DATE IS NOT NULL THEN
            SELECT CCN_CHECK_SERIAL_NUMBER
              INTO V_CHECK_SERIAL_NUMBER
              FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
             WHERE COST_CENTER_CODE    = IN_COST_CENTER_CODE
               AND ORDERED_DRFT_NUMBER = IN_DRAFT_NUMBER
               AND USED_IN_POS_ON_DATE  = IN_TRANSACTION_DATE;
        ELSE
            SELECT CCN_CHECK_SERIAL_NUMBER
              INTO V_CHECK_SERIAL_NUMBER
              FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
             WHERE COST_CENTER_CODE    = IN_COST_CENTER_CODE
               AND ORDERED_DRFT_NUMBER = IN_DRAFT_NUMBER
               AND USED_IN_POS_ON_DATE IS NULL;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE invalid_check_number_err;
    END;
    RETURN V_CHECK_SERIAL_NUMBER;
EXCEPTION
     WHEN invalid_check_number_err THEN
          errpkg.raise_err(errnums.en_inv_check_num_err,'Please enter a valid 4 digit unused printed check number.');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'GET_CHECK_SERIAL_NUMBER',  SQLERRM);
END GET_CHECK_SERIAL_NUMBER;

FUNCTION GET_DRAFT_NUMBER(
/***********************************************************************
This function will return 5 digit draft number for the cost center and
check serial number passed.

Created : 7/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team.... 
Changed : 
************************************************************************/
IN_CHECK_SERIAL_NUMBER      IN      SD_CHECK_NBR_PRNT_EXTRCT_DTLS.CCN_CHECK_SERIAL_NUMBER%TYPE)
RETURN NUMBER
IS
    V_DRAFT_NUMBER NUMBER;
BEGIN
    SELECT ORDERED_DRFT_NUMBER
      INTO V_DRAFT_NUMBER
      FROM SD_CHECK_NBR_PRNT_EXTRCT_DTLS
     WHERE CCN_CHECK_SERIAL_NUMBER = IN_CHECK_SERIAL_NUMBER
       AND USED_IN_POS_ON_DATE IS NULL;

    RETURN V_DRAFT_NUMBER;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'GET_DRAFT_NUMBER',  SQLERRM);
END GET_DRAFT_NUMBER;

PROCEDURE SD_CHECK_NBR_PRINT_BATCH_PROCESS
/**************************************************************************************
This procedure will be called by shell script sd_print_check_number.sh and will go ahead 
and place draft print order if unused drafts less then threshold.

Created : 08/06/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
Changed : 
***************************************************************************************/
IS
    V_START_TIME              DATE := SYSDATE;
    V_CONTEXT                 VARCHAR2(200);
    V_BATCH_NUMBER            CCN_BATCH_PKG.BATCH_JOB_TYPE.BATCH_JOB_NUMBER%TYPE;
    V_CLOB_FOR_EMAIL          CLOB;
    V_TRANS_STATUS            CCN_BATCH_PKG.BATCH_JOB_TYPE.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    V_CONTEXT:='Inserting a record in the Batch_Job table with Status as PROCESSING';
    CCN_BATCH_PKG.INSERT_BATCH_JOB('SD_CHKNBR_PRNT_PROC', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    SD_CHECK_NBR_PRINT_SRVCS.SD_CHECK_NBR_PRINT_PROCESS();
    V_CONTEXT:='Updating the Status in batch_job table';
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('SD_CHKNBR_PRNT_PROC', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    ERRPKG.ERROR_DETAILS(V_START_TIME, SYSDATE, V_CLOB_FOR_EMAIL);
    IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
         V_CLOB_FOR_EMAIL := 'SD_CHECK_PRINT_ERROR_TEXT' || CHR(10) || V_CLOB_FOR_EMAIL;
         MAIL_PKG.SEND_MAIL('SD_CHECK_PRINT_BATCH_PROC_FAIL',NULL, NULL, V_CLOB_FOR_EMAIL);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
         MAIL_PKG.SEND_MAIL('SD_CHECK_PRINT_BATCH_PROC_FAIL',NULL, NULL, NULL);
         ERRPKG.RAISE_ERR(SQLCODE,'SD_CHECK_NBR_PRINT_BATCH_PROCESS',  SQLERRM);
END SD_CHECK_NBR_PRINT_BATCH_PROCESS;

END SD_CHECK_NBR_PRINT_SRVCS;