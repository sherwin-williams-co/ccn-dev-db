create or replace PACKAGE body SD_BUSINESS_RULES_PKG
/****************************************************************************** 
This package BODY will do the business rules validations:

created : 06/30/2014 
changed :
******************************************************************************/
AS

PROCEDURE SET_STORE_DRAFT_FLAGS(
/*****************************************************************************
	SET_STORE_DRAFT_FLAGS

	This function will get set the flag values for store drafts table

created : 07/10/2014 
changed : 
*****************************************************************************/
    IN_ROW_TYPE     IN OUT    STORE_DRAFTS%ROWTYPE)
IS
BEGIN
    IF IN_ROW_TYPE.VOID_DATE IS NULL AND IN_ROW_TYPE.STOP_PAY_DATE IS NULL THEN
        IN_ROW_TYPE.OPEN_INDICATOR := 'Y';
    ELSE
        IN_ROW_TYPE.OPEN_INDICATOR := 'N';
    END IF;
    IF IN_ROW_TYPE.PAID_DATE IS NOT NULL THEN
        IN_ROW_TYPE.PAY_INDICATOR := 'Y';
    ELSE
        IN_ROW_TYPE.PAY_INDICATOR := 'N';
    END IF;
    IF IN_ROW_TYPE.STOP_PAY_DATE IS NOT NULL THEN
        IN_ROW_TYPE.STOP_INDICATOR := 'Y';
    ELSE
        IN_ROW_TYPE.STOP_INDICATOR := 'N';
    END IF;
    IF IN_ROW_TYPE.VOID_DATE IS NOT NULL THEN
        IN_ROW_TYPE.VOID_INDICATOR := 'Y';
    ELSE
        IN_ROW_TYPE.VOID_INDICATOR := 'N';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'SET_STORE_DRAFT_FLAGS', SUBSTR(SQLERRM,1,200));
END SET_STORE_DRAFT_FLAGS;

FUNCTION IS_UNATTACHED_STORE_DRAFT(
/*****************************************************************************
	IS_UNATTACHED_STORE_DRAFT

	This function will return if the passed record is unattached or not based on some ruels.  

created : 07/01/2014 jxc517 CCN Project Team.....
changed : 12/10/2014 jxc517 CCN Project Team.....
          Modified code to handle updates on unattached manual drafts
*****************************************************************************/
    IN_STORE_DRAFTS_RECORD     IN    STORE_DRAFTS%ROWTYPE) RETURN BOOLEAN
IS
    V_RETURN_VALUE BOOLEAN := FALSE;
BEGIN
    IF IN_STORE_DRAFTS_RECORD.COST_CENTER_CODE IS NULL
            OR IN_STORE_DRAFTS_RECORD.CHECK_SERIAL_NUMBER IS NULL
            OR IN_STORE_DRAFTS_RECORD.TRANSACTION_DATE IS NULL THEN
        V_RETURN_VALUE := TRUE;
    END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_UNATTACHED_STORE_DRAFT;

FUNCTION GET_CHECK_SERIAL_NUMBER(
/*****************************************************************************
This function will return the 10 digit check serial number based on passed 
check serial number or (cost center id and draft number).

created : 09/10/2014 jxc517 CCN Project . . .
changed : 07/25/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
*****************************************************************************/
    IN_COST_CENTER_CODE    IN    STORE_DRAFTS.COST_CENTER_CODE%TYPE,
    IN_CHECK_NUMBER        IN    VARCHAR2) RETURN VARCHAR2
IS
    V_CHECK_NUMBER                 VARCHAR2(4);
    V_COST_CENTER                  VARCHAR2(4);
    V_CHECK_SERIAL_NUMBER          VARCHAR2(10);
BEGIN
    IF LENGTH(IN_CHECK_NUMBER) = 10 THEN
        V_CHECK_SERIAL_NUMBER := IN_CHECK_NUMBER;
    ELSIF LENGTH(IN_CHECK_NUMBER) = 4 THEN
        V_CHECK_NUMBER := IN_CHECK_NUMBER;
    ELSIF LENGTH(IN_CHECK_NUMBER) > 4 THEN
        V_CHECK_NUMBER := SUBSTR(IN_CHECK_NUMBER,-5,4);
    END IF;
    --If 10 digit check number is passed then it will be used to validate against 10 digit check serial number 
    --If other than 10 digit check number is passed then its assumed that cost center and check number 
    --combination will be used to get 10 digit check serial number
    --In any case if check number (draft number) passed is not in unused available printed draft number
    --then error message will be displayed .
    IF V_CHECK_SERIAL_NUMBER IS NOT NULL THEN
        V_CHECK_SERIAL_NUMBER := SD_CHECK_NBR_PRINT_SRVCS.GET_CHECK_SERIAL_NUMBER(V_CHECK_SERIAL_NUMBER);
    ELSE
        V_CHECK_SERIAL_NUMBER := SD_CHECK_NBR_PRINT_SRVCS.GET_CHECK_SERIAL_NUMBER(IN_COST_CENTER_CODE,V_CHECK_NUMBER);
    END IF;

    RETURN V_CHECK_SERIAL_NUMBER;
EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.RAISE_ERR(SQLCODE,'GET_CHECK_SERIAL_NUMBER',  SQLERRM);
END GET_CHECK_SERIAL_NUMBER;

PROCEDURE UNATTACHED_MNL_DRFT_DTL_SP(
/*****************************************************************************
	UNATTACHED_MNL_DRFT_DTL_SP

	This procedure will do the bussiness rules validations for UNATTACHED_MNL_DRFT_DTL table

created : 09/12/2014 jxc517 CCN Project . . .
changed :
*****************************************************************************/
    IN_RECORD IN    UNATTACHED_MNL_DRFT_DTL%ROWTYPE)
IS
    mnl_drft_check_nbr_err EXCEPTION;
BEGIN
    IF NVL(LENGTH(IN_RECORD.CHECK_SERIAL_NUMBER),0) <> 4  THEN
        RAISE mnl_drft_check_nbr_err;
    END IF;
EXCEPTION
    WHEN mnl_drft_check_nbr_err THEN
        errpkg.raise_err(errnums.en_mnl_drft_check_nbr_err, 
                         'Size of the draft check number should be exactly 4 characters');
    WHEN OTHERS THEN 
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_BUSINESS_RULES_PKG.UNATTACHED_MNL_DRFT_DTL_SP, ', SUBSTR(SQLERRM,1,200));	
END UNATTACHED_MNL_DRFT_DTL_SP;

PROCEDURE STORE_DRAFTS_SP(
/*****************************************************************************
	STORE_DRAFTS_SP

	This procedure will do the bussiness rules validations for STORE_DRAFTS table

created : 09/12/2014 jxc517 CCN Project . . .
changed :
*****************************************************************************/
    IN_RECORD IN    STORE_DRAFTS%ROWTYPE)
IS
    pay_indicator_set_err EXCEPTION;
    V_PAY_INDICATOR       STORE_DRAFTS.PAY_INDICATOR%TYPE;
BEGIN
    BEGIN
        SELECT PAY_INDICATOR
          INTO V_PAY_INDICATOR
          FROM STORE_DRAFTS
         WHERE CHECK_SERIAL_NUMBER = IN_RECORD.CHECK_SERIAL_NUMBER;
    EXCEPTION
        WHEN OTHERS THEN
            --Not found the record in store_drafts table, so might be unattached manual draft
            BEGIN
                SELECT PAY_INDICATOR
                  INTO V_PAY_INDICATOR
                  FROM UNATTACHED_MNL_DRFT_DTL
                 WHERE CHECK_SERIAL_NUMBER = IN_RECORD.CHECK_SERIAL_NUMBER;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
    END;
    IF  NVL(V_PAY_INDICATOR,'N') = 'Y' THEN
        RAISE pay_indicator_set_err;
    END IF;
EXCEPTION
    WHEN pay_indicator_set_err THEN
        errpkg.raise_err(errnums.en_pay_indicator_set_err, 
                         'Draft with pay indicator already set can not be updated');
    WHEN OTHERS THEN 
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_BUSINESS_RULES_PKG.STORE_DRAFTS_SP, ', SUBSTR(SQLERRM,1,200));	
END STORE_DRAFTS_SP;

PROCEDURE SD_BANK_FILE_SENT_DETAILS_SP(
/*****************************************************************************
	SD_BANK_FILE_SENT_DETAILS_SP

	This procedure will do the bussiness rules validations for SD_BANK_FILE_SENT_DETAILS table

created : 09/29/2014 jxc517 CCN Project . . .
changed : 12/10/2014 jxc517 CCN Project . . .
          Modified logic to treat manual drafts differently from regular drafts
          Multiple maintenance on manual draft on the same day is allowed, with warning
          Multiple maintenance on regular draft on the same day is NOT allowed, and a error will be raised
          12/12/2014 axk326 CCN Project . . .
          Modified logic in STORE_DRAFTS_I_SP() to save the change amount in regular drafts though they were
          maintained more than once on the same day. . . 
       :  dxv848 Modifying the warning message when the draft is maintained more than one time in a day. 
*****************************************************************************/
    IN_COST_CENTER_CODE    IN    SD_BANK_FILE_SENT_DETAILS.COST_CENTER_CODE%TYPE,
    IN_CHECK_SERIAL_NUMBER IN    SD_BANK_FILE_SENT_DETAILS.CHECK_SERIAL_NUMBER%TYPE)
IS
    mntnc_not_allwd_twice_err EXCEPTION;
    V_COUNT                   NUMBER := 0;
BEGIN

    BEGIN
        SELECT COUNT(*)
          INTO V_COUNT
          FROM SD_BANK_FILE_SENT_DETAILS
         WHERE COST_CENTER_CODE    = IN_COST_CENTER_CODE
           AND CHECK_SERIAL_NUMBER = IN_CHECK_SERIAL_NUMBER
           AND TRUNC(PROCESS_DATE) = TRUNC(SYSDATE);
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    IF V_COUNT > 0 THEN
         --If manual draft, regular draft and maintained twice on the same day as it is created => WARNING 
         ERRPKG.STORE_WARNINGS(errnums.en_mntnc_not_allwd_twice_wrn,
                               'This draft has been modified more than once today');   
    END IF;
EXCEPTION

    WHEN OTHERS THEN 
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_BUSINESS_RULES_PKG.SD_BANK_FILE_SENT_DETAILS_SP, ', SUBSTR(SQLERRM,1,200));	
END SD_BANK_FILE_SENT_DETAILS_SP;

PROCEDURE SD_GL_ACCOUNT_VALIDATION(
/*****************************************************************************
	SD_GL_ACCOUNT_VALIDATION

	This procedure will do the bussiness rules validations for GL_ACCOUNT_NUMBER

created : 11/04/2014 jxc517 CCN Project . . .
changed :
*****************************************************************************/
    IN_GL_ACCOUNT_NUMBER    IN    VARCHAR2)
IS
    gl_prime_accnt_nbr_err    EXCEPTION;
    gl_sub_accnt_nbr_err      EXCEPTION;
    V_COUNT                   NUMBER := 0;
BEGIN
    IF IN_GL_ACCOUNT_NUMBER IS NOT NULL AND INSTR(IN_GL_ACCOUNT_NUMBER,'-') > 0 THEN
    --Do the below validatoin only if GL_ACCOUNT_NUMBER is passed as xxxx-xxx and is not null
        IF LENGTH(SUBSTR(IN_GL_ACCOUNT_NUMBER,1,INSTR(IN_GL_ACCOUNT_NUMBER,'-')-1)) <> 4 THEN
            RAISE gl_prime_accnt_nbr_err;
        ELSIF LENGTH(SUBSTR(IN_GL_ACCOUNT_NUMBER,INSTR(IN_GL_ACCOUNT_NUMBER,'-')+1)) <> 3 THEN
            RAISE gl_sub_accnt_nbr_err;
        END IF;
    END IF;
EXCEPTION
    WHEN gl_prime_accnt_nbr_err THEN
        errpkg.raise_err(errnums.en_gl_prime_accnt_nbr_err, 
                         'GL Prime Account Number should be of 4 characters');
    WHEN gl_sub_accnt_nbr_err THEN
        errpkg.raise_err(errnums.en_gl_sub_accnt_nbr_err, 
                         'GL Prime Account Number should be of 3 characters');
    WHEN OTHERS THEN 
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_BUSINESS_RULES_PKG.SD_GL_ACCOUNT_VALIDATION, ', SUBSTR(SQLERRM,1,200));	
END SD_GL_ACCOUNT_VALIDATION;

PROCEDURE DUPLICATE_STORE_DRAFTS_SP(
/*****************************************************************************
	This procedure will determine if a draft is duplciate or not during insert process from UI

created : 12/30/2014 jxc517 CCN Project . . .
changed :
*****************************************************************************/
    IN_CHECK_SERIAL_NUMBER IN    STORE_DRAFTS.CHECK_SERIAL_NUMBER%TYPE)
IS
    dup_store_draft_err EXCEPTION;
    V_COUNT             NUMBER := 0;
BEGIN
    BEGIN
        SELECT COUNT(*)
          INTO V_COUNT
          FROM STORE_DRAFTS
         WHERE CHECK_SERIAL_NUMBER = IN_CHECK_SERIAL_NUMBER;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    IF  NVL(V_COUNT,0) = 0 THEN
        --Not found the record in store_drafts table, so might be unattached manual draft
        BEGIN
            SELECT COUNT(*)
              INTO V_COUNT
              FROM UNATTACHED_MNL_DRFT_DTL
             WHERE CHECK_SERIAL_NUMBER = IN_CHECK_SERIAL_NUMBER;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    END IF;
    IF  NVL(V_COUNT,0) > 0 THEN
        RAISE dup_store_draft_err;
    END IF;
EXCEPTION
    WHEN dup_store_draft_err THEN
        errpkg.raise_err(errnums.en_dup_store_draft_err, 
                         'Draft already exists in the system, please check the draft number once');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'SD_BUSINESS_RULES_PKG.DUPLICATE_STORE_DRAFTS_SP, ', SUBSTR(SQLERRM,1,200));	
END DUPLICATE_STORE_DRAFTS_SP;

PROCEDURE SD_RUN_TYPE_VALIDATION(
/*****************************************************************************
This procedure will do the business rules validations for Run Type

created : 1/28/2019 kxm302 CCN Project . . .
changed : 07/22/2019 akj899 ASP-1193 CCNSD-8 CCN Project Team....
*****************************************************************************/
    IN_STORE_RUN_TYPE_DETAILS_ROW     IN           STORE_RUN_TYPE_DETAILS%ROWTYPE)
IS
   V_SD_CHK_TYP_REC           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE;
   no_run_type_err            EXCEPTION;
BEGIN

    V_SD_CHK_TYP_REC         := SD_CHECK_NBR_PRINT_SRVCS.GET_SD_CHK_TYP_REC(IN_STORE_RUN_TYPE_DETAILS_ROW.STORE_DRAFT_CHECK_RUN_TYPE);

    IF V_SD_CHK_TYP_REC.STORE_DRAFT_CHECK_RUN_TYPE IS NULL THEN
       RAISE no_run_type_err;
    END IF;
EXCEPTION
    WHEN no_run_type_err THEN
       ERRPKG.RAISE_ERR(errnums.en_no_run_type_err,'To place order Run Type should exist in Run Type Maintenance window');    

END SD_RUN_TYPE_VALIDATION;

PROCEDURE SD_VALIDATE_RUN_TYPE_DETAILS(
/*****************************************************************************
This procedure will validate the check run type in code detail table.

created : 7/25/2019 akj899 ASP-1193 CCNSD-8  CCN Project Team....
changed : 8/14/2019 akj899 ASP-1193 CCNSD-8  CCN Project Team....
          Added 2 new fields MICR and PART_NUMBER
*****************************************************************************/
    IN_ROW_DATA     IN           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS%ROWTYPE)
IS
    V_OUT_REF_CURSOR                           SYS_REFCURSOR;
    no_check_run_type_err                      EXCEPTION;
    TYPE V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_TBL IS RECORD
        (STORE_DRAFT_CHECK_RUN_TYPE            SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.STORE_DRAFT_CHECK_RUN_TYPE%TYPE,
         NO_OF_BOOKS                           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.NO_OF_BOOKS%TYPE,
         CHECKS_PER_BOOK                       SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.CHECKS_PER_BOOK%TYPE,
         STORE_DRFT_THRESHOLD                  SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.STORE_DRFT_THRESHOLD%TYPE,
         BANK_ACCOUNT_NBR                      SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.BANK_ACCOUNT_NBR%TYPE,
         BANK_ROUTING_NBR                      SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.BANK_ROUTING_NBR%TYPE,
         MICR                                  SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.MICR%TYPE,
         PART_NUMBER                           SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.PART_NUMBER%TYPE,
         CREATED_BY_USER_ID                    SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.CREATED_BY_USER_ID%TYPE,
         CREATED_ON_DATE                       SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS.CREATED_ON_DATE%TYPE);
     V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_REC     V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_TBL;
BEGIN
    --validating the check run type field values and raising an error if it did not receive the correct value.
    IF IN_ROW_DATA.STORE_DRAFT_CHECK_RUN_TYPE IS NOT NULL THEN
       IF  NOT  common_tools.code_detail_valid('STORE_DRAFT_CHECK_RUN_TYPE',IN_ROW_DATA.STORE_DRAFT_CHECK_RUN_TYPE) THEN
                RAISE  no_check_run_type_err;
       END IF;
    END IF;
    --raise warning message if bank account number or routing number is changed.
    SD_TABLE_IU_PKG.SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_SP(V_OUT_REF_CURSOR, IN_ROW_DATA.STORE_DRAFT_CHECK_RUN_TYPE);
    FETCH V_OUT_REF_CURSOR INTO V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_REC;
    IF (V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_REC.BANK_ACCOUNT_NBR <> IN_ROW_DATA.BANK_ACCOUNT_NBR)OR
       (V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_REC.BANK_ROUTING_NBR <> IN_ROW_DATA.BANK_ROUTING_NBR)OR 
       (V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_REC.MICR             <> IN_ROW_DATA.MICR)OR
       (V_SD_CHECK_NBR_RUN_TYPE_PRNT_DTLS_REC.PART_NUMBER      <> IN_ROW_DATA.PART_NUMBER)
    THEN
        ERRPKG.STORE_WARNINGS(errnums.en_sd_run_typ_bnk_info_err,'Banking details have been changed');
    END IF;
    CLOSE V_OUT_REF_CURSOR;

EXCEPTION
    WHEN no_check_run_type_err THEN
       ERRPKG.RAISE_ERR(errnums.en_no_check_run_type_err,'Check Run Type should be a valid run type value as per pick list item "STORE_DRAFT_CHECK_RUN_TYPE".'); 
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'SD_VALIDATE_RUN_TYPE_DETAILS', SQLERRM);   
END SD_VALIDATE_RUN_TYPE_DETAILS;

PROCEDURE SD_VALIDATE_TERMINAL(
/*****************************************************************************
This procedure will validate terminal number and its combination with store.

created : 7/25/2019 akj899 ASP-1193 CCNSD-8  CCN Project Team....
changed :
*****************************************************************************/
    IN_COST_CENTER_CODE    IN           STORE_DRAFTS.COST_CENTER_CODE%TYPE,
    IN_TERMINAL_NUMBER     IN           STORE_DRAFTS.TERMINAL_NUMBER%TYPE DEFAULT NULL)
IS
    V_COUNT                       NUMBER:=0;
    no_terminal_number_err        EXCEPTION;
BEGIN
    IF IN_TERMINAL_NUMBER IS NULL THEN
        RAISE no_terminal_number_err;
    END IF;
EXCEPTION
    WHEN no_terminal_number_err THEN
       ERRPKG.RAISE_ERR(errnums.en_no_terminal_number_err,'Terminal number is missing. Please add terminal number to the store '||IN_COST_CENTER_CODE); 
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE,'SD_VALIDATE_TERMINAL', SQLERRM);   
END SD_VALIDATE_TERMINAL;

END SD_BUSINESS_RULES_PKG;