/**********************************************************
THIS Anonymous block will insert all the dailyLoad data 
CREATED : 12/03/2014 AXK326 CCN Project team....
**********************************************************/
DECLARE
    CURSOR TEMP_CUR is
        SELECT ROW_NUMBER( ) OVER (PARTITION BY C.COST_CENTER_CODE,B.TRANSACTION_DATE,A.TERMINAL_NUMBER,A.TRANSACTION_NUMBER ORDER BY B.TRANSACTION_DATE) SRLNO,
               C.COST_CENTER_CODE CC_CODE,
               A.*,
               B.TRANSACTION_DATE
          FROM DLY_CUSTOMER_DETAILS A,
               DLY_CUSTOMER B,
               COST_CENTER C
         WHERE A.COST_CENTER_CODE   = SUBSTR(C.COST_CENTER_CODE,3)
           AND A.COST_CENTER_CODE = B.COST_CENTER_CODE
           AND A.TERMINAL_NUMBER    = B.TERMINAL_NUMBER
           AND A.TRANSACTION_NUMBER = B.TRANSACTION_NUMBER;

    V_COMMIT         NUMBER := 0;
    V_TEMP_ROW       CUSTOMER_DETAILS%ROWTYPE;
BEGIN

    FOR rec IN TEMP_CUR LOOP
        BEGIN
            V_TEMP_ROW.CUSTOMER_DETAIL_ID         := rec.SRLNO;
            V_TEMP_ROW.COST_CENTER_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CC_CODE);
            V_TEMP_ROW.TRANSACTION_DATE           := CCN_COMMON_TOOLS.GET_DATE_VALUE(rec.TRANSACTION_DATE,'YYMMDD');
            V_TEMP_ROW.TERMINAL_NUMBER            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRANSACTION_NUMBER         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANSACTION_NUMBER);
            V_TEMP_ROW.SEGMENT_CODE               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SEGMENT_CODE);
            V_TEMP_ROW.SALES_NUMBER               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_NUMBER);
            V_TEMP_ROW.ITEM_QUANTITY              := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_QUANTITY,7,2);
            V_TEMP_ROW.ITEM_QUANTITY              := CASE rec.ITEM_QUANTITY_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_QUANTITY ELSE V_TEMP_ROW.ITEM_QUANTITY END;
            V_TEMP_ROW.ITEM_PRICE                 := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.Item_Price,7,2);
            V_TEMP_ROW.ITEM_PRICE                 := CASE rec.ITEM_PRICE_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_PRICE ELSE V_TEMP_ROW.ITEM_PRICE END;
            V_TEMP_ROW.ITEM_EXT_AMOUNT            := rec.ITEM_EXTERNAL_AMOUNT_SIGN||CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_EXTERNAL_AMOUNT,7,2);
            V_TEMP_ROW.ITEM_EXT_AMOUNT            := CASE rec.ITEM_EXTERNAL_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_EXT_AMOUNT ELSE V_TEMP_ROW.ITEM_EXT_AMOUNT END;
            V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT       := rec.ITEM_DISC_AMOUNT_SIGN||CCN_COMMON_TOOLS.RETURN_NUMBER(rec.ITEM_DISC_AMOUNT,7,2);
            V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT       := CASE rec.ITEM_DISC_AMOUNT_SIGN WHEN '-' THEN -1 * V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT ELSE V_TEMP_ROW.ITEM_DISCOUNT_AMOUNT END;
            V_TEMP_ROW.ITEM_SALES_TAX_IND         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ITEM_SALES_TAX_INDICATOR);
            V_TEMP_ROW.ITEM_DISCOUNT_CODE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ITEM_DISC_CODE);
            V_TEMP_ROW.ITEM_DISCOUNT_TYPE         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ITEM_DISC_TYPE);
            V_TEMP_ROW.SALES_PROMO_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SALES_PROMO_CODE);
            V_TEMP_ROW.GL_PRIME_ACCOUNT_NUMBER    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GL_PRIME_ACCOUNT);
            V_TEMP_ROW.GL_SUB_ACCOUNT_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GL_SUB_ACCOUNT);
            V_TEMP_ROW.SCHEDULE_TYPE              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SCHEDULE_TYPE);
            V_TEMP_ROW.SCHEDULE_VERSION           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SCHEDULE_VERSION);
            V_TEMP_ROW.PRICE_LEVEL_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PRICE_LVL_CODE);
            V_TEMP_ROW.PERCENT_OFF_LEVEL          := CCN_COMMON_TOOLS.RETURN_NUMBER(rec.PERCENT_OFF_LVL,7,2);
            V_TEMP_ROW.PROD_DESC_SRCE             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PROD_DESC_SOURCE);
            V_TEMP_ROW.ORGNL_POS_TERM_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_POS_TERMINAL_NUMBER);
            V_TEMP_ROW.ORGNL_POS_TRANS_NUMBER     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORGNL_POS_TRANSACTION_NUMBER);

            INSERT INTO CUSTOMER_DETAILS_AXK VALUES V_TEMP_ROW;

            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;   
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'LOAD_DLY_CUSTOMER_DETAILS_AXK',
                                           SQLERRM,
                                           rec.COST_CENTER_CODE,
                                           NVL(rec.TRANSACTION_DATE,'')||':'||
                                           NVL(rec.TERMINAL_NUMBER,'')||':'||
                                           NVL(rec.TRANSACTION_NUMBER,''));
                                           
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'LOAD_DLY_CUSTOMER_DETAILS_AXK',
                                    SQLERRM,
                                    '000000',
                                    '0000000000');
END;
/