CREATE OR REPLACE PACKAGE body STORE_TAPI
/*********************************************************** 
This is the Package Body
created : 01/25/2012 tal CCN project
updated : 08/24/2012 tal CCN project
updated : 09/13/2012 TAL removed Banking_Type, Deposit_Bag_Reorder, Deposit_Ticket_Reorder
************************************************************/
IS
  -- insert
PROCEDURE ins(
    IN_CLASSIFICATION_CODE    IN STORE.CLASSIFICATION_CODE%type DEFAULT NULL ,
    IN_PERP_INV_START_DATE    IN STORE.PERP_INV_START_DATE%type DEFAULT NULL ,
    IN_CATEGORY               IN STORE.CATEGORY%type ,
    IN_INVENTORY_INDICATOR    IN STORE.INVENTORY_INDICATOR%type DEFAULT NULL ,
    IN_COST_CENTER_CODE       IN STORE.COST_CENTER_CODE%type ,
    IN_SELLING_STORE_FLAG     IN STORE.SELLING_STORE_FLAG%type DEFAULT NULL ,
    IN_RURAL_METRO_ZONE_CODE  IN STORE.RURAL_METRO_ZONE_CODE%type DEFAULT NULL )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  INSERT
  INTO STORE
    (
      CLASSIFICATION_CODE ,
      PERP_INV_START_DATE ,
      CATEGORY ,
      INVENTORY_INDICATOR ,
      COST_CENTER_CODE ,
      SELLING_STORE_FLAG ,
      RURAL_METRO_ZONE_CODE
    )
    VALUES
    (
      IN_CLASSIFICATION_CODE ,
      IN_PERP_INV_START_DATE ,
      IN_CATEGORY ,
      IN_INVENTORY_INDICATOR ,
      IN_COST_CENTER_CODE ,
      IN_SELLING_STORE_FLAG ,
      IN_RURAL_METRO_ZONE_CODE
    );

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'STORE Insert');

END;

-- update
PROCEDURE upd
  (
    IN_CLASSIFICATION_CODE    IN STORE.CLASSIFICATION_CODE%type DEFAULT NULL ,
    IN_PERP_INV_START_DATE    IN STORE.PERP_INV_START_DATE%type DEFAULT NULL ,
    IN_CATEGORY               IN STORE.CATEGORY%type ,
    IN_INVENTORY_INDICATOR    IN STORE.INVENTORY_INDICATOR%type DEFAULT NULL ,
    IN_COST_CENTER_CODE       IN STORE.COST_CENTER_CODE%type ,
    IN_SELLING_STORE_FLAG     IN STORE.SELLING_STORE_FLAG%type DEFAULT NULL ,
    IN_RURAL_METRO_ZONE_CODE  IN STORE.RURAL_METRO_ZONE_CODE%type DEFAULT NULL
  )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  UPDATE STORE
  SET CLASSIFICATION_CODE  = IN_CLASSIFICATION_CODE ,
    PERP_INV_START_DATE    = IN_PERP_INV_START_DATE ,
    CATEGORY               = IN_CATEGORY ,
    INVENTORY_INDICATOR    = IN_INVENTORY_INDICATOR ,
    SELLING_STORE_FLAG     = IN_SELLING_STORE_FLAG ,
    RURAL_METRO_ZONE_CODE  = IN_RURAL_METRO_ZONE_CODE
  WHERE COST_CENTER_CODE   = IN_COST_CENTER_CODE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'STORE Update');

END;

-- del
PROCEDURE del(
    IN_COST_CENTER_CODE IN STORE.COST_CENTER_CODE%type )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  DELETE FROM STORE WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'STORE Delete');

END;

END STORE_tapi;

