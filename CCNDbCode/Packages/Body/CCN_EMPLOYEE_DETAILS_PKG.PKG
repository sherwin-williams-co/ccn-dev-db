create or replace PACKAGE BODY CCN_EMPLOYEE_DETAILS_PKG 
IS
/*********************************************************** 
This package will contain all the procedures required to  work with employee details

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
************************************************************/
FUNCTION EXTRACT_TABLE_CLOB (
/*******************************************************************************
	EXTRACT_TABLE_CLOB

	This procedure will extract the required clob from passed XML clob
  and sends back the result as clob

Created : 05/07/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB) RETURN CLOB
IS
BEGIN

    RETURN SYS.XMLTYPE(IN_ROW_DATA).EXTRACT('/' || IN_TABLE_NAME ||'_UI/'|| IN_TABLE_NAME).getCLOBVal();

EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END EXTRACT_TABLE_CLOB;

FUNCTION GET_JOB_CODE
/**********************************************************
 GET_JOB_CODE

Returns the job_code from the Translation table
created : 11/05/2014 sxh487 CCN Project....
**********************************************************/
(IN_JOB_TITLE  IN   JOB_CODE_TRANSALATION.JOB_TITLE_SEGMENT%TYPE,
 IN_JOB_FAMILY IN   JOB_CODE_TRANSALATION.JOB_FAMILY_SEGMENT%TYPE,
 IN_JOB_TYPE   IN   JOB_CODE_TRANSALATION.ORG_UNIT_NAME%TYPE
 )
RETURN VARCHAR2

IS

V_JOB_CODE JOB_CODE_TRANSALATION.JOB_CODE%TYPE;

BEGIN
     SELECT JOB_CODE
       INTO V_JOB_CODE
       FROM JOB_CODE_TRANSALATION
      WHERE UPPER(JOB_TITLE_SEGMENT)  = UPPER(IN_JOB_TITLE) 
        AND UPPER(JOB_FAMILY_SEGMENT) = UPPER(IN_JOB_FAMILY)
        AND UPPER(ORG_UNIT_NAME) LIKE '%'||UPPER(IN_JOB_TYPE)||'%'
        AND ROWNUM <2;
      
RETURN V_JOB_CODE;

EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_JOB_CODE;

FUNCTION GET_COST_CENTER_CATEGORY
/**********************************************************
 GET_COST_CENTER_CATEGORY

Returns Category value for given Cost Center Code
created : 03/27/2015 sxh487 CCN Project....
**********************************************************/
(IN_COST_CENTER_CODE IN VARCHAR2) 
RETURN VARCHAR2
IS 
    V_CATEGORY COST_CENTER.CATEGORY%TYPE;
BEGIN
    SELECT CATEGORY
      INTO V_CATEGORY
      FROM COST_CENTER
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE);

    RETURN V_CATEGORY;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN(SQLERRM);
END GET_COST_CENTER_CATEGORY;

PROCEDURE EMPLOYEE_DETAILS_ROWTYPE_SP (
/*******************************************************************************
	EMPLOYEE_DETAILS_ROWTYPE_SP

	This procedure is intended to build the EMPLOYEE_DETAILS record type

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT EMPLOYEE_DETAILS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         EMPLOYEE_DETAILS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_NAME' THEN
                    V_TEMP_ROW.EMPLOYEE_NAME                         :=  V_ROW_VALUE;
                WHEN 'LAST_NAME' THEN
                    V_TEMP_ROW.LAST_NAME                             :=  V_ROW_VALUE;
                WHEN 'FIRST_NAME' THEN
                    V_TEMP_ROW.FIRST_NAME                            :=  V_ROW_VALUE;
                WHEN 'MIDDLE_INITIAL' THEN
                    V_TEMP_ROW.MIDDLE_INITIAL                        :=  V_ROW_VALUE;
                WHEN 'HOME_ADDRESS_LINE1' THEN
                    V_TEMP_ROW.HOME_ADDRESS_LINE1                    :=  V_ROW_VALUE;
                WHEN 'HOME_ADDRESS_LINE2' THEN
                    V_TEMP_ROW.HOME_ADDRESS_LINE2                    :=  V_ROW_VALUE;
                WHEN 'HOME_CITY_STATE' THEN
                    V_TEMP_ROW.HOME_CITY_STATE                       :=  V_ROW_VALUE;
                WHEN 'HOME_CITY' THEN
                    V_TEMP_ROW.HOME_CITY                             :=  V_ROW_VALUE;
                WHEN 'HOME_STATE' THEN
                    V_TEMP_ROW.HOME_STATE                            :=  V_ROW_VALUE;
                WHEN 'HOME_POSTAL_CODE' THEN
                    V_TEMP_ROW.HOME_POSTAL_CODE                      :=  V_ROW_VALUE;
                WHEN 'HOME_PHONE' THEN
                    V_TEMP_ROW.HOME_PHONE                            :=  V_ROW_VALUE;
                WHEN 'COMPANY_CODE' THEN
                    V_TEMP_ROW.COMPANY_CODE                          :=  V_ROW_VALUE;
                WHEN 'SEX' THEN
                    V_TEMP_ROW.SEX                                   :=  V_ROW_VALUE;
                WHEN 'EMP_PAYROLL_STATUS' THEN
                    V_TEMP_ROW.EMP_PAYROLL_STATUS                    :=  V_ROW_VALUE;
                WHEN 'EMP_ASSIGNMENT_STATUS' THEN
                    V_TEMP_ROW.EMP_ASSIGNMENT_STATUS                 :=  V_ROW_VALUE;
                WHEN 'EMP_DIVISION' THEN
                    V_TEMP_ROW.EMP_DIVISION                          :=  V_ROW_VALUE;
                WHEN 'HIRE_DATE' THEN
                    V_TEMP_ROW.HIRE_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERM_DATE' THEN
                    V_TEMP_ROW.TERM_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'ADJUSTED_SERVICE_DATE' THEN
                    V_TEMP_ROW.ADJUSTED_SERVICE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'JOB_CODE' THEN
                    V_TEMP_ROW.JOB_CODE                              :=  V_ROW_VALUE;
                WHEN 'JOB_DIVISION' THEN
                    V_TEMP_ROW.JOB_DIVISION                          :=  V_ROW_VALUE;
                WHEN 'JOB_FAMILY' THEN
                    V_TEMP_ROW.JOB_FAMILY                            :=  V_ROW_VALUE;
                WHEN 'JOB_TITLE' THEN
                    V_TEMP_ROW.JOB_TITLE                             :=  V_ROW_VALUE;
                WHEN 'JOB_TYPE' THEN
                    V_TEMP_ROW.JOB_TYPE                              :=  V_ROW_VALUE;
                WHEN 'JOB_LEVEL' THEN
                    V_TEMP_ROW.JOB_LEVEL                             :=  V_ROW_VALUE;
                WHEN 'JOB_FUNCTION' THEN
                    V_TEMP_ROW.JOB_FUNCTION                          :=  V_ROW_VALUE;
                WHEN 'DAD_CODE' THEN
                    V_TEMP_ROW.DAD_CODE                              :=  V_ROW_VALUE;
                WHEN 'FULL_PART_CODE' THEN
                    V_TEMP_ROW.FULL_PART_CODE                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_DETAILS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_DETAILS_ROWTYPE_SP;

PROCEDURE EMP_ADMIN_DETAILS_ROWTYPE_SP (
/*******************************************************************************
	EMP_ADMIN_DETAILS_ROWTYPE_SP

	This procedure is intended to build the EMPLOYEE_ADMIN_DETAILS record type

Created : 06/23/2014 jxc517 CCN Project....
Changed : 08/22/2014 jxc517 CCN Project....added job_type and description columns
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT EMPLOYEE_ADMIN_DETAILS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'ADMIN_COST_CENTER_CODE' THEN
                    V_TEMP_ROW.ADMIN_COST_CENTER_CODE                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'ADMIN_JOB_CODE' THEN
                    V_TEMP_ROW.ADMIN_JOB_CODE                        :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_FIRST_NAME' THEN
                    V_TEMP_ROW.EMPLOYEE_FIRST_NAME                   :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_LAST_NAME' THEN
                    V_TEMP_ROW.EMPLOYEE_LAST_NAME                    :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_MIDDLE_NAME' THEN
                    V_TEMP_ROW.EMPLOYEE_MIDDLE_NAME                  :=  V_ROW_VALUE;
                WHEN 'JOB_TYPE' THEN
                    V_TEMP_ROW.JOB_TYPE                              :=  V_ROW_VALUE;
                WHEN 'DESCRIPTION' THEN
                    V_TEMP_ROW.DESCRIPTION                           :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMP_ADMIN_DETAILS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMP_ADMIN_DETAILS_ROWTYPE_SP;

PROCEDURE EMPLOYEE_DETAILS_S_SP (
/*******************************************************************************
	EMPLOYEE_DETAILS_S_SP

	This procedure is intended to select records from EMPLOYEE_DETAILS table

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_DETAILS%ROWTYPE;
BEGIN

    EMPLOYEE_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            EXTRACT_TABLE_CLOB(IN_TABLE_NAME,IN_ROW_DATA),
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT (SELECT NVL(COST_CENTER_NAME,'Unknown Cost Center')
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = ED.COST_CENTER_CODE) COST_CENTER_NAME,
               ED.*
          FROM EMPLOYEE_DETAILS ED
         WHERE NVL(EMPLOYEE_NUMBER,'XXX')   = NVL(V_TEMP_ROW.EMPLOYEE_NUMBER,NVL(EMPLOYEE_NUMBER,'XXX'))
           AND NVL(COST_CENTER_CODE,'XXX')  = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(UPPER(LAST_NAME),'XXX') LIKE '%'||NVL(UPPER(V_TEMP_ROW.LAST_NAME),NVL(UPPER(LAST_NAME),'XXX'))||'%';
           --AND NVL(UPPER(FIRST_NAME),'XXX') LIKE '%'||NVL(UPPER(V_TEMP_ROW.FIRST_NAME),NVL(UPPER(FIRST_NAME),'XXX'))||'%';

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_DETAILS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_DETAILS_S_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_S_SP (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_S_SP

	This procedure is intended to select records from EMPLOYEE_ADMIN_DETAILS table

Created : 06/23/2014 jxc517 CCN Project....
Changed : 11/21/2014 axk326 CCN Project....
          Modified code to display the most current effective_date 
          employee_admin_details whose expiration_date is NULL. 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
BEGIN

    EMP_ADMIN_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                                 EXTRACT_TABLE_CLOB(IN_TABLE_NAME,IN_ROW_DATA),
                                 V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
           select  
                  (SELECT NVL(COST_CENTER_NAME,'Unknown Cost Center')
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = EAD.ADMIN_COST_CENTER_CODE) COST_CENTER_NAME,
               EAD.*
          FROM EMPLOYEE_ADMIN_DETAILS EAD,
            (SELECT  Ead.Employee_Number, max(ead.effective_date) as effective_date
              FROM EMPLOYEE_ADMIN_DETAILS EAD
              WHERE NVL(EMPLOYEE_NUMBER,'XXX')   = NVL(V_TEMP_ROW.EMPLOYEE_NUMBER,NVL(EMPLOYEE_NUMBER,'XXX'))
                AND NVL(ADMIN_COST_CENTER_CODE,'XXX')  = NVL(V_TEMP_ROW.ADMIN_COST_CENTER_CODE,NVL(ADMIN_COST_CENTER_CODE,'XXX'))
                AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) >= NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
                AND NVL(EXPIRATION_DATE,TRUNC(SYSDATE)) <= NVL(V_TEMP_ROW.EXPIRATION_DATE,NVL(EXPIRATION_DATE,TRUNC(SYSDATE)))
                group by Ead.Employee_Number)MED
         WHERE EAD.Employee_Number = V_TEMP_ROW.EMPLOYEE_NUMBER
           AND EAD.Effective_Date  = MED.Effective_Date
           AND EAD.Expiration_Date is null;

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_ADMIN_DETAILS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_ADMIN_DETAILS_S_SP;

PROCEDURE SYNC_HR_EMPLOYEE_DETAILS
/*******************************************************************************
	SYNC_HR_EMPLOYEE_DETAILS

	This procedure will compare the employee data with the gems view and current tables,
  insert any missing data and update any modified data accordingly

Created : 10/29/2014 jxc517 CCN Project....
Changed : 02/10/2015 jxc517 CCN Project Team.....
                     Added code to send emails for missing JOB CODE combinations
          03/30/2015 sxh487 Added code to check 
                     1) if an employee changed from a Territory CC
                        to a non-Territory CC then, delete it from the Territory_Employee table
                     2) if an employee changed from a Store to a Non-S CC or if the job_title changed from Manager 
                        to a non-Manager then, Delete the employee from Manager_Employee table 
*******************************************************************************/
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
    
    CURSOR employee_details_cur IS
        SELECT EMPLOYEE_NUMBER,
               COST_CENTER COST_CENTER_CODE,
               LAST_NAME||','||FIRST_NAME||' '||MIDDLE_NAME EMPLOYEE_NAME,
               LAST_NAME,
               FIRST_NAME,
               MIDDLE_NAME MIDDLE_INITIAL,
               NULL HOME_ADDRESS_LINE1,
               NULL HOME_ADDRESS_LINE2,
               NULL HOME_CITY_STATE,
               NULL HOME_CITY,
               NULL HOME_STATE,
               NULL HOME_POSTAL_CODE,
               HOME_PHONE,
               NULL COMPANY_CODE,
               NULL SEX,
               ASSIG_STATUS EMP_PAYROLL_STATUS,
               NULL EMP_ASSIGNMENT_STATUS,
               DIVISION EMP_DIVISION,
               LATEST_HIRE_DATE HIRE_DATE, --LATEST_HIRE_DATE/ORIGINAL_DATE_OF_HIRE???
               TERMINATION_DATE TERM_DATE,
               ADJUSTED_SERVICE_DATE, --NOT MATCHING WITH THE ADJUSTED_SERVICE_DATE IN CURRENT TABLE
               CCN_EMPLOYEE_DETAILS_PKG.GET_JOB_CODE(DECODE(JOB_TITLE, 'Mgr', DECODE(JOB_LEVEL, 'Asst', 'Asst Mgr', JOB_TITLE), JOB_TITLE),
                                                     JOB_FAMILY,
                                                     JOB_TYPE) JOB_CODE,
               NULL JOB_DIVISION,
               JOB_FAMILY,
               DECODE(JOB_TITLE, 'Mgr', DECODE(JOB_LEVEL, 'Asst', 'Asst Mgr', JOB_TITLE), JOB_TITLE) JOB_TITLE,
               JOB_TYPE,
               JOB_LEVEL,
               JOB_FUNCTION,
               REPLACE(DAD_RAD_CODE,'-','') DAD_CODE,
               DECODE(EMPLOYMENT_CATEGORY,'Full Time','F',
                                          'Part Time','P',
                                          NULL) FULL_PART_CODE
          FROM SWC_HR_GENERIC_V;
          
    V_COMMIT        NUMBER := 0;
    V_TEMP_REC      EMPLOYEE_DETAILS%ROWTYPE;
    V_CLOB          CLOB;
    V_GEMS_CC_CATEGORY COST_CENTER.CATEGORY%TYPE;
BEGIN
    FOR rec IN employee_details_cur LOOP
        SAVEPOINT SYNC_LOAD;
        BEGIN
            SELECT *
              INTO V_TEMP_REC
              FROM EMPLOYEE_DETAILS
             WHERE EMPLOYEE_NUMBER = rec.EMPLOYEE_NUMBER;
        EXCEPTION
            WHEN OTHERS THEN
                V_TEMP_REC := NULL;
        END;
        IF V_TEMP_REC.EMPLOYEE_NUMBER IS NULL THEN
            BEGIN
                INSERT INTO EMPLOYEE_DETAILS VALUES rec;
            EXCEPTION
                WHEN OTHERS THEN
                    COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_EMPLOYEE_DETAILS.SYNC_HR_EMPLOYEE_DETAILS', SQLERRM, SQLCODE);
                    ROLLBACK TO SYNC_LOAD;
            END;
        ELSE
            V_GEMS_CC_CATEGORY := NVL(CCN_EMPLOYEE_DETAILS_PKG.GET_COST_CENTER_CATEGORY(rec.COST_CENTER_CODE), 'X');
            --Delete the employee from Territory_Employee table if it's Category changes From Terr to a Non-Territory
            IF V_GEMS_CC_CATEGORY <> 'T' THEN
                  DELETE FROM TERRITORY_EMPLOYEE WHERE GEMS_ID_NUMBER = rec.EMPLOYEE_NUMBER;
            ELSE
                --Delete the employee from Manager_Employee table if it's Category changes from Store to a Non-S
                --or job title changes from Mgr to a non-Mgr
                IF NVL(UPPER(rec.JOB_TITLE), 'XX') NOT LIKE '%MGR%'
                   OR V_GEMS_CC_CATEGORY <> 'S' THEN
                    DELETE FROM MANAGER_EMPLOYEE WHERE GEMS_ID_NUMBER = rec.EMPLOYEE_NUMBER;
                END IF;
            END IF;

            IF NVL(V_TEMP_REC.EMPLOYEE_NUMBER,'X') <> NVL(rec.EMPLOYEE_NUMBER,'X')
               OR NVL(V_TEMP_REC.COST_CENTER_CODE,'X') <> NVL(rec.COST_CENTER_CODE,'X')
               OR NVL(V_TEMP_REC.EMPLOYEE_NAME,'X') <> NVL(rec.EMPLOYEE_NAME,'X')
               OR NVL(V_TEMP_REC.LAST_NAME,'X') <> NVL(rec.LAST_NAME,'X')
               OR NVL(V_TEMP_REC.FIRST_NAME,'X') <> NVL(rec.FIRST_NAME,'X')
               OR NVL(V_TEMP_REC.MIDDLE_INITIAL,'X') <> NVL(rec.MIDDLE_INITIAL,'X')
               OR NVL(V_TEMP_REC.HOME_ADDRESS_LINE1,'X') <> NVL(rec.HOME_ADDRESS_LINE1,'X')
               OR NVL(V_TEMP_REC.HOME_ADDRESS_LINE2,'X') <> NVL(rec.HOME_ADDRESS_LINE2,'X')
               OR NVL(V_TEMP_REC.HOME_CITY_STATE,'X') <> NVL(rec.HOME_CITY_STATE,'X')
               OR NVL(V_TEMP_REC.HOME_CITY,'X') <> NVL(rec.HOME_CITY,'X')
               OR NVL(V_TEMP_REC.HOME_STATE,'X') <> NVL(rec.HOME_STATE,'X')
               OR NVL(V_TEMP_REC.HOME_POSTAL_CODE,'X') <> NVL(rec.HOME_POSTAL_CODE,'X')
               OR NVL(V_TEMP_REC.HOME_PHONE,'X') <> NVL(rec.HOME_PHONE,'X')
               OR NVL(V_TEMP_REC.COMPANY_CODE,'X') <> NVL(rec.COMPANY_CODE,'X')
               OR NVL(V_TEMP_REC.SEX,'X') <> NVL(rec.SEX,'X')
               OR NVL(V_TEMP_REC.EMP_PAYROLL_STATUS,'X') <> NVL(rec.EMP_PAYROLL_STATUS,'X')
               OR NVL(V_TEMP_REC.EMP_ASSIGNMENT_STATUS,'X') <> NVL(rec.EMP_ASSIGNMENT_STATUS,'X')
               OR NVL(V_TEMP_REC.EMP_DIVISION,'X') <> NVL(rec.EMP_DIVISION,'X')
               OR NVL(V_TEMP_REC.HIRE_DATE,TRUNC(SYSDATE)) <> NVL(rec.HIRE_DATE, TRUNC(SYSDATE))
               OR NVL(V_TEMP_REC.TERM_DATE,TRUNC(SYSDATE)) <> NVL(rec.TERM_DATE, TRUNC(SYSDATE))
               OR NVL(V_TEMP_REC.ADJUSTED_SERVICE_DATE,TRUNC(SYSDATE)) <> NVL(rec.ADJUSTED_SERVICE_DATE, TRUNC(SYSDATE))
               OR NVL(V_TEMP_REC.JOB_CODE,'X') <> NVL(rec.JOB_CODE,'X')
               OR NVL(V_TEMP_REC.JOB_DIVISION,'X') <> NVL(rec.JOB_DIVISION,'X')
               OR NVL(V_TEMP_REC.JOB_FAMILY,'X') <> NVL(rec.JOB_FAMILY,'X')
               OR NVL(V_TEMP_REC.JOB_TITLE,'X') <> NVL(rec.JOB_TITLE,'X')
               OR NVL(V_TEMP_REC.JOB_TYPE,'X') <> NVL(rec.JOB_TYPE,'X')
               OR NVL(V_TEMP_REC.JOB_LEVEL,'X') <> NVL(rec.JOB_LEVEL,'X')
               OR NVL(V_TEMP_REC.JOB_FUNCTION,'X') <> NVL(rec.JOB_FUNCTION,'X')
               OR NVL(V_TEMP_REC.DAD_CODE,'X') <> NVL(rec.DAD_CODE,'X') 
               OR NVL(V_TEMP_REC.FULL_PART_CODE,'X') <> NVL(rec.FULL_PART_CODE,'X') THEN
               BEGIN
                   UPDATE EMPLOYEE_DETAILS
                      SET ROW = rec
                    WHERE EMPLOYEE_NUMBER = rec.EMPLOYEE_NUMBER;
                EXCEPTION
                    WHEN OTHERS THEN
                        COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_EMPLOYEE_DETAILS.SYNC_HR_EMPLOYEE_DETAILS', SQLERRM, SQLCODE);
                        ROLLBACK TO SYNC_LOAD;
                END;
            END IF;
        END IF;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
        END IF;
    END LOOP;
    COMMIT;

    --Sending mail for the category 'JOB_CODE_TRANSALATION'
    FOR rec IN (SELECT DISTINCT JOB_TITLE, JOB_FAMILY, JOB_TYPE
                  FROM SWC_HR_GENERIC_V
                 WHERE CCN_EMPLOYEE_DETAILS_PKG.GET_JOB_CODE(JOB_TITLE, JOB_FAMILY, JOB_TYPE) IS NULL) LOOP
       --using v_clob to store the list of  combinations for which job code is missing in JOB_CODE_TRANSALATION table
       V_CLOB := V_CLOB || rec.JOB_TITLE ||','||
                           rec.JOB_FAMILY ||','||
                           rec.JOB_TYPE || CHR(10);
    END LOOP;

    IF V_CLOB <> EMPTY_CLOB() THEN
        MAIL_PKG.SEND_MAIL('JOB_CODE_TRANSALATION', NULL, NULL, V_CLOB);
    ELSE 
       NULL;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'SYNC_HR_EMPLOYEE_DETAILS', V_ERRM);
END SYNC_HR_EMPLOYEE_DETAILS;

PROCEDURE SYNC_MANAGER_EMPLOYEE_DTLS
/*******************************************************************************
	SYNC_MANAGER_EMPLOYEE_DTLS

	This procedure will compare the manager data with the gems view and current tables,
  insert any missing data and update any modified data accorigly

Created : 07/23/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
    
    CURSOR manager_employee_cur IS
        SELECT EMPLOYEE_NUMBER AS GEMS_ID_NUMBER
               ,COST_CENTER_CODE
               ,HIRE_DATE EFFECTIVE_DATE
               ,FIRST_NAME
               ,LAST_NAME
               ,MIDDLE_INITIAL
               ,HOME_STATE
               ,FULL_PART_CODE
               ,JOB_CODE
               ,EMP_PAYROLL_STATUS
               ,TERM_DATE
          FROM EMPLOYEE_DETAILS ED
         WHERE UPPER(JOB_TITLE) LIKE '%MGR%'
           AND EXISTS (SELECT 1
                         FROM COST_CENTER
                        WHERE COST_CENTER_CODE = ED.COST_CENTER_CODE
                          AND CATEGORY = 'S');

    V_COMMIT     NUMBER := 0;
    V_TEMP_REC   MANAGER_EMPLOYEE%ROWTYPE;
BEGIN
    FOR rec IN manager_employee_cur LOOP
        SAVEPOINT SYNC_LOAD;
        BEGIN
            SELECT *
              INTO V_TEMP_REC
              FROM MANAGER_EMPLOYEE
             WHERE GEMS_ID_NUMBER = rec.GEMS_ID_NUMBER;
        EXCEPTION
            WHEN OTHERS THEN
                V_TEMP_REC := NULL;
        END;
        IF V_TEMP_REC.GEMS_ID_NUMBER IS NULL THEN
            BEGIN
                INSERT INTO MANAGER_EMPLOYEE VALUES rec;
            EXCEPTION
                WHEN OTHERS THEN
                    COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_EMPLOYEE_DETAILS.SYNC_MANAGER_EMPLOYEE_DTLS', SQLERRM, SQLCODE);
                    ROLLBACK TO SYNC_LOAD;
            END;
        ELSE
            IF NVL(V_TEMP_REC.GEMS_ID_NUMBER,'X')          <> NVL(rec.GEMS_ID_NUMBER,'X')
               OR NVL(V_TEMP_REC.COST_CENTER_CODE,'X')     <> NVL(rec.COST_CENTER_CODE,'X') 
               OR NVL(V_TEMP_REC.EFFECTIVE_DATE,TRUNC(SYSDATE)) <> NVL(rec.EFFECTIVE_DATE, TRUNC(SYSDATE))
               OR NVL(V_TEMP_REC.EMPLOYEE_FIRST_NAME,'X')   <> NVL(rec.FIRST_NAME,'X') 
               OR NVL(V_TEMP_REC.EMPLOYEE_LAST_NAME,'X')   <> NVL(rec.LAST_NAME,'X') 
               OR NVL(V_TEMP_REC.EMPLOYEE_MIDDLE_NAME,'X') <> NVL(rec.MIDDLE_INITIAL,'X') 
               OR NVL(V_TEMP_REC.STATE_CD,'X')             <> NVL(rec.HOME_STATE,'X') 
               OR NVL(V_TEMP_REC.FULL_PART_CODE,'X')       <> NVL(rec.FULL_PART_CODE,'X') 
               OR NVL(V_TEMP_REC.EMP_JOB_CODE,'X')         <> NVL(rec.JOB_CODE,'X') 
               OR NVL(V_TEMP_REC.EMP_PAYROLL_STATUS,'X')   <> NVL(rec.EMP_PAYROLL_STATUS,'X')
               OR NVL(V_TEMP_REC.TERM_DATE, TRUNC(SYSDATE))            <> NVL(rec.TERM_DATE, TRUNC(SYSDATE))THEN
               BEGIN
                   UPDATE MANAGER_EMPLOYEE
                      SET ROW = rec
                    WHERE GEMS_ID_NUMBER = rec.GEMS_ID_NUMBER;
                EXCEPTION
                    WHEN OTHERS THEN
                        COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_EMPLOYEE_DETAILS.SYNC_MANAGER_EMPLOYEE_DTLS', SQLERRM, SQLCODE);
                        ROLLBACK TO SYNC_LOAD;
                END;
            END IF;
        END IF;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'SYNC_MANAGER_EMPLOYEE_DTLS', V_ERRM);
END SYNC_MANAGER_EMPLOYEE_DTLS;

PROCEDURE SYNC_TERRITORY_EMPLOYEE_DTLS
/*******************************************************************************
	SYNC_TERRITORY_EMPLOYEE_DTLS

	This procedure will compare the territory data with the gems view and current tables,
  insert any missing data and update any modified data accordingly

Created : 07/23/2014 jxc517 CCN Project....
Changed : 07/15/2015 dxv848 removing the condition JOB_TITLE in the query. 
*******************************************************************************/
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
    
    CURSOR territory_employee_cur IS
        SELECT EMPLOYEE_NUMBER AS GEMS_ID_NUMBER
               ,COST_CENTER_CODE
               ,HIRE_DATE EFFECTIVE_DATE
               ,FIRST_NAME
               ,LAST_NAME
               ,MIDDLE_INITIAL
               ,HOME_STATE
               ,FULL_PART_CODE
               ,JOB_CODE
               ,EMP_PAYROLL_STATUS
               ,TERM_DATE
          FROM EMPLOYEE_DETAILS ED
         WHERE EXISTS (SELECT 1
                         FROM COST_CENTER
                        WHERE COST_CENTER_CODE = ED.COST_CENTER_CODE
                          AND CATEGORY = 'T');

    V_COMMIT     NUMBER := 0;
    V_TEMP_REC   TERRITORY_EMPLOYEE%ROWTYPE;
BEGIN
    FOR rec IN territory_employee_cur LOOP
        SAVEPOINT SYNC_LOAD;
        BEGIN
            SELECT *
              INTO V_TEMP_REC
              FROM TERRITORY_EMPLOYEE
             WHERE GEMS_ID_NUMBER = rec.GEMS_ID_NUMBER;
        EXCEPTION
            WHEN OTHERS THEN
                V_TEMP_REC := NULL;
        END;
        IF V_TEMP_REC.GEMS_ID_NUMBER IS NULL THEN
            BEGIN
                INSERT INTO TERRITORY_EMPLOYEE VALUES rec;
            EXCEPTION
                WHEN OTHERS THEN
                    COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_EMPLOYEE_DETAILS.SYNC_TERRITORY_EMPLOYEE_DTLS', SQLERRM, SQLCODE);
                    ROLLBACK TO SYNC_LOAD;
            END;
        ELSE
            IF NVL(V_TEMP_REC.GEMS_ID_NUMBER,'X')          <> NVL(rec.GEMS_ID_NUMBER,'X')
               OR NVL(V_TEMP_REC.COST_CENTER_CODE,'X')     <> NVL(rec.COST_CENTER_CODE,'X') 
               OR NVL(V_TEMP_REC.EFFECTIVE_DATE,TRUNC(SYSDATE)) <> NVL(rec.EFFECTIVE_DATE, TRUNC(SYSDATE))
               OR NVL(V_TEMP_REC.EMPLOYEE_FIRST_NAME,'X')   <> NVL(rec.FIRST_NAME,'X') 
               OR NVL(V_TEMP_REC.EMPLOYEE_LAST_NAME,'X')   <> NVL(rec.LAST_NAME,'X') 
               OR NVL(V_TEMP_REC.EMPLOYEE_MIDDLE_NAME,'X') <> NVL(rec.MIDDLE_INITIAL,'X') 
               OR NVL(V_TEMP_REC.STATE_CD,'X')             <> NVL(rec.HOME_STATE,'X') 
               OR NVL(V_TEMP_REC.FULL_PART_CODE,'X')       <> NVL(rec.FULL_PART_CODE,'X') 
               OR NVL(V_TEMP_REC.EMP_JOB_CODE,'X')         <> NVL(rec.JOB_CODE,'X') 
               OR NVL(V_TEMP_REC.EMP_PAYROLL_STATUS,'X')   <> NVL(rec.EMP_PAYROLL_STATUS,'X')
               OR NVL(V_TEMP_REC.TERM_DATE,TRUNC(SYSDATE))            <> NVL(rec.TERM_DATE,TRUNC(SYSDATE))THEN
               BEGIN
                   UPDATE TERRITORY_EMPLOYEE
                      SET ROW = rec
                    WHERE GEMS_ID_NUMBER = rec.GEMS_ID_NUMBER;
                EXCEPTION
                    WHEN OTHERS THEN
                        COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_EMPLOYEE_DETAILS.SYNC_TERRITORY_EMPLOYEE_DTLS', SQLERRM, SQLCODE);
                        ROLLBACK TO SYNC_LOAD;
                END;
            END IF;
        END IF;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'SYNC_TERRITORY_EMPLOYEE_DTLS', V_ERRM);
END SYNC_TERRITORY_EMPLOYEE_DTLS;

PROCEDURE SYNC_EMPLOYEE_DETAILS
/*******************************************************************************
	SYNC_EMPLOYEE_DETAILS

	This procedure will compare the data with the gems view and current tables,
  insert any missing data and update any modified data accorigly

Created : 07/23/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);
BEGIN
    SYNC_HR_EMPLOYEE_DETAILS();
    SYNC_MANAGER_EMPLOYEE_DTLS();
    SYNC_TERRITORY_EMPLOYEE_DTLS();
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'SYNC_EMPLOYEE_DETAILS', V_ERRM);
END SYNC_EMPLOYEE_DETAILS;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_U_SP (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_U_SP

	This procedure is intended to updates records in EMPLOYEE_ADMIN_DETAILS table

Created : 07/24/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
BEGIN

    EMP_ADMIN_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            EXTRACT_TABLE_CLOB(IN_TABLE_NAME,IN_ROW_DATA),
                            V_TEMP_ROW);

        UPDATE EMPLOYEE_ADMIN_DETAILS
           SET ROW = V_TEMP_ROW
         WHERE NVL(EMPLOYEE_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.EMPLOYEE_NUMBER,NVL(EMPLOYEE_NUMBER,'XXX'))
           AND NVL(ADMIN_COST_CENTER_CODE,'XXX')           = NVL(V_TEMP_ROW.ADMIN_COST_CENTER_CODE,NVL(ADMIN_COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE))          = NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_ADMIN_DETAILS_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_ADMIN_DETAILS_U_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_I_SP (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_I_SP

	This procedure is intended to insert records into EMPLOYEE_ADMIN_DETAILS table

Created : 07/24/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
    V_COUNT          NUMBER := 0;
    V_INVALID_CC_EXC EXCEPTION;
BEGIN

    EMP_ADMIN_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            EXTRACT_TABLE_CLOB(IN_TABLE_NAME,IN_ROW_DATA),
                            V_TEMP_ROW);

    BEGIN
        SELECT COUNT(*)
          INTO V_COUNT
          FROM COST_CENTER
         WHERE COST_CENTER_CODE = V_TEMP_ROW.ADMIN_COST_CENTER_CODE;
    EXCEPTION
        WHEN OTHERS THEN
            V_COUNT := 0;
    END;

    IF V_COUNT <> 1 THEN
        RAISE V_INVALID_CC_EXC;
    END IF;

    INSERT INTO EMPLOYEE_ADMIN_DETAILS VALUES V_TEMP_ROW;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        EMPLOYEE_ADMIN_DETAILS_U_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA);
    WHEN V_INVALID_CC_EXC THEN
        ERRPKG.RAISE_ERR(errnums.en_invalid_cost_center_err, 'EMPLOYEE_ADMIN_DETAILS_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, 
        'Cost_Center_Code was entered as "' || V_TEMP_ROW.ADMIN_COST_CENTER_CODE || '", ' ||
                   'However, specified Cost_Center was not found.');
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_ADMIN_DETAILS_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_ADMIN_DETAILS_I_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_D_SP (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_D_SP

	This procedure is intended to delete records from EMPLOYEE_ADMIN_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_ADMIN_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XX</EMPLOYEE_MIDDLE_NAME>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>

Created : 07/24/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
BEGIN

    EMP_ADMIN_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            EXTRACT_TABLE_CLOB(IN_TABLE_NAME,IN_ROW_DATA),
                            V_TEMP_ROW);

    DELETE
      FROM EMPLOYEE_ADMIN_DETAILS
         WHERE NVL(EMPLOYEE_NUMBER,'XXX')                  = NVL(V_TEMP_ROW.EMPLOYEE_NUMBER,NVL(EMPLOYEE_NUMBER,'XXX'))
           AND NVL(ADMIN_COST_CENTER_CODE,'XXX')           = NVL(V_TEMP_ROW.ADMIN_COST_CENTER_CODE,NVL(ADMIN_COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE))          = NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_ADMIN_DETAILS_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_ADMIN_DETAILS_D_SP;

FUNCTION GET_EMPLOYEE_NAME(
/*******************************************************************************
This function will return Employee name for given employee number Information

Created : 12/15/2015 AXK326 CCN Project Team...
Modified:
*******************************************************************************/
IN_EMP_NBR  IN   VARCHAR2) 
RETURN VARCHAR2
IS
    V_EMPLOYEE_NAME   EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;
BEGIN
    SELECT EMPLOYEE_NAME 
      INTO V_EMPLOYEE_NAME
      FROM EMPLOYEE_DETAILS 
     WHERE TO_NUMBER(EMPLOYEE_NUMBER) = TO_NUMBER(IN_EMP_NBR); 
     
RETURN V_EMPLOYEE_NAME;
EXCEPTION 
    WHEN OTHERS THEN
    RETURN IN_EMP_NBR;
END GET_EMPLOYEE_NAME;

FUNCTION GET_STORE_MANAGER_NAME_FNC(
/*******************************************************************************
    This function will return the employee name for given employee number as input

Created : 07/07/2016 axd783 CCN Project Team...
Modified:
*******************************************************************************/
IN_COST_CENTER_CODE  IN   VARCHAR2
)
RETURN VARCHAR2
IS

V_MANAGER_NAME     VARCHAR2(100);
V_CODE             NUMBER;
V_ERRM             VARCHAR2(500);

BEGIN
    SELECT E1.EMPLOYEE_NAME
      INTO V_MANAGER_NAME
      FROM EMPLOYEE_DETAILS E1
     WHERE UPPER(E1.JOB_TITLE) IN ('MGR', 'STORE MGR')
       AND E1.EMP_PAYROLL_STATUS = 'Active'
       AND E1.COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND E1.HIRE_DATE = (SELECT MIN(HIRE_DATE)
                             FROM EMPLOYEE_DETAILS E2
                            WHERE UPPER(E2.COST_CENTER_CODE) = UPPER(E1.COST_CENTER_CODE)
                              AND UPPER(E2.JOB_TITLE) IN ('MGR', 'STORE MGR')
                              AND E2.EMP_PAYROLL_STATUS = 'Active');
    RETURN V_MANAGER_NAME;

EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_STORE_MANAGER_NAME_FNC;

END CCN_EMPLOYEE_DETAILS_PKG;