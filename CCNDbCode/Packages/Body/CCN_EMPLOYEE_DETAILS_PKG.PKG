create or replace PACKAGE BODY CCN_EMPLOYEE_DETAILS_PKG 
IS
/*********************************************************** 
This package will contain all the procedures required to  work with employee details

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
************************************************************/
PROCEDURE EMPLOYEE_DETAILS_ROWTYPE_SP (
/*******************************************************************************
	EMPLOYEE_DETAILS_ROWTYPE_SP

	This procedure is intended to build the EMPLOYEE_DETAILS record type

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT EMPLOYEE_DETAILS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         EMPLOYEE_DETAILS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EMPLOYEE_NAME' THEN
                    V_TEMP_ROW.EMPLOYEE_NAME                         :=  V_ROW_VALUE;
                WHEN 'LAST_NAME' THEN
                    V_TEMP_ROW.LAST_NAME                             :=  V_ROW_VALUE;
                WHEN 'FIRST_NAME' THEN
                    V_TEMP_ROW.FIRST_NAME                            :=  V_ROW_VALUE;
                WHEN 'MIDDLE_INITIAL' THEN
                    V_TEMP_ROW.MIDDLE_INITIAL                        :=  V_ROW_VALUE;
                WHEN 'HOME_ADDRESS_LINE1' THEN
                    V_TEMP_ROW.HOME_ADDRESS_LINE1                    :=  V_ROW_VALUE;
                WHEN 'HOME_ADDRESS_LINE2' THEN
                    V_TEMP_ROW.HOME_ADDRESS_LINE2                    :=  V_ROW_VALUE;
                WHEN 'HOME_CITY_STATE' THEN
                    V_TEMP_ROW.HOME_CITY_STATE                       :=  V_ROW_VALUE;
                WHEN 'HOME_CITY' THEN
                    V_TEMP_ROW.HOME_CITY                             :=  V_ROW_VALUE;
                WHEN 'HOME_STATE' THEN
                    V_TEMP_ROW.HOME_STATE                            :=  V_ROW_VALUE;
                WHEN 'HOME_POSTAL_CODE' THEN
                    V_TEMP_ROW.HOME_POSTAL_CODE                      :=  V_ROW_VALUE;
                WHEN 'HOME_PHONE' THEN
                    V_TEMP_ROW.HOME_PHONE                            :=  V_ROW_VALUE;
                WHEN 'COMPANY_CODE' THEN
                    V_TEMP_ROW.COMPANY_CODE                          :=  V_ROW_VALUE;
                WHEN 'SEX' THEN
                    V_TEMP_ROW.SEX                                   :=  V_ROW_VALUE;
                WHEN 'EMP_PAYROLL_STATUS' THEN
                    V_TEMP_ROW.EMP_PAYROLL_STATUS                    :=  V_ROW_VALUE;
                WHEN 'EMP_ASSIGNMENT_STATUS' THEN
                    V_TEMP_ROW.EMP_ASSIGNMENT_STATUS                 :=  V_ROW_VALUE;
                WHEN 'EMP_DIVISION' THEN
                    V_TEMP_ROW.EMP_DIVISION                          :=  V_ROW_VALUE;
                WHEN 'HIRE_DATE' THEN
                    V_TEMP_ROW.HIRE_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'TERM_DATE' THEN
                    V_TEMP_ROW.TERM_DATE                             :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'ADJUSTED_SERVICE_DATE' THEN
                    V_TEMP_ROW.ADJUSTED_SERVICE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'JOB_CODE' THEN
                    V_TEMP_ROW.JOB_CODE                              :=  V_ROW_VALUE;
                WHEN 'JOB_DIVISION' THEN
                    V_TEMP_ROW.JOB_DIVISION                          :=  V_ROW_VALUE;
                WHEN 'JOB_FAMILY' THEN
                    V_TEMP_ROW.JOB_FAMILY                            :=  V_ROW_VALUE;
                WHEN 'JOB_TITLE' THEN
                    V_TEMP_ROW.JOB_TITLE                             :=  V_ROW_VALUE;
                WHEN 'JOB_TYPE' THEN
                    V_TEMP_ROW.JOB_TYPE                              :=  V_ROW_VALUE;
                WHEN 'JOB_LEVEL' THEN
                    V_TEMP_ROW.JOB_LEVEL                             :=  V_ROW_VALUE;
                WHEN 'JOB_FUNCTION' THEN
                    V_TEMP_ROW.JOB_FUNCTION                          :=  V_ROW_VALUE;
                WHEN 'DAD_CODE' THEN
                    V_TEMP_ROW.DAD_CODE                              :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_DETAILS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_DETAILS_ROWTYPE_SP;

PROCEDURE EMP_ADMIN_DETAILS_ROWTYPE_SP (
/*******************************************************************************
	EMP_ADMIN_DETAILS_ROWTYPE_SP

	This procedure is intended to build the EMPLOYEE_ADMIN_DETAILS record type

Created : 06/23/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT EMPLOYEE_ADMIN_DETAILS%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'EMPLOYEE_NUMBER' THEN
                    V_TEMP_ROW.EMPLOYEE_NUMBER                       :=  V_ROW_VALUE;
                WHEN 'ADMIN_COST_CENTER_CODE' THEN
                    V_TEMP_ROW.ADMIN_COST_CENTER_CODE                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMP_ADMIN_DETAILS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMP_ADMIN_DETAILS_ROWTYPE_SP;

PROCEDURE EMPLOYEE_DETAILS_S_SP (
/*******************************************************************************
	EMPLOYEE_DETAILS_S_SP

	This procedure is intended to select records from EMPLOYEE_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXX</EMPLOYEE_NUMBER>
<COST_CENTER_CODE>XXXXXX</COST_CENTER_CODE>
<EMPLOYEE_NAME>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</EMPLOYEE_NAME>
<LAST_NAME>XXXXXXXXXXXXXXXXXXXX</LAST_NAME>
<FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</FIRST_NAME>
<MIDDLE_INITIAL>XX</MIDDLE_INITIAL>
<HOME_ADDRESS_LINE1>XXXXXXXXXXXXXXXXXXXX</HOME_ADDRESS_LINE1>
<HOME_ADDRESS_LINE2>XXXXXXXXXXXXXXXXXXXX</HOME_ADDRESS_LINE2>
<HOME_CITY_STATE>XXXXXXXXXXXXXXXXXXXX</HOME_CITY_STATE>
<HOME_CITY>XXXXXXXXXXXXXXXXXXXX</HOME_CITY>
<HOME_STATE>XX</HOME_STATE>
<HOME_POSTAL_CODE>XXXXXXXXX</HOME_POSTAL_CODE>
<HOME_PHONE>XXXXXXXXXX</HOME_PHONE>
<COMPANY_CODE>XXX</COMPANY_CODE>
<SEX>X</SEX>
<EMP_PAYROLL_STATUS>X</EMP_PAYROLL_STATUS>
<EMP_ASSIGNMENT_STATUS>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</EMP_ASSIGNMENT_STATUS>
<EMP_DIVISION>XXXX</EMP_DIVISION>
<HIRE_DATE>MM-DD-RRRR</HIRE_DATE>
<TERM_DATE>MM-DD-RRRR</TERM_DATE>
<ADJUSTED_SERVICE_DATE>MM-DD-RRRR</ADJUSTED_SERVICE_DATE>
<JOB_CODE>XXXXX</JOB_CODE>
<JOB_DIVISION>XXXX</JOB_DIVISION>
<JOB_FAMILY>XXXXXXXXXX</JOB_FAMILY>
<JOB_TITLE>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</JOB_TITLE>
<JOB_TYPE>XXXXXXXXXXXXXXX</JOB_TYPE>
<JOB_LEVEL>XXXXXXXXXX</JOB_LEVEL>
<JOB_FUNCTION>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</JOB_FUNCTION>
<DAD_CODE>XXXXXXXX</DAD_CODE>
</EMPLOYEE_DETAILS>
</EMPLOYEE_DETAILS_UI>

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_DETAILS%ROWTYPE;
BEGIN

    EMPLOYEE_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM EMPLOYEE_DETAILS
         WHERE EMPLOYEE_NUMBER  = V_TEMP_ROW.EMPLOYEE_NUMBER
           AND COST_CENTER_CODE = V_TEMP_ROW.COST_CENTER_CODE;

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_DETAILS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_DETAILS_S_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_S_SP (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_S_SP

	This procedure is intended to select records from EMPLOYEE_ADMIN_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_ADMIN_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>

Created : 06/23/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       EMPLOYEE_ADMIN_DETAILS%ROWTYPE;
BEGIN

    EMP_ADMIN_DETAILS_ROWTYPE_SP(IN_TABLE_NAME,
                                 IN_ROW_DATA,
                                 V_TEMP_ROW);

    OPEN OUT_REF_CUR FOR
        SELECT *
          FROM EMPLOYEE_ADMIN_DETAILS
         WHERE NVL(EMPLOYEE_NUMBER,'XXX')         = NVL(V_TEMP_ROW.EMPLOYEE_NUMBER,NVL(EMPLOYEE_NUMBER,'XXX'))
           AND NVL(ADMIN_COST_CENTER_CODE,'XXX')  = NVL(V_TEMP_ROW.ADMIN_COST_CENTER_CODE,NVL(ADMIN_COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) >= NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
           AND NVL(EXPIRATION_DATE,TRUNC(SYSDATE)) <= NVL(V_TEMP_ROW.EXPIRATION_DATE,NVL(EXPIRATION_DATE,TRUNC(SYSDATE)));

EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'EMPLOYEE_ADMIN_DETAILS_S_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END EMPLOYEE_ADMIN_DETAILS_S_SP;

END CCN_EMPLOYEE_DETAILS_PKG;

