head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2013.06.10.19.06.06;	author sw\kdp465;	state Exp;
branches;
next	1.10;
deltatype	text;
kopt	kv;
permissions	666;
commitid	277451b6239d5750;
filename	common_tools.pkg;

1.10
date	2013.06.10.12.42.45;	author sw\tal946;	state Exp;
branches;
next	1.9;
deltatype	text;
kopt	kv;
permissions	666;
commitid	224051b5c9c431e9;
filename	common_tools.pkg;

1.9
date	2013.05.30.18.30.00;	author sw\mdh01r;	state Exp;
branches;
next	1.8;
deltatype	text;
kopt	kv;
permissions	666;
commitid	54451a79aa76039;
filename	common_tools.pkg;

1.8
date	2013.05.17.18.14.41;	author sw\kdp465;	state Exp;
branches;
next	1.7;
deltatype	text;
kopt	kv;
permissions	666;
commitid	12dc519673905cc5;
filename	common_tools.pkg;

1.7
date	2013.05.17.16.03.32;	author sw\kdp465;	state Exp;
branches;
next	1.6;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1f18519654d37864;
filename	common_tools.pkg;

1.6
date	2013.04.19.17.19.47;	author sw\sxh487;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	204051717cb22707;
filename	common_tools.pkg;

1.5
date	2013.01.04.14.15.14;	author sw\mdh01r;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	27d050e6e3f10dd0;
filename	common_tools.pkg;

1.4
date	2012.12.20.15.36.40;	author sw\mdh01r;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	76850d330873825;
filename	common_tools.pkg;

1.3
date	2012.11.15.19.32.33;	author sw\mdh01r;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2d850a543503e08;
filename	common_tools.pkg;

1.2
date	2012.10.23.18.44.04;	author sw\mdh01r;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	20045086e57313dd;
filename	common_tools.pkg;

1.1
date	2012.10.01.20.36.16;	author sw\kdp465;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	14785069febf32d0;
filename	common_tools.pkg;


desc
@@


1.11
log
@Address update fix
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@create or replace
PACKAGE BODY COMMON_TOOLS as 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

-	DATE_BLANK(in_date)
created : 08/24/2010 kdp 
revised : 05/30/2013 mdh EXPIRE_DATA_SP changes.
************************************************************/

PROCEDURE ALTER_ALL_TRIGGERS ( 
/******************************************************************************
	ALTER_ALL_TRIGGERS   --    Alter all table(s) triggers

	This procedure will enable and/or disable all table(s) triggers based on an
  input "status" parameter.  
	  
created : 11/14/2012 MDH CCN Project....
*******************************************************************************/
IN_STATUS  IN VARCHAR2 )
IS
CURSOR c_tr IS (SELECT 'ALTER TRIGGER ' || 
                        trigger_name AS stmnt FROM USER_TRIGGERS);
--
--
v_code number;
v_errm varchar2(500);
--
BEGIN
--
IF IN_STATUS NOT IN ('ENABLE', 'enable', 'DISABLE', 'disable') THEN 
   DBMS_OUTPUT.PUT_LINE('COMMON_TOOLS.ALTER_ALL_TRIGGERS ' ||
                        'Status: <' || IN_STATUS  || '>' ||
                        ' IS Invalid, only ' || 'ENABLE or DISABLE' ||
                        ' are accepted as valid parameters');
   RAISE VALUE_ERROR;
END IF;
--
FOR tr IN c_tr LOOP
      EXECUTE IMMEDIATE tr.stmnt || ' ' || IN_STATUS;
END LOOP;
--
  EXCEPTION
--
        WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COMMONT_TOOLS.ALTER_ALL_TRIGGERS' ||
                 v_errm ||
                 'Polling Update Error' );
--
END alter_all_triggers;

FUNCTION CODE_DETAIL_VALID
/**********************************************************
	CODE_DETAIL_VALID(in_field_name, in_value_code)
		code_detail_valid function will be used to verify if a value is valid for a field.
    The field name and the field value must be passed.  
    This function will return a TRUE or FALSE condition. 

created : 08/15/2012 tal Cost Center Nucleus project.....
**********************************************************/
  ( in_field_name  in  varchar2
  , in_value_code  in  varchar2
  ) return boolean as 

   v_count  number;

begin

    select  count(1)  into  v_count
     from     code_detail
    where code_detail.code_header_name   =  in_field_name
     and  code_detail.code_detail_value  =  in_value_code;

    if  v_count > 0  then  --  entry was found in the CODE_DETAIL table
        return true;
    else                   --  entry not found in the CODE_DETAIL table
        return false;
    end if;
    
end code_detail_valid;

FUNCTION COMPUTE_EXPIRATION_DATE
/******************************************************************************
	COMPUTE_EXPIRATOIN_DATE (in_date)
  
		This function will be used to read in a date and subtract one day
    from that date (effective) and return a new date (expiration) which
    is one day prior.
    
    The an input date must be passed.  
    This function will return a new (expiration) date. 

created : 12/04/2012 mdh Cost Center Nucleus project.....
revised:
******************************************************************************/
  ( in_date  in  date 
   ) return date 
   IS 

v_return_date date ;
v_curr_date date := sysdate;
v_code number;
v_errm varchar(500);

begin
 	if in_date is not null then
    	v_return_date := in_date - 1; -- input date minus 1 day
	else
		v_return_date := v_curr_date - 1;  -- default date
	end if; 
	return(v_return_date);
   
END COMPUTE_EXPIRATION_DATE;


PROCEDURE COUNTY_NAMES_S_SP (
/*******************************************************************************
	COUNTY_NAMES_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the COUNTY_NAME table. For a State_code entered a Ref_Cursor will be 
  returned pointing to a table of all the County_Names for that State_Code

created : 06/07/2013 tal CCN Project....
changed : 
*******************************************************************************/
     in_STATE_CODE  IN  COUNTY_NAMES.STATE_CODE%TYPE
		,out_REF_CUR    OUT sys_refcursor   )
        IS
        
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_REF_CUR FOR
			  
			  SELECT * 
			  FROM COUNTY_NAMES
			  where state_code = in_STATE_CODE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COUNTY_NAMES_S_SP, ' || ' ' ||
             ' STATE_CODE is ' || in_STATE_CODE || '; ' || v_errm);
                     
END COUNTY_NAMES_S_SP;


FUNCTION DATE_BLANK
/**********************************************************
	DATE_BLANK(in_date)
		blank Date function to fill in default date to an oracle NULL for insert into tables
		this is created since oracle cannot handle blank strings being converted to 
		date fields

created : 08/24/2010 kdp Payroll reporting project.....
**********************************************************/
    (in_date in varchar2)
    RETURN varchar2
IS 

v_return_date VARCHAR2(12);

BEGIN
	if ascii(in_date) = '32' then
    	v_return_date := ''; -- default date
	else
		v_return_date := in_date;
	end if; 
	
	return(v_return_date);
   
END DATE_BLANK;

procedure EMPLOYEE_DATA_S_SP   
/*******************************************************************************
	EMPLOYEE_DATA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the EMP_DATA table.  Specifically, this procedure is intended to 
  return the Social Security Number (national Identifier), given the 
  GEMS Employee ID necessary for the Feed-Back Process into the IDMS
  System.

created : 10/22/2012 MDH CCN Project....
changed : 
*******************************************************************************/
 ( IN_GEMS_EMPLOYEE_ID   IN  EMP_DATA.EMPLOYEE_NUMBER%TYPE
                          , OUT_EMP_DATA_ROWTYPE OUT EMP_DATA%rowtype)
        is         
--
emp_data_not_act_exp              EXCEPTION;
no_emp_data_exp                   EXCEPTION;
-- 
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;
v_break                varchar(100);

	BEGIN

/*******************************************************************************
  The GEMS Emplyee I.D. must be numeric.  
*******************************************************************************/
--
--
begin			  
v_break  := ('Select Employee_Data Table ' );  

			  SELECT *  into OUT_EMP_DATA_ROWTYPE
			  from emp_data
			  where employee_number = in_gems_employee_id;
        
v_break  := ('GOOD Select Employee_Data Table ' );  
--        
--       if OUT_EMPLOYEE_DATA_ROWTYPE.emp_payroll_status not in ('A')  then
--           raise emp_data_not_act_exp;
--       end if;
EXCEPTION
  when no_data_found then
     raise no_emp_data_exp;
--  See First Error A
end;
--
	  
  EXCEPTION
 
-- First Error A    
               when no_emp_data_exp then
                    v_code := errnums.en_no_emp_data_err;     
                    errpkg.raise_err(v_code, 'EMPLOYEE_DATA_S_SP.no_emp_data_exp '  ,
                   'GEMS I.D. "' || in_gems_employee_id || 
                   '" not found in GEMS Master File "' );  
-- Second Error B    
--               when emp_data_not_act_exp then
--                    v_code := errnums.en_no_emp_data_err;   
--                    errpkg.raise_err(v_code, 'EMPLOYEE_DATA_S_SP.sls_emp_data_not_act_exp '  ,
--                   'GEMS I.D. "' || ingems_employee_id || 
--                   '" does not have an active status on GEMS "' );    
--                   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMPLOYEE_DATA_S_SP' ||
             'GEMS_EMPLOYEE_ID' || in_gems_employee_id ||
              v_errm ||
              v_break);
                     

end EMPLOYEE_DATA_S_SP;


PROCEDURE EXPIRE_DATA_SP (
/******************************************************************************
	EXPIRE_DATA_SP   --    Expire selected Table Rows Procedure

	This procedure is intended to expire specific row row(s) of data based on 
       table_name, Cost_Center, Address_Type(Addresses only), and Effective_Date. 
       
  This procedure is intended to be used for the follownig tables: 
  
            ADDRESS_CAN, ADDRESS_USA, ADDRESS_MEX, ADDRESS_OTHER
          , BANK_CARD
          , MARKETING
          , STATUS
          , TYPE
  
created : 12/04/2012 MDH CCN Project.....
revised : 05/23/2014 MDH Add Address_Type Parm for Address Records only.
*******************************************************************************/
--
  in_ROW_TABLE            IN  varchar2
, in_COST_CENTER          IN  COST_CENTER.COST_CENTER_CODE%TYPE
, in_EFFECTIVE_DATE       IN  date 
, in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE DEFAULT NULL)

is
 v_code            number;
 v_errm            varchar2(500);
 v_expiration_Date date;
 v_date            date;
 v_row_id          rowid;
 v_count           integer := 0;
 sql_stmt          varchar2(400);
 v_break           varchar(100);
--
 parameter_null_exp	      EXCEPTION;
 multiple_expire_exp	    EXCEPTION;
 no_unexpire_exp	        EXCEPTION;
 record_update_exp	      EXCEPTION;
--
--
begin

-- verify that the input parameters are not null
v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP ' ); 
  if in_ROW_TABLE is null   or
     in_COST_CENTER is null  or
     (in_ROW_TABLE in ('ADDRESS_CAN','ADDRESS_MEX','ADDRESS_OTHER','ADDRESS_USA')
        AND  in_ADDRESS_TYPE  is null)  or
     in_EFFECTIVE_DATE is null      then
        raise parameter_null_exp;
  end if;
--
--******************************************************************************
-- select the table (in_row_table) for the cost_center 
-- verify that only one row for the cost center has null expiration date.
-- 05/23/2013 MDH for Address records add the ADDRESS_TYPE parameter
--******************************************************************************
  begin
--     
       v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Count unexpire recs)' ); 
--
    if in_ROW_TABLE in ('ADDRESS_CAN','ADDRESS_MEX','ADDRESS_OTHER','ADDRESS_USA') then
      sql_stmt := ('select COUNT(1) from ' ||
                    in_ROW_TABLE || 
                    ' where COST_CENTER_CODE  =  :in_COST_CENTER ' || 
                    ' and ADDRESS_TYPE  =  :in_ADDRESS_TYPE ' ||
                    ' and  EXPIRATION_DATE is null');
      EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER, in_ADDRESS_TYPE;              
    else
       sql_stmt := ('select COUNT(1) from ' ||
                    in_ROW_TABLE || 
                    ' where COST_CENTER_CODE  =  :in_COST_CENTER ' || 
                    ' and  EXPIRATION_DATE is null');
       EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER;               
    end if;
--                  
--      EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER, in_ADDRESS_TYPE;
                   
      if v_count  >  1  then
          raise multiple_expire_exp;
      end if;
  end;
--
--*****************************************************************************
-- select the table (in_row_table) for the cost_center
-- 05/23/2013 MDH for Address records add the ADDRESS_TYPE parameter
-- 05/30/2013 MDH only finish this procedure if v_count >0 otherwise let it
--                drop out as there are no records to expire.
--*****************************************************************************
if v_count  >  0  then
  begin
    v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Found unexpire recd)' ); 
--
    if in_ROW_TABLE in ('ADDRESS_CAN','ADDRESS_MEX','ADDRESS_OTHER','ADDRESS_USA') then
        sql_stmt := ('select EXPIRATION_DATE, ROWID from ' ||
                  in_ROW_TABLE || 
                  ' where COST_CENTER_CODE =  :in_COST_CENTER ' ||
                  ' and ADDRESS_TYPE  =  :in_ADDRESS_TYPE ' || 
                  ' and EXPIRATION_DATE is null');
         EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER, in_ADDRESS_TYPE;          
    else
        sql_stmt := ('select EXPIRATION_DATE, ROWID from ' ||
                  in_ROW_TABLE || 
                  ' where COST_CENTER_CODE =  :in_COST_CENTER ' || 
                  ' and EXPIRATION_DATE is null');
        EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER;          
    end if;                 
--
--      EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER, in_ADDRESS_TYPE;
--               
  exception
     when others then
        raise no_unexpire_exp;
  
  end;
--
--************************************************************************************
-- if found, compute the expiration date using the COMPUTE_EXPIRATION_DATE function
--  in_ROW_TABLE.expiration_date := COMPUTE_EXPIRATION_DATE ( in_EFFECTIVE_DATE);
--************************************************************************************
--
    v_date := COMPUTE_EXPIRATION_DATE (sysdate);--in_EFFECTIVE_DATE); --in_EFFECTIVE_DATE - 1   
--
--    
--*****************************************************************************
--  update the table/row for IN_ROW_TABLE
--*****************************************************************************
  begin
       v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Update expire date)' ); 
       v_expiration_date := v_date;
       sql_stmt := ('UPDATE ' || in_ROW_TABLE ||
                    ' SET EXPIRATION_DATE =  :v_expiration_date ' ||
                    ' WHERE  rowid = :v_row_id ');
 
       EXECUTE IMMEDIATE sql_stmt USING v_expiration_date, v_row_id;
       dbms_output.put_line('ran update??' || 'v_expiration_date '  || v_expiration_date);
-- 
--   
            EXCEPTION 
             WHEN OTHERS THEN 
                 raise record_update_exp;
--
  end;
end if;

EXCEPTION

   when parameter_null_exp then  
	   		v_code := errnums.en_parameter_null_err;
		      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.parameter_null_exp ' 
             		,'One or more input parameteres is null ' );     
                
   when multiple_expire_exp then  
		   		v_code := errnums.en_multipl_expire_err;
			      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.multipl_expire_exp ' 
             		,'More than 1 unexpired rows found for table: ' ||
                    in_ROW_TABLE ||   ' ccntr: ' ||
                  in_COST_CENTER );     
               
   when no_unexpire_exp then  
		   		v_code := errnums.en_no_unexpire_err;
			      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.no_unexpire_exp ' 
             		,'No unexpired rows found for table: ' ||
                    in_ROW_TABLE ||   ' ccntr: ' ||
                  in_COST_CENTER );     
              
   when record_update_exp then  
 		   		v_code := errnums.en_record_update_err;
			      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.record_update_exp ' 
            		,'Record Update Error for table: ' ||
                    in_ROW_TABLE ||   ' ccntr: ' ||
                  in_COST_CENTER  ||
                  ' ROW ID: ' || V_ROW_ID);
                   
    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,500);
        errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP Error' ||
                         v_errm || 
                        v_break );

end EXPIRE_DATA_SP;

-------------------

function cost_center_look_up_fnc( 
/**********************************************************
This function will return 6 digit COST_CENTER_CODE
when the 4-digit code is passed

parameters: in

created : 04/19/2013 SH CCN Project
**********************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE 
)
return varchar2
is

	v_COST_CENTER_CODE COST_CENTER.COST_CENTER_CODE%TYPE;
--
begin

    SELECT COST_CENTER_CODE
      INTO v_COST_CENTER_CODE
      FROM COST_CENTER
     where cost_center_code like '%' || in_COST_CENTER;
  
     RETURN v_COST_CENTER_CODE;
     
 EXCEPTION
  WHEN OTHERS THEN
     v_COST_CENTER_CODE := in_COST_CENTER;
     --dbms_output.put_line('Cost Center Not Found for ' || in_COST_CENTER);
    
end cost_center_look_up_fnc;
                            
function country_look_up_fnc( 
/**********************************************************
This function will return COUNTRY_CODE


parameters: in

created : 05/17/2013 kdp CCN Project
**********************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE 
)
return varchar2
is

	v_COUNTRY_CODE COST_CENTER.COUNTRY_CODE%TYPE;
	v_COST_CENTER_CODE COST_CENTER.COST_CENTER_CODE%TYPE :=	COMMON_TOOLS.cost_center_look_up_fnc(in_COST_CENTER);
--
begin

    SELECT COUNTRY_CODE
      INTO v_COUNTRY_CODE
      FROM COST_CENTER
     where cost_center_code = v_COST_CENTER_CODE;
  
     RETURN v_COUNTRY_CODE;
     
 EXCEPTION
  WHEN OTHERS THEN
     v_COST_CENTER_CODE := in_COST_CENTER;
     --dbms_output.put_line('Cost Center Not Found for ' || in_COST_CENTER);
    
end country_look_up_fnc;

END COMMON_TOOLS;
@


1.10
log
@added county_names_sp
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d380 1
a380 1
    v_date := COMPUTE_EXPIRATION_DATE ( in_EFFECTIVE_DATE); --in_EFFECTIVE_DATE - 1   
d394 1
d509 1
a509 1
END COMMON_TOOLS;@


1.9
log
@add ADDRESS_TYPE parameter for processing multiple addresses.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d4 1
a4 1
This package is intended to hold reuseable objects that are 
d117 38
a154 1
    
d508 1
a508 2
END COMMON_TOOLS;

@


1.8
log
@made country code look up work with 4 digit cost center
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d9 1
d227 1
a227 1
       table_name, Cost_Center, and Effective_Date. 
d238 1
a238 1
revised :
d243 2
a244 1
, in_EFFECTIVE_DATE       IN  date) 
d253 1
a253 1
 sql_stmt          varchar2(300);
d268 2
d277 1
d280 1
a280 1
 --     
d282 9
d292 7
a298 4
                  in_ROW_TABLE || 
                  ' where COST_CENTER_CODE  =  :in_COST_CENTER ' || 
                  ' and  EXPIRATION_DATE is null');
      EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER;
d307 3
d311 1
d313 11
a323 2
      v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Fount unexpire recd)' ); 
      sql_stmt := ('select EXPIRATION_DATE, ROWID from ' ||
d327 4
a330 1
      EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER;
d335 1
a335 1
 
d353 2
a354 2
                    ' SET EXPIRATION_DATE = :v_expiration_date' ||
                    ' WHERE  rowid = :v_row_id');
d362 1
a362 1

d364 1
d392 2
a393 1
                  in_COST_CENTER );
a400 1

@


1.7
log
@added procedure get country code
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d419 1
d426 1
a426 1
     where cost_center_code = in_COST_CENTER;
d432 1
a432 1
     v_COUNTRY_CODE := in_COST_CENTER;
@


1.6
log
@Added a function to return 6-digit CC code
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d399 29
a427 1
     dbms_output.put_line('Cost Center Not Found for ' || in_COST_CENTER);
d429 8
a436 1
end cost_center_look_up_fnc;
a437 1
END COMMON_TOOLS;@


1.5
log
@Took out Commit in EXPIRE_DATA_SP procedure.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
a1 1
CREATE OR REPLACE
a370 2
   
END COMMON_TOOLS;
d372 32
a403 1
/@


1.4
log
@Added COMPUTE_EXPIRE_DATE Function and EXPIRE_DATA_SP procedure.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d324 1
a324 2
        
      commit;
@


1.3
log
@added ALTER_ALL_TRIGGERS procedure to package.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d84 32
d220 150
@


1.2
log
@Added EMPLOYEE_DATA_S_SP procedure
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d11 43
@


1.1
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d68 77
@

