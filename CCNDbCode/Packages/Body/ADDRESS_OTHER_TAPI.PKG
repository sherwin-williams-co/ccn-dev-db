PACKAGE body ADDRESS_OTHER_tapi
IS
  -- insert
PROCEDURE ins(
    IN_EFFECTIVE_DATE   IN ADDRESS_OTHER.EFFECTIVE_DATE%type ,
    IN_STATE            IN ADDRESS_OTHER.STATE_CODE%type DEFAULT NULL ,
    IN_COUNTRY          IN ADDRESS_OTHER.COUNTRY_CODE%type DEFAULT NULL ,
    IN_COST_CENTER_CODE IN ADDRESS_OTHER.COST_CENTER_CODE%type ,
    IN_ADDRESS_LINE_3   IN ADDRESS_OTHER.ADDRESS_LINE_3%type DEFAULT NULL ,
    IN_ADDRESS_LINE_2   IN ADDRESS_OTHER.ADDRESS_LINE_2%type DEFAULT NULL ,
    IN_ADDRESS_LINE_1   IN ADDRESS_OTHER.ADDRESS_LINE_1%type DEFAULT NULL ,
    IN_EXPIRATION_DATE  IN ADDRESS_OTHER.EXPIRATION_DATE%type DEFAULT NULL ,
    IN_PROVINCE         IN ADDRESS_OTHER.PROVINCE_CODE%type DEFAULT NULL ,
    IN_VALID_ADDRESS    IN ADDRESS_OTHER.VALID_ADDRESS%type DEFAULT NULL ,
    IN_ADDRESS_TYPE     IN ADDRESS_OTHER.ADDRESS_TYPE%type ,
    IN_CITY             IN ADDRESS_OTHER.CITY%type DEFAULT NULL ,
    IN_POSTAL_CODE      IN ADDRESS_OTHER.POSTAL_CODE%type DEFAULT NULL )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  INSERT
  INTO ADDRESS_OTHER
    (
      EFFECTIVE_DATE ,
      STATE_CODE ,
      COUNTRY_CODE ,
      COST_CENTER_CODE ,
      ADDRESS_LINE_3 ,
      ADDRESS_LINE_2 ,
      ADDRESS_LINE_1 ,
      EXPIRATION_DATE ,
      PROVINCE_CODE ,
      VALID_ADDRESS ,
      ADDRESS_TYPE ,
      CITY ,
      POSTAL_CODE
    )
    VALUES
    (
      IN_EFFECTIVE_DATE ,
      IN_STATE ,
      IN_COUNTRY ,
      IN_COST_CENTER_CODE ,
      IN_ADDRESS_LINE_3 ,
      IN_ADDRESS_LINE_2 ,
      IN_ADDRESS_LINE_1 ,
      IN_EXPIRATION_DATE ,
      IN_PROVINCE ,
      IN_VALID_ADDRESS ,
      IN_ADDRESS_TYPE ,
      IN_CITY ,
      IN_POSTAL_CODE
    );

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'ADDRESS_OTHER Insert');

END;


-- update
PROCEDURE upd
  (
    IN_EFFECTIVE_DATE   IN ADDRESS_OTHER.EFFECTIVE_DATE%type ,
    IN_STATE            IN ADDRESS_OTHER.STATE_CODE%type DEFAULT NULL ,
    IN_COUNTRY          IN ADDRESS_OTHER.COUNTRY_CODE%type DEFAULT NULL ,
    IN_COST_CENTER_CODE IN ADDRESS_OTHER.COST_CENTER_CODE%type ,
    IN_ADDRESS_LINE_3   IN ADDRESS_OTHER.ADDRESS_LINE_3%type DEFAULT NULL ,
    IN_ADDRESS_LINE_2   IN ADDRESS_OTHER.ADDRESS_LINE_2%type DEFAULT NULL ,
    IN_ADDRESS_LINE_1   IN ADDRESS_OTHER.ADDRESS_LINE_1%type DEFAULT NULL ,
    IN_EXPIRATION_DATE  IN ADDRESS_OTHER.EXPIRATION_DATE%type DEFAULT NULL ,
    IN_PROVINCE         IN ADDRESS_OTHER.PROVINCE_CODE%type DEFAULT NULL ,
    IN_VALID_ADDRESS    IN ADDRESS_OTHER.VALID_ADDRESS%type DEFAULT NULL ,
    IN_ADDRESS_TYPE     IN ADDRESS_OTHER.ADDRESS_TYPE%type ,
    IN_CITY             IN ADDRESS_OTHER.CITY%type DEFAULT NULL ,
    IN_POSTAL_CODE      IN ADDRESS_OTHER.POSTAL_CODE%type DEFAULT NULL
  )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  UPDATE ADDRESS_OTHER
  SET STATE_CODE              = IN_STATE ,
    COUNTRY_CODE              = IN_COUNTRY ,
    ADDRESS_LINE_3       = IN_ADDRESS_LINE_3 ,
    ADDRESS_LINE_2       = IN_ADDRESS_LINE_2 ,
    ADDRESS_LINE_1       = IN_ADDRESS_LINE_1 ,
    EXPIRATION_DATE      = IN_EXPIRATION_DATE ,
    PROVINCE_CODE             = IN_PROVINCE ,
    VALID_ADDRESS        = IN_VALID_ADDRESS ,
    CITY                 = IN_CITY ,
    POSTAL_CODE          = IN_POSTAL_CODE
  WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
  AND ADDRESS_TYPE       = IN_ADDRESS_TYPE
  AND EFFECTIVE_DATE     = IN_EFFECTIVE_DATE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'ADDRESS_OTHER Update');

END;

-- del
PROCEDURE del(
    IN_COST_CENTER_CODE IN ADDRESS_OTHER.COST_CENTER_CODE%type ,
    IN_ADDRESS_TYPE     IN ADDRESS_OTHER.ADDRESS_TYPE%type ,
    IN_EFFECTIVE_DATE   IN ADDRESS_OTHER.EFFECTIVE_DATE%type )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  DELETE
  FROM ADDRESS_OTHER
  WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
  AND ADDRESS_TYPE       = IN_ADDRESS_TYPE
  AND EFFECTIVE_DATE     = IN_EFFECTIVE_DATE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'ADDRESS_OTHER Delete');

END;
END ADDRESS_OTHER_tapi;
/

