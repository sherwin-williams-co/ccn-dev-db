create or replace PACKAGE BODY          CCN_PROCESSORS_PKG
    AS

/*********************************************************** 
This package contains procedures/functions to deal with processors

Created : 04/08/2016 jxc517 CCN Project....
Modified:
************************************************************/

G_PROCESSOR_ID        NUMBER;

PROCEDURE PROCESSORS_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the PROCESSORS record type

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_TABLE_NAME  IN     VARCHAR2,
    IN_ROW_DATA    IN     CLOB,
    OUT_ROW_TYPE      OUT PROCESSORS%ROWTYPE)
IS
    CURSOR TABLE_FIELDS_CUR IS
        SELECT COLUMN_NAME
               ,DATA_LENGTH COLUMN_SIZE
               ,DATA_TYPE
          FROM ALL_TAB_COLUMNS
         WHERE TABLE_NAME = IN_TABLE_NAME
         ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         PROCESSORS%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'PROCESSOR_ID' THEN
                    V_TEMP_ROW.PROCESSOR_ID                          :=  V_ROW_VALUE;
                WHEN 'PROCESSOR_NAME' THEN
                    V_TEMP_ROW.PROCESSOR_NAME                        :=  V_ROW_VALUE;
                WHEN 'PHONE_NUMBER' THEN
                    V_TEMP_ROW.PHONE_NUMBER                          :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    IF V_TEMP_ROW.PROCESSOR_ID IS NULL THEN
        SELECT NVL(MAX(PROCESSOR_ID), 0) +1
          INTO V_TEMP_ROW.PROCESSOR_ID
          FROM PROCESSORS;
        G_PROCESSOR_ID := V_TEMP_ROW.PROCESSOR_ID;
    END IF;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSORS_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SQLERRM);
END PROCESSORS_ROWTYPE_SP;

PROCEDURE PROCESSOR_STATES_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the PROCESSOR_STATES record type

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_TABLE_NAME  IN     VARCHAR2,
    IN_ROW_DATA    IN     CLOB,
    OUT_ROW_TYPE      OUT PROCESSOR_STATES%ROWTYPE)
IS
    CURSOR TABLE_FIELDS_CUR IS
        SELECT COLUMN_NAME
               ,DATA_LENGTH COLUMN_SIZE
               ,DATA_TYPE
          FROM ALL_TAB_COLUMNS
         WHERE TABLE_NAME = IN_TABLE_NAME
         ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         PROCESSOR_STATES%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'STATE_CODE' THEN
                    V_TEMP_ROW.STATE_CODE                            :=  V_ROW_VALUE;
                WHEN 'PROCESSOR_ID' THEN
                    V_TEMP_ROW.PROCESSOR_ID                          :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    IF V_TEMP_ROW.PROCESSOR_ID IS NULL THEN
       V_TEMP_ROW.PROCESSOR_ID := G_PROCESSOR_ID;
    END IF;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSOR_STATES_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SQLERRM);
END PROCESSOR_STATES_ROWTYPE_SP;

PROCEDURE PROCESSORS_U_SP (
/*******************************************************************************
	This procedure is intended to update records into PROCESSORS table
  and push the current record into HIST_PROCESSORS table

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA   IN     PROCESSORS%ROWTYPE)
IS
    V_HIST_ROW      HIST_PROCESSORS%ROWTYPE;
BEGIN
    SELECT A.*, SYSDATE
      INTO V_HIST_ROW
      FROM PROCESSORS A
     WHERE PROCESSOR_ID = IN_ROW_DATA.PROCESSOR_ID;

    IF NVL(V_HIST_ROW.PROCESSOR_ID, -1) <> NVL(IN_ROW_DATA.PROCESSOR_ID, -1)
      OR NVL(V_HIST_ROW.PROCESSOR_NAME, 'X') <> NVL(IN_ROW_DATA.PROCESSOR_NAME, 'X')
      OR NVL(V_HIST_ROW.PHONE_NUMBER, 'X') <> NVL(IN_ROW_DATA.PHONE_NUMBER, 'X')THEN
        UPDATE PROCESSORS
           SET ROW = IN_ROW_DATA
         WHERE PROCESSOR_ID = IN_ROW_DATA.PROCESSOR_ID;

        INSERT INTO HIST_PROCESSORS VALUES V_HIST_ROW;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END PROCESSORS_U_SP;

PROCEDURE PROCESSORS_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into PROCESSORS table

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_TABLE_NAME IN     VARCHAR2,
    IN_ROW_DATA   IN     CLOB)
IS
    V_TEMP_ROW       PROCESSORS%ROWTYPE;
BEGIN
    PROCESSORS_ROWTYPE_SP(IN_TABLE_NAME,
                          IN_ROW_DATA,
                          V_TEMP_ROW);
    INSERT INTO PROCESSORS VALUES V_TEMP_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        PROCESSORS_U_SP(V_TEMP_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSORS_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SQLERRM);
END PROCESSORS_I_SP;

PROCEDURE PROCESSOR_STATES_U_SP (
/*******************************************************************************
	This procedure is intended to update records into PROCESSOR_STATES table
  and push the current record into HIST_PROCESSOR_STATES table

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA   IN     PROCESSOR_STATES%ROWTYPE)
IS
    V_HIST_ROW      HIST_PROCESSOR_STATES%ROWTYPE;
BEGIN
    SELECT A.*, SYSDATE
      INTO V_HIST_ROW
      FROM PROCESSOR_STATES A
     WHERE STATE_CODE = IN_ROW_DATA.STATE_CODE;

    IF NVL(V_HIST_ROW.PROCESSOR_ID, -1) <> NVL(IN_ROW_DATA.PROCESSOR_ID, -1)
      OR NVL(V_HIST_ROW.STATE_CODE, 'X') <> NVL(IN_ROW_DATA.STATE_CODE, 'X') THEN
        UPDATE PROCESSOR_STATES
           SET ROW = IN_ROW_DATA
         WHERE STATE_CODE = IN_ROW_DATA.STATE_CODE;

        INSERT INTO HIST_PROCESSOR_STATES VALUES V_HIST_ROW;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSOR_STATES_U_SP', SQLERRM);
END PROCESSOR_STATES_U_SP;

PROCEDURE PROCESSOR_STATES_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into PROCESSOR_STATES table

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_TABLE_NAME IN     VARCHAR2,
    IN_ROW_DATA   IN     CLOB)
IS
    V_TEMP_ROW       PROCESSOR_STATES%ROWTYPE;
BEGIN
    PROCESSOR_STATES_ROWTYPE_SP(IN_TABLE_NAME,
                                IN_ROW_DATA,
                                V_TEMP_ROW);
    INSERT INTO PROCESSOR_STATES VALUES V_TEMP_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        PROCESSOR_STATES_U_SP(V_TEMP_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSOR_STATES_I_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SQLERRM);
END PROCESSOR_STATES_I_SP;

PROCEDURE PROCESSOR_STATES_D_SP (
/*******************************************************************************
	This procedure is intended to insert records into PROCESSOR_STATES table

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_TABLE_NAME IN     VARCHAR2,
    IN_ROW_DATA   IN     CLOB)
IS
    V_TEMP_ROW       PROCESSOR_STATES%ROWTYPE;
    V_HIST_ROW       HIST_PROCESSOR_STATES%ROWTYPE;
BEGIN
    PROCESSOR_STATES_ROWTYPE_SP(IN_TABLE_NAME,
                                IN_ROW_DATA,
                                V_TEMP_ROW);

    SELECT A.*, SYSDATE
      INTO V_HIST_ROW
      FROM PROCESSOR_STATES A
     WHERE STATE_CODE = V_TEMP_ROW.STATE_CODE;

    DELETE
      FROM PROCESSOR_STATES
     WHERE STATE_CODE = V_TEMP_ROW.STATE_CODE;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        PROCESSOR_STATES_U_SP(V_TEMP_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSOR_STATES_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, SQLERRM);
END PROCESSOR_STATES_D_SP;

PROCEDURE ALL_PROCESSOR_DTLS_S_SP (
/******************************************************************************
This procedure is intended to return a ref cursor with data from 
from the PROCESSORS and PROCESSOR_STATES tables.  

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
********************************************************************************/
    O_PROCESSORS           OUT      SYS_REFCURSOR,
    O_PROCESSOR_STATES     OUT      SYS_REFCURSOR)
IS
BEGIN
    /**  Call PROCESSORS Reference Cursor  ***/
    OPEN O_PROCESSORS FOR
        SELECT *
          FROM PROCESSORS
         ORDER BY PROCESSOR_ID;  

    /**  Call PROCESSOR_STATES Reference Cursor  ***/
    OPEN O_PROCESSOR_STATES FOR
        SELECT *
          FROM PROCESSOR_STATES
         ORDER BY PROCESSOR_ID, STATE_CODE;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ALL_PROCESSOR_DTLS_S_SP Error : ' || SQLERRM);   
END ALL_PROCESSOR_DTLS_S_SP;

PROCEDURE PROCESSOR_UI_UPSERT_SP (
/******************************************************************************
This procedure is intended to insert/update/delete data from 
from the PROCESSORS and PROCESSOR_STATES tables.

1. New record
    need to pass the newly created processor_id to states table as UI won't know te value then
2. Update record
    need to pass the existing record into history before update
3. Delete record
    need to pass the existing record into history before delete

Created : 04/08/2016 jxc517 CCN Project....
Changed : 
********************************************************************************/
    IN_XML         IN            CLOB)
IS
    V_ROW_DATA               XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_PROCESSORS_FRAG        CLOB;
    V_PROCESSOR_STATES_FRAG  CLOB;
    V_PROCESSORS_COUNT       NUMBER := 1;
    V_PROCESSOR_STATES_COUNT NUMBER := 1;
    V_DELETE_FLAG            VARCHAR2(1);
BEGIN
    --Loop through and insert/update the data accordingly
    WHILE V_ROW_DATA.EXISTSNODE('/PROCESSORS_UI_UPSERT/PROCESSORS[' || V_PROCESSORS_COUNT || ']') = 1 LOOP
        V_PROCESSORS_FRAG := V_ROW_DATA.EXTRACT('/PROCESSORS_UI_UPSERT/PROCESSORS[' || V_PROCESSORS_COUNT || ']').GETCLOBVAL();
        --DBMS_OUTPUT.PUT_LINE(V_PROCESSORS_FRAG);
        PROCESSORS_I_SP('PROCESSORS', V_PROCESSORS_FRAG);

        WHILE V_ROW_DATA.EXISTSNODE('/PROCESSORS_UI_UPSERT/PROCESSORS[' || V_PROCESSORS_COUNT || ']/PROCESSOR_STATES_TABLE/PROCESSOR_STATES[' || V_PROCESSOR_STATES_COUNT || ']') = 1 LOOP
            V_PROCESSOR_STATES_FRAG := V_ROW_DATA.EXTRACT('/PROCESSORS_UI_UPSERT/PROCESSORS[' || V_PROCESSORS_COUNT || ']/PROCESSOR_STATES_TABLE/PROCESSOR_STATES[' || V_PROCESSOR_STATES_COUNT || ']').GETCLOBVAL();
            IF V_ROW_DATA.EXISTSNODE('/PROCESSORS_UI_UPSERT/PROCESSORS[' || V_PROCESSORS_COUNT || ']/PROCESSOR_STATES_TABLE/PROCESSOR_STATES[' || V_PROCESSOR_STATES_COUNT || ']/DELETE_FLAG//text()') = 1 THEN
                V_DELETE_FLAG := V_ROW_DATA.EXTRACT('/PROCESSORS_UI_UPSERT/PROCESSORS[' || V_PROCESSORS_COUNT || ']/PROCESSOR_STATES_TABLE/PROCESSOR_STATES[' || V_PROCESSOR_STATES_COUNT || ']/DELETE_FLAG//text()').GETSTRINGVAL();
            ELSE
                V_DELETE_FLAG := 'N';
            END IF;
            --DBMS_OUTPUT.PUT_LINE(V_PROCESSOR_STATES_FRAG);
            IF TRIM(V_DELETE_FLAG) = 'N' THEN
                PROCESSOR_STATES_I_SP('PROCESSOR_STATES', V_PROCESSOR_STATES_FRAG);
            ELSE
                PROCESSOR_STATES_D_SP('PROCESSOR_STATES', V_PROCESSOR_STATES_FRAG);
            END IF;
            V_PROCESSOR_STATES_COUNT := V_PROCESSOR_STATES_COUNT + 1;
        END LOOP;
        V_PROCESSORS_COUNT := V_PROCESSORS_COUNT + 1;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSOR_UI_UPSERT_SP Error : ' || SQLERRM);
END PROCESSOR_UI_UPSERT_SP;

END CCN_PROCESSORS_PKG;

