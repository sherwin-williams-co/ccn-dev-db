create or replace PACKAGE BODY          CCN_TABLE_IU_PKG 
    AS
-- PACKAGE BODY
/****************************************************************************** 
This package is intended to control access to the core CCN table.

created : 09/18/2012 TAL -- CCN coding project
revised : 12/20/2012 MDH -- Add EXPIRE_DATA_SP procedure 
          12/16/2014 AXK326 CCN Project Team....
          Code changes made after deleting the sales manager link from the Territory Table
********************************************cost_center_u_sp***********************************/

    PROCEDURE All_TABLE_COL_S_SP (
/*******************************************************************************
    All_TABLE_COL_S_SP
    
    This procedure is intended to return a ref cursor with data from 
    from the all_table_col table.  

created : 04/26/2012 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
            in_TABLE_NAME IN ALL_TAB_COLUMNS.TABLE_NAME%TYPE
            ,out_ALL_TAB_REF_CUR OUT REF_CURSOR    )
    IS                  
        v_code number;
        v_errm varchar2(500);

    BEGIN

          OPEN out_ALL_TAB_REF_CUR FOR
              
          SELECT DECODE(COLUMN_NAME,'EFFECTIVE_DATE',TABLE_NAME || '_' || COLUMN_NAME
                                      ,'EXPIRATION_DATE',TABLE_NAME || '_' || COLUMN_NAME
                                      , COLUMN_NAME) AS COLUMN_NAME
                  FROM all_tab_columns
                  WHERE TABLE_NAME = in_table_name
            AND COLUMN_NAME <> 'GLOBAL_HIERARCHY_IND' 
                ORDER BY column_id ASC;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_S_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    END All_TABLE_COL_S_SP;

    PROCEDURE ADDRESS_CAN_S_SP  ( IN_COST_CENTER          IN  ADDRESS_CAN.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_CAN.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_CAN_REF_CUR OUT REF_CURSOR)
/******************************************************************************
    ADDRESS_CAN_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the ADDRESS_CAN table.  

created : 11/15/2010 kdp CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 04/20/2016 jxc517 CCN Project Team....
          Added condition to retrieve data for future address type irrespective of
          effective date
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

    BEGIN
     
   OPEN out_ADDRESS_CAN_REF_CUR FOR
              
         SELECT * 
     FROM ADDRESS_CAN AC
               WHERE UPPER(COST_CENTER_CODE)  = UPPER(IN_COST_CENTER)
         AND  ADDRESS_TYPE      = NVL(IN_ADDRESS_TYPE, AC.ADDRESS_TYPE)
         AND ((EFFECTIVE_DATE   <= V_CURR_DATE  OR ADDRESS_TYPE = 'F')
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
                 );
              
  EXCEPTION      
      WHEN others THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);  
    END ADDRESS_CAN_S_SP;


    PROCEDURE ADDRESS_MEX_S_SP  ( IN_COST_CENTER          IN  ADDRESS_MEX.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_MEX.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    ADDRESS_MEX_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the ADDRESS_MEX table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 04/20/2016 jxc517 CCN Project Team....
          Added condition to retrieve data for future address type irrespective of
          effective date
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

    BEGIN

          OPEN out_ADDRESS_MEX_REF_CUR FOR
              
              SELECT * 
              FROM ADDRESS_MEX AM
              WHERE UPPER(COST_CENTER_CODE)  = UPPER(IN_COST_CENTER)
               AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AM.ADDRESS_TYPE)
         AND ((EFFECTIVE_DATE   <= V_CURR_DATE  OR ADDRESS_TYPE = 'F')
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
                  );
    
  EXCEPTION   
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
    END ADDRESS_MEX_S_SP;


    PROCEDURE ADDRESS_OTHER_S_SP  ( IN_COST_CENTER            IN  ADDRESS_OTHER.COST_CENTER_CODE%TYPE
                                , IN_ADDRESS_TYPE           IN  ADDRESS_OTHER.ADDRESS_TYPE%TYPE
                                , OUT_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    ADDRESS_OTHER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the ADDRESS_OTHER table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 04/20/2016 jxc517 CCN Project Team....
          Added condition to retrieve data for future address type irrespective of
          effective date
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

    BEGIN

          OPEN out_ADDRESS_OTHER_REF_CUR FOR
              
              SELECT * 
              FROM ADDRESS_OTHER AO
              WHERE UPPER(COST_CENTER_CODE)  = UPPER(IN_COST_CENTER)
               AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AO.ADDRESS_TYPE) 
         AND ((EFFECTIVE_DATE   <= V_CURR_DATE  OR ADDRESS_TYPE = 'F')
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
                  );
 
  EXCEPTION
         WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP, ' || ' ' ||
             'COST_CENTER_CODE iFs ' || IN_COST_CENTER || ';  ' || 
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
    END ADDRESS_OTHER_S_SP;


    PROCEDURE ADDRESS_USA_S_SP  ( IN_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE
                              , out_ADDRESS_USA_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    ADDRESS_USA_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the ADDRESS_USA table.  

created : 03/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 04/20/2016 jxc517 CCN Project Team....
          Added condition to retrieve data for future address type irrespective of
          effective date
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

    BEGIN

          OPEN out_ADDRESS_USA_REF_CUR FOR
              
              SELECT * 
              FROM ADDRESS_USA AU
              WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER)
               AND ADDRESS_TYPE = NVL(IN_ADDRESS_TYPE, AU.ADDRESS_TYPE)
         AND ((EFFECTIVE_DATE   <= V_CURR_DATE  OR ADDRESS_TYPE = 'F')
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
                  );
    
  EXCEPTION  
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
    
    END ADDRESS_USA_S_SP;


    PROCEDURE ADMINISTRATION_S_SP (in_COST_CENTER IN ADMINISTRATION.COST_CENTER_CODE%TYPE
                            ,out_ADMINISTRATION_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    ADMINISTRATION_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the ADMINISTRATION table.  

created : 03/20/2012 mdh CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_ADMINISTRATION_REF_CUR FOR
              
              SELECT * 
              FROM ADMINISTRATION
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
            
  EXCEPTION   
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
    END administration_s_sp;

    
  PROCEDURE BANK_CARD_S_SP  ( IN_COST_CENTER          IN  BANK_CARD.COST_CENTER_CODE%TYPE
                            , IN_POLLING_STATUS_CODE  IN  BANK_CARD.POLLING_STATUS_CODE%TYPE
                            , IN_MERCHANT_ID_CODE     IN  BANK_CARD.MERCHANT_ID%TYPE
                            , OUT_BANK_CARD_REF_CUR   OUT REF_CURSOR)
/*******************************************************************************
    BANK_CARD_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the bank_card table.  

created : 03/21/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm  varchar2(500);
v_curr_date date := sysdate;
 
    BEGIN

          OPEN out_BANK_CARD_REF_CUR FOR
              
              SELECT * 
              FROM bank_card
              WHERE UPPER(cost_center_code)    = UPPER(in_cost_center)
               AND  polling_status_code = in_polling_status_code
         AND  (merchant_id         = nvl(in_merchant_id_code, bank_card.merchant_id) OR merchant_id IS NULL)
               AND (effective_date     <=  v_curr_date  
               AND (expiration_date IS NULL OR expiration_date  >=  v_curr_date)
                  );
     
 EXCEPTION  
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BANK_CARD_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center || ';  ' || 
             'POLLING_STATUS_CODE is '  || in_polling_status_code || ';  ' || 
             'MERCHANT_ID_CODE is '     || in_merchant_id_code
             || '; ' || v_errm
             );

    END BANK_CARD_S_SP;
  

PROCEDURE BATCH_JOB_S_SP (in_batch_job_name     IN  batch_job.batch_job_name%type
                        , in_batch_job_number   IN  batch_job.batch_job_number%type
            , out_BATCH_JOB_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    BATCH_JOB_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the BATCH_JOB table.  

created : 07/18/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm  varchar2(500);
v_input_row  varchar2(30);
    BEGIN
            
          OPEN out_BATCH_JOB_REF_CUR FOR
              
              SELECT * 
              FROM BATCH_JOB
              WHERE batch_job_name = in_batch_job_name
              AND batch_job_number = in_batch_job_number;
      
 EXCEPTION 
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_S_SP, ' || ' ' ||
             'BATCH_JOB_NAME is ' || in_BATCH_JOB_NAME || ';  ' ||
             'BATCH_JOB_NUMBER is ' || in_BATCH_JOB_NUMBER, v_errm);
                      
    END BATCH_JOB_S_SP;


PROCEDURE CODE_DETAIL_S_SP ( in_CODE_HEADER_NAME      IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
               , in_CODE_HEADER_TYPE      IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
               , in_CODE_DETAIL_VALUE     IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
              , out_CODE_DETAIL_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
    CODE_DETAIL_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the CODE_DETAIL table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_CODE_DETAIL_REF_CUR FOR
              
              SELECT * 
              FROM CODE_DETAIL
              WHERE code_header_name   =  in_CODE_HEADER_NAME
                           AND  CODE_HEADER_TYPE   =  IN_CODE_HEADER_TYPE
                           AND  CODE_DETAIL_VALUE  =  IN_CODE_DETAIL_VALUE
                           ORDER BY CODE_DETAIL_ID;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code,      'CODE_DETAIL_S_SP, '  || ' ' ||            
             'CODE_HEADER_NAME is '  || in_code_header_name || ';  ' ||
             'CODE_HEADER_TYPE is '  || in_code_header_type || ';  '  ||
             'CODE_DETAIL_VALUE is ' || in_CODE_DETAIL_VALUE || '; ' || v_errm);
                     
    END CODE_DETAIL_S_SP;


PROCEDURE CODE_HEADER_S_SP (in_CODE_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
                          , in_CODE_HEADER_TYPE IN CODE_HEADER.CODE_HEADER_TYPE%TYPE
                            ,out_CODE_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    CODE_HEADER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the CODE_HEADER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_CODE_HEADER_REF_CUR FOR
              
              SELECT * 
              FROM CODE_HEADER
              WHERE code_header_name = in_CODE_HEADER_NAME
                           AND  code_header_type = in_CODE_HEADER_TYPE;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, ' CODE_HEADER_S_SP, ' || ' ' ||
             'CODE_HEADER_NAME is ' || in_CODE_HEADER_NAME || ';  ' ||
             'CODE_HEADER_TYPE is ' || in_CODE_HEADER_TYPE || '; ' || v_errm    );
                     
    END CODE_HEADER_S_SP;


    PROCEDURE COST_CENTER_S_SP (in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
                , out_COST_CENTER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    COST_CENTER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the cost center table.  

created : 11/15/2011 kdp CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
        : 06/24/2015 axk326 CCN Project Team....
          Modified select query to pass XMLTYPE column values to ref cursor.
modified: 05/05/2016 jxc517 CCN Project Team....
          Modified select query to pass archive & new cost center if applicable
modified: 05/26/2016 nxk927 CCN Project Team....
          reverted the changes for archive cost center to move address_brb changes ahead
modified: 05/05/2016 jxc517 CCN Project Team....
          Modified select query to pass archive & new cost center if applicable
        : 07/11/2016 mxr916 CCN Project Team....
          Added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER columns.
          08/16/2016 mxk766 CCN Project...
          Defaulting STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER to 08 for CANADA.
		  Made changes as per ASP-400 mxk766 -	Standard/Primary Cost indicators
*******************************************************************************/
        IS                  

    BEGIN

          OPEN out_COST_CENTER_REF_CUR FOR
                SELECT COST_CENTER_CODE,
                       COST_CENTER_NAME,
                       CATEGORY,
                       ENTITY_TYPE,
                       STATEMENT_TYPE,
                       COUNTRY_CODE,
                       TRANSPORT_TYPE,
                       BEGIN_DATE,
                       OPEN_DATE,
                       MOVE_DATE,
                       CLOSE_DATE,
                       FINANCIAL_CLOSE_DATE,
                       POS_PROG_VER_EFF_DATE,
                       UPS_ZONE_CODE,
                       RPS_ZONE_CODE,
                       CURRENCY_CODE,
                       POS_PROG_VER_NBR,
                       LEASE_OWN_CODE,
                       MISSION_TYPE_CODE,
                       DUNS_NUMBER,
                       PRI_LOGO_GROUP_IND,
                       SCD_LOGO_GROUP_IND,
                       BANKING_TYPE,
                       DEPOSIT_BAG_REORDER,
                       DEPOSIT_TICKET_REORDER,
                       POP_KIT_CODE,
                       GLOBAL_HIERARCHY_IND,
                       ACQUISITION_CODE,
                       POS_NON_STORE_IND,
                       extract(COLOR_CONSULTANT_TYPE,'/PROGRAM_TYPE').getStringVal() COLOR_CONSULTANT_TYPE,
                       extract(PCC_PCL_STORE,'/PCC_PCL_STR').getStringVal() PCC_PCL_STORE,
                       (SELECT ARCHIVE_COST_CENTER_CODE
                         FROM CC_DELETION_GUIDS
                        WHERE UPPER(COST_CENTER_CODE) = UPPER(in_COST_CENTER)) ARCHIVE_COST_CENTER_CODE,
                       CASE WHEN COUNTRY_CODE='CAN' AND STD_COST_IDENTIFIER IS NULL THEN '08' ELSE STD_COST_IDENTIFIER END AS STD_COST_IDENTIFIER,
                       CASE WHEN COUNTRY_CODE='CAN' AND PRIM_COST_IDENTIFIER IS NULL THEN '08' ELSE PRIM_COST_IDENTIFIER END AS PRIM_COST_IDENTIFIER
                      FROM COST_CENTER
                 WHERE UPPER(COST_CENTER_CODE) = UPPER(in_COST_CENTER);
    END COST_CENTER_S_SP;


PROCEDURE EMP_DATA_S_SP (in_EMPLOYEE_NUMBER IN EMP_DATA.EMPLOYEE_NUMBER%TYPE
                            ,out_EMP_DATA_REF_CUR OUT REF_CURSOR)
/******************************************************************************
    EMP_DATA_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the EMP_DATA table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_EMP_DATA_REF_CUR FOR
              
              SELECT * 
              FROM EMP_DATA
              WHERE employee_number = in_EMPLOYEE_NUMBER;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_S_SP, ' || ' ' ||
             'EMPLOYEE_NUMBER is ' || in_EMPLOYEE_NUMBER || '; ' || v_errm);
                     
    END EMP_DATA_S_SP;


PROCEDURE HIERARCHY_DESCRIPTION_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE
                        , in_HRCHY_HDR_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
             , out_HIERARCHY_DESCRIPT_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    HIERARCHY_DESCRIPTION_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the HIERARCH_DESCRIPTION table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_HIERARCHY_DESCRIPT_REF_CUR FOR
              
              SELECT HRCHY_HDR_NAME
                ,HRCHY_HDR_LVL_NBR
                ,HRCHY_HDR_LVL_DESC
                --,xmltype.getStringVal(UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                ,extract(UPPER_LVL_VER_VALUE,'/attributes').getStringVal() UPPER_LVL_VER_VALUE
                ,HRCHY_GLOBAL_LVL_NBR
                ,LVL_VALUE_SIZE 
              FROM HIERARCHY_DESCRIPTION
              WHERE upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
                AND hrchy_hdr_lvl_nbr     = in_HRCHY_HDR_lvl_nbr ;
                   
  EXCEPTION
  
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_DESCRIPTION_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_HDR_LVL_NBR is '  ||  in_HRCHY_HDR_LVL_NBR || '; ' || v_errm);
                     
    END HIERARCHY_DESCRIPTION_S_SP;


PROCEDURE HIERARCHY_DETAIL_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
          ,in_HRCHY_DTL_LEVEL         HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
          ,in_HRCHY_DTL_PREV_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
          ,in_HRCHY_DTL_CURR_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
          ,in_HRCHY_DTL_NEXT_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE
          ,in_HRCHY_DTL_EFF_DATE      HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE                  
             , out_HIERARCHY_DETAIL_REF_CUR OUT REF_CURSOR)
/******************************************************************************
    HIERARCHY_DETAIL_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the HIERARCH_DETAIL table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_HIERARCHY_DETAIL_REF_CUR FOR
              
              SELECT * 
              FROM HIERARCHY_DETAIL
              WHERE upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
                AND hrchy_dtl_level        = in_HRCHY_DTL_LEVEL
          AND hrchy_dtl_prev_lvl_val = in_HRCHY_DTL_PREV_LVL_VAL
          AND hrchy_dtl_curr_lvl_val = in_HRCHY_DTL_CURR_LVL_VAL
          AND hrchy_dtl_next_lvl_val = in_HRCHY_DTL_NEXT_LVL_VAL
          AND hrchy_dtl_eff_date     = in_HRCHY_DTL_EFF_DATE;
                   
  EXCEPTION
  
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_DETAIL_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_DTL_LEVEL is '  ||  in_HRCHY_DTL_LEVEL || ';  ' ||
             'HRCHY_DTL_PREV_LVL_VAL is '  ||  in_HRCHY_DTL_PREV_LVL_VAL || ';  ' ||
             'HRCHY_DTL_CURR_LVL_VAL is '  ||  in_HRCHY_DTL_CURR_LVL_VAL || ';  ' ||
             'HRCHY_DTL_NEXT_LVL_VAL is '  ||  in_HRCHY_DTL_NEXT_LVL_VAL || ';  ' ||
             'HRCHY_DTL_EFF_DATE is '      ||  in_HRCHY_DTL_EFF_DATE || '; ' || v_errm);
                     
    END HIERARCHY_DETAIL_S_SP;


PROCEDURE HIERARCHY_HEADER_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE
              , out_HIERARCHY_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    HIERARCHY_HEADER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the HIERARCH_HEADER table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_HIERARCHY_HEADER_REF_CUR FOR
              
              SELECT * 
              FROM HIERARCHY_HEADER
              WHERE upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME); 
             
                   
  EXCEPTION
  
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_HEADER_S_SP, ' || ' ' ||
             'HRCHY_HDR_NAME is ' || in_hrchy_hdr_name || '; ' || v_errm);
                     
    END HIERARCHY_HEADER_S_SP;


 
PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER                 IN  MARKETING.COST_CENTER_CODE%TYPE
                          , IN_MARKETING_TYPE              IN  MARKETING.MARKETING_TYPE%TYPE                          
                          , OUT_MARKETING_REF_CUR          IN  OUT sys_refcursor)
/*******************************************************************************
    MARKETING_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the MARKETING table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
changed : 05/29/2013 BLR CCNA-408 add marketing fields via record expansion. 
          Fields are mkt_brand, mkt_mission, mkt_sales_floor_size,
          mkt_warehouse_size, & mkt_real_estate_setting.
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        AS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;
MKT_STATS varchar2(07);
MKT_ROW    MARKETING%ROWTYPE;

    BEGIN

          OPEN OUT_MARKETING_REF_CUR FOR
              
              SELECT  S.*  
               ,( S.mkt_brand || S.mkt_mission || S.mkt_sales_floor_size || 
                  S.mkt_warehouse_size || S.mkt_real_estate_setting) AS MKT_STATS
               FROM MARKETING S              
              WHERE UPPER(S.cost_center_code)        = UPPER(in_cost_center)         
         AND  S.marketing_type                 = nvl(in_marketing_type, marketing_type) 
               AND (S.effective_date                <=  v_curr_date  
               AND (S.expiration_date IS NULL OR expiration_date  >=  v_curr_date)
  );
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code,     'MARKETING_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER   || ';  ' ||
             'MARKETING_TYPE is '   || in_MARKETING_TYPE || '; ' || v_errm);
                     
    END MARKETING_S_SP;

PROCEDURE OTHER_S_SP (in_COST_CENTER IN OTHER.COST_CENTER_CODE%TYPE
                            ,out_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    OTHER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the OTHER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_OTHER_REF_CUR FOR
              
              SELECT * 
              FROM OTHER
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
    END OTHER_S_SP;



PROCEDURE PHONE_S_SP (in_COST_CENTER IN PHONE.COST_CENTER_CODE%TYPE
                            ,out_PHONE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    PHONE_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the PHONE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_PHONE_REF_CUR FOR
              
              SELECT * 
              FROM PHONE
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
    END PHONE_S_SP;


PROCEDURE POLLING_S_SP (in_COST_CENTER IN POLLING.COST_CENTER_CODE%TYPE
                    ,in_POLLING_STATUS_CODE IN OUT POLLING.POLLING_STATUS_CODE%TYPE
                    , out_POLLING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    POLLING_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the polling table.  

created : 11/15/2010 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);


    BEGIN
         
      SELECT POLLING_STATUS_CODE INTO in_POLLING_STATUS_CODE
        FROM POLLING A
             WHERE UPPER(A.cost_center_code) = UPPER(in_COST_CENTER)
                AND A.polling_status_code    = NVL(in_POLLING_STATUS_CODE,polling_status_code)
                AND current_flag = 'Y';
    
    
          OPEN out_POLLING_REF_CUR FOR
              
              SELECT * 
              FROM POLLING A
              WHERE UPPER(A.cost_center_code) = UPPER(in_COST_CENTER)
                AND A.polling_status_code     = NVL(in_POLLING_STATUS_CODE,polling_status_code)
                AND current_flag = 'Y';
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
        'POLLING_S_SP, '        || ' ' ||
        'COST_CENTER_CODE is '     || in_COST_CENTER || ';  ' ||
        'POLLING_STATUS_CODE is '    || in_POLLING_STATUS_CODE || '; ' || v_errm);
                           
    END POLLING_S_SP;
  
PROCEDURE POLLING_DWLD_RSN_HIST_S_SP ( in_cost_center         IN polling_dwld_rsn_hist.cost_center_code%type
                                               , in_polling_status_code IN polling_dwld_rsn_hist.polling_status_code%type
                                               , in_effective_date      IN polling_dwld_rsn_hist.effective_date%type, out_POLLING_DWLD_RSN_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    POLLING_DWLD_RSN_HIST_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the polling_dwld_rsn_hist table.  

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_POLLING_DWLD_RSN_REF_CUR FOR
              
              SELECT * 
              FROM polling_dwld_rsn_hist
              WHERE UPPER(cost_center_code)     = UPPER(in_cost_center)
                AND  polling_status_code        = in_polling_status_code
          AND  effective_date             = in_effective_date  ;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
        'POLLING_DWLD_RSN_HIST_S_SP, '    || ' ' ||
        'COST_CENTER_CODE is '    || in_cost_center || ';  ' ||
        'POLLING_STATUS_CODE is '    || in_polling_status_code || ';  ' ||
    'EFFECTIVE_DATE is '      || in_effective_date || '; ' || v_errm );
                           
    END POLLING_DWLD_RSN_HIST_S_SP;

PROCEDURE REAL_ESTATE_S_SP (in_COST_CENTER IN REAL_ESTATE.COST_CENTER_CODE%TYPE
                            ,out_REAL_ESTATE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    REAL_ESTATE_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the REAL_ESTATE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_REAL_ESTATE_REF_CUR FOR
              
              SELECT * 
              FROM REAL_ESTATE
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'REAL_ESTATE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
    END REAL_ESTATE_S_SP;


PROCEDURE SALES_REP_S_SP  ( IN_GEMS_EMPLOYEE_ID   IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE
                          , OUT_SALES_REP_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    SALES_REP_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the SALES_REP table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

    BEGIN

          OPEN out_SALES_REP_REF_CUR FOR
              
              SELECT * 
              FROM sales_rep
              WHERE gems_employee_id = in_gems_employee_id 
               AND (effective_date  <=  v_curr_date  
               AND (expiration_date IS NULL OR expiration_date  >=  v_curr_date)
                  );
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_S_SP, ' || ' ' ||
             'GEMS_EMPLOYEE_ID is ' || in_GEMS_EMPLOYEE_ID || '; ' || v_errm);
                     
    END SALES_REP_S_SP;


PROCEDURE   STATUS_S_SP ( IN_COST_CENTER     IN  STATUS.COST_CENTER_CODE%TYPE
                        , IN_STATUS_CODE     IN  STATUS.STATUS_CODE%TYPE
                        , OUT_STATUS_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    STATUS_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the STATUS table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

    BEGIN

          OPEN out_STATUS_REF_CUR FOR
              
              SELECT * 
              FROM status
              WHERE UPPER(cost_center_code)  =  UPPER(in_cost_center)  
                AND status_code              =  nvl(in_status_code, status.status_code) 
                AND (effective_date         <=  v_curr_date  
                AND (expiration_date IS NULL OR expiration_date  >=  v_curr_date));
    
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
        'STATUS_S_SP, ' || ' ' ||
        'COST_CENTER_CODE is ' || in_COST_CENTER  || ';  ' ||
        'STATUS_CODE is '      || in_STATUS_CODE || '; ' || v_errm);
                     
    END STATUS_S_SP;


PROCEDURE STORE_S_SP (in_COST_CENTER IN STORE.COST_CENTER_CODE%TYPE
                            ,out_STORE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    STORE_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the STORE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN

          OPEN out_STORE_REF_CUR FOR
              
              SELECT * 
              FROM STORE
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
    END STORE_S_SP;


PROCEDURE TAXWARE_S_SP (in_COST_CENTER IN TAXWARE.COST_CENTER_CODE%TYPE
              ,out_TAXWARE_REF_CUR OUT REF_CURSOR)
/******************************************************************************
    TAXWARE_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the TAXWARE table.  

created : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  
v_code number;
v_errm varchar2(500);

    BEGIN
    

          OPEN out_TAXWARE_REF_CUR FOR
              
              SELECT * 
              FROM TAXWARE
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
    END TAXWARE_S_SP;

PROCEDURE TERMINAL_S_SP ( IN_COST_CENTER_CODE   IN  TERMINAL.COST_CENTER_CODE%TYPE
                        , IN_POLLING_STATUS_CD  IN  TERMINAL.POLLING_STATUS_CODE%TYPE
                        , IN_TERMINAL_NUMBER    IN  TERMINAL.TERMINAL_NUMBER%TYPE
                        , OUT_TERMINAL_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
    TERMINAL_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the TERMINAL  table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
        : 04/02/2015 dxv848 modified the logic to display the expired terminals too.
*******************************************************************************/
        IS                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500); 
  V_CURR_DATE DATE := SYSDATE;
    
    BEGIN
     
          OPEN OUT_TERMINAL_REF_CUR FOR
              
              SELECT * 
              FROM TERMINAL
              WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
                AND  POLLING_STATUS_CODE    = IN_POLLING_STATUS_CD  
          AND  TERMINAL_NUMBER        = NVL(in_TERMINAL_NUMBER, TERMINAL.TERMINAL_NUMBER) 
          AND (effective_date        <=  v_curr_date);  


  EXCEPTION
     WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM, 1, 200);
        errpkg.raise_err(v_code, 'TERMINAL_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center_code  || ';  ' ||
             'POLLING STATUS CODE is '  || in_polling_status_cd || ';  ' ||
             'TERMINAL NUMBER is '      || in_terminal_number 
             || '; ' || v_errm);

              
    END  TERMINAL_S_SP;


PROCEDURE TERRITORY_S_SP ( in_terr_cc TERRITORY.COST_CENTER_CODE%TYPE            
                                     ,out_TERRITORY_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
    TERRITORY_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the TERRITORY table.  

created : 03/22/2012 BLR CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure 
              05/02/2013 kdp corrected query.    
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/

      IS                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    


    BEGIN

          OPEN out_TERRITORY_REF_CUR FOR
              
              SELECT * 
              FROM TERRITORY
              WHERE UPPER(cost_center_code) = UPPER(in_TERR_cc);

  EXCEPTION
     WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM, 1, 200);
         errpkg.raise_err(v_code, 'TERRITORY_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_TERR_CC || ';  ' || '; ' || v_errm);
             
    END;-- TERRITORY_S_SP;


PROCEDURE  TYPE_S_SP ( 
           IN_COST_CENTER   IN TYPE.COST_CENTER_CODE%TYPE 
          ,IN_TYPE_CODE     IN TYPE.TYPE_CODE%TYPE
          ,OUT_TYPE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
    TYPE_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the TYPE table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
        IS                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    
  v_curr_date date := sysdate;

    BEGIN

          OPEN out_Type_REF_CUR FOR
              
              SELECT * 
              FROM type
              WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER)  
          AND  type_code              = nvl(in_type_code, type.type_code)
                AND (effective_date        <=  v_curr_date  
                AND (expiration_date IS NULL OR expiration_date  >=  v_curr_date)
                  );

  EXCEPTION
     WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM, 1, 200);
    errpkg.raise_err(v_code, 'TYPE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'TYPE CODE is ' || in_TYPE_CODE || '; ' || v_errm);    
              
    END;-- TYPE_S_SP;

/*++++++++++++++++++++++++
INSERTS (ADDS)
+++++++++++++++++++++++*/


PROCEDURE ADDRESS_CAN_I_SP ( 
/*******************************************************************************
    ADDRESS_CAN_I_SP

    This procedure is intended to Insert new Canadian address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/27/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 08/18/2015 nxk927 CCN Project Team...
          added function to pass the previos address table to expire if the country code changed
modified: 08/26/2015 jxc517 CCN Project....
          hard code table name like all other tables, if this ADDRESS_LOOK_UP_FNC call returns NULL
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME     IN VARCHAR2
,in_ROW_DATE       IN DATE
,in_Row_data       IN VARCHAR2--sys.xmltype
)
 IS 
 v_code            number;
 v_errm            varchar2(500);
 v_address_can_row ADDRESS_CAN%ROWTYPE;
 V_PREV_TABLE      VARCHAR2(20); 
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_xml_frag        clob;
 v_count           integer := 1;
 
BEGIN


--  LOOP Once for each occurrence of <ADDRESS_CAN> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_CAN' || '[' || V_COUNT || ']') = 1 LOOP
    
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_CAN' || '[' || V_COUNT || ']').getCLOBVal();
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_CAN_ROWTYPE_SP ( 
                     in_COST_CENTER           
                    ,in_ADDRESS_TYPE          
                    ,in_EFFECTIVE_DATE        
                    ,in_TABLE_NAME            
                    ,in_ROW_DATE             
                    ,v_xml_frag--in_Row_data             
                    ,v_ADDRESS_CAN_row        
                    );
--
--  Expire currently active ADDRESS_CAN Record before insert --
     V_PREV_TABLE := COMMON_TOOLS.ADDRESS_LOOK_UP_FNC(v_address_can_row.COST_CENTER_CODE);
     COMMON_TOOLS.EXPIRE_DATA_SP (NVL(V_PREV_TABLE, 'ADDRESS_CAN')
                                  ,v_address_can_row.COST_CENTER_CODE
                                  , v_address_can_row.EFFECTIVE_DATE
                                  , v_address_can_row.ADDRESS_TYPE);
--
  --Insert new ADDRESS_OTHER row --
    BEGIN
      --v_address_can_row.EFFECTIVE_DATE := trunc(sysdate);
      INSERT INTO ADDRESS_CAN VALUES v_address_can_row ;    
                    EXCEPTION
                       WHEN dup_val_on_index THEN
                            BEGIN
                                UPDATE ADDRESS_CAN SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_CAN_row.EXPIRATION_DATE
                                    , ADDRESS_LINE_1 = v_ADDRESS_CAN_row.ADDRESS_LINE_1
                                    , ADDRESS_LINE_2 = v_ADDRESS_CAN_row.ADDRESS_LINE_2
                                    , ADDRESS_LINE_3 = v_ADDRESS_CAN_row.ADDRESS_LINE_3
                                    , CITY = v_ADDRESS_CAN_row.CITY
                                    , PROVINCE_CODE = v_ADDRESS_CAN_row.PROVINCE_CODE
                                    , POSTAL_CODE = v_ADDRESS_CAN_row.POSTAL_CODE
                                    , VALID_ADDRESS = v_ADDRESS_CAN_row.VALID_ADDRESS
                                    , COUNTRY_CODE = v_ADDRESS_CAN_row.COUNTRY_CODE
                                WHERE 
                                    UPPER(COST_CENTER_CODE) = UPPER(v_ADDRESS_CAN_row.COST_CENTER_CODE)
                                      AND ADDRESS_TYPE      = v_ADDRESS_CAN_row.ADDRESS_TYPE
                                      AND EFFECTIVE_DATE    = v_ADDRESS_CAN_row.EFFECTIVE_DATE;
                  
                                EXCEPTION 
                                 WHEN OTHERS THEN 
                                     v_code  := SQLCODE;
                                     v_errm  := substr(SQLERRM,1,200);
                                     errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
                                     v_errm || ';  ' ||
                                     'ADDRESS CAN Update Error' );
                               END;
                               
                    END;  
        V_COUNT := V_COUNT + 1;              
      END LOOP;
        
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_CAN_I_SP;


PROCEDURE ADDRESS_MEX_I_SP ( 
/******************************************************************************
    ADDRESS_MEX_I_SP

    This procedure is intended to Insert new Mexico address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 10/02/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure 
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 08/18/2015 nxk927 CCN Project Team...
          added function to pass the previos address table to expire if the country code changed
modified: 08/26/2015 jxc517 CCN Project....
          hard code table name like all other tables, if this ADDRESS_LOOK_UP_FNC call returns NULL
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME     IN VARCHAR2
,in_ROW_DATE       IN DATE
,in_Row_data       IN varchar2 --sys.xmltype
)
 IS 
 v_code            number;
 v_errm            varchar2(500);
 v_address_mex_row ADDRESS_MEX%ROWTYPE;
 V_PREV_TABLE      VARCHAR2(20);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_xml_frag        clob;
 v_count           integer := 1;

BEGIN


--  LOOP Once for each occurrence of <ADDRESS_MEX> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_MEX' || '[' || V_COUNT || ']') = 1 LOOP
    
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_MEX' || '[' || V_COUNT || ']').getCLOBVal();
    
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_MEX_ROWTYPE_SP (
                     in_COST_CENTER           
                    ,in_ADDRESS_TYPE          
                    ,in_EFFECTIVE_DATE        
                    ,in_TABLE_NAME            
                    ,in_ROW_DATE             
                    ,v_xml_frag--in_Row_data             
                    ,v_ADDRESS_MEX_row        
                    );
--
--  Expire currently active ADDRESS_CAN Record before insert --
    V_PREV_TABLE := COMMON_TOOLS.ADDRESS_LOOK_UP_FNC(v_address_mex_row.COST_CENTER_CODE);
    
    COMMON_TOOLS.EXPIRE_DATA_SP (NVL(V_PREV_TABLE, 'ADDRESS_MEX')
                                 ,v_address_mex_row.COST_CENTER_CODE
                                 ,v_address_mex_row.EFFECTIVE_DATE
                                 ,v_address_mex_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      --v_address_mex_row.EFFECTIVE_DATE := trunc(sysdate);
      INSERT INTO ADDRESS_MEX VALUES v_address_mex_row;    
                                        
                    EXCEPTION
                       WHEN dup_val_on_index THEN
                            BEGIN
                                UPDATE ADDRESS_MEX SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_MEX_row.EXPIRATION_DATE
                                    , ADDRESS_LINE_1 = v_ADDRESS_MEX_row.ADDRESS_LINE_1
                                    , ADDRESS_LINE_2 = v_ADDRESS_MEX_row.ADDRESS_LINE_2
                                    , ADDRESS_LINE_3 = v_ADDRESS_MEX_row.ADDRESS_LINE_3
                                    , CITY = v_ADDRESS_MEX_row.CITY
                                    , PROVINCE_CODE = v_ADDRESS_MEX_row.PROVINCE_CODE
                                    , POSTAL_CODE = v_ADDRESS_MEX_row.POSTAL_CODE
                                    , VALID_ADDRESS = v_ADDRESS_MEX_row.VALID_ADDRESS
                                    , COUNTRY_CODE = v_ADDRESS_MEX_row.COUNTRY_CODE
                                WHERE 
                                    UPPER(COST_CENTER_CODE) = UPPER(v_ADDRESS_MEX_row.COST_CENTER_CODE)
                                      AND ADDRESS_TYPE      = v_ADDRESS_MEX_row.ADDRESS_TYPE
                                      AND EFFECTIVE_DATE    = v_ADDRESS_MEX_row.EFFECTIVE_DATE;
                                                                          
                
                                EXCEPTION 
                                 WHEN OTHERS THEN 
                                     v_code  := SQLCODE;
                                     v_errm  := substr(SQLERRM,1,200);
                                     errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
                                     v_errm || ';  ' ||
                                     'ADDRESS MEX Update Error' );
                               END;
                               
                    END;  
        V_COUNT := V_COUNT + 1;              
      END LOOP;
        
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_MEX_I_SP;


PROCEDURE ADDRESS_OTHER_I_SP ( 
/*******************************************************************************
    ADDRESS_OTHER_I_SP

    This procedure is intended to Insert new OTHER address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 08/18/2015 nxk927 CCN Project Team...
          added function to pass the previos address table to expire if the country code changed
modified: 08/26/2015 jxc517 CCN Project....
          hard code table name like all other tables, if this ADDRESS_LOOK_UP_FNC call returns NULL
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME    IN VARCHAR2
,in_ROW_DATE      IN DATE
,in_Row_data      IN varchar2 --sys.xmltype
)
 IS 
 v_code              number;
 v_errm              varchar2(500);
 v_address_other_row ADDRESS_OTHER%ROWTYPE;
 V_PREV_TABLE        VARCHAR2(20);
 v_Row_data          sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_xml_frag          clob;
 v_count             integer := 1;
 
BEGIN


--  LOOP Once for each occurrence of <ADDRESS_OTHER> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_OTHER' || '[' || V_COUNT || ']') = 1 LOOP
    
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_OTHER' || '[' || V_COUNT || ']').getCLOBVal();
    
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_OTHER_ROWTYPE_SP (
                     in_COST_CENTER           
                    ,in_ADDRESS_TYPE          
                    ,in_EFFECTIVE_DATE        
                    ,in_TABLE_NAME            
                    ,in_ROW_DATE             
                    ,v_xml_frag--in_Row_data             
                    ,v_ADDRESS_OTHER_row        
                    );
--
--  Expire currently active ADDRESS_OTHER Record before insert --
     V_PREV_TABLE := COMMON_TOOLS.ADDRESS_LOOK_UP_FNC(v_address_other_row.COST_CENTER_CODE);
     COMMON_TOOLS.EXPIRE_DATA_SP (NVL(V_PREV_TABLE, 'ADDRESS_OTHER')
                                 ,v_address_other_row.COST_CENTER_CODE
                                 ,v_address_other_row.EFFECTIVE_DATE
                                 ,v_address_other_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      --v_address_other_row.EFFECTIVE_DATE := trunc(sysdate);
      INSERT INTO ADDRESS_OTHER VALUES v_address_other_row;    
                                        
                    EXCEPTION
                       WHEN dup_val_on_index THEN
                            BEGIN
                                UPDATE ADDRESS_OTHER SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_OTHER_row.EXPIRATION_DATE
                                    , ADDRESS_LINE_1 = v_ADDRESS_OTHER_row.ADDRESS_LINE_1
                                    , ADDRESS_LINE_2 = v_ADDRESS_OTHER_row.ADDRESS_LINE_2
                                    , ADDRESS_LINE_3 = v_ADDRESS_OTHER_row.ADDRESS_LINE_3
                                    , CITY = V_ADDRESS_OTHER_ROW.CITY
                                    , PROVINCE_code = v_ADDRESS_OTHER_row.PROVINCE_CODE
                                    , STATE_CODE = v_ADDRESS_OTHER_row.STATE_CODE
                                    , POSTAL_CODE = v_ADDRESS_OTHER_row.POSTAL_CODE
                                    , VALID_ADDRESS = v_ADDRESS_OTHER_row.VALID_ADDRESS
                                    , COUNTRY_CODE = v_ADDRESS_OTHER_row.COUNTRY_CODE
                                WHERE 
                                    UPPER(COST_CENTER_CODE) = UPPER(v_ADDRESS_OTHER_row.COST_CENTER_CODE)
                                      AND ADDRESS_TYPE      = v_ADDRESS_OTHER_row.ADDRESS_TYPE
                                      AND EFFECTIVE_DATE    = v_ADDRESS_OTHER_row.EFFECTIVE_DATE;
                                                                          
                 
                                EXCEPTION 
                                 WHEN OTHERS THEN 
                                     v_code  := SQLCODE;
                                     v_errm  := substr(SQLERRM,1,200);
                                     errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
                                     v_errm || ';  ' ||
                                     'ADDRESS OTHER Update Error' );
                               END;
                               
                    END;  
        V_COUNT := V_COUNT + 1;              
      END LOOP;
        
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_OTHER_I_SP;


PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
    ADDRESS_USA_I_SP

    This procedure is intended to insert new ADDRESS_USA records

    CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
    OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
            : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 kdp upgraded to work with multiple address and updates
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 08/18/2015 nxk927 CCN Project Team...
          added function to pass the previos address table to expire if the country code changed
modified: 08/26/2015 jxc517 CCN Project....
          hard code table name like all other tables, if this ADDRESS_LOOK_UP_FNC call returns NULL
*******************************************************************************/
in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code            number;
 v_errm            varchar2(500);
 v_ADDRESS_USA_row ADDRESS_USA%ROWTYPE; 
 v_sysdate         date := trunc(sysdate);
 V_PREV_TABLE      VARCHAR2(20);

v_Row_data         sys.XMLTYPE := XMLTYPE(in_Row_data);
v_xml_frag         clob;
v_count            integer := 1;

BEGIN

   
--  LOOP Once for each occurrence of <ADDRESS_USA> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']') = 1 LOOP
    
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']').getCLOBVal();
    
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_USA_ROWTYPE_SP (
                     in_COST_CENTER           
                    ,in_ADDRESS_TYPE          
                    ,in_EFFECTIVE_DATE        
                    ,in_TABLE_NAME            
                    ,in_ROW_DATE             
                    ,v_xml_frag--in_Row_data             
                    ,v_ADDRESS_USA_row        
                    );
                
--  Expire currently active ADDRESS_USA Record before insert --

     V_PREV_TABLE := COMMON_TOOLS.ADDRESS_LOOK_UP_FNC(v_address_usa_row.COST_CENTER_CODE);
     COMMON_TOOLS.EXPIRE_DATA_SP (NVL(V_PREV_TABLE, 'ADDRESS_USA')
                                 ,v_address_usa_row.COST_CENTER_CODE
                                 ,v_address_usa_row.EFFECTIVE_DATE
                                 ,v_address_usa_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN         
        --v_address_usa_row.EFFECTIVE_DATE := v_sysdate;      
      INSERT INTO ADDRESS_USA VALUES v_ADDRESS_USA_row;     
                                        
                    EXCEPTION
                       WHEN dup_val_on_index THEN
                            BEGIN
                                UPDATE ADDRESS_USA SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_USA_row.EXPIRATION_DATE
                                    , ADDRESS_LINE_1 = v_ADDRESS_USA_row.ADDRESS_LINE_1
                                    , ADDRESS_LINE_2 = v_ADDRESS_USA_row.ADDRESS_LINE_2
                                    , ADDRESS_LINE_3 = v_ADDRESS_USA_row.ADDRESS_LINE_3
                                    , CITY = v_ADDRESS_USA_row.CITY
                                    , STATE_CODE = v_ADDRESS_USA_row.STATE_CODE
                                    , ZIP_CODE = v_ADDRESS_USA_row.ZIP_CODE
                                    , ZIP_CODE_4 = v_ADDRESS_USA_row.ZIP_CODE_4
                                    , COUNTY = v_ADDRESS_USA_row.COUNTY
                                    , FIPS_CODE = v_ADDRESS_USA_row.FIPS_CODE
                                    , DESTINATION_POINT = v_ADDRESS_USA_row.DESTINATION_POINT
                                    , CHECK_DIGIT = v_ADDRESS_USA_row.CHECK_DIGIT
                                    , VALID_ADDRESS = v_ADDRESS_USA_row.VALID_ADDRESS
                                    , COUNTRY_CODE = v_ADDRESS_USA_row.COUNTRY_CODE
                                WHERE 
                                    UPPER(COST_CENTER_CODE) = UPPER(v_ADDRESS_USA_row.COST_CENTER_CODE)
                                      AND ADDRESS_TYPE      = v_ADDRESS_USA_row.ADDRESS_TYPE
                                      AND EFFECTIVE_DATE    = v_ADDRESS_USA_row.EFFECTIVE_DATE;
                                                                          
                 
                                EXCEPTION 
                                 WHEN OTHERS THEN 
                                     v_code  := SQLCODE;
                                     v_errm  := substr(SQLERRM,1,200);
                                     errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' || v_errm || ';  ' || 'ADDRESS USA Update Error' );
                               END;
                               
                    END;  
        V_COUNT := V_COUNT + 1;              
      END LOOP;
        
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
    
END ADDRESS_USA_I_SP;
 
 
 PROCEDURE ADMINISTRATION_I_SP (
/*******************************************************************************
    ADMINISTRATION_I_SP

    This procedure is intended to Insert new ADMINISTRATION records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/01/2012 mdh CCN Project....
revised :10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_administration_row administration%ROWTYPE;
--
--v_row_value     varchar2(500);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
   ADMINISTRATION_ROWTYPE_SP (
     in_COST_CENTER     
    ,in_TABLE_NAME  
    ,in_ROW_DATE    
    ,in_Row_data    
    ,v_administration_row
    );
   
      
      INSERT INTO ADMINISTRATION VALUES v_administration_row;
      
       
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END ADMINISTRATION_I_SP;                 
                
 PROCEDURE BANK_CARD_I_SP (
/*******************************************************************************
    BANK_CARD_I_SP

    This procedure is intended to Insert new BANK CARD records

    CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
changed : 06/29/2016 jxc517 CCN Project Team....
          update the effective date to SYSDATE if any of the below fields changes from UI
          MERCHANT_ID, QUALITY_CODE, AMEX_SE_ID, DISCOVER_ID, PCI_MERCHANT_ID, PCI_DISCOVER_ID
          If only these fields change, we take SYSDATE
          If only the effective date change with out any change in these fields we take date entered by user
          If date and any of these fields change together, SYSDATE takes precedence rather than user entered date
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_bank_card_row bank_card%ROWTYPE;
 v_bank_card_row_prev bank_card%ROWTYPE;
 v_temp_date     date;
--
--
BEGIN

-- Convert XML to ROWTYPE --
       BANK_CARD_ROWTYPE_SP (
         in_COST_CENTER          
        ,in_POLLING_STATUS_CODE   
        ,in_MERCHANT_ID           
        ,in_EFFECTIVE_DATE 
        ,in_TABLE_NAME  
        ,in_ROW_DATE    
        ,in_Row_data   
        ,v_bank_card_row 
        );

      --We should deactivate the trigger is none of the below fields changes from the previous record
      --AMEX_SE_ID, DISCOVER_ID, QUALITY_CODE, MERCHANT_ID
      BEGIN
         SELECT * INTO v_bank_card_row_prev
           FROM BANK_CARD
          WHERE UPPER(COST_CENTER_CODE) = UPPER(v_bank_card_row.COST_CENTER_CODE)
            AND EXPIRATION_DATE IS NULL
            AND ROWNUM < 2;
      EXCEPTION
         WHEN OTHERS THEN
            v_bank_card_row_prev := NULL;
      END;

      IF v_bank_card_row_prev.COST_CENTER_CODE IS NOT NULL AND 
         (NVL(v_bank_card_row_prev.AMEX_SE_ID,'XXX') = NVL(v_bank_card_row.AMEX_SE_ID,'XXX')
         AND NVL(v_bank_card_row_prev.DISCOVER_ID,'XXX') = NVL(v_bank_card_row.DISCOVER_ID,'XXX')
         AND NVL(v_bank_card_row_prev.QUALITY_CODE,'XXX') = NVL(v_bank_card_row.QUALITY_CODE,'XXX')
         AND NVL(v_bank_card_row_prev.MERCHANT_ID,'XXX') = NVL(v_bank_card_row.MERCHANT_ID,'XXX')) THEN
         TRIGGER_DISABLE_FLAG := 'Y'; 
      END IF;

      --can not club with above condition as PCI changes alone should not trigger back feed
      IF v_bank_card_row_prev.COST_CENTER_CODE IS NOT NULL AND
         (NVL(v_bank_card_row_prev.MERCHANT_ID,'XXX') <> NVL(v_bank_card_row.MERCHANT_ID,'XXX')
         OR NVL(v_bank_card_row_prev.QUALITY_CODE,'XXX') <> NVL(v_bank_card_row.QUALITY_CODE,'XXX')
         OR NVL(v_bank_card_row_prev.AMEX_SE_ID,'XXX') <> NVL(v_bank_card_row.AMEX_SE_ID,'XXX')
         OR NVL(v_bank_card_row_prev.DISCOVER_ID,'XXX') <> NVL(v_bank_card_row.DISCOVER_ID,'XXX')
         OR NVL(v_bank_card_row_prev.PCI_MERCHANT_ID,'XXX') <> NVL(v_bank_card_row.PCI_MERCHANT_ID,'XXX')
         OR NVL(v_bank_card_row_prev.PCI_DISCOVER_ID,'XXX') <> NVL(v_bank_card_row.PCI_DISCOVER_ID,'XXX')) THEN
          v_bank_card_row.EFFECTIVE_DATE := TRUNC(SYSDATE);
      END IF;

--  Expire currently active BANK_CARD Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'BANK_CARD'
         , v_bank_card_row.COST_CENTER_CODE
     , v_bank_card_row.EFFECTIVE_DATE);

--  Insert new BANK_CARD row --  
          --v_bank_card_row.EFFECTIVE_DATE := sysdate;
     
      INSERT INTO BANK_CARD VALUES v_bank_card_row;
        
      TRIGGER_DISABLE_FLAG := NULL; 
      
  EXCEPTION
   WHEN dup_val_on_index THEN
      BEGIN
          v_temp_date := v_BANK_CARD_row.EXPIRATION_DATE;
         v_BANK_CARD_row.EXPIRATION_DATE := NULL;
         UPDATE BANK_CARD SET ROW = v_BANK_CARD_row
          WHERE UPPER(COST_CENTER_CODE) = UPPER(v_BANK_CARD_row.COST_CENTER_CODE)
            AND POLLING_STATUS_CODE     = v_BANK_CARD_row.POLLING_STATUS_CODE
            --AND MERCHANT_ID           = v_BANK_CARD_row.MERCHANT_ID
            AND EFFECTIVE_DATE          = v_BANK_CARD_row.EFFECTIVE_DATE;
         v_BANK_CARD_row.EXPIRATION_DATE := v_temp_date;
         EXCEPTION 
              WHEN OTHERS THEN 
                    v_BANK_CARD_row.EXPIRATION_DATE := v_temp_date;
                    v_code  := SQLCODE;
                    v_errm  := substr(SQLERRM,1,200);
                    errpkg.raise_err(v_code, 'BANK_CARD_I_SP, ' || v_errm || ' ; BANK_CARD Update Error ' );
      END;
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
          , 'BANK_CARD_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
          , v_errm);
        
    
END BANK_CARD_I_SP;                 
                
PROCEDURE BATCH_JOB_I_SP (
/*******************************************************************************
    BATCH_JOB_I_SP

    This procedure is intended to insert new BATCH_JOB records

    BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    IN  batch_job.batch_job_name%type,
in_batch_job_number  IN  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_BATCH_JOB_row BATCH_JOB%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP


      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getstringval()
                                              ,10); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'BATCH_JOB_NAME'                 THEN  v_batch_job_row.batch_job_name              := v_row_value;
            WHEN 'BATCH_JOB_NUMBER'               THEN  v_batch_job_row.batch_job_number            := v_row_value;
            WHEN 'BATCH_JOB_CONDITION'            THEN  v_batch_job_row.batch_job_status         := v_row_value;
--      when 'BATCH_JOB_START_DATE'           then  v_batch_job_row.batch_job_start_date        := v_row_value;
      WHEN 'BATCH_JOB_START_DATE'                THEN  v_batch_job_row.batch_job_start_date            := to_date(v_row_value,'YYYYMMDD');
--      when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
            WHEN 'BATCH_JOB_END_DATE'             THEN  v_batch_job_row.batch_job_end_date          := to_date(v_row_value,'YYYYMMDD');
--            when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
            WHEN 'BATCH_JOB_LAST_RUN_DATE'        THEN  v_batch_job_row.batch_job_last_run_date     := to_date(v_row_value,'YYYYMMDD');
--            when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      INSERT INTO BATCH_JOB VALUES v_BATCH_JOB_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END BATCH_JOB_I_SP;

PROCEDURE CODE_DETAIL_I_SP (
/*******************************************************************************
    CODE_DETAIL_I_SP

    This procedure is intended to insert new CODE_DETAIL records

    CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   IN  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   IN  code_detail.code_header_type%type,
in_code_detail_value  IN  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_CODE_DETAIL_row CODE_DETAIL%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

     IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'CODE_HEADER_NAME'                 THEN  v_code_detail_row.code_header_name              := v_row_value;
            WHEN 'CODE_HEADER_TYPE'                 THEN  v_code_detail_row.code_header_type              := v_row_value;
            WHEN 'CODE_DETAIL_VALUE'                THEN  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
            WHEN 'CODE_DETAIL_DESCRIPTION'          THEN  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
            WHEN 'CODE_DETAIL_EXPIRE_FLAG'          THEN  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
            WHEN 'CODE_DETAIL_EXPIRE_USER'          THEN  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
            WHEN 'CODE_DETAIL_EXPIRE_EFF_DATE'      THEN  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      INSERT INTO CODE_DETAIL VALUES v_CODE_DETAIL_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END CODE_DETAIL_I_SP;

PROCEDURE CODE_HEADER_I_SP (
/*******************************************************************************
    CODE_HEADER_I_SP

    This procedure is intended to insert new CODE_HEADER records

    CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   IN  code_header.code_header_name%type,
in_code_header_type   IN  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_CODE_HEADER_row CODE_HEADER%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'CODE_HEADER_NAME'                 THEN  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
            WHEN 'CODE_HEADER_TYPE'                 THEN  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
            WHEN 'CODE_HEADER_DESCRIPTION'          THEN  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
            WHEN 'CODE_HEADER_EXPIRE_FLAG'          THEN  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
            WHEN 'CODE_HEADER_EXPIRE_USER'          THEN  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
            WHEN 'CODE_HEADER_EXPIRE_EFF_DATE'      THEN  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
            WHEN 'CODE_HEADER_DTL_VAL_SIZE'         THEN  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
            WHEN 'CODE_HEADER_DTL_VAL_DEFAULT'      THEN  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      INSERT INTO CODE_HEADER VALUES v_CODE_HEADER_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END CODE_HEADER_I_SP;

PROCEDURE COST_CENTER_I_SP (
/*******************************************************************************
    COST_CENTER_I_SP

    This procedure is intended to insert new cost center records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
*******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 IS 

v_cost_center_row cost_center%ROWTYPE;
--
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
     COST_CENTER_ROWTYPE_SP (
         in_COST_CENTER  
        ,in_TABLE_NAME  
        ,in_ROW_DATE    
        ,in_Row_data    
        ,v_cost_center_row  
);
v_cost_center_row.GLOBAL_HIERARCHY_IND := 'N';
--
--
-- Insert new COST_CENTER row --      
      INSERT INTO cost_center VALUES v_cost_center_row;
      
      

END COST_CENTER_I_SP;

PROCEDURE EMP_DATA_I_SP (
/*******************************************************************************
    EMP_DATA_I_SP

    This procedure is intended to insert new EMP_DATA records

    EMPLOYEE_NUMBER - Employee Number than changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  IN  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_EMP_DATA_row EMP_DATA%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'NATIONAL_IDENTIFIER'              THEN  v_emp_data_row.national_identifier           := v_row_value;
            WHEN 'RECORD_TYPE'                      THEN  v_EMP_DATA_row.record_type                   := v_row_value;
            WHEN 'COMPANY_CODE'                     THEN  v_emp_data_row.COMPANY_CODE                  := v_row_value;
            WHEN 'FILE_NUMBER'                      THEN  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
            WHEN 'EMPLOYEE_NAME'                    THEN  v_emp_data_row.employee_name                 := v_row_value;
            WHEN 'LAST_NAME'                        THEN  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
            WHEN 'FIRST_NAME'                       THEN  v_emp_data_row.FIRST_NAME                    := v_row_value;
            WHEN 'MIDDLE_INITIAL'                   THEN  v_emp_data_row.middle_initial                := v_row_value;
            WHEN 'HOME_ADDRESS_LINE1'               THEN  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
            WHEN 'HOME_ADDRESS_LINE2'               THEN  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
            WHEN 'HOME_CITY_STATE'                  THEN  v_emp_data_row.home_city_state               := v_row_value;
            WHEN 'HOME_CITY'                        THEN  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
            WHEN 'HOME_STATE'                       THEN  v_emp_data_row.HOME_STATE                    := v_row_value;
            WHEN 'HOME_POSTAL_CODE'                 THEN  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
            WHEN 'HOME_PHONE'                       THEN  v_emp_data_row.home_phone                    := v_row_value;
            WHEN 'SEX'                              THEN  v_EMP_DATA_row.SEX                           := v_row_value;
            WHEN 'EMP_PAYROLL_STATUS'               THEN  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
            WHEN 'EMP_ASSIGNMENT_STATUS'            THEN  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
            WHEN 'EMP_DIVISION'                     THEN  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
            WHEN 'ACCOUNT_NUMBER'                   THEN  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
            WHEN 'FLSA_CODE'                        THEN  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
            WHEN 'EMPLOYEE_NUMBER'                  THEN  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
            WHEN 'PAYROLL_EMP_RPT_SEQ_ID'           THEN  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      INSERT INTO EMP_DATA VALUES v_EMP_DATA_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END EMP_DATA_I_SP;

PROCEDURE MARKETING_I_SP (
/*******************************************************************************
    MARKETING_I_SP

    This procedure is intended to insert new MARKETING records

    CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          IN  marketing.cost_center_code%type,
in_marketing_type       IN  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%ROWTYPE;
 v_sysdate date := trunc(sysdate);
 v_temp_date date;
--
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
       MARKETING_ROWTYPE_SP (
     in_cost_center          
    ,in_marketing_type  
    ,in_TABLE_NAME           
    ,in_ROW_DATE              
    ,in_Row_data              
    ,v_MARKETING_row   
    );
--
--
--  Expire currently active MARKETING Record before insert --

      COMMON_TOOLS.EXPIRE_DATA_SP (
      'MARKETING'
         , v_marketing_row.COST_CENTER_CODE
     , v_marketing_row.EFFECTIVE_DATE);
--
--  Insert new MARKETING row -- 
      --v_marketing_row.EFFECTIVE_DATE := v_sysdate;
      INSERT INTO MARKETING VALUES v_MARKETING_row;
      
  EXCEPTION
   WHEN dup_val_on_index THEN
      BEGIN
          v_temp_date := v_MARKETING_row.EXPIRATION_DATE;
         v_MARKETING_row.EXPIRATION_DATE := NULL;
         UPDATE MARKETING SET ROW = v_MARKETING_row
          WHERE UPPER(COST_CENTER_CODE) = UPPER(v_MARKETING_row.COST_CENTER_CODE)
            AND CATEGORY                = v_MARKETING_row.CATEGORY
            AND EFFECTIVE_DATE          = v_MARKETING_row.EFFECTIVE_DATE;
         v_MARKETING_row.EXPIRATION_DATE := v_temp_date;
         EXCEPTION 
              WHEN OTHERS THEN 
                    v_MARKETING_row.EXPIRATION_DATE := v_temp_date;
                    v_code  := SQLCODE;
                    v_errm  := substr(SQLERRM,1,200);
                    errpkg.raise_err(v_code, 'MARKETING_I_SP, ' || v_errm || ' ; MARKETING Update Error ' );
      END;
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
END MARKETING_I_SP;

PROCEDURE OTHER_I_SP (
/*******************************************************************************
    OTHER_I_SP

    This procedure is intended to insert new OTHER records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
     in_COST_CENTER          
    ,v_OTHER_row
    ,in_TABLE_NAME           
    ,in_ROW_DATE            
    ,in_Row_data             
     );

      INSERT INTO OTHER VALUES v_OTHER_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END OTHER_I_SP;                 
                

PROCEDURE PHONE_I_SP (
/*******************************************************************************
    PHONE_I_SP

    This procedure is intended to insert new PHONE records

    CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
    OracleTableName -Table name for row -variable 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    IN  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_PHONE_row PHONE%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
    in_COST_CENTER           
    ,in_phone_number_type     
    ,v_PHONE_row              
    ,in_TABLE_NAME          
    ,in_ROW_DATE             
    ,in_Row_data              
    ); 

      
      INSERT INTO PHONE VALUES v_PHONE_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END PHONE_I_SP;
               

PROCEDURE POLLING_I_SP (
/*******************************************************************************
    POLLING_I_SP

    This procedure is intended to insert new POLLING records

    CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
revised    : 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
            : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/11/2013 kdp added insert row flag to identify currnet polling row
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
        : 02/18/2015 SXT410 Modified code to capture the Previous row data and 
          whose current polling status code is Expired before inserting new polling status code.
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_POLLING_row         OUT POLLING%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_polling_row   polling%ROWTYPE;
 

--
--
BEGIN 
--
-- Convert XML to ROWTYPE --
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
        
                   );                   
      SAVEPOINT POLL;
      
      POLLING_HST_I_SP ( OUT_POLLING_ROW );               
       
      out_POLLING_row.current_flag := 'Y';
      
      out_POLLING_row.EFFECTIVE_DATE := sysdate;
      
      EXPIRE_POLLING_DATA_SP ( out_POLLING_row );
          
      INSERT INTO POLLING VALUES OUT_POLLING_ROW;               
              
  EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK TO POLL;
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
    
END POLLING_I_SP;

PROCEDURE EXPIRE_POLLING_DATA_SP
( IN_POLLING_ROW POLLING%ROWTYPE 
/*******************************************************************************
    EXPIRE_POLLING_DATA_SP
    
    This procedure is intended to expire Previous row of data based on 
    Cost_center_code and Polling_status_code.

created : 02/18/2015 SXT410 CCN Project....
revised : 
    
*******************************************************************************/
)
IS 
BEGIN
    UPDATE POLLING
       SET EXPIRATION_DATE = SYSDATE, 
           CURRENT_FLAG    = 'N'
     WHERE CURRENT_FLAG    = 'Y'
       AND UPPER(COST_CENTER_CODE) = UPPER(IN_POLLING_ROW.COST_CENTER_CODE)
       AND POLLING_STATUS_CODE     <> IN_POLLING_ROW.POLLING_STATUS_CODE;

EXCEPTION
        WHEN OTHERS THEN
            NULL;
END EXPIRE_POLLING_DATA_SP;

PROCEDURE POLLING_DWLD_RSN_HIST_I_SP (
/*******************************************************************************
    POLLING_DWLD_RSN_HIST_I_SP

    This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

    CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          IN polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  IN polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       IN polling_dwld_rsn_hist.effective_date%type,

in_table_name IN varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%ROWTYPE;
v_row_value     varchar2(500);
--
/*

*/

BEGIN

/* 
*/


      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    END IF;

          v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'     THEN  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
            WHEN 'POLLING_STATUS_CODE'  THEN  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
            WHEN 'EFFECTIVE_DATE'       THEN  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'DOWNLOAD_DATE'        THEN  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'POS_DOWNLOAD_REASON'  THEN  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
      ELSE
            NULL;        
        END CASE;           

  ELSE
     NULL ;
  END IF;

 END LOOP ;
      
      INSERT INTO POLLING_DWLD_RSN_HIST VALUES v_polling_dwld_rsn_hist_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
          , 'POLLING_DWLD_RSN_HIST_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
          , v_errm);
        
    
END POLLING_DWLD_RSN_HIST_I_SP;

PROCEDURE POLLING_HST_I_SP
( 
/*******************************************************************************
    POLLING_HST_I_SP

    This procedure is intended to insert previous POLLING record into Polling_hst 
    table for Historical purpose.

created : 02/18/2015 SXT410 CCN Project....
revised : 
*******************************************************************************/
IN_POLLING_ROW IN POLLING%ROWTYPE
) 
IS
BEGIN
    INSERT INTO POLLING_HST
    SELECT COST_CENTER_CODE,
           POLLING_STATUS_CODE,
           SYSDATE,
           MULTICAST_IND,
           TIME_ZONE,
           POLLING_IND,
           NEXT_DOWNLOAD_BLOCK_COUNT,
           CURRENT_FLAG,
           EFFECTIVE_DATE,
           SYSDATE --EXPIRATION_DATE
      FROM POLLING
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_POLLING_ROW.COST_CENTER_CODE)
       AND CURRENT_FLAG = 'Y';  
END POLLING_HST_I_SP;

 
PROCEDURE REAL_ESTATE_I_SP (
/******************************************************************************
    REAL_ESTATE_I_SP

    This procedure is intended to insert new REAL_ESTATE records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_real_estate_row     OUT real_estate%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      INSERT INTO REAL_ESTATE VALUES out_REAL_ESTATE_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END REAL_ESTATE_I_SP;


PROCEDURE SALES_REP_I_SP (
/*****************************************************************************
    SALES_REP_I_SP

    This procedure is intended to insert new SALES_REP records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_sales_rep_row       OUT sales_rep%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWYTPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      INSERT INTO sales_rep VALUES out_sales_rep_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
END SALES_REP_I_SP;


PROCEDURE STATUS_I_SP (
/*****************************************************************************
    STATUS_I_SP

    This procedure is intended to insert new STATUS records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
        : 12/20/2012 mdh - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_status_row     OUT status%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_temp_date     date;

v_skip_flag       BOOLEAN := FALSE;
v_status_row_prev status%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  STATUS_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_status_row 
                   );

      BEGIN
         SELECT * INTO v_status_row_prev
           FROM STATUS
          WHERE UPPER(COST_CENTER_CODE) = UPPER(out_status_row.COST_CENTER_CODE)
            AND EXPIRATION_DATE  IS NULL
            AND ROWNUM < 2;
      EXCEPTION
         WHEN OTHERS THEN
            v_status_row_prev := NULL;
      END;

      IF v_status_row_prev.COST_CENTER_CODE IS NOT NULL AND 
         (v_status_row_prev.STATUS_CODE = out_status_row.STATUS_CODE 
          AND v_status_row_prev.EFFECTIVE_DATE = out_status_row.EFFECTIVE_DATE) THEN
          v_skip_flag := TRUE;
      END IF;

      IF NOT v_skip_flag THEN

            -- update the move_date to effective date for the cost center for the status code of RELO. COMP. CC
            IF OUT_STATUS_ROW.STATUS_CODE = '3' THEN
               UPDATE COST_CENTER
                  SET MOVE_DATE               = OUT_STATUS_ROW.EFFECTIVE_DATE
                WHERE UPPER(COST_CENTER_CODE) = UPPER(OUT_STATUS_ROW.COST_CENTER_CODE);
            END IF;

            --
            --  Expire currently active STATUS Record before insert --
            COMMON_TOOLS.EXPIRE_DATA_SP (
      'STATUS'
         , out_status_row.COST_CENTER_CODE
     , out_status_row.EFFECTIVE_DATE);
            --
            --  Insert new STATUS row --                  
            --out_status_row.EFFECTIVE_DATE := trunc(sysdate);
            INSERT INTO status VALUES out_status_row;
      END IF;

  EXCEPTION
   WHEN dup_val_on_index THEN
      BEGIN
          v_temp_date := out_status_row.EXPIRATION_DATE;
         out_status_row.EXPIRATION_DATE := NULL;
         UPDATE STATUS SET ROW = out_status_row
          WHERE UPPER(COST_CENTER_CODE) = UPPER(OUT_STATUS_ROW.COST_CENTER_CODE)
            AND STATUS_CODE             = OUT_STATUS_ROW.STATUS_CODE
            AND EFFECTIVE_DATE          = OUT_STATUS_ROW.EFFECTIVE_DATE;
 
          out_status_row.EXPIRATION_DATE := v_temp_date;
         EXCEPTION 
              WHEN OTHERS THEN 
                    out_status_row.EXPIRATION_DATE := v_temp_date;
                    v_code  := SQLCODE;
                    v_errm  := substr(SQLERRM,1,200);
                    errpkg.raise_err(v_code, 'STATUS_I_SP, ' || v_errm || ' ; STATUS Update Error ' );
      END;
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
END STATUS_I_SP;
        

PROCEDURE STORE_I_SP (
/*****************************************************************************
    STORE_I_SP

    This procedure is intended to insert new STORE records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_store_row     OUT store%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_store_row 
                   );
                  
      INSERT INTO store VALUES out_store_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
 
 END STORE_I_SP;
 

PROCEDURE TAXWARE_I_SP (
/*****************************************************************************
    TAXWARE_I_SP

    This procedure is intended to insert new TAXWARE records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_taxware_row     OUT taxware%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_taxware_row 
                   );
                  
      INSERT INTO taxware VALUES out_taxware_row;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
             
    END TAXWARE_I_SP;
  

PROCEDURE TERMINAL_I_SP (
/*****************************************************************************
    TERMINAL_I_SP

    This procedure is intended to insert new terminal records

    TERMINAL - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed : 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
changed : 06/22/2016 jxc517 CCN Project Team....
          update the effective date to SYSDATE if any of the below fields changes from UI
          PCI_TERMINAL_ID, PCI_VALUE_LINK_MID, PCI_VAL_LINK_ALT_MID
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_terminal_row     OUT terminal%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_temp_date     date;
 V_TERMINAL_COUNT NUMBER := 0;
 v_terminal_row     terminal%ROWTYPE;
 v_temp_eff_date    DATE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );

   --Get the current terminal record, if there is one
   --If not just do not do anything and continue with the existing process
   --as for new records insert ther will be nothing
   BEGIN
       SELECT *
         INTO v_terminal_row
         FROM TERMINAL
        WHERE UPPER(COST_CENTER_CODE) = UPPER(out_terminal_row.COST_CENTER_CODE)
          AND POLLING_STATUS_CODE     = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
          AND TERMINAL_NUMBER         = OUT_TERMINAL_ROW.TERMINAL_NUMBER
          AND EFFECTIVE_DATE          = out_terminal_row.EFFECTIVE_DATE;
   EXCEPTION
       WHEN OTHERS THEN NULL;
   END;

--  Expire currently active TERMINAL Record before insert --
         UPDATE TERMINAL
            SET  ROW = out_terminal_row
          WHERE UPPER(COST_CENTER_CODE) = UPPER(out_terminal_row.COST_CENTER_CODE)
            AND POLLING_STATUS_CODE     = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
            AND TERMINAL_NUMBER         = OUT_TERMINAL_ROW.TERMINAL_NUMBER
            AND EFFECTIVE_DATE          = OUT_TERMINAL_ROW.EFFECTIVE_DATE;
      IF out_terminal_row.EXPIRATION_DATE IS NOT NULL THEN
          out_terminal_row.EFFECTIVE_DATE := out_terminal_row.EXPIRATION_DATE;
          out_terminal_row.EXPIRATION_DATE := NULL;
      ELSE
         INSERT INTO terminal VALUES out_terminal_row; 

         --Below query checks if this is the first insert for this terminal number
         SELECT COUNT(*)
           INTO V_TERMINAL_COUNT
           FROM TERMINAL
          WHERE UPPER(COST_CENTER_CODE) =  UPPER(out_terminal_row.cost_center_code)
            AND TERMINAL_NUMBER         = out_terminal_row.terminal_number;

         --Should not send email if the terminal is not newly added but came here as part of polling status change
         IF V_TERMINAL_COUNT = 1 THEN 
             MAIL_PKG.SEND_MAIL('ADD_TERMINAL',
                                out_terminal_row.terminal_number,
                                out_terminal_row.cost_center_code);
         END IF;
      END IF;
      
      
       EXCEPTION
   WHEN dup_val_on_index THEN
      BEGIN
         v_temp_date := out_terminal_row.EXPIRATION_DATE;
         out_terminal_row.EXPIRATION_DATE := NULL;

         --assigning it to temporary variable for subsequent query purpose
         v_temp_eff_date := out_terminal_row.EFFECTIVE_DATE;
         --condition to check the change of below 3 field values before updating the effective date to sysdate
         --if not, the effective date remains as what is being sent from UI
         IF NVL(v_terminal_row.PCI_TERMINAL_ID, 'XXX') <> NVL(OUT_TERMINAL_ROW.PCI_TERMINAL_ID, 'XXX')
            OR NVL(v_terminal_row.PCI_VALUE_LINK_MID, 'XXX') <> NVL(OUT_TERMINAL_ROW.PCI_VALUE_LINK_MID, 'XXX')
            OR NVL(v_terminal_row.PCI_VAL_LINK_ALT_MID, 'XXX') <> NVL(OUT_TERMINAL_ROW.PCI_VAL_LINK_ALT_MID, 'XXX') THEN
             out_terminal_row.EFFECTIVE_DATE := TRUNC(SYSDATE);
         END IF;

         UPDATE TERMINAL SET ROW = out_terminal_row
          WHERE UPPER(COST_CENTER_CODE) = UPPER(out_terminal_row.COST_CENTER_CODE)
            AND POLLING_STATUS_CODE     = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
            AND TERMINAL_NUMBER         = OUT_TERMINAL_ROW.TERMINAL_NUMBER
            AND EFFECTIVE_DATE          = v_temp_eff_date;
         out_terminal_row.EXPIRATION_DATE := v_temp_date;
         --Assigning back the temporary variable value to send the output as how it is passed from UI
         out_terminal_row.EFFECTIVE_DATE  := v_temp_eff_date;
         EXCEPTION 
              WHEN OTHERS THEN 
                    out_terminal_row.EXPIRATION_DATE := v_temp_date;
                    v_code  := SQLCODE;
                    v_errm  := substr(SQLERRM,1,200);
                    errpkg.raise_err(v_code, 'TERMINAL_I_SP, ' || v_errm || ' ; TERMINAL Update Error ' );
      END;
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        

END TERMINAL_I_SP;


PROCEDURE TERRITORY_I_SP (
/******************************************************************************
    TERRITORY_I_SP

    This procedure is intended to insert new TERRITORY records

    TERRITORY - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,IN_ROW_DATA             IN  VARCHAR2 --sys.xmltype
,out_territory_row       OUT territory%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
         INSERT INTO territory VALUES out_territory_row;
      
      
       EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
END TERRITORY_I_SP;


PROCEDURE TYPE_I_SP (
/******************************************************************************
    TYPE_I_SP

    This procedure is intended to insert new TYPE records

    TYPE - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
revised : 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
        : 12/20/2012 MDH - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_type_row            OUT type%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
  V_TEMP_DATE     DATE;
  
v_skip_flag      BOOLEAN := FALSE;
v_type_row_prev  type%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );

      BEGIN
         SELECT * INTO v_type_row_prev
           FROM TYPE
          WHERE UPPER(COST_CENTER_CODE) = UPPER(out_type_row.COST_CENTER_CODE)
            AND EXPIRATION_DATE  IS NULL
            AND ROWNUM < 2;
      EXCEPTION
         WHEN OTHERS THEN
            v_type_row_prev := NULL;
      END;

      IF v_type_row_prev.COST_CENTER_CODE IS NOT NULL AND 
         (v_type_row_prev.TYPE_CODE = out_type_row.TYPE_CODE 
          AND v_type_row_prev.EFFECTIVE_DATE = out_type_row.EFFECTIVE_DATE) THEN
          v_skip_flag := TRUE;
      END IF;

      IF NOT v_skip_flag THEN
            --
            --  Expire currently active TYPE Record before insert --
            COMMON_TOOLS.EXPIRE_DATA_SP ('TYPE'
                                         , out_type_row.COST_CENTER_CODE
                                         , out_type_row.EFFECTIVE_DATE);
            --
            --  Insert new TYPE row -- 
            --out_type_row.EFFECTIVE_DATE := trunc(sysdate);
            INSERT INTO TYPE VALUES OUT_TYPE_ROW;
      END IF;

       EXCEPTION
   WHEN dup_val_on_index THEN
      BEGIN
          v_temp_date := out_type_row.EXPIRATION_DATE;
         out_type_row.EXPIRATION_DATE := NULL;
         UPDATE TYPE SET ROW = out_type_row
          WHERE UPPER(COST_CENTER_CODE) = UPPER(out_type_row.COST_CENTER_CODE)
            AND TYPE_CODE               = out_type_row.TYPE_CODE
            AND EFFECTIVE_DATE          = out_type_row.EFFECTIVE_DATE;
         out_type_row.EXPIRATION_DATE := v_temp_date;
         EXCEPTION 
              WHEN OTHERS THEN 
                    out_type_row.EXPIRATION_DATE := v_temp_date;
                    v_code  := SQLCODE;
                    v_errm  := substr(SQLERRM,1,200);
                    errpkg.raise_err(v_code, 'TYPE_I_SP, ' || v_errm || ' ; TYPE Update Error ' );
      END;
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TYPE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END TYPE_I_SP;

/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/

PROCEDURE ADDRESS_CAN_U_SP ( 
/*******************************************************************************
    ADDRESS_CAN_U_SP

    This procedure is intended to update Canadian address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%ROWTYPE;
--
--
BEGIN
-- 
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
 ADDRESS_CAN_ROWTYPE_SP ( 
     in_COST_CENTER    
    ,in_ADDRESS_TYPE  
    ,in_EFFECTIVE_DATE 
    ,in_TABLE_NAME  
    ,in_ROW_DATE    
    ,in_Row_data   
    ,v_address_can_row
    ); 

END;
  
      
   UPDATE ADDRESS_CAN set ROW = v_address_can_row
        WHERE UPPER(cost_center_code)     =  UPPER(in_COST_CENTER)
          AND address_type                =  in_ADDRESS_TYPE
          AND effective_date              =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_CAN_U_SP;

PROCEDURE ADDRESS_MEX_U_SP ( 
/*******************************************************************************
    ADDRESS_MEX_U_SP

    This procedure is intended to Update Mexico address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%ROWTYPE;
--
--
BEGIN
--
--
-- Convert XML to ROWTYPE --
 ADDRESS_MEX_ROWTYPE_SP ( 
     in_COST_CENTER     
    ,in_ADDRESS_TYPE   
    ,in_EFFECTIVE_DATE  
    ,in_TABLE_NAME  
    ,in_ROW_DATE    
    ,in_Row_data    
    ,v_address_mex_row
    );

      
     UPDATE ADDRESS_MEX set ROW  =  v_address_mex_row
        WHERE UPPER(cost_center_code)     =  UPPER(in_COST_CENTER)
          AND address_type                =  in_ADDRESS_TYPE
          AND effective_date              =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP, ' || ' ' ||
             'IN_TABLE_NAME IS ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_MEX_U_SP;

PROCEDURE ADDRESS_OTHER_U_SP ( 
/*******************************************************************************
    ADDRESS_OTHER_U_SP

    This procedure is intended to Update OTHER address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
revised : 10/02/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
 ADDRESS_OTHER_ROWTYPE_SP ( 
      in_COST_CENTER     
     ,in_ADDRESS_TYPE    
     ,in_EFFECTIVE_DATE  
     ,in_TABLE_NAME  
     ,in_ROW_DATE    
     ,in_Row_data    
     ,v_address_other_row   
     );
      
      UPDATE ADDRESS_OTHER set ROW        =  v_address_other_row
        WHERE UPPER(cost_center_code)     =  UPPER(in_COST_CENTER)
          AND address_type                =  in_ADDRESS_TYPE
          AND effective_date              =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_OTHER_U_SP;

PROCEDURE ADDRESS_USA_U_SP (
/*******************************************************************************
    ADDRESS_USA_U_SP

    This procedure is intended to Update ADDRESS_USA address records

    CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_USA table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/20/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_address_usa_row address_usa%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
 ADDRESS_USA_ROWTYPE_SP (
     in_COST_CENTER         
    ,in_ADDRESS_TYPE        
    ,in_EFFECTIVE_DATE       
    ,in_TABLE_NAME          
    ,in_ROW_DATE             
    ,in_Row_data              
    ,v_address_usa_row         
    );
           
     UPDATE ADDRESS_USA set ROW           =  v_address_usa_row
        WHERE UPPER(cost_center_code)     =  UPPER(in_COST_CENTER)
          AND address_type                =  in_ADDRESS_TYPE
          AND effective_date              =  in_EFFECTIVE_DATE;
   
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_USA_U_SP;

PROCEDURE ADMINISTRATION_U_SP (
/*******************************************************************************
    ADMINISTRATION_U_SP

    This procedure is intended to update ADMINISTRATION records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_administration_row administration%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
 ADMINISTRATION_ROWTYPE_SP (
      in_COST_CENTER    
    ,in_TABLE_NAME  
    ,in_ROW_DATE    
    ,in_Row_data    
    ,v_administration_row   
    ); 
    
    UPDATE ADMINISTRATION set 
      INTERNAL_MAIL_NUMBER             = v_administration_row.INTERNAL_MAIL_NUMBER
      ,ADMIN_COST_CNTR_TYPE            = v_administration_row.ADMIN_COST_CNTR_TYPE  
         WHERE UPPER(cost_center_code) = UPPER(v_administration_row.cost_center_code);
         
       
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADMINISTRATION_U_SP;                 
                
                
PROCEDURE BANK_CARD_U_SP (
/*******************************************************************************
    BANK_CARD_U_SP

    This procedure is intended to update BANK CARD records

    CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
 v_bank_card_row bank_card%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
 BANK_CARD_ROWTYPE_SP (
     in_COST_CENTER         
    ,in_POLLING_STATUS_CODE   
    ,in_MERCHANT_ID          
    ,in_EFFECTIVE_DATE        
    ,in_TABLE_NAME  
    ,in_ROW_DATE   
    ,in_Row_data    
    ,v_bank_card_row   
    ); 
       
      UPDATE BANK_CARD set ROW = v_bank_card_row
        WHERE UPPER(cost_center_code)     =  UPPER(in_COST_CENTER)
          AND polling_status_code         =  in_POLLING_STATUS_CODE
          AND merchant_id                 =  in_MERCHANT_ID
          AND effective_date              =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
          , 'BANK_CARD_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
          , v_errm);
        
END BANK_CARD_U_SP;

PROCEDURE BATCH_JOB_U_SP (
/*******************************************************************************
    BATCH_JOB_U_SP

    This procedure is intended to update existing BATCH_JOB records

    BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    IN  batch_job.batch_job_name%type,
in_batch_job_number  IN  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_BATCH_JOB_row BATCH_JOB%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

 
      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'BATCH_JOB_NAME'                 THEN  v_batch_job_row.batch_job_name              := v_row_value;
            WHEN 'BATCH_JOB_NUMBER'               THEN  v_BATCH_JOB_row.BATCH_JOB_number            := v_row_value;
            WHEN 'BATCH_JOB_CONDITION'            THEN  v_BATCH_JOB_row.BATCH_JOB_status         := v_row_value;
            WHEN 'BATCH_JOB_START_DATE'           THEN  v_BATCH_JOB_row.BATCH_JOB_start_date        := v_row_value;
--            when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
            WHEN 'BATCH_JOB_END_DATE'             THEN  v_batch_job_row.batch_job_end_date          := v_row_value;
--            when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
            WHEN 'BATCH_JOB_LAST_RUN_DATE'        THEN  v_batch_job_row.batch_job_last_run_date     := v_row_value;
--            when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      UPDATE batch_job set ROW = v_batch_job_row  WHERE BATCH_JOB_NAME    = in_BATCH_JOB_NAME 
                                                   AND  BATCH_JOB_NUMBER  = in_BATCH_JOB_NUMBER ;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    END BATCH_JOB_U_SP;

PROCEDURE CODE_DETAIL_U_SP (
/*******************************************************************************
    CODE_DETAIL_U_SP

    This procedure is intended to update existing CODE_DETAIL records

    CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
    OracleTableName   - Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   IN  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   IN  code_detail.code_header_type%type,
in_code_detail_value  IN  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_CODE_DETAIL_row CODE_DETAIL%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'CODE_HEADER_NAME'                 THEN  v_code_detail_row.code_header_name              := v_row_value;
            WHEN 'CODE_HEADER_TYPE'                 THEN  v_code_detail_row.code_header_type              := v_row_value;
            WHEN 'CODE_DETAIL_VALUE'                THEN  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
            WHEN 'CODE_DETAIL_DESCRIPTION'          THEN  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
            WHEN 'CODE_DETAIL_EXPIRE_FLAG'          THEN  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
            WHEN 'CODE_DETAIL_EXPIRE_USER'          THEN  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
            WHEN 'CODE_DETAIL_EXPIRE_EFF_DATE'      THEN  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      UPDATE code_detail set ROW = v_code_detail_row WHERE code_header_name   = in_code_header_name
                                                      AND  code_header_type   = in_code_header_type 
                                                      AND  code_detail_value  = in_code_detail_value ;    
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    END CODE_DETAIL_U_SP;

PROCEDURE CODE_HEADER_U_SP (
/*******************************************************************************
    CODE_HEADER_U_SP

    This procedure is intended to update existing CODE_HEADER records

    CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   IN  code_header.code_header_name%type,
in_code_header_type   IN  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_CODE_HEADER_row CODE_HEADER%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

     
      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'CODE_HEADER_NAME'                 THEN  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
            WHEN 'CODE_HEADER_TYPE'                 THEN  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
            WHEN 'CODE_HEADER_DESCRIPTION'          THEN  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
            WHEN 'CODE_HEADER_EXPIRE_FLAG'          THEN  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
            WHEN 'CODE_HEADER_EXPIRE_USER'          THEN  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
            WHEN 'CODE_HEADER_EXPIRE_EFF_DATE'      THEN  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
            WHEN 'CODE_HEADER_DTL_VAL_SIZE'         THEN  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
            WHEN 'CODE_HEADER_DTL_VAL_DEFAULT'      THEN  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      UPDATE code_header set ROW = v_code_header_row WHERE code_header_name   = in_code_header_name
                                                      AND  code_header_type   = in_code_header_type ;    
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END CODE_HEADER_U_SP;
       
PROCEDURE COST_CENTER_U_SP (
/*****************************************************************************
    COST_CENTER_U_SP

    This procedure is intended to UPDATE cost center records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
        : 06/25/2015 axk326 CCN Project Team...
          Added COLOR_CONSULTANT_TYPE, PCC_PCL_STORE columns to the update DML
        : 07/11/2016 MXR916 CCN Project Team...
          Added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER columns.
*****************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 IS 

            
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%ROWTYPE;
-------------
--
--
BEGIN
-- Convert XML to ROWTYPE --
 COST_CENTER_ROWTYPE_SP (
     in_COST_CENTER  
    ,in_TABLE_NAME  
    ,in_ROW_DATE     
    ,in_Row_data    
    ,v_cost_center_row   
    );

      --UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center; 
        UPDATE cost_center set
        COST_CENTER_NAME = v_cost_center_row.COST_CENTER_NAME,
        CATEGORY = v_cost_center_row.CATEGORY,
        ENTITY_TYPE = v_cost_center_row.ENTITY_TYPE,
        STATEMENT_TYPE = v_cost_center_row.STATEMENT_TYPE,
        COUNTRY_CODE = v_cost_center_row.COUNTRY_CODE,
        TRANSPORT_TYPE = v_cost_center_row.TRANSPORT_TYPE,
        BEGIN_DATE = v_cost_center_row.BEGIN_DATE,
        OPEN_DATE = v_cost_center_row.OPEN_DATE,
        MOVE_DATE = v_cost_center_row.MOVE_DATE,
        CLOSE_DATE = v_cost_center_row.CLOSE_DATE,
        FINANCIAL_CLOSE_DATE = v_cost_center_row.FINANCIAL_CLOSE_DATE,
        POS_PROG_VER_EFF_DATE = v_cost_center_row.POS_PROG_VER_EFF_DATE,
        UPS_ZONE_CODE = v_cost_center_row.UPS_ZONE_CODE,
        RPS_ZONE_CODE = v_cost_center_row.RPS_ZONE_CODE,
        CURRENCY_CODE = v_cost_center_row.CURRENCY_CODE,
        POS_PROG_VER_NBR = v_cost_center_row.POS_PROG_VER_NBR,
        LEASE_OWN_CODE = v_cost_center_row.LEASE_OWN_CODE,
        MISSION_TYPE_CODE = v_cost_center_row.MISSION_TYPE_CODE,
        DUNS_NUMBER = v_cost_center_row.DUNS_NUMBER,
        PRI_LOGO_GROUP_IND = v_cost_center_row.PRI_LOGO_GROUP_IND,
        SCD_LOGO_GROUP_IND = v_cost_center_row.SCD_LOGO_GROUP_IND,
        BANKING_TYPE = v_cost_center_row.BANKING_TYPE,
        DEPOSIT_BAG_REORDER = v_cost_center_row.DEPOSIT_BAG_REORDER,
        DEPOSIT_TICKET_REORDER = v_cost_center_row.DEPOSIT_TICKET_REORDER,
        POP_KIT_CODE = v_cost_center_row.POP_KIT_CODE,
        POS_NON_STORE_IND = v_cost_center_row.POS_NON_STORE_IND,
        COLOR_CONSULTANT_TYPE = v_cost_center_row.COLOR_CONSULTANT_TYPE,
        PCC_PCL_STORE = v_cost_center_row.PCC_PCL_STORE,
        STD_COST_IDENTIFIER=v_cost_center_row.STD_COST_IDENTIFIER,
        PRIM_COST_IDENTIFIER=v_cost_center_row.PRIM_COST_IDENTIFIER
     WHERE UPPER(cost_center_code) = UPPER(v_cost_center_row.cost_center_code); 

  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);

END cost_center_u_sp;

PROCEDURE EMP_DATA_U_SP (
/*******************************************************************************
    EMP_DATA_U_SP

    This procedure is intended to update existing EMP_DATA records

    EMPLOYEE_NUMBER - Employee Number than changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  IN  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_EMP_DATA_row EMP_DATA%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
--
BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    END IF;
    
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'NATIONAL_IDENTIFIER'              THEN  v_emp_data_row.national_identifier           := v_row_value;
            WHEN 'RECORD_TYPE'                      THEN  v_EMP_DATA_row.record_type                   := v_row_value;
            WHEN 'COMPANY_CODE'                     THEN  v_emp_data_row.COMPANY_CODE                  := v_row_value;
            WHEN 'FILE_NUMBER'                      THEN  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
            WHEN 'EMPLOYEE_NAME'                    THEN  v_emp_data_row.employee_name                 := v_row_value;
            WHEN 'LAST_NAME'                        THEN  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
            WHEN 'FIRST_NAME'                       THEN  v_emp_data_row.FIRST_NAME                    := v_row_value;
            WHEN 'MIDDLE_INITIAL'                   THEN  v_emp_data_row.middle_initial                := v_row_value;
            WHEN 'HOME_ADDRESS_LINE1'               THEN  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
            WHEN 'HOME_ADDRESS_LINE2'               THEN  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
            WHEN 'HOME_CITY_STATE'                  THEN  v_emp_data_row.home_city_state               := v_row_value;
            WHEN 'HOME_CITY'                        THEN  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
            WHEN 'HOME_STATE'                       THEN  v_emp_data_row.HOME_STATE                    := v_row_value;
            WHEN 'HOME_POSTAL_CODE'                 THEN  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
            WHEN 'HOME_PHONE'                       THEN  v_emp_data_row.home_phone                    := v_row_value;
            WHEN 'SEX'                              THEN  v_EMP_DATA_row.SEX                           := v_row_value;
            WHEN 'EMP_PAYROLL_STATUS'               THEN  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
            WHEN 'EMP_ASSIGNMENT_STATUS'            THEN  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
            WHEN 'EMP_DIVISION'                     THEN  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
            WHEN 'ACCOUNT_NUMBER'                   THEN  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
            WHEN 'FLSA_CODE'                        THEN  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
            WHEN 'EMPLOYEE_NUMBER'                  THEN  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
            WHEN 'PAYROLL_EMP_RPT_SEQ_ID'           THEN  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      UPDATE emp_data set ROW = v_emp_data_row WHERE employee_number  =  in_employee_number ;
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END emp_data_u_sp;

PROCEDURE MARKETING_U_SP (
/*******************************************************************************
    MARKETING_U_SP

    This procedure is intended to insert new MARKETING records

    CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          IN  marketing.cost_center_code%type,
in_marketing_type       IN  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%ROWTYPE;
--
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
      MARKETING_ROWTYPE_SP (
     in_cost_center           
    ,in_marketing_type      
    ,in_TABLE_NAME           
    ,in_ROW_DATE              
    ,in_Row_data              
    ,v_marketing_row
    );

      UPDATE marketing set ROW = v_marketing_row WHERE UPPER(cost_center_code) = UPPER(in_cost_center)
                                                   AND marketing_type          = in_marketing_type ;      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END marketing_u_sp;

PROCEDURE OTHER_U_SP (
/*******************************************************************************
    OTHER_U_SP

    This procedure is intended to update existing OTHER records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%ROWTYPE;
--
--
--
BEGIN
--
-- 
 BEGIN
 --
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
    in_COST_CENTER          
    , v_OTHER_row  
    ,in_TABLE_NAME            
    ,in_ROW_DATE             
    ,in_Row_data              
    );

 END;
     
      
      UPDATE OTHER set ROW = v_other_row WHERE UPPER(cost_center_code) = UPPER(in_cost_center);
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END other_u_sp;

PROCEDURE PHONE_U_SP (
/*******************************************************************************
    PHONE_U_SP

    This procedure is intended to update existing PHONE records

    PHONE - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/12 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    IN  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_phone_row PHONE%ROWTYPE;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
     in_COST_CENTER         
    ,in_phone_number_type    
    , v_phone_row         
    ,in_TABLE_NAME           
    ,in_ROW_DATE             
    ,in_Row_data             
    );
      
    UPDATE PHONE 
      set 
        PHONE_AREA_CODE = v_phone_row.PHONE_AREA_CODE
        ,PHONE_NUMBER = v_phone_row.PHONE_NUMBER
        ,PHONE_EXTENSION = v_phone_row.PHONE_EXTENSION
      WHERE UPPER(cost_center_code) = UPPER(v_phone_row.cost_center_code)
        AND phone_number_type       = v_phone_row.phone_number_type ; 
      
      
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END PHONE_U_SP;

PROCEDURE POLLING_U_SP (
/*******************************************************************************
    POLLING_U_SP

    This procedure is intended to update existing POLLING records

    CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
changed : 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
        : 02/18/2015 SXT410 Modified code to to capture Previous updated row
          and setting Effective_date to sysdate only when Polling_status_code is changed.
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,OUT_POLLING_ROW         OUT POLLING%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 V_ROW_DATA      SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
 v_prev_status_row    polling%ROWTYPE;
-- v_POLLING_hst_row POLLING_HST%rowtype;
--
--
BEGIN
--
-- Convert XML to ROWTYPE --  
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );              
                   
        POLLING_HST_I_SP ( OUT_POLLING_ROW );          

        BEGIN
            SELECT * 
              INTO V_PREV_STATUS_ROW
              FROM POLLING
             WHERE CURRENT_FLAG = 'Y'
               AND UPPER(COST_CENTER_CODE) = UPPER(OUT_POLLING_ROW.COST_CENTER_CODE);        
            IF V_PREV_STATUS_ROW.POLLING_STATUS_CODE <> OUT_POLLING_ROW.POLLING_STATUS_CODE THEN 
                OUT_POLLING_ROW.EFFECTIVE_DATE := SYSDATE;
                
                EXPIRE_POLLING_DATA_SP ( out_POLLING_row );
            ELSE
                OUT_POLLING_ROW.EFFECTIVE_DATE := V_PREV_STATUS_ROW.EFFECTIVE_DATE;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                OUT_POLLING_ROW.EFFECTIVE_DATE := SYSDATE;
        END;
            
       
      UPDATE polling set ROW             = out_polling_row
       WHERE UPPER(cost_center_code)     = UPPER(out_polling_row.cost_center_code)
        AND  POLLING_STATUS_CODE         = OUT_POLLING_ROW.POLLING_STATUS_CODE ;        
             
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
    
END POLLING_U_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_U_SP (
/*******************************************************************************
    POLLING_DWLD_RSN_HIST_U_SP

    This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

    CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          IN polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  IN polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       IN polling_dwld_rsn_hist.effective_date%type,

in_table_name IN varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%ROWTYPE;
v_row_value     varchar2(500);
--
--
BEGIN

/* 
*/

-------------  Business Rules go here                           
--    begin

--    exception
    
--        when others then                
--              v_code  := SQLCODE;
--              v_errm  := substr(SQLERRM,1,200);
--              errpkg.raise_err(v_code
--                  , 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--                , v_errm);
--    end;

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

    IF (table_fields_rec.data_type <> 'DATE') THEN

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    ELSE
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    END IF;
    
          v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'     THEN  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
            WHEN 'POLLING_STATUS_CODE'  THEN  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
            WHEN 'EFFECTIVE_DATE'       THEN  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'DOWNLOAD_DATE'        THEN  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'POS_DOWNLOAD_REASON'  THEN  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
      ELSE
            NULL;        
        END CASE;           

  ELSE
     NULL ;
  END IF;

 END LOOP ;
      
      INSERT INTO POLLING_DWLD_RSN_HIST VALUES v_polling_dwld_rsn_hist_row;
      
      UPDATE polling_dwld_rsn_hist set ROW = v_polling_dwld_rsn_hist_row WHERE UPPER(cost_center_code)     = UPPER(in_cost_center)
                                                                          AND  polling_status_code         = in_polling_status_code 
                                                                          AND  effective_date              = in_effective_date ;
       
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
          , 'POLLING_DWLD_RSN_HIST_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
          , v_errm);
        
    
END POLLING_DWLD_RSN_HIST_U_SP;

PROCEDURE REAL_ESTATE_U_SP (
/******************************************************************************
    REAL_ESTATE_U_SP

    This procedure is intended to update existing REAL_ESTATE records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 blr CCN Project....
changed : 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_real_estate_row     OUT real_estate%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --    
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      UPDATE real_estate set ROW         = out_real_estate_row
       WHERE UPPER(cost_center_code)     = UPPER(out_real_estate_row.cost_center_code);
       
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
            
END REAL_ESTATE_U_SP;


PROCEDURE SALES_REP_U_SP (
/*******************************************************************************
    SALES_REP_U_SP

    This procedure is intended to update changed SALES_REP records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_sales_rep_row     OUT sales_rep%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
--
BEGIN
--
-- Convert XML to ROWTYPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      UPDATE SALES_REP set ROW    = OUT_SALES_REP_ROW 
       WHERE GEMS_EMPLOYEE_ID     = OUT_SALES_REP_ROW.GEMS_EMPLOYEE_ID;
       
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
    END SALES_REP_U_SP;
  

PROCEDURE STATUS_U_SP (
/*******************************************************************************
    STATUS_U_SP

    This procedure is intended to update changed STATUS records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 tal CCN Project....
changed : 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_status_row          OUT status%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --    
  STATUS_ROWTYPE_SP ( 
         in_table_name
        ,in_Row_Data
        ,out_STATUS_row    
                   );
      
       -- update the move_date to effective date for the cost center for the status code of RELO. COMP. CC
      IF OUT_STATUS_ROW.STATUS_CODE = '3' THEN
         UPDATE COST_CENTER
            SET MOVE_DATE               = OUT_STATUS_ROW.EFFECTIVE_DATE
          WHERE UPPER(COST_CENTER_CODE) = UPPER(OUT_STATUS_ROW.COST_CENTER_CODE);
      END IF;
                  
      UPDATE STATUS set ROW           = OUT_STATUS_ROW
       WHERE UPPER(COST_CENTER_CODE)  = UPPER(OUT_STATUS_ROW.COST_CENTER_CODE)
        AND  status_code       = out_status_row.status_code              
        AND  effective_date    = out_status_row.effective_date; 

  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
END STATUS_U_SP;


PROCEDURE STORE_U_SP (
/******************************************************************************
    STORE_U_SP

    This procedure is intended to update changed STORE records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
changed : 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_STORE_row           OUT STORE%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --    
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_STORE_row 
                   );
                  
      UPDATE store set ROW            = out_store_row
       WHERE UPPER(cost_center_code)  = UPPER(out_store_row.cost_center_code); 
           
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END STORE_U_SP;


PROCEDURE TAXWARE_U_SP (
/*******************************************************************************
    TAXWARE_U_SP

    This procedure is intended to update changed TAXWARE records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed : 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_TAXWARE_row         OUT TAXWARE%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN
--
-- Convert XML to ROWTYPE --    
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_TAXWARE_row 
                   );
                  
      UPDATE TAXWARE set ROW          = out_TAXWARE_row
       WHERE UPPER(cost_center_code)  = UPPER(out_TAXWARE_row.cost_center_code); 
           
      
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);
                     
    END TAXWARE_U_SP;


PROCEDURE TERMINAL_U_SP (
/******************************************************************************
    TERMINAL_U_SP

    This procedure is intended to update changed terminal records

    TERMINAL - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed : 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_terminal_row     OUT terminal%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --    
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
       UPDATE TERMINAL SET ROW              = OUT_TERMINAL_ROW
        WHERE UPPER(COST_CENTER_CODE)       = UPPER(OUT_TERMINAL_ROW.COST_CENTER_CODE)
          AND POLLING_STATUS_CODE           = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
          AND TERMINAL_NUMBER               = OUT_TERMINAL_ROW.TERMINAL_NUMBER
          AND EFFECTIVE_DATE                = OUT_TERMINAL_ROW.EFFECTIVE_DATE;
           
      
    
    EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
END TERMINAL_U_SP;


PROCEDURE TERRITORY_U_SP (
/*******************************************************************************
    TERRITORY_U_SP

    This procedure is intended to update changed TERRITORY records

    TERRITORY - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed : 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_territory_row     OUT territory%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --    
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      UPDATE territory set ROW               = out_territory_row
       WHERE UPPER(cost_center_code)         = UPPER(out_territory_row.cost_center_code);
         
        
      
    EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
END TERRITORY_U_SP;


PROCEDURE TYPE_U_SP (
/*****************************************************************************
    TYPE_U_SP

    This procedure is intended to update changed TYPE records

    TYPE - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed : 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,IN_ROW_DATA             IN  varchar2 --sys.xmltype
,out_type_row            OUT type%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
--
BEGIN
--
-- Convert XML to ROWTYPE --    
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
                  
      UPDATE type set ROW              = out_type_row
       WHERE UPPER(COST_CENTER_CODE)   = UPPER(OUT_TYPE_ROW.COST_CENTER_CODE)
         AND TYPE_CODE                 = OUT_TYPE_ROW.TYPE_CODE
         AND effective_date            = out_type_row.effective_date ; 
        
      
      
    EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TYPE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);

END TYPE_U_SP;
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PROCEDURE ADDRESS_CAN_ROWTYPE_SP ( 
/*******************************************************************************
     ADDRESS_CAN_ROWTYPE_SP

    This procedure is intended to Insert/Update  Canadian address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_cost_center     IN  address_can.cost_center_code%type 
,in_address_type    IN  address_can.address_type%type 
,in_effective_date  IN  address_can.effective_date%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  OUT address_can%ROWTYPE
)

 IS 
 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
 
v_address_can_row   ADDRESS_CAN%ROWTYPE;
v_row_value        varchar2(500);
v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

     
      
     IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;

          v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);

         CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'  THEN  v_address_can_row.COST_CENTER_CODE  := UPPER(v_row_value);
            WHEN 'ADDRESS_TYPE'      THEN  v_address_can_row.ADDRESS_TYPE      := v_row_value;
            WHEN 'EFFECTIVE_DATE'    THEN  v_address_can_row.EFFECTIVE_DATE    := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'   THEN  v_address_can_row.EXPIRATION_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'ADDRESS_LINE_1'    THEN  v_address_can_row.ADDRESS_LINE_1    := v_row_value;
           WHEN 'ADDRESS_LINE_2'    THEN  v_address_can_row.ADDRESS_LINE_2    := v_row_value;
          WHEN 'ADDRESS_LINE_3'    THEN  v_address_can_row.ADDRESS_LINE_3    := v_row_value;
            WHEN 'CITY'              THEN  v_address_can_row.CITY              := v_row_value;
            WHEN 'PROVINCE_CODE'     THEN  v_address_can_row.PROVINCE_CODE     := v_row_value;
            WHEN 'POSTAL_CODE'       THEN  v_address_can_row.POSTAL_CODE       := v_row_value;
            WHEN 'VALID_ADDRESS'     THEN  v_address_can_row.VALID_ADDRESS     := v_row_value;
            WHEN 'COUNTRY_CODE'         THEN  v_address_can_row.COUNTRY_CODE     := v_row_value;
        ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
   out_address_type := v_address_can_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END  ADDRESS_CAN_ROWTYPE_SP;                 
                
PROCEDURE ADDRESS_MEX_ROWTYPE_SP ( 
 /******************************************************************************
    ADDRESS_MEX_ROWTYPE_SP

    This procedure is intended to Insert new Mexico address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  OUT address_mex%ROWTYPE
)

 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_address_mex_row  ADDRESS_MEX%ROWTYPE;
v_row_value        varchar2(500);
v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;

             v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);

         CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'  THEN  v_address_mex_row.COST_CENTER_CODE := UPPER(v_row_value);
            WHEN 'ADDRESS_TYPE'      THEN  v_address_mex_row.ADDRESS_TYPE     := v_row_value;
            WHEN 'EFFECTIVE_DATE'    THEN  v_address_mex_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'   THEN  v_address_mex_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'ADDRESS_LINE_1'    THEN  v_address_mex_row.ADDRESS_LINE_1   := v_row_value;
               WHEN 'ADDRESS_LINE_2'    THEN  v_address_mex_row.ADDRESS_LINE_2   := v_row_value;
            WHEN 'ADDRESS_LINE_3'    THEN  v_address_mex_row.ADDRESS_LINE_3   := v_row_value;
            WHEN 'CITY'              THEN  v_address_mex_row.CITY             := v_row_value;
            WHEN 'PROVINCE_CODE'     THEN  v_address_mex_row.PROVINCE_CODE    := v_row_value;
            WHEN 'POSTAL_CODE'       THEN  v_address_mex_row.POSTAL_CODE      := v_row_value;
            WHEN 'VALID_ADDRESS'     THEN  v_address_mex_row.VALID_ADDRESS    := v_row_value;
            WHEN 'COUNTRY_CODE'      THEN v_address_mex_row.COUNTRY_CODE          :=  v_row_value;
        ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
    out_address_type := v_address_mex_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_MEX_ROWTYPE_SP;

PROCEDURE ADDRESS_OTHER_ROWTYPE_SP ( 
/*******************************************************************************
    ADDRESS_OTHER_ROWTYPE_SP

    This procedure is intended to Insert new OTHER address records

    CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  OUT address_other%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_address_other_row ADDRESS_OTHER%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

   IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;        
          v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
         CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'  THEN  v_address_other_row.COST_CENTER_CODE := UPPER(v_row_value);
            WHEN 'ADDRESS_TYPE'      THEN  v_address_other_row.ADDRESS_TYPE     := v_row_value;
            WHEN 'EFFECTIVE_DATE'    THEN  v_address_other_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'   THEN  v_address_other_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'ADDRESS_LINE_1'    THEN  v_address_other_row.ADDRESS_LINE_1   := v_row_value;
               WHEN 'ADDRESS_LINE_2'    THEN  v_address_other_row.ADDRESS_LINE_2   := v_row_value;
            WHEN 'ADDRESS_LINE_3'    THEN  v_address_other_row.ADDRESS_LINE_3   := v_row_value;
            WHEN 'CITY'              THEN  v_address_other_row.CITY             := v_row_value;
            WHEN 'PROVINCE_CODE'          THEN  v_address_other_row.PROVINCE_CODE    := v_row_value;
              WHEN 'STATE_CODE'             THEN  v_address_other_row.STATE_CODE       := v_row_value;
            WHEN 'POSTAL_CODE'       THEN  v_address_other_row.POSTAL_CODE      := v_row_value;
              WHEN 'COUNTRY_CODE'      THEN  v_address_other_row.COUNTRY_CODE     := v_row_value;
            WHEN 'VALID_ADDRESS'     THEN  v_address_other_row.VALID_ADDRESS    := v_row_value;
        ELSE
            NULL;        
        END CASE;           


  ELSE
      NULL ;
  END IF;
    v_row_value := NULL;
  END LOOP ;
      
     out_address_type  :=  v_address_other_row; 
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_ROWTYPE_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_OTHER_ROWTYPE_SP;

PROCEDURE ADDRESS_USA_ROWTYPE_SP (
/*******************************************************************************
    ADDRESS_USA_ROWTYPE_SP

    This procedure is intended to insert new ADDRESS_USA records

    CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
    OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/

 in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE 
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_address_type        OUT address_usa%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_ADDRESS_USA_row  ADDRESS_USA%ROWTYPE;
v_row_value                  varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

     FOR table_fields_rec IN table_fields_cur LOOP

      
      
              IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN
        
           IF (table_fields_rec.data_type <> 'DATE') THEN
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
      ELSE
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
        END IF;
            
            
        /***  below is a list of all the fields in the table  ***/
        /*
                    COST_CENTER_CODE
                    ADDRESS_TYPE
                    EFFECTIVE_DATE
                    EXPIRATION_DATE
                    ADDRESS_LINE_1
                    ADDRESS_LINE_2
                    ADDRESS_LINE_3
                    CITY
                    STATE_CODE
                    ZIP_CODE
                    ZIP_CODE_4
                    COUNTY
                    FIPS_CODE
                    DESTINATION_POINT
                    CHECK_DIGIT
                    VALID_ADDRESS
        */
                 v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
                      CASE table_fields_rec.column_name
                                WHEN 'COST_CENTER_CODE' THEN v_ADDRESS_USA_row.COST_CENTER_CODE  :=  UPPER(v_row_value);
                                WHEN 'ADDRESS_TYPE' THEN v_ADDRESS_USA_row.ADDRESS_TYPE          :=  v_row_value;
                                WHEN 'EFFECTIVE_DATE' THEN v_ADDRESS_USA_row.EFFECTIVE_DATE      :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                                WHEN 'EXPIRATION_DATE' THEN v_ADDRESS_USA_row.EXPIRATION_DATE    :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                                WHEN 'ADDRESS_LINE_1' THEN v_ADDRESS_USA_row.ADDRESS_LINE_1      :=  v_row_value;
                                WHEN 'ADDRESS_LINE_2' THEN v_ADDRESS_USA_row.ADDRESS_LINE_2      :=  v_row_value;
                                WHEN 'ADDRESS_LINE_3' THEN v_ADDRESS_USA_row.ADDRESS_LINE_3      :=  v_row_value;
                                WHEN 'CITY' THEN v_ADDRESS_USA_row.CITY                          :=  v_row_value;
                                WHEN 'STATE_CODE' THEN v_ADDRESS_USA_row.STATE_CODE              :=  v_row_value;
                                WHEN 'ZIP_CODE' THEN v_ADDRESS_USA_row.ZIP_CODE                  :=  v_row_value;
                                WHEN 'ZIP_CODE_4' THEN v_ADDRESS_USA_row.ZIP_CODE_4              :=  v_row_value;
                                WHEN 'COUNTY' THEN v_ADDRESS_USA_row.COUNTY                      :=  v_row_value;
                                WHEN 'FIPS_CODE' THEN v_ADDRESS_USA_row.FIPS_CODE                :=  v_row_value;
                                WHEN 'DESTINATION_POINT' THEN v_ADDRESS_USA_row.DESTINATION_POINT :=  v_row_value;
                                WHEN 'CHECK_DIGIT' THEN v_ADDRESS_USA_row.CHECK_DIGIT            :=  v_row_value;
                                WHEN 'VALID_ADDRESS' THEN v_ADDRESS_USA_row.VALID_ADDRESS        :=  v_row_value;
                                   WHEN 'COUNTRY_CODE' THEN v_ADDRESS_USA_row.COUNTRY_CODE          :=  v_row_value;
        
                    ELSE
                        NULL;        
                    END CASE;           
        
        
              END IF;

      END LOOP ;
      
     --For PR state the destination code should be forced to 99 and check digit should be forced to 9
     IF v_ADDRESS_USA_row.COUNTRY_CODE = 'PRI' THEN
        v_ADDRESS_USA_row.DESTINATION_POINT := NULL;
        v_ADDRESS_USA_row.CHECK_DIGIT       := NULL;
     END IF;
     
     out_address_type  := v_ADDRESS_USA_row;
      
  EXCEPTION
  
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_ROWTYPE_SP, ' || ' ' ||
        'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
        
    
END ADDRESS_USA_ROWTYPE_SP;

PROCEDURE ADMINISTRATION_ROWTYPE_SP (
/*******************************************************************************
    ADMINISTRATION_ROWTYPE_SP

    This procedure is intended to Insert new ADMINISTRATION records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE 
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_administration_type  OUT ADMINISTRATION%ROWTYPE
)
 
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_administration_row administration%ROWTYPE;
v_row_value     varchar2(500);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
    
 
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'      THEN  v_administration_row.COST_CENTER_CODE     := UPPER(v_row_value);
            WHEN 'CATEGORY'              THEN  v_administration_row.CATEGORY             := v_row_value;
            WHEN 'INTERNAL_MAIL_NUMBER'  THEN  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
         WHEN 'ADMIN_COST_CNTR_TYPE'  THEN  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
        ELSE
            NULL;        
        END CASE;           

  ELSE
     NULL ;
  END IF;

  END LOOP ;
      
    out_administration_type :=  v_administration_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END ADMINISTRATION_ROWTYPE_SP;                 
                
PROCEDURE BANK_CARD_ROWTYPE_SP (
/*******************************************************************************
    BANK_CARD_ROWTYPE_SP

    This procedure is intended to Insert new BANK CARD records

    CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 12/10/2015 sxh487 Added PCI_MERCHANT_ID for Polling
        : 03/02/2016 nxk927 Added PCI_DISCOVER_ID for Polling
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_bank_card_row  OUT  bank_card%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);
 v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_bank_card_row bank_card%ROWTYPE;
v_row_value     varchar2(500);
--
/*

*/

BEGIN

/* 
*/



      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
    
 
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'     THEN  v_bank_card_row.COST_CENTER_CODE     := UPPER(v_row_value);
            WHEN 'POLLING_STATUS_CODE'  THEN  v_bank_card_row.polling_status_code  := v_row_value;
            WHEN 'MERCHANT_ID'          THEN  v_bank_card_row.MERCHANT_ID          := v_row_value; 
            WHEN 'PCI_MERCHANT_ID'      THEN  v_bank_card_row.PCI_MERCHANT_ID      := v_row_value;
            WHEN 'EFFECTIVE_DATE'       THEN  v_bank_card_row.EFFECTIVE_DATE       := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'      THEN  v_bank_card_row.EXPIRATION_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'LAST_CHANGE_DATE'     THEN  v_bank_card_row.LAST_MAINT_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'LAST_MAINT_UI'        THEN  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
            WHEN 'LAST_MAINT_USER_ID'   THEN  v_bank_card_row.LAST_MAINT_USER_ID   := v_row_value;
            WHEN 'QUALITY_CODE'         THEN  v_bank_card_row.QUALITY_CODE         := v_row_value;
            WHEN 'AMEX_SE_ID'           THEN  v_bank_card_row.amex_se_id           := v_row_value;
            WHEN 'DISCOVER_ID'          THEN  v_bank_card_row.DISCOVER_ID          := v_row_value;
            WHEN 'PCI_DISCOVER_ID'      THEN  v_bank_card_row.PCI_DISCOVER_ID      := v_row_value;
        ELSE
            NULL;        
        END CASE;           

  ELSE
     NULL ;
  END IF;

 END LOOP ;
       
       out_bank_card_row := v_bank_card_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
          , 'BANK_CARD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
          , v_errm);
        
    
END BANK_CARD_ROWTYPE_SP;                 
                
PROCEDURE COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
    COST_CENTER_ROWTYPE_SP

    This procedure is intended to insert new cost center records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 06/24/2015 JXC517 / AXK326 CCN Project Team....
          Added validation for XML parsing for two new columns in cost_center table
        : 07/11/2016 mxr916 CCN Project....
          Added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER columns.
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
,out_cost_center_type  OUT cost_center%ROWTYPE
)
 IS 
CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_cost_center_row cost_center%ROWTYPE;
v_row_value       varchar2(500);
v_Row_data        sys.XMLTYPE := XMLTYPE(in_Row_data);
V_COUNT           NUMBER := 0;
--
/*

*/
-------------

BEGIN

/* 
*/


      FOR table_fields_rec IN table_fields_cur LOOP

         

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) OR table_fields_rec.data_type = 'XMLTYPE' THEN
           
           IF table_fields_rec.data_type = 'XMLTYPE' THEN
            BEGIN
                v_row_value := V_ROW_DATA.EXTRACT('/'|| in_table_name|| '/' || table_fields_rec.column_name).GETCLOBVAL();
                v_row_value := REPLACE(REPLACE(v_row_value,'<'||table_fields_rec.column_name ||'>'),'</'||table_fields_rec.column_name||'>');
            EXCEPTION
                WHEN OTHERS THEN
                    v_row_value := NULL;
            END;
           
           ELSIF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE           
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
          END IF;

         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);

          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE' THEN  v_cost_center_row.COST_CENTER_CODE := UPPER(v_row_value);
            WHEN 'COST_CENTER_NAME' THEN  v_cost_center_row.COST_CENTER_NAME := v_row_value;
            WHEN 'CATEGORY' THEN  v_cost_center_row.CATEGORY := v_row_value;
            WHEN 'ENTITY_TYPE' THEN  v_cost_center_row.ENTITY_TYPE := v_row_value;
            WHEN 'STATEMENT_TYPE' THEN  v_cost_center_row.STATEMENT_TYPE := v_row_value;
                                  v_cost_center_row.ACQUISITION_CODE := v_row_value;
            WHEN 'COUNTRY_CODE' THEN  v_cost_center_row.COUNTRY_CODE := v_row_value;
            WHEN 'TRANSPORT_TYPE' THEN  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
            WHEN 'BEGIN_DATE' THEN  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'OPEN_DATE' THEN  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'MOVE_DATE' THEN  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'CLOSE_DATE' THEN  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'FINANCIAL_CLOSE_DATE' THEN  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'POS_PROG_VER_EFF_DATE' THEN  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'UPS_ZONE_CODE' THEN  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
            WHEN 'RPS_ZONE_CODE' THEN  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
            WHEN 'CURRENCY_CODE' THEN  v_cost_center_row.CURRENCY_CODE := v_row_value;
            WHEN 'POS_PROG_VER_NBR' THEN  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
            WHEN 'LEASE_OWN_CODE' THEN  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
            WHEN 'MISSION_TYPE_CODE' THEN  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
            WHEN 'DUNS_NUMBER' THEN  v_cost_center_row.DUNS_NUMBER := v_row_value;
            WHEN 'PRI_LOGO_GROUP_IND' THEN  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
            WHEN 'SCD_LOGO_GROUP_IND' THEN  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
            WHEN 'POP_KIT_CODE' THEN  v_cost_center_row.POP_KIT_CODE := v_row_value;
            WHEN 'POS_NON_STORE_IND' THEN  v_cost_center_row.POS_NON_STORE_IND := v_row_value;
            WHEN 'COLOR_CONSULTANT_TYPE' THEN  
                  IF v_row_value IS NOT NULL THEN
                     v_cost_center_row.COLOR_CONSULTANT_TYPE := sys.xmltype(v_row_value);
                  END IF;
            WHEN 'PCC_PCL_STORE' THEN  
                  IF v_row_value IS NOT NULL THEN
                     v_cost_center_row.PCC_PCL_STORE := sys.xmltype(v_row_value);
                  END IF;
            WHEN 'STD_COST_IDENTIFIER' THEN v_cost_center_row.STD_COST_IDENTIFIER := v_row_value;
            WHEN 'PRIM_COST_IDENTIFIER' THEN v_cost_center_row.PRIM_COST_IDENTIFIER:=v_row_value;
        ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      out_cost_center_type :=  v_cost_center_row;

END COST_CENTER_ROWTYPE_SP;

PROCEDURE MARKETING_ROWTYPE_SP (
/*******************************************************************************
    MARKETING_ROWTYPE_SP

    This procedure is intended to insert new MARKETING records

    CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center          IN  marketing.cost_center_code%type 
,in_marketing_type       IN  marketing.marketing_type%type 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_marketing_type  OUT marketing%ROWTYPE

)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_MARKETING_row MARKETING%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used        when 'EFFECTIVE_DATE'        then  v_MARKETING_row.EFFECTIVE_DATE        := TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used        when 'EXPIRATION_DATE'        then  v_MARKETING_row.EXPIRATION_DATE        := TO_DATE(v_row_value,'YYYYMMDD');   ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'                 THEN  v_marketing_row.cost_center_code           := UPPER(v_row_value);
            WHEN 'CATEGORY'                         THEN  v_marketing_row.CATEGORY                   := v_row_value;
            WHEN 'MARKETING_TYPE'                   THEN  v_marketing_row.marketing_type             := v_row_value;
            WHEN 'EFFECTIVE_DATE'                   THEN  v_marketing_row.effective_date             := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'                  THEN  v_marketing_row.expiration_date            := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'MKT_BRAND'                        THEN  v_marketing_row.mkt_brand                  := v_row_value;
            WHEN 'MKT_MISSION'                      THEN  v_marketing_row.mkt_mission                := v_row_value;
            WHEN 'MKT_SALES_FLOOR_SIZE'             THEN  v_MARKETING_row.mkt_sales_floor_size       := v_row_value;
            WHEN 'MKT_WAREHOUSE_SIZE'               THEN  v_marketing_row.mkt_warehouse_size         := v_row_value;
            WHEN 'MKT_REAL_ESTATE_SETTING'          THEN  v_MARKETING_row.mkt_real_estate_setting    := v_row_value;
        ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
     out_marketing_type  :=  v_marketing_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END MARKETING_ROWTYPE_SP;

PROCEDURE OTHER_ROWTYPE_SP (
/*******************************************************************************
    OTHER_ROWTYPE_SP

    This procedure is intended to insert new OTHER records

    CostCenter - Cost Center that changed
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE 
,out_other_type              OUT OTHER%ROWTYPE

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
 
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_OTHER_row OTHER%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP
      
      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used        when 'EFFECTIVE_DATE'        then  v_OTHER_row.EFFECTIVE_DATE        := TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used        when 'EXPIRATION_DATE'        then  v_OTHER_row.EXPIRATION_DATE        := TO_DATE(v_row_value,'YYYYMMDD');   ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'                 THEN  v_other_row.cost_center_code              := UPPER(v_row_value);
            WHEN 'CATEGORY'                         THEN  v_other_row.CATEGORY                      := v_row_value;
      
        ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
     out_other_type  :=  v_other_row; 
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
    
END OTHER_ROWTYPE_SP;                 
                
PROCEDURE PHONE_ROWTYPE_SP (
/*******************************************************************************
    PHONE_ROWTYPE_SP

    This procedure is intended to insert new PHONE records

    CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
    OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE 
,in_phone_number_type    IN  phone.phone_number_type%type 
,out_phone_type              OUT PHONE%ROWTYPE 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
--;
v_PHONE_row PHONE%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

BEGIN

/* 
*/

      FOR table_fields_rec IN table_fields_cur LOOP

      
      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used        when 'EFFECTIVE_DATE'        then  v_PHONE_row.EFFECTIVE_DATE        := TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used        when 'EXPIRATION_DATE'        then  v_PHONE_row.EXPIRATION_DATE        := TO_DATE(v_row_value,'YYYYMMDD');   ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'                 THEN  v_PHONE_row.cost_center_code       := UPPER(v_row_value);
            WHEN 'PHONE_NUMBER_TYPE'                THEN  v_phone_row.phone_number_type      := v_row_value;
            WHEN 'PHONE_AREA_CODE'                  THEN  v_phone_row.phone_area_code        := v_row_value;
            WHEN 'PHONE_NUMBER'                     THEN  v_phone_row.phone_number           := v_row_value;
            WHEN 'PHONE_EXTENSION'                  THEN  v_PHONE_row.PHONE_extension        := v_row_value;
        ELSE
            NULL;        
        END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
    
    out_phone_type  :=    v_PHONE_row;
           
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
             errpkg.raise_err(v_code, 'PHONE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
    
END PHONE_ROWTYPE_SP;                 
                

PROCEDURE POLLING_ROWTYPE_SP (
/*******************************************************************************
    POLLING_ROWTYPE_SP

    This procedure Build a POLLING Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Polling_ROWTYPE  -  Polling Data Row

created  : 09/26/2012 TAL -- CCN Project....
         : 04/03/2013 BLR error message pointing to wrong procedure
         : 06/12/2013 kdp upated code to work with current_flag
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_polling_rowtype     OUT polling%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_POLLING_row   POLLING%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

          IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN
    
           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
         
        /***  below is a list of all the fields in the table  ***/
                 v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
                  CASE table_fields_rec.column_name
                    WHEN 'COST_CENTER_CODE'           THEN  v_polling_row.cost_center_code            := UPPER(v_row_value);
                    WHEN 'POLLING_STATUS_CODE'        THEN  v_polling_row.polling_status_code         := v_row_value;
          WHEN 'MULTICAST_IND'              THEN  v_polling_row.multicast_ind               := v_row_value;
                    WHEN 'TIME_ZONE'                  THEN  v_polling_row.TIME_ZONE                   := v_row_value;
                    WHEN 'POLLING_IND'                THEN  v_polling_row.polling_ind                 := v_row_value;
                    WHEN 'NEXT_DOWNLOAD_BLOCK_COUNT'  THEN  V_POLLING_ROW.NEXT_DOWNLOAD_BLOCK_COUNT   := V_ROW_VALUE;
                    WHEN 'CURRENT_FLAG'                      THEN  V_POLLING_ROW.CURRENT_FLAG                       := V_ROW_VALUE;
          ELSE
            NULL;        
          END CASE;           
        
         END IF;

    END LOOP ;
      
      out_polling_rowtype  :=  v_POLLING_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);        
    
END POLLING_ROWTYPE_SP;


PROCEDURE REAL_ESTATE_ROWTYPE_SP (
/******************************************************************************
    REAL_ESTATE_ROWTYPE_SP

    This procedure Build a REAL_ESTATE Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  REAL_ESTATE_ROWTYPE  -  REAL_ESTATE Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_real_estate_rowtype     OUT real_estate%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_real_estate_row   real_estate%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'       THEN  v_real_estate_row.cost_center_code     := UPPER(v_row_value);
            WHEN 'CATEGORY'               THEN  v_real_estate_row.CATEGORY             := v_row_value;
      ELSE
        NULL;        
      END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      out_real_estate_rowtype  :=  v_real_estate_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END REAL_ESTATE_ROWTYPE_SP;


PROCEDURE SALES_REP_ROWTYPE_SP (
/******************************************************************************
    SALES_REP_ROWTYPE_SP

    This procedure Build a SALES_REP Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Sales_Rep_ROWTYPE  -  Sales_Rep Data Row

created : 09/26/2012 TAL -- CCN Project....
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_sales_rep_rowtype   OUT sales_rep%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_sales_rep_row   sales_rep%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF; 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE TABLE_FIELDS_REC.COLUMN_NAME
            WHEN 'GEMS_EMPLOYEE_ID'           THEN  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
            WHEN 'SOCIAL_SECURITY_NUMBER'     THEN  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
            WHEN 'EFFECTIVE_DATE'                  THEN  v_SALES_REP_row.EFFECTIVE_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'                THEN  v_SALES_REP_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'FIRST_NAME'                 THEN  v_sales_rep_row.FIRST_NAME               := v_row_value;
            WHEN 'MIDDLE_INITIAL'             THEN  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
            WHEN 'LAST_NAME'                  THEN  v_sales_rep_row.LAST_NAME                := v_row_value;
            WHEN 'EMPLOYEE_CODE'              THEN  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
      ELSE 
        NULL;        
      END CASE;           


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      out_SALES_REP_rowtype  :=  v_SALES_REP_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'SALES_REP_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END SALES_REP_ROWTYPE_SP;


PROCEDURE STATUS_ROWTYPE_SP (
/******************************************************************************
    STATUS_ROWTYPE_SP

    This procedure Build a STATUS Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Status_ROWTYPE   -  Status Data Row

created: 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_status_rowtype   OUT status%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_status_row   status%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF; 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE TABLE_FIELDS_REC.COLUMN_NAME
            WHEN 'COST_CENTER_CODE' THEN  v_status_row.COST_CENTER_CODE        := UPPER(v_row_value);
            WHEN 'STATUS_CODE'      THEN  v_status_row.STATUS_CODE             := v_row_value;
            WHEN 'EFFECTIVE_DATE'        THEN  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'    THEN  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');
      ELSE  
        NULL;        
      END CASE;           

      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      out_STATUS_rowtype  :=  v_STATUS_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STATUS_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
            
END STATUS_ROWTYPE_SP;


PROCEDURE STORE_ROWTYPE_SP (
/******************************************************************************
    STORE_ROWTYPE_SP

    This procedure Build a STORE Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Store_ROWTYPE    -  Store Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_store_rowtype       OUT store%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_store_row     store%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF; 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'           THEN  v_STORE_row.COST_CENTER_CODE         := UPPER(v_row_value);
            WHEN 'CATEGORY'                   THEN  v_STORE_row.CATEGORY                 := v_row_value;
            WHEN 'PERP_INV_START_DATE'        THEN  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'CLASSIFICATION_CODE'        THEN  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
            WHEN 'INVENTORY_INDICATOR'        THEN  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;
            WHEN 'RURAL_METRO_ZONE_CODE'      THEN  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
            WHEN 'SELLING_STORE_FLAG'         THEN  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;
        ELSE
            NULL;        
        END CASE;           

      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      out_STORE_rowtype  :=  v_STORE_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STORE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END STORE_ROWTYPE_SP;


PROCEDURE TAXWARE_ROWTYPE_SP (
/******************************************************************************
    TAXWARE_ROWTYPE_SP

    This procedure Build a TAXWARE Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Taxware_ROWTYPE  -  Taxware Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_taxware_rowtype   OUT taxware%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_taxware_row   taxware%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF; 
/***  below is a list of all the fields in the table  ***/
         v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'           THEN  v_TAXWARE_row.COST_CENTER_CODE         := UPPER(v_row_value);
            WHEN 'TWJ_STATE'                  THEN  v_TAXWARE_row.TWJ_STATE                := v_row_value;
            WHEN 'TWJ_ZIP'                    THEN  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
            WHEN 'TWJ_GEO'                    THEN  v_TAXWARE_row.TWJ_GEO                  := v_row_value;
            WHEN 'TWJ_MAINTENANCE_DATE'       THEN  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'TWJ_COUNTRY'                THEN  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
            WHEN 'TWJ_COMPANY'                THEN  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;
            WHEN 'LAST_MAINT_DATE'            THEN  v_TAXWARE_row.LAST_MAINT_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
            WHEN 'LAST_MAINT_METHOD_ID'       THEN  v_TAXWARE_row.LAST_MAINT_METHOD_ID     := v_row_value;
            WHEN 'LAST_MAINT_USER_ID'         THEN  v_TAXWARE_row.LAST_MAINT_USER_ID       := v_row_value;
        ELSE
            NULL;        
        END CASE;

      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      out_TAXWARE_rowtype  :=  v_TAXWARE_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TAXWARE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END TAXWARE_ROWTYPE_SP;


PROCEDURE TERMINAL_ROWTYPE_SP (
/******************************************************************************
    TERMINAL_ROWTYPE_SP

    This procedure Build a TERMINAL Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 03/11/2016 nxk927 -- CCN Project....
          added three new columns in the terminal table
          PCI_TERMINAL_ID, PCI_VALUE_LINK_MID and PCI_VAL_LINK_ALT_MID
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_terminal_rowtype   OUT terminal%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_terminal_row   terminal%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
 
/***  below is a list of all the fields in the table  ***/
               v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'     THEN  v_terminal_row.cost_center_code       := UPPER(v_row_value);
            WHEN 'POLLING_STATUS_CODE'  THEN  V_TERMINAL_ROW.POLLING_STATUS_CODE    := V_ROW_VALUE;
            WHEN 'TERMINAL_NUMBER'      THEN  V_TERMINAL_ROW.TERMINAL_NUMBER        := V_ROW_VALUE;
            WHEN 'EFFECTIVE_DATE'       THEN  v_terminal_row.effective_date         := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'      THEN  v_terminal_row.expiration_date        := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'POS_LAST_TRAN_DATE'   THEN  v_terminal_row.pos_last_tran_date     := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'POS_LAST_TRAN_NUMBER' THEN  v_terminal_row.pos_last_tran_number   := v_row_value;
            WHEN 'PCI_TERMINAL_ID'      THEN  v_terminal_row.PCI_TERMINAL_ID        := v_row_value;
            WHEN 'PCI_VALUE_LINK_MID'   THEN  v_terminal_row.PCI_VALUE_LINK_MID     := v_row_value;
            WHEN 'PCI_VAL_LINK_ALT_MID' THEN  v_terminal_row.PCI_VAL_LINK_ALT_MID   := v_row_value;
        ELSE
            NULL;        
        END CASE;
      ELSE
        NULL ;
      END IF;

      END LOOP ;
  
      IF V_TERMINAL_ROW.TERMINAL_NUMBER IS NULL THEN
         V_TERMINAL_ROW.TERMINAL_NUMBER := CCN_UI_INTERFACE_APP_PKG.TERMINAL_NUMBER_S;
      END IF;

      out_TERMINAL_rowtype  :=  v_TERMINAL_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERMINAL_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END TERMINAL_ROWTYPE_SP;


PROCEDURE TERRITORY_ROWTYPE_SP (
/******************************************************************************
    TERRITORY_ROWTYPE_SP

    This procedure Build a TERRITORY Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
changed : 07/17/2014 CCN Project, prod issue : territory vs close date
          Added a paramater to distinguish between business rule validation calls 
          and database update calls
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_territory_rowtype   OUT territory%ROWTYPE
,in_validation_flag      IN varchar2 DEFAULT 'N'
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_status_code status.status_code%type;
v_category    cost_center.CATEGORY%type;

v_territory_row   territory%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
 
/***  below is a list of all the fields in the table  ***/
               v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
      WHEN 'COST_CENTER_CODE'           THEN  v_territory_row.cost_center_code          := UPPER(v_row_value);
            WHEN 'CATEGORY'                   THEN  v_territory_row.CATEGORY                  := v_row_value;
            WHEN 'LEASE_CAR_INDICATOR'        THEN  v_territory_row.lease_car_indicator       := v_row_value;
            WHEN 'TERRITORY_TYPE_BUSN_CODE'   THEN  v_territory_row.territory_type_busn_code  := v_row_value;
            WHEN 'HOME_STORE'                 THEN  v_territory_row.home_store                := v_row_value;
             
        ELSE
            NULL;        
        END CASE;


      ELSE
        NULL ;
      END IF;

      END LOOP ;
--below code should be executed only during database udpate calls, not during validation
IF in_validation_flag = 'N' THEN      
      BEGIN
      SELECT status_code, CATEGORY INTO v_status_code, v_category
        FROM status s, cost_center cc
       WHERE UPPER(cc.cost_center_code) = UPPER(s.cost_center_code)
         AND s.expiration_date IS NULL
         AND UPPER(cc.cost_center_code) = UPPER(v_TERRITORY_row.cost_center_code);
      EXCEPTION WHEN others THEN
          v_status_code := NULL;
          v_category := NULL;
      END;
      IF v_TERRITORY_row.home_store IS NOT NULL THEN
         IF (v_status_code IN ('X','5') AND v_category = 'T') THEN
             v_TERRITORY_row.home_store := NULL;
         END IF;
      END IF;
END IF;
      
      out_TERRITORY_rowtype  :=  v_TERRITORY_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);      
      errpkg.raise_err(v_code, 'TERRITORY_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END TERRITORY_ROWTYPE_SP;


PROCEDURE TYPE_ROWTYPE_SP (
/******************************************************************************
    TYPE_ROWTYPE_SP

    This procedure Build a TYPE Rowtype ROW

    OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Type_ROWTYPE     -  Type Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           IN  varchar2 
,in_row_data             IN  varchar2 --sys.xmltype
,out_type_rowtype        OUT type%ROWTYPE
)
 IS 
 v_code number;
 v_errm varchar2(500);

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_type_row      type%ROWTYPE;
v_row_value     varchar2(500);
v_Row_data      sys.XMLTYPE := XMLTYPE(in_Row_data);

/*
-------------  Business Rules go here 
*/

BEGIN

      FOR table_fields_rec IN table_fields_cur LOOP

      IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN

           IF (table_fields_rec.data_type <> 'DATE') THEN

            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                            ; 
        ELSE          
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                           ; 
        END IF;
 
/***  below is a list of all the fields in the table  ***/
               v_row_value := common_tools.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
          CASE table_fields_rec.column_name
            WHEN 'COST_CENTER_CODE'   THEN  v_type_row.cost_center_code   := UPPER(v_row_value);
            WHEN 'TYPE_CODE'          THEN  v_type_row.type_code          := v_row_value;
            WHEN 'EFFECTIVE_DATE'     THEN  v_type_row.effective_date     := to_date(v_row_value,'MM-DD-YYYY');
            WHEN 'EXPIRATION_DATE'    THEN  v_type_row.expiration_date    := to_date(v_row_value,'MM-DD-YYYY');
            
        ELSE
            NULL;        
        END CASE;


      ELSE
        NULL ;
      END IF;

      END LOOP ;
      
      out_TYPE_rowtype  :=  v_TYPE_row;
      
  EXCEPTION
      WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TYPE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
            
END TYPE_ROWTYPE_SP;


--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

    PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
    TEST_COST_CENTER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the cost center table.  

created : 
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        IS                  

    BEGIN

          OPEN out_COST_CENTER_REF_CUR FOR
              SELECT * 
              FROM cost_center 
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);
              
          OPEN out_STORE_REF_CUR FOR
              SELECT * 
              FROM store 
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);              
      
    END TEST_COST_CENTER_S_SP;

--REMOVE TESTING

PROCEDURE CC_ADDTL_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDTL_TABLES_UI_SP  --   create/update tables
     impacted by cost center table changes/inserts VIA
   COST_CENTER_UI_UPSERT_SP.
        Procedure

    This procedure is intended to insert/update the database
     for the following tables when creating/updating the
     Cost_Center associated tables.
    Tables are as follows: 
            , ADMINISTRATION
            , STORE
            , OTHER
            , REAL_ESTATE
            , TERRITORY
            tables.  

created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 
   in_table_name          IN  varchar2   
  ,in_row_data           IN  varchar2  --sys.xmltype
  )
 IS

CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
 
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data);
v_row_value varchar2(500);
v_row_xml_frag sys.XMLTYPE;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--
v_xml_administration_frag clob;
v_xml_store_frag clob;
v_xml_other_frag clob;
v_xml_real_estate_frag clob;
v_xml_territory_frag clob;
--

V_TERRITORY_ROWTYPE            TERRITORY%ROWTYPE;
V_STORE_ROWTYPE                STORE%ROWTYPE;
V_OTHER_ROWTYPE                OTHER%ROWTYPE;
V_ADMINISTRATION_ROWTYPE       ADMINISTRATION%ROWTYPE;
V_REAL_ESTATE_ROWTYPE          REAL_ESTATE%ROWTYPE;
--
v_count integer := 1;
        
--  ADMINISTRATION insert/update process 

BEGIN

   --     for tables_rec in tables_cur loop 
    
    IF (v_Row_data.existsNode('/COST_CENTER_UI/' || in_table_name) = 1) THEN   
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| in_table_name).getCLOBVal();
     
       -- case tables_rec.table_name
        CASE in_table_name    
            WHEN 'ADMINISTRATION'     THEN v_xml_administration_frag := v_xml_frag;
            WHEN 'STORE'              THEN v_xml_store_frag := v_xml_frag;
            WHEN 'OTHER'            THEN v_xml_other_frag := v_xml_frag;
            WHEN 'REAL_ESTATE'    THEN v_xml_real_estate_frag := v_xml_frag;
            WHEN 'TERRITORY'        THEN v_xml_territory_frag := v_xml_frag;        
                    
        ELSE
            NULL;
        END CASE;
 
     
      
       BEGIN 
          IF V_XML_ADMINISTRATION_FRAG  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.ADMINISTRATION_I_SP (                            
                 NULL   
                , 'ADMINISTRATION' 
                , NULL
                , v_xml_administration_frag);    
         END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
           
            BEGIN
                       
              CCN_TABLE_IU_PKG.ADMINISTRATION_U_SP (                  
                     NULL   
                , 'ADMINISTRATION' 
                , NULL
                , v_xml_administration_frag); 
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADMINISTRATION Update Error' );
           END;
        END;

--  STORE insert/update process 
 
       BEGIN
        
          IF v_xml_store_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.STORE_I_SP (                            
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype);                    
          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
           
            BEGIN
              CCN_TABLE_IU_PKG.STORE_U_SP (                  
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype); 

            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'STORE Update Error' );
           END;
        END;

--  OTHER insert/update process 
 
       BEGIN
        
          IF v_xml_other_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.OTHER_I_SP (                            
                   NULL   
                , 'OTHER' 
                , NULL
                , v_xml_other_frag);              
             

          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
           
            BEGIN
              CCN_TABLE_IU_PKG.OTHER_U_SP (                  
                      NULL   
                , 'OTHER' 
                , NULL
                , v_xml_other_frag);              
                           

            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'OTHER Update Error' );
           END;
        END;

--  REAL_ESTATE insert/update process 
 
       BEGIN
        
          IF v_xml_real_estate_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.REAL_ESTATE_I_SP (                            
                 'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             

          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
          
            BEGIN
              CCN_TABLE_IU_PKG.REAL_ESTATE_U_SP (                  
               'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
  
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'REAL_ESTATE Update Error' );
           END;
        END;

--  TERRITORY insert/update process 
 
       BEGIN
        
          IF v_xml_territory_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.TERRITORY_I_SP (                            
                      'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                   
             
  
          END IF;
          
       EXCEPTION
       
          WHEN dup_val_on_index  THEN
           
            BEGIN
              CCN_TABLE_IU_PKG.TERRITORY_U_SP (                  
                    'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                        
               
 
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'TERRITORY Update Error' );
           END;
        END;
 END IF;
 
    EXCEPTION
    WHEN others THEN
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
          v_errm || ' ' ||
          ' Errors' );
  

END CC_ADDTL_TABLES_UI_SP;

PROCEDURE CC_ADDRESS_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDRESS_TABLES_UI_SP   --   create/update tables
     impacted by cost center table changes/inserts via 
   COST_CENTER_UI_UPSERT_SP.
        Procedure

    This procedure will add one address row singular
    for the following tables depending on category type : 
               ADDRESS_USA
            ,  ADDRESS_CAN
            ,  ADDRESS_MEX
            ,  ADDRESS_OTHER
           
            tables.  

created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
changed : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
*******************************************************************************/
 
 
in_table_name          IN  varchar2 
,in_row_data            IN  varchar2  --sys.xmltype
)
 IS
 
 CURSOR table_fields_cur IS

        SELECT column_name
          ,data_length column_size
          ,data_type
          FROM all_tab_columns
          WHERE TABLE_NAME = in_table_name
        ORDER BY column_id ASC
          ;
        
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data); 
v_row_xml_frag sys.XMLTYPE;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--

v_xml_addr_usa_frag clob;
v_xml_addr_mex_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
v_xml_addr_brb_frag clob;
--

V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%ROWTYPE;
V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%ROWTYPE;
V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%ROWTYPE;
V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%ROWTYPE;
V_ADDRESS_BRB_ROWTYPE       ADDRESS_BRB%ROWTYPE;
--
v_count integer := 1;
       
 BEGIN


 
    IF (V_ROW_DATA.EXISTSNODE('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| IN_TABLE_NAME) = 1) THEN 
        V_XML_FRAG := V_ROW_DATA.EXTRACT('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT').GETCLOBVAL();
         CASE in_table_name      
       
            WHEN 'ADDRESS_CAN'      THEN v_xml_addr_can_frag := v_xml_frag;
            WHEN 'ADDRESS_MEX'         THEN v_xml_addr_mex_frag := v_xml_frag;
            WHEN 'ADDRESS_USA'        THEN v_xml_addr_usa_frag := v_xml_frag;
            WHEN 'ADDRESS_OTHER'      THEN v_xml_addr_oth_frag := v_xml_frag;            
            WHEN 'ADDRESS_BRB'      THEN v_xml_addr_brb_frag := v_xml_frag;
        ELSE
            NULL;
        END CASE;
    
     
        BEGIN
        
          IF v_xml_addr_can_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (                            
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_CAN'
                 , NULL
                 , v_xml_addr_can_frag);                 
             
          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
            BEGIN
              CCN_TABLE_IU_PKG.ADDRESS_CAN_U_SP (                  
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_CAN'
                 , NULL
                 , v_xml_addr_can_frag);                          
               
             EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS CAN Update Error' );
           END;
        END;  

--  ADDRESS_MEX insert/update process 

       BEGIN
      
         IF v_xml_addr_mex_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (                            
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_MEX'
                 , NULL
                 , v_xml_addr_mex_frag);                 
             

          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
            BEGIN
              CCN_TABLE_IU_PKG.ADDRESS_MEX_U_SP (                  
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_MEX'
                 , NULL
                 , v_xml_addr_mex_frag);                          
               
 
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS MEX Update Error' );
           END;
        END;

--  ADDRESS_OTHER insert/update process 

       BEGIN
 
          IF v_xml_addr_oth_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (                            
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_OTHER'
                 , NULL
                 , v_xml_addr_oth_frag);                 
             

          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
            BEGIN
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_U_SP (                  
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_OTHER'
                 , NULL
                 , v_xml_addr_oth_frag);                          

            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS OTHER Update Error' );
           END;
        END;

--  ADDRESS_USA insert/update process 

       BEGIN  
          IF v_xml_addr_usa_frag  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (                            
                   NULL
                 , NULL
                 , NULL
                 , 'ADDRESS_USA'
                 , NULL
                 , v_xml_addr_usa_frag);                 
             

          END IF;
       EXCEPTION
          WHEN dup_val_on_index  THEN
            BEGIN
              CCN_TABLE_IU_PKG.ADDRESS_USA_U_SP (                  
                   NULL                      --in_cost_center
                 , NULL                      --in_address_type
                 , NULL                      --in_effective_date
                 , 'ADDRESS_USA'             --in_table_name
                 , NULL                      --in_row_date
                 , v_xml_addr_usa_frag);     --in_row_data   xml                   

            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS USA Update Error' );
           END;
        END;
  END IF;


    --ADDRESS_BRB insert/update process 
    BEGIN
        IF v_xml_addr_brb_frag IS NOT NULL THEN
            CCN_TABLE_IU_PKG.ADDRESS_BRB_I_SP(NULL,
                                              NULL,
                                              NULL,
                                              'ADDRESS_BRB',
                                              NULL,
                                              v_xml_addr_brb_frag);
        END IF;
    EXCEPTION
        WHEN dup_val_on_index  THEN
            BEGIN
                CCN_TABLE_IU_PKG.ADDRESS_BRB_U_SP(NULL,
                                                  NULL,
                                                  NULL,
                                                  'ADDRESS_BRB',
                                                  NULL,
                                                  v_xml_addr_brb_frag);
        EXCEPTION
            WHEN OTHERS THEN 
                 errpkg.raise_err(SQLCODE, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' || SQLERRM || ';  ' || 'ADDRESS BRB Update Error' );
        END;
    END;

    EXCEPTION
    WHEN others THEN
    
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
          v_errm || ',' ||
          ' Errors' );

 
END CC_ADDRESS_TABLES_UI_SP;

PROCEDURE ADDRESS_BRB_ROWTYPE_SP(
 /******************************************************************************
This procedure is intended to Insert new Barbados address records

created : 05/16/2016 jxc517 CCN Project Team....
changed : 
*******************************************************************************/
    in_cost_center    IN     ADDRESS_BRB.COST_CENTER_CODE%TYPE,
    in_address_type   IN     ADDRESS_BRB.ADDRESS_TYPE%TYPE,
    in_effective_date IN     ADDRESS_BRB.EFFECTIVE_DATE%TYPE,
    in_table_name     IN     VARCHAR2,
    in_row_date       IN     DATE,
    in_row_data       IN     VARCHAR2,
    out_address_type     OUT ADDRESS_BRB%ROWTYPE)
IS
    CURSOR table_fields_cur IS
        SELECT column_name
               ,data_length column_size
               ,data_type
          FROM all_tab_columns
         WHERE TABLE_NAME = in_table_name
         ORDER BY column_id ASC;

    v_address_brb_row  ADDRESS_BRB%ROWTYPE;
    v_row_value        VARCHAR2(500);
    v_row_data         SYS.XMLTYPE := XMLTYPE(in_row_data);
BEGIN
    FOR table_fields_rec IN table_fields_cur LOOP
        IF (v_row_data.EXISTSNODE('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN
            IF (table_fields_rec.data_type <> 'DATE') THEN
                v_row_value := v_row_data.EXTRACT('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').GETSTRINGVAL();
            ELSE
                v_row_value := v_row_data.EXTRACT('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').GETSTRINGVAL();
            END IF;
            v_row_value := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(v_row_value);
            CASE table_fields_rec.column_name
                WHEN 'COST_CENTER_CODE'  THEN  v_ADDRESS_BRB_row.COST_CENTER_CODE := UPPER(v_row_value);
                WHEN 'ADDRESS_TYPE'      THEN  v_ADDRESS_BRB_row.ADDRESS_TYPE     := v_row_value;
                WHEN 'EFFECTIVE_DATE'    THEN  v_ADDRESS_BRB_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE'   THEN  v_ADDRESS_BRB_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
                WHEN 'PREMISES'          THEN  v_ADDRESS_BRB_row.PREMISES         := v_row_value;
                WHEN 'AVENUE_LANE'       THEN  v_ADDRESS_BRB_row.AVENUE_LANE      := v_row_value;
                WHEN 'DISTRICT'          THEN  v_ADDRESS_BRB_row.DISTRICT         := v_row_value;
                WHEN 'PARISH'            THEN  v_ADDRESS_BRB_row.PARISH           := v_row_value;
                WHEN 'POSTAL_CODE'       THEN  v_ADDRESS_BRB_row.POSTAL_CODE      := v_row_value;
                WHEN 'VALID_ADDRESS'     THEN  v_ADDRESS_BRB_row.VALID_ADDRESS    := v_row_value;
                WHEN 'COUNTRY_CODE'      THEN  v_ADDRESS_BRB_row.COUNTRY_CODE     := v_row_value;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP ;
    out_address_type := v_address_brb_row;
EXCEPTION
    WHEN OTHERS THEN 
        ERRPKG.RAISE_ERR(SQLCODE,
                        'ADDRESS_BRB_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_table_name || '; ' || SQLERRM);
END ADDRESS_BRB_ROWTYPE_SP;

PROCEDURE ADDRESS_BRB_S_SP(
/*******************************************************************************
This procedure is intended to return a ref cursor with data from ADDRESS_BRB table

created : 05/16/2016 jxc517 CCN Project Team....
changed : 
*******************************************************************************/
    in_cost_center          IN     ADDRESS_BRB.COST_CENTER_CODE%TYPE,
    in_address_type         IN     ADDRESS_BRB.ADDRESS_TYPE%TYPE,
    out_address_brb_ref_cur    OUT REF_CURSOR)
IS
    v_curr_date  DATE := SYSDATE;
BEGIN
    OPEN out_address_brb_ref_cur FOR
       SELECT * 
         FROM ADDRESS_BRB
        WHERE UPPER(COST_CENTER_CODE)  = UPPER(in_cost_center)
          AND ADDRESS_TYPE             = NVL(in_address_type, ADDRESS_TYPE)
          AND ((EFFECTIVE_DATE <= v_curr_date OR ADDRESS_TYPE = 'F')
                AND
               (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE >= v_curr_date));
EXCEPTION
    WHEN OTHERS THEN 
      ERRPKG.RAISE_ERR(SQLCODE,
                       'ADDRESS_BRB_S_SP, ' || ' ' || 'COST_CENTER_CODE is ' || in_cost_center || ';  ' || 'ADDRESS_TYPE is '     || in_address_type || '; ' || SQLERRM);
END ADDRESS_BRB_S_SP;

PROCEDURE ADDRESS_BRB_I_SP(
/*******************************************************************************
This procedure is intended to insert new ADDRESS_BRB records

created : 05/16/2016 jxc517 CCN Project Team....
changed : 
*******************************************************************************/
    in_cost_center          IN       ADDRESS_BRB.COST_CENTER_CODE%TYPE,
    in_address_type         IN       ADDRESS_BRB.ADDRESS_TYPE%TYPE,
    in_effective_date       IN       ADDRESS_BRB.EFFECTIVE_DATE%TYPE,
    in_table_name           IN       VARCHAR2,
    in_row_date             IN       DATE,
    in_row_data             IN       VARCHAR2)
IS
    v_address_brb_row ADDRESS_BRB%ROWTYPE; 
    v_sysdate         DATE := TRUNC(SYSDATE);
    v_prev_table      VARCHAR2(20);
    v_row_data        SYS.XMLTYPE := XMLTYPE(in_row_data);
    v_xml_frag        CLOB;
    v_count           INTEGER := 1;
    
BEGIN
    --LOOP Once for each occurrence of <ADDRESS_BRB> in the passed XML
    WHILE v_row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_BRB' || '[' || v_count || ']') = 1 LOOP
        v_xml_frag := v_row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_BRB' || '[' || v_count || ']').GETCLOBVAL();
        --  convert XML to ROWTYPE --
        CCN_TABLE_IU_PKG.ADDRESS_BRB_ROWTYPE_SP(in_cost_center
                                               ,in_address_type
                                               ,in_effective_date
                                               ,in_table_name
                                               ,in_row_date
                                               ,v_xml_frag
                                               ,v_address_brb_row);
        --Expire currently active ADDRESS_BRB Record before insert --
        v_prev_table := COMMON_TOOLS.ADDRESS_LOOK_UP_FNC(v_address_brb_row.COST_CENTER_CODE);
        COMMON_TOOLS.EXPIRE_DATA_SP(NVL(v_prev_table, 'ADDRESS_BRB')
                                    ,v_address_brb_row.COST_CENTER_CODE
                                    ,v_address_brb_row.EFFECTIVE_DATE
                                    ,v_address_brb_row.ADDRESS_TYPE);
        --  Insert new ADDRESS_OTHER row --
        BEGIN
            INSERT INTO ADDRESS_BRB VALUES v_address_brb_row;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                BEGIN
                    UPDATE ADDRESS_BRB
                       SET EXPIRATION_DATE = NULL
                           ,PREMISES       = v_address_brb_row.PREMISES
                           ,AVENUE_LANE    = v_address_brb_row.AVENUE_LANE
                           ,DISTRICT       = v_address_brb_row.DISTRICT
                           ,PARISH         = v_address_brb_row.PARISH
                           ,POSTAL_CODE    = v_address_brb_row.POSTAL_CODE
                           ,VALID_ADDRESS  = v_address_brb_row.VALID_ADDRESS
                           ,COUNTRY_CODE   = v_address_brb_row.COUNTRY_CODE
                     WHERE UPPER(COST_CENTER_CODE) = UPPER(v_address_brb_row.COST_CENTER_CODE)
                       AND ADDRESS_TYPE            = v_address_brb_row.ADDRESS_TYPE
                       AND EFFECTIVE_DATE          = v_address_brb_row.EFFECTIVE_DATE;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_BRB_I_SP, ' || ' ' || SQLERRM || ';  ' || 'ADDRESS USA Update Error' );
                END;
        END;
        v_count := v_count + 1;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN 
        ERRPKG.RAISE_ERR(SQLCODE,
                         'ADDRESS_BRB_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_table_name || '; ' || SQLERRM);
END ADDRESS_BRB_I_SP;

PROCEDURE ADDRESS_BRB_U_SP(
/*******************************************************************************
This procedure is intended to Update Barbados address records

created : 05/16/2016 jxc517 CCN Project Team....
changed : 
*******************************************************************************/
    in_cost_center    IN        ADDRESS_BRB.COST_CENTER_CODE%TYPE,
    in_address_type   IN        ADDRESS_BRB.ADDRESS_TYPE%TYPE,
    in_effective_date IN        ADDRESS_BRB.EFFECTIVE_DATE%TYPE,
    in_table_name     IN        VARCHAR2,
    in_row_date       IN        DATE,
    in_row_data       IN        VARCHAR2)
IS
    v_address_brb_row address_brb%ROWTYPE;
BEGIN
    -- Convert XML to ROWTYPE --
    ADDRESS_BRB_ROWTYPE_SP(in_cost_center
                           ,in_address_type
                           ,in_effective_date
                           ,in_table_name
                           ,in_row_date
                           ,in_row_data
                           ,v_address_brb_row);

    UPDATE ADDRESS_BRB
       SET ROW = v_address_brb_row
     WHERE UPPER(cost_center_code)     =  UPPER(in_cost_center)
       AND address_type                =  in_address_type
       AND effective_date              =  in_effective_date;
EXCEPTION
    WHEN OTHERS THEN 
      ERRPKG.RAISE_ERR(SQLCODE,
                       'ADDRESS_BRB_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || in_table_name || '; ' || SQLERRM);
END ADDRESS_BRB_U_SP;

END CCN_TABLE_IU_PKG;