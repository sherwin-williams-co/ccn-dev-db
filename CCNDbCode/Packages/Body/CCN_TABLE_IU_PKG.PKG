package BODY CCN_TABLE_IU_PKG 
    as
-- PACKAGE BODY
/****************************************************************************** 
This package is intended to control access to the core CCN table.

created : 09/18/2012 TAL -- CCN coding project
revised : 12/20/2012 MDH -- Add EXPIRE_DATA_SP procedure 
*******************************************************************************/

	PROCEDURE All_TABLE_COL_S_SP (
/*******************************************************************************
	All_TABLE_COL_S_SP
	
	This procedure is intended to return a ref cursor with data from 
	from the all_table_col table.  

created : 04/26/2012 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
			in_TABLE_NAME IN ALL_TAB_COLUMNS.TABLE_NAME%TYPE
			,out_ALL_TAB_REF_CUR OUT REF_CURSOR	)
    is                  
		v_code number;
		v_errm varchar2(500);

	BEGIN

		  OPEN out_ALL_TAB_REF_CUR FOR
			  
		  SELECT DECODE(COLUMN_NAME,'EFFECTIVE_DATE',TABLE_NAME || '_' || COLUMN_NAME
		  							,'EXPIRATION_DATE',TABLE_NAME || '_' || COLUMN_NAME
		  							, COLUMN_NAME) AS COLUMN_NAME
		      	FROM all_tab_columns
    	  		WHERE TABLE_NAME = in_table_name
    		    order by column_id asc;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_S_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	END All_TABLE_COL_S_SP;

	PROCEDURE ADDRESS_CAN_S_SP  ( IN_COST_CENTER          IN  ADDRESS_CAN.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_CAN.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_CAN_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	ADDRESS_CAN_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_CAN table.  

created : 11/15/2010 kdp CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN
     
   OPEN out_ADDRESS_CAN_REF_CUR FOR
			  
		 SELECT * 
     FROM ADDRESS_CAN AC
	  		 WHERE COST_CENTER_CODE  = IN_COST_CENTER
         AND  ADDRESS_TYPE      = NVL(IN_ADDRESS_TYPE, AC.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
	 		    );
              
  EXCEPTION	  
      WHEN others THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);  
	END ADDRESS_CAN_S_SP;


	PROCEDURE ADDRESS_MEX_S_SP  ( IN_COST_CENTER          IN  ADDRESS_MEX.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_MEX.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_MEX_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_MEX table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_MEX_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_MEX AM
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AM.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	
  EXCEPTION   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
	END ADDRESS_MEX_S_SP;


	PROCEDURE ADDRESS_OTHER_S_SP  ( IN_COST_CENTER            IN  ADDRESS_OTHER.COST_CENTER_CODE%TYPE
                                , IN_ADDRESS_TYPE           IN  ADDRESS_OTHER.ADDRESS_TYPE%TYPE
                                , OUT_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_OTHER table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_OTHER AO
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AO.ADDRESS_TYPE) 
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
 
  EXCEPTION
   	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP, ' || ' ' ||
             'COST_CENTER_CODE iFs ' || IN_COST_CENTER || ';  ' || 
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
	END ADDRESS_OTHER_S_SP;


	PROCEDURE ADDRESS_USA_S_SP  ( IN_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE
                              , out_ADDRESS_USA_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_USA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_USA table.  

created : 03/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_USA_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_USA AU
			  WHERE COST_CENTER_CODE = IN_COST_CENTER
			   AND ADDRESS_TYPE = NVL(IN_ADDRESS_TYPE, AU.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	
  EXCEPTION  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
    
	END ADDRESS_USA_S_SP;


	PROCEDURE ADMINISTRATION_S_SP (in_COST_CENTER IN ADMINISTRATION.COST_CENTER_CODE%TYPE
							,out_ADMINISTRATION_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADMINISTRATION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADMINISTRATION table.  

created : 03/20/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_ADMINISTRATION_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADMINISTRATION
			  where cost_center_code = in_COST_CENTER;
    	    
  EXCEPTION   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	end administration_s_sp;

	
  PROCEDURE BANK_CARD_S_SP  ( IN_COST_CENTER          IN  BANK_CARD.COST_CENTER_CODE%TYPE
                            , IN_POLLING_STATUS_CODE  IN  BANK_CARD.POLLING_STATUS_CODE%TYPE
                            , IN_MERCHANT_ID_CODE     IN  BANK_CARD.MERCHANT_ID%TYPE
                            , OUT_BANK_CARD_REF_CUR   OUT REF_CURSOR)
/*******************************************************************************
	BANK_CARD_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the bank_card table.  

created : 03/21/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_curr_date date := sysdate;
 
	BEGIN

		  OPEN out_BANK_CARD_REF_CUR FOR
			  
			  SELECT * 
			  from bank_card
			  where cost_center_code    = in_cost_center
			   and  polling_status_code = in_polling_status_code
         and  merchant_id         = nvl(in_merchant_id_code, bank_card.merchant_id)
			   and (effective_date     <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	 
 EXCEPTION  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BANK_CARD_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center || ';  ' || 
             'POLLING_STATUS_CODE is '  || in_polling_status_code || ';  ' || 
             'MERCHANT_ID_CODE is '     || in_merchant_id_code
             || '; ' || v_errm
             );

	END BANK_CARD_S_SP;
  

PROCEDURE BATCH_JOB_S_SP (in_batch_job_name     in  batch_job.batch_job_name%type
                        , in_batch_job_number   in  batch_job.batch_job_number%type
			, out_BATCH_JOB_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	BATCH_JOB_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the BATCH_JOB table.  

created : 07/18/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_input_row  varchar2(30);
	BEGIN
            
		  OPEN out_BATCH_JOB_REF_CUR FOR
			  
			  SELECT * 
			  FROM BATCH_JOB
			  where batch_job_name = in_batch_job_name
			  and batch_job_number = in_batch_job_number;
	  
 EXCEPTION 
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_S_SP, ' || ' ' ||
             'BATCH_JOB_NAME is ' || in_BATCH_JOB_NAME || ';  ' ||
             'BATCH_JOB_NUMBER is ' || in_BATCH_JOB_NUMBER, v_errm);
                      
	END BATCH_JOB_S_SP;


PROCEDURE CODE_DETAIL_S_SP ( in_CODE_HEADER_NAME      IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
			   , in_CODE_HEADER_TYPE      IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
			   , in_CODE_DETAIL_VALUE     IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
			  , out_CODE_DETAIL_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	CODE_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_DETAIL table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_DETAIL
			  where code_header_name   =  in_CODE_HEADER_NAME
                           and  code_header_type   =  in_CODE_HEADER_TYPE
                           and  code_detail_value  =  in_CODE_DETAIL_VALUE ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,      'CODE_DETAIL_S_SP, '  || ' ' ||            
             'CODE_HEADER_NAME is '  || in_code_header_name || ';  ' ||
             'CODE_HEADER_TYPE is '  || in_code_header_type || ';  '  ||
             'CODE_DETAIL_VALUE is ' || in_CODE_DETAIL_VALUE || '; ' || v_errm);
                     
	END CODE_DETAIL_S_SP;


PROCEDURE CODE_HEADER_S_SP (in_CODE_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
                          , in_CODE_HEADER_TYPE in CODE_HEADER.CODE_HEADER_TYPE%TYPE
							,out_CODE_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	CODE_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_HEADER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_HEADER
			  where code_header_name = in_CODE_HEADER_NAME
                           and  code_header_type = in_CODE_HEADER_TYPE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, ' CODE_HEADER_S_SP, ' || ' ' ||
             'CODE_HEADER_NAME is ' || in_CODE_HEADER_NAME || ';  ' ||
             'CODE_HEADER_TYPE is ' || in_CODE_HEADER_TYPE || '; ' || v_errm    );
                     
	END CODE_HEADER_S_SP;


	PROCEDURE COST_CENTER_S_SP (in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
				, out_COST_CENTER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 11/15/2011 kdp CCN Project....
*******************************************************************************/
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
	  
	END COST_CENTER_S_SP;


PROCEDURE EMP_DATA_S_SP (in_EMPLOYEE_NUMBER IN EMP_DATA.EMPLOYEE_NUMBER%TYPE
							,out_EMP_DATA_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	EMP_DATA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the EMP_DATA table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_EMP_DATA_REF_CUR FOR
			  
			  SELECT * 
			  FROM EMP_DATA
			  where employee_number = in_EMPLOYEE_NUMBER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_S_SP, ' || ' ' ||
             'EMPLOYEE_NUMBER is ' || in_EMPLOYEE_NUMBER || '; ' || v_errm);
                     
	END EMP_DATA_S_SP;


PROCEDURE HIERARCHY_DESCRIPTION_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE
                        , in_HRCHY_HDR_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
 			, out_HIERARCHY_DESCRIPT_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_DESCRIPTION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DESCRIPTION table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DESCRIPT_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DESCRIPTION
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_hdr_lvl_nbr     = in_HRCHY_HDR_lvl_nbr ;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_DESCRIPTION_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_HDR_LVL_NBR is '  ||  in_HRCHY_HDR_LVL_NBR || '; ' || v_errm);
                     
	END HIERARCHY_DESCRIPTION_S_SP;


PROCEDURE HIERARCHY_DETAIL_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
          ,in_HRCHY_DTL_LEVEL         HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
          ,in_HRCHY_DTL_PREV_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
          ,in_HRCHY_DTL_CURR_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
          ,in_HRCHY_DTL_NEXT_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE
          ,in_HRCHY_DTL_EFF_DATE      HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE                  
 			, out_HIERARCHY_DETAIL_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	HIERARCHY_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DETAIL table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DETAIL
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_dtl_level        = in_HRCHY_DTL_LEVEL
          and hrchy_dtl_prev_lvl_val = in_HRCHY_DTL_PREV_LVL_VAL
          and hrchy_dtl_curr_lvl_val = in_HRCHY_DTL_CURR_LVL_VAL
          and hrchy_dtl_next_lvl_val = in_HRCHY_DTL_NEXT_LVL_VAL
          and hrchy_dtl_eff_date     = in_HRCHY_DTL_EFF_DATE;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_DETAIL_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_DTL_LEVEL is '  ||  in_HRCHY_DTL_LEVEL || ';  ' ||
             'HRCHY_DTL_PREV_LVL_VAL is '  ||  in_HRCHY_DTL_PREV_LVL_VAL || ';  ' ||
             'HRCHY_DTL_CURR_LVL_VAL is '  ||  in_HRCHY_DTL_CURR_LVL_VAL || ';  ' ||
             'HRCHY_DTL_NEXT_LVL_VAL is '  ||  in_HRCHY_DTL_NEXT_LVL_VAL || ';  ' ||
             'HRCHY_DTL_EFF_DATE is '      ||  in_HRCHY_DTL_EFF_DATE || '; ' || v_errm);
                     
	END HIERARCHY_DETAIL_S_SP;


PROCEDURE HIERARCHY_HEADER_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE
  			, out_HIERARCHY_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_HEADER table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_HEADER
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME); 
			 
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_HEADER_S_SP, ' || ' ' ||
             'HRCHY_HDR_NAME is ' || in_hrchy_hdr_name || '; ' || v_errm);
                     
	END HIERARCHY_HEADER_S_SP;


 
PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER                 IN  MARKETING.COST_CENTER_CODE%TYPE
                          , IN_MARKETING_TYPE              IN  MARKETING.MARKETING_TYPE%TYPE                          
                          , OUT_MARKETING_REF_CUR          IN  OUT sys_refcursor)
/*******************************************************************************
	MARKETING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the MARKETING table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
changed : 05/29/2013 BLR CCNA-408 add marketing fields via record expansion. 
          Fields are mkt_brand, mkt_mission, mkt_sales_floor_size,
          mkt_warehouse_size, & mkt_real_estate_setting.
*******************************************************************************/
        as                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;
MKT_STATS varchar2(07);
MKT_ROW    MARKETING%ROWTYPE;

	BEGIN

		  OPEN OUT_MARKETING_REF_CUR FOR
			  
			  select  S.*  
               ,( S.mkt_brand || S.mkt_mission || S.mkt_sales_floor_size || 
                  S.mkt_warehouse_size || S.mkt_real_estate_setting) as MKT_STATS
               from MARKETING S              
			  where S.cost_center_code        = in_cost_center         
         and  S.marketing_type          = nvl(in_marketing_type, marketing_type) 
			   and (S.effective_date         <=  v_curr_date  
			   and (S.expiration_date is null or expiration_date  >=  v_curr_date)
  );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,     'MARKETING_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER   || ';  ' ||
             'MARKETING_TYPE is '   || in_MARKETING_TYPE || '; ' || v_errm);
                     
	END MARKETING_S_SP;

PROCEDURE OTHER_S_SP (in_COST_CENTER IN OTHER.COST_CENTER_CODE%TYPE
							,out_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the OTHER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM OTHER
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END OTHER_S_SP;



PROCEDURE PHONE_S_SP (in_COST_CENTER IN PHONE.COST_CENTER_CODE%TYPE
							,out_PHONE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	PHONE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the PHONE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_PHONE_REF_CUR FOR
			  
			  SELECT * 
			  FROM PHONE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END PHONE_S_SP;


PROCEDURE POLLING_S_SP (in_COST_CENTER IN POLLING.COST_CENTER_CODE%TYPE
					,in_POLLING_STATUS_CODE IN OUT POLLING.POLLING_STATUS_CODE%TYPE
					, out_POLLING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling table.  

created : 11/15/2010 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);


	BEGIN
         
	     	  SELECT POLLING_STATUS_CODE INTO in_POLLING_STATUS_CODE
	     	  FROM POLLING a
			  where a.cost_center_code = in_COST_CENTER
			  and a.polling_status_code = NVL(in_POLLING_STATUS_CODE,polling_status_code)
			  and current_flag = 'Y';
	
	
		  OPEN out_POLLING_REF_CUR FOR
			  
			  SELECT * 
			  FROM POLLING a
			  where a.cost_center_code = in_COST_CENTER
			  and a.polling_status_code = NVL(in_POLLING_STATUS_CODE,polling_status_code)
			  and current_flag = 'Y';
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_S_SP, '		|| ' ' ||
		'COST_CENTER_CODE is ' 	|| in_COST_CENTER || ';  ' ||
		'POLLING_STATUS_CODE is '	|| in_POLLING_STATUS_CODE || '; ' || v_errm);
                     	  
	END POLLING_S_SP;
  
PROCEDURE POLLING_DWLD_RSN_HIST_S_SP ( in_cost_center         in polling_dwld_rsn_hist.cost_center_code%type
					                           , in_polling_status_code in polling_dwld_rsn_hist.polling_status_code%type
					                           , in_effective_date      in polling_dwld_rsn_hist.effective_date%type, out_POLLING_DWLD_RSN_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling_dwld_rsn_hist table.  

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_POLLING_DWLD_RSN_REF_CUR FOR
			  
			  select * 
			  from polling_dwld_rsn_hist
			  where cost_center_code     = in_cost_center
			   and  polling_status_code  = in_polling_status_code
         and  effective_date       = in_effective_date  ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_DWLD_RSN_HIST_S_SP, '	|| ' ' ||
		'COST_CENTER_CODE is '    || in_cost_center || ';  ' ||
		'POLLING_STATUS_CODE is '	|| in_polling_status_code || ';  ' ||
    'EFFECTIVE_DATE is '      || in_effective_date || '; ' || v_errm );
                     	  
	END POLLING_DWLD_RSN_HIST_S_SP;

PROCEDURE REAL_ESTATE_S_SP (in_COST_CENTER IN REAL_ESTATE.COST_CENTER_CODE%TYPE
							,out_REAL_ESTATE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	REAL_ESTATE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the REAL_ESTATE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_REAL_ESTATE_REF_CUR FOR
			  
			  SELECT * 
			  FROM REAL_ESTATE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'REAL_ESTATE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END REAL_ESTATE_S_SP;


PROCEDURE SALES_REP_S_SP  ( IN_GEMS_EMPLOYEE_ID   IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE
                          , OUT_SALES_REP_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	SALES_REP_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the SALES_REP table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_SALES_REP_REF_CUR FOR
			  
			  SELECT * 
			  from sales_rep
			  where gems_employee_id = in_gems_employee_id 
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_S_SP, ' || ' ' ||
             'GEMS_EMPLOYEE_ID is ' || in_GEMS_EMPLOYEE_ID || '; ' || v_errm);
                     
	END SALES_REP_S_SP;


PROCEDURE   STATUS_S_SP ( IN_COST_CENTER     IN  STATUS.COST_CENTER_CODE%TYPE
                        , IN_STATUS_CODE     IN  STATUS.STATUS_CODE%TYPE
                        , OUT_STATUS_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STATUS_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STATUS table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_STATUS_REF_CUR FOR
			  
			  SELECT * 
			  from status
			  where cost_center_code  =  in_cost_center  
			  and status_code         =  nvl(in_status_code, status.status_code) 
			  and (effective_date    <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'STATUS_S_SP, ' || ' ' ||
		'COST_CENTER_CODE is ' || in_COST_CENTER  || ';  ' ||
		'STATUS_CODE is '      || in_STATUS_CODE || '; ' || v_errm);
                     
	END STATUS_S_SP;


PROCEDURE STORE_S_SP (in_COST_CENTER IN STORE.COST_CENTER_CODE%TYPE
							,out_STORE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STORE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STORE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_STORE_REF_CUR FOR
			  
			  SELECT * 
			  FROM STORE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END STORE_S_SP;


PROCEDURE TAXWARE_S_SP (in_COST_CENTER IN TAXWARE.COST_CENTER_CODE%TYPE
		      ,out_TAXWARE_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	TAXWARE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TAXWARE table.  

created : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_TAXWARE_REF_CUR FOR
			  
			  SELECT * 
			  FROM TAXWARE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END TAXWARE_S_SP;


PROCEDURE TERMINAL_S_SP ( IN_COST_CENTER_CODE   IN  TERMINAL.COST_CENTER_CODE%TYPE
                        , IN_POLLING_STATUS_CD  IN  TERMINAL.POLLING_STATUS_CODE%TYPE
                        , IN_TERMINAL_NUMBER    IN  TERMINAL.TERMINAL_NUMBER%TYPE
                        , OUT_TERMINAL_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERMINAL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERMINAL  table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  

  v_code    number;
  v_errm    varchar2(500); 
  v_curr_date date := sysdate;

	BEGIN

		  OPEN OUT_TERMINAL_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERMINAL
			  where cost_center_code = in_COST_CENTER_CODE
			  and  polling_status_code = in_polling_status_cd  
			  and  terminal_number = nvl(in_terminal_number, terminal.terminal_number) 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
        errpkg.raise_err(v_code, 'TERMINAL_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center_code  || ';  ' ||
             'POLLING STATUS CODE is '  || in_polling_status_cd || ';  ' ||
             'TERMINAL NUMBER is '      || in_terminal_number 
             || '; ' || v_errm);

              
	END  TERMINAL_S_SP;


PROCEDURE TERRITORY_S_SP ( in_terr_sls_mgr_cd  TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,in_terr_cc TERRITORY.COST_CENTER_CODE%TYPE            
                                     ,out_TERRITORY_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY table.  

created : 03/22/2012 BLR CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure 
		  05/02/2013 kdp corrected query.	
*******************************************************************************/

      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    


	BEGIN

		  OPEN out_TERRITORY_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY
			  where cost_center_code = in_TERR_cc
			  and TERRITORY_SLS_MGR_CODE = NVL(in_TERR_SLS_MGR_CD,TERRITORY_SLS_MGR_CODE );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
         errpkg.raise_err(v_code, 'TERRITORY_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_TERR_CC || ';  ' ||
             'SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD || '; ' || v_errm);
             
	END;-- TERRITORY_S_SP;


PROCEDURE TERRITORY_ASSIGNMENT_S_SP ( IN_TERR_SLS_MGR_CD      IN  TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,IN_COST_CENTER          IN  TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE                                     
                                     ,IN_GEMS_EMP_ID          IN  TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
                                     ,OUT_TERR_ASSIGN_REF_CUR OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_ASSIGNMENT_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_ASSIGNMENT table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
       is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);
  v_curr_date date := sysdate;   


	BEGIN

		  OPEN out_TERR_assign_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_ASSIGNMENT
			  where cost_center_code = IN_COST_CENTER
			  and TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD
			  and gems_employee_id = in_gems_emp_id
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	Errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_S_SP, ' || ' ' ||
	     'TERRITORY SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD || ';  ' ||
       'COST CENTER CODE is ' || IN_COST_CENTER || ';  ' ||             
	     'GEMS EMPLOYEE ID is ' || in_gems_EMP_ID || '; ' || v_errm);
              
	END TERRITORY_ASSIGNMENT_S_SP;


PROCEDURE TERRITORY_SALES_MGR_S_SP  ( IN_TERR_SLS_MGR_CD        IN  TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
      				           				    , OUT_TERR_SLS_MGR_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERRITORY_SALES_MGR_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_SALES_MGR table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500); 
  v_curr_date date := sysdate;   

	BEGIN

		  OPEN out_TERR_SLS_MGR_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_SALES_MGR
			  where TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
			  
  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_S_SP, ' || ' ' ||
             'SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD
             || '; ' || v_errm);

              
	END  TERRITORY_SALES_MGR_S_SP;

PROCEDURE  TYPE_S_SP ( 
           IN_COST_CENTER   IN TYPE.COST_CENTER_CODE%TYPE 
          ,IN_TYPE_CODE     IN TYPE.TYPE_CODE%TYPE
          ,OUT_TYPE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	TYPE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TYPE table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    
  v_curr_date date := sysdate;

	BEGIN

		  OPEN out_Type_REF_CUR FOR
			  
			  select * 
			  from type
			  WHERE COST_CENTER_CODE = IN_COST_CENTER  
         and  type_code        = nvl(in_type_code, type.type_code)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TYPE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'TYPE CODE is ' || in_TYPE_CODE || '; ' || v_errm);    
              
	END;-- TYPE_S_SP;

/*++++++++++++++++++++++++
INSERTS (ADDS)
+++++++++++++++++++++++*/


procedure ADDRESS_CAN_I_SP ( 
/*******************************************************************************
	ADDRESS_CAN_I_SP

	This procedure is intended to Insert new Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/27/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_CAN> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_CAN' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_CAN' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_CAN_ROWTYPE_SP ( 
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_CAN_row        
					);
--
--  Expire currently active ADDRESS_CAN Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_CAN'
		 , v_address_can_row.COST_CENTER_CODE
     , v_address_can_row.EFFECTIVE_DATE
     , v_address_can_row.ADDRESS_TYPE);
--
  --Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_CAN values v_address_can_row ;    
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_CAN SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_CAN_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_CAN_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_CAN_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_CAN_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_CAN_row.CITY
									, PROVINCE_CODE = v_ADDRESS_CAN_row.PROVINCE_CODE
									, POSTAL_CODE = v_ADDRESS_CAN_row.POSTAL_CODE
									, VALID_ADDRESS = v_ADDRESS_CAN_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_CAN_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_CAN_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_CAN_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_CAN_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS CAN Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS CAN Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_CAN_I_SP;


procedure ADDRESS_MEX_I_SP ( 
/******************************************************************************
	ADDRESS_MEX_I_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 10/02/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure 
          changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_MEX> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_MEX' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_MEX' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_MEX_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_MEX_row        
					);
--
--  Expire currently active ADDRESS_CAN Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_MEX'
		 , v_address_mex_row.COST_CENTER_CODE
     , v_address_mex_row.EFFECTIVE_DATE
     , v_address_mex_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_MEX values v_address_mex_row;    
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_MEX SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_MEX_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_MEX_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_MEX_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_MEX_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_MEX_row.CITY
									, PROVINCE_CODE = v_ADDRESS_MEX_row.PROVINCE_CODE
									, POSTAL_CODE = v_ADDRESS_MEX_row.POSTAL_CODE
									, VALID_ADDRESS = v_ADDRESS_MEX_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_MEX_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_MEX_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_MEX_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_MEX_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS MEX Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS MEX Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_MEX_I_SP;


procedure ADDRESS_OTHER_I_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_I_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_OTHER> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_OTHER' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_OTHER' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_OTHER_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_OTHER_row        
					);
--
--  Expire currently active ADDRESS_OTHER Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_OTHER'
		 , v_address_other_row.COST_CENTER_CODE
     , v_address_other_row.EFFECTIVE_DATE
     , v_address_other_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_OTHER values v_address_other_row;    
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_OTHER SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_OTHER_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_OTHER_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_OTHER_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_OTHER_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_OTHER_row.CITY
									, PROVINCE_CODE = v_ADDRESS_OTHER_row.PROVINCE_CODE
									, STATE_CODE = v_ADDRESS_OTHER_row.STATE_CODE
									, POSTAL_CODE = v_ADDRESS_OTHER_row.POSTAL_CODE
									, VALID_ADDRESS = v_ADDRESS_OTHER_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_OTHER_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_OTHER_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_OTHER_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_OTHER_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS USA Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS OTHER Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_OTHER_I_SP;


PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
	ADDRESS_USA_I_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
		: 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 kdp upgraded to work with multiple address and updates
*******************************************************************************/
in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_ADDRESS_USA_row ADDRESS_USA%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_USA> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_USA_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_USA_row        
					);
				
--  Expire currently active ADDRESS_USA Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_USA'
		 , v_address_usa_row.COST_CENTER_CODE
     , v_address_usa_row.EFFECTIVE_DATE
     , v_address_usa_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_USA values v_ADDRESS_USA_row;     
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_USA SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_USA_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_USA_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_USA_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_USA_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_USA_row.CITY
									, STATE_CODE = v_ADDRESS_USA_row.STATE_CODE
									, ZIP_CODE = v_ADDRESS_USA_row.ZIP_CODE
									, ZIP_CODE_4 = v_ADDRESS_USA_row.ZIP_CODE_4
									, COUNTY = v_ADDRESS_USA_row.COUNTY
									, FIPS_CODE = v_ADDRESS_USA_row.FIPS_CODE
									, DESTINATION_POINT = v_ADDRESS_USA_row.DESTINATION_POINT
									, CHECK_DIGIT = v_ADDRESS_USA_row.CHECK_DIGIT
									, VALID_ADDRESS = v_ADDRESS_USA_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_USA_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_USA_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_USA_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_USA_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS USA Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS USA Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
END ADDRESS_USA_I_SP;
 
 
 procedure ADMINISTRATION_I_SP (
/*******************************************************************************
	ADMINISTRATION_I_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/01/2012 mdh CCN Project....
revised :10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_administration_row administration%rowtype;
--
--v_row_value 	varchar2(500);
--
--
begin
--
-- Convert XML to ROWTYPE --
   ADMINISTRATION_ROWTYPE_SP (
	 in_COST_CENTER     
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_administration_row
	);

      
      INSERT into ADMINISTRATION values v_administration_row;
      
       
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end ADMINISTRATION_I_SP;				 
				
 
 procedure BANK_CARD_I_SP (
/*******************************************************************************
	BANK_CARD_I_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_bank_card_row bank_card%rowtype;
--
--
begin
-- 
--dbms_output.put_line('before rowtype bank card');
-- Convert XML to ROWTYPE --
       BANK_CARD_ROWTYPE_SP (
		 in_COST_CENTER          
		,in_POLLING_STATUS_CODE   
		,in_MERCHANT_ID           
		,in_EFFECTIVE_DATE 
		,in_TABLE_NAME  
		,in_ROW_DATE    
		,in_Row_data   
		,v_bank_card_row 
		);
--
-- 
--dbms_output.put_line('after rowtype bank card');
--  Expire currently active BANK_CARD Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'BANK_CARD'
		 , v_bank_card_row.COST_CENTER_CODE
     , v_bank_card_row.EFFECTIVE_DATE);
--
--  Insert new BANK_CARD row --  
		--dbms_output.put_line('before insert bank card');
		v_bank_card_row.EFFECTIVE_DATE := sysdate;
		--dbms_output.put_line('v_bank_card_row.EFFECTIVE_DATE ' || v_bank_card_row.EFFECTIVE_DATE );
     
      INSERT into BANK_CARD values v_bank_card_row;
        
      --dbms_output.put_line('after insert bank card');
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_I_SP;				 
				
PROCEDURE BATCH_JOB_I_SP (
/*******************************************************************************
	BATCH_JOB_I_SP

	This procedure is intended to insert new BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

 --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
-- dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getstringval()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_batch_job_row.batch_job_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_batch_job_row.batch_job_status         := v_row_value;
--  	when 'BATCH_JOB_START_DATE'           then  v_batch_job_row.batch_job_start_date        := v_row_value;
      when 'BATCH_JOB_START_DATE'		        then  v_batch_job_row.batch_job_start_date	    	:= to_date(v_row_value,'YYYYMMDD');
--  	when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := to_date(v_row_value,'YYYYMMDD');
--			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := to_date(v_row_value,'YYYYMMDD');
--			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into BATCH_JOB values v_BATCH_JOB_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end BATCH_JOB_I_SP;

PROCEDURE CODE_DETAIL_I_SP (
/*******************************************************************************
	CODE_DETAIL_I_SP

	This procedure is intended to insert new CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_DETAIL values v_CODE_DETAIL_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_DETAIL_I_SP;

PROCEDURE CODE_HEADER_I_SP (
/*******************************************************************************
	CODE_HEADER_I_SP

	This procedure is intended to insert new CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_HEADER values v_CODE_HEADER_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_HEADER_I_SP;

PROCEDURE COST_CENTER_I_SP (
/*******************************************************************************
	COST_CENTER_I_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
*******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 

v_cost_center_row cost_center%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
 	COST_CENTER_ROWTYPE_SP (
 		in_COST_CENTER  
		,in_TABLE_NAME  
		,in_ROW_DATE    
		,in_Row_data    
		,v_cost_center_row  
);
--
--
-- Insert new COST_CENTER row --      
      insert into cost_center values v_cost_center_row;
      
      

end COST_CENTER_I_SP;

PROCEDURE EMP_DATA_I_SP (
/*******************************************************************************
	EMP_DATA_I_SP

	This procedure is intended to insert new EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into EMP_DATA values v_EMP_DATA_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end EMP_DATA_I_SP;

PROCEDURE MARKETING_I_SP (
/*******************************************************************************
	MARKETING_I_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
       MARKETING_ROWTYPE_SP (
	 in_cost_center          
	,in_marketing_type  
	,in_TABLE_NAME           
	,in_ROW_DATE              
	,in_Row_data              
	,v_MARKETING_row   
	);
--
--
--  Expire currently active MARKETING Record before insert --

dbms_output.put_line('v_marketing_row.COST_CENTER_CODE ' || v_marketing_row.COST_CENTER_CODE);
dbms_output.put_line('v_marketing_row.EFFECTIVE_DATE ' || v_marketing_row.EFFECTIVE_DATE);
dbms_output.put_line('v_marketing_row.CATEGORY ' || v_marketing_row.CATEGORY);
       

      COMMON_TOOLS.EXPIRE_DATA_SP (
      'MARKETING'
		 , v_marketing_row.COST_CENTER_CODE
     , v_marketing_row.EFFECTIVE_DATE);
--
--  Insert new MARKETING row -- 
dbms_output.put_line('before insert');
      insert into MARKETING values v_MARKETING_row;
dbms_output.put_line('after insert');      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
dbms_output.put_line('in others sqlcode ' || v_errm );        
	
end MARKETING_I_SP;

PROCEDURE OTHER_I_SP (
/*******************************************************************************
	OTHER_I_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
	 in_COST_CENTER          
	,v_OTHER_row
	,in_TABLE_NAME           
	,in_ROW_DATE            
	,in_Row_data             
	 );

      insert into OTHER values v_OTHER_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end OTHER_I_SP;				 
				

PROCEDURE PHONE_I_SP (
/*******************************************************************************
	PHONE_I_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -variable 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_PHONE_row PHONE%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
	in_COST_CENTER           
	,in_phone_number_type     
	,v_PHONE_row              
	,in_TABLE_NAME          
	,in_ROW_DATE             
	,in_Row_data              
	); 

      
      insert into PHONE values v_PHONE_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end PHONE_I_SP;
               

PROCEDURE POLLING_I_SP (
/*******************************************************************************
	POLLING_I_SP

	This procedure is intended to insert new POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created:  05/02/2012 tal CCN Project....
revised	: 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
		: 04/03/2013 BLR error message pointing to wrong procedure
        : 06/11/2013 kdp added insert row flag to identify currnet polling row
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_POLLING_row         out POLLING%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );
                   
      out_POLLING_row.current_flag := 'Y';            
                  
      insert into POLLING values out_POLLING_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end POLLING_I_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_I_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_I_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/


      for table_fields_rec in table_fields_cur loop

--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_I_SP;

 
PROCEDURE REAL_ESTATE_I_SP (
/******************************************************************************
	REAL_ESTATE_I_SP

	This procedure is intended to insert new REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_row     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      insert into REAL_ESTATE values out_REAL_ESTATE_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_I_SP;


PROCEDURE SALES_REP_I_SP (
/*****************************************************************************
	SALES_REP_I_SP

	This procedure is intended to insert new SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_row       out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWYTPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      insert into sales_rep values out_sales_rep_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end SALES_REP_I_SP;


PROCEDURE STATUS_I_SP (
/*****************************************************************************
	STATUS_I_SP

	This procedure is intended to insert new STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
revised: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
         12/20/2012 mdh - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_row     out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  STATUS_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_status_row 
                   );
--
--  Expire currently active STATUS Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'STATUS'
		 , out_status_row.COST_CENTER_CODE
     , out_status_row.EFFECTIVE_DATE);
--
--  Insert new STATUS row --                  
      insert into status values out_status_row;
      
      
    
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
end STATUS_I_SP;
        

PROCEDURE STORE_I_SP (
/*****************************************************************************
	STORE_I_SP

	This procedure is intended to insert new STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_store_row     out store%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_store_row 
                   );
                  
      insert into store values out_store_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
 
 end STORE_I_SP;
 

PROCEDURE TAXWARE_I_SP (
/*****************************************************************************
	TAXWARE_I_SP

	This procedure is intended to insert new TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_taxware_row     out taxware%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_taxware_row 
                   );
                  
      insert into taxware values out_taxware_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
             
	end TAXWARE_I_SP;
  

PROCEDURE TERMINAL_I_SP (
/*****************************************************************************
	TERMINAL_I_SP

	This procedure is intended to insert new terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_row     out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
      insert into terminal values out_terminal_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        

end TERMINAL_I_SP;


PROCEDURE TERRITORY_I_SP (
/******************************************************************************
	TERRITORY_I_SP

	This procedure is intended to insert new TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,IN_ROW_DATA             IN  VARCHAR2 --sys.xmltype
,out_territory_row       out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      insert into territory values out_territory_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_I_SP;


PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_I_SP

	This procedure is intended to insert new territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/04/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ASSIGNMENT_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_ASSIGN_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_assignment_row 
                   );
                  
      insert into territory_assignment values out_territory_assignment_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_ASSIGNMENT_I_SP;


PROCEDURE TERRITORY_SALES_MGR_I_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_I_SP

	This procedure is intended to insert new territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_SALES_MGR_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_SALES_MGR_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_sales_mgr_row 
                   );
                  
      insert into territory_sales_mgr values out_territory_sales_mgr_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);

end TERRITORY_SALES_MGR_I_SP;


PROCEDURE TYPE_I_SP (
/******************************************************************************
	TYPE_I_SP

	This procedure is intended to insert new TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
revised : 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
          12/20/2012 MDH - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_type_row            out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
--
--  Expire currently active TYPE Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'TYPE'
		 , out_type_row.COST_CENTER_CODE
     , out_type_row.EFFECTIVE_DATE);
--
--  Insert new TYPE row --                   
      insert into type values out_type_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TYPE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end TYPE_I_SP;

/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/

procedure ADDRESS_CAN_U_SP ( 
/*******************************************************************************
	ADDRESS_CAN_U_SP

	This procedure is intended to update Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%rowtype;
--
--
begin
-- 
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_CAN_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE  
	,in_EFFECTIVE_DATE 
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data   
	,v_address_can_row
	); 

end;
  
      
   UPDATE ADDRESS_CAN set row = v_address_can_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_CAN_U_SP;

procedure ADDRESS_MEX_U_SP ( 
/*******************************************************************************
	ADDRESS_MEX_U_SP

	This procedure is intended to Update Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%rowtype;
--
--
begin
--
--
-- Convert XML to ROWTYPE --
 ADDRESS_MEX_ROWTYPE_SP ( 
	 in_COST_CENTER     
	,in_ADDRESS_TYPE   
	,in_EFFECTIVE_DATE  
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_address_mex_row
	);

      
     UPDATE ADDRESS_MEX set row  =  v_address_mex_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP, ' || ' ' ||
             'IN_TABLE_NAME IS ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_U_SP;

procedure ADDRESS_OTHER_U_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_U_SP

	This procedure is intended to Update OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
revise : 10/02/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_OTHER_ROWTYPE_SP ( 
	  in_COST_CENTER     
	 ,in_ADDRESS_TYPE    
	 ,in_EFFECTIVE_DATE  
	 ,in_TABLE_NAME  
	 ,in_ROW_DATE    
	 ,in_Row_data    
	 ,v_address_other_row   
	 );
      
      UPDATE ADDRESS_OTHER set row  =  v_address_other_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_U_SP;

PROCEDURE ADDRESS_USA_U_SP (
/*******************************************************************************
	ADDRESS_USA_U_SP

	This procedure is intended to Update ADDRESS_USA address records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_USA table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/20/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure

*******************************************************************************/
in_COST_CENTER    IN ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_usa_row address_usa%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_USA_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_ADDRESS_TYPE        
	,in_EFFECTIVE_DATE       
	,in_TABLE_NAME          
	,in_ROW_DATE             
	,in_Row_data              
	,v_address_usa_row         
	);
           
     UPDATE ADDRESS_USA set row  =  v_address_usa_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
   
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_USA_U_SP;

procedure ADMINISTRATION_U_SP (
/*******************************************************************************
	ADMINISTRATION_U_SP

	This procedure is intended to update ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_administration_row administration%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADMINISTRATION_ROWTYPE_SP (
 	 in_COST_CENTER    
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_administration_row   
	); 
      
      UPDATE ADMINISTRATION set row = v_administration_row
         where cost_center_code = in_Cost_Center;
         
       
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADMINISTRATION_U_SP;				 
				
				
procedure BANK_CARD_U_SP (
/*******************************************************************************
	BANK_CARD_U_SP

	This procedure is intended to update BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_bank_card_row bank_card%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 BANK_CARD_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_POLLING_STATUS_CODE   
	,in_MERCHANT_ID          
	,in_EFFECTIVE_DATE        
	,in_TABLE_NAME  
	,in_ROW_DATE   
	,in_Row_data    
	,v_bank_card_row   
	); 
       
      UPDATE BANK_CARD set row = v_bank_card_row
        Where cost_center_code     =  in_COST_CENTER
          and polling_status_code  =  in_POLLING_STATUS_CODE
          and merchant_id          =  in_MERCHANT_ID
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
end BANK_CARD_U_SP;

PROCEDURE BATCH_JOB_U_SP (
/*******************************************************************************
	BATCH_JOB_U_SP

	This procedure is intended to update existing BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_BATCH_JOB_row.BATCH_JOB_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_BATCH_JOB_row.BATCH_JOB_status         := v_row_value;
			when 'BATCH_JOB_START_DATE'           then  v_BATCH_JOB_row.BATCH_JOB_start_date        := v_row_value;
--			when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := v_row_value;
--			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := v_row_value;
--			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update batch_job set row = v_batch_job_row  where BATCH_JOB_NAME    = in_BATCH_JOB_NAME 
                                                   and  BATCH_JOB_NUMBER  = in_BATCH_JOB_NUMBER ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	end BATCH_JOB_U_SP;

PROCEDURE CODE_DETAIL_U_SP (
/*******************************************************************************
	CODE_DETAIL_U_SP

	This procedure is intended to update existing CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName   - Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_detail set row = v_code_detail_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type 
                                                      and  code_detail_value  = in_code_detail_value ;    
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	end CODE_DETAIL_U_SP;

PROCEDURE CODE_HEADER_U_SP (
/*******************************************************************************
	CODE_HEADER_U_SP

	This procedure is intended to update existing CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_header set row = v_code_header_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type ;    
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_HEADER_U_SP;
       
PROCEDURE COST_CENTER_U_SP (
/*****************************************************************************
	COST_CENTER_U_SP

	This procedure is intended to UPDATE cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
*****************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 

            
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%rowtype;
-------------
--
--
begin
--
dbms_output.put_line('before cost center convert to rowtype ');  
-- Convert XML to ROWTYPE --
 COST_CENTER_ROWTYPE_SP (
	 in_COST_CENTER  
	,in_TABLE_NAME  
	,in_ROW_DATE     
	,in_Row_data    
	,v_cost_center_row   
	);
--
--
--  
	dbms_output.put_line('before update call');  
	dbms_output.put_line(v_cost_center_row.cost_center_name);
	dbms_output.put_line('what is the cost_center ' || v_cost_center_row.cost_center_code);
    dbms_output.put_line('what is pop kit ' || v_cost_center_row.POP_KIT_CODE);
    	 

      --UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center; 
      UPDATE cost_center set
		COST_CENTER_NAME = v_cost_center_row.COST_CENTER_NAME,
		CATEGORY = v_cost_center_row.CATEGORY,
		ENTITY_TYPE = v_cost_center_row.ENTITY_TYPE,
		STATEMENT_TYPE = v_cost_center_row.STATEMENT_TYPE,
		COUNTRY_CODE = v_cost_center_row.COUNTRY_CODE,
		TRANSPORT_TYPE = v_cost_center_row.TRANSPORT_TYPE,
		BEGIN_DATE = v_cost_center_row.BEGIN_DATE,
		OPEN_DATE = v_cost_center_row.OPEN_DATE,
		MOVE_DATE = v_cost_center_row.MOVE_DATE,
		CLOSE_DATE = v_cost_center_row.CLOSE_DATE,
		FINANCIAL_CLOSE_DATE = v_cost_center_row.FINANCIAL_CLOSE_DATE,
		POS_PROG_VER_EFF_DATE = v_cost_center_row.POS_PROG_VER_EFF_DATE,
		UPS_ZONE_CODE = v_cost_center_row.UPS_ZONE_CODE,
		RPS_ZONE_CODE = v_cost_center_row.RPS_ZONE_CODE,
		CURRENCY_CODE = v_cost_center_row.CURRENCY_CODE,
		POS_PROG_VER_NBR = v_cost_center_row.POS_PROG_VER_NBR,
		LEASE_OWN_CODE = v_cost_center_row.LEASE_OWN_CODE,
		MISSION_TYPE_CODE = v_cost_center_row.MISSION_TYPE_CODE,
		DUNS_NUMBER = v_cost_center_row.DUNS_NUMBER,
		PRI_LOGO_GROUP_IND = v_cost_center_row.PRI_LOGO_GROUP_IND,
		SCD_LOGO_GROUP_IND = v_cost_center_row.SCD_LOGO_GROUP_IND,
		BANKING_TYPE = v_cost_center_row.BANKING_TYPE,
		DEPOSIT_BAG_REORDER = v_cost_center_row.DEPOSIT_BAG_REORDER,
		DEPOSIT_TICKET_REORDER = v_cost_center_row.DEPOSIT_TICKET_REORDER,
		POP_KIT_CODE = v_cost_center_row.POP_KIT_CODE
     where cost_center_code = v_cost_center_row.cost_center_code;

      
      
--      
   dbms_output.put_line('after update call');   

  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);

end cost_center_u_sp;

PROCEDURE EMP_DATA_U_SP (
/*******************************************************************************
	EMP_DATA_U_SP

	This procedure is intended to update existing EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
--
begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update emp_data set row = v_emp_data_row where employee_number  =  in_employee_number ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end emp_data_u_sp;

PROCEDURE MARKETING_U_SP (
/*******************************************************************************
	MARKETING_U_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
      MARKETING_ROWTYPE_SP (
	 in_cost_center           
	,in_marketing_type      
	,in_TABLE_NAME           
	,in_ROW_DATE              
	,in_Row_data              
	,v_marketing_row
	);

      
      update marketing set row = v_marketing_row where cost_center_code = in_cost_center
                                                  and  marketing_type   = in_marketing_type ;      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end marketing_u_sp;

PROCEDURE OTHER_U_SP (
/*******************************************************************************
	OTHER_U_SP

	This procedure is intended to update existing OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%rowtype;
--
--
--
begin
--
-- 
 begin
 --
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
	in_COST_CENTER          
	, v_OTHER_row  
	,in_TABLE_NAME            
	,in_ROW_DATE             
	,in_Row_data              
	);

 end;
     
      
      UPDATE OTHER set row = v_other_row where cost_center_code = in_cost_center;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end other_u_sp;

PROCEDURE PHONE_U_SP (
/*******************************************************************************
	PHONE_U_SP

	This procedure is intended to update existing PHONE records

	PHONE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised: 10/03/12 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_phone_row PHONE%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_phone_number_type    
	, v_phone_row         
	,in_TABLE_NAME           
	,in_ROW_DATE             
	,in_Row_data             
	);
      
      --dbms_output.put_line(v_phone_row.phone_number_type|| ':'|| v_phone_row.phone_number);
      UPDATE PHONE 
      set 
		PHONE_AREA_CODE = v_phone_row.PHONE_AREA_CODE
		,PHONE_NUMBER = v_phone_row.PHONE_NUMBER
		,PHONE_EXTENSION = v_phone_row.PHONE_EXTENSION
      where cost_center_code = v_phone_row.cost_center_code
      and phone_number_type = v_phone_row.phone_number_type ; 
      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end PHONE_U_SP;

PROCEDURE POLLING_U_SP (
/*******************************************************************************
	POLLING_U_SP

	This procedure is intended to update existing POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/02/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_POLLING_row         out POLLING%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );
                  
      update polling set row      = out_polling_row
       where cost_center_code     = out_polling_row.cost_center_code 
        and  polling_status_code  = out_polling_row.polling_status_code ;
      
--dbms_output.put_line('polling update done in POLLING_U_SP');      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'POLLING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end POLLING_U_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_U_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_U_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
--
begin

/* 
*/

-------------  Business Rules go here                           
--	begin

--	exception
	
--		when others then
--    dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      update polling_dwld_rsn_hist set row = v_polling_dwld_rsn_hist_row where cost_center_code     = in_cost_center
                                              and  polling_status_code  = in_polling_status_code 
                                              and  effective_date       = in_effective_date ;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_U_SP;

PROCEDURE REAL_ESTATE_U_SP (
/******************************************************************************
	REAL_ESTATE_U_SP

	This procedure is intended to update existing REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_row     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      update real_estate set row      = out_real_estate_row
       where cost_center_code     = out_real_estate_row.cost_center_code ;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_U_SP;


PROCEDURE SALES_REP_U_SP (
/*******************************************************************************
	SALES_REP_U_SP

	This procedure is intended to update changed SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_row     out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
--
begin
--
-- Convert XML to ROWTYPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      update SALES_REP set row    = OUT_SALES_REP_ROW 
       where GEMS_EMPLOYEE_ID     = OUT_SALES_REP_ROW.GEMS_EMPLOYEE_ID;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
	END SALES_REP_U_SP;
  

PROCEDURE STATUS_U_SP (
/*******************************************************************************
	STATUS_U_SP

	This procedure is intended to update changed STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_row          out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  STATUS_ROWTYPE_SP ( 
         in_table_name
        ,in_Row_Data
        ,out_STATUS_row    
                   );
                  
      update status set row    = out_status_row
       where cost_center_code  = out_status_row.cost_center_code 
        and  status_code       = out_status_row.status_code              
        and  effective_date    = out_status_row.effective_date; 
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
END STATUS_U_SP;


PROCEDURE STORE_U_SP (
/******************************************************************************
	STORE_U_SP

	This procedure is intended to update changed STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_STORE_row           out STORE%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_STORE_row 
                   );
                  
      update store set row     = out_store_row
       where cost_center_code  = out_store_row.cost_center_code ; 
           
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END STORE_U_SP;


PROCEDURE TAXWARE_U_SP (
/*******************************************************************************
	TAXWARE_U_SP

	This procedure is intended to update changed TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_TAXWARE_row         out TAXWARE%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin
--
-- Convert XML to ROWTYPE --	
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_TAXWARE_row 
                   );
                  
      update TAXWARE set row   = out_TAXWARE_row
       where cost_center_code  = out_TAXWARE_row.cost_center_code ; 
           
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);
                     
	END TAXWARE_U_SP;


PROCEDURE TERMINAL_U_SP (
/******************************************************************************
	TERMINAL_U_SP

	This procedure is intended to update changed terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_row     out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
      UPDATE TERMINAL SET ROW       = OUT_TERMINAL_ROW
       WHERE COST_CENTER_CODE       = OUT_TERMINAL_ROW.COST_CENTER_CODE
          AND POLLING_STATUS_CODE   = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
          AND TERMINAL_NUMBER       = OUT_TERMINAL_ROW.TERMINAL_NUMBER
          AND EFFECTIVE_DATE        = OUT_TERMINAL_ROW.EFFECTIVE_DATE;
           
      
    
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERMINAL_U_SP;


PROCEDURE TERRITORY_U_SP (
/*******************************************************************************
	TERRITORY_U_SP

	This procedure is intended to update changed TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_row     out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      update territory set row        = out_territory_row
       where territory_sls_mgr_code   = out_territory_row.territory_sls_mgr_code
        and  cost_center_code         = out_territory_row.cost_center_code ;
         
        
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_U_SP;


PROCEDURE TERRITORY_ASSIGNMENT_U_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_U_SP

	This procedure is intended to update changed territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ASSIGNMENT_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_ASSIGN_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_assignment_row 
                   );
                  
      update territory_assignment set row      = out_territory_assignment_row
        where territory_sls_mgr_code = out_territory_assignment_row.territory_sls_mgr_code
          and cost_center_code = out_territory_assignment_row.cost_center_code
          and gems_employee_id = out_territory_assignment_row.gems_employee_id
          and effective_date   = out_territory_assignment_row.effective_date ;
          
        
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_ASSIGNMENT_U_SP;


PROCEDURE TERRITORY_SALES_MGR_U_SP (
/*****************************************************************************
	TERRITORY_SALES_MGR_U_SP

	This procedure is intended to update changed territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_SALES_MGR_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_SALES_MGR_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_sales_mgr_row 
                   );
                  
      update territory_sales_mgr set row      = out_territory_sales_mgr_row
       where territory_sls_mgr_code           = out_territory_sales_mgr_row.territory_sls_mgr_code;
       
      
          
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_U_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_SALES_MGR_U_SP;
 

PROCEDURE TYPE_U_SP (
/*****************************************************************************
	TYPE_U_SP

	This procedure is intended to update changed TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,IN_ROW_DATA             in  varchar2 --sys.xmltype
,out_type_row            out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
                  
      update type set row       = out_type_row
       where cost_center_code   = out_type_row.cost_center_code
        and type_code           = out_type_row.type_code
        and effective_date      = out_type_row.effective_date ; 
        
      
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'TYPE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);

end TYPE_U_SP;
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PROCEDURE ADDRESS_CAN_ROWTYPE_SP ( 
/*******************************************************************************
	 ADDRESS_CAN_ROWTYPE_SP

	This procedure is intended to Insert/Update  Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_cost_center     in  address_can.cost_center_code%type 
,in_address_type    in  address_can.address_type%type 
,in_effective_date  in  address_can.effective_date%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_can%rowtype
)

 is 
 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
 
v_address_can_row   ADDRESS_CAN%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);  
      
      
     if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;

        
--       dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE  := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE      := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE    := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1    := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2    := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3    := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY              := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE     := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE       := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS     := v_row_value;
			when 'COUNTRY_CODE'		 then  v_address_can_row.COUNTRY_CODE     := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
   out_address_type := v_address_can_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end  ADDRESS_CAN_ROWTYPE_SP;				 
				
procedure ADDRESS_MEX_ROWTYPE_SP ( 
 /******************************************************************************
	ADDRESS_MEX_ROWTYPE_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_mex%rowtype
)

 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row  ADDRESS_MEX%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;

        
--        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE     := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1   := v_row_value;
	   		when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2   := v_row_value;
	    	when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3   := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY             := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE    := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE      := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS    := v_row_value;
			when 'COUNTRY_CODE' 	 then v_address_mex_row.COUNTRY_CODE          :=  v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
    out_address_type := v_address_mex_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_ROWTYPE_SP;

procedure ADDRESS_OTHER_ROWTYPE_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_ROWTYPE_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_other%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name); 


   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;        
        --dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE     := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1   := v_row_value;
	   		when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2   := v_row_value;
	    	when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3   := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY             := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE_CODE    := v_row_value;
      		when 'STATE'             then  v_address_other_row.STATE_CODE       := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE      := v_row_value;
      		when 'COUNTRY_CODE'      then  v_address_other_row.COUNTRY_CODE     := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS    := v_row_value;
		ELSE
			null;		
		END CASE;	   	


  else
      null ;
  end if;
    v_row_value := null;
  end loop ;
      
     out_address_type  :=  v_address_other_row; 
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_ROWTYPE_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_ROWTYPE_SP;

PROCEDURE ADDRESS_USA_ROWTYPE_SP (
/*******************************************************************************
	ADDRESS_USA_ROWTYPE_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/

 in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE 
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_address_type        out address_usa%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_ADDRESS_USA_row  ADDRESS_USA%rowtype;
v_row_value                  varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/


dbms_output.put_line('after begin in ADDRESS_USA_ROWTYPE_SP');
      for table_fields_rec in table_fields_cur loop

      
      
		      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
		
   		if (table_fields_rec.data_type <> 'DATE') then
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
      else
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
        end if;
		    
		    
		/***  below is a list of all the fields in the table  ***/
		/*
		            COST_CENTER_CODE
		            ADDRESS_TYPE
		            EFFECTIVE_DATE
		            EXPIRATION_DATE
		            ADDRESS_LINE_1
		            ADDRESS_LINE_2
		            ADDRESS_LINE_3
		            CITY
		            STATE_CODE
		            ZIP_CODE
		            ZIP_CODE_4
		            COUNTY
		            FIPS_CODE
		            DESTINATION_POINT
		            CHECK_DIGIT
		            VALID_ADDRESS
		*/
		
				  	case table_fields_rec.column_name
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE  :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE          :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE      :=  TO_DATE(v_row_value,'MM-DD-YYYY');
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE    :=  TO_DATE(v_row_value,'MM-DD-YYYY');
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1      :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2      :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3      :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY                          :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE              :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE                  :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4              :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY                      :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE                :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT            :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS        :=  v_row_value;
                           		when 'COUNTRY_CODE' then v_ADDRESS_USA_row.COUNTRY_CODE          :=  v_row_value;
		
					ELSE
						null;		
					END CASE;	   	
		
		
		      end if;

      end loop ;
      
     out_address_type  := v_ADDRESS_USA_row;
      
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_ROWTYPE_SP, ' || ' ' ||
        'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_ROWTYPE_SP;

procedure ADMINISTRATION_ROWTYPE_SP (
/*******************************************************************************
	ADMINISTRATION_ROWTYPE_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE 
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_administration_type  out ADMINISTRATION%rowtype
)
 
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
    --dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE     := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY             := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

  end loop ;
      
    out_administration_type :=  v_administration_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end ADMINISTRATION_ROWTYPE_SP;				 
				
procedure BANK_CARD_ROWTYPE_SP (
/*******************************************************************************
	BANK_CARD_ROWTYPE_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_bank_card_row  out  bank_card%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/



      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
    --dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code  := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID          := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE       := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID   := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE         := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id           := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID          := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
       
       out_bank_card_row := v_bank_card_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_ROWTYPE_SP;				 
				
PROCEDURE COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
	COST_CENTER_ROWTYPE_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised:
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
,out_cost_center_type  out cost_center%rowtype
)
 is 
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_cost_center_row cost_center%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := UPPER(v_row_value);
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
			when 'POP_KIT_CODE' then  v_cost_center_row.POP_KIT_CODE := v_row_value;
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
    out_cost_center_type :=  v_cost_center_row;
    
         
  

end COST_CENTER_ROWTYPE_SP;

PROCEDURE MARKETING_ROWTYPE_SP (
/*******************************************************************************
	MARKETING_ROWTYPE_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center          in  marketing.cost_center_code%type 
,in_marketing_type       in  marketing.marketing_type%type 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_marketing_type  out marketing%rowtype

)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_MARKETING_row MARKETING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_MARKETING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_MARKETING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code           := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                   := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type             := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date             := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date            := to_date(v_row_value,'MM-DD-YYYY');
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                  := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size       := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size         := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting    := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     out_marketing_type  :=  v_marketing_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end MARKETING_ROWTYPE_SP;

PROCEDURE OTHER_ROWTYPE_SP (
/*******************************************************************************
	OTHER_ROWTYPE_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE 
,out_other_type              OUT OTHER%ROWTYPE

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
 
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_OTHER_row OTHER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     out_other_type  :=  v_other_row; 
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end OTHER_ROWTYPE_SP;				 
				
PROCEDURE PHONE_ROWTYPE_SP (
/*******************************************************************************
	PHONE_ROWTYPE_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE 
,in_phone_number_type    in  phone.phone_number_type%type 
,out_phone_type              OUT PHONE%ROWTYPE 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_PHONE_row PHONE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_ouutput.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code       := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type      := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code        := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number           := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension        := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
    
    out_phone_type  :=    v_PHONE_row;
           
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
             errpkg.raise_err(v_code, 'PHONE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end PHONE_ROWTYPE_SP;				 
				

PROCEDURE POLLING_ROWTYPE_SP (
/*******************************************************************************
	POLLING_ROWTYPE_SP

	This procedure Build a POLLING Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Polling_ROWTYPE  -  Polling Data Row

created  : 09/26/2012 TAL -- CCN Project....
		 : 04/03/2013 BLR error message pointing to wrong procedure
         : 06/12/2013 kdp upated code to work with current_flag
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_polling_rowtype     out polling%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_POLLING_row   POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

	      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
	
   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
		 
		/***  below is a list of all the fields in the table  ***/
		
			  	case table_fields_rec.column_name
					when 'COST_CENTER_CODE'           then  v_polling_row.cost_center_code            := v_row_value;
					when 'POLLING_STATUS_CODE'        then  v_polling_row.polling_status_code         := v_row_value;
          			when 'MULTICAST_IND'              then  v_polling_row.multicast_ind               := v_row_value;
					when 'TIME_ZONE'                  then  v_polling_row.time_zone                   := v_row_value;
					when 'POLLING_IND'                then  v_polling_row.polling_ind                 := v_row_value;
					when 'NEXT_DOWNLOAD_BLOCK_COUNT'  then  v_POLLING_row.NEXT_DOWNLOAD_BLOCK_COUNT   := v_row_value;
					when 'CURRENT_FLAG'  			  then  v_POLLING_row.CURRENT_FLAG   			  := v_row_value;
          ELSE
            null;		
          END CASE;	   	
		
	     end if;

    end loop ;
      
      out_polling_rowtype  :=  v_POLLING_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);        
	
END POLLING_ROWTYPE_SP;


PROCEDURE REAL_ESTATE_ROWTYPE_SP (
/******************************************************************************
	REAL_ESTATE_ROWTYPE_SP

	This procedure Build a REAL_ESTATE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  REAL_ESTATE_ROWTYPE  -  REAL_ESTATE Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_rowtype     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_real_estate_row   real_estate%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
      ELSE
        null;		
      END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      out_real_estate_rowtype  :=  v_real_estate_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_ROWTYPE_SP;


PROCEDURE SALES_REP_ROWTYPE_SP (
/******************************************************************************
	SALES_REP_ROWTYPE_SP

	This procedure Build a SALES_REP Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Sales_Rep_ROWTYPE  -  Sales_Rep Data Row

created : 09/26/2012 TAL -- CCN Project....
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_rowtype   out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_sales_rep_row   sales_rep%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case TABLE_FIELDS_REC.COLUMN_NAME
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
      ELSE 
        null;		
      END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      out_SALES_REP_rowtype  :=  v_SALES_REP_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'SALES_REP_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end SALES_REP_ROWTYPE_SP;


PROCEDURE STATUS_ROWTYPE_SP (
/******************************************************************************
	STATUS_ROWTYPE_SP

	This procedure Build a STATUS Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Status_ROWTYPE   -  Status Data Row

created: 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_rowtype   out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_status_row   status%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case TABLE_FIELDS_REC.COLUMN_NAME
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');
      ELSE  
        null;		
      END CASE;	   	

      else
        null ;
      end if;

      end loop ;
      
      out_STATUS_rowtype  :=  v_STATUS_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STATUS_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
END STATUS_ROWTYPE_SP;


PROCEDURE STORE_ROWTYPE_SP (
/******************************************************************************
	STORE_ROWTYPE_SP

	This procedure Build a STORE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Store_ROWTYPE    -  Store Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_store_rowtype       out store%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_store_row     store%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;
			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;
			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;
		ELSE
			null;		
		END CASE;	   	

      else
        null ;
      end if;

      end loop ;
      
      out_STORE_rowtype  :=  v_STORE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STORE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end STORE_ROWTYPE_SP;


PROCEDURE TAXWARE_ROWTYPE_SP (
/******************************************************************************
	TAXWARE_ROWTYPE_SP

	This procedure Build a TAXWARE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Taxware_ROWTYPE  -  Taxware Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_taxware_rowtype   out taxware%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_taxware_row   taxware%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;
			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;
			when 'LAST_MAINT_DATE'            then  v_TAXWARE_row.LAST_MAINT_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'LAST_MAINT_METHOD_ID'       then  v_TAXWARE_row.LAST_MAINT_METHOD_ID     := v_row_value;
			when 'LAST_MAINT_USER_ID'         then  v_TAXWARE_row.LAST_MAINT_USER_ID       := v_row_value;
		ELSE
			null;		
		END CASE;

      else
        null ;
      end if;

      end loop ;
      
      out_TAXWARE_rowtype  :=  v_TAXWARE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TAXWARE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TAXWARE_ROWTYPE_SP;


PROCEDURE TERMINAL_ROWTYPE_SP (
/******************************************************************************
	TERMINAL_ROWTYPE_SP

	This procedure Build a TERMINAL Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_rowtype   out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_terminal_row   terminal%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code       := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code    := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number        := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date         := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date     := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number   := v_row_value;
			
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERMINAL_rowtype  :=  v_TERMINAL_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERMINAL_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TERMINAL_ROWTYPE_SP;


PROCEDURE TERRITORY_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_ROWTYPE_SP

	This procedure Build a TERRITORY Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_rowtype   out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_row   territory%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'     then  v_territory_row.territory_sls_mgr_code    := v_row_value;
      when 'COST_CENTER_CODE'           then  v_territory_row.cost_center_code          := v_row_value;
			when 'CATEGORY'                   then  v_territory_row.category                  := v_row_value;
			when 'LEASE_CAR_INDICATOR'        then  v_territory_row.lease_car_indicator       := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE'   then  v_territory_row.territory_type_busn_code  := v_row_value;
			when 'HOME_STORE'                 then  v_territory_row.home_store                := v_row_value;
			 
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_rowtype  :=  v_TERRITORY_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);      
      errpkg.raise_err(v_code, 'TERRITORY_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TERRITORY_ROWTYPE_SP;


PROCEDURE TERRITORY_ASSIGN_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_ASSIGN_ROWTYPE_SP

	This procedure Build a TERRITORY_ASSIGNMENT Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_Assignment_ROWTYPE  -  Territory_Assignment Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_assignment_row   territory_assignment%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code   := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code         := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category                 := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id         := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date           := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date          := to_date(v_row_value,'MM-DD-YYYY');
						
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_ASSIGNMENT_row  :=  v_TERRITORY_ASSIGNMENT_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end TERRITORY_ASSIGN_ROWTYPE_SP;


PROCEDURE TERRITORY_SALES_MGR_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_ROWTYPE_SP

	This procedure Build a TERRITORY_SALES_MGR Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_Sales_Mgr_ROWTYPE  -  Territory_Sales_Mgr Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_sales_mgr_row   territory_sales_mgr%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name		
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code  := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id        := v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad   := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type  := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date          := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date         := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name              := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial          := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name               := v_row_value;
			 
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_SALES_MGR_row  :=  v_TERRITORY_SALES_MGR_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end TERRITORY_SALES_MGR_ROWTYPE_SP;


PROCEDURE TYPE_ROWTYPE_SP (
/******************************************************************************
	TYPE_ROWTYPE_SP

	This procedure Build a TYPE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Type_ROWTYPE     -  Type Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_type_rowtype        out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_type_row      type%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'   then  v_type_row.cost_center_code   := v_row_value;
			when 'TYPE_CODE'          then  v_type_row.type_code          := v_row_value;
			when 'EFFECTIVE_DATE'     then  v_type_row.effective_date     := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'    then  v_type_row.expiration_date    := to_date(v_row_value,'MM-DD-YYYY');
			
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TYPE_rowtype  :=  v_TYPE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TYPE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
END TYPE_ROWTYPE_SP;


--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

	PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;

--REMOVE TESTING

PROCEDURE CC_ADDTL_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDTL_TABLES_UI_SP  --   create/update tables
	 impacted by cost center table changes/inserts VIA
   COST_CENTER_UI_UPSERT_SP.
        Procedure

	This procedure is intended to insert/update the database
	 for the following tables when creating/updating the
	 Cost_Center associated tables.
	Tables are as follows: 
            , ADMINISTRATION
            , STORE
            , OTHER
            , REAL_ESTATE
            , TERRITORY
            tables.  

created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 
   in_table_name          IN  varchar2   
  ,in_row_data           IN  varchar2  --sys.xmltype
  )
 IS

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
 
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data);
v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--
v_xml_administration_frag clob;
v_xml_store_frag clob;
v_xml_other_frag clob;
v_xml_real_estate_frag clob;
v_xml_territory_frag clob;
--

V_TERRITORY_ROWTYPE            TERRITORY%rowtype;
V_STORE_ROWTYPE                STORE%rowtype;
V_OTHER_ROWTYPE                OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE       ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE          REAL_ESTATE%rowtype;
--
v_count integer := 1;
        
--  ADMINISTRATION insert/update process 

begin

   --     for tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/COST_CENTER_UI/' || in_table_name) = 1) then   
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| in_table_name).getCLOBVal();
     
       -- case tables_rec.table_name
        case in_table_name    
            when 'ADMINISTRATION' 	then v_xml_administration_frag := v_xml_frag;
            when 'STORE' 	     	then v_xml_store_frag := v_xml_frag;
            when 'OTHER'		    then v_xml_other_frag := v_xml_frag;
            when 'REAL_ESTATE'	then v_xml_real_estate_frag := v_xml_frag;
            when 'TERRITORY'		then v_xml_territory_frag := v_xml_frag;		
                    
        else
            null;
        end case;
 
     
      
       BEGIN 
          if v_xml_administration_frag  is not null  then
              CCN_TABLE_IU_PKG.ADMINISTRATION_I_SP (                            
                 null   
                , 'ADMINISTRATION' 
                , null
                , v_xml_administration_frag);    
 --        dbms_output.put_line('ADMINISTRATION Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.ADMINISTRATION_U_SP (                  
                     null   
                , 'ADMINISTRATION' 
                , null
                , v_xml_administration_frag); 
 --         dbms_output.put_line('ADMINISTRATION Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADMINISTRATION Update Error' );
           end;
        end;

--  STORE insert/update process 
 
       begin
        
          if v_xml_store_frag  is not null  then
              CCN_TABLE_IU_PKG.STORE_I_SP (                            
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype);                    
 --   dbms_output.put_line('STORE Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.STORE_U_SP (                  
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype); 
 --   dbms_output.put_line('STORE Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'STORE Update Error' );
           end;
        end;

--  OTHER insert/update process 
 
       begin
        
          if v_xml_other_frag  is not null  then
              CCN_TABLE_IU_PKG.OTHER_I_SP (                            
                   null   
                , 'OTHER' 
                , null
                , v_xml_other_frag);              
             
 --  Dbms_output.put_line('OTHER Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.OTHER_U_SP (                  
                      null   
                , 'OTHER' 
                , null
                , v_xml_other_frag);              
                           
 --   dbms_output.put_line('OTHER Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'OTHER Update Error' );
           end;
        end;

--  REAL_ESTATE insert/update process 
 
       begin
        
          if v_xml_real_estate_frag  is not null  then
              CCN_TABLE_IU_PKG.REAL_ESTATE_I_SP (                            
                 'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
 --     dbms_output.put_line('REAL_ESTATE Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
          
            begin
              CCN_TABLE_IU_PKG.REAL_ESTATE_U_SP (                  
               'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
  --     dbms_output.put_line('REAL_ESTATE Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'REAL_ESTATE Update Error' );
           end;
        end;

--  TERRITORY insert/update process 
 
       begin
        
          if v_xml_territory_frag  is not null  then
              CCN_TABLE_IU_PKG.TERRITORY_I_SP (                            
                      'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                   
             
  --  dbms_output.put_line('TERRITORY Insert executed ');
          end if;
          
       EXCEPTION
       
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.TERRITORY_U_SP (                  
                    'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                        
               
 -- dbms_output.put_line('TERRITORY Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'TERRITORY Update Error' );
           end;
        end;
 END if;
 
    EXCEPTION
    when others then
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
          v_errm || ' ' ||
          ' Errors' );
 --  dbms_output.put_line('in others ');
 --  dbms_output.put_line(sqlerrm);   

END CC_ADDTL_TABLES_UI_SP;

PROCEDURE CC_ADDRESS_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDRESS_TABLES_UI_SP   --   create/update tables
	 impacted by cost center table changes/inserts via 
   COST_CENTER_UI_UPSERT_SP.
        Procedure

	This procedure will add one address row singular
	for the following tables depending on category type : 
               ADDRESS_USA
            ,  ADDRESS_CAN
            ,  ADDRESS_MEX
            ,  ADDRESS_OTHER
           
            tables.  

created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 
 
in_table_name          IN  varchar2 
,in_row_data            IN  varchar2  --sys.xmltype
)
 IS
 
 cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data); 
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--

v_xml_addr_usa_frag clob;
v_xml_addr_mex_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
--

V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%rowtype;
V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%rowtype;
V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%rowtype;
V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%rowtype;
--
v_count integer := 1;
       
 begin

dbms_output.put_line(in_table_name); 
 
    if (v_Row_data.existsNode('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| in_table_name) = 1) then 
    	 dbms_output.put_line('23here');	  
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT').getCLOBVal();
         dbms_output.put_line(v_xml_frag);
       case in_table_name      
       
            when 'ADDRESS_CAN'      then v_xml_addr_can_frag := v_xml_frag;
            when 'ADDRESS_MEX'     	then v_xml_addr_mex_frag := v_xml_frag;
            when 'ADDRESS_USA'	    then v_xml_addr_usa_frag := v_xml_frag;
            when 'ADDRESS_OTHER'	  then v_xml_addr_oth_frag := v_xml_frag;            
        else
            null;
        end case;
    
     
        BEGIN
        
          if v_xml_addr_can_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_CAN'
                 , null
                 , v_xml_addr_can_frag);                 
             
 -- dbms_output.put_line('ADDRESS CAN Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_CAN_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_CAN'
                 , null
                 , v_xml_addr_can_frag);                          
               
 --  dbms_output.put_line('ADDRESSCAN Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS CAN Update Error' );
           end;
        end;  

--  ADDRESS_MEX insert/update process 

       begin
      
         if v_xml_addr_mex_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_MEX'
                 , null
                 , v_xml_addr_mex_frag);                 
             
  --  dbms_output.put_line('ADDRESS MEX Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_MEX_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_MEX'
                 , null
                 , v_xml_addr_mex_frag);                          
               
  -- dbms_output.put_line('ADDRESS MEX Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS MEX Update Error' );
           end;
        end;

--  ADDRESS_OTHER insert/update process 

       begin
 
          if v_xml_addr_oth_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_OTHER'
                 , null
                 , v_xml_addr_oth_frag);                 
             
 -- dbms_output.put_line('ADDRESS OTHER Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_OTHER'
                 , null
                 , v_xml_addr_oth_frag);                          
               
  --  dbms_output.put_line('ADDRESS OTHER Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS OTHER Update Error' );
           end;
        end;

--  ADDRESS_USA insert/update process 

       begin
dbms_output.put_line('ADDRESS USA Insert before executed ');       
          if v_xml_addr_usa_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_USA'
                 , null
                 , v_xml_addr_usa_frag);                 
             
   dbms_output.put_line('ADDRESS USA Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_USA_U_SP (                  
                   null                      --in_cost_center
                 , null                      --in_address_type
                 , null                      --in_effective_date
                 , 'ADDRESS_USA'             --in_table_name
                 , null                      --in_row_date
                 , v_xml_addr_usa_frag);     --in_row_data   xml                   
                
  -- dbms_output.put_line('ADDRESS USA Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS USA Update Error' );
           end;
        end;
  END IF;


    EXCEPTION
    when others then
    
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
          v_errm || ',' ||
          ' Errors' );
  -- dbms_output.put_line('in others ');
  -- dbms_output.put_line(sqlerrm);   

 
END CC_ADDRESS_TABLES_UI_SP;

end CCN_TABLE_IU_PKG;

