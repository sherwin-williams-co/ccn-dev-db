create or replace PACKAGE BODY            "CCN_UI_INTERFACE_APP_PKG" 
    as
-- PACKAGE BODY
/****************************************************************************** 
This package is intended to return data for the cost_center table

created : 09/18/2012 TAL -- CCN coding project
changed : 09/21/2012 TAL -- Split into Table_IU and Interface_UI
        : 04/04/2013 TAL -- Modified Error Messages to be easier to read
******************************************************************************/

--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;

--REMOVE TESTING

PROCEDURE SECURITY_S_SP(
/******************************************************************************
	SECURITY_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the SECURITY table.  

created : 
*******************************************************************************/
in_user_id IN SECURITY_MATRIX.USER_ID%TYPE
,out_USER_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN OUT_USER_REF_CUR FOR
			  SELECT SM.USER_ID, SM.PASSWORD , RD.* 
			  FROM SECURITY_MATRIX SM,
			       ROLE_DETAILS RD
			  where user_id = in_user_id
			  and SM.ROLE_CODE = RD.ROLE_CODE;			  
	  
	END SECURITY_S_SP;

PROCEDURE ADDRESS_UI_SP ( inCost_center                   in COST_CENTER.cost_center_code%type
                         ,inCountry_code                  in COST_CENTER.country_code%type
                         ,inAddressType					          in ADDRESS_USA.address_type%type DEFAULT NULL                                                 
                         ,out_ADDRESS_REF_CUR             out sys_refcursor)
/*******************************************************************************
	ADDRESS_UI_SP

	This procedure is intended to return an address ref cursor with data to be
	used for java  ADDRESS screen. 
     
created : 09/05/2012 BLR CCN UI Project....
revised :
*******************************************************************************/
        is                  
 v_code number;
 v_errm varchar2(500);
 v_in_costctr varchar2(6);  
 
 v_cost_center_row         COST_CENTER%ROWTYPE;
 v_home_store              TERRITORY.home_store%TYPE;
 
 invalid_country_code_err    EXCEPTION;
-- invalid_cost_center_err     EXCEPTION;

  BEGIN 
         
/*  
 1.0  For VALIDATION OF COUNTRY_CODE INPUT 
*/		
      if  not common_tools.code_detail_valid ('COUNTRY_CODE',inCountry_code) then  
      -- value not found in table 
              raise invalid_country_code_err; 
      end if; 
  
 /*  
 2.0  Get Cost Center Table for Category code validation
*/	
      
      select * into v_cost_center_row
              from COST_CENTER
              where cost_center_code =   inCost_center;
 
/*  
 3.0  when category code equal 'T' use home_store cost center
*/  
   
      if v_cost_center_row.category = 'T'  then    
         select home_store 
           into v_home_store
           from TERRITORY
           where cost_center_code =   inCost_center;	         
         else
           v_home_store := inCost_center;      
      end if;
 /*  
4.0  Validate which Country code column is being processed to extract correct
      address table such as:
      - ADDRESS_USA;
      - ADDRESS_CAN;
      - ADDRESS_MEX;
      - ADDRESS_OTHER
      ADDRESS_OTHER TABLE HOUSES ALL COUNTRIES EXCEPT USA, CANADA, PUERTO RICO, OR MEXICO
*/   
       
	    CASE ( inCountry_code ) 
        when 'USA' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );     
         
         when 'PRI' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );    
            
         when 'CAN' then
            CCN_TABLE_IU_PKG.ADDRESS_CAN_S_SP (                
             v_home_store 
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
                
         when 'MEX' then
            CCN_TABLE_IU_PKG.ADDRESS_MEX_S_SP (            
              v_home_store
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
         else 
            CCN_TABLE_IU_PKG.ADDRESS_OTHER_S_SP (           
             v_home_store
            ,inAddressType
            ,out_ADDRESS_REF_CUR );
      
  END CASE; 
         
     
  EXCEPTION
       
   when invalid_country_code_err then  
        v_code := errnums.en_invalid_code_detail_err;
        errpkg.raise_err(v_code, 'ADDRESS_UI_SP.invalid_country_code_err ',    
        'Entered Country_Code was "' || InCountry_code || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Country code must be found on "CODE_DETAIL TABLE ". '); 
  
  
    when OTHERS then
       v_code := sqlcode;
	     v_errm := substr(sqlerrm,1, 500);
       errpkg.raise_err(v_code, v_errm ||
        'CCN_TABLE_IU_PKG '  || 'No errors found');
       
 END ADDRESS_UI_SP;
 
 
PROCEDURE COST_CENTER_UI_SP ( 
 /******************************************************************************
	COST_CENTER_UI_SP   --    Cost Center User Interface Procedure

	This procedure is intended to return a ref cursor with data from 
	from the COST_CENTER, ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
  STATUS, TYPE, MARKETING, PHONE, TAXWARE, and ADDRESS tables.  

created : 09/06/2012 MDH CCN Project....
*******************************************************************************/
            IN_COST_CENTER          IN  COST_CENTER.COST_CENTER_CODE%TYPE
 --          
					, OUT_COST_CENTER_REF_CUR       OUT SYS_REFCURSOR
 					, OUT_CC_CATEGORY_REF_CUR       OUT SYS_REFCURSOR    
          , OUT_STATUS_REF_CUR            OUT SYS_REFCURSOR     
    			, OUT_TYPE_REF_CUR              OUT SYS_REFCURSOR   
     			, OUT_MARKETING_REF_CUR         OUT SYS_REFCURSOR   
  				, OUT_TAXWARE_REF_CUR           OUT SYS_REFCURSOR    
      		, OUT_PHONE_REF_CUR             OUT SYS_REFCURSOR     
      		, OUT_ADDRESS_REF_CUR           OUT SYS_REFCURSOR  )

       IS   

v_code                 number;
v_errm                 VARCHAR(500);
v_address_type         VARCHAR2(1)  := 'M';
v_cost_center_rowtype  COST_CENTER%rowtype;
v_break                VARCHAR(100);
v_cost_center          COST_CENTER.cost_center_code%TYPE;
invalid_cost_center_err     EXCEPTION;

BEGIN --  COST_CENTER_UI_SP
--

  BEGIN
  v_break  := ('Convert the in_cost_center to 6 digit ' );
    
  v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
  EXCEPTION
     WHEN OTHERS then
           raise invalid_cost_center_err;
                  
  END; -- get 6 digit Cost Center

  BEGIN -- Get Cost Center
                
  v_break  := ('Entered the Cost_Center_UI_SP ' 
                || ' in_cost_center = ' || v_cost_center || ' ' );
--
/**  Call COST_CENTER to get Category Code  ***/
      select * into v_cost_center_rowtype
            from COST_CENTER          
            where cost_center_code = v_cost_center; 
            
  EXCEPTION
     WHEN NO_DATA_FOUND then
           raise invalid_cost_center_err;
                  
  END; -- get Cost Center
--
--
/**  Call COST_CENTER Reference Cursor  ***/

      CCN_TABLE_IU_PKG.COST_CENTER_S_SP(
            v_cost_center          
 					, out_cost_center_ref_cur);      
--
--
/******************************************************************************
	Use the Category code of the COST_CENTER table to determine the type of 
	processing to be done as follows:
  
	  S  -->  Store, Marketing, and Taxware data
	  A  -->  Administration data
	  R  -->  Real_Estate data
	  T  -->  Territory data
    O  -->  Other, Marketing, and Taxware data    
*******************************************************************************/
--
v_break  :=  ('Entered the Category Routine ' 
              || ' in_cost_center = ' || v_cost_center 
              || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CASE ( v_cost_center_rowtype.category) 
        when 'S' then
 --         STORE Table
          v_break  :=  ('Entered the STORE Category Routine ' );
          CCN_TABLE_IU_PKG.STORE_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);  
 --         MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);    
 --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             
          
        when 'A' then
 --         ADMINISTRATION Table
          v_break  :=  ('Entered the ADMINISTRATION Category Routine ' );
          CCN_TABLE_IU_PKG.ADMINISTRATION_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);  
          
        when 'R' then
 --         REAL_ESTATE Table
          v_break  :=  ('Entered the REAL ESTATE Category Routine ' );
          CCN_TABLE_IU_PKG.REAL_ESTATE_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);    
          
        when 'T' then
 --         TERRITORY Table
          v_break  :=  ('Entered the TERRITORY Category Routine ' );
          CCN_TABLE_IU_PKG.TERRITORY_S_SP(
            null   
           ,v_cost_center
					, out_cc_category_ref_cur);    
  
        when 'O' then
 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(
            v_cost_center  
					, out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             

        when 'M' then

 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(
            v_cost_center  
					, out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             
          
     END CASE;         
--
--
/**  Call STATUS Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.STATUS_S_SP(
            v_cost_center          
 					, null
 					, out_status_ref_cur);
--
--
/**  Call TYPE Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.TYPE_S_SP(
            v_cost_center          
 					, null
          , out_type_ref_cur);
--
--
/**  Call PHONE Reference Cursor  ***/
--
v_break  := ('Entered the PHONE Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.PHONE_S_SP(
            v_cost_center          
 					, out_phone_ref_cur);
--
--
/******************************************************************************
	Call the ADDRESS_UI_SP procedure to obtain the "Mailing" address only for 
	the cost center being processed.
  
 v_address_type is set to 'M' 
*******************************************************************************/	
--	
v_break  :=  ('Entered the ADDRESS Routine ' 
               || ' in_cost_center = ' || v_cost_center 
               || ' category <' || v_cost_center_rowtype.category || '>'
               || ' address type <' || v_address_type || '>'
               || ' country <' || v_cost_center_rowtype.country_code || '> ' );
--
/**  Call ADDRESS Reference Cursor  based on country_code ***/  
--
--      CCN_TABLE_IU_PKG.ADDRESS_UI_SP(
      ADDRESS_UI_SP(
            v_cost_center
          , v_cost_center_rowtype.country_code
          , v_address_type
 					, out_address_ref_cur);
--
   v_break  := ('Ended call to COST_CENTER_UI_SP ' );
--   
--
 EXCEPTION
       
       when invalid_cost_center_err then  
        v_code := errnums.en_invalid_cost_center_err;
        errpkg.raise_err(v_code, 'COST_CENTER_UI_SP.invalid_cost_center_err '
        || v_break,    
        'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Cost Center is not found - Would you like to Add? '
        ); 
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm || ' ' 
                    || v_break || ' ' 
                    || 'COST_CENTER_UI_SP Error '
                    );   
 
       
       null;
  
end COST_CENTER_UI_SP;


PROCEDURE POLLING_UI_SP (
/******************************************************************************
	POLLING_UI_SP   --    Polling User Interface Stored Procedure

	This procedure is intended to return a ref cursor with data from 
	from the POLLING, BANK_CARD, and TERMINAL tables.  

created : 09/05/2012 TAL CCN Project....
********************************************************************************/
            in_cost_center            in  polling.cost_center_code%type
 					, in_polling_status_code    in  polling.polling_status_code%type
          , in_merchant_id_code       in  bank_card.merchant_id%type
          , in_terminal_number        in  terminal.terminal_number%type
					, out_polling_refcur        out sys_refcursor
 					, out_bank_card_refcur      out sys_refcursor
			    , OUT_TERMINAL_REFCUR       OUT SYS_REFCURSOR
          )
       is

v_code                 number;
v_errm                 varchar(500);
v_break                VARCHAR(100);
V_POLLING_STATUS_CODE POLLING.POLLING_STATUS_CODE%TYPE;
invalid_cost_center_err     EXCEPTION;
V_COST_CENTER          COST_CENTER.COST_CENTER_CODE%TYPE;
BEGIN --  POLLING_UI_SP     

  BEGIN
  v_break  := ('Convert the in_cost_center to 6 digit ' );
    
  v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
  EXCEPTION
     WHEN OTHERS then
           raise invalid_cost_center_err;
                  
  END; -- get 6 digit Cost Center

/**  Call POLLING Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.POLLING_S_SP ';

      CCN_TABLE_IU_PKG.POLLING_S_SP(
            in_cost_center          
 					, v_polling_status_code        
					, OUT_POLLING_REFCUR);  
          
      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.POLLING_S_SP ';      
      
/**  Call BANK_CARD Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';

      CCN_TABLE_IU_PKG.BANK_CARD_S_SP(
            in_cost_center          
 					, v_polling_status_code
          , in_merchant_id_code
					, OUT_BANK_CARD_REFCUR);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';
      
/**  Call TERMINAL Reference Cursor  ***/

      V_BREAK   :=    'Begin call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
      CCN_TABLE_IU_PKG.TERMINAL_S_SP(
            in_cost_center          
 					, V_POLLING_STATUS_CODE
          , in_terminal_number
					, out_terminal_refcur);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
 EXCEPTION  
 
        when invalid_cost_center_err then  
        v_code := errnums.en_invalid_cost_center_err;
        errpkg.raise_err(v_code, 'POLLING_UI_SP.invalid_cost_center_err '
        || v_break,    
        'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Cost Center is not found'
        ); 
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'COST_CENTER_UI_SP Error ' || 
                'Last Break Point was '    || v_break );   
 
       null;
 
END POLLING_UI_SP;

PROCEDURE POLLING_UI_UPSERT_SP ( 
/******************************************************************************
	POLLING_UI_UPSERT_SP   --    POLLING User Interface Update/Insert Procedure

	This procedure is intended to update the database for the following tables 
       used in the Polling UI.

	Tables: 
            POLLING
          , BANK_CARD
          , TERMINAL
  
created : 11/09/2012 MDH CCN Project....
revised : 12/19/2012 MDH take inserts/updates out of loop process.
revised:   08/26/2013 CCN Project : Business Rules Validation ....
*******************************************************************************/
--
in_row_data  IN  varchar2)--sys.xmltype 

is
--cursor to get table names....

cursor TABLES_CUR is

    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like '%$%';

/*
*/
v_Row_data xmltype := sys.xmltype(in_row_data);

v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_polling_frag clob;
v_xml_bank_card_frag clob;
v_xml_terminal_frag clob;
--
V_BANK_CARD_ROWTYPE      BANK_CARD%rowtype;
V_POLLING_ROWTYPE        POLLING%rowtype;
V_TERMInAL_ROWTYPE       TERMINAL%rowtype;
--
v_count integer := 1;
--
BEGIN
--
--    Removing fragments to send to individual procedures.
--
--Validating Business Rules
VALIDATE_BUSINESS_RULES('POLLING',in_row_data);

 FOR tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/POLLING_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/POLLING_UI/'|| tables_rec.table_name).getCLOBVal();
     
        CASE tables_rec.table_name
            when 'POLLING'   then 
            	V_XML_POLLING_FRAG   := V_XML_FRAG;
            when 'BANK_CARD' then 
            	V_XML_BANK_CARD_FRAG := V_XML_FRAG;
            	
        else
            null;
        END CASE;
    end if;

    
--
--
 END LOOP; --TABLES_CUR
--
--
--********************************************************************************
-- POLLING insert/update process - must be processed before BANK_CARD or TERMINAL
--*********************************************************************************
   BEGIN
       IF V_XML_POLLING_FRAG  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.POLLING_I_SP (
                 'POLLING'             
                , v_xml_polling_frag
                , v_polling_rowtype );
                
       end if;


     EXCEPTION
          when dup_val_on_index  then
            BEGIN
              CCN_TABLE_IU_PKG.POLLING_U_SP (
                  'POLLING'
                , v_xml_polling_frag 
                , V_POLLING_ROWTYPE );
            EXCEPTION 
               WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                   v_errm ||
                   ' Polling Update Error ' );
           END;
   END;
--
--
--******************************************************************************
-- TERMINAL insert/update process with loop - This is processed second
--******************************************************************************
-- 
     WHILE v_Row_data.existsNode('/POLLING_UI/TERMINAL_TABLE/' || 'TERMINAL' || '[' || v_count || ']') = 1 LOOP

           v_xml_terminal_frag := v_Row_data.extract('/POLLING_UI/TERMINAL_TABLE/'|| 'TERMINAL' || '[' || v_count || ']').getCLOBVal();
 
            -- TERMINAL insert/update process 
            BEGIN
                if v_xml_terminal_frag  is not null  then
                    CCN_TABLE_IU_PKG.TERMINAL_I_SP (
                      'TERMINAL'             
                     , v_xml_terminal_frag
                     , v_terminal_rowtype );
                end if;
            EXCEPTION
                  when dup_val_on_index  then
                   BEGIN
                       CCN_TABLE_IU_PKG.TERMINAL_U_SP (
                           'TERMINAL'
                         , v_xml_terminal_frag 
                         , v_terminal_rowtype );
                    EXCEPTION 
                        WHEN OTHERS THEN 
                            v_code  := SQLCODE;
                            v_errm  := substr(SQLERRM,1,200);
                            errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm  ||
                            ' Terminal Update Error ' );
                    END;  
            END;
--                
            v_count := v_count + 1;
--                
     END LOOP; -- TERMINALS
--
--
--******************************************************************************
-- BANK_CARD insert/update process - This is processed third
--******************************************************************************
   BEGIN
          IF V_XML_BANK_CARD_FRAG  IS NOT NULL  THEN 
              CCN_TABLE_IU_PKG.BANK_CARD_I_SP (
                 null
               , null
               , null
               , null
               , 'BANK_CARD'
               , null
               , v_xml_bank_card_frag);
          end if;
   EXCEPTION
         when dup_val_on_index  then
          BEGIN
              CCN_TABLE_IU_PKG.BANK_CARD_U_SP (
                  null
                , null
                , null
                , null
                , 'BANK_CARD'
                , null
                , V_XML_BANK_CARD_FRAG); 
         EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Bank_Card Update Error ' );
          END; 
   END;


   CCN_RESTRICTION_PKG.RELEASE_OBJECT('TERMINAL');
   
   --Below call will check if there are any warnings and raise those from here
   ERRPKG.RAISE_WARNINGS();

--
--
EXCEPTION

    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );
                            
END POLLING_UI_UPSERT_SP;

PROCEDURE ADDRESS_UI_UPSERT_SP ( 
/******************************************************************************
	ADDRESS_UI_UPSERT_SP   --    ADDRESS User Interface Update/Insert Procedure

	This procedure is intended to update the database for the following tables 
       used in the ADDRESS UI.

	Tables: 
            ADDRESS_CAN, 
            ADDRESS_USA, 
            ADDRESS_MEX, 
            ADDRESS_OTHER
  
created : 12/12/2012 TAL CCN Project....
revised : 08/26/2013 CCN Project : Business Rules Validation ....
*******************************************************************************/

in_row_data  IN  varchar2 ) --sys.xmltype 

is
--cursor to get table names....

cursor TABLES_CUR is

    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like '%$%';

/*
*/

v_Row_data xmltype := sys.xmltype(in_Row_data);

-- v_row_value varchar2(500);
-- v_row_xml_frag sys.xmltype;
-- v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_ADDRESS_CAN_frag clob;
v_xml_ADDRESS_USA_frag clob;
v_xml_ADDRESS_MEX_frag clob;
v_xml_ADDRESS_OTH_frag clob;
v_xml_TAXWARE_frag     clob;
--
V_TAXWARE_ROWTYPE              TAXWARE%rowtype;
--
v_count integer := 1;

begin

    
--Validating Business Rules
VALIDATE_BUSINESS_RULES('ADDRESS',in_row_data);

--    Removing fragments to send to individual procedures.

 for tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) then
     
     
        --v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();
		v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT').getCLOBVal();
     
        case tables_rec.table_name
            when 'ADDRESS_CAN'   then v_xml_ADDRESS_CAN_frag   := v_xml_frag;
            when 'ADDRESS_USA'   then v_xml_ADDRESS_USA_frag   := v_xml_frag;
            when 'ADDRESS_MEX'   then v_xml_ADDRESS_MEX_frag   := v_xml_frag;
            when 'ADDRESS_OTHER' then v_xml_ADDRESS_OTH_frag   := v_xml_frag;
            when 'TAXWARE' then v_xml_TAXWARE_frag   := v_Row_data.extract('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();
        else
            null;
        end case;
        
BEGIN      -- ADDRESS Processing
           
  BEGIN      -- ADDRESS_CAN Insert Process 
          
            if v_xml_ADDRESS_CAN_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_CAN'                       --in_table_name
                  , null                                --in_row_date
                  , V_XML_ADDRESS_CAN_FRAG );           --in_row_data   xml
         
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_CAN_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_CAN Insert Error ' );

            
  END;       -- ADDRESS_CAN Insert Process 
           
  BEGIN      -- ADDRESS_USA Insert Process 
          
            if v_xml_ADDRESS_USA_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_USA'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_USA_frag );           --in_row_data   xml
                     
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_USA_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_USA Insert Error ' );
                
            
  END;       -- ADDRESS_USA Insert Process 
           
  BEGIN      -- ADDRESS_MEX Insert Process 
          
            if v_xml_ADDRESS_MEX_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_MEX'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_MEX_frag );           --in_row_data   xml
                
         
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_MEX_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_MEX Insert Error ' );
                
            
  END;       -- ADDRESS_MEX Insert Process 
           
  BEGIN      -- ADDRESS_OTH Insert Process 
          
            if v_xml_ADDRESS_OTH_frag  is not null  then
            
                CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_OTHER'                     --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_OTH_frag );           --in_row_data   xml
                
         
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_OTH_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_OTH Insert Error ' );
                
            
  END;       -- ADDRESS_OTH Insert Process 
  
       begin   --  TAXWARE insert/update process
                
          if v_xml_taxware_frag  is not null then
              CCN_TABLE_IU_PKG.TAXWARE_I_SP (                            
                 'TAXWARE' 
                , v_xml_taxware_frag
                , V_TAXWARE_ROWTYPE);    
          end if;                             
          
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TAXWARE_U_SP (                  
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);  
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'ADDRESS_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' TAXWARE Update Error ' );
           end;
        end;

END;       -- ADDRESS Processing

End if;    -- if (v_Row_data.existsNode('/ADDRESS_UI_UPSERT/'


 end loop; --TABLES_CUR

exception

    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'ADDRESS_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );

END ADDRESS_UI_UPSERT_SP;

PROCEDURE COST_CENTER_UI_UPSERT_SP ( 
 /******************************************************************************
	COST_CENTER_UI_UPSERT_SP   --    Cost Center User Interface Update delete
        Procedure

	This procedure is intended to update the database for the following tables used in
        Cost Center UI.
	Tables: 
              COST_CENTER
            , ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
            , STATUS
            , TYPE
            , MARKETING
            , PHONE
            , TAXWARE
            , ADDRESS tables.  

created : 10/26/2012 KDP CCN Project....
revised:   12/03/2012 BLR  CCN Project....
revised:   08/26/2013 CCN Project : Business Rules Validation ....
*******************************************************************************/

 in_row_data  in varchar2) --sys.xmltype
 
 IS

--v_Row_data xmltype := sys.xmltype(in_Row_data);

BEGIN

      COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(in_row_data);
 
END COST_CENTER_UI_UPSERT_SP;

PROCEDURE VALIDATE_BUSINESS_RULES(
 /******************************************************************************
	VALIDATE_BUSINESS_RULES   --    User Interface Update delete business rules validator

	This procedure is intended to validate the business rules based on the flag sent using
  the input XML fragment.

created : 08/26/2013 CCN Project....
*******************************************************************************/
IN_FLAG      IN VARCHAR2,
IN_ROW_DATA  IN VARCHAR2)
IS
   TYPE    GenCurTyp   IS REF CURSOR;
   SUBTYPE XMLFragType IS VARCHAR2(32000);
   
   V_GENERIC_CURSOR            GenCurTyp;
   V_TABLE_NAME                VARCHAR2(500);
   V_XML_FRAG                  XMLFragType;
   V_ROW_DATA                  XMLTYPE := SYS.XMLTYPE(IN_ROW_DATA);
   V_COUNT                     NUMBER;
   V_ROW_DATE                  DATE;
   
   V_XML_COST_CENTER_FRAG      XMLFragType;
   V_COST_CENTER_ROWTYPE       COST_CENTER%ROWTYPE;
   V_XML_ADDR_CAN_FRAG         XMLFragType;
   V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%ROWTYPE;
   V_XML_ADDR_MEX_FRAG         XMLFragType;
   V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%ROWTYPE;
   V_XML_ADDR_OTH_FRAG         XMLFragType;
   V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%ROWTYPE;
   V_XML_ADDR_USA_FRAG         XMLFragType;
   V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%ROWTYPE;
   V_XML_TYPE_FRAG             XMLFragType;
   V_XML_STATUS_FRAG           XMLFragType;
   V_XML_TAXWARE_FRAG          XMLFragType;
   V_XML_MARKETING_FRAG        XMLFragType;
   V_XML_ADMINISTRATION_FRAG   XMLFragType;
   V_XML_STORE_FRAG            XMLFragType;
   V_XML_OTHER_FRAG            XMLFragType;
   V_XML_REAL_ESTATE_FRAG      XMLFragType;
   V_XML_TERRITORY_FRAG        XMLFragType;
   V_XML_BANK_CARD_FRAG        XMLFragType;
   V_XML_POLLING_FRAG          XMLFRAGTYPE;
   V_POLLING_ROWTYPE           POLLING%ROWTYPE;
   V_XML_PHONE_FRAG            XMLFragType;
   V_XML_PHONE_PRI_FRAG        XMLFragType;
   V_XML_PHONE_SCD_FRAG        XMLFragType;
   V_XML_SALES_REP_FRAG        XMLFragType;
   V_XML_TERMINAL_FRAG         XMLFragType;
   V_TERMINAL_ROWTYPE          TERMINAL%ROWTYPE;
   V_XML_TERR_ASGN_FRAG        XMLFragType;
   V_XML_TERR_SLS_MGR_FRAG     XMLFragType;
   
   V_FRAGMENT_HEADER           VARCHAR2(100);
   
BEGIN

   CASE

      WHEN IN_FLAG = 'COST_CENTER' THEN

         --Set the XML search header for Cost Center UI Process
         V_FRAGMENT_HEADER := '/COST_CENTER_UI/';

         --Opening Ref cursor for Cost Center UI Process
         OPEN V_GENERIC_CURSOR FOR
            SELECT CASE TABLE_NAME
                      WHEN 'PHONE'         THEN 'PHONE_TABLE/PHONE'
                      WHEN 'TERMINAL'      THEN 'TERMINAL_TABLE/TERMINAL'
                      WHEN 'ADDRESS_CAN'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_CAN'
                      WHEN 'ADDRESS_MEX'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_MEX'
                      WHEN 'ADDRESS_OTHER' THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_OTHER'
                      WHEN 'ADDRESS_USA'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_USA'
                      ELSE TABLE_NAME
                   END CASE
              FROM INSERTORDER
             ORDER BY TABLE_ORDER;
             
         --We need to cerate the Cost Center Record Type here itself during Cost Center creation
         --as address validations requires this record type as input from this procedure
         V_XML_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || 'COST_CENTER').GETSTRINGVAL();
         CCN_TABLE_IU_PKG.COST_CENTER_ROWTYPE_SP(NULL
                                                 ,'COST_CENTER'  
                                                 ,V_ROW_DATE    
                                                 ,V_XML_FRAG    
                                                 ,V_COST_CENTER_ROWTYPE );

         --Validate Duplicate cost center code [Based on last four characters of cost center code]
         COMMON_TOOLS.CHECK_DUP_COST_CENTER(V_COST_CENTER_ROWTYPE.COST_CENTER_CODE
                                           ,V_COST_CENTER_ROWTYPE.CATEGORY);
      WHEN IN_FLAG IN ('ADDRESS','POLLING') THEN

         CASE

            WHEN IN_FLAG = 'ADDRESS' THEN
               --Set the XML search header for Address UI Process
               V_FRAGMENT_HEADER := '/ADDRESS_UI_UPSERT/';
            WHEN IN_FLAG = 'POLLING' THEN
               --Set the XML search header for Polling UI Process
               V_FRAGMENT_HEADER := '/POLLING_UI/';
               
               --We need to cerate the Polling Record Type here itself
               --as terminal validations requires this record type as input from this procedure
               V_XML_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || 'POLLING').GETSTRINGVAL();
               CCN_TABLE_IU_PKG.POLLING_ROWTYPE_SP('POLLING'  
                                                   ,V_XML_FRAG    
                                                   ,V_POLLING_ROWTYPE );
            ELSE NULL;

         END CASE;

         --Opening Ref cursor for Polling / Address UI Process
         OPEN V_GENERIC_CURSOR FOR
            SELECT DISTINCT
                   CASE TABLE_NAME
                      WHEN 'TERMINAL'      THEN 'TERMINAL_TABLE/TERMINAL'
                      ELSE TABLE_NAME
                   END CASE
              FROM ALL_TAB_COLUMNS A
             WHERE OWNER = 'COSTCNTR'
               AND TABLE_NAME NOT LIKE 'TEMP%'
               AND TABLE_NAME NOT LIKE '%$%';
      ELSE NULL;

   END CASE;

   LOOP

      FETCH V_GENERIC_CURSOR INTO V_TABLE_NAME;
      IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME) = 1) THEN

         V_XML_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME).GETSTRINGVAL();

         --Extracting fragments for each required table, if present
         CASE
            --For ADDRESS_CAN, ADDRESS_MEX, ADDRESS_OTHER, ADDRESS_USA the XML Fragment comes differently[Multiple Levels] as coded below
-- removed kdp needs debugging
            WHEN V_TABLE_NAME LIKE '%ADDRESS_CAN'         THEN --V_XML_ADDR_CAN_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_CAN_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_CAN_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_CAN_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_CAN'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_CAN_FRAG    
                                                              ,V_ADDRESS_CAN_ROWTYPE);
                       
                       CCN_BUSINESS_RULES_PKG.ADDRESS_CAN_BR_SP(V_ADDRESS_CAN_ROWTYPE, V_COST_CENTER_ROWTYPE ); 
                       
                    END IF;

                    V_COUNT := V_COUNT + 1;
                    
                  END LOOP;
            WHEN V_TABLE_NAME LIKE '%ADDRESS_MEX'         THEN --V_XML_ADDR_MEX_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_MEX_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_MEX_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_MEX_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_MEX'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_MEX_FRAG    
                                                              ,V_ADDRESS_MEX_ROWTYPE);
                       
                       CCN_BUSINESS_RULES_PKG.ADDRESS_MEX_BR_SP(V_ADDRESS_MEX_ROWTYPE, V_COST_CENTER_ROWTYPE ); 
                       
                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE '%ADDRESS_OTHER'       THEN --V_XML_ADDR_OTH_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_OTH_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_OTH_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_OTHER_ROWTYPE_SP(NULL
                                                                ,NULL
                                                                ,NULL
                                                                ,'ADDRESS_OTHER'
                                                                ,V_ROW_DATE    
                                                                ,V_XML_ADDR_OTH_FRAG    
                                                                ,V_ADDRESS_OTHER_ROWTYPE);
                       
                       CCN_BUSINESS_RULES_PKG.ADDRESS_OTH_BR_SP(V_ADDRESS_OTHER_ROWTYPE, V_COST_CENTER_ROWTYPE ); 
                       
                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;

            WHEN V_TABLE_NAME LIKE '%ADDRESS_USA'         THEN --V_XML_ADDR_USA_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_USA_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_USA_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_USA_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_USA'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_USA_FRAG    
                                                              ,V_ADDRESS_USA_ROWTYPE);
                       
                       CCN_BUSINESS_RULES_PKG.ADDRESS_USA_BR_SP(V_ADDRESS_USA_ROWTYPE, V_COST_CENTER_ROWTYPE ); 
                       
                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE 'ADMINISTRATION'       THEN V_XML_ADMINISTRATION_FRAG := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'BANK_CARD'            THEN V_XML_BANK_CARD_FRAG      := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'COST_CENTER'          THEN V_XML_COST_CENTER_FRAG    := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'MARKETING'            THEN V_XML_MARKETING_FRAG      := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'OTHER'                THEN V_XML_OTHER_FRAG          := V_XML_FRAG;
            --For PHONE_TABLE the XML Fragment comes differently as coded below for COST_CENTER
            WHEN V_TABLE_NAME LIKE '%PHONE'          THEN
            
                 IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[1]') = 1) THEN
                    V_XML_PHONE_PRI_FRAG  := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[1]').GETSTRINGVAL();
                 END IF;
            
                 IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[2]') = 1) THEN
                    V_XML_PHONE_SCD_FRAG  := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[2]').GETSTRINGVAL();
                 END IF;

                 IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[3]') = 1) THEN
                    V_XML_PHONE_FRAG      := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[3]').GETSTRINGVAL();
                 END IF;
            
            WHEN V_TABLE_NAME LIKE 'POLLING'              THEN V_XML_POLLING_FRAG        := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'REAL_ESTATE'          THEN V_XML_REAL_ESTATE_FRAG    := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'SALES_REP'            THEN V_XML_SALES_REP_FRAG      := V_XML_FRAG; -- Found Table
            WHEN V_TABLE_NAME LIKE 'STATUS'               THEN V_XML_STATUS_FRAG         := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'STORE'                THEN V_XML_STORE_FRAG          := V_XML_FRAG;
            --For TERMINAL_TABLE the XML Fragment comes differently[Multiple Levels] as coded below for POLLING
            WHEN V_TABLE_NAME LIKE '%TERMINAL'       THEN -- Found Table
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_TERMINAL_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_TERMINAL_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.TERMINAL_ROWTYPE_SP('TERMINAL' 
                                                            ,V_XML_TERMINAL_FRAG
                                                            ,V_TERMINAL_ROWTYPE);

                       CCN_BUSINESS_RULES_PKG.TERMINAL_BR_SP(V_TERMINAL_ROWTYPE,
                                                             V_POLLING_ROWTYPE);

                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE 'TERRITORY'            THEN V_XML_TERRITORY_FRAG      := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'TERRITORY_ASSIGNMENT' THEN V_XML_TERR_ASGN_FRAG      := V_XML_FRAG; -- Found Table
            WHEN V_TABLE_NAME LIKE 'TERRITORY_SALES_MGR'  THEN V_XML_TERR_SLS_MGR_FRAG   := V_XML_FRAG; -- Found Table
            WHEN V_TABLE_NAME LIKE 'TYPE'                 THEN V_XML_TYPE_FRAG           := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'TAXWARE'              THEN V_XML_TAXWARE_FRAG        := V_XML_FRAG;
            ELSE NULL;

         END CASE;

      END IF;

      EXIT WHEN V_GENERIC_CURSOR%NOTFOUND;

   END LOOP;

   --Close the cursor before exiting the function
   IF V_GENERIC_CURSOR%ISOPEN THEN
       CLOSE V_GENERIC_CURSOR;
   END IF;

   --Calling the business rules package with all these obtained fragments as inputs
   CCN_BUSINESS_RULES_PKG.BUSINESS_RULES_SP(V_XML_ADDR_CAN_FRAG,
                                            V_XML_ADDR_MEX_FRAG,
                                            V_XML_ADDR_OTH_FRAG,
                                            V_XML_ADDR_USA_FRAG,
                                            V_XML_ADMINISTRATION_FRAG,
                                            V_XML_BANK_CARD_FRAG,
                                            V_XML_COST_CENTER_FRAG,
                                            V_XML_MARKETING_FRAG,
                                            V_XML_OTHER_FRAG,
                                            V_XML_PHONE_FRAG,
                                            V_XML_PHONE_PRI_FRAG,
                                            V_XML_PHONE_SCD_FRAG,
                                            V_XML_POLLING_FRAG,
                                            V_XML_REAL_ESTATE_FRAG,
                                            V_XML_SALES_REP_FRAG,
                                            V_XML_STATUS_FRAG,
                                            V_XML_STORE_FRAG,
                                            V_XML_TERMINAL_FRAG,
                                            V_XML_TERRITORY_FRAG,
                                            V_XML_TERR_ASGN_FRAG,
                                            V_XML_TERR_SLS_MGR_FRAG,
                                            V_XML_TYPE_FRAG);

/*EXCEPTION
   WHEN OTHERS THEN
      --Close the cursor if it is already open
      IF V_GENERIC_CURSOR%ISOPEN THEN
          CLOSE V_GENERIC_CURSOR;
      END IF;
      
      --Raise the exception all the way back to the place where it is logged
      errpkg.raise_err(SQLCODE, ' VALIDATE_BUSINESS_RULES (xmltype) Error ', SUBSTR(SQLERRM,12, 500));*/
END VALIDATE_BUSINESS_RULES;

FUNCTION TERMINAL_NUMBER_S
/*********************************************************************
TERMINAL_NUMBER_S
This function will return the next terminal number from the 
sequence terminal_number_seq
updated : nxk 3/18/14 
*************************************************************************/
   RETURN NUMBER
AS 
     V_SEQUENCE_NUMBER      NUMBER;
     V_IS_OBJECT_RESTRICTED BOOLEAN;
BEGIN

   V_IS_OBJECT_RESTRICTED := CCN_RESTRICTION_PKG.IS_OBJECT_RESTRICTED('TERMINAL');

   IF NOT V_IS_OBJECT_RESTRICTED THEN
      CCN_RESTRICTION_PKG.RESTRICT_OBJECT('TERMINAL');

      SELECT NVL(MAX(TERMINAL_NUMBER), 0) + 1 INTO V_SEQUENCE_NUMBER 
        FROM TERMINAL
       WHERE TERMINAL_NUMBER not in ('99308', '99112', '99111', '71882');

      CASE
         WHEN V_SEQUENCE_NUMBER  IN ('99308','71882') THEN  V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER + 1;
         WHEN V_SEQUENCE_NUMBER   = '99111' THEN V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER + 2; --(because of two consecutive terminal numbers '99111' and '99112')
         ELSE V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER ;
      END CASE;
      
      RETURN V_SEQUENCE_NUMBER;
	 ELSE
      errpkg.raise_err(errnums.en_terminal_window_locked_err,
                       ' TERMINAL_NUMBER_S ', 
                       'TERMINAL table has been locked. Please try processing again after some time');
   END IF;

END TERMINAL_NUMBER_S;

PROCEDURE COPY_COST_CENTER(
/**********************************************************
	COPY_COST_CENTER

	This procedure will copy the OLD cost center into NEW cost center

IN_OLD_CC - Input Cost Center to be removed
IN_NEW_CC - Input Cost Center to be created

created : 09/11/2013 kdp CCN Project....
**********************************************************/
          IN_OLD_CC IN VARCHAR2,
          IN_NEW_CC IN VARCHAR2) IS
BEGIN

    COMMON_TOOLS.COPY_COST_CENTER(IN_OLD_CC,IN_NEW_CC);

END COPY_COST_CENTER;

PROCEDURE DELETE_COST_CENTER(
/**********************************************************
	DELETE_COST_CENTER

	This procedure will delete the passed cost center

IN_COST_CENTER - Input Cost Center to be removed

created : 01/29/2013 jxc517 CCN Project....
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS
BEGIN

    COMMON_TOOLS.DELETE_COST_CENTER(IN_COST_CENTER);

END DELETE_COST_CENTER;

PROCEDURE SELECT_HIERARCHY_AUDIT_LOG
/**********************************************************
SELECT_HIERARCHY_AUDIT_LOG

Wrapper for call to CCN_AUDIT_PKG.SELECT_HIERARCHY_AUDIT_LOG

created : 03/11/2014 jxc517 CCN Project Team . . . 
modified :
**********************************************************/
IS
SELECT_AUDIT_LOG_HIER_EXC EXCEPTION;
V_PATH                    VARCHAR2(100);
BEGIN
   SELECT SUBSTR(DIRECTORY_PATH,1,
                 --4th occurance of '/' in all other environments (dev, test and qa)
                 --3rd occurance of '/' in production
                 INSTR(DIRECTORY_PATH,'/',1,DECODE(sys_context('USERENV','SERVICE_NAME'),'STCCNP',3,4)))
     INTO V_PATH
     FROM ALL_DIRECTORIES
    WHERE DIRECTORY_NAME = 'CCN_DATAFILES'
      AND ROWNUM < 2;

   IF NOT COMMON_TOOLS.EXECUTE_UNIX_COMMAND('cd '||TRIM(V_PATH)||'batchJobs/backFeed' || CHR(10) || 'sh Main_Audit_Hierarchy.sh') THEN
       RAISE SELECT_AUDIT_LOG_HIER_EXC;
   END IF;
EXCEPTION
    WHEN OTHERS THEN
	      ERRPKG.RAISE_ERR(-20003,'SELECT_HIERARCHY_AUDIT_LOG', SQLCODE || ' ' || SQLERRM);
END SELECT_HIERARCHY_AUDIT_LOG;

PROCEDURE SELECT_AUDIT_LOG
/**********************************************************
SELECT_AUDIT_LOG

Wrapper for call to CCN_AUDIT_PKG.SELECT_AUDIT_LOG

created : 03/11/2014 jxc517 CCN Project Team . . . 
modified :
**********************************************************/
IS
SELECT_AUDIT_LOG_EXCEPTION EXCEPTION;
V_PATH                    VARCHAR2(100);
BEGIN
   SELECT SUBSTR(DIRECTORY_PATH,1,
                 --4th occurance of '/' in all other environments (dev, test and qa)
                 --3rd occurance of '/' in production
                 INSTR(DIRECTORY_PATH,'/',1,DECODE(sys_context('USERENV','SERVICE_NAME'),'STCCNP',3,4)))
     INTO V_PATH
     FROM ALL_DIRECTORIES
    WHERE DIRECTORY_NAME = 'CCN_DATAFILES'
      AND ROWNUM < 2;

   IF NOT COMMON_TOOLS.EXECUTE_UNIX_COMMAND('cd '||TRIM(V_PATH)||'batchJobs/backFeed' || CHR(10) || 'sh Main_Audit.sh') THEN
       RAISE SELECT_AUDIT_LOG_EXCEPTION;
   END IF;
EXCEPTION
    WHEN OTHERS THEN
	      ERRPKG.RAISE_ERR(-20003,'SELECT_AUDIT_LOG', SQLCODE || ' ' || SQLERRM);
END SELECT_AUDIT_LOG;

 PROCEDURE RELEASE_OBJECT(
 /******************************************************************************
 RELEASE_OBJECT
 
 This procedure will release the restriction on passed object based on passed 
 restriction ID
 
 IN_RESTRICTION_ID     - Restriction ID that needs to be released
 
 ******************************************************************************/
 IN_OBJECT_NAME     IN       CCN_RESTRICTION.OBJECT_NAME%TYPE)
 IS
 BEGIN
 
     CCN_RESTRICTION_PKG.RELEASE_TIMED_OUT_OBJECTS(0);
 
 EXCEPTION 
     WHEN OTHERS THEN
        RAISE;
 END RELEASE_OBJECT;

PROCEDURE EMPLOYEE_DETAILS_S_SP (
/*******************************************************************************
	EMPLOYEE_DETAILS_S_SP

	This procedure is intended to select records from EMPLOYEE_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXX</EMPLOYEE_NUMBER>
<COST_CENTER_CODE>XXXXXX</COST_CENTER_CODE>
<EMPLOYEE_NAME>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</EMPLOYEE_NAME>
<LAST_NAME>XXXXXXXXXXXXXXXXXXXX</LAST_NAME>
<FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</FIRST_NAME>
<MIDDLE_INITIAL>XX</MIDDLE_INITIAL>
<HOME_ADDRESS_LINE1>XXXXXXXXXXXXXXXXXXXX</HOME_ADDRESS_LINE1>
<HOME_ADDRESS_LINE2>XXXXXXXXXXXXXXXXXXXX</HOME_ADDRESS_LINE2>
<HOME_CITY_STATE>XXXXXXXXXXXXXXXXXXXX</HOME_CITY_STATE>
<HOME_CITY>XXXXXXXXXXXXXXXXXXXX</HOME_CITY>
<HOME_STATE>XX</HOME_STATE>
<HOME_POSTAL_CODE>XXXXXXXXX</HOME_POSTAL_CODE>
<HOME_PHONE>XXXXXXXXXX</HOME_PHONE>
<COMPANY_CODE>XXX</COMPANY_CODE>
<SEX>X</SEX>
<EMP_PAYROLL_STATUS>X</EMP_PAYROLL_STATUS>
<EMP_ASSIGNMENT_STATUS>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</EMP_ASSIGNMENT_STATUS>
<EMP_DIVISION>XXXX</EMP_DIVISION>
<HIRE_DATE>MM-DD-RRRR</HIRE_DATE>
<TERM_DATE>MM-DD-RRRR</TERM_DATE>
<ADJUSTED_SERVICE_DATE>MM-DD-RRRR</ADJUSTED_SERVICE_DATE>
<JOB_CODE>XXXXX</JOB_CODE>
<JOB_DIVISION>XXXX</JOB_DIVISION>
<JOB_FAMILY>XXXXXXXXXX</JOB_FAMILY>
<JOB_TITLE>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</JOB_TITLE>
<JOB_TYPE>XXXXXXXXXXXXXXX</JOB_TYPE>
<JOB_LEVEL>XXXXXXXXXX</JOB_LEVEL>
<JOB_FUNCTION>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</JOB_FUNCTION>
<DAD_CODE>XXXXXXXX</DAD_CODE>
</EMPLOYEE_DETAILS>
</EMPLOYEE_DETAILS_UI>

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
BEGIN

    CCN_EMPLOYEE_DETAILS_PKG.EMPLOYEE_DETAILS_S_SP(IN_TABLE_NAME,
                                                   IN_ROW_DATA,
                                                   OUT_REF_CUR);

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END EMPLOYEE_DETAILS_S_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_S_SP (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_S_SP

	This procedure is intended to select records from EMPLOYEE_ADMIN_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_ADMIN_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XXXXXXX</EMPLOYEE_MIDDLE_NAME>
<JOB_TYPE>XXXXXXX</JOB_TYPE>
<DESCRIPTION>XXXXXXX</DESCRIPTION>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>

Created : 06/23/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
BEGIN

    CCN_EMPLOYEE_DETAILS_PKG.EMPLOYEE_ADMIN_DETAILS_S_SP(IN_TABLE_NAME,
                                                         IN_ROW_DATA,
                                                         OUT_REF_CUR);

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END EMPLOYEE_ADMIN_DETAILS_S_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_UPSERT (
/*******************************************************************************
	EMPLOYEE_ADMIN_DETAILS_UPSERT

	This procedure is intended to insert/update records into EMPLOYEE_ADMIN_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_ADMIN_DETAILS_UPSERT xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_ADMIN_DETAILS_UI>
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XX</EMPLOYEE_MIDDLE_NAME>
<JOB_TYPE>XXXXXXX</JOB_TYPE>
<DESCRIPTION>XXXXXXX</DESCRIPTION>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>
<EMPLOYEE_ADMIN_DETAILS_UI>
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XX</EMPLOYEE_MIDDLE_NAME>
<JOB_TYPE>XXXXXXX</JOB_TYPE>
<DESCRIPTION>XXXXXXX</DESCRIPTION>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>
</EMPLOYEE_ADMIN_DETAILS_UPSERT>

Created : 07/24/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_COUNT     NUMBER := 1;
    V_ROW_DATA  CLOB;
    V_XML       XMLTYPE := SYS.XMLTYPE(IN_ROW_DATA);
BEGIN

    WHILE V_XML.EXISTSNODE('//EMPLOYEE_ADMIN_DETAILS_UPSERT/EMPLOYEE_ADMIN_DETAILS_UI[' || V_COUNT || ']') = 1 LOOP
        V_ROW_DATA := V_XML.EXTRACT('//EMPLOYEE_ADMIN_DETAILS_UPSERT/EMPLOYEE_ADMIN_DETAILS_UI[' || V_COUNT || ']').GETCLOBVAL();
        CCN_EMPLOYEE_DETAILS_PKG.EMPLOYEE_ADMIN_DETAILS_I_SP(IN_TABLE_NAME,
                                                             V_ROW_DATA);
        V_COUNT := V_COUNT + 1;
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END EMPLOYEE_ADMIN_DETAILS_UPSERT;

PROCEDURE ROLE_USER_RULES_PICKLIST(
/*******************************************************************************
    ROLE_USER_RULES_PICKLIST

    This procedure will give the ruels based on inputs passed

Inputs
    IN_USER_ID     user id for which the role rules needs to be picked for
    IN_WINDOW      which window rules to be picked up. eg HIERARCHY_WINDOW, TERRITORY_WINDOW
    IN_CATEGORY    which category rules to be picked up. eg HIERARCHY_NAME, TERRITORY_FIELDS

Created : 08/27/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_USER_ID   IN     VARCHAR2,
    IN_WINDOW    IN     VARCHAR2,
    IN_CATEGORY  IN     VARCHAR2,
    OUT_REF_CUR     OUT REF_CURSOR)
IS
    V_VALUE VARCHAR2(1000);
BEGIN
    V_VALUE := '/USER_RULES_DESCRIPTION/'||IN_WINDOW||'/'||IN_CATEGORY||'/*';
    OPEN OUT_REF_CUR FOR
        SELECT x.*
          FROM ROLE_DETAILS RD,
               SECURITY_MATRIX SM,
               XMLTABLE (V_VALUE PASSING RD.USER_RULES_DESCRIPTION COLUMNS Value VARCHAR2(30) PATH 'text()') x
        WHERE UPPER(SM.USER_ID)   = UPPER(IN_USER_ID)
          AND SM.ROLE_CODE = RD.ROLE_CODE;

EXCEPTION
    WHEN OTHERS THEN
        NULL;
END ROLE_USER_RULES_PICKLIST;

end CCN_UI_INTERFACE_APP_PKG;

