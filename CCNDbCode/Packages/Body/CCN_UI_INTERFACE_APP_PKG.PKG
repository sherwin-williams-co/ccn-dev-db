create or replace PACKAGE BODY          CCN_UI_INTERFACE_APP_PKG
    AS
-- PACKAGE BODY
/****************************************************************************** 
This package is intended to return data for the cost_center table

created : 09/18/2012 TAL -- CCN coding project
changed : 09/21/2012 TAL -- Split into Table_IU and Interface_UI
        : 04/04/2013 TAL -- Modified Error Messages to be easier to read
        : 04/17/2017 rxa457 -- ASP-763 Return data with respect to the newly added table DISPATCH_TERMINAL
        : 07/24/2018 kxm302 CCN Project Team...
		  Removed SELECT_AUDIT_LOG ,SELECT_HIERARCHY_AUDIT_LOG procedures as part of audit clean-up - ASP-1092
        : 11/20/2018 mxs216, ASP-1158, Business rule to stop users from updating **L* archived cost centers
******************************************************************************/

--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
    TEST_COST_CENTER_S_SP

    This procedure is intended to return a ref cursor with data from 
    from the cost center table.  

created : 
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        IS                  

    BEGIN

          OPEN out_COST_CENTER_REF_CUR FOR
              SELECT * 
              FROM cost_center 
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);

          OPEN out_STORE_REF_CUR FOR
              SELECT * 
              FROM store 
              WHERE UPPER(cost_center_code) = UPPER(in_COST_CENTER);              

    END TEST_COST_CENTER_S_SP;

--REMOVE TESTING

PROCEDURE ADDRESS_UI_SP ( inCost_center             IN COST_CENTER.cost_center_code%type
                         ,inCountry_code            IN COST_CENTER.country_code%type
                         ,inAddressType             IN ADDRESS_USA.address_type%type DEFAULT NULL                                                 
                         ,out_ADDRESS_REF_CUR       OUT sys_refcursor)
/*******************************************************************************
    ADDRESS_UI_SP

    This procedure is intended to return an address ref cursor with data to be
    used for java  ADDRESS screen. 

created : 09/05/2012 BLR CCN UI Project....
modified: 04/07/2016 axd783 Added logic to get 6 Character Call Center and if theres duplicate throws error with the list
changed : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
Changed:  rxa457 09/01/2017 CCN Project Team...
            Home Store Address should be returned for Dispatch Terminals
*******************************************************************************/
IS                  
 v_code                      number;
 v_errm                      varchar2(500);
 v_in_costctr                varchar2(6);  
 v_cost_center_row           COST_CENTER%ROWTYPE;
 v_home_store                TERRITORY.home_store%TYPE;
 v_cost_center               COST_CENTER.cost_center_code%TYPE; 
 invalid_country_code_err    EXCEPTION;

BEGIN 

    -- Get 6 digit Cost Centet 
    BEGIN   
       v_cost_center := common_tools.cost_center_look_up_fnc(inCost_center);

    EXCEPTION
       WHEN OTHERS THEN
           RAISE;                  
    END;

/*  
 1.0  For VALIDATION OF COUNTRY_CODE INPUT 
*/        
    IF  NOT common_tools.code_detail_valid ('COUNTRY_CODE',inCountry_code) THEN  
      -- value not found in table 
            RAISE invalid_country_code_err; 
    END IF; 

 /*  
 2.0  Get Cost Center Table for Category code validation
*/    

    SELECT * 
	  INTO v_cost_center_row
      FROM COST_CENTER
     WHERE UPPER(cost_center_code) =   UPPER(inCost_center);

/*  
 3.0  when category code equal 'T' OR 'D' use home_store cost center
*/  

    IF v_cost_center_row.CATEGORY = 'T'  THEN    
         SELECT home_store 
           INTO v_home_store
           FROM TERRITORY
          WHERE UPPER(cost_center_code) =   UPPER(inCost_center);             
    ELSIF v_cost_center_row.CATEGORY = 'D'  THEN    
         SELECT home_store 
           INTO v_home_store
           FROM DISPATCH_TERMINAL
          WHERE UPPER(cost_center_code) =   UPPER(inCost_center);             
    ELSE
         v_home_store := inCost_center;      
    END IF;
 /*  
4.0  Validate which Country code column is being processed to extract correct
      address table such as:
      - ADDRESS_USA;
      - ADDRESS_CAN;
      - ADDRESS_MEX;
      - ADDRESS_OTHER
      ADDRESS_OTHER TABLE HOUSES ALL COUNTRIES EXCEPT USA, CANADA, PUERTO RICO, OR MEXICO
*/   

    CASE ( inCountry_code ) 
        WHEN 'USA' THEN
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP(v_home_store  
                                            ,inAddressType
                                            ,out_ADDRESS_REF_CUR);

        WHEN 'PRI' THEN
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP(v_home_store  
                                            ,inAddressType
                                            ,out_ADDRESS_REF_CUR);

        WHEN 'CAN' THEN
            CCN_TABLE_IU_PKG.ADDRESS_CAN_S_SP(v_home_store 
                                             ,inAddressType
                                             ,out_ADDRESS_REF_CUR );

        WHEN 'MEX' THEN
            CCN_TABLE_IU_PKG.ADDRESS_MEX_S_SP(v_home_store
                                             ,inAddressType
                                             ,out_ADDRESS_REF_CUR );

        WHEN 'BRB' THEN
            CCN_TABLE_IU_PKG.ADDRESS_BRB_S_SP(v_home_store
                                             ,inAddressType
                                             ,out_ADDRESS_REF_CUR );

        ELSE 
            CCN_TABLE_IU_PKG.ADDRESS_OTHER_S_SP(v_home_store
                                               ,inAddressType
                                               ,out_ADDRESS_REF_CUR );

    END CASE;   

EXCEPTION

    WHEN invalid_country_code_err THEN  
       v_code := errnums.en_invalid_code_detail_err;
       errpkg.raise_err(v_code
                       ,'ADDRESS_UI_SP.invalid_country_code_err '
                       ,'Entered Country_Code was "' || InCountry_code || '". ' ||'CCN_TABLE_IU_PKG ' || 'Country code must be found on "CODE_DETAIL TABLE ". '); 


    WHEN OTHERS THEN
       v_code := SQLCODE;
       v_errm := substr(SQLERRM,1, 500);
       errpkg.raise_err(v_code
                       ,v_errm ||'CCN_TABLE_IU_PKG '  || 'No errors found');

END ADDRESS_UI_SP;


PROCEDURE COST_CENTER_UI_SP ( 
 /******************************************************************************
    COST_CENTER_UI_SP   --    Cost Center User Interface Procedure

    This procedure is intended to return a ref cursor with data from 
    from the COST_CENTER, ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
  STATUS, TYPE, MARKETING, PHONE, TAXWARE, and ADDRESS tables.  

created : 09/06/2012 MDH CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
          04/07/2016 axd783 Modified cost_center_look_up_fnc call to show the list of Duplicate Cost Centers in error message
          04/17/2017 modified by rxa457 for asp-763
            Handle UPSERT related to the new table Dispatch_Terminal
Changed:  03/08/2018 mxv711 CCN Project Team..
          asp400:asp-763 changes to handle LAD_CUSTOMER in CCN
*******************************************************************************/
           IN_COST_CENTER               IN  COST_CENTER.COST_CENTER_CODE%TYPE
          ,OUT_COST_CENTER_REF_CUR      OUT SYS_REFCURSOR
          ,OUT_CC_CATEGORY_REF_CUR      OUT SYS_REFCURSOR
          ,OUT_STATUS_REF_CUR           OUT SYS_REFCURSOR
          ,OUT_TYPE_REF_CUR             OUT SYS_REFCURSOR
          ,OUT_MARKETING_REF_CUR        OUT SYS_REFCURSOR
          ,OUT_TAXWARE_REF_CUR          OUT SYS_REFCURSOR
          ,OUT_PHONE_REF_CUR            OUT SYS_REFCURSOR
          ,OUT_ADDRESS_REF_CUR          OUT SYS_REFCURSOR)
IS

v_code                            number;
v_errm                            VARCHAR(500);
v_address_type                    VARCHAR2(1)  := 'M';
v_cost_center_rowtype             COST_CENTER%ROWTYPE;
v_break                           VARCHAR(100);
v_cost_center                     COST_CENTER.cost_center_code%TYPE;
invalid_cost_center_err           EXCEPTION;

BEGIN --  COST_CENTER_UI_SP
--

    BEGIN
       v_break  := ('Convert the in_cost_center to 6 digit ' );    
       v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
    EXCEPTION
       WHEN OTHERS THEN
            RAISE;                  
    END; -- get 6 digit Cost Center

    BEGIN -- Get Cost Center

       v_break  := ('Entered the Cost_Center_UI_SP ' 
                     || ' in_cost_center = ' || v_cost_center || ' ' );
--
/**  Call COST_CENTER to get Category Code  ***/
    SELECT * 
	  INTO v_cost_center_rowtype
      FROM COST_CENTER          
     WHERE UPPER(cost_center_code) = UPPER(v_cost_center); 

    EXCEPTION
       WHEN NO_DATA_FOUND THEN
            RAISE invalid_cost_center_err;                  
    END; -- get Cost Center
--
--
/**  Call COST_CENTER Reference Cursor  ***/

    CCN_TABLE_IU_PKG.COST_CENTER_S_SP(v_cost_center          
                                     ,out_cost_center_ref_cur);      
--
--
/******************************************************************************
    Use the Category code of the COST_CENTER table to determine the type of 
    processing to be done as follows:

      S  -->  Store, Marketing, and Taxware data
      A  -->  Administration data
      R  -->  Real_Estate data
      T  -->  Territory data
      C  --> LAD_CUSTOMER data
    O  -->  Other, Marketing, and Taxware data    
*******************************************************************************/
--
    v_break  :=  ('Entered the Category Routine ' 
                   || ' in_cost_center = ' || v_cost_center 
                   || ' category <' || v_cost_center_rowtype.CATEGORY || '> ');
--
      CASE ( v_cost_center_rowtype.CATEGORY) 
        WHEN 'S' THEN
 --         STORE Table
          v_break  :=  ('Entered the STORE Category Routine ' );
          CCN_TABLE_IU_PKG.STORE_S_SP(v_cost_center          
                                     ,out_cc_category_ref_cur);  
 --         MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(v_cost_center
                                         ,NULL
                                         ,out_marketing_ref_cur);    
 --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(v_cost_center
                                       ,out_taxware_ref_cur);             

        WHEN 'D' THEN
        --DISPATCH_TERMINAL Table
          v_break := ('Entered the STORE Category Routine ');
          CCN_TABLE_IU_PKG.DISPATCH_TERMINAL_S_SP(v_cost_center, out_cc_category_ref_cur);
          --MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(v_cost_center, NULL, out_marketing_ref_cur);
          --TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(v_cost_center, out_taxware_ref_cur);

        WHEN 'A' THEN
 --         ADMINISTRATION Table
          v_break  :=  ('Entered the ADMINISTRATION Category Routine ' );
          CCN_TABLE_IU_PKG.ADMINISTRATION_S_SP(v_cost_center          
                                              ,out_cc_category_ref_cur);
        WHEN 'C' THEN
 --         LAD_CUSTOMER Table
          v_break  :=  ('Entered the LAD_CUSTOMER Category Routine ' );
          CCN_TABLE_IU_PKG.LAD_CUSTOMER_S_SP(v_cost_center          
                                              ,out_cc_category_ref_cur);                                        

        WHEN 'R' THEN
 --         REAL_ESTATE Table
          v_break  :=  ('Entered the REAL ESTATE Category Routine ' );
          CCN_TABLE_IU_PKG.REAL_ESTATE_S_SP(v_cost_center          
                                           ,out_cc_category_ref_cur);    

        WHEN 'T' THEN
 --         TERRITORY Table
          v_break  :=  ('Entered the TERRITORY Category Routine ' );
          CCN_TABLE_IU_PKG.TERRITORY_S_SP(v_cost_center
                                         ,out_cc_category_ref_cur);    

        WHEN 'O' THEN
 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(v_cost_center  
                                     ,out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(v_cost_center
                                         ,NULL
                                         ,out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(v_cost_center
                                       ,out_taxware_ref_cur);             

        WHEN 'M' THEN

 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(v_cost_center  
                                     ,out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(v_cost_center
                                         ,NULL
                                         ,out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(v_cost_center
                                       ,out_taxware_ref_cur);             

     END CASE;         
--
--
/**  Call STATUS Reference Cursor  ***/
--
      v_break  := ('Entered the STATUS Routine ' 
                    || ' in_cost_center = ' || v_cost_center 
                    || ' category <' || v_cost_center_rowtype.CATEGORY || '> ');
--
      CCN_TABLE_IU_PKG.STATUS_S_SP(v_cost_center          
                                  ,NULL
                                  ,out_status_ref_cur);
--
--
/**  Call TYPE Reference Cursor  ***/
--
       v_break  := ('Entered the STATUS Routine ' 
                    || ' in_cost_center = ' || v_cost_center 
                    || ' category <' || v_cost_center_rowtype.CATEGORY || '> ');
--
      CCN_TABLE_IU_PKG.TYPE_S_SP(v_cost_center          
                                ,NULL
                                ,out_type_ref_cur);
--
--
/**  Call PHONE Reference Cursor  ***/
--
       v_break  := ('Entered the PHONE Routine ' 
                    || ' in_cost_center = ' || v_cost_center 
                    || ' category <' || v_cost_center_rowtype.CATEGORY || '> ');
--
      CCN_TABLE_IU_PKG.PHONE_S_SP(v_cost_center          
                                 ,out_phone_ref_cur);
--
--
/******************************************************************************
    Call the ADDRESS_UI_SP procedure to obtain the "Mailing" address only for 
    the cost center being processed.

 v_address_type is set to 'M' 
*******************************************************************************/    
--    
      v_break  :=  ('Entered the ADDRESS Routine ' 
                     || ' in_cost_center = ' || v_cost_center 
                     || ' category <' || v_cost_center_rowtype.CATEGORY || '>'
                     || ' address type <' || v_address_type || '>'
                     || ' country <' || v_cost_center_rowtype.country_code || '> ' );
--
/**  Call ADDRESS Reference Cursor  based on country_code ***/  
--
--    CCN_TABLE_IU_PKG.ADDRESS_UI_SP(
      ADDRESS_UI_SP(v_cost_center
                   ,v_cost_center_rowtype.country_code
                   ,v_address_type
                   ,out_address_ref_cur);
--
     v_break  := ('Ended call to COST_CENTER_UI_SP ' );
--   
--
EXCEPTION

    WHEN invalid_cost_center_err THEN  
         v_code := errnums.en_invalid_cost_center_err;
         errpkg.raise_err(v_code
                         ,'COST_CENTER_UI_SP.invalid_cost_center_err '|| v_break
                         ,'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' ||'CCN_TABLE_IU_PKG ' || 'Cost Center is not found - Would you like to Add? '); 

    WHEN OTHERS THEN
         v_code := SQLCODE;
         v_errm := substr(SQLERRM,1, 500);
         errpkg.raise_err(v_code
                         ,v_errm || ' ' || v_break || ' ' || 'COST_CENTER_UI_SP Error ');   
         NULL;

END COST_CENTER_UI_SP;


PROCEDURE POLLING_UI_SP (
/******************************************************************************
    POLLING_UI_SP   --    Polling User Interface Stored Procedure

    This procedure is intended to return a ref cursor with data from 
    from the POLLING, BANK_CARD, and TERMINAL tables.  

created : 09/05/2012 TAL CCN Project....
modified: 04/07/2016 axd783 Modified cost_center_look_up_fnc call to show the list of Duplicate Cost Centers in error message
********************************************************************************/
            in_cost_center             IN  polling.cost_center_code%type
            ,in_polling_status_code    IN  polling.polling_status_code%type
            ,in_merchant_id_code       IN  bank_card.merchant_id%type
            ,in_terminal_number        IN  terminal.terminal_number%type
            ,out_polling_refcur        OUT sys_refcursor
            ,out_bank_card_refcur      OUT sys_refcursor
            ,OUT_TERMINAL_REFCUR       OUT SYS_REFCURSOR
                       )
IS

v_code                      number;
v_errm                      varchar(500);
v_break                     VARCHAR(100);
V_POLLING_STATUS_CODE       POLLING.POLLING_STATUS_CODE%TYPE;
invalid_cost_center_err     EXCEPTION;
V_COST_CENTER               COST_CENTER.COST_CENTER_CODE%TYPE;

BEGIN --  POLLING_UI_SP     

    BEGIN
       v_break  := ('Convert the in_cost_center to 6 digit ' );    
       v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
    EXCEPTION
       WHEN OTHERS THEN
            RAISE;                  
    END; -- get 6 digit Cost Center

/**  Call POLLING Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.POLLING_S_SP ';

      CCN_TABLE_IU_PKG.POLLING_S_SP(in_cost_center          
                                   ,v_polling_status_code        
                                   ,OUT_POLLING_REFCUR);  

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.POLLING_S_SP ';      

/**  Call BANK_CARD Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';

      CCN_TABLE_IU_PKG.BANK_CARD_S_SP(in_cost_center          
                                     ,v_polling_status_code
                                     ,in_merchant_id_code
                                     ,OUT_BANK_CARD_REFCUR);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';

/**  Call TERMINAL Reference Cursor  ***/

      V_BREAK   :=    'Begin call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
      CCN_TABLE_IU_PKG.TERMINAL_S_SP(in_cost_center          
                                    ,V_POLLING_STATUS_CODE
                                    ,in_terminal_number
                                    ,out_terminal_refcur);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';

EXCEPTION  

    WHEN invalid_cost_center_err THEN  
        v_code := errnums.en_invalid_cost_center_err;
        errpkg.raise_err(v_code
                        ,'POLLING_UI_SP.invalid_cost_center_err '|| v_break
                        ,'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' ||'CCN_TABLE_IU_PKG ' || 'Cost Center is not found'); 

    WHEN OTHERS THEN
        v_code := SQLCODE;
        v_errm := substr(SQLERRM,1, 500);
        errpkg.raise_err(v_code
                        ,v_errm ||'COST_CENTER_UI_SP Error ' || 'Last Break Point was ' || v_break);   

       NULL;

END POLLING_UI_SP;

PROCEDURE POLLING_UI_UPSERT_SP ( 
/******************************************************************************
    POLLING_UI_UPSERT_SP   --    POLLING User Interface Update/Insert Procedure

    This procedure is intended to update the database for the following tables 
       used in the Polling UI.

    Tables: 
            POLLING
          , BANK_CARD

          , TERMINAL

created : 11/09/2012 MDH CCN Project....
revised : 12/19/2012 MDH take inserts/updates out of loop process.
revised:   08/26/2013 CCN Project : Business Rules Validation ....
modified: 07/02/2015 dxv848 increased the SQLERRM,1,200 to SQLERRM,1,500 to display compelte message.
        : 03/11/2016 nxk927 CCN Project.....
          added a call that will check if the total number of PCI_TERMINAL_ID 
          matches the total number of terminal number. If the count doesn't match
          then mail a report for the cost center
        : 05/26/2016 nxk927 CCN Project.....
          Reverting back the PCI changes to move the address_brb changes ahead
        : 05/26/2016 nxk927 CCN Project.....
          adding back the PCI changes after moving the address_brb changes ahead
        : 01/23/2017 MXK766 CCN Project.....
          Added changes related to file generation for pos downloads.
		: rxv940 CCN Project Team.....
		: Removed call to RETURN_COST_CENTER_CODE to retrieve the cost_center_code
		 Parsing the XML to retrieve the cost_center_code and conditionally
		 calling the POS_MASTER_SP sub-program
Modified: 11/08/2017 bxa919 CCN Project Team...
	          Removed call for POS_MASTER_SP
	: 01/24/2016 sxg151 CCN Team... Removed call for PCI_TERMINAL_ID
*******************************************************************************/
--
in_row_data  IN  varchar2)--sys.xmltype 

IS
--cursor to get table names....

CURSOR TABLES_CUR IS

        SELECT
           DISTINCT table_name
          FROM all_tab_columns A
          WHERE owner = 'COSTCNTR'
          AND table_name NOT LIKE 'TEMP%'
        AND table_name NOT LIKE '%$%';

/*
*/
v_Row_data XMLTYPE := sys.XMLTYPE(in_row_data);

v_row_value varchar2(500);
v_row_xml_frag sys.XMLTYPE;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_polling_frag clob;
v_xml_bank_card_frag clob;
v_xml_terminal_frag clob;
--
V_BANK_CARD_ROWTYPE      BANK_CARD%ROWTYPE;
V_POLLING_ROWTYPE        POLLING%ROWTYPE;
V_TERMInAL_ROWTYPE       TERMINAL%ROWTYPE;
--
v_count integer := 1;
--
BEGIN
--
--    Removing fragments to send to individual procedures.
--
--Validating Business Rules
VALIDATE_BUSINESS_RULES('POLLING',in_row_data);

 FOR tables_rec IN tables_cur LOOP 

    IF (v_Row_data.existsNode('/POLLING_UI/'|| tables_rec.table_name) = 1) THEN

        v_xml_frag := v_Row_data.extract('/POLLING_UI/'|| tables_rec.table_name).getCLOBVal();

        CASE tables_rec.table_name
            WHEN 'POLLING'   THEN 
                V_XML_POLLING_FRAG   := V_XML_FRAG;
            WHEN 'BANK_CARD' THEN 
                V_XML_BANK_CARD_FRAG := V_XML_FRAG;

        ELSE
            NULL;
        END CASE;
    END IF;


--
--
 END LOOP; --TABLES_CUR
--
--
--********************************************************************************
-- POLLING insert/update process - must be processed before BANK_CARD or TERMINAL
--*********************************************************************************
   BEGIN
       IF V_XML_POLLING_FRAG  IS NOT NULL  THEN
              CCN_TABLE_IU_PKG.POLLING_I_SP (
                 'POLLING'             
                , v_xml_polling_frag
                , v_polling_rowtype );

       END IF;


     EXCEPTION
          WHEN dup_val_on_index  THEN
            BEGIN
              CCN_TABLE_IU_PKG.POLLING_U_SP (
                  'POLLING'
                , v_xml_polling_frag 
                , V_POLLING_ROWTYPE );
            EXCEPTION 
               WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                   v_errm ||
                   ' Polling Update Error ' );
           END;
   END;
--
--
--******************************************************************************
-- TERMINAL insert/update process with loop - This is processed second
--******************************************************************************
-- 
     WHILE v_Row_data.existsNode('/POLLING_UI/TERMINAL_TABLE/' || 'TERMINAL' || '[' || v_count || ']') = 1 LOOP

           v_xml_terminal_frag := v_Row_data.extract('/POLLING_UI/TERMINAL_TABLE/'|| 'TERMINAL' || '[' || v_count || ']').getCLOBVal();

            -- TERMINAL insert/update process 
            BEGIN
                IF v_xml_terminal_frag  IS NOT NULL  THEN
                    CCN_TABLE_IU_PKG.TERMINAL_I_SP (
                      'TERMINAL'             
                     , v_xml_terminal_frag
                     , v_terminal_rowtype );
                END IF;
            EXCEPTION
                  WHEN dup_val_on_index  THEN
                   BEGIN
                       CCN_TABLE_IU_PKG.TERMINAL_U_SP (
                           'TERMINAL'
                         , v_xml_terminal_frag 
                         , v_terminal_rowtype );
                    EXCEPTION 
                        WHEN OTHERS THEN 
                            v_code  := SQLCODE;
                            v_errm  := substr(SQLERRM,1,200);
                            errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm  ||
                            ' Terminal Update Error ' );
                    END;  
            END;
--                
            v_count := v_count + 1;
--                
     END LOOP; -- TERMINALS






--
--
--******************************************************************************
-- BANK_CARD insert/update process - This is processed third
--******************************************************************************

	IF V_XML_BANK_CARD_FRAG  IS NOT NULL  THEN

	   BEGIN

				  CCN_TABLE_IU_PKG.BANK_CARD_I_SP (
					 NULL
				   , NULL
				   , NULL
				   , NULL
				   , 'BANK_CARD'
				   , NULL
				   , v_xml_bank_card_frag);

	   EXCEPTION
			 WHEN dup_val_on_index  THEN
			  BEGIN
				  CCN_TABLE_IU_PKG.BANK_CARD_U_SP (
					  NULL
					, NULL
					, NULL
					, NULL
					, 'BANK_CARD'
					, NULL
					, V_XML_BANK_CARD_FRAG); 
			 EXCEPTION 
				 WHEN OTHERS THEN 
					 v_code  := SQLCODE;
					 v_errm  := substr(SQLERRM,1,200);
					 errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
					 v_errm ||
					 ' Bank_Card Update Error ' );
			  END;
	   END;

    /* Removed POS_MASTER_SP() call as a part of polling Changes*/

	END IF;

   CCN_RESTRICTION_PKG.RELEASE_OBJECT('TERMINAL');

   --Below call will check if there are any warnings and raise those from here
   ERRPKG.RAISE_WARNINGS();

--
--
EXCEPTION

    WHEN others THEN
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,500); 
        errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );

END POLLING_UI_UPSERT_SP;

PROCEDURE ADDRESS_UI_UPSERT_SP ( 
/******************************************************************************
    ADDRESS_UI_UPSERT_SP   --    ADDRESS User Interface Update/Insert Procedure

    This procedure is intended to update the database for the following tables 
       used in the ADDRESS UI.

    Tables: 
            ADDRESS_CAN, 
            ADDRESS_USA, 
            ADDRESS_MEX, 
            ADDRESS_OTHER

created : 12/12/2012 TAL CCN Project....
revised : 08/26/2013 CCN Project : Business Rules Validation ....
revised : 05/06/2014 SXT410 CCN Project: Extracting Cost Center Code from XML
          to pass the Cost Center code into COMPARE_ZIPCODE_SP.
        : Calling COMPARE_ZIPCODE_SP to Compare Taxware Zip Code with Address Zip Code.
        : 03/30/2016 AXK326 CCN Project Team....
          Modified code to be able to loop through each individual address nodes
          when multiple address nodes are passed.
changed : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
changed : 11/17/2017 mxv711 CCN Project Team added validation to not insert/update
          address where store category is Dispatch_Terminal or Territory.
changed : 03/14/2018 rxv940 CCN Project....
          Change to fix the bug (ASP-1034). Fix allows multiple addresses to be
          added from the UI and have them processed
        : 11/27/2018 mxs216, ASP-1158, Business rule to stop users from updating **L* archived cost centers
*******************************************************************************/
    in_row_data  IN  VARCHAR2)
IS
    -- to get address tables
    CURSOR address_tables_cur IS
        SELECT *
            FROM insertorder
        WHERE table_name LIKE '%ADDRESS%'
        ORDER BY TABLE_ORDER ;

    --cursor to get table names....
    CURSOR tables_cur IS
        SELECT DISTINCT table_name
          FROM all_tab_columns A
         WHERE owner = 'COSTCNTR'
           AND table_name NOT LIKE 'TEMP%'
           AND table_name NOT LIKE '%$%';

v_row_data               XMLTYPE := sys.XMLTYPE(in_Row_data);
v_xml_frag               CLOB;
v_cost_center_code       cost_center.cost_center_code%TYPE;
v_cost_center_category   cost_center.category%TYPE;
v_address_type           address_usa.address_type%TYPE;
v_xml_address_can_frag   CLOB;
v_xml_address_usa_frag   CLOB;
v_xml_address_mex_frag   CLOB;
v_xml_address_oth_frag   CLOB;
v_xml_address_brb_frag   CLOB;
v_xml_taxware_frag       CLOB;
v_xml_address_frag       CLOB;
v_taxware_rowtype        TAXWARE%ROWTYPE;
v_count                  NUMBER := 1;

BEGIN
    FOR address_table_rec IN address_tables_cur LOOP
	    IF (v_row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/'|| address_table_rec.table_name) = 1) THEN
		    v_cost_center_code:= v_row_data.EXTRACT('/ADDRESS_UI_UPSERT/' || address_table_rec.table_name || '[1]/COST_CENTER_CODE/text()').GETSTRINGVAL();
            -- The above code has a hard coded "[1]" .. In case when more than 1 address is being loaded through the UI, it is necessary we grab the cost 
            -- center code from the XML for any one of the newly added addresses. The cost center code will remain the same for all the addresses. Hence we
            -- hard code it to '1'
	    END IF;
		IF v_cost_center_code IS NOT NULL THEN
		   EXIT;
		END IF;
	END LOOP;

	BEGIN
	    SELECT category INTO v_cost_center_category
	        FROM COST_CENTER 
	     WHERE COST_CENTER_CODE = v_cost_center_code;
	EXCEPTION
	    WHEN OTHERS THEN
            NULL;
	END;

    --Check if passed cost center is eligible for updates
    CCN_BUSINESS_RULES_PKG.CHECK_ARCHIVED_COST_CENTER(v_cost_center_code);

	IF v_cost_center_category NOT IN ( 'T', 'D') THEN

		--Validating Business Rules
		VALIDATE_BUSINESS_RULES('ADDRESS',in_row_data);

		--Removing fragments to send to individual procedures.
		FOR tables_rec IN tables_cur LOOP 
			IF (v_row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) THEN
				v_xml_frag := v_row_data.EXTRACT('/ADDRESS_UI_UPSERT').GETCLOBVAL();
				CASE tables_rec.table_name
					WHEN 'ADDRESS_CAN'
						THEN v_xml_ADDRESS_CAN_frag   := v_xml_frag;
					WHEN 'ADDRESS_USA'
						THEN v_xml_ADDRESS_USA_frag   := v_xml_frag;
					WHEN 'ADDRESS_MEX'
						THEN v_xml_ADDRESS_MEX_frag   := v_xml_frag;
					WHEN 'ADDRESS_BRB'
						THEN v_xml_address_brb_frag   := v_xml_frag;
					WHEN 'ADDRESS_OTHER'
						THEN v_xml_ADDRESS_OTH_frag   := v_xml_frag;
					WHEN 'TAXWARE'
						THEN v_xml_TAXWARE_frag   := v_row_data.EXTRACT('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).GETCLOBVAL();
					ELSE
						NULL;
				END CASE;

				BEGIN --ADDRESS Processing
					BEGIN --ADDRESS_CAN Insert Process 
						IF v_xml_address_can_frag IS NOT NULL THEN
							-- Looping throught the XML fragment each time when multiple addresses are passed in the fragment.
							WHILE XMLTYPE(v_xml_address_can_frag).EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_CAN[' || v_count || ']') = 1 LOOP
								v_xml_address_frag := SYS.XMLTYPE(v_xml_address_can_frag).EXTRACT('/ADDRESS_UI_UPSERT/'|| 'ADDRESS_CAN[' || v_count || ']').GETCLOBVAL();
								CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP ( NULL          --in_cost_center
																  , NULL          --in_address_type
																  , NULL          --in_effective_date
																  , 'ADDRESS_CAN' --in_table_name
																  , NULL          --in_row_date
																  , CCN_COMMON_TOOLS.BUILD_TAG(v_xml_address_frag,'ADDRESS_UI_UPSERT') ); --in_row_data   xml
								-- Extracting the address type from the xml fragment and invoking the check when the address_type is only 'M'
								v_address_type:= XMLTYPE(v_xml_address_frag).EXTRACT('/ADDRESS_CAN/ADDRESS_TYPE/text()').GETSTRINGVAL();
								IF v_address_type = 'M' THEN
									v_cost_center_code:= XMLTYPE(v_xml_address_frag).EXTRACT('/ADDRESS_CAN/COST_CENTER_CODE/text()').GETSTRINGVAL();
									CCN_BUSINESS_RULES_PKG.COMPARE_ZIPCODE_SP ( v_cost_center_code );	
								END IF;
								v_count := v_count + 1;
							END LOOP;
						END IF;
					EXCEPTION
						WHEN OTHERS THEN
							ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_CAN_UI_UPSERT_SP ' || SQLERRM || ' ADDRESS_CAN Insert Error ' );
					END; --ADDRESS_CAN Insert Process 

					BEGIN --ADDRESS_USA Insert Process 
						IF v_xml_address_usa_frag  IS NOT NULL  THEN
							-- Looping throught the XML fragment each time when multiple addresses are passed.
							WHILE XMLTYPE(v_xml_address_usa_frag).EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_USA[' || v_count || ']') = 1 LOOP
								v_xml_address_frag := XMLTYPE(v_xml_address_usa_frag).EXTRACT('/ADDRESS_UI_UPSERT/'|| 'ADDRESS_USA[' || v_count || ']').GETCLOBVAL();
								CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (NULL          --in_cost_center
																 , NULL          --in_address_type
																 , NULL          --in_effective_date
																 , 'ADDRESS_USA' --in_table_name
																 , NULL          --in_row_date
																 , CCN_COMMON_TOOLS.BUILD_TAG(v_xml_address_frag,'ADDRESS_UI_UPSERT')); --in_row_data   xml
								-- Extracting the address type from the xml fragment and invoking the check when the address_type is only 'M' 
								v_address_type:= XMLTYPE(v_xml_address_frag).EXTRACT('/ADDRESS_USA/ADDRESS_TYPE/text()').GETSTRINGVAL();
								IF v_address_type = 'M' THEN 
									v_cost_center_code:= XMLTYPE(v_xml_address_frag).EXTRACT('/ADDRESS_USA/COST_CENTER_CODE/text()').GETSTRINGVAL();
									CCN_BUSINESS_RULES_PKG.COMPARE_ZIPCODE_SP ( v_cost_center_code );
								END IF;
								v_count := v_count + 1;
							END LOOP;
						END IF;
					EXCEPTION
						WHEN OTHERS THEN
							ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_USA_UI_UPSERT_SP ' || SQLERRM || ' ADDRESS_USA Insert Error ' );
					END; --ADDRESS_USA Insert Process 

					BEGIN --ADDRESS_MEX Insert Process 
						IF v_xml_address_mex_frag  IS NOT NULL  THEN
							-- Looping through the XML fragment each time when multiple addresses are passed.
							WHILE XMLTYPE(v_xml_address_mex_frag).EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_MEX[' || v_count || ']') = 1 LOOP
								v_xml_address_frag := XMLTYPE(v_xml_address_mex_frag).EXTRACT('/ADDRESS_UI_UPSERT/'|| 'ADDRESS_MEX[' || v_count || ']').GETCLOBVAL();
								CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (NULL          --in_cost_center
																 , NULL          --in_address_type
																 , NULL          --in_effective_date
																 , 'ADDRESS_MEX' --in_table_name
																 , NULL          --in_row_date
																 , CCN_COMMON_TOOLS.BUILD_TAG(v_xml_address_frag,'ADDRESS_UI_UPSERT')); --in_row_data   xml
								 v_count := v_count + 1;
							END LOOP;
						END IF;
					EXCEPTION
						WHEN OTHERS THEN
							ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_MEX_UI_UPSERT_SP ' || SQLERRM || ' ADDRESS_MEX Insert Error ' );
					END;--ADDRESS_MEX Insert Process 

					BEGIN --ADDRESS_OTH Insert Process 
						IF v_xml_address_oth_frag  IS NOT NULL  THEN
							-- Looping through the XML fragment each time when multiple addresses are passed.
							WHILE XMLTYPE(v_xml_address_oth_frag).EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_OTHER[' || v_count || ']') = 1 LOOP
								v_xml_address_frag := SYS.XMLTYPE(v_xml_address_oth_frag).EXTRACT('/ADDRESS_UI_UPSERT/'|| 'ADDRESS_OTHER[' || v_count || ']').GETCLOBVAL();
								CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (NULL             --in_cost_center
																   , NULL             --in_address_type
																   , NULL             --in_effective_date
																   , 'ADDRESS_OTHER'  --in_table_name
																   , NULL             --in_row_date
																   , CCN_COMMON_TOOLS.BUILD_TAG(v_xml_address_frag,'ADDRESS_UI_UPSERT') ); --in_row_data   xml
								v_count := v_count + 1;
							END LOOP;
						END IF;
					EXCEPTION
						WHEN OTHERS THEN
							ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_OTH_UI_UPSERT_SP ' || SQLERRM || ' ADDRESS_OTH Insert Error ' );
					END; --ADDRESS_OTH Insert Process 

					BEGIN --ADDRESS_BRB Insert Process 
						IF v_xml_address_brb_frag  IS NOT NULL  THEN
							-- Looping through the XML fragment each time when multiple addresses are passed.
							WHILE XMLTYPE(v_xml_address_brb_frag).EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_BRB[' || v_count || ']') = 1 LOOP
								v_xml_address_frag := SYS.XMLTYPE(v_xml_address_brb_frag).EXTRACT('/ADDRESS_UI_UPSERT/'|| 'ADDRESS_BRB[' || v_count || ']').GETCLOBVAL();
								CCN_TABLE_IU_PKG.ADDRESS_BRB_I_SP (NULL             --in_cost_center
																   , NULL             --in_address_type
																   , NULL             --in_effective_date
																   , 'ADDRESS_BRB'  --in_table_name
																   , NULL             --in_row_date
																   , CCN_COMMON_TOOLS.BUILD_TAG(v_xml_address_frag,'ADDRESS_UI_UPSERT') ); --in_row_data   xml
								v_count := v_count + 1;
							END LOOP;
						END IF;
					EXCEPTION
						WHEN OTHERS THEN
							ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_OTH_UI_UPSERT_SP ' || SQLERRM || ' ADDRESS_BRB Insert Error ' );
					END; --ADDRESS_BRB Insert Process 

					BEGIN --TAXWARE insert/update process
						IF v_xml_taxware_frag  IS NOT NULL THEN
							CCN_TABLE_IU_PKG.TAXWARE_I_SP('TAXWARE',
														  v_xml_taxware_frag,
														  v_taxware_rowtype);
						END IF;
					EXCEPTION
						WHEN DUP_VAL_ON_INDEX THEN
							BEGIN
								CCN_TABLE_IU_PKG.TAXWARE_U_SP('TAXWARE',
															  v_xml_taxware_frag,
															  v_taxware_rowtype);
							EXCEPTION 
								WHEN OTHERS THEN 
									ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_UI_UPSERT_SP ' || SQLERRM || ' TAXWARE Update Error ' );
							END;
					END; --TAXWARE insert/update process
				END; --ADDRESS Processing
			END IF; --if (v_row_data.existsNode('/ADDRESS_UI_UPSERT/'
		END LOOP; --TABLES_CUR
   	END IF;
    --Below call will check if there are any warnings and raise those from here-- ASP-911
    ERRPKG.RAISE_WARNINGS();

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ADDRESS_UI_UPSERT_SP ' || SQLERRM || ' in Others ' );
END ADDRESS_UI_UPSERT_SP;

PROCEDURE COST_CENTER_UI_UPSERT_SP ( 
 /******************************************************************************
    COST_CENTER_UI_UPSERT_SP   --    Cost Center User Interface Update delete
        Procedure

    This procedure is intended to update the database for the following tables used in
        Cost Center UI.
    Tables: 
              COST_CENTER
            , ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
            , STATUS
            , TYPE
            , MARKETING
            , PHONE
            , TAXWARE
            , ADDRESS tables.  

created : 10/26/2012 KDP CCN Project....
revised:   12/03/2012 BLR  CCN Project....
revised:   08/26/2013 CCN Project : Business Rules Validation ....
revised: 11/17/2014 SXT410 CCN Project... Added RAISE_WARNINGS to check if there
                                          are any warnings and raise it.
revised: 02/26/2018 rxv940 CCN Project... Changed Substr in SQLERRM to get 500 characters
*******************************************************************************/

 in_row_data  IN varchar2) --sys.xmltype

 IS

--v_Row_data xmltype := sys.xmltype(in_Row_data);

BEGIN

      COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(in_row_data);

      --Below call will check if there are any warnings and raise those from here
      ERRPKG.RAISE_WARNINGS();
EXCEPTION
    when others then
        errpkg.raise_err(SQLCODE, 'COST_CENTER_UI_UPSERT_SP ' || substr(SQLERRM,1,500) || ' in Others ' );
END COST_CENTER_UI_UPSERT_SP;

PROCEDURE VALIDATE_BUSINESS_RULES(
 /******************************************************************************
    VALIDATE_BUSINESS_RULES   --    User Interface Update delete business rules validator

    This procedure is intended to validate the business rules based on the flag sent using
  the input XML fragment.

created : 08/26/2013 CCN Project....
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
          01/27/2017 MXK766 CCN Project Team....
        :04/17/17 rxa457 CCN Project team.. ASP-400:ASP-763 to handle Business rules with respect to table DISPATCH_TERMINAL
        :11/13/17 mxv711 CCN Project team.. added ASP-909-Business rule to stop insert/update cost center if there are no address details
Changed:  03/08/2018 mxv711 CCN Project Team..
          asp400:asp-763 changes to handle LAD_CUSTOMER in CCN
        : 11/27/2018 mxs216, ASP-1158, Business rule to stop users from updating **L* archived cost centers
*******************************************************************************/
IN_FLAG      IN VARCHAR2,
IN_ROW_DATA  IN VARCHAR2)
IS
   TYPE    GenCurTyp   IS REF CURSOR;
   SUBTYPE XMLFragType IS VARCHAR2(32000);

   V_GENERIC_CURSOR            GenCurTyp;
   V_TABLE_NAME                VARCHAR2(500);
   V_XML_FRAG                  XMLFragType;
   V_ROW_DATA                  XMLTYPE := SYS.XMLTYPE(IN_ROW_DATA);
   V_COUNT                     NUMBER;
   V_ROW_DATE                  DATE;

   V_XML_COST_CENTER_FRAG      XMLFragType;
   V_COST_CENTER_ROWTYPE       COST_CENTER%ROWTYPE;
   V_XML_ADDR_CAN_FRAG         XMLFragType;
   V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%ROWTYPE;
   V_XML_ADDR_MEX_FRAG         XMLFragType;
   V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%ROWTYPE;
   V_XML_ADDR_OTH_FRAG         XMLFragType;
   V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%ROWTYPE;
   V_XML_ADDR_USA_FRAG         XMLFragType;
   V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%ROWTYPE;
   V_XML_ADDR_BRB_FRAG         XMLFragType;
   V_ADDRESS_BRB_ROWTYPE       ADDRESS_BRB%ROWTYPE;
   V_XML_TYPE_FRAG             XMLFragType;
   V_XML_STATUS_FRAG           XMLFragType;
   V_XML_TAXWARE_FRAG          XMLFragType;
   V_XML_MARKETING_FRAG        XMLFragType;
   V_XML_ADMINISTRATION_FRAG   XMLFragType;
   V_XML_LAD_CUSTOMER_FRAG     XMLFragType;
   V_XML_STORE_FRAG            XMLFragType;
   V_XML_DISPATCH_TERMINAL_FRAG XMLFragType;
   V_XML_OTHER_FRAG            XMLFragType;
   V_XML_REAL_ESTATE_FRAG      XMLFragType;
   V_XML_TERRITORY_FRAG        XMLFragType;
   V_XML_BANK_CARD_FRAG        XMLFragType;
   V_XML_POLLING_FRAG          XMLFRAGTYPE;
   V_POLLING_ROWTYPE           POLLING%ROWTYPE;
   V_XML_PHONE_FRAG            XMLFragType;
   V_XML_PHONE_PRI_FRAG        XMLFragType;
   V_XML_PHONE_SCD_FRAG        XMLFragType;
   V_XML_SALES_REP_FRAG        XMLFragType;
   V_XML_TERMINAL_FRAG         XMLFragType;
   V_TERMINAL_ROWTYPE          TERMINAL%ROWTYPE;

   V_FRAGMENT_HEADER           VARCHAR2(100);

BEGIN

   CASE

      WHEN IN_FLAG = 'COST_CENTER' THEN

         --Set the XML search header for Cost Center UI Process
         V_FRAGMENT_HEADER := '/COST_CENTER_UI/';

         --Opening Ref cursor for Cost Center UI Process
         OPEN V_GENERIC_CURSOR FOR
            SELECT CASE TABLE_NAME
                      WHEN 'PHONE'         THEN 'PHONE_TABLE/PHONE'
                      WHEN 'TERMINAL'      THEN 'TERMINAL_TABLE/TERMINAL'
                      WHEN 'ADDRESS_CAN'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_CAN'
                      WHEN 'ADDRESS_MEX'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_MEX'
                      WHEN 'ADDRESS_OTHER' THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_OTHER'
                      WHEN 'ADDRESS_USA'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_USA'
                      WHEN 'ADDRESS_BRB'   THEN 'ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/ADDRESS_BRB'
                      ELSE TABLE_NAME
                   END CASE
              FROM INSERTORDER
             ORDER BY TABLE_ORDER;

         --We need to cerate the Cost Center Record Type here itself during Cost Center creation
         --as address validations requires this record type as input from this procedure
         V_XML_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || 'COST_CENTER').GETSTRINGVAL();
         CCN_TABLE_IU_PKG.COST_CENTER_ROWTYPE_SP(NULL
                                                 ,'COST_CENTER'  
                                                 ,V_ROW_DATE    
                                                 ,V_XML_FRAG    
                                                 ,V_COST_CENTER_ROWTYPE );

         -- Check if passed cost center is eligible for updates
         CCN_BUSINESS_RULES_PKG.CHECK_ARCHIVED_COST_CENTER(V_COST_CENTER_ROWTYPE.COST_CENTER_CODE);

		 -- Basic Addres element validation.
         CCN_BUSINESS_RULES_PKG.CHECK_ADDRESS_TAG(V_COST_CENTER_ROWTYPE.CATEGORY,V_ROW_DATA );										 

         --Validate Duplicate cost center code [Based on last four characters of cost center code]
         COMMON_TOOLS.CHECK_DUP_COST_CENTER(V_COST_CENTER_ROWTYPE.COST_CENTER_CODE
                                           ,V_COST_CENTER_ROWTYPE.CATEGORY);
      WHEN IN_FLAG IN ('ADDRESS','POLLING') THEN

         CASE

            WHEN IN_FLAG = 'ADDRESS' THEN
               --Set the XML search header for Address UI Process
               V_FRAGMENT_HEADER := '/ADDRESS_UI_UPSERT/';
            WHEN IN_FLAG = 'POLLING' THEN
               --Set the XML search header for Polling UI Process
               V_FRAGMENT_HEADER := '/POLLING_UI/';

               --We need to cerate the Polling Record Type here itself
               --as terminal validations requires this record type as input from this procedure
               V_XML_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || 'POLLING').GETSTRINGVAL();
               CCN_TABLE_IU_PKG.POLLING_ROWTYPE_SP('POLLING'  
                                                   ,V_XML_FRAG    
                                                   ,V_POLLING_ROWTYPE );

               -- Check is passed cost center is eligible for updates
               CCN_BUSINESS_RULES_PKG.CHECK_ARCHIVED_COST_CENTER(V_POLLING_ROWTYPE.COST_CENTER_CODE);

            ELSE NULL;

         END CASE;

         --Opening Ref cursor for Polling / Address UI Process
         OPEN V_GENERIC_CURSOR FOR
            SELECT DISTINCT
                   CASE TABLE_NAME
                      WHEN 'TERMINAL'      THEN 'TERMINAL_TABLE/TERMINAL'
                      ELSE TABLE_NAME
                   END CASE
              FROM ALL_TAB_COLUMNS A
             WHERE OWNER = 'COSTCNTR'
               AND TABLE_NAME NOT LIKE 'TEMP%'
               AND TABLE_NAME NOT LIKE '%$%';
      ELSE NULL;

   END CASE;

   LOOP

      FETCH V_GENERIC_CURSOR INTO V_TABLE_NAME;
      IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME) = 1) THEN

         V_XML_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME).GETSTRINGVAL();

         --Extracting fragments for each required table, if present
         CASE
            --For ADDRESS_CAN, ADDRESS_MEX, ADDRESS_OTHER, ADDRESS_USA, ADDRESS_BRB the XML Fragment comes differently[Multiple Levels] as coded below
-- removed kdp needs debugging
            WHEN V_TABLE_NAME LIKE '%ADDRESS_CAN'         THEN --V_XML_ADDR_CAN_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_CAN_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_CAN_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_CAN_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_CAN'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_CAN_FRAG    
                                                              ,V_ADDRESS_CAN_ROWTYPE);

                       CCN_BUSINESS_RULES_PKG.ADDRESS_CAN_BR_SP(V_ADDRESS_CAN_ROWTYPE, V_COST_CENTER_ROWTYPE ); 

                    END IF;

                    V_COUNT := V_COUNT + 1;

                  END LOOP;
            WHEN V_TABLE_NAME LIKE '%ADDRESS_MEX'         THEN --V_XML_ADDR_MEX_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_MEX_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_MEX_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_MEX_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_MEX'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_MEX_FRAG    
                                                              ,V_ADDRESS_MEX_ROWTYPE);

                       CCN_BUSINESS_RULES_PKG.ADDRESS_MEX_BR_SP(V_ADDRESS_MEX_ROWTYPE, V_COST_CENTER_ROWTYPE ); 

                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE '%ADDRESS_OTHER'       THEN --V_XML_ADDR_OTH_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_OTH_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_OTH_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_OTHER_ROWTYPE_SP(NULL
                                                                ,NULL
                                                                ,NULL
                                                                ,'ADDRESS_OTHER'
                                                                ,V_ROW_DATE    
                                                                ,V_XML_ADDR_OTH_FRAG    
                                                                ,V_ADDRESS_OTHER_ROWTYPE);

                       CCN_BUSINESS_RULES_PKG.ADDRESS_OTH_BR_SP(V_ADDRESS_OTHER_ROWTYPE, V_COST_CENTER_ROWTYPE ); 

                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;

            WHEN V_TABLE_NAME LIKE '%ADDRESS_USA'         THEN --V_XML_ADDR_USA_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_USA_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_USA_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_USA_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_USA'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_USA_FRAG    
                                                              ,V_ADDRESS_USA_ROWTYPE);

                       CCN_BUSINESS_RULES_PKG.ADDRESS_USA_BR_SP(V_ADDRESS_USA_ROWTYPE, V_COST_CENTER_ROWTYPE ); 

                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE '%ADDRESS_BRB'         THEN --V_XML_ADDR_BRB_FRAG       := V_XML_FRAG;
                 V_COUNT := 1;

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_ADDR_BRB_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_ADDR_BRB_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.ADDRESS_BRB_ROWTYPE_SP(NULL
                                                              ,NULL
                                                              ,NULL
                                                              ,'ADDRESS_BRB'
                                                              ,V_ROW_DATE    
                                                              ,V_XML_ADDR_BRB_FRAG    
                                                              ,V_ADDRESS_BRB_ROWTYPE);

                       --CCN_BUSINESS_RULES_PKG.ADDRESS_BRB_BR_SP(V_ADDRESS_BRB_ROWTYPE, V_COST_CENTER_ROWTYPE ); 
                       --Barbados TBD

                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE 'ADMINISTRATION'       THEN V_XML_ADMINISTRATION_FRAG := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'LAD_CUSTOMER'         THEN V_XML_LAD_CUSTOMER_FRAG   := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'BANK_CARD'            THEN V_XML_BANK_CARD_FRAG      := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'COST_CENTER'          THEN V_XML_COST_CENTER_FRAG    := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'MARKETING'            THEN V_XML_MARKETING_FRAG      := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'OTHER'                THEN V_XML_OTHER_FRAG          := V_XML_FRAG;
            --For PHONE_TABLE the XML Fragment comes differently as coded below for COST_CENTER
            WHEN V_TABLE_NAME LIKE '%PHONE'          THEN

                 IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[1]') = 1) THEN
                    V_XML_PHONE_PRI_FRAG  := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[1]').GETSTRINGVAL();
                 END IF;

                 IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[2]') = 1) THEN
                    V_XML_PHONE_SCD_FRAG  := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[2]').GETSTRINGVAL();
                 END IF;

                 IF (V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[3]') = 1) THEN
                    V_XML_PHONE_FRAG      := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[3]').GETSTRINGVAL();
                 END IF;

            WHEN V_TABLE_NAME LIKE 'POLLING'              THEN V_XML_POLLING_FRAG           := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'REAL_ESTATE'          THEN V_XML_REAL_ESTATE_FRAG       := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'SALES_REP'            THEN V_XML_SALES_REP_FRAG         := V_XML_FRAG; -- Found Table
            WHEN V_TABLE_NAME LIKE 'STATUS'               THEN V_XML_STATUS_FRAG            := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'STORE'                THEN V_XML_STORE_FRAG             := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'DISPATCH_TERMINAL'    THEN V_XML_DISPATCH_TERMINAL_FRAG := V_XML_FRAG; 
            --For TERMINAL_TABLE the XML Fragment comes differently[Multiple Levels] as coded below for POLLING
            WHEN V_TABLE_NAME LIKE '%TERMINAL'       THEN -- Found Table
                 V_COUNT := 1;

                 CCN_BUSINESS_RULES_PKG.TERMINAL_COUNT_BR_SP(V_ROW_DATA);

                 WHILE V_ROW_DATA.EXISTSNODE(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP

                    V_XML_TERMINAL_FRAG := V_ROW_DATA.EXTRACT(V_FRAGMENT_HEADER || V_TABLE_NAME || '[' || V_COUNT || ']').GETSTRINGVAL();

                    IF V_XML_TERMINAL_FRAG  IS NOT NULL  THEN

                       CCN_TABLE_IU_PKG.TERMINAL_ROWTYPE_SP('TERMINAL' 
                                                            ,V_XML_TERMINAL_FRAG
                                                            ,V_TERMINAL_ROWTYPE);

                       CCN_BUSINESS_RULES_PKG.TERMINAL_BR_SP(V_TERMINAL_ROWTYPE,
                                                             V_POLLING_ROWTYPE);

                    END IF;

                    V_COUNT := V_COUNT + 1;

                 END LOOP;
            WHEN V_TABLE_NAME LIKE 'TERRITORY'            THEN V_XML_TERRITORY_FRAG      := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'TYPE'                 THEN V_XML_TYPE_FRAG           := V_XML_FRAG;
            WHEN V_TABLE_NAME LIKE 'TAXWARE'              THEN V_XML_TAXWARE_FRAG        := V_XML_FRAG;
            ELSE NULL;

         END CASE;

      END IF;

      EXIT WHEN V_GENERIC_CURSOR%NOTFOUND;

   END LOOP;

   --Close the cursor before exiting the function
   IF V_GENERIC_CURSOR%ISOPEN THEN
       CLOSE V_GENERIC_CURSOR;
   END IF;

   --Calling the business rules package with all these obtained fragments as inputs
   CCN_BUSINESS_RULES_PKG.BUSINESS_RULES_SP(V_XML_ADDR_CAN_FRAG,
                                            V_XML_ADDR_MEX_FRAG,
                                            V_XML_ADDR_OTH_FRAG,
                                            V_XML_ADDR_USA_FRAG,
                                            V_XML_ADDR_BRB_FRAG,
                                            V_XML_ADMINISTRATION_FRAG,
                                            V_XML_LAD_CUSTOMER_FRAG,
                                            V_XML_BANK_CARD_FRAG,
                                            V_XML_COST_CENTER_FRAG,
                                            V_XML_MARKETING_FRAG,
                                            V_XML_OTHER_FRAG,
                                            V_XML_PHONE_FRAG,
                                            V_XML_PHONE_PRI_FRAG,
                                            V_XML_PHONE_SCD_FRAG,
                                            V_XML_POLLING_FRAG,
                                            V_XML_REAL_ESTATE_FRAG,
                                            V_XML_SALES_REP_FRAG,
                                            V_XML_STATUS_FRAG,
                                            V_XML_STORE_FRAG,
                                            V_XML_DISPATCH_TERMINAL_FRAG,
                                            V_XML_TERMINAL_FRAG,
                                            V_XML_TERRITORY_FRAG,
                                            V_XML_TYPE_FRAG);

EXCEPTION
   WHEN OTHERS THEN
      --Close the cursor if it is already open
      IF V_GENERIC_CURSOR%ISOPEN THEN
          CLOSE V_GENERIC_CURSOR;
      END IF;

      --Raise the exception all the way back to the place where it is logged
      errpkg.raise_err(SQLCODE, ' VALIDATE_BUSINESS_RULES (xmltype) Error ', SUBSTR(SQLERRM,12, 500));
END VALIDATE_BUSINESS_RULES;

FUNCTION TERMINAL_NUMBER_S
/*********************************************************************
TERMINAL_NUMBER_S
This function will return the next terminal number from the 
sequence terminal_number_seq
updated : nxk 3/18/14 
		: 01/10/2019 jc/pxm158  CCN Team... -- Number Range BETWEEN 99750 AND 99999 Allowed only for QA COST CENTER with Prefix 'LB'
Changed : jxc517 01/09/2018 CCN Project Team...
         FOR LB cost centers in QA alone, we need to allow terminal numbers between 99750 to 99999
         For any environment apart from QA, terminal numbers between 99750 to 99999 are not allowed   
         Related logic for QA environmnet will be found in CCN_TABLE_IU_PKG.TERMINAL_NUMBER_ROWTYPE_SP
        : mxs216 01/31/2019 ASP-1210 CCN Project Team...
          Made the error msg dynamic using the public variable CCN_RESTRICTION_PKG.C_RELEASE_TIMED_OUT_MINS.
*************************************************************************/
   RETURN NUMBER
AS 
     V_SEQUENCE_NUMBER      NUMBER;
     V_IS_OBJECT_RESTRICTED BOOLEAN;
BEGIN

   V_IS_OBJECT_RESTRICTED := CCN_RESTRICTION_PKG.IS_OBJECT_RESTRICTED('TERMINAL');

   IF NOT V_IS_OBJECT_RESTRICTED THEN
      CCN_RESTRICTION_PKG.RESTRICT_OBJECT('TERMINAL');

      SELECT NVL(MAX(TERMINAL_NUMBER), 0) + 1 INTO V_SEQUENCE_NUMBER 
        FROM TERMINAL
       WHERE TERMINAL_NUMBER NOT IN ('99308', '99112', '99111', '71882')
         AND TERMINAL_NUMBER NOT BETWEEN 99750 AND 99999;-- Number Range Allowed only for QA COST CENTER with Prefix 'LB'

      CASE
         WHEN V_SEQUENCE_NUMBER  IN ('99308','71882') THEN  V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER + 1;
         WHEN V_SEQUENCE_NUMBER   = '99111' THEN V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER + 2; --(because of two consecutive terminal numbers '99111' and '99112')
         WHEN V_SEQUENCE_NUMBER   = '99750' THEN V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER + 250; --(because of those 250 terminal values being used for "LB" cost centers in QA environment)
         ELSE V_SEQUENCE_NUMBER := V_SEQUENCE_NUMBER ;
      END CASE;

      RETURN V_SEQUENCE_NUMBER;
     ELSE
      errpkg.raise_err(errnums.en_terminal_window_locked_err,
                       ' TERMINAL_NUMBER_S ',
                       'TERMINAL table has been locked by some one performing related transaction. Please try processing again after '||CCN_RESTRICTION_PKG.C_RELEASE_TIMED_OUT_MINS||' minutes');
   END IF;

END TERMINAL_NUMBER_S;

PROCEDURE COPY_COST_CENTER(
/**********************************************************
    COPY_COST_CENTER

    This procedure will copy the OLD cost center into NEW cost center

IN_OLD_CC - Input Cost Center to be removed
IN_NEW_CC - Input Cost Center to be created

created : 09/11/2013 kdp CCN Project....
**********************************************************/
          IN_OLD_CC IN VARCHAR2,
          IN_NEW_CC IN VARCHAR2) IS
BEGIN

    COMMON_TOOLS.COPY_COST_CENTER(IN_OLD_CC,IN_NEW_CC);

END COPY_COST_CENTER;

PROCEDURE DELETE_COST_CENTER(
/**********************************************************
    DELETE_COST_CENTER

    This procedure will delete the passed cost center

IN_COST_CENTER - Input Cost Center to be removed

created : 01/29/2013 jxc517 CCN Project....
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS
BEGIN

    COMMON_TOOLS.DELETE_COST_CENTER(IN_COST_CENTER);

END DELETE_COST_CENTER;

PROCEDURE RELEASE_OBJECT(
 /******************************************************************************
 RELEASE_OBJECT

 This procedure will release the restriction on passed object based on passed 
 restriction ID

 IN_RESTRICTION_ID     - Restriction ID that needs to be released

 ******************************************************************************/
 IN_OBJECT_NAME     IN       CCN_RESTRICTION.OBJECT_NAME%TYPE)
 IS
 BEGIN

     CCN_RESTRICTION_PKG.RELEASE_TIMED_OUT_OBJECTS(0);

 EXCEPTION 
     WHEN OTHERS THEN
        RAISE;
 END RELEASE_OBJECT;

PROCEDURE EMPLOYEE_DETAILS_S_SP (
/*******************************************************************************
    EMPLOYEE_DETAILS_S_SP

    This procedure is intended to select records from EMPLOYEE_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXX</EMPLOYEE_NUMBER>
<COST_CENTER_CODE>XXXXXX</COST_CENTER_CODE>
<EMPLOYEE_NAME>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</EMPLOYEE_NAME>
<LAST_NAME>XXXXXXXXXXXXXXXXXXXX</LAST_NAME>
<FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</FIRST_NAME>
<MIDDLE_INITIAL>XX</MIDDLE_INITIAL>
<HOME_ADDRESS_LINE1>XXXXXXXXXXXXXXXXXXXX</HOME_ADDRESS_LINE1>
<HOME_ADDRESS_LINE2>XXXXXXXXXXXXXXXXXXXX</HOME_ADDRESS_LINE2>
<HOME_CITY_STATE>XXXXXXXXXXXXXXXXXXXX</HOME_CITY_STATE>
<HOME_CITY>XXXXXXXXXXXXXXXXXXXX</HOME_CITY>
<HOME_STATE>XX</HOME_STATE>
<HOME_POSTAL_CODE>XXXXXXXXX</HOME_POSTAL_CODE>
<HOME_PHONE>XXXXXXXXXX</HOME_PHONE>
<COMPANY_CODE>XXX</COMPANY_CODE>
<SEX>X</SEX>
<EMP_PAYROLL_STATUS>X</EMP_PAYROLL_STATUS>
<EMP_ASSIGNMENT_STATUS>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</EMP_ASSIGNMENT_STATUS>
<EMP_DIVISION>XXXX</EMP_DIVISION>
<HIRE_DATE>MM-DD-RRRR</HIRE_DATE>
<TERM_DATE>MM-DD-RRRR</TERM_DATE>
<ADJUSTED_SERVICE_DATE>MM-DD-RRRR</ADJUSTED_SERVICE_DATE>
<JOB_CODE>XXXXX</JOB_CODE>
<JOB_DIVISION>XXXX</JOB_DIVISION>
<JOB_FAMILY>XXXXXXXXXX</JOB_FAMILY>
<JOB_TITLE>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</JOB_TITLE>
<JOB_TYPE>XXXXXXXXXXXXXXX</JOB_TYPE>
<JOB_LEVEL>XXXXXXXXXX</JOB_LEVEL>
<JOB_FUNCTION>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</JOB_FUNCTION>
<DAD_CODE>XXXXXXXX</DAD_CODE>
</EMPLOYEE_DETAILS>
</EMPLOYEE_DETAILS_UI>

Created : 06/16/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
BEGIN

    CCN_EMPLOYEE_DETAILS_PKG.EMPLOYEE_DETAILS_S_SP(IN_TABLE_NAME,
                                                   IN_ROW_DATA,
                                                   OUT_REF_CUR);

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END EMPLOYEE_DETAILS_S_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_S_SP (
/*******************************************************************************
    EMPLOYEE_ADMIN_DETAILS_S_SP

    This procedure is intended to select records from EMPLOYEE_ADMIN_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_ADMIN_DETAILS_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XXXXXXX</EMPLOYEE_MIDDLE_NAME>
<JOB_TYPE>XXXXXXX</JOB_TYPE>
<DESCRIPTION>XXXXXXX</DESCRIPTION>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>

Created : 06/23/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB
,OUT_REF_CUR     OUT REF_CURSOR)
IS
BEGIN

    CCN_EMPLOYEE_DETAILS_PKG.EMPLOYEE_ADMIN_DETAILS_S_SP(IN_TABLE_NAME,
                                                         IN_ROW_DATA,
                                                         OUT_REF_CUR);

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END EMPLOYEE_ADMIN_DETAILS_S_SP;

PROCEDURE EMPLOYEE_ADMIN_DETAILS_UPSERT (
/*******************************************************************************
    EMPLOYEE_ADMIN_DETAILS_UPSERT

    This procedure is intended to insert/update records into EMPLOYEE_ADMIN_DETAILS table

<?xml version="1.0" encoding="UTF-8" ?>
<EMPLOYEE_ADMIN_DETAILS_UPSERT xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
<EMPLOYEE_ADMIN_DETAILS_UI>
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XX</EMPLOYEE_MIDDLE_NAME>
<JOB_TYPE>XXXXXXX</JOB_TYPE>
<DESCRIPTION>XXXXXXX</DESCRIPTION>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>
<EMPLOYEE_ADMIN_DETAILS_UI>
<EMPLOYEE_ADMIN_DETAILS>
<EMPLOYEE_NUMBER>XXXXXXXXX</EMPLOYEE_NUMBER>
<ADMIN_COST_CENTER_CODE>XXXXXX</ADMIN_COST_CENTER_CODE>
<EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
<EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
<ADMIN_JOB_CODE>XXXXX</ADMIN_JOB_CODE>
<EMPLOYEE_FIRST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_FIRST_NAME>
<EMPLOYEE_LAST_NAME>XXXXXXXXXXXXXXXXXXXX</EMPLOYEE_LAST_NAME>
<EMPLOYEE_MIDDLE_NAME>XX</EMPLOYEE_MIDDLE_NAME>
<JOB_TYPE>XXXXXXX</JOB_TYPE>
<DESCRIPTION>XXXXXXX</DESCRIPTION>
</EMPLOYEE_ADMIN_DETAILS>
</EMPLOYEE_ADMIN_DETAILS_UI>
</EMPLOYEE_ADMIN_DETAILS_UPSERT>

Created : 07/24/2014 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_COUNT     NUMBER := 1;
    V_ROW_DATA  CLOB;
    V_XML       XMLTYPE := SYS.XMLTYPE(IN_ROW_DATA);
BEGIN

    WHILE V_XML.EXISTSNODE('//EMPLOYEE_ADMIN_DETAILS_UPSERT/EMPLOYEE_ADMIN_DETAILS_UI[' || V_COUNT || ']') = 1 LOOP
        V_ROW_DATA := V_XML.EXTRACT('//EMPLOYEE_ADMIN_DETAILS_UPSERT/EMPLOYEE_ADMIN_DETAILS_UI[' || V_COUNT || ']').GETCLOBVAL();
        CCN_EMPLOYEE_DETAILS_PKG.EMPLOYEE_ADMIN_DETAILS_I_SP(IN_TABLE_NAME,
                                                             V_ROW_DATA);
        V_COUNT := V_COUNT + 1;
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END EMPLOYEE_ADMIN_DETAILS_UPSERT;

PROCEDURE BULK_TERR_TYP_BUSN_CD_UPD_PRCS(
/******************************************************************************
This procedure is the core process for updating the TERRITORY_TYPE_BUSN_CODE
column of TERRITORY table

IN_BLOB          - blob value delimited by , and termianted by new line character

Created by jxc517 02/19/2015
******************************************************************************/
IN_BLOB            IN       BLOB)
IS
BEGIN
    COMMON_TOOLS.BULK_TERR_TYP_BUSN_CD_UPD_PRCS(IN_BLOB);
EXCEPTION
    WHEN OTHERS THEN
        RAISE; 
END BULK_TERR_TYP_BUSN_CD_UPD_PRCS;

PROCEDURE PROCESSOR_UI_SP (
/******************************************************************************
This procedure is intended to return a ref cursor with data from 
from the PROCESSORS and PROCESSOR_STATES tables.  

Created : 04/08/2016 jxc517 CCN Project....
Changed : 10/18/2016 jxc517 CCN Project....
          Added/Modified the parameters as per new model
********************************************************************************/
    O_PROCESSORS                  OUT      SYS_REFCURSOR,
    O_PROCESSOR_GROUPS            OUT      SYS_REFCURSOR,
    O_PRCSR_STR_GRP_DTLS          OUT      SYS_REFCURSOR,
    O_PRCSR_STR_ADMN_GRP_DTLS     OUT      SYS_REFCURSOR,
    O_PRCSR_CANADA_GRP_DTLS       OUT      SYS_REFCURSOR,
    O_PRCSR_HEADQRTS_GRP_DTLS     OUT      SYS_REFCURSOR,
    O_PRCSR_RETIREES_GRP_DTLS     OUT      SYS_REFCURSOR,
    O_PRCSR_AUTO_GRP_DTLS         OUT      SYS_REFCURSOR,
    O_PRCSR_INTRNTL_GRP_DTLS      OUT      SYS_REFCURSOR)
IS
BEGIN
    CCN_PROCESSORS_PKG.ALL_PROCESSOR_DTLS_S_SP(O_PROCESSORS,
                                               O_PROCESSOR_GROUPS,
                                               O_PRCSR_STR_GRP_DTLS,
                                               O_PRCSR_STR_ADMN_GRP_DTLS,
                                               O_PRCSR_CANADA_GRP_DTLS,
                                               O_PRCSR_HEADQRTS_GRP_DTLS,
                                               O_PRCSR_RETIREES_GRP_DTLS,
                                               O_PRCSR_AUTO_GRP_DTLS,
                                               O_PRCSR_INTRNTL_GRP_DTLS);
EXCEPTION  
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSOR_UI_SP Error : ' || SQLERRM);   
END PROCESSOR_UI_SP;

PROCEDURE PROCESSORS_UI_UPSERT_SP (
/******************************************************************************
This procedure is intended to insert/update/delete data from 
from the PROCESSORS tables

<PROCESSORS_UI_UPSERT>
    <PROCESSORS>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <PROCESSOR_NAME>Camia Brown</PROCESSOR_NAME>
            <PHONE_NUMBER>2165661751</PHONE_NUMBER>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
    </PROCESSORS>
    <PROCESSORS>
            <PROCESSOR_ID>2</PROCESSOR_ID>
            <PROCESSOR_NAME>DaNita Van-Leer Nicholson</PROCESSOR_NAME>
            <PHONE_NUMBER>2165662217</PHONE_NUMBER>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
            <DELETE_FLAG>Y</DELETE_FLAG>
    </PROCESSORS>
</PROCESSORS_UI_UPSERT>

Created : 10/18/2016 jxc517 CCN Project....
Changed : 
********************************************************************************/
    IN_XML         IN            CLOB)
IS
BEGIN
    CCN_PROCESSORS_PKG.PROCESSORS_UI_UPSERT_SP(IN_XML);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESSORS_UI_UPSERT_SP Error : ' || SQLERRM);
END PROCESSORS_UI_UPSERT_SP;

PROCEDURE PRCSR_GRP_DTLS_UI_UPSERT_SP (
/******************************************************************************
This procedure is intended to insert/update/delete data from 
from the below group detail tables.

PRCSR_STR_ADMN_GRP_DTLS
PRCSR_CANADA_GRP_DTLS
PRCSR_HEADQRTS_GRP_DTLS
PRCSR_RETIREES_GRP_DTLS
PRCSR_AUTO_GRP_DTLS
PRCSR_INTRNTL_GRP_DTLS

<PROCESSORS_UI_UPSERT>
    <PRCSR_STR_GRP_DTLS_TBL>
        <PRCSR_STR_GRP_DTLS>
            <GROUP_ID>1</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
            <STATE_CODE>NC</STATE_CODE>
        </PRCSR_STR_GRP_DTLS>
    </PRCSR_STR_GRP_DTLS_TBL>
    <PRCSR_STR_ADMN_GRP_DTLS_TBL>
        <PRCSR_STR_ADMN_GRP_DTLS>
            <GROUP_ID>2</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
        </PRCSR_STR_ADMN_GRP_DTLS>
    </PRCSR_STR_ADMN_GRP_DTLS_TBL>
    <PRCSR_CANADA_GRP_DTLS_TBL>
        <PRCSR_CANADA_GRP_DTLS>
            <GROUP_ID>3</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
        </PRCSR_CANADA_GRP_DTLS>
    </PRCSR_CANADA_GRP_DTLS_TBL>
    <PRCSR_HEADQRTS_GRP_DTLS_TBL>
        <PRCSR_HEADQRTS_GRP_DTLS>
            <GROUP_ID>4</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
        </PRCSR_HEADQRTS_GRP_DTLS>
    </PRCSR_HEADQRTS_GRP_DTLS_TBL>
    <PRCSR_RETIREES_GRP_DTLS_TBL>
        <PRCSR_RETIREES_GRP_DTLS>
            <GROUP_ID>5</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
        </PRCSR_RETIREES_GRP_DTLS>
    </PRCSR_RETIREES_GRP_DTLS_TBL>
    <PRCSR_AUTO_GRP_DTLS_TBL>
        <PRCSR_AUTO_GRP_DTLS>
            <GROUP_ID>6</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
        </PRCSR_AUTO_GRP_DTLS>
    </PRCSR_AUTO_GRP_DTLS_TBL>
    <PRCSR_INTRNTL_GRP_DTLS_TBL>
        <PRCSR_INTRNTL_GRP_DTLS>
            <GROUP_ID>7</GROUP_ID>
            <PROCESSOR_ID>1</PROCESSOR_ID>
            <EFFECTIVE_DATE>10-18-2016</EFFECTIVE_DATE>
            <CREATED_BY>jxc517</CREATED_BY>
        </PRCSR_INTRNTL_GRP_DTLS>
    </PRCSR_INTRNTL_GRP_DTLS_TBL>
</PROCESSORS_UI_UPSERT>

Created : 10/18/2016 jxc517 CCN Project....
Changed : 
********************************************************************************/
    IN_XML         IN            CLOB)
IS
BEGIN
    CCN_PROCESSORS_PKG.PRCSR_GRP_DTLS_UI_UPSERT_SP(IN_XML);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PRCSR_GRP_DTLS_UI_UPSERT_SP Error : ' || SQLERRM);
END PRCSR_GRP_DTLS_UI_UPSERT_SP;

PROCEDURE GL_ACCOUNTS_PROG_UI_UPSERT_SP(
/******************************************************************************
This procedure takes XML which has GL_ACCOUNT_NUMBER and Inserts/Updates
the given PROGRAMS in the XML to the the GL_ACCOUNT_NUMBER Or Updates given GL
ACCOUNT information

<?xml version="1.0" encoding="UTF-8"?>
<ACCOUNTS_UI>
   <USER_ID>axt754</USER_ID>
   <GENERAL_LEDGER_ACCOUNTS_TBL>
      <GENERAL_LEDGER_ACCOUNTS>
            <GL_ACCOUNT_NUMBER>33388809</GL_ACCOUNT_NUMBER>
            </DESCRIPTION>
            <PROFIT_OR_LOSS>65</PROFIT_OR_LOSS>
            <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </GENERAL_LEDGER_ACCOUNTS>
    </GENERAL_LEDGER_ACCOUNTS_TBL>
    <PRGM_GL_ACCNT_RLTN_DTLS_TBL>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <PROGRAM_NAME>Test Example10</PROGRAM_NAME>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <PROGRAM_NAME>Test Example11</PROGRAM_NAME>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
    </PRGM_GL_ACCNT_RLTN_DTLS_TBL>
</ACCOUNTS_UI>

Created : 03/15/2017 axt754 -- CCN Project Team
Modified: 08/17/2017 axt754 -- Separate UPSERT for ACCOUNTS, PROGRAMS and RELATION
        : 08/25/2017 axt754 -- No Insert of New Accounts
******************************************************************************/
    in_xml          IN          CLOB)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.GL_ACCOUNTS_PROG_UI_UPSERT_SP(in_xml);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' GL_ACCOUNTS_PROG_UI_UPSERT_SP Error');
END GL_ACCOUNTS_PROG_UI_UPSERT_SP;

PROCEDURE GL_ACCOUNTS_PROG_UI_DELETE_SP(
/******************************************************************************
This procedure takes XML which has GL ACCOUNT NUMBER and DELETES
Programs information given in the XML, that were attached to GL ACCOUNT NUMBER

<?xml version="1.0" encoding="UTF-8"?>
<ACCOUNTS_UI>
    <GENERAL_LEDGER_ACCOUNTS_TBL>
      <GENERAL_LEDGER_ACCOUNTS>
            <GL_ACCOUNT_NUMBER>33388809</GL_ACCOUNT_NUMBER>
            </DESCRIPTION>
            <PROFIT_OR_LOSS>65</PROFIT_OR_LOSS>
            <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </GENERAL_LEDGER_ACCOUNTS>
    </GENERAL_LEDGER_ACCOUNTS_TBL>
    <PRGM_GL_ACCNT_RLTN_DTLS_TBL>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <PROGRAM_NAME>Test Example10</PROGRAM_NAME>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <PROGRAM_NAME>Test Example10</PROGRAM_NAME>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
    </PRGM_GL_ACCNT_RLTN_DTLS_TBL>
</ACCOUNTS_UI>

Created : 03/15/2017 axt754 -- CCN Project Team
Modified: 08/17/2017 axt754 -- Separate DELETE for ACCOUNTS, PROGRAMS and RELATION
        : 08/25/2017 axt754 -- No Delete of Existing Accounts
******************************************************************************/
    in_xml          IN          CLOB)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.GL_ACCOUNTS_PROG_UI_DELETE_SP(in_xml);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' GL_ACCOUNTS_PROG_UI_DELETE_SP Error');
END GL_ACCOUNTS_PROG_UI_DELETE_SP;

PROCEDURE PROG_GL_ACCOUNTS_UI_UPSERT_SP(
/******************************************************************************
This procedure takes XML which has PROGRAM_NAME and Inserts/Updates
the given ACCOUNT_NUMBERS in the XML to the the PROGRAM Or Inserts/Updates
given PROGRAM related information

<?xml version="1.0" encoding="UTF-8"?>
<ACCOUNTS_UI>
   <USER_ID>axt754</USER_ID>
   <PROGRAMS_TBL>
      <PROGRAMS>
           <PROGRAM_NAME>Test Example10</PROGRAM_NAME>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PROGRAMS>
    </PROGRAMS_TBL>
    <PRGM_GL_ACCNT_RLTN_DTLS_TBL>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <GL_PS_ACCOUNT_NUMBER>33388809</GL_PS_ACCOUNT_NUMBER>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <GL_PS_ACCOUNT_NUMBER>33388810</GL_PS_ACCOUNT_NUMBER>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
    </PRGM_GL_ACCNT_RLTN_DTLS_TBL>
</ACCOUNTS_UI>

Created : 03/15/2017 axt754 -- CCN Project Team
Modified: 08/17/2017 axt754 -- Separate UPSERT for ACCOUNTS, PROGRAMS and RELATION
******************************************************************************/
    in_xml          IN          CLOB)
IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.PROG_GL_ACCOUNTS_UI_UPSERT_SP(in_xml);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' PROG_GL_ACCOUNTS_UI_UPSERT_SP Error');
END PROG_GL_ACCOUNTS_UI_UPSERT_SP;

PROCEDURE PROG_GL_ACCOUNTS_UI_DELETE_SP(
/******************************************************************************
This procedure takes XML as input Which has PROGRAM information
and Deletes the account information given in XML, attached to program

<?xml version="1.0" encoding="UTF-8"?>
<ACCOUNTS_UI>
   <PROGRAMS_TBL>
      <PROGRAMS>
           <PROGRAM_NAME>Test Example10</PROGRAM_NAME>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PROGRAMS>
    </PROGRAMS_TBL>
    <PRGM_GL_ACCNT_RLTN_DTLS_TBL>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <GL_PS_ACCOUNT_NUMBER>33388809</GL_PS_ACCOUNT_NUMBER>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
      <PRGM_GL_ACCNT_RLTN_DTLS>
           <GL_PS_ACCOUNT_NUMBER>33388810</GL_PS_ACCOUNT_NUMBER>
           <SORTED_SEQUENCE/>
           <SHARED>TRUE</SHARED>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PRGM_GL_ACCNT_RLTN_DTLS>
    </PRGM_GL_ACCNT_RLTN_DTLS_TBL>
</ACCOUNTS_UI>

Created : 03/15/2017 axt754 -- CCN Project Team
Modified: 08/17/2017 axt754 -- Separate DELETE for ACCOUNTS, PROGRAMS and RELATION
        : 08/24/2017 axt754 -- If a Program has the accounts in relation donot delete program
******************************************************************************/
    in_xml          IN          CLOB)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.PROG_GL_ACCOUNTS_UI_DELETE_SP(in_xml);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' PROG_GL_ACCOUNTS_UI_DELETE_SP Error');
END PROG_GL_ACCOUNTS_UI_DELETE_SP;

PROCEDURE PROGRAM_UI_DELETE_SP(
/******************************************************************************
This procedure takes XML as input Which has PROGRAM information
and Deletes the PROGRAM related information

<?xml version="1.0" encoding="UTF-8"?>
<ACCOUNTS_UI>
   <PROGRAMS_TBL>
      <PROGRAMS>
           <PROGRAM_NAME>Test Example10</PROGRAM_NAME>
           <EFFECTIVE_DATE>MM-DD-YYYY</EFFECTIVE_DATE>
           <EXPIRATION_DATE>MM-DD-YYYY</EXPIRATION_DATE>
      </PROGRAMS>
    </PROGRAMS_TBL>
</ACCOUNTS_UI>

Created : 03/15/2017 axt754 -- CCN Project Team
Modified: 08/17/2017 axt754 -- Separate DELETE for ACCOUNTS, PROGRAMS and RELATION
        : 08/24/2017 axt754 -- If a Program has the accounts in relation donot delete program
******************************************************************************/
    in_xml          IN          CLOB)
IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.PROGRAM_UI_DELETE_SP(in_xml);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' PROGRAM_UI_DELETE_SP Error');
END PROGRAM_UI_DELETE_SP;

PROCEDURE GL_ACCOUNTS_PROG_UI_S_SP(
/******************************************************************************
This procedures account number as input and retrives programs that were associated
with the given account and the account information as well.
Created : 08/15/2017 axt754 -- CCN Project Team

******************************************************************************/
    in_accnt_nbr             IN      VARCHAR2
    ,out_gl_accnt_refcursor     OUT  SYS_REFCURSOR
    ,out_prg_accnt_refcursor    OUT  SYS_REFCURSOR)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.GL_ACCOUNTS_PROG_UI_S_SP(in_accnt_nbr
                                                    ,out_gl_accnt_refcursor
                                                    ,out_prg_accnt_refcursor);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' GL_ACCOUNTS_PROG_UI_S_SP Error');
END GL_ACCOUNTS_PROG_UI_S_SP;

PROCEDURE PROG_GL_ACCOUNTS_UI_S_SP(
/******************************************************************************
This procedure program name as input and gives the accounts related to Program
related information

Created : 08/15/2017 axt754 -- CCN Project Team

******************************************************************************/
    in_prog_name             IN           VARCHAR2
    ,out_prg_refcursor          OUT       SYS_REFCURSOR
    ,out_prg_accnt_refcursor    OUT       SYS_REFCURSOR)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.PROG_GL_ACCOUNTS_UI_S_SP(in_prog_name
                                                    ,out_prg_refcursor
                                                    ,out_prg_accnt_refcursor);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' PROG_GL_ACCOUNTS_UI_S_SP Error');
END PROG_GL_ACCOUNTS_UI_S_SP;

PROCEDURE PROGRAMS_UI_S_SP(
/******************************************************************************
This procedures takes program name as input and retrives the data from
PROGRAMS Table, if the program name is not passed then retrives all the program
names from PROGRAMS Table

Created : 08/16/2017 axt754 -- CCN Project Team

******************************************************************************/
    in_prog_name             IN           VARCHAR2
    ,out_prg_refcursor          OUT       SYS_REFCURSOR)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.PROGRAMS_UI_S_SP(in_prog_name
                                            ,out_prg_refcursor);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' PROGRAMS_UI_S_SP Error');
END PROGRAMS_UI_S_SP;

PROCEDURE GL_ACCOUNTS_UI_S_SP(
/******************************************************************************
This procedures takes GL_ACCOUNT_NUMBER as input and retrives the data from
GENERAL_LEDGER_ACCOUNTS Table, if the GL_ACCOUNT_NUMBER is not passed then retrives all the accounts
from GENERAL_LEDGER_ACCOUNTS Table

Created : 08/16/2017 axt754 -- CCN Project Team

******************************************************************************/
    in_accnt_nbr             IN           VARCHAR2
    ,out_gl_accnt_refcursor     OUT          SYS_REFCURSOR)

IS
BEGIN
    CCN_GL_PS_ACCOUNTS_PKG.GL_ACCOUNTS_UI_S_SP(in_accnt_nbr
                                               ,out_gl_accnt_refcursor);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' GL_ACCOUNTS_UI_S_SP Error');
END GL_ACCOUNTS_UI_S_SP;

PROCEDURE COST_CENTER_DSC_CODES_SP(
/******************************************************************************
This procedure is intended to return a ref cursor with data from COST_CENTER_DSC_CODES 

Created : 12/13/2017 SXG151 CCN Project....
Modified:
*******************************************************************************/
  IN_COST_CENTER_CODE IN     COST_CENTER.COST_CENTER_CODE%TYPE,
  OUT_DSC_CODES          OUT REF_CURSOR)
IS
BEGIN
    CCN_EXTERNAL_DATA_SRC_PKG.DSC_CODES_SP(IN_COST_CENTER_CODE,
                                           OUT_DSC_CODES);
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' COST_CENTER_DSC_CODES_SP Error');
END  COST_CENTER_DSC_CODES_SP;



FUNCTION ADMIN_COST_CNTR_FIELDS_ENBLE(
/*****************************************************************************
This procedure takes the cost center code as input and checks if type_code of cost center
is '41' and category is 'A', IF so returns 'Y' That indicates to show
ALLOCATION_CC and DIVISION_OFFSET Fields, else returns 'N',that indicates
continue as it is working now.

Created : 01/05/2018 axt754 CCN Project....
Modified:
******************************************************************************/
IN_COST_CENTER_CODE IN VARCHAR2) RETURN VARCHAR2

IS 
BEGIN 
    RETURN CCN_BUSINESS_RULES_PKG.ADMIN_COST_CNTR_BR_SP(IN_COST_CENTER_CODE);
END ADMIN_COST_CNTR_FIELDS_ENBLE;

PROCEDURE PROCESS_SQ_FT_LD(
/****************************************************************************** 
This procedures takes care of following things as part of batch load process from UI
  # Get the data from UI
  # Upload the file on DB SERVER
  # call the batch process

Created : 12/05/2017 axt754 -- CCN Project Team
Changes :
******************************************************************************/
IN_BLOB            IN       BLOB)
IS
    V_FILE_NM         VARCHAR2(100) := 'CCN_MARKETING_SQ_FT_UPD.csv';
    V_ARC_FILE_NM     VARCHAR2(100) := 'CCN_MARKETING_SQ_FT_UPD_'||TO_CHAR(SYSDATE,'RRRRMMDDHHMISS')||'.csv';
BEGIN
    -- Upload file to DB server
    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB,V_FILE_NM);

    CCN_MARKETING_SQ_FT_LOAD.UI_PROCESS_SQ_FT_LD();

    --Rename file on server for history
    CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM,V_ARC_FILE_NM);
EXCEPTION
    WHEN OTHERS THEN
        -- Rename file on server for history
        CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
        errpkg.raise_err(SQLCODE, SUBSTR(SQLERRM, 1, 500) || ' PROCESS_SQ_FT_LD Error');
END PROCESS_SQ_FT_LD;
PROCEDURE HIERARCHY_FILE_GEN_UI_SP (
/******************************************************************************
This procedure is intended to call and execute hierarchy file generation process.
Cost center code is the input parameter.

Created  : 07/23/2018 pxa852 CCN Project Team....
Modified :
*******************************************************************************/
    IN_COST_CENTER_CODE    IN   COST_CENTER.COST_CENTER_CODE%TYPE)

IS
BEGIN

    CCN_HIERARCHY_FILE_GEN_PKG.GENERATE_COSTCNTR_HRCHY_FILE(IN_COST_CENTER_CODE);

END HIERARCHY_FILE_GEN_UI_SP;
PROCEDURE DSCRTS_DLVRY_CD_LOAD_PROCESS(
/******************************************************************************
This procedure is the core process for updating the descartes delivery code field.
This process will be invoked by UI for bulk update of descartes delivery code.

IN_BLOB          - blob value delimited by , and termianted by new line character

Created : 08/01/2018 pxa852 CCN Project Team....
Modified:
******************************************************************************/
    IN_BLOB            IN       BLOB)
IS
    V_FILE_NM VARCHAR2(100)     := 'STORE_DESCARTES_DELIVERY_CODE_UPDATE.csv';
    V_ARC_FILE_NM VARCHAR2(100) := 'STORE_DESCARTES_DELIVERY_CODE_UPDATE_'||TO_CHAR(SYSDATE,'RRRRMMDDHHMISS')||'.csv';
BEGIN
    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB, V_FILE_NM);
    CCN_BATCH_PROCESS.UPD_STORE_DESCARTES_DLVRY_CODE();
    -- Rename file on server for history
    CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
EXCEPTION
    WHEN OTHERS THEN
        -- Rename file on server for history
        CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
        ERRPKG.RAISE_ERR(-20004,'DSCRTS_DLVRY_CD_LOAD_PROCESS ', SQLCODE || ' ' || SQLERRM);
END DSCRTS_DLVRY_CD_LOAD_PROCESS;

PROCEDURE GENERATE_PRIMESUB_DETAILS_RPT
/******************************************************************************
This procedure is intended to generate an PrimeSub details and email it to Pat team.

Filters:
Created : 08/16/2018 kxm302 CCN project Team....
******************************************************************************/

IS
BEGIN

    CCN_GL_PS_ACCOUNTS_PKG.GENERATE_PRIMESUB_DETAILS_RPT();

EXCEPTION
 WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(-20004,'GENERATE_PRIMESUB_DETAILS_RPT', SQLCODE || ' ' || SQLERRM);

END GENERATE_PRIMESUB_DETAILS_RPT;

END CCN_UI_INTERFACE_APP_PKG;