head	1.30;
access;
symbols;
locks; strict;
comment	@# @;


1.30
date	2013.06.26.20.07.21;	author sw\kdp465;	state Exp;
branches;
next	1.29;
deltatype	text;
kopt	kv;
permissions	666;
commitid	48851cb49f86852;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.29
date	2013.06.24.21.01.27;	author sw\kdp465;	state Exp;
branches;
next	1.28;
deltatype	text;
kopt	kv;
permissions	666;
commitid	23d851c8b3a67576;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.28
date	2013.06.20.20.24.54;	author sw\kdp465;	state Exp;
branches;
next	1.27;
deltatype	text;
kopt	kv;
permissions	666;
commitid	254851c3651520f5;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.27
date	2013.06.19.16.26.34;	author sw\kdp465;	state Exp;
branches;
next	1.26;
deltatype	text;
kopt	kv;
permissions	666;
commitid	26b851c1dbb91c69;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.26
date	2013.06.18.21.18.17;	author sw\kdp465;	state Exp;
branches;
next	1.25;
deltatype	text;
kopt	kv;
permissions	666;
commitid	249c51c0ce982d8c;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.25
date	2013.06.14.20.45.05;	author sw\kdp465;	state Exp;
branches;
next	1.24;
deltatype	text;
kopt	kv;
permissions	666;
commitid	b9051bb80d05b9b;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.24
date	2013.06.14.05.08.44;	author sw\kdp465;	state Exp;
branches;
next	1.23;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2b3851baa5590eed;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.23
date	2013.06.10.18.58.26;	author sw\kdp465;	state Exp;
branches;
next	1.22;
deltatype	text;
kopt	kv;
permissions	666;
commitid	278851b621d15172;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.22
date	2013.05.09.17.46.51;	author sw\kdp465;	state Exp;
branches;
next	1.21;
deltatype	text;
kopt	kv;
permissions	666;
commitid	10c0518be10a5667;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.21
date	2013.05.09.16.04.04;	author sw\kdp465;	state Exp;
branches;
next	1.20;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2728518bc8f307bc;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.20
date	2013.04.15.12.32.05;	author sw\tal946;	state Exp;
branches;
next	1.19;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2650516bf344124c;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.19
date	2013.03.20.19.21.37;	author sw\kdp465;	state Exp;
branches;
next	1.18;
deltatype	text;
kopt	kv;
permissions	666;
commitid	12ec514a0c3f5c46;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.18
date	2013.01.18.14.10.12;	author sw\BLRA2R;	state Exp;
branches;
next	1.17;
deltatype	text;
kopt	kv;
permissions	666;
commitid	26b450f957c24fd0;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.17
date	2012.12.20.15.45.12;	author sw\mdh01r;	state Exp;
branches;
next	1.16;
deltatype	text;
kopt	kv;
permissions	666;
commitid	fb450d332873ead;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.16
date	2012.11.29.20.21.44;	author sw\mdh01r;	state Exp;
branches;
next	1.15;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2f2450b7c3d72989;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.15
date	2012.11.02.20.53.42;	author sw\kdp465;	state Exp;
branches;
next	1.14;
deltatype	text;
kopt	kv;
permissions	666;
commitid	5c8509432d50469;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.14
date	2012.09.21.15.35.12;	author TAL946;	state Exp;
branches;
next	1.13;
deltatype	text;
kopt	kv;
permissions	666;
commitid	ac505c892f3f0e;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.13
date	2012.09.18.13.54.10;	author TAL946;	state Exp;
branches;
next	1.12;
deltatype	text;
kopt	kv;
permissions	666;
commitid	9dc50587d010754;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.12
date	2012.09.05.19.33.19;	author TAL946;	state Exp;
branches;
next	1.11;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1aa45047a8fe132d;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.11
date	2012.08.24.18.59.17;	author TAL946;	state Exp;
branches;
next	1.10;
deltatype	text;
kopt	kv;
permissions	666;
commitid	14d45037cf034f84;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.10
date	2012.07.27.14.18.46;	author SW\TAL946;	state Exp;
branches;
next	1.9;
deltatype	text;
kopt	kv;
permissions	666;
commitid	17505012a3456d1c;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.9
date	2012.07.25.17.32.38;	author sw\mdh01r;	state Exp;
branches;
next	1.8;
deltatype	text;
kopt	kv;
permissions	666;
commitid	b6850102db6653c;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.8
date	2012.07.24.14.30.29;	author SW\TAL946;	state Exp;
branches;
next	1.7;
deltatype	text;
kopt	kv;
permissions	666;
commitid	90c500eb1840bad;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.7
date	2012.07.23.14.59.11;	author sw\mdh01r;	state Exp;
branches;
next	1.6;
deltatype	text;
kopt	kv;
permissions	666;
commitid	16c0500d66be5382;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.6
date	2012.07.20.20.41.20;	author sw\BLRA2R;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	17f45009c26f6efb;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.5
date	2012.07.11.20.09.43;	author sw\BLRA2R;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	bd44ffddd861796;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.4
date	2012.07.11.19.37.24;	author sw\BLRA2R;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	4204ffdd5f47edd;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.3
date	2012.07.10.20.50.10;	author sw\kdp465;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
permissions	666;
commitid	15b04ffc9581686a;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.2
date	2012.04.23.20.09.30;	author sw\kdp465;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	13404f95b6f97aea;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;

1.1
date	2012.04.18.17.14.56;	author sw\mdh01r;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	77c4f8ef68f6ea4;
filename	CCN_UI_INTERFACE_APP_PKG.pkg;


desc
@@


1.30
log
@fixes for saving phone table data
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@package body CCN_UI_INTERFACE_APP_PKG
    as
-- PACKAGE BODY
/****************************************************************************** 
This package is intended to return data for the cost_center table

created : 09/18/2012 TAL -- CCN coding project
changed : 09/21/2012 TAL -- Split into Table_IU and Interface_UI
        : 04/04/2013 TAL -- Modified Error Messages to be easier to read
******************************************************************************/

--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

	PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;

--REMOVE TESTING

PROCEDURE SECURITY_S_SP(
/******************************************************************************
	SECURITY_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the SECURITY table.  

created : 
*******************************************************************************/
in_user_id IN SECURITY_MATRIX.USER_ID%TYPE 
,out_USER_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_USER_REF_CUR FOR
			  SELECT * 
			  FROM SECURITY_MATRIX 
			  where user_id = in_user_id;			  
	  
	END SECURITY_S_SP;

PROCEDURE ADDRESS_UI_SP ( inCost_center                   in COST_CENTER.cost_center_code%type
                         ,inCountry_code                  in COST_CENTER.country_code%type
                         ,inAddressType					          in ADDRESS_USA.address_type%type DEFAULT NULL                                                 
                         ,out_ADDRESS_REF_CUR             out sys_refcursor)
/*******************************************************************************
	ADDRESS_UI_SP

	This procedure is intended to return an address ref cursor with data to be
	used for java  ADDRESS screen. 
     
created : 09/05/2012 BLR CCN UI Project....
revised :
*******************************************************************************/
        is                  
 v_code number;
 v_errm varchar2(500);
 v_in_costctr varchar2(6);  
 
 v_cost_center_row         COST_CENTER%ROWTYPE;
 v_home_store              TERRITORY.home_store%TYPE;
 
 invalid_country_code_err    EXCEPTION;
-- invalid_cost_center_err     EXCEPTION;

  BEGIN 
         
/*  
 1.0  For VALIDATION OF COUNTRY_CODE INPUT 
*/		
      if  not common_tools.code_detail_valid ('COUNTRY_CODE',inCountry_code) then  
      -- value not found in table 
              raise invalid_country_code_err; 
      end if; 
  
 /*  
 2.0  Get Cost Center Table for Category code validation
*/	
      
      select * into v_cost_center_row
              from COST_CENTER
              where cost_center_code =   inCost_center;
 
/*  
 3.0  when category code equal 'T' use home_store cost center
*/  
   
      if v_cost_center_row.category = 'T'  then    
         select home_store 
           into v_home_store
           from TERRITORY
           where cost_center_code =   inCost_center;	         
         else
           v_home_store := inCost_center;      
      end if;
 /*  
4.0  Validate which Country code column is being processed to extract correct
      address table such as:
      - ADDRESS_USA;
      - ADDRESS_CAN;
      - ADDRESS_MEX;
      - ADDRESS_OTHER
      ADDRESS_OTHER TABLE HOUSES ALL COUNTRIES EXCEPT USA, CANADA, PUERTO RICO, OR MEXICO
*/   
       
	    CASE ( inCountry_code ) 
        when 'USA' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );     
         
         when 'PRI' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );    
            
         when 'CAN' then
            CCN_TABLE_IU_PKG.ADDRESS_CAN_S_SP (                
             v_home_store 
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
                
         when 'MEX' then
            CCN_TABLE_IU_PKG.ADDRESS_MEX_S_SP (            
              v_home_store
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
         else 
            CCN_TABLE_IU_PKG.ADDRESS_OTHER_S_SP (           
             v_home_store
            ,inAddressType
            ,out_ADDRESS_REF_CUR );
      
  END CASE; 
         
     
  EXCEPTION
       
   when invalid_country_code_err then  
        v_code := errnums.en_invalid_code_detail_err;
        errpkg.raise_err(v_code, 'ADDRESS_UI_SP.invalid_country_code_err ',    
        'Entered Country_Code was "' || InCountry_code || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Country code must be found on "CODE_DETAIL TABLE ". '); 
  
  
    when OTHERS then
       v_code := sqlcode;
	     v_errm := substr(sqlerrm,1, 500);
       errpkg.raise_err(v_code, v_errm ||
        'CCN_TABLE_IU_PKG '  || 'No errors found');
       
 END ADDRESS_UI_SP;
 
 
PROCEDURE COST_CENTER_UI_SP ( 
 /******************************************************************************
	COST_CENTER_UI_SP   --    Cost Center User Interface Procedure

	This procedure is intended to return a ref cursor with data from 
	from the COST_CENTER, ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
  STATUS, TYPE, MARKETING, PHONE, TAXWARE, and ADDRESS tables.  

created : 09/06/2012 MDH CCN Project....
*******************************************************************************/
            IN_COST_CENTER          IN  COST_CENTER.COST_CENTER_CODE%TYPE
 --          
					, OUT_COST_CENTER_REF_CUR       OUT SYS_REFCURSOR
 					, OUT_CC_CATEGORY_REF_CUR       OUT SYS_REFCURSOR    
          , OUT_STATUS_REF_CUR            OUT SYS_REFCURSOR     
    			, OUT_TYPE_REF_CUR              OUT SYS_REFCURSOR   
     			, OUT_MARKETING_REF_CUR         OUT SYS_REFCURSOR   
  				, OUT_TAXWARE_REF_CUR           OUT SYS_REFCURSOR    
      		, OUT_PHONE_REF_CUR             OUT SYS_REFCURSOR     
      		, OUT_ADDRESS_REF_CUR           OUT SYS_REFCURSOR  )

       IS   

v_code                 number;
v_errm                 VARCHAR(500);
v_address_type         VARCHAR2(1)  := 'M';
v_cost_center_rowtype  COST_CENTER%rowtype;
v_break                VARCHAR(100);
v_cost_center          COST_CENTER.cost_center_code%TYPE;
invalid_cost_center_err     EXCEPTION;

BEGIN --  COST_CENTER_UI_SP
--

  BEGIN
  v_break  := ('Convert the in_cost_center to 6 digit ' );
    
  v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
  EXCEPTION
     WHEN OTHERS then
           raise invalid_cost_center_err;
                  
  END; -- get 6 digit Cost Center

  BEGIN -- Get Cost Center
                
  v_break  := ('Entered the Cost_Center_UI_SP ' 
                || ' in_cost_center = ' || v_cost_center || ' ' );
--
/**  Call COST_CENTER to get Category Code  ***/
      select * into v_cost_center_rowtype
            from COST_CENTER          
            where cost_center_code = v_cost_center; 
            
  EXCEPTION
     WHEN NO_DATA_FOUND then
           raise invalid_cost_center_err;
                  
  END; -- get Cost Center
--
--
/**  Call COST_CENTER Reference Cursor  ***/

      CCN_TABLE_IU_PKG.COST_CENTER_S_SP(
            v_cost_center          
 					, out_cost_center_ref_cur);      
--
--
/******************************************************************************
	Use the Category code of the COST_CENTER table to determine the type of 
	processing to be done as follows:
  
	  S  -->  Store, Marketing, and Taxware data
	  A  -->  Administration data
	  R  -->  Real_Estate data
	  T  -->  Territory data
    O  -->  Other, Marketing, and Taxware data    
*******************************************************************************/
--
v_break  :=  ('Entered the Category Routine ' 
              || ' in_cost_center = ' || v_cost_center 
              || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CASE ( v_cost_center_rowtype.category) 
        when 'S' then
 --         STORE Table
          v_break  :=  ('Entered the STORE Category Routine ' );
          CCN_TABLE_IU_PKG.STORE_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);  
 --         MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);    
 --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             
          
        when 'A' then
 --         ADMINISTRATION Table
          v_break  :=  ('Entered the ADMINISTRATION Category Routine ' );
          CCN_TABLE_IU_PKG.ADMINISTRATION_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);  
          
        when 'R' then
 --         REAL_ESTATE Table
          v_break  :=  ('Entered the REAL ESTATE Category Routine ' );
          CCN_TABLE_IU_PKG.REAL_ESTATE_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);    
          
        when 'T' then
 --         TERRITORY Table
          v_break  :=  ('Entered the TERRITORY Category Routine ' );
          CCN_TABLE_IU_PKG.TERRITORY_S_SP(
            null   
           ,v_cost_center
					, out_cc_category_ref_cur);    
  
        when 'O' then
 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(
            v_cost_center  
					, out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             
          
     END CASE;         
--
--
/**  Call STATUS Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.STATUS_S_SP(
            v_cost_center          
 					, null
 					, out_status_ref_cur);
--
--
/**  Call TYPE Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.TYPE_S_SP(
            v_cost_center          
 					, null
          , out_type_ref_cur);
--
--
/**  Call PHONE Reference Cursor  ***/
--
v_break  := ('Entered the PHONE Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.PHONE_S_SP(
            v_cost_center          
 					, out_phone_ref_cur);
--
--
/******************************************************************************
	Call the ADDRESS_UI_SP procedure to obtain the "Mailing" address only for 
	the cost center being processed.
  
 v_address_type is set to 'M' 
*******************************************************************************/	
--	
v_break  :=  ('Entered the ADDRESS Routine ' 
               || ' in_cost_center = ' || v_cost_center 
               || ' category <' || v_cost_center_rowtype.category || '>'
               || ' address type <' || v_address_type || '>'
               || ' country <' || v_cost_center_rowtype.country_code || '> ' );
--
/**  Call ADDRESS Reference Cursor  based on country_code ***/  
--
--      CCN_TABLE_IU_PKG.ADDRESS_UI_SP(
      ADDRESS_UI_SP(
            v_cost_center
          , v_cost_center_rowtype.country_code
          , v_address_type
 					, out_address_ref_cur);
--
   v_break  := ('Ended call to COST_CENTER_UI_SP ' );
--   
--
 EXCEPTION
       
       when invalid_cost_center_err then  
        v_code := errnums.en_invalid_cost_center_err;
        errpkg.raise_err(v_code, 'COST_CENTER_UI_SP.invalid_cost_center_err '
        || v_break,    
        'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Cost Center is not found - Would you like to Add? '
        ); 
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm || ' ' 
                    || v_break || ' ' 
                    || 'COST_CENTER_UI_SP Error '
                    );   
 
       
       null;
  
end COST_CENTER_UI_SP;


PROCEDURE POLLING_UI_SP (
/******************************************************************************
	POLLING_UI_SP   --    Polling User Interface Stored Procedure

	This procedure is intended to return a ref cursor with data from 
	from the POLLING, BANK_CARD, and TERMINAL tables.  

created : 09/05/2012 TAL CCN Project....
********************************************************************************/
            in_cost_center            in  polling.cost_center_code%type
 					, in_polling_status_code    in  polling.polling_status_code%type
          , in_merchant_id_code       in  bank_card.merchant_id%type
          , in_terminal_number        in  terminal.terminal_number%type
					, out_polling_refcur        out sys_refcursor
 					, out_bank_card_refcur      out sys_refcursor
			    , OUT_TERMINAL_REFCUR       OUT SYS_REFCURSOR
          )
       is

v_code                 number;
v_errm                 varchar(500);
v_break                VARCHAR(100);
v_polling_status_code polling.polling_status_code%type;
invalid_cost_center_err     EXCEPTION;
v_cost_center          COST_CENTER.cost_center_code%TYPE;
       
BEGIN --  POLLING_UI_SP     

  BEGIN
  v_break  := ('Convert the in_cost_center to 6 digit ' );
    
  v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
  EXCEPTION
     WHEN OTHERS then
           raise invalid_cost_center_err;
                  
  END; -- get 6 digit Cost Center

/**  Call POLLING Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.POLLING_S_SP ';

      CCN_TABLE_IU_PKG.POLLING_S_SP(
            in_cost_center          
 					, v_polling_status_code        
					, OUT_POLLING_REFCUR);  
          
      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.POLLING_S_SP ';      
      
/**  Call BANK_CARD Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';

      CCN_TABLE_IU_PKG.BANK_CARD_S_SP(
            in_cost_center          
 					, v_polling_status_code
          , in_merchant_id_code
					, OUT_BANK_CARD_REFCUR);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';
      
/**  Call TERMINAL Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
      
      CCN_TABLE_IU_PKG.TERMINAL_S_SP(
            in_cost_center          
 					, v_polling_status_code
          , in_terminal_number
					, out_terminal_refcur);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';

 EXCEPTION  
 
        when invalid_cost_center_err then  
        v_code := errnums.en_invalid_cost_center_err;
        errpkg.raise_err(v_code, 'POLLING_UI_SP.invalid_cost_center_err '
        || v_break,    
        'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Cost Center is not found'
        ); 
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'COST_CENTER_UI_SP Error ' || 
                'Last Break Point was '    || v_break );   
 
       null;
 
END POLLING_UI_SP;

PROCEDURE POLLING_UI_UPSERT_SP ( 
/******************************************************************************
	POLLING_UI_UPSERT_SP   --    POLLING User Interface Update/Insert Procedure

	This procedure is intended to update the database for the following tables 
       used in the Polling UI.

	Tables: 
            POLLING
          , BANK_CARD
          , TERMINAL
  
created : 11/09/2012 MDH CCN Project....
revised : 12/19/2012 MDH take inserts/updates out of loop process.
*******************************************************************************/
--
in_row_data  IN  varchar2)--sys.xmltype 

is
--cursor to get table names....

cursor TABLES_CUR is

    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like 'CREATE$JAVA$LOB$TABLE'
        ;

/*
*/

v_Row_data xmltype := sys.xmltype(in_Row_data);

v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_polling_frag clob;
v_xml_bank_card_frag clob;
v_xml_terminal_frag clob;
--
V_BANK_CARD_ROWTYPE      BANK_CARD%rowtype;
V_POLLING_ROWTYPE        POLLING%rowtype;
V_TERMInAL_ROWTYPE       TERMINAL%rowtype;
--
v_count integer := 1;
--
BEGIN
--
--    Removing fragments to send to individual procedures.
--
 FOR tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/POLLING_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/POLLING_UI/'|| tables_rec.table_name).getCLOBVal();
     
        CASE tables_rec.table_name
            when 'POLLING'   then 
            	v_xml_polling_frag   := v_xml_frag;
            	dbms_output.put_line('tablename ' || tables_rec.table_name); 
            when 'BANK_CARD' then 
            	v_xml_bank_card_frag := v_xml_frag;
            	dbms_output.put_line('tablename ' || tables_rec.table_name);        
        else
            null;
        END CASE;
      dbms_output.put_line('after getting frags ' );
    end if;

    
--
--
 END LOOP; --TABLES_CUR
--
--
--********************************************************************************
-- POLLING insert/update process - must be processed before BANK_CARD or TERMINAL
--*********************************************************************************
   BEGIN
       if v_xml_polling_frag  is not null  then
        dbms_output.put_line('polling frag yes' ); 
            CCN_TABLE_IU_PKG.POLLING_I_SP (
                 'POLLING'             
                , v_xml_polling_frag
                , v_polling_rowtype );
                
       end if;
--
	--dbms_output.put_line('POLLING_I_SP' ); 

     EXCEPTION
          when dup_val_on_index  then
            BEGIN
              CCN_TABLE_IU_PKG.POLLING_U_SP (
                  'POLLING'
                , v_xml_polling_frag 
                , v_polling_rowtype );
                dbms_output.put_line('Polling Update executed ');
            EXCEPTION 
               WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                   v_errm ||
                   ' Polling Update Error ' );
           END;
   END;
--
--
--******************************************************************************
-- TERMINAL insert/update process with loop - This is processed second
--******************************************************************************
-- 
     WHILE v_Row_data.existsNode('/POLLING_UI/TERMINAL_TABLE/' || 'TERMINAL' || '[' || v_count || ']') = 1 LOOP
--         dbms_output.put_line(v_userlist.extract('//user[' || v_count || ']/name/text()').getStringVal());
--
           v_xml_terminal_frag := v_Row_data.extract('/POLLING_UI/TERMINAL_TABLE/'|| 'TERMINAL' || '[' || v_count || ']').getCLOBVal();
 
            -- TERMINAL insert/update process 
            BEGIN
                if v_xml_terminal_frag  is not null  then
                    CCN_TABLE_IU_PKG.TERMINAL_I_SP (
                      'TERMINAL'             
                     , v_xml_terminal_frag
                     , v_terminal_rowtype );
--                        dbms_output.put_line('Terminal Insert executed ');
                end if;
            EXCEPTION
                  when dup_val_on_index  then
                   BEGIN
                       CCN_TABLE_IU_PKG.TERMINAL_U_SP (
                           'TERMINAL'
                         , v_xml_terminal_frag 
                         , v_terminal_rowtype );
 --                         dbms_output.put_line('Terminal Update executed ');
                    EXCEPTION 
                        WHEN OTHERS THEN 
                            v_code  := SQLCODE;
                            v_errm  := substr(SQLERRM,1,200);
                            errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm  ||
                            ' Terminal Update Error ' );
                    END;  
            END;
--                
            v_count := v_count + 1;
--                
     END LOOP; -- TERMINALS
--
--
--******************************************************************************
-- BANK_CARD insert/update process - This is processed third
--******************************************************************************
   BEGIN
          if v_xml_bank_card_frag  is not null  then
              CCN_TABLE_IU_PKG.BANK_CARD_I_SP (
                 null
               , null
               , null
               , null
               , 'BANK_CARD'
               , null
               , v_xml_bank_card_frag);
          end if;
   EXCEPTION
         when dup_val_on_index  then
          BEGIN
              CCN_TABLE_IU_PKG.BANK_CARD_U_SP (
                  null
                , null
                , null
                , null
                , 'BANK_CARD'
                , null
                , v_xml_bank_card_frag); 
--                dbms_output.put_line('Bank_Card Update executed ');
          EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Bank_Card Update Error ' );
          END; 
   END;
--
--
EXCEPTION

    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );
                            
END POLLING_UI_UPSERT_SP;

PROCEDURE ADDRESS_UI_UPSERT_SP ( 
/******************************************************************************
	ADDRESS_UI_UPSERT_SP   --    ADDRESS User Interface Update/Insert Procedure

	This procedure is intended to update the database for the following tables 
       used in the ADDRESS UI.

	Tables: 
            ADDRESS_CAN, 
            ADDRESS_USA, 
            ADDRESS_MEX, 
            ADDRESS_OTHER
  
created : 12/12/2012 TAL CCN Project....
revised :
*******************************************************************************/

in_row_data  IN  varchar2 ) --sys.xmltype 

is
--cursor to get table names....

cursor TABLES_CUR is

    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like 'CREATE$JAVA$LOB$TABLE'
        ;

/*
*/

v_Row_data xmltype := sys.xmltype(in_Row_data);

-- v_row_value varchar2(500);
-- v_row_xml_frag sys.xmltype;
-- v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_ADDRESS_CAN_frag clob;
v_xml_ADDRESS_USA_frag clob;
v_xml_ADDRESS_MEX_frag clob;
v_xml_ADDRESS_OTH_frag clob;
--
V_ADDRESS_CAN_ROWTYPE        ADDRESS_CAN%rowtype;
V_ADDRESS_USA_ROWTYPE        ADDRESS_USA%rowtype;
V_ADDRESS_MEX_ROWTYPE        ADDRESS_MEX%rowtype;
V_ADDRESS_OTH_ROWTYPE        ADDRESS_OTHER%rowtype;
--
v_count integer := 1;

begin

--    dbms_output.put_line('Entered into Procedure ADDRESS_UI_UPSERT_SP');
    
--    Removing fragments to send to individual procedures.

 for tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) then
     
--     dbms_output.put_line('v-row-data node = ADDRESS_UI_UPSERT');
     
        --v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();
		v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT').getCLOBVal();
     
        case tables_rec.table_name
            when 'ADDRESS_CAN'   then v_xml_ADDRESS_CAN_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_CAN fragment found' );
            when 'ADDRESS_USA'   then v_xml_ADDRESS_USA_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_USA fragment found' );
            when 'ADDRESS_MEX'   then v_xml_ADDRESS_MEX_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_MEX fragment found' );
            when 'ADDRESS_OTHER' then v_xml_ADDRESS_OTH_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_OTH fragment found' );
        else
            null;
        end case;
        
BEGIN      -- ADDRESS Processing
           
  BEGIN      -- ADDRESS_CAN Insert Process 
          
            if v_xml_ADDRESS_CAN_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_CAN'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_CAN_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_CAN Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_CAN_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_CAN Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_CAN Insert Error');
            
  END;       -- ADDRESS_CAN Insert Process 
           
  BEGIN      -- ADDRESS_USA Insert Process 
          
            if v_xml_ADDRESS_USA_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_USA'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_USA_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_USA Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_USA_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_USA Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_USA Insert Error');
            
  END;       -- ADDRESS_USA Insert Process 
           
  BEGIN      -- ADDRESS_MEX Insert Process 
          
            if v_xml_ADDRESS_MEX_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_MEX'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_MEX_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_MEX Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_MEX_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_MEX Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_MEX Insert Error');
            
  END;       -- ADDRESS_MEX Insert Process 
           
  BEGIN      -- ADDRESS_OTH Insert Process 
          
            if v_xml_ADDRESS_OTH_frag  is not null  then
            
                CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_OTHER'                     --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_OTH_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_OTH Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_OTH_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_OTH Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_OTH Insert Error');
            
  END;       -- ADDRESS_OTH Insert Process 

END;       -- ADDRESS Processing

End if;    -- if (v_Row_data.existsNode('/ADDRESS_UI_UPSERT/'


 end loop; --TABLES_CUR

exception

    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'ADDRESS_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );
--        dbms_output.put_line('in others ');
--        dbms_output.put_line(sqlerrm);

END ADDRESS_UI_UPSERT_SP;

PROCEDURE COST_CENTER_UI_UPSERT_SP ( 
 /******************************************************************************
	COST_CENTER_UI_UPSERT_SP   --    Cost Center User Interface Update delete
        Procedure

	This procedure is intended to update the database for the following tables used in
        Cost Center UI.
	Tables: 
              COST_CENTER
           ,  ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
            , STATUS
            , TYPE
            , MARKETING
            , PHONE
            , TAXWARE
            , ADDRESS tables.  

created : 10/26/2012 KDP CCN Project....
revised:   12/03/2012 BLR  CCN Project....
*******************************************************************************/

 in_row_data  in varchar2) --sys.xmltype
 
 IS

--cursor to get table names....

 cursor TABLES_CUR is
 
 SELECT table_name
 FROM insertorder
 ;
 
/*
    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like 'CREATE$JAVA$LOB$TABLE'
        ;
*/
/*
*/

v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data);

in_table_name varchar2(25);

v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);

--
v_xml_cost_center_frag clob;
v_xml_phone_frag clob;
v_xml_addr_usa_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
v_xml_addr_mex_frag clob;
v_xml_type_frag clob;
v_xml_status_frag clob;
v_xml_taxware_frag clob;
v_xml_marketing_frag clob;
v_xml_administration_frag clob;
v_xml_store_frag clob;
v_xml_other_frag clob;
v_xml_real_estate_frag clob;
v_xml_territory_frag clob;
--

V_COST_CENTER_ROWTYPE      COST_CENTER%rowtype;
V_PHONE_ROWTYPE                  PHONE%rowtype;
V_ADDRUSA_ROWTYPE              ADDRESS_USA%rowtype;
V_ADDRCAN_ROWTYPE              ADDRESS_CAN%rowtype;
V_ADDRMEX_ROWTYPE              ADDRESS_MEX%rowtype;
V_ADDROTHER_ROWTYPE          ADDRESS_OTHER%rowtype;
V_TYPE_ROWTYPE                     TYPE%rowtype;
V_STATUS_ROWTYPE                  STATUS%rowtype;
V_TAXWARE_ROWTYPE              TAXWARE%rowtype;
V_MARKETING_ROWTYPE           MARKETING%rowtype;
V_TERRITORY_ROWTYPE            TERRITORY%rowtype;
V_STORE_ROWTYPE                   STORE%rowtype;
V_OTHER_ROWTYPE                   OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE    ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE        REAL_ESTATE%rowtype;

--
v_count integer := 1;
begin
--
--    Removing fragments to send to individual procedures.
--

 for tables_rec in tables_cur loop 

--			dbms_output.put_line('before');
--            dbms_output.put_line(tables_rec.table_name);
--			dbms_output.put_line(v_Row_data.existsNode('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name));


    if (v_Row_data.existsNode('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) then
    
       v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();

       if tables_rec.table_name in ('ADDRESS_USA', 'ADDRESS_CAN', 'ADDRESS_MEX', 'ADDRESS_OTHER') then  
    --      EXECUTE CC_ADDRESS_TABLES_UI; 
            --dbms_output.put_line('EXECUTE CC_ADDRESS_TABLES_UI');
            CCN_TABLE_IU_PKG.CC_ADDRESS_TABLES_UI_SP (
              tables_rec.table_name                      
             ,in_row_data);         
       end if;

	end if;
   
    if (v_Row_data.existsNode('/COST_CENTER_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| tables_rec.table_name).getCLOBVal();
     
        case tables_rec.table_name
            when 'COST_CENTER' 	then v_xml_cost_center_frag := v_xml_frag;
            when 'STATUS' 		  then v_xml_status_frag := v_xml_frag;
            when 'TYPE'		      then v_xml_type_frag := v_xml_frag;
            when 'TAXWARE'	  	then v_xml_taxware_frag := v_xml_frag;
            when 'MARKETING'		then v_xml_marketing_frag := v_xml_frag;
            when 'ADMINISTRATION' 	then v_xml_administration_frag := v_xml_frag;
            when 'STORE' 	     	then v_xml_store_frag := v_xml_frag;
            when 'OTHER'		    then v_xml_other_frag := v_xml_frag;
            when 'REAL_ESTATE'	then v_xml_real_estate_frag := v_xml_frag;
            when 'TERRITORY'		then v_xml_territory_frag := v_xml_frag;		
--            when 'ADDRESS_USA' 	then v_xml_addr_usa_frag := v_xml_frag;
--            when 'ADDRESS_CAN' 	then v_xml_addr_can_frag := v_xml_frag;
--            when 'ADDRESS_MEX' 	then v_xml_addr_mex_frag := v_xml_frag;
            when 'ADDRESS_OTHER'	then v_xml_addr_oth_frag := v_xml_frag;           
        else
            null;
        end case;

        in_table_name := tables_rec.table_name;  		
 
 
        if tables_rec.table_name in ('ADMINISTRATION', 'STORE', 'OTHER', 'REAL_ESTATE', 'TERRITORY') then  
    --      EXECUTE CC_ADDTL_TABLES_UI; 
    
            CCN_TABLE_IU_PKG.CC_ADDTL_TABLES_UI_SP (
             in_table_name                      
            ,in_row_data);
            
           dbms_output.put_line('CCN_TABLE_IU_PKG.CC_ADDTL_TABLES_UI_SP ran with ' || tables_rec.table_name ); 
                     
        end if;
            
        
 --  COST_CENTER insert/update process 
       begin
        
          if v_xml_cost_center_frag  is not null  
          	and tables_rec.table_name = 'COST_CENTER' then
          --dbms_output.put_line('Cost Center Insert executed before ');
              CCN_TABLE_IU_PKG.COST_CENTER_I_SP (
                  null   
                , 'COST_CENTER' 
                , null
                , v_xml_cost_center_frag);    
                 --   , v_cost_center_rowtype );
              dbms_output.put_line('Cost Center Insert executed ');
	
          end if; 
          
       EXCEPTION
          when dup_val_on_index  then 
          --dbms_output.put_line('cc dup val on index ');
            begin
              CCN_TABLE_IU_PKG.COST_CENTER_U_SP (                 
                 null   
                , 'COST_CENTER' 
                , null
                , v_xml_cost_center_frag);        
	
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Cost Center Update Error ' );
            end;
       end;

 --  STATUS insert/update process 
 
       begin
       
          if v_xml_status_frag  is not null 
          and tables_rec.table_name = 'STATUS' then
          
              CCN_TABLE_IU_PKG.STATUS_I_SP (
                'STATUS'             
                , v_xml_status_frag                
                , v_status_rowtype );
              dbms_output.put_line('Status Insert executed ');
          end if;
      EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.STATUS_U_SP (
                'STATUS'
                , v_xml_status_frag                 
                , v_status_rowtype );
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Status Update Error ' );
            end;
      end;

 --  TYPE insert/update process 

      begin
        
          if v_xml_type_frag  is not null 
          and tables_rec.table_name = 'TYPE' then
              CCN_TABLE_IU_PKG.TYPE_I_SP (
                 'TYPE'                
                , v_xml_type_frag                
                , v_type_rowtype );
              dbms_output.put_line('Type Insert executed ');
          end if;
      EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TYPE_U_SP (
                  'TYPE'             
                , v_xml_type_frag                
                , v_type_rowtype );
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Type Update Error ' );
           end;
      end;


--  MARKETING insert/update process 

       begin
        
          if v_xml_marketing_frag  is not null 
          and tables_rec.table_name = 'MARKETING' then
              CCN_TABLE_IU_PKG.MARKETING_I_SP (                            
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag);                 
             
              dbms_output.put_line('MARKETING Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.MARKETING_U_SP (                  
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag);           
                     
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' MARKETING Update Error ' );
           end;
        end;

--  TAXWARE insert/update process 

       begin
              --dbms_output.put_line('TAXWARE Before Insert executed ');        
          if v_xml_taxware_frag  is not null 
          and tables_rec.table_name = 'TAXWARE' then
          
              CCN_TABLE_IU_PKG.TAXWARE_I_SP (                            
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);    
              dbms_output.put_line('TAXWARE Insert executed ');
          end if;                             
          
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TAXWARE_U_SP (                  
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);  
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' TAXWARE Update Error ' );
           end;
        end;

  end if;   
     
 -- 
      if (v_Row_data.existsNode('/COST_CENTER_UI/PHONE_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1) then
 --/COST_CENTER_UI/PHONE_TABLE/PHONE[1] 
        
              WHILE v_Row_data.existsNode('/COST_CENTER_UI/PHONE_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1 LOOP
                dbms_output.put_line('in phone_table loop ' || tables_rec.table_name );        
                v_xml_phone_frag := v_Row_data.extract('/COST_CENTER_UI/PHONE_TABLE/'|| tables_rec.table_name || '[' || v_count || ']').getCLOBVal();
 
                
    
 --  PHONE_TABLE insert/update process 
              begin
              
                if v_xml_phone_frag  is not null  then
                   CCN_TABLE_IU_PKG.PHONE_I_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);                    
                  
               dbms_output.put_line('Phone Insert executed ');
               end if;
          
              EXCEPTION
                 when dup_val_on_index  then
                   begin
                     CCN_TABLE_IU_PKG.PHONE_U_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);

			dbms_output.put_line('Phone Update executed ');	  
                     
              EXCEPTION 
                 WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                   v_errm ||
                   ' Phone Update Error ' );
             end;
           end;
              v_count := v_count + 1;
              
              END LOOP; --phone loop
      end if;    




   end loop; --tables_cur
   
    EXCEPTION
    when others then
    
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
          v_errm ||
          ' Errors' );
 
END COST_CENTER_UI_UPSERT_SP;

end CCN_UI_INTERFACE_APP_PKG;

@


1.29
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1073 4
a1076 1
            ,in_row_data);         
d1092 1
a1092 1
             -- dbms_output.put_line('Cost Center Insert executed ');
d1127 1
a1127 1
--              dbms_output.put_line('Status Insert executed ');
d1157 1
a1157 1
--              dbms_output.put_line('Type Insert executed ');
d1252 1
a1252 1
                --dbms_output.put_line(v_userlist.extract('//user[' || v_count || ']/name/text()').getStringVal());        
d1268 1
a1268 1
--               dbms_output.put_line('Phone Insert executed ');
d1279 3
a1281 1
                     , v_xml_phone_frag);   
@


1.28
log
@fixed marketing experation date when entering a new cost center
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d429 2
d432 11
a442 1
BEGIN --  POLLING_UI_SP
d479 9
a487 1
 EXCEPTION
@


1.27
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d576 1
a576 1
	dbms_output.put_line('POLLING_I_SP' ); 
d1060 2
a1061 1
          if v_xml_cost_center_frag  is not null  then
d1097 3
a1099 1
          if v_xml_status_frag  is not null  then
d1128 2
a1129 1
          if v_xml_type_frag  is not null  then
d1159 2
a1160 1
          if v_xml_marketing_frag  is not null  then
d1193 4
a1196 2
              dbms_output.put_line('TAXWARE Before Insert executed ');        
          if v_xml_taxware_frag  is not null  then
d1202 2
a1203 1
          end if;
@


1.26
log
@security changes
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d428 1
d438 1
a438 1
 					, in_polling_status_code        
d449 1
a449 1
 					, in_polling_status_code
d461 1
a461 1
 					, in_polling_status_code
@


1.25
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d44 21
d1013 1
a1013 1
            dbms_output.put_line('EXECUTE CC_ADDRESS_TABLES_UI');
d1060 1
a1060 1
          dbms_output.put_line('Cost Center Insert executed before ');
d1067 1
a1067 1
              dbms_output.put_line('Cost Center Insert executed ');
d1073 1
a1073 1
          dbms_output.put_line('cc dup val on index ');
d1162 1
a1162 1
--              dbms_output.put_line('MARKETING Insert executed ');
d1187 1
a1187 1
        
d1193 1
a1193 1
--              dbms_output.put_line('TAXWARE Insert executed ');
@


1.24
log
@cost center address fix
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1039 1
d1046 1
a1046 1
--              dbms_output.put_line('Cost Center Insert executed ');
d1051 2
a1052 1
          when dup_val_on_index  then
@


1.23
log
@update address fixes
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d523 6
a528 2
            when 'POLLING'   then v_xml_polling_frag   := v_xml_frag;
            when 'BANK_CARD' then v_xml_bank_card_frag := v_xml_frag;        
d532 1
a532 1
--      dbms_output.put_line('cost center fragment ' ||v_xml_cost_center_frag );
d535 1
a535 1
--    dbms_output.put_line('tablename ' || tables_rec.table_name);
d546 1
d551 1
d554 2
d563 1
a563 1
 --                dbms_output.put_line('Polling Update executed ');
d732 1
a732 1
        
d980 19
d1015 3
a1017 3
            when 'ADDRESS_USA' 	then v_xml_addr_usa_frag := v_xml_frag;
            when 'ADDRESS_CAN' 	then v_xml_addr_can_frag := v_xml_frag;
            when 'ADDRESS_MEX' 	then v_xml_addr_mex_frag := v_xml_frag;
d1033 1
a1033 9

       if tables_rec.table_name in ('ADDRESS_USA', 'ADDRESS_CAN', 'ADDRESS_MEX', 'ADDRESS_OTHER') then  
    --      EXECUTE CC_ADDRESS_TABLES_UI; 
    
            CCN_TABLE_IU_PKG.CC_ADDRESS_TABLES_UI_SP (
              in_table_name                      
             ,in_row_data);         
       end if;

d1239 4
@


1.22
log
@corrected error exception for no cost center found.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d724 2
a725 1
        v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();
@


1.21
log
@fix for cost center look up
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d365 1
a365 1
        v_code := errnums.en_invalid_code_detail_err;
@


1.20
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d189 1
a189 1

d194 11
d206 1
d208 1
a208 1
                || ' in_cost_center = ' || in_cost_center || ' ' );
d213 1
a213 1
            where cost_center_code = in_COST_CENTER; 
d225 1
a225 1
            in_cost_center          
d241 1
a241 1
              || ' in_cost_center = ' || in_cost_center 
d249 1
a249 1
            in_cost_center          
d253 1
a253 1
            in_cost_center
d258 1
a258 1
            in_cost_center
d265 1
a265 1
            in_cost_center          
d272 1
a272 1
            in_cost_center          
d280 1
a280 1
           ,in_cost_center
d287 1
a287 1
            in_cost_center  
d291 1
a291 1
            in_cost_center
d296 1
a296 1
            in_cost_center
d305 1
a305 1
             || ' in_cost_center = ' || in_cost_center 
d309 1
a309 1
            in_cost_center          
d317 1
a317 1
             || ' in_cost_center = ' || in_cost_center 
d321 1
a321 1
            in_cost_center          
d329 1
a329 1
             || ' in_cost_center = ' || in_cost_center 
d333 1
a333 1
            in_cost_center          
d345 1
a345 1
               || ' in_cost_center = ' || in_cost_center 
d354 1
a354 1
            in_cost_center
d368 1
a368 1
        'Entered Cost_Center_Code was "' || In_Cost_Center || '". ' || 
d1233 2
a1234 1
end CCN_UI_INTERFACE_APP_PKG;@


1.19
log
@sync
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
d6 1
a6 1
This package is intended will return data for the cost_center table
d9 2
a10 1
changed : 09/21/2012 TAL -- Split into Table_UI and Interface_UI
d75 2
a76 1
      if  not common_tools.code_detail_valid ('COUNTRY_CODE',inCountry_code) then  -- value not found in table 
d160 1
a160 1

d196 1
a196 1
                || ' in_cost_center = ' || in_cost_center ); 
d230 1
a230 1
              || ' category <' || v_cost_center_rowtype.category || '>');
d294 1
a294 1
             || ' category <' || v_cost_center_rowtype.category || '>');
d306 1
a306 1
             || ' category <' || v_cost_center_rowtype.category || '>');
d318 1
a318 1
             || ' category <' || v_cost_center_rowtype.category || '>');
d336 1
a336 1
               || ' country <' || v_cost_center_rowtype.country_code || '>' );
a359 1
        
d363 2
a364 2
                    errpkg.raise_err(v_code, v_errm 
                    || v_break
d549 1
a549 1
                   errpkg.raise_err(v_code, 'POLLING-UI_UPSERT_SP' ||
d551 1
a551 1
                   'Polling Update Error' );
d586 1
a586 1
                            errpkg.raise_err(v_code, 'POLLING-UI_UPSERT_SP' ||
d588 1
a588 1
                            'Terminal Update Error' );
d622 1
a622 1
                dbms_output.put_line('Bank_Card Update executed ');
d627 1
a627 1
                 errpkg.raise_err(v_code, 'POLLING-UI_UPSERT_SP' ||
d629 1
a629 1
                 'Bank_Card Update Error' );
d639 3
a641 6
        errpkg.raise_err(v_code, 'POLLING-UI_UPSERT_SP' ||
                            v_errm || 'in Others' );
--        dbms_output.put_line('in others ');
        dbms_output.put_line(sqlerrm);
--
--
d750 1
a750 1
                errpkg.raise_err(v_code, 'ADDRESS_CAN_UI_UPSERT_SP' ||
d752 1
a752 1
                'ADDRESS_CAN Insert Error' );
d778 1
a778 1
                errpkg.raise_err(v_code, 'ADDRESS_USA_UI_UPSERT_SP' ||
d780 1
a780 1
                'ADDRESS_USA Insert Error' );
d806 1
a806 1
                errpkg.raise_err(v_code, 'ADDRESS_MEX_UI_UPSERT_SP' ||
d808 1
a808 1
                'ADDRESS_MEX Insert Error' );
d834 1
a834 1
                errpkg.raise_err(v_code, 'ADDRESS_OTH_UI_UPSERT_SP' ||
d836 1
a836 1
                'ADDRESS_OTH Insert Error' );
d854 2
a855 2
        errpkg.raise_err(v_code, 'ADDRESS_UI_UPSERT_SP' ||
                            v_errm || 'in Others' );
d1014 1
a1014 1
                dbms_output.put_line('Cost Center Insert executed ');
d1025 1
a1025 3
                , v_xml_cost_center_frag);                
             --   , v_cost_center_rowtype );
                 dbms_output.put_line('Cost Center Update executed ');
d1031 1
a1031 1
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
d1033 1
a1033 1
                 'Cost Center Update Error' );
d1046 1
a1046 1
                dbms_output.put_line('Status Insert executed ');
d1055 1
a1055 1
                 dbms_output.put_line('Status Update executed ');
d1060 1
a1060 1
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
d1062 1
a1062 1
                 'Status Update Error' );
d1075 1
a1075 1
                dbms_output.put_line('Type Insert executed ');
d1084 1
a1084 1
                 dbms_output.put_line('Type Update executed ');
d1089 1
a1089 1
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
d1091 1
a1091 1
                 'Type Update Error' );
d1108 1
a1108 1
                dbms_output.put_line('MARKETING Insert executed ');
d1118 2
a1119 3
                     , v_xml_marketing_frag);                 
             
                 dbms_output.put_line('MARKETING Update executed ');
d1124 1
a1124 1
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
d1126 1
a1126 1
                 'MARKETING Update Error' );
d1139 1
a1139 1
                dbms_output.put_line('TAXWARE Insert executed ');
d1148 1
a1148 1
                 dbms_output.put_line('TAXWARE Update executed ');
d1153 1
a1153 1
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
d1155 1
a1155 1
                 'TAXWARE Update Error' );
d1182 1
a1182 1
                 dbms_output.put_line('Phone Insert executed ');
d1193 2
a1194 3
                     , v_xml_phone_frag);                    
                   
                  dbms_output.put_line('Phone Update executed ');
d1199 1
a1199 1
                   errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
d1201 1
a1201 1
                   'Phone Update Error' );
d1215 1
a1215 1
         errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP' ||
a1217 3
        dbms_output.put_line('in others ');
        dbms_output.put_line(sqlerrm);   

d1221 1
a1221 2
end CCN_UI_INTERFACE_APP_PKG;

@


1.18
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d991 1
a991 1
            CC_ADDTL_TABLES_UI_SP (
d999 1
a999 1
            CC_ADDRESS_TABLES_UI_SP (
@


1.17
log
@Take inserts/updates out of looping process and put after the loops.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d646 584
@


1.16
log
@add POLLING_UI_UPSERT_SP procedure to insert/update pollling, bank_card, and terminal tables.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d459 1
a459 1
revised :
d499 2
a500 1
begin
d504 1
a504 1
 for tables_rec in tables_cur loop 
d510 1
a510 1
        case tables_rec.table_name
d515 16
a530 6
        end case;
    --dbms_output.put_line('cost center fragment ' ||v_xml_cost_center_frag );
     -- POLLING insert/update process 
       begin
          if v_xml_polling_frag  is not null  then
              CCN_TABLE_IU_PKG.POLLING_I_SP (
d534 3
a536 3
 --               dbms_output.put_line('Polling Insert executed ');
          end if;
       EXCEPTION
d538 1
a538 1
            begin
d545 55
a599 10
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'POLLING-UI_UPSERT_SP' ||
                 v_errm ||
                 'Polling Update Error' );
         end;
       end;
     -- BANK_CARD insert/update process 
       begin
a608 1
--               dbms_output.put_line('Bank_Card Insert executed ');
d610 1
a610 1
       EXCEPTION
d612 1
a612 1
          begin
d621 2
a622 2
--                dbms_output.put_line('Bank_Card Update executed ');
           EXCEPTION 
d629 5
a633 56
          end; 
       end;
    end if;

--    dbms_output.put_line('tablename ' || tables_rec.table_name);


    if (v_Row_data.existsNode('/POLLING_UI/TERMINAL_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1) then
 --/POLLING_UI/TERMINAL_TABLE/TERMINAL[1]
 
--        dbms_output.put_line('in terminal');
              WHILE v_Row_data.existsNode('/POLLING_UI/TERMINAL_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1 LOOP
                --dbms_output.put_line(v_userlist.extract('//user[' || v_count || ']/name/text()').getStringVal());
 
                v_xml_terminal_frag := v_Row_data.extract('/POLLING_UI/TERMINAL_TABLE/'|| tables_rec.table_name || '[' || v_count || ']').getCLOBVal();
 
--                dbms_output.put_line(v_xml_terminal_frag);
                
              -- TERMINAL insert/update process 
                begin
                   if v_xml_terminal_frag  is not null  then
                       CCN_TABLE_IU_PKG.TERMINAL_I_SP (
                         'TERMINAL'             
                       , v_xml_terminal_frag
                       , v_terminal_rowtype );
--                        dbms_output.put_line('Terminal Insert executed ');
                   end if;
                EXCEPTION
                  when dup_val_on_index  then
                   begin
                       CCN_TABLE_IU_PKG.TERMINAL_U_SP (
                           'TERMINAL'
                         , v_xml_terminal_frag 
                         , v_terminal_rowtype );
 --                         dbms_output.put_line('Terminal Update executed ');
                    EXCEPTION 
                        WHEN OTHERS THEN 
                            v_code  := SQLCODE;
                            v_errm  := substr(SQLERRM,1,200);
                            errpkg.raise_err(v_code, 'POLLING-UI_UPSERT_SP' ||
                            v_errm  ||
                            'Terminal Update Error' );
                  end;  
                end;
                
                v_count := v_count + 1;
                
              END LOOP;
        
    end if;
     
 
 end loop; --TABLES_CUR


exception
d642 2
a643 1

@


1.15
log
@removed effective date column
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d446 195
@


1.14
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a385 1
          , in_effective_date         in  bank_card.effective_date%type   
d446 2
a447 1
end CCN_UI_INTERFACE_APP_PKG;@


1.13
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a3 1
    
a4 2
-- Updated: 09/18/2012 TAL  added ADDRESS_UI, COST_CENTER_UI, and POLLING_UI

d8 3
a10 6796
created : 11/15/2011 kdp CCN coding project
revisions: kdp created 11/15/2011
*******************************************************************************/

	PROCEDURE All_TABLE_COL_S_SP (
/*******************************************************************************
	All_TABLE_COL_S_SP
	
	This procedure is intended to return a ref cursor with data from 
	from the all_table_col table.  

created : 04/26/2012 kdp CCN Project....
*******************************************************************************/
			in_TABLE_NAME IN ALL_TAB_COLUMNS.TABLE_NAME%TYPE
			,out_ALL_TAB_REF_CUR OUT REF_CURSOR	)
    is                  
		v_code number;
		v_errm varchar2(500);

	BEGIN

		  OPEN out_ALL_TAB_REF_CUR FOR
			  
			  SELECT * 
		      	FROM all_tab_columns
    	  		WHERE TABLE_NAME = in_table_name
    		    order by column_id asc;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_S_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	END All_TABLE_COL_S_SP;

	PROCEDURE ADDRESS_CAN_S_SP  ( IN_COST_CENTER          IN  ADDRESS_CAN.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_CAN.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_CAN_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	ADDRESS_CAN_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_CAN table.  

created : 11/15/2010 kdp CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_CAN_REF_CUR FOR
			  
			  SELECT * 
        FROM ADDRESS_CAN AC
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
         AND  ADDRESS_TYPE      = NVL(IN_ADDRESS_TYPE, AC.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_S_SP' ||
             'COST_CENTER_CODE' || in_cost_center ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
        
	END ADDRESS_CAN_S_SP;


	PROCEDURE ADDRESS_MEX_S_SP  ( IN_COST_CENTER          IN  ADDRESS_MEX.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_MEX.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_MEX_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_MEX table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_MEX_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_MEX AM
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AM.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );

	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP' ||
             'COST_CENTER_CODE' || IN_COST_CENTER ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
        
	END ADDRESS_MEX_S_SP;


	PROCEDURE ADDRESS_OTHER_S_SP  ( IN_COST_CENTER            IN  ADDRESS_OTHER.COST_CENTER_CODE%TYPE
                                , IN_ADDRESS_TYPE           IN  ADDRESS_OTHER.ADDRESS_TYPE%TYPE
                                , OUT_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_OTHER table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_OTHER AO
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AO.ADDRESS_TYPE) 
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP' ||
             'COST_CENTER_CODE' || IN_COST_CENTER ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
        
	END ADDRESS_OTHER_S_SP;


	PROCEDURE ADDRESS_USA_S_SP  ( IN_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE
                              , out_ADDRESS_USA_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_USA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_USA table.  

created : 03/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_USA_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_USA AU
			  WHERE COST_CENTER_CODE = IN_COST_CENTER
			   AND ADDRESS_TYPE = NVL(IN_ADDRESS_TYPE, AU.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_S_SP' ||
             'COST_CENTER_CODE' || IN_COST_CENTER ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
    
	END ADDRESS_USA_S_SP;


	PROCEDURE ADMINISTRATION_S_SP (in_COST_CENTER IN ADMINISTRATION.COST_CENTER_CODE%TYPE
							,out_ADMINISTRATION_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADMINISTRATION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADMINISTRATION table.  

created : 03/20/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_ADMINISTRATION_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADMINISTRATION
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
                     
	end administration_s_sp;

	
  PROCEDURE BANK_CARD_S_SP  ( IN_COST_CENTER          IN  BANK_CARD.COST_CENTER_CODE%TYPE
                            , IN_POLLING_STATUS_CODE  IN  BANK_CARD.POLLING_STATUS_CODE%TYPE
                            , IN_MERCHANT_ID_CODE     IN  BANK_CARD.MERCHANT_ID%TYPE
                            , OUT_BANK_CARD_REF_CUR   OUT REF_CURSOR)
/*******************************************************************************
	BANK_CARD_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the bank_card table.  

created : 03/21/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_BANK_CARD_REF_CUR FOR
			  
			  SELECT * 
			  from bank_card
			  where cost_center_code    = in_cost_center
			   and  polling_status_code = in_polling_status_code
         and  merchant_id         = nvl(in_merchant_id_code, bank_card.merchant_id)
			   and (effective_date     <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
 EXCEPTION 
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BANK_CARD_S_SP' ||
             'COST_CENTER_CODE'     || in_cost_center ||
             'POLLING_STATUS_CODE'  || in_polling_status_code ||
             'MERCHANT_ID_CODE'     || in_merchant_id_code
             );

	END BANK_CARD_S_SP;
  

PROCEDURE BATCH_JOB_S_SP (in_batch_job_name     in  batch_job.batch_job_name%type
                        , in_batch_job_number   in  batch_job.batch_job_number%type
			, out_BATCH_JOB_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	BATCH_JOB_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the BATCH_JOB table.  

created : 07/18/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);

	BEGIN

		  OPEN out_BATCH_JOB_REF_CUR FOR
			  
			  SELECT * 
			  FROM BATCH_JOB
			  where batch_job_name = in_batch_job_name
			  and batch_job_number = in_batch_job_number;
	  
 EXCEPTION 
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_S_SP' ||
             'BATCH_JOB_NAME' || in_BATCH_JOB_NAME ||
             'BATCH_JOB_NUMBER' || in_BATCH_JOB_NUMBER );

	END BATCH_JOB_S_SP;


PROCEDURE CODE_DETAIL_S_SP ( in_CODE_HEADER_NAME      IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
			   , in_CODE_HEADER_TYPE      IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
			   , in_CODE_DETAIL_VALUE     IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
			  , out_CODE_DETAIL_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	CODE_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_DETAIL table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_DETAIL
			  where code_header_name   =  in_CODE_HEADER_NAME
                           and  code_header_type   =  in_CODE_HEADER_TYPE
                           and  code_detail_value  =  in_CODE_DETAIL_VALUE ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,      'CODE_DETAIL_S_SP'  ||            
             'CODE_HEADER_NAME'  || in_code_header_name ||
             'CODE_HEADER_TYPE'  || in_code_header_type ||
             'CODE_DETAIL_VALUE' || in_CODE_DETAIL_VALUE);
                     
	END CODE_DETAIL_S_SP;


PROCEDURE CODE_HEADER_S_SP (in_CODE_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
                          , in_CODE_HEADER_TYPE in CODE_HEADER.CODE_HEADER_TYPE%TYPE
							,out_CODE_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	CODE_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_HEADER table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_HEADER
			  where code_header_name = in_CODE_HEADER_NAME
                           and  code_header_type = in_CODE_HEADER_TYPE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code,    
             'CODE_HEADER_S_SP' ||
             'CODE_HEADER_NAME' || in_CODE_HEADER_NAME ||
             'CODE_HEADER_TYPE' || in_CODE_HEADER_TYPE     );
                     
	END CODE_HEADER_S_SP;


	PROCEDURE COST_CENTER_S_SP (in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
				, out_COST_CENTER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 11/15/2011 kdp CCN Project....
*******************************************************************************/
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
	  
	END COST_CENTER_S_SP;


PROCEDURE EMP_DATA_S_SP (in_EMPLOYEE_NUMBER IN EMP_DATA.EMPLOYEE_NUMBER%TYPE
							,out_EMP_DATA_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	EMP_DATA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the EMP_DATA table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_EMP_DATA_REF_CUR FOR
			  
			  SELECT * 
			  FROM EMP_DATA
			  where employee_number = in_EMPLOYEE_NUMBER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_S_SP' ||
             'EMPLOYEE_NUMBER' || in_EMPLOYEE_NUMBER);
                     
	END EMP_DATA_S_SP;


PROCEDURE HIERARCHY_DESCRIPTION_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE
                        , in_HRCHY_HDR_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
 			, out_HIERARCHY_DESCRIPT_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_DESCRIPTION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DESCRIPTION table.  

created : 03/22/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DESCRIPT_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DESCRIPTION
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_hdr_lvl_nbr     = in_HRCHY_HDR_lvl_nbr ;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_DESCRIPTION_S_SP' || 
             'HRCHY_HDR_NAME' || in_HRCHY_HDR_NAME  ||
             'HRCHY_HDR_LVL_NBR'  ||  in_HRCHY_HDR_LVL_NBR);
                     
	END HIERARCHY_DESCRIPTION_S_SP;


PROCEDURE HIERARCHY_DETAIL_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
          ,in_HRCHY_DTL_LEVEL         HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
          ,in_HRCHY_DTL_PREV_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
          ,in_HRCHY_DTL_CURR_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
          ,in_HRCHY_DTL_NEXT_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE
          ,in_HRCHY_DTL_EFF_DATE      HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE                  
 			, out_HIERARCHY_DETAIL_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	HIERARCHY_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DETAIL table.  

created : 03/22/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DETAIL
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_dtl_level        = in_HRCHY_DTL_LEVEL
          and hrchy_dtl_prev_lvl_val = in_HRCHY_DTL_PREV_LVL_VAL
          and hrchy_dtl_curr_lvl_val = in_HRCHY_DTL_CURR_LVL_VAL
          and hrchy_dtl_next_lvl_val = in_HRCHY_DTL_NEXT_LVL_VAL
          and hrchy_dtl_eff_date     = in_HRCHY_DTL_EFF_DATE;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_DETAIL_S_SP' || 
             'HRCHY_HDR_NAME' || in_HRCHY_HDR_NAME  ||
             'HRCHY_DTL_LEVEL'  ||  in_HRCHY_DTL_LEVEL ||
             'HRCHY_DTL_PREV_LVL_VAL'  ||  in_HRCHY_DTL_PREV_LVL_VAL ||
             'HRCHY_DTL_CURR_LVL_VAL'  ||  in_HRCHY_DTL_CURR_LVL_VAL ||
             'HRCHY_DTL_NEXT_LVL_VAL'  ||  in_HRCHY_DTL_NEXT_LVL_VAL ||
             'HRCHY_DTL_EFF_DATE'      ||  in_HRCHY_DTL_EFF_DATE);
                     
	END HIERARCHY_DETAIL_S_SP;


PROCEDURE HIERARCHY_HEADER_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE
  			, out_HIERARCHY_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_HEADER table.  

created : 03/22/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_HEADER
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME); 
			 
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_HEADER_S_SP' ||
             'HRCHY_HDR_NAME' || in_hrchy_hdr_name);
                     
	END HIERARCHY_HEADER_S_SP;


PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER        IN  MARKETING.COST_CENTER_CODE%TYPE
                          , IN_MARKETING_TYPE     IN  MARKETING.MARKETING_TYPE%TYPE 
                          , OUT_MARKETING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	MARKETING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the MARKETING table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_MARKETING_REF_CUR FOR
			  
			  select * 
			  from marketing
			  where cost_center_code = in_cost_center
         and  marketing_type   = nvl(in_marketing_type, marketing.marketing_type)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,     'MARKETING_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER   ||
             'MARKETING_TYPE'   || in_MARKETING_TYPE);
                     
	END MARKETING_S_SP;


PROCEDURE OTHER_S_SP (in_COST_CENTER IN OTHER.COST_CENTER_CODE%TYPE
							,out_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the OTHER table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM OTHER
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
                     
	END OTHER_S_SP;



PROCEDURE PHONE_S_SP (in_COST_CENTER IN PHONE.COST_CENTER_CODE%TYPE
							,out_PHONE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	PHONE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the PHONE table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_PHONE_REF_CUR FOR
			  
			  SELECT * 
			  FROM PHONE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
                     
	END PHONE_S_SP;


PROCEDURE POLLING_S_SP (in_COST_CENTER IN POLLING.COST_CENTER_CODE%TYPE
					,in_POLLING_STATUS_CODE IN POLLING.POLLING_STATUS_CODE%TYPE
					, out_POLLING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling table.  

created : 11/15/2010 kdp CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_POLLING_REF_CUR FOR
			  
			  SELECT * 
			  FROM POLLING
			  where cost_center_code = in_COST_CENTER
			  and polling_status_code = in_POLLING_STATUS_CODE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_S_SP'		||
		'COST_CENTER_CODE' 	|| in_COST_CENTER ||
		'POLLING_STATUS_CODE'	|| in_POLLING_STATUS_CODE );
                     	  
	END POLLING_S_SP;
  
PROCEDURE POLLING_DWLD_RSN_HIST_S_SP ( in_cost_center         in polling_dwld_rsn_hist.cost_center_code%type
					                           , in_polling_status_code in polling_dwld_rsn_hist.polling_status_code%type
					                           , in_effective_date      in polling_dwld_rsn_hist.effective_date%type, out_POLLING_DWLD_RSN_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling_dwld_rsn_hist table.  

created : 07/25/2012 tal CCN Project....
******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_POLLING_DWLD_RSN_REF_CUR FOR
			  
			  select * 
			  from polling_dwld_rsn_hist
			  where cost_center_code     = in_cost_center
			   and  polling_status_code  = in_polling_status_code
         and  effective_date       = in_effective_date  ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_DWLD_RSN_HIST_S_SP'		||
		'COST_CENTER_CODE'    || in_cost_center ||
		'POLLING_STATUS_CODE'	|| in_polling_status_code ||
    'EFFECTIVE_DATE'      || in_effective_date );
                     	  
	END POLLING_DWLD_RSN_HIST_S_SP;

PROCEDURE REAL_ESTATE_S_SP (in_COST_CENTER IN REAL_ESTATE.COST_CENTER_CODE%TYPE
							,out_REAL_ESTATE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	REAL_ESTATE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the REAL_ESTATE table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_REAL_ESTATE_REF_CUR FOR
			  
			  SELECT * 
			  FROM REAL_ESTATE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'REAL_ESTATE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
                     
	END REAL_ESTATE_S_SP;


PROCEDURE SALES_REP_S_SP  ( IN_GEMS_EMPLOYEE_ID   IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE
                          , OUT_SALES_REP_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	SALES_REP_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the SALES_REP table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_SALES_REP_REF_CUR FOR
			  
			  SELECT * 
			  from sales_rep
			  where gems_employee_id = in_gems_employee_id 
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_S_SP' ||
             'GEMS_EMPLOYEE_ID' || in_GEMS_EMPLOYEE_ID);
                     
	END SALES_REP_S_SP;


PROCEDURE   STATUS_S_SP ( IN_COST_CENTER     IN  STATUS.COST_CENTER_CODE%TYPE
                        , IN_STATUS_CODE     IN  STATUS.STATUS_CODE%TYPE
                        , OUT_STATUS_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STATUS_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STATUS table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_STATUS_REF_CUR FOR
			  
			  SELECT * 
			  from status
			  where cost_center_code  =  in_cost_center  
			  and status_code         =  nvl(in_status_code, status.status_code) 
			  and (effective_date    <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'STATUS_S_SP'      ||
		'COST_CENTER_CODE' || in_COST_CENTER  ||
		'STATUS_CODE'      || in_STATUS_CODE);
                     
	END STATUS_S_SP;


PROCEDURE STORE_S_SP (in_COST_CENTER IN STORE.COST_CENTER_CODE%TYPE
							,out_STORE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STORE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STORE table.  

created : 03/20/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_STORE_REF_CUR FOR
			  
			  SELECT * 
			  FROM STORE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
                     
	END STORE_S_SP;


PROCEDURE TAXWARE_S_SP (in_COST_CENTER IN TAXWARE.COST_CENTER_CODE%TYPE
		      ,out_TAXWARE_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	TAXWARE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TAXWARE table.  

created : 08/24/2012 tal CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_TAXWARE_REF_CUR FOR
			  
			  SELECT * 
			  FROM TAXWARE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
                     
	END TAXWARE_S_SP;


PROCEDURE TERMINAL_S_SP ( IN_COST_CENTER_CODE   IN  TERMINAL.COST_CENTER_CODE%TYPE
                        , IN_POLLING_STATUS_CD  IN  TERMINAL.POLLING_STATUS_CODE%TYPE
                        , IN_TERMINAL_NUMBER    IN  TERMINAL.TERMINAL_NUMBER%TYPE
                        , OUT_TERMINAL_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERMINAL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERMINAL  table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  

  v_code    number;
  v_errm    varchar2(500); 
  v_curr_date date := sysdate;

	BEGIN

		  OPEN OUT_TERMINAL_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERMINAL
			  where cost_center_code = in_COST_CENTER_CODE
			  and  polling_status_code = in_polling_status_cd  
			  and  terminal_number = nvl(in_terminal_number, terminal.terminal_number) 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
        errpkg.raise_err(v_code, 'TERMINAL_S_SP KEY IS' ||
             'COST_CENTER_CODE'     || in_cost_center_code  ||
             'POLLING STATUS CODE'  || in_polling_status_cd ||
             'TERMINAL NUMBER'      || in_terminal_number 
             );

              
	END  TERMINAL_S_SP;


PROCEDURE TERRITORY_S_SP ( in_terr_sls_mgr_cd  TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,in_terr_cc TERRITORY.COST_CENTER_CODE%TYPE            
                                     ,out_TERRITORY_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY table.  

created : 03/22/2012 BLR CCN Project....
*******************************************************************************/

      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    


	BEGIN

		  OPEN out_TERRITORY_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY
			  where cost_center_code = in_TERR_cc
			  and TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD;

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
         errpkg.raise_err(v_code, 'TERRITORY_S_SP KEY IS ' ||
             'COST_CENTER_CODE' || in_TERR_CC ||
             'SALES MANAGER NUMBER' || in_TERR_SLS_MGR_CD);
             
	END;-- TERRITORY_S_SP;


PROCEDURE TERRITORY_ASSIGNMENT_S_SP ( IN_TERR_SLS_MGR_CD      IN  TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,IN_COST_CENTER          IN  TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE                                     
                                     ,IN_GEMS_EMP_ID          IN  TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
                                     ,OUT_TERR_ASSIGN_REF_CUR OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_ASSIGNMENT_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_ASSIGNMENT table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
       is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);
  v_curr_date date := sysdate;   


	BEGIN

		  OPEN out_TERR_assign_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_ASSIGNMENT
			  where cost_center_code = IN_COST_CENTER
			  and TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD
			  and gems_employee_id = in_gems_emp_id
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	Errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENTL_S_SP KEY IS' ||
	     'TERRITORY SALES MANAGER NUMBER' || in_TERR_SLS_MGR_CD ||
       'COST CENTER CODE' || IN_COST_CENTER ||             
	     'GEMS EMPLOYEE ID' || in_gems_EMP_ID);
              
	END TERRITORY_ASSIGNMENT_S_SP;


PROCEDURE TERRITORY_SALES_MGR_S_SP  ( IN_TERR_SLS_MGR_CD        IN  TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
      				           				    , OUT_TERR_SLS_MGR_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERRITORY_SALES_MGR_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_SALES_MGR table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500); 
  v_curr_date date := sysdate;   

	BEGIN

		  OPEN out_TERR_SLS_MGR_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_SALES_MGR
			  where TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
			  
  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_S_SP KEY IS' ||
             'SALES MANAGER NUMBER' || in_TERR_SLS_MGR_CD);

              
	END  TERRITORY_SALES_MGR_S_SP;

PROCEDURE  TYPE_S_SP ( 
           IN_COST_CENTER   IN TYPE.COST_CENTER_CODE%TYPE 
          ,IN_TYPE_CODE     IN TYPE.TYPE_CODE%TYPE
          ,OUT_TYPE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	TYPE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TYPE table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
*******************************************************************************/
        is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    
  v_curr_date date := sysdate;

	BEGIN

		  OPEN out_Type_REF_CUR FOR
			  
			  select * 
			  from type
			  WHERE COST_CENTER_CODE = IN_COST_CENTER  
         and  type_code        = nvl(in_type_code, type.type_code)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TYPE_S_SP KEY IS ' ||
             'COST_CENTER_CODE' || in_cost_center ||
             'TYPE CODE' || in_TYPE_CODE);    
              
	END;-- TYPE_S_SP;

/*++++++++++++++++++++++++
INSERTS (ADDS)
+++++++++++++++++++++++*/
procedure ADDRESS_CAN_I_SP ( 
/*******************************************************************************
	ADDRESS_CAN_I_SP

	This procedure is intended to Insert new Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/27/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_can_row ADDRESS_CAN%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
   INSERT into ADDRESS_CAN values v_address_can_row ;
  
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_CAN_I_SP;

procedure ADDRESS_MEX_I_SP ( 
 /******************************************************************************
	ADDRESS_MEX_I_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row ADDRESS_MEX%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     INSERT into ADDRESS_MEX values v_address_mex_row;
       
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_MEX_I_SP;

procedure ADDRESS_OTHER_I_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_I_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		   if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE := v_row_value;
      when 'COUNTRY'           then  v_address_other_row.COUNTRY := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


  else
      null ;
  end if;

  end loop ;
      
      INSERT into ADDRESS_OTHER values v_address_other_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_OTHER_I_SP;

PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
	ADDRESS_USA_I_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
*******************************************************************************/
in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_ADDRESS_USA_row ADDRESS_USA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      
      
		      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
		
				    if (table_fields_rec.data_type <> 'DATE') then
				
				        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                    ,table_fields_rec.column_size); 
				
				    else
				       
				         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                                              ,8); 
				    end if;
		    
		    
		/***  below is a list of all the fields in the table  ***/
		/*
		            COST_CENTER_CODE
		            ADDRESS_TYPE
		            EFFECTIVE_DATE
		            EXPIRATION_DATE
		            ADDRESS_LINE_1
		            ADDRESS_LINE_2
		            ADDRESS_LINE_3
		            CITY
		            STATE_CODE
		            ZIP_CODE
		            ZIP_CODE_4
		            COUNTY
		            FIPS_CODE
		            DESTINATION_POINT
		            CHECK_DIGIT
		            VALID_ADDRESS
		*/
		
				  	case table_fields_rec.column_name
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE     :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE     :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE     :=  v_row_value;
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE     :=  v_row_value;
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1     :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2     :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3     :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY     :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE     :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE     :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4     :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY     :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE     :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT     :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT     :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS     :=  v_row_value;
		
					ELSE
						null;		
					END CASE;	   	
		
		
		      end if;

      end loop ;
      
      insert into ADDRESS_USA values v_ADDRESS_USA_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_I_SP;
 
 procedure ADMINISTRATION_I_SP (
/*******************************************************************************
	ADMINISTRATION_I_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/01/2012 mdh CCN Project....
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

  end loop ;
      
      INSERT into ADMINISTRATION values v_administration_row;
      
       commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end ADMINISTRATION_I_SP;
 
 procedure BANK_CARD_I_SP (
/*******************************************************************************
	BANK_CARD_I_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/


-------------  Business Rules go here                           
--	begin
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
       
      INSERT into BANK_CARD values  v_bank_card_row;
        
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_I_SP;

PROCEDURE BATCH_JOB_I_SP (
/*******************************************************************************
	BATCH_JOB_I_SP

	This procedure is intended to insert new BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getstringval()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_batch_job_row.batch_job_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_batch_job_row.batch_job_condition         := v_row_value;
--  	when 'BATCH_JOB_START_DATE'           then  v_batch_job_row.batch_job_start_date        := v_row_value;
      when 'BATCH_JOB_START_DATE'		        then  v_batch_job_row.batch_job_start_date	    	:= to_date(v_row_value,'YYYYMMDD');
--  	when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := to_date(v_row_value,'YYYYMMDD');
			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := to_date(v_row_value,'YYYYMMDD');
			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into BATCH_JOB values v_BATCH_JOB_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end BATCH_JOB_I_SP;

PROCEDURE CODE_DETAIL_I_SP (
/*******************************************************************************
	CODE_DETAIL_I_SP

	This procedure is intended to insert new CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_DETAIL values v_CODE_DETAIL_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end CODE_DETAIL_I_SP;

PROCEDURE CODE_HEADER_I_SP (
/*******************************************************************************
	CODE_HEADER_I_SP

	This procedure is intended to insert new CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_HEADER values v_CODE_HEADER_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end CODE_HEADER_I_SP;

PROCEDURE COST_CENTER_I_SP (
/*******************************************************************************
	COST_CENTER_I_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
*******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_cost_center_row cost_center%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into cost_center values v_cost_center_row;
      
      commit;

end COST_CENTER_I_SP;

PROCEDURE EMP_DATA_I_SP (
/*******************************************************************************
	EMP_DATA_I_SP

	This procedure is intended to insert new EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into EMP_DATA values v_EMP_DATA_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end EMP_DATA_I_SP;

PROCEDURE MARKETING_I_SP (
/*******************************************************************************
	MARKETING_I_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_MARKETING_row MARKETING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_MARKETING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_MARKETING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                      := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type                := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date                := v_row_value;
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date               := v_row_value;
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                     := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                   := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size          := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size            := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting       := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into MARKETING values v_MARKETING_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end MARKETING_I_SP;

PROCEDURE OTHER_I_SP (
/*******************************************************************************
	OTHER_I_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_OTHER_row OTHER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into OTHER values v_OTHER_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end OTHER_I_SP;

PROCEDURE PHONE_I_SP (
/*******************************************************************************
	PHONE_I_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_PHONE_row PHONE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code              := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type             := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code               := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number                  := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension               := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into PHONE values v_PHONE_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end PHONE_I_SP;
               
PROCEDURE POLLING_I_SP (
/*******************************************************************************
	POLLING_I_SP

	This procedure is intended to insert new POLLING records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  POLLING.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN  POLLING.POLLING_STATUS_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_POLLING_row POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

	      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
	
		    if (table_fields_rec.data_type <> 'DATE') then
		
		        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
		
		    else
		       
		         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                                              ,8); 
		    end if;
		    
		    --dbms_output.put_line('row value is ' || v_row_value);
		 
		/***  below is a list of all the fields in the table  ***/
		/***  not used		when 'EFFECTIVE_DATE'		  then  v_POLLING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
		/***  not used		when 'EXPIRATION_DATE'		then  v_POLLING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
		
			  	case table_fields_rec.column_name
					when 'COST_CENTER_CODE'		      then  v_polling_row.cost_center_code		     := v_row_value;
					when 'POLLING_STATUS_CODE'	      then  v_polling_row.polling_status_code		 := v_row_value;
					--when 'POLLING_PHONE_PFX'	      then  v_polling_row.polling_phone_pfx		     := v_row_value;
		      		--when 'POLLING_PHONE_NUMBER'	      then  v_polling_row.polling_phone_number	     := v_row_value;
		     		when 'MULTICAST_IND'	          then  v_polling_row.multicast_ind		         := v_row_value;
					when 'TIME_ZONE'		          then  v_polling_row.time_zone			         := v_row_value;
					when 'POLLING_IND'            	  then  v_polling_row.polling_ind			     := v_row_value;
					--when 'POLLING_PRIORITY'		      then  v_polling_row.polling_priority		     := v_row_value;
					--when 'POLLING_SCHEDULE_CODE'	  then  v_polling_row.polling_schedule_code	     := v_row_value;
					when 'NEXT_DOWNLOAD_BLOCK_CODE'   then  v_POLLING_row.NEXT_DOWNLOAD_BLOCK_COUNT	 := v_row_value;
				ELSE
					null;		
				END CASE;	   	
		
	     end if;

    end loop ;
      
      insert into POLLING values v_POLLING_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end POLLING_I_SP;

PROCEDURE POLLING_DWLD_RSN_HIST_I_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_I_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/

-------------  Business Rules go here                           
--	begin

--	exception
	
--		when others then
--    dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'POLLING_DWLD_RSN_HIST_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_I_SP;
 
PROCEDURE REAL_ESTATE_I_SP (
/******************************************************************************
	REAL_ESTATE_I_SP

	This procedure is intended to insert new REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_cost_center          IN  REAL_ESTATE.COST_CENTER_CODE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
)

 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_real_estate_row REAL_ESTATE%rowtype;
v_row_value     varchar2(1000);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/REAL_ESTATE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_REAL_ESTATE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_REAL_ESTATE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into REAL_ESTATE values v_real_estate_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
        	
end REAL_ESTATE_I_SP;

PROCEDURE SALES_REP_I_SP (
/*****************************************************************************
	SALES_REP_I_SP

	This procedure is intended to insert new SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_gems_emp_id          IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_sales_rep_row SALES_REP%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/SALES_REP/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

        else
       
           v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
        end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into SALES_REP values v_sales_rep_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
        
	
end SALES_REP_I_SP;

PROCEDURE STATUS_I_SP (
/*****************************************************************************
	STATUS_I_SP

	This procedure is intended to insert new STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
*****************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_costctr              IN  STATUS.COST_CENTER_CODE%TYPE,
in_status               IN  STATUS.STATUS_CODE%TYPE,
in_eff_date             IN  STATUS.EFFECTIVE_DATE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_status_row STATUS%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STATUS/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into STATUS values v_status_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        
	
end STATUS_I_SP;

PROCEDURE STORE_I_SP (
/*****************************************************************************
	STORE_I_SP

	This procedure is intended to insert new STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  STORE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_STORE_row STORE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STORE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;

			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;

			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			--when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			--when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			--when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into STORE values v_STORE_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end STORE_I_SP;

PROCEDURE TAXWARE_I_SP (
/*****************************************************************************
	TAXWARE_I_SP

	This procedure is intended to insert new TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  TAXWARE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_TAXWARE_row TAXWARE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TAXWARE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;

			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TAXWARE values v_TAXWARE_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	end TAXWARE_I_SP;

PROCEDURE TERMINAL_I_SP 
(
/*****************************************************************************
	TERMINAL_I_SP

	This procedure is intended to insert new terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
******************************************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_terminal_row TERMINAL%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'date') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
              else
    
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TERMINAL values v_terminal_row;
      
      commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        

end TERMINAL_I_SP;

PROCEDURE TERRITORY_I_SP (
/******************************************************************************
	TERRITORY_I_SP

	This procedure is intended to insert new TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
*******************************************************************************/
in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      


      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then

	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
		ELSE
			null;	      
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into territory values v_territory_row;
      
      commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
        

end TERRITORY_I_SP;

PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_I_SP

	This procedure is intended to insert new territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/04/2012 BLR CCN Project....
******************************************************************************/
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_assignment_row territory_assignment%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
               else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
               end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TERRITORY_ASSIGNMENT values v_territory_assignment_row;
      
      commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        

end TERRITORY_ASSIGNMENT_I_SP;

PROCEDURE TERRITORY_SALES_MGR_I_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_I_SP

	This procedure is intended to insert new territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
*******************************************************************************/
 in_slsmgr     IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_sales_mgr_row TERRITORY_SALES_MGR%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_SALES_MGR/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                     ,table_fields_rec.column_size); 
                else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name			
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id:= v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name := v_row_value;
				
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TERRITORY_SALES_MGR values v_territory_sales_mgr_row;
      
      commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
        

end TERRITORY_SALES_MGR_I_SP;

PROCEDURE TYPE_I_SP (
/******************************************************************************
	TYPE_I_SP

	This procedure is intended to insert new TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
*****************************************************************************/
 in_COSTCTR IN TYPE.COST_CENTER_CODE%TYPE
,in_TYPE IN TYPE.TYPE_CODE%TYPE
,in_EFF_DATE IN TYPE.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2--sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_TABLE_NAME
        order by column_id asc
      	;
--;
v_type_row TYPE%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TYPE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
             if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
                else
    
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name || '/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_VALUE); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_type_row.cost_center_code := v_row_value;
			when 'TYPE_CODE' then  v_type_row.type_code := v_row_value;
			when 'EFFECTIVE_DATE' then  v_type_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE' then  v_type_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TYPE values v_type_row;
      
      commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        

end TYPE_I_SP;

/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/

procedure ADDRESS_CAN_U_SP ( 
/*******************************************************************************
	ADDRESS_CAN_U_SP

	This procedure is intended to update Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_can_row ADDRESS_CAN%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
   UPDATE ADDRESS_CAN set row = v_address_can_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_CAN_U_SP;

procedure ADDRESS_MEX_U_SP ( 
/*******************************************************************************
	ADDRESS_MEX_U_SP

	This procedure is intended to Update Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row ADDRESS_MEX%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     UPDATE ADDRESS_MEX set row  =  v_address_mex_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_MEX_U_SP;

procedure ADDRESS_OTHER_U_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_U_SP

	This procedure is intended to Update OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		   if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE := v_row_value;
      when 'COUNTRY'           then  v_address_other_row.COUNTRY := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


  else
      null ;
  end if;

  end loop ;
      
      UPDATE ADDRESS_OTHER set row  =  v_address_other_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_OTHER_U_SP;

PROCEDURE ADDRESS_USA_U_SP (
/*******************************************************************************
	ADDRESS_USA_U_SP

	This procedure is intended to Update ADDRESS_USA address records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_USA table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/20/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_usa_row address_usa%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_usa_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_usa_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_usa_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_usa_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_usa_row.ADDRESS_LINE_1 := v_row_value;
      when 'ADDRESS_LINE_2'    then  v_address_usa_row.ADDRESS_LINE_2 := v_row_value;
      when 'ADDRESS_LINE_3'    then  v_address_usa_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_usa_row.CITY := v_row_value;
			when 'STATE_CODE'        then  v_address_usa_row.STATE_CODE := v_row_value;
			when 'ZIP_CODE'          then  v_address_usa_row.ZIP_CODE := v_row_value;
			when 'ZIP_CODE_4'        then  v_address_usa_row.ZIP_CODE_4 := v_row_value;
			when 'COUNTY'            then  v_address_usa_row.COUNTY := v_row_value;
			when 'FIPS_CODE'         then  v_address_usa_row.FIPS_CODE := v_row_value;
			when 'DESTINATION_POINT' then  v_address_usa_row.DESTINATION_POINT := v_row_value;
			when 'CHECK_DIGIT'       then  v_address_usa_row.CHECK_DIGIT := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_usa_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     UPDATE ADDRESS_USA set row  =  v_address_usa_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
   
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_USA_U_SP;

procedure ADMINISTRATION_U_SP (
/*******************************************************************************
	ADMINISTRATION_U_SP

	This procedure is intended to update ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

  end loop ;
      
      UPDATE ADMINISTRATION set row = v_administration_row
         where cost_center_code = in_Cost_Center;
         
       commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADMINISTRATION_U_SP;				 
				
 procedure BANK_CARD_U_SP (
/*******************************************************************************
	BANK_CARD_U_SP

	This procedure is intended to update BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
*******************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/


-------------  Business Rules go here                           
--	begin
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
       
      UPDATE BANK_CARD set row = v_bank_card_row
        Where cost_center_code     =  in_COST_CENTER
          and polling_status_code  =  in_POLLING_STATUS_CODE
          and merchant_id          =  in_MERCHANT_ID
          and effective_date       =  in_EFFECTIVE_DATE;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
      	, v_errm);
        
end BANK_CARD_U_SP;

PROCEDURE BATCH_JOB_U_SP (
/*******************************************************************************
	BATCH_JOB_U_SP

	This procedure is intended to update existing BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_BATCH_JOB_row.BATCH_JOB_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_BATCH_JOB_row.BATCH_JOB_condition         := v_row_value;
			when 'BATCH_JOB_START_DATE'           then  v_BATCH_JOB_row.BATCH_JOB_start_date        := v_row_value;
			when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := v_row_value;
			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := v_row_value;
			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update batch_job set row = v_batch_job_row  where BATCH_JOB_NAME    = in_BATCH_JOB_NAME 
                                                   and  BATCH_JOB_NUMBER  = in_BATCH_JOB_NUMBER ;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	end BATCH_JOB_U_SP;

PROCEDURE CODE_DETAIL_U_SP (
/*******************************************************************************
	CODE_DETAIL_U_SP

	This procedure is intended to update existing CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName   - Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_detail set row = v_code_detail_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type 
                                                      and  code_detail_value  = in_code_detail_value ;    
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	end CODE_DETAIL_U_SP;

PROCEDURE CODE_HEADER_U_SP (
/*******************************************************************************
	CODE_HEADER_U_SP

	This procedure is intended to update existing CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_header set row = v_code_header_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type ;    
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end CODE_HEADER_U_SP;
       
PROCEDURE COST_CENTER_U_SP (
/*****************************************************************************
	COST_CENTER_U_SP

	This procedure is intended to UPDATE cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
*****************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;                                   
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%rowtype;
 v_row_value 	varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.pri_logo_group_ind := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      /*
                        BUSINESS RULES HERE
    CLOSED_COST_CENTER
      if (STATUS.status.code  in  ("X","5","9"))    or
         (COST_CENTER.close_date is not null)            then
          CCN_BUSINESS_RULES_PKG.close_ccnt_sp
               (STATUS,
                COST_CENTER,
                TERRITORY)
      END IF;
      
    REOPEN CLOSED COST CENTER
      if (STATUS.status_code  not in ("X", "5", "9"))  OR
         (COST_CENTER.close_date  is )                    then
           CCN_BUSINESS_RULES_PKG.close_ccnt_sp
               (STATUS,
                COST_CENTER,
                TERRITORY,
                TYPE)
      END IF;
      */


      UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center;
      
      
      commit;

  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);

end cost_center_u_sp;

PROCEDURE EMP_DATA_U_SP (
/*******************************************************************************
	EMP_DATA_U_SP

	This procedure is intended to update existing EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update emp_data set row = v_emp_data_row where employee_number  =  in_employee_number ;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end emp_data_u_sp;

PROCEDURE MARKETING_U_SP (
/*******************************************************************************
	MARKETING_U_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_MARKETING_row MARKETING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                      := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type                := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date                := v_row_value;
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date               := v_row_value;
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                     := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                   := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size          := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size            := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting       := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update marketing set row = v_marketing_row where cost_center_code = in_cost_center
                                                  and  marketing_type   = in_marketing_type ;      
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end marketing_u_sp;

PROCEDURE OTHER_U_SP (
/*******************************************************************************
	OTHER_U_SP

	This procedure is intended to update existing OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_OTHER_row OTHER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE OTHER set row = v_other_row where cost_center_code = in_cost_center;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end other_u_sp;

PROCEDURE PHONE_U_SP (
/*******************************************************************************
	PHONE_U_SP

	This procedure is intended to update existing PHONE records

	PHONE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_PHONE_row PHONE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code              := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type             := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code               := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number                  := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension               := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE PHONE set row = v_phone_row where cost_center_code = in_cost_center;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end PHONE_U_SP;

PROCEDURE POLLING_U_SP (
/*******************************************************************************
	POLLING_U_SP

	This procedure is intended to update existing POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  POLLING.COST_CENTER_CODE%TYPE,
in_polling_status_code  in  polling.polling_status_code%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_POLLING_row POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/POLLING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		  then  v_POLLING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_POLLING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'		        then  v_polling_row.cost_center_code		       := v_row_value;
			when 'POLLING_STATUS_CODE'	      then  v_polling_row.polling_status_code		     := v_row_value;			
     	when 'MULTICAST_IND'	          	then  v_polling_row.multicast_ind		           := v_row_value;
			when 'TIME_ZONE'		              then  v_polling_row.time_zone			             := v_row_value;
			when 'POLLING_IND'            		then  v_polling_row.polling_ind			           := v_row_value;			
			when 'NEXT_DOWNLOAD_BLOCK_COUNT' 	then  v_polling_row.next_download_block_count	 := v_row_value; 
      
		ELSE
			null;		
		END CASE;	   	

         dbms_output.put_line('Block Count Value Is ' || v_polling_row.next_download_block_count);

      else
        null ;
      end if;

      end loop ;
      
      update polling set row = v_polling_row where cost_center_code     = in_cost_center
                                              and  polling_status_code  = in_polling_status_code ;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end POLLING_U_SP;

PROCEDURE POLLING_DWLD_RSN_HIST_U_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_U_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/

-------------  Business Rules go here                           
--	begin

--	exception
	
--		when others then
--    dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      update polling_dwld_rsn_hist set row = v_polling_dwld_rsn_hist_row where cost_center_code     = in_cost_center
                                              and  polling_status_code  = in_polling_status_code 
                                              and  effective_date       = in_effective_date ;
       
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_U_SP;

PROCEDURE REAL_ESTATE_U_SP (
/******************************************************************************
	REAL_ESTATE_U_SP

	This procedure is intended to update changes to REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 blr CCN Project....
updated : 08/24/2012 tal CCN Project....
*****************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_cost_center          IN  REAL_ESTATE.COST_CENTER_CODE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
)

 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_real_estate_row REAL_ESTATE%rowtype;
v_row_value     varchar2(1000);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/REAL_ESTATE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_REAL_ESTATE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_REAL_ESTATE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
          
      UPDATE real_estate set row = v_real_estate_row where cost_center_code = in_cost_center;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
        	
end real_estate_u_sp;

PROCEDURE SALES_REP_U_SP (
/*******************************************************************************
	SALES_REP_U_SP

	This procedure is intended to update changed SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 blr CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_gems_emp_id          IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_sales_rep_row SALES_REP%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/SALES_REP/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

        else
       
           v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
        end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE sales_rep set row = v_sales_rep_row where gems_employee_id = in_gems_emp_id;
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
        
	
end SALES_REP_U_SP;

PROCEDURE STATUS_U_SP (
/*******************************************************************************
	STATUS_U_SP

	This procedure is intended to update changed STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_costctr              IN  STATUS.COST_CENTER_CODE%TYPE,
in_status               IN  STATUS.STATUS_CODE%TYPE,
in_eff_date             IN  STATUS.EFFECTIVE_DATE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_status_row STATUS%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STATUS/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      
      UPDATE status set row = v_status_row
        where cost_center_code = in_costctr 
          and STATUS_CODE = in_status              
          and EFFECTIVE_DATE = in_eff_date;
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        
	
end STATUS_U_SP;

PROCEDURE STORE_U_SP (
/******************************************************************************
	STORE_U_SP

	This procedure is intended to update changed STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 blr CCN Project....
updated : 08/24/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  STORE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_STORE_row STORE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STORE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;

			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;

			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			--when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			--when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			---when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE STORE set row = v_STORE_row where cost_center_code = in_COST_CENTER;
           
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end STORE_U_SP;

PROCEDURE TAXWARE_U_SP (
/*******************************************************************************
	TAXWARE_U_SP

	This procedure is intended to update changed TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  TAXWARE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_TAXWARE_row TAXWARE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TAXWARE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;

			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE TAXWARE set row = v_TAXWARE_row where cost_center_code = in_COST_CENTER;
           
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	end TAXWARE_U_SP;

PROCEDURE TERMINAL_U_SP 
(
/******************************************************************************
	TERMINAL_U_SP

	This procedure is intended to update changed terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
******************************************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_terminal_row TERMINAL%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'DATE') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
              else
    
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE TERMINAL set row = v_terminal_row
        where cost_center_code = in_costctr
          and POLLING_STATUS_CODE = in_poll_stat
          and TERMINAL_NUMBER = in_term_no
          and EFFECTIVE_DATE = in_eff_date;
      commit;
    
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        

end TERMINAL_U_SP;

PROCEDURE TERRITORY_U_SP (
/*******************************************************************************
	TERRITORY_U_SP

	This procedure is intended to update changed TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
*******************************************************************************/

in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      


      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then

	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
		ELSE
			null;	      
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE territory set row = v_territory_row 
        where TERRITORY_SLS_MGR_CODE =  in_slsmgr       
          and COST_CENTER_CODE  =  in_territory;
         
        commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
        

end TERRITORY_U_SP;

PROCEDURE TERRITORY_ASSIGNMENT_U_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_U_SP

	This procedure is intended to update changed territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
******************************************************************************/
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)

 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_assignment_row territory_assignment%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
               else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
               end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	


      else
        null ;
      end if;

      end loop ;
    
    
      UPDATE TERRITORY_ASSIGNMENT set row = v_territory_assignment_row 
        where TERRITORY_SLS_MGR_CODE = in_slsmgr
          and COST_CENTER_CODE = in_costctr
          and GEMS_EMPLOYEE_ID = in_gems_id
          and EFFECTIVE_DATE   = in_eff_date;
        commit;
        
   dbms_output.put_line('row value is  ' || v_row_value); 
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        

end TERRITORY_ASSIGNMENT_U_SP;

PROCEDURE TERRITORY_SALES_MGR_U_SP (
/*****************************************************************************
	TERRITORY_SALES_MGR_U_SP

	This procedure is intended to update changed territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
******************************************************************************/

 in_slsmgr     IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_sales_mgr_row TERRITORY_SALES_MGR%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_SALES_MGR/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                     ,table_fields_rec.column_size); 
                else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name			
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id:= v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name := v_row_value;
				
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
        
      UPDATE TERRITORY_SALES_MGR set row = v_territory_sales_mgr_row where TERRITORY_SLS_MGR_CODE = in_slsmgr;
      commit;
   dbms_output.put_line('row value is  ' || v_row_value);    
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_table_name);
        

end TERRITORY_SALES_MGR_U_SP;
 
PROCEDURE TYPE_U_SP (
/*****************************************************************************
	TYPE_U_SP

	This procedure is intended to update changed TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
updated : 08/24/2012 tal CCN Project....
******************************************************************************/

 in_COSTCTR IN TYPE.COST_CENTER_CODE%TYPE
,in_TYPE IN TYPE.TYPE_CODE%TYPE
,in_EFF_DATE IN TYPE.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2--sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_TABLE_NAME
        order by column_id asc
      	;
--;
v_type_row TYPE%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TYPE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
             if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
                else
    
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name || '/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_VALUE); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_type_row.cost_center_code := v_row_value;
			when 'TYPE_CODE' then  v_type_row.type_code := v_row_value;
			when 'EFFECTIVE_DATE' then  v_type_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE' then  v_type_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE TYPE set row = v_type_row 
        where cost_center_code = in_costctr
          and type_code = in_TYPE
          and effective_date = in_EFF_DATE;
      commit;
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        

end TYPE_U_SP;
d110 1
a110 1
           CCN_UI_INTERFACE_APP_PKG.ADDRESS_USA_S_SP (  
d116 1
a116 1
           CCN_UI_INTERFACE_APP_PKG.ADDRESS_USA_S_SP (  
d122 1
a122 1
            CCN_UI_INTERFACE_APP_PKG.ADDRESS_CAN_S_SP (                
d128 1
a128 1
            CCN_UI_INTERFACE_APP_PKG.ADDRESS_MEX_S_SP (            
d133 1
a133 1
            CCN_UI_INTERFACE_APP_PKG.ADDRESS_OTHER_S_SP (           
d147 1
a147 1
        'CCN_UI_INTERFACE_APP_PKG ' || 'Country code must be found on "CODE_DETAIL TABLE ". '); 
d154 1
a154 1
        'CCN_UI_INTERFACE_APP_PKG '  || 'No errors found');
d210 1
a210 1
      CCN_UI_INTERFACE_APP_PKG.COST_CENTER_S_SP(
d234 1
a234 1
          CCN_UI_INTERFACE_APP_PKG.STORE_S_SP(
d238 1
a238 1
          CCN_UI_INTERFACE_APP_PKG.MARKETING_S_SP(
d243 1
a243 1
          CCN_UI_INTERFACE_APP_PKG.TAXWARE_S_SP(
d250 1
a250 1
          CCN_UI_INTERFACE_APP_PKG.ADMINISTRATION_S_SP(
d257 1
a257 1
          CCN_UI_INTERFACE_APP_PKG.REAL_ESTATE_S_SP(
d264 1
a264 1
          CCN_UI_INTERFACE_APP_PKG.TERRITORY_S_SP(
d272 1
a272 1
          CCN_UI_INTERFACE_APP_PKG.OTHER_S_SP(
d276 1
a276 1
          CCN_UI_INTERFACE_APP_PKG.MARKETING_S_SP(
d281 1
a281 1
          CCN_UI_INTERFACE_APP_PKG.TAXWARE_S_SP(
d294 1
a294 1
      CCN_UI_INTERFACE_APP_PKG.STATUS_S_SP(
d306 1
a306 1
      CCN_UI_INTERFACE_APP_PKG.TYPE_S_SP(
d318 1
a318 1
      CCN_UI_INTERFACE_APP_PKG.PHONE_S_SP(
d338 1
a338 1
--      CCN_UI_INTERFACE_APP_PKG.ADDRESS_UI_SP(
d355 1
a355 1
        'CCN_UI_INTERFACE_APP_PKG ' || 'Cost Center is not found - Would you like to Add? '
d401 1
a401 1
      v_break   :=    'Begin call to CCN_UI_INTERFACE_APP_PKG.POLLING_S_SP ';
d403 1
a403 1
      CCN_UI_INTERFACE_APP_PKG.POLLING_S_SP(
d408 1
a408 1
      v_break   :=    'Ended call to CCN_UI_INTERFACE_APP_PKG.POLLING_S_SP ';      
d412 1
a412 1
      v_break   :=    'Begin call to CCN_UI_INTERFACE_APP_PKG.BANK_CARD_S_SP ';
d414 1
a414 1
      CCN_UI_INTERFACE_APP_PKG.BANK_CARD_S_SP(
d420 1
a420 1
      v_break   :=    'Ended call to CCN_UI_INTERFACE_APP_PKG.BANK_CARD_S_SP ';
d424 1
a424 1
      v_break   :=    'Begin call to CCN_UI_INTERFACE_APP_PKG.TERMINAL_S_SP ';
d426 1
a426 1
      CCN_UI_INTERFACE_APP_PKG.TERMINAL_S_SP(
d432 1
a432 1
      v_break   :=    'Ended call to CCN_UI_INTERFACE_APP_PKG.TERMINAL_S_SP ';
@


1.12
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d6 1
a6 1
-- Updated: 09/05/2012 TAL
d8 1
a8 1
/*********************************************************** 
d13 1
a13 1
************************************************************/
d16 1
a16 1
/**********************************************************
d23 1
a23 1
**********************************************************/
d48 4
a51 4
	PROCEDURE ADDRESS_CAN_S_SP (in_COST_CENTER IN ADDRESS_CAN.COST_CENTER_CODE%TYPE
							,in_ADDRESS_TYPE IN ADDRESS_CAN.ADDRESS_TYPE%TYPE
							,out_ADDRESS_CAN_REF_CUR OUT REF_CURSOR)
/**********************************************************
d58 2
a59 1
**********************************************************/
d63 1
d70 6
a75 4
			  FROM ADDRESS_CAN AC
			  where cost_center_code = in_COST_CENTER
			  and address_type = NVL(in_ADDRESS_TYPE, AC.address_type) 
			  and expiration_date IS NULL;
d82 2
a83 2
             'COST_CENTER_CODE' || in_COST_CENTER ||
             'ADDRESS_TYPE' || in_ADDRESS_TYPE);
d88 4
a91 4
	PROCEDURE ADDRESS_MEX_S_SP (in_COST_CENTER IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
							,in_ADDRESS_TYPE IN ADDRESS_MEX.ADDRESS_TYPE%TYPE
							,out_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
/**********************************************************
d98 2
a99 1
**********************************************************/
d103 1
d111 5
a115 3
			  where cost_center_code = in_COST_CENTER
			  and address_type = NVL(in_ADDRESS_TYPE, AM.address_type) 
			  and expiration_date IS NULL;
d123 2
a124 2
             'COST_CENTER_CODE' || in_COST_CENTER ||
             'ADDRESS_TYPE' || in_ADDRESS_TYPE);
d129 4
a132 4
	PROCEDURE ADDRESS_OTHER_S_SP (in_COST_CENTER IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE
							,in_ADDRESS_TYPE IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE
							,out_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
/**********************************************************
d139 2
a140 1
**********************************************************/
d144 1
d152 5
a156 3
			  where cost_center_code = in_COST_CENTER
			  and address_type = NVL(in_ADDRESS_TYPE, AO.address_type) 
			  and expiration_date IS NULL;
d163 2
a164 2
             'COST_CENTER_CODE' || in_COST_CENTER ||
             'ADDRESS_TYPE' || in_ADDRESS_TYPE);
d169 4
a172 4
	PROCEDURE ADDRESS_USA_S_SP (in_COST_CENTER IN ADDRESS_USA.COST_CENTER_CODE%TYPE
							,in_ADDRESS_TYPE IN ADDRESS_USA.ADDRESS_TYPE%TYPE
							,out_ADDRESS_USA_REF_CUR OUT REF_CURSOR)
/**********************************************************
d179 2
a180 1
**********************************************************/
d184 1
d192 5
a196 3
			  where cost_center_code = in_COST_CENTER
			  and address_type = NVL(in_ADDRESS_TYPE, AU.address_type) 
			  and expiration_date IS NULL;
d203 2
a204 2
             'COST_CENTER_CODE' || in_COST_CENTER ||
             'ADDRESS_TYPE' || in_ADDRESS_TYPE);
d211 1
a211 1
/**********************************************************
d218 1
a218 1
**********************************************************/
d241 5
a245 6
  PROCEDURE BANK_CARD_S_SP (in_COST_CENTER IN BANK_CARD.COST_CENTER_CODE%TYPE
					,in_POLLING_STATUS_CODE IN BANK_CARD.POLLING_STATUS_CODE%TYPE
          ,in_MERCHANT_ID_CODE IN BANK_CARD.MERCHANT_ID%TYPE
          ,in_EFFECTIVE_DATE IN BANK_CARD.EFFECTIVE_DATE%TYPE
					, out_BANK_CARD_REF_CUR OUT REF_CURSOR)
/**********************************************************
d252 2
a253 1
**********************************************************/
d257 1
d264 7
a270 5
			  FROM BANK_CARD
			  where cost_center_code = in_COST_CENTER
			  and polling_status_code = in_POLLING_STATUS_CODE
        and merchant_id = in_MERCHANT_ID_CODE
        and effective_date = in_EFFECTIVE_DATE;
d277 4
a280 4
             'COST_CENTER_CODE' || in_COST_CENTER ||
             'POLLING_STATUS_CODE' || in_POLLING_STATUS_CODE ||
             'MERCHANT_ID_CODE' || in_MERCHANT_ID_CODE  ||
             'EFFECTIVE_DATE' || in_EFFECTIVE_DATE);
d288 1
a288 1
/**********************************************************
d295 1
a295 1
**********************************************************/
d324 1
a324 1
/**********************************************************
d331 1
a331 1
**********************************************************/
d361 1
a361 1
/**********************************************************
d368 1
a368 1
**********************************************************/
d396 1
a396 1
/**********************************************************
d403 1
a403 1
**********************************************************/
d418 1
a418 1
/**********************************************************
d425 1
a425 1
**********************************************************/
d451 1
a451 1
/**********************************************************
d458 1
a458 1
**********************************************************/
d491 1
a491 1
/**********************************************************
d498 1
a498 1
**********************************************************/
d534 1
a534 1
/**********************************************************
d541 1
a541 1
**********************************************************/
d566 4
a569 4
PROCEDURE MARKETING_S_SP (in_COST_CENTER IN MARKETING.COST_CENTER_CODE%TYPE
                        , in_MARKETING_TYPE  IN  MARKETING.MARKETING_TYPE%TYPE 
			, out_MARKETING_REF_CUR OUT REF_CURSOR)
/**********************************************************
d576 2
a577 1
**********************************************************/
d581 1
d587 7
a593 4
			  SELECT * 
			  FROM MARKETING
			  where cost_center_code = in_COST_CENTER
                           and  marketing_type   = in_MARKETING_TYPE;
d608 1
a608 1
/**********************************************************
d615 1
a615 1
**********************************************************/
d641 1
a641 1
/**********************************************************
d648 1
a648 1
**********************************************************/
d674 1
a674 1
/**********************************************************
d681 1
a681 1
**********************************************************/
d709 1
a709 1
/**********************************************************
d716 1
a716 1
**********************************************************/
d745 1
a745 1
/**********************************************************
d752 1
a752 1
**********************************************************/
d775 3
a777 3
PROCEDURE SALES_REP_S_SP (in_GEMS_EMPLOYEE_ID IN SALES_REP.GEMS_EMPLOYEE_ID%TYPE
							,out_SALES_REP_REF_CUR OUT REF_CURSOR)
/**********************************************************
d784 2
a785 1
**********************************************************/
d789 1
d797 4
a800 1
			  where gems_employee_id = in_GEMS_EMPLOYEE_ID;
d812 4
a815 5
PROCEDURE   STATUS_S_SP  (in_cost_center  in  status.cost_center_code%type
                     , in_status_code  in  status.status_code%type
                     , in_effective_date  in  status.effective_date%type
							, out_STATUS_REF_CUR OUT REF_CURSOR)
/**********************************************************
d822 2
a823 1
**********************************************************/
d827 1
d834 6
a839 4
			  FROM STATUS
			  where cost_center_code = in_cost_center
                           and  status_code      = in_STATUS_CODE
                           and  effective_date   = in_EFFECTIVE_DATE;
d848 1
a848 2
		'STATUS_CODE'      || in_STATUS_CODE  ||
		'EFFECTIVE_DATE'   || in_EFFECTIVE_DATE);
d855 1
a855 1
/**********************************************************
d862 1
a862 1
**********************************************************/
d887 1
a887 1
/**********************************************************
d894 1
a894 1
**********************************************************/
d917 5
a921 9
PROCEDURE TERMINAL_S_SP ( in_TERR_CC IN TERMINAL.COST_CENTER_CODE%TYPE
  			 ,in_POLLING_STATUS_CD IN TERMINAL.POLLING_STATUS_CODE%TYPE
 			 ,in_TERMINAL IN TERMINAL.TERMINAL_NUMBER%TYPE
  			 ,in_EFF_DATE IN TERMINAL.EFFECTIVE_DATE%TYPE      
			 ,OUT_TERMINAL_REF_CUR OUT REF_CURSOR)

      
--
/**********************************
d928 2
a929 1
**********************************************************/
d932 3
a934 3
  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    

d942 6
a947 4
			  where cost_center_code = in_TERR_CC
			  and POLLING_STATUS_CODE = in_POLLING_STATUS_CD 
			  and TERMINAL_NUMBER = in_TERMINAL
			  and EFFECTIVE_DATE = in_EFF_DATE;
d953 5
a957 5
	Errpkg.raise_err(v_code, 'TERMINAL_S_SP KEY IS' ||
             'COST_CENTER_CODE' || in_TERR_CC ||
             'POLLING STATUS CODE' || in_POLLING_STATUS_CD ||
	     'TERMINAL NUMBER' || in_TERMINAL ||
             'EFFECTIVE DATE' || in_EFF_DATE);
d960 1
a960 1
	END;-- TERMINAL_S_SP;
d966 1
a966 1
/**********************************************************
d973 1
a973 1
**********************************************************/
d1001 5
a1005 6
PROCEDURE TERRITORY_ASSIGNMENT_S_SP ( in_TERR_SLS_MGR_CD  TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,in_TERR_CC TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE                                     
                                     ,in_GEMS_EMP_ID  TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
                                     ,in_EFF_DATE  TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
                                     ,out_TERR_ASSIGN_REF_CUR  OUT REF_CURSOR )
/**********************************
d1012 2
a1013 1
**********************************************************/
d1017 2
a1018 1
  V_ERRM    VARCHAR2(500);    
d1027 1
a1027 1
			  where cost_center_code = in_TERR_cc
d1030 3
a1032 1
			  and effective_date = in_eff_date;
d1040 2
a1041 4
             'COST CENTER CODE' || in_TERR_CC ||             
	     'GEMS EMPLOYEE ID' || in_gems_EMP_ID ||
             'EFFECTIVE DATE' || in_EFF_DATE);

d1043 1
a1043 1
	END;-- TERRITORY_ASSIGNMENT_S_SP;
d1046 3
a1048 5
PROCEDURE TERRITORY_SALES_MGR_S_SP ( in_TERR_SLS_MGR_CD IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
      				           				    ,out_TERR_SLS_MGR_REF_CUR OUT REF_CURSOR)
    
--
/**********************************
d1055 2
a1056 1
**********************************************************/
d1060 2
a1061 2
  V_ERRM    VARCHAR2(500);    

d1069 4
a1072 1
			  where TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD;
d1082 1
a1082 6
	END;-- TERRITORY_SALES_MGR_S_SP;

PROCEDURE TYPE_S_SP ( in_terr_cc IN Type.COST_CENTER_CODE%TYPE 
   		     ,in_type_code IN Type.type_code%TYPE
  		     ,in_eff_date IN Type.effective_date%TYPE  
		     ,OUT_TYPE_REF_CUR OUT REF_CURSOR)
d1084 5
a1088 3
      
--
/**********************************
d1095 2
a1096 1
**********************************************************/
d1101 1
a1101 1

d1107 7
a1113 5
			  SELECT * 
			  FROM TYPE
			  where cost_center_code = in_terr_cc
			  and type_CODE = in_type_code
			  and effective_date = in_eff_date;
d1120 2
a1121 3
             'COST_CENTER_CODE' || in_terr_cc ||
             'TYPE CODE' || in_TYPE_CODE  ||
	     'EFFECTIVE DATE' || in_EFF_DATE);    
d1125 3
d1129 1
a1129 1
/***************************************************************************
d1143 1
a1143 1
*****************************************************************************/
d1235 1
a1235 1
 /**************************************************************************
d1249 1
a1249 1
**************************************************************************/
d1341 1
a1341 1
/****************************************************************************
d1355 1
a1355 1
*****************************************************************************/
d1449 1
a1449 1
/*****************************************************************************
d1462 1
a1462 1
*****************************************************************************/
d1578 1
a1578 1
/*****************************************************************************
d1590 1
a1590 1
******************************************************************************/
d1675 1
a1675 1
/*****************************************************************************
d1690 1
a1690 1
******************************************************************************/
d1772 2
a1773 2
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_CHANGE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_UI := v_row_value;
d1804 1
a1804 1
/***************************************************************
d1817 1
a1817 1
***************************************************************/
d1913 1
a1913 1
/***************************************************************
d1927 1
a1927 1
***************************************************************/
d2021 1
a2021 1
/***************************************************************
d2034 1
a2034 1
***************************************************************/
d2128 1
a2128 1
/****************************************************************************
d2141 1
a2141 1
******************************************************************************/
d2233 1
a2233 1
/***************************************************************
d2245 1
a2245 1
***************************************************************/
d2353 1
a2353 1
/***************************************************************
d2366 1
a2366 1
***************************************************************/
d2464 1
a2464 1
/***************************************************************
d2477 1
a2477 1
***************************************************************/
d2567 1
a2567 1
/***************************************************************
d2581 1
a2581 1
***************************************************************/
d2674 1
a2674 1
/*****************************************************************************
d2686 1
a2686 1
******************************************************************************/
d2777 1
a2777 1
/***************************************************************
d2791 1
a2791 1
***************************************************************/
d3285 3
a3287 3
			when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
d3941 1
a3941 1
/****************************************************************************
d3955 1
a3955 1
***************************************************************************/
d4050 1
a4050 1
/****************************************************************************
d4064 1
a4064 1
*****************************************************************************/
d4159 1
a4159 1
/*****************************************************************************
d4173 1
a4173 1
*****************************************************************************/
d4270 1
a4270 1
/****************************************************************************
d4284 1
a4284 1
****************************************************************************/
d4386 1
a4386 1
/*****************************************************************************
d4398 1
a4398 1
*****************************************************************************/
d4483 1
a4483 1
/*****************************************************************************
d4498 1
a4498 1
*****************************************************************************/
d4580 2
a4581 2
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_CHANGE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_UI := v_row_value;
d4615 1
a4615 1
/***************************************************************
d4628 1
a4628 1
***************************************************************/
d4723 1
a4723 1
/***************************************************************
d4737 1
a4737 1
***************************************************************/
d4832 1
a4832 1
/***************************************************************
d4845 1
a4845 1
***************************************************************/
d5077 1
a5077 1
/***************************************************************
d5089 1
a5089 1
***************************************************************/
d5197 1
a5197 1
/***************************************************************
d5210 1
a5210 1
***************************************************************/
d5307 1
a5307 1
/***************************************************************
d5320 1
a5320 1
***************************************************************/
d5410 1
a5410 1
/***************************************************************
d5422 1
a5422 1
***************************************************************/
d5515 1
a5515 1
/***************************************************************
d5528 1
a5528 1
***************************************************************/
d5625 1
a5625 1
/***************************************************************
d5639 1
a5639 1
***************************************************************/
d5849 1
a5849 1
/****************************************************************************
d5953 1
a5953 1
/****************************************************************************
d5965 1
a5965 1
*****************************************************************************/
d6059 1
a6059 1
/*****************************************************************************
d6072 1
a6072 1
*****************************************************************************/
d6140 3
a6142 3
			when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
d6171 1
a6171 1
/*****************************************************************************
d6183 1
a6183 1
*****************************************************************************/
d6278 1
a6278 1
/****************************************************************************
d6290 1
a6290 1
****************************************************************************/
d6384 1
a6384 1
/******************************************************************************
d6807 435
@


1.11
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d4 1
a4 1

d6 1
a49 1
							,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
d68 1
a68 1
			  FROM ADDRESS_CAN
d70 2
a71 2
			  and address_type = in_ADDRESS_TYPE
			  and effective_date = in_EFFECTIVE_DATE;
d79 1
a79 2
             'ADDRESS_TYPE' || in_ADDRESS_TYPE ||
             'EFFECTIVE_DATE' || in_EFFECTIVE_DATE);
a85 1
							,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
d104 1
a104 1
			  FROM ADDRESS_MEX
d106 3
a108 2
			  and address_type = in_ADDRESS_TYPE
			  and effective_date = in_EFFECTIVE_DATE;
d116 1
a116 2
             'ADDRESS_TYPE' || in_ADDRESS_TYPE ||
             'EFFECTIVE_DATE' || in_EFFECTIVE_DATE);
a122 1
							,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
d141 1
a141 1
			  FROM ADDRESS_OTHER
d143 2
a144 2
			  and address_type = in_ADDRESS_TYPE
			  and effective_date = in_EFFECTIVE_DATE;
d152 1
a152 2
             'ADDRESS_TYPE' || in_ADDRESS_TYPE ||
             'EFFECTIVE_DATE' || in_EFFECTIVE_DATE);
a158 1
							,in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
d177 1
a177 1
			  FROM ADDRESS_USA
d179 2
a180 2
			  and address_type = in_ADDRESS_TYPE
			  and effective_date = in_EFFECTIVE_DATE;
d188 1
a188 2
             'ADDRESS_TYPE' || in_ADDRESS_TYPE ||
             'EFFECTIVE_DATE' || in_EFFECTIVE_DATE);
@


1.10
log
@Added Polling_dwld_rsn_hist SPs
@
text
@d4 3
a6 1
	
d860 32
a1773 101
PROCEDURE COST_CENTER_I_SP (
/****************************************************************************
	COST_CENTER_I_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_cost_center_row cost_center%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'TAX_JURISDICTION' then  v_cost_center_row.TAX_JURISDICTION := v_row_value;
			when 'TAX_COMPANY_CODE' then  v_cost_center_row.TAX_COMPANY_CODE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into cost_center values v_cost_center_row;
      
      commit;

end COST_CENTER_I_SP;

d2098 105
d2447 1
a2510 2
			when 'LEASE_OWN_CODE'                   then  v_other_row.lease_own_code                := v_row_value;
			when 'MISSION_TYPE_CODE'                then  v_other_row.mission_type_code             := v_row_value;
d2876 1
a2940 1
			when 'LEASE_OWN_CODE'         then  v_real_estate_row.LEASE_OWN_CODE       := v_row_value;
d3187 1
a3256 1
			when 'DUNS_NUMBER'                then  v_STORE_row.DUNS_NUMBER              := v_row_value;
a3258 4
			when 'PRI_LOGO_GROUP_IND'         then  v_STORE_row.PRI_LOGO_GROUP_IND       := v_row_value;
			when 'SEC_LOGO_GROUP_IND'         then  v_STORE_row.SEC_LOGO_GROUP_IND       := v_row_value;
			when 'LEASE_OWN_CODE'             then  v_STORE_row.LEASE_OWN_CODE           := v_row_value;
			when 'MISSION_TYPE_CODE'          then  v_STORE_row.MISSION_TYPE_CODE        := v_row_value;
d3286 1
a3286 2
PROCEDURE TERMINAL_I_SP 
(
d3288 1
a3288 1
	TERMINAL_I_SP
d3290 1
a3290 1
	This procedure is intended to insert new terminal records
d3292 1
a3292 1
	TERMINAL - Cost Center that changed
d3298 1
a3298 1
created : 04/24/2012 BLR CCN Project....
d3300 6
a3305 7
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d3308 5
a3312 1
 cursor table_fields_cur is
d3321 5
a3325 8
v_terminal_row TERMINAL%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
/*
d3328 1
a3328 1
-------------BUSINESS RULES HERE
d3330 1
a3330 1
BEGIN
d3337 1
a3337 1
      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
a3338 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d3340 5
a3344 3
               if (table_fields_rec.data_type <> 'date') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d3346 6
a3351 1
              else
d3353 15
a3367 16
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
d3379 1
a3379 1
      insert into TERMINAL values v_terminal_row;
d3383 1
a3383 1
       EXCEPTION
d3387 2
a3388 2
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d3390 1
d3392 4
a3395 1
end TERMINAL_I_SP;
d3397 1
a3397 3
PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_I_SP
d3399 1
a3399 3
	This procedure is intended to insert new territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
d3405 1
a3405 1
created : 05/04/2012 BLR CCN Project....
d3407 4
a3410 4
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
d3425 1
a3425 1
v_territory_assignment_row territory_assignment%rowtype;
a3431 2

--
d3444 1
a3444 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
d3449 1
a3449 1
               if (table_fields_rec.data_type <> 'DATE') then
d3451 1
a3451 1
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d3453 1
a3453 1
               else
d3455 1
a3455 1
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
d3457 1
a3457 1
               end if;
d3462 12
a3473 10
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	
d3482 1
a3482 1
      insert into TERRITORY_ASSIGNMENT values v_territory_assignment_row;
d3490 1
a3490 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
d3494 1
a3494 1
end TERRITORY_ASSIGNMENT_I_SP;
d3599 103
d4923 1
a4984 2
			when 'TAX_JURISDICTION' then  v_cost_center_row.TAX_JURISDICTION := v_row_value;
			when 'TAX_COMPANY_CODE' then  v_cost_center_row.TAX_COMPANY_CODE := v_row_value;
d4995 5
d5290 1
a5353 2
			when 'LEASE_OWN_CODE'                   then  v_other_row.lease_own_code                := v_row_value;
			when 'MISSION_TYPE_CODE'                then  v_other_row.mission_type_code             := v_row_value;
d5728 1
a5792 1
			when 'LEASE_OWN_CODE'         then  v_real_estate_row.LEASE_OWN_CODE       := v_row_value;
d6042 1
a6111 1
			when 'DUNS_NUMBER'                then  v_STORE_row.DUNS_NUMBER              := v_row_value;
a6113 4
			when 'PRI_LOGO_GROUP_IND'         then  v_STORE_row.PRI_LOGO_GROUP_IND       := v_row_value;
			when 'SEC_LOGO_GROUP_IND'         then  v_STORE_row.SEC_LOGO_GROUP_IND       := v_row_value;
			when 'LEASE_OWN_CODE'             then  v_STORE_row.LEASE_OWN_CODE           := v_row_value;
			when 'MISSION_TYPE_CODE'          then  v_STORE_row.MISSION_TYPE_CODE        := v_row_value;
d6135 1
a6135 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
d6141 3
a6143 4
PROCEDURE TERMINAL_U_SP 
(
/****************************************************************************
	TERMINAL_U_SP
d6145 1
a6145 1
	This procedure is intended to update changed terminal records
d6147 1
a6147 1
	TERMINAL - Cost Center that changed
d6153 116
a6268 9
created : 07/11/2012 BLR CCN Project....
****************************************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d6354 106
d6564 1
a6564 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
d6668 1
a6668 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
a6672 106

PROCEDURE TERRITORY_U_SP (
/******************************************************************************
	TERRITORY_U_SP

	This procedure is intended to update changed TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
*******************************************************************************/

in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--
/*

*/
-------------BUSINESS RULES HERE

BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      


      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then

	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
		ELSE
			null;	      
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE territory set row = v_territory_row 
        where TERRITORY_SLS_MGR_CODE =  in_slsmgr       
          and COST_CENTER_CODE  =  in_territory;
         
        commit;
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
        

end TERRITORY_U_SP;
d6687 1
d6773 1
a6773 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
@


1.9
log
@Add Close_CCNTR_SP and Reopen_CCNTR_SP to COST_CENTER_U_SP procedure.
@
text
@d685 15
d701 21
d2709 116
d5342 230
@


1.8
log
@Replaced lost I_SP and U_SP
@
text
@d4715 10
d4726 11
@


1.7
log
@*** empty log message ***
@
text
@d1 1
d83 4
a86 4
	PROCEDURE ADDRESS_OTHER_S_SP (in_COST_CENTER IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE
							,in_ADDRESS_TYPE IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE
							,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
							,out_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
d88 1
a88 1
	ADDRESS_OTHER_S_SP
d91 1
a91 1
	from the ADDRESS_OTHER table.  
d101 1
a101 1
		  OPEN out_ADDRESS_OTHER_REF_CUR FOR
d104 1
a104 1
			  FROM ADDRESS_OTHER
d113 1
a113 1
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP' ||
d118 1
a118 1
	END ADDRESS_OTHER_S_SP;
d121 4
a124 4
	PROCEDURE ADDRESS_MEX_S_SP (in_COST_CENTER IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
							,in_ADDRESS_TYPE IN ADDRESS_MEX.ADDRESS_TYPE%TYPE
							,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
							,out_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
d126 1
a126 1
	ADDRESS_MEX_S_SP
d129 1
a129 1
	from the ADDRESS_MEX table.  
d139 1
a139 1
		  OPEN out_ADDRESS_MEX_REF_CUR FOR
d142 1
a142 1
			  FROM ADDRESS_MEX
d151 1
a151 1
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP' ||
d156 1
a156 1
	END ADDRESS_MEX_S_SP;
d226 1
a226 1
	END ADMINISTRATION_S_SP;
d228 2
a229 2

	PROCEDURE BANK_CARD_S_SP (in_COST_CENTER IN BANK_CARD.COST_CENTER_CODE%TYPE
d268 35
d1029 3
a1031 3
PROCEDURE COST_CENTER_I_SP (
/****************************************************************************
	COST_CENTER_I_SP
d1033 1
a1033 1
	This procedure is intended to insert new cost center records
d1035 3
a1037 1
	CostCenter - Cost Center that changed
d1043 5
a1047 3
created : 02/21/2012 kdp CCN Project....
******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
d1053 3
d1066 1
a1066 1
v_cost_center_row cost_center%rowtype;
d1073 1
a1073 1
-------------
d1082 1
a1082 1
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
a1086 3
--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

d1095 2
d1099 12
a1110 20
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'TAX_JURISDICTION' then  v_cost_center_row.TAX_JURISDICTION := v_row_value;
			when 'TAX_COMPANY_CODE' then  v_cost_center_row.TAX_COMPANY_CODE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
d1122 2
a1123 97
      insert into cost_center values v_cost_center_row;
      
      commit;

end COST_CENTER_I_SP;
               
PROCEDURE POLLING_I_SP (
/*****************************************************************************
	POLLING_I_SP

	This procedure is intended to insert new POLLING records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  POLLING.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN  POLLING.POLLING_STATUS_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_POLLING_row POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

	      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
	
		    if (table_fields_rec.data_type <> 'DATE') then
		
		        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
		
		    else
		       
		         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                                              ,8); 
		    end if;
		    
		    --dbms_output.put_line('row value is ' || v_row_value);
		 
		/***  below is a list of all the fields in the table  ***/
		/***  not used		when 'EFFECTIVE_DATE'		  then  v_POLLING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
		/***  not used		when 'EXPIRATION_DATE'		then  v_POLLING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
		
			  	case table_fields_rec.column_name
					when 'COST_CENTER_CODE'		      then  v_polling_row.cost_center_code		     := v_row_value;
					when 'POLLING_STATUS_CODE'	      then  v_polling_row.polling_status_code		 := v_row_value;
					--when 'POLLING_PHONE_PFX'	      then  v_polling_row.polling_phone_pfx		     := v_row_value;
		      		--when 'POLLING_PHONE_NUMBER'	      then  v_polling_row.polling_phone_number	     := v_row_value;
		     		when 'MULTICAST_IND'	          then  v_polling_row.multicast_ind		         := v_row_value;
					when 'TIME_ZONE'		          then  v_polling_row.time_zone			         := v_row_value;
					when 'POLLING_IND'            	  then  v_polling_row.polling_ind			     := v_row_value;
					--when 'POLLING_PRIORITY'		      then  v_polling_row.polling_priority		     := v_row_value;
					--when 'POLLING_SCHEDULE_CODE'	  then  v_polling_row.polling_schedule_code	     := v_row_value;
					when 'NEXT_DOWNLOAD_BLOCK_CODE'   then  v_POLLING_row.NEXT_DOWNLOAD_BLOCK_COUNT	 := v_row_value;
				ELSE
					null;		
				END CASE;	   	
		
	     end if;

    end loop ;
      
      insert into POLLING values v_POLLING_row;
      
d1130 1
a1130 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
d1133 1
a1133 2
	
end POLLING_I_SP;
d1135 3
a1137 3
procedure ADDRESS_CAN_I_SP ( 
/***************************************************************************
	ADDRESS_CAN_I_SP
d1139 1
a1139 1
	This procedure is intended to Insert new Canadian address records
d1149 5
a1153 5
created : 04/27/2012 mdh CCN Project....
*****************************************************************************/
in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
d1156 1
a1156 1
,in_Row_data   IN VARCHAR2--sys.xmltype
d1172 1
a1172 1
v_address_can_row ADDRESS_CAN%rowtype;
d1206 1
a1206 107
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
   INSERT into ADDRESS_CAN values v_address_can_row ;
  
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_CAN_I_SP;

procedure ADDRESS_MEX_I_SP ( 
 /**************************************************************************
	ADDRESS_MEX_I_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
**************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row ADDRESS_MEX%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
a1702 4
 
PROCEDURE REAL_ESTATE_I_SP (
/******************************************************************************
	REAL_ESTATE_I_SP
d1704 5
a1708 1
	This procedure is intended to insert new REAL_ESTATE records
d1716 1
a1716 1
created : 05/03/2012 tal CCN Project....
d1718 4
a1721 6
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_cost_center          IN  REAL_ESTATE.COST_CENTER_CODE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
a1722 1

a1723 3
 v_code number;
 v_errm varchar2(500);

d1734 3
a1736 3
v_real_estate_row REAL_ESTATE%rowtype;
v_row_value     varchar2(1000);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d1741 1
a1741 1
-------------  Business Rules go here 
d1750 1
a1750 1
      --dbms_output.put_line(in_Row_data.extract('/REAL_ESTATE/COST_CENTER_CODE/text()').getStringVal());
d1755 2
a1756 1
         if (table_fields_rec.data_type <> 'DATE') then
d1758 1
a1758 2
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
d1760 6
a1765 7
         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
a1766 3
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_REAL_ESTATE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_REAL_ESTATE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
d1768 20
a1787 4
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
			when 'LEASE_OWN_CODE'         then  v_real_estate_row.LEASE_OWN_CODE       := v_row_value;
d1799 1
a1799 1
      insert into REAL_ESTATE values v_real_estate_row;
a1801 10
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
        	
end REAL_ESTATE_I_SP;
d1803 5
a1807 3
PROCEDURE SALES_REP_I_SP (
/*****************************************************************************
	SALES_REP_I_SP
d1809 1
a1809 1
	This procedure is intended to insert new SALES_REP records
d1811 2
a1812 1
	CostCenter - Cost Center that changed
d1818 2
a1819 2
created : 05/03/2012 tal CCN Project....
******************************************************************************/
d1821 2
d1824 3
a1826 4
in_gems_emp_id          IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d1842 1
a1842 1
v_sales_rep_row SALES_REP%rowtype;
d1844 1
a1844 1
v_row_data      sys.xmltype := xmltype(in_Row_data);
d1858 1
a1858 1
      --dbms_output.put_line(in_Row_data.extract('/SALES_REP/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
d1861 1
a1861 1
      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1863 1
a1863 1
         if (table_fields_rec.data_type <> 'DATE') then
d1865 1
a1865 1
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d1868 1
a1868 1
        else
d1870 1
a1870 1
           v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d1872 1
a1872 1
        end if;
d1879 11
a1889 9
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
		ELSE
d1900 1
a1900 1
      insert into SALES_REP values v_sales_rep_row;
d1908 2
a1909 2
      errpkg.raise_err(v_code, 'SALES_REP_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
d1912 1
a1912 1
end SALES_REP_I_SP;
d1914 3
a1916 3
PROCEDURE STATUS_I_SP (
/*****************************************************************************
	STATUS_I_SP
d1918 1
a1918 1
	This procedure is intended to insert new STATUS records
d1920 3
a1922 1
	CostCenter - Cost Center that changed
d1928 2
a1929 2
created : 05/03/2012 tal CCN Project....
*****************************************************************************/
d1931 3
d1935 3
a1937 6
in_costctr              IN  STATUS.COST_CENTER_CODE%TYPE,
in_status               IN  STATUS.STATUS_CODE%TYPE,
in_eff_date             IN  STATUS.EFFECTIVE_DATE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d1953 1
a1953 1
v_status_row STATUS%rowtype;
d1955 1
a1955 1
v_row_data      sys.xmltype := xmltype(in_Row_data);
d1969 1
a1969 1
      --dbms_output.put_line(in_Row_data.extract('/STATUS/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
d1972 1
a1972 1
      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1974 1
a1974 1
         if (table_fields_rec.data_type <> 'DATE') then
d1976 1
a1976 1
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d1979 1
a1979 1
         else
d1981 3
a1983 2
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10); 
         end if;
d1989 9
a1997 7
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');

		ELSE
d2008 1
a2008 1
      insert into STATUS values v_status_row;
d2016 2
a2017 2
      errpkg.raise_err(v_code, 'STATUS_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d2020 1
a2020 1
end STATUS_I_SP;
d2022 3
a2024 3
PROCEDURE STORE_I_SP (
/*****************************************************************************
	STORE_I_SP
d2026 1
a2026 1
	This procedure is intended to insert new STORE records
d2028 2
a2029 1
	CostCenter - Cost Center that changed
d2035 2
a2036 2
created : 05/03/2012 tal CCN Project....
******************************************************************************/
d2038 2
a2040 1
in_COST_CENTER          IN  STORE.COST_CENTER_CODE%TYPE,
d2043 1
a2043 1
in_Row_data             IN  varchar2 --sys.xmltype
d2059 1
a2059 1
v_STORE_row STORE%rowtype;
d2075 1
a2075 1
      --dbms_output.put_line(in_Row_data.extract('/STORE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
d2080 1
a2080 1
         if (table_fields_rec.data_type <> 'DATE') then
d2082 1
a2082 1
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d2085 1
a2085 1
         else
d2087 3
a2089 3
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
d2096 9
a2104 20
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;

			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;

			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			when 'DUNS_NUMBER'                then  v_STORE_row.DUNS_NUMBER              := v_row_value;
			when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
			when 'PRI_LOGO_GROUP_IND'         then  v_STORE_row.PRI_LOGO_GROUP_IND       := v_row_value;
			when 'SEC_LOGO_GROUP_IND'         then  v_STORE_row.SEC_LOGO_GROUP_IND       := v_row_value;
			when 'LEASE_OWN_CODE'             then  v_STORE_row.LEASE_OWN_CODE           := v_row_value;
			when 'MISSION_TYPE_CODE'          then  v_STORE_row.MISSION_TYPE_CODE        := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;

		ELSE
d2115 1
a2115 1
      insert into STORE values v_STORE_row;
d2127 1
a2127 1
end STORE_I_SP;
d2129 3
a2131 4
PROCEDURE TERMINAL_I_SP 
(
/*****************************************************************************
	TERMINAL_I_SP
d2133 1
a2133 1
	This procedure is intended to insert new terminal records
d2135 1
a2135 1
	TERMINAL - Cost Center that changed
d2141 8
a2148 9
created : 04/24/2012 BLR CCN Project....
******************************************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2151 5
a2155 1
 cursor table_fields_cur is
d2164 4
a2167 7
v_terminal_row TERMINAL%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
d2171 1
a2171 1
-------------BUSINESS RULES HERE
d2173 1
a2173 1
BEGIN
d2180 1
a2180 1
      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
a2181 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2183 5
a2187 3
               if (table_fields_rec.data_type <> 'date') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d2189 6
a2194 1
              else
d2196 29
a2224 17
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
		ELSE
d2235 1
a2235 1
      insert into TERMINAL values v_terminal_row;
d2239 1
a2239 1
       EXCEPTION
d2243 2
a2244 2
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d2246 2
d2249 3
a2251 5
end TERMINAL_I_SP;

PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_I_SP
d2253 1
a2253 1
	This procedure is intended to insert new territory_assignment records
d2255 2
a2256 1
	TERRITORY_ASSIGNMENT - Cost Center that changed
d2262 9
a2270 9
created : 05/04/2012 BLR CCN Project....
******************************************************************************/
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2273 5
a2277 1
 cursor table_fields_cur is
d2286 3
a2288 8
v_territory_assignment_row territory_assignment%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d2293 1
a2293 1
-------------BUSINESS RULES HERE
d2295 1
a2295 1
BEGIN
d2302 1
a2302 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
a2303 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2305 5
a2309 3
               if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d2311 6
a2316 1
               else
d2318 20
a2337 17
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
               end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	
d2346 1
a2346 1
      insert into TERRITORY_ASSIGNMENT values v_territory_assignment_row;
d2350 1
a2350 1
       EXCEPTION
d2355 1
a2355 1
             'IN_TABLE_NAME' || in_table_name);
d2357 2
d2360 3
a2362 1
end TERRITORY_ASSIGNMENT_I_SP;
d2364 1
a2364 3
PROCEDURE TERRITORY_I_SP (
/******************************************************************************
	TERRITORY_I_SP
d2366 1
a2366 3
	This procedure is intended to insert new TERRITORY records

	TERRITORY - Cost Center that changed
d2372 8
a2379 7
created : 04/24/2012 BLR CCN Project....
*******************************************************************************/
in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2382 5
a2386 1
 cursor table_fields_cur is
d2395 3
a2397 8
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d2402 1
a2402 1
-------------BUSINESS RULES HERE
d2404 1
a2404 1
BEGIN
d2411 1
a2411 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
a2412 1
      
d2414 6
d2421 11
a2431 3
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then
d2433 5
a2437 9
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
a2438 8
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
d2440 1
a2440 1
			null;	      
d2450 1
a2450 1
      insert into territory values v_territory_row;
d2454 1
a2454 1
       EXCEPTION
d2458 2
a2459 2
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
d2461 2
d2464 3
a2466 1
end TERRITORY_I_SP;
d2468 1
a2468 3
PROCEDURE TERRITORY_SALES_MGR_I_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_I_SP
d2470 3
a2472 3
	This procedure is intended to insert new territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
d2478 9
a2486 6
created : 04/24/2012 BLR CCN Project....
*******************************************************************************/
 in_slsmgr     IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2489 5
a2493 1
 cursor table_fields_cur is
d2502 3
a2504 8
v_territory_sales_mgr_row TERRITORY_SALES_MGR%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d2509 1
a2509 1
-------------BUSINESS RULES HERE
d2511 1
a2511 1
BEGIN
d2518 1
a2518 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_SALES_MGR/COST_CENTER_CODE/text()').getStringVal());
a2519 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2521 12
a2532 5
                if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                     ,table_fields_rec.column_size); 
                else
d2534 12
a2545 18
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name			
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id:= v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name := v_row_value;
				
			
d2557 1
a2557 1
      insert into TERRITORY_SALES_MGR values v_territory_sales_mgr_row;
d2561 1
a2561 1
       EXCEPTION
d2566 1
a2566 1
             'in_TABLE_NAME' || in_table_name);
d2568 6
d2575 1
a2575 1
end TERRITORY_SALES_MGR_I_SP;
d2577 1
a2577 7
PROCEDURE TYPE_I_SP (
/******************************************************************************
	TYPE_I_SP

	This procedure is intended to insert new TYPE records

	TYPE - Cost Center that changed
d2583 8
a2590 8
created : 04/24/2012 BLR CCN Project....
*****************************************************************************/
 in_COSTCTR IN TYPE.COST_CENTER_CODE%TYPE
,in_TYPE IN TYPE.TYPE_CODE%TYPE
,in_EFF_DATE IN TYPE.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2--sys.xmltype
d2593 5
a2597 1
 cursor table_fields_cur is
d2602 1
a2602 1
      	WHERE TABLE_NAME = in_TABLE_NAME
d2606 3
a2608 8
v_type_row TYPE%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d2613 1
a2613 1
-------------BUSINESS RULES HERE
d2615 1
a2615 1
BEGIN
d2622 105
a2726 1
      --dbms_output.put_line(in_Row_data.extract('/TYPE/COST_CENTER_CODE/text()').getStringVal());
d2728 43
d2772 62
a2833 1
             if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2835 1
a2835 3
                if (table_fields_rec.data_type <> 'DATE') then
                
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d2837 6
a2842 1
                else
d2844 13
a2856 13
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name || '/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_VALUE); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_type_row.cost_center_code := v_row_value;
			when 'TYPE_CODE' then  v_type_row.type_code := v_row_value;
			when 'EFFECTIVE_DATE' then  v_type_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE' then  v_type_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			
			
d2868 1
a2868 1
      insert into TYPE values v_type_row;
d2872 1
a2872 1
       EXCEPTION
d2876 2
a2877 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2879 8
d2888 9
a2896 1
end TYPE_I_SP;
d2898 1227
a4124 3
/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/
d4126 37
a4162 1
PROCEDURE COST_CENTER_U_SP (
d4164 237
a4400 1
	COST_CENTER_U_SP
d4402 10
a4411 4
	This procedure is intended to UPDATE cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
d4416 10
a4425 6
created : 02/21/2012 kdp CCN Project....
*****************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
d4428 3
d4440 4
a4443 6
--;                                   
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%rowtype;
 v_row_value 	varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
d4448 1
a4448 1
-------------
d4457 1
a4457 1
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
d4462 1
a4462 2
--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 
d4464 2
a4465 1
		if (table_fields_rec.data_type <> 'DATE') then
d4467 7
a4473 6
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
d4475 1
d4477 9
a4485 21
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'TAX_JURISDICTION' then  v_cost_center_row.TAX_JURISDICTION := v_row_value;
			when 'TAX_COMPANY_CODE' then  v_cost_center_row.TAX_COMPANY_CODE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
		ELSE
d4496 3
a4498 3

      UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center;
      
d4501 1
a4501 1

d4506 4
a4509 2
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
d4511 3
a4513 1
end COST_CENTER_U_SP;
d4515 1
a4515 5
procedure ADDRESS_CAN_U_SP ( 
/****************************************************************************
	ADDRESS_CAN_U_SP

	This procedure is intended to update Canadian address records
d4517 2
a4518 3
	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
d4524 9
a4532 8
created : 07/19/2012 mdh CCN Project....
***************************************************************************/
in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
d4548 3
a4550 3
v_address_can_row ADDRESS_CAN%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d4564 1
a4564 1
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
d4569 4
a4572 1
		if (table_fields_rec.data_type <> 'DATE') then
d4574 7
a4580 8
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
d4582 1
d4584 10
a4593 13
	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
		ELSE
d4604 2
a4605 4
   UPDATE ADDRESS_CAN set row = v_address_can_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
d4613 1
a4613 1
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP' ||
d4616 6
a4621 1
end ADDRESS_CAN_U_SP;
d4623 1
a4623 3
procedure ADDRESS_MEX_U_SP ( 
/****************************************************************************
	ADDRESS_MEX_U_SP
d4625 1
a4625 5
	This procedure is intended to Update Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
d4631 1
a4631 1
created : 07/19/2012 mdh CCN Project....
d4633 1
a4633 3
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
d4636 1
a4636 1
,in_Row_data   IN varchar2 --sys.xmltype
a4638 3
 v_code number;
 v_errm varchar2(500);

d4648 6
a4653 4
--;
v_address_mex_row ADDRESS_MEX%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d4658 1
a4658 1
-------------  Business Rules go here 
d4667 1
a4667 1
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
d4672 3
a4682 2
        
        dbms_output.put_line('row value is ' || v_row_value);
d4685 20
a4704 12
	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS := v_row_value;
d4716 3
a4718 4
     UPDATE ADDRESS_MEX set row  =  v_address_mex_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
d4721 1
a4721 1
      
d4726 4
a4729 4
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADDRESS_MEX_U_SP;
d4731 3
a4733 3
procedure ADDRESS_OTHER_U_SP ( 
/*****************************************************************************
	ADDRESS_OTHER_U_SP
d4735 1
a4735 1
	This procedure is intended to Update OTHER address records
d4737 1
a4737 3
	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
d4743 8
a4750 8
created : 07/19/2012 mdh CCN Project....
*****************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
d4766 3
a4768 3
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d4782 1
a4782 1
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
d4785 3
a4787 1
   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4789 2
a4790 1
		   if (table_fields_rec.data_type <> 'DATE') then
d4792 7
a4798 8
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
d4800 1
d4802 25
a4826 15
	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE := v_row_value;
      when 'COUNTRY'           then  v_address_other_row.COUNTRY := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS := v_row_value;
		ELSE
d4831 3
a4833 3
  else
      null ;
  end if;
d4835 1
a4835 1
  end loop ;
d4837 1
a4837 4
      UPDATE ADDRESS_OTHER set row  =  v_address_other_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
d4845 1
a4845 1
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP' ||
d4848 2
a4849 1
end ADDRESS_OTHER_U_SP;
d4851 3
a4853 3
PROCEDURE ADDRESS_USA_U_SP (
/****************************************************************************
	ADDRESS_USA_U_SP
d4855 1
a4855 1
	This procedure is intended to Update ADDRESS_USA address records
d4857 2
a4858 3
	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_USA table that changed
d4864 9
a4872 8
created : 07/20/2012 mdh CCN Project....
****************************************************************************/
in_COST_CENTER    IN ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
d4888 3
a4890 3
v_address_usa_row address_usa%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d4904 1
a4904 1
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
d4917 1
a4917 1
                                              ,10); 
d4922 1
d4924 11
a4934 17
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_usa_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_usa_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_usa_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_usa_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_usa_row.ADDRESS_LINE_1 := v_row_value;
      when 'ADDRESS_LINE_2'    then  v_address_usa_row.ADDRESS_LINE_2 := v_row_value;
      when 'ADDRESS_LINE_3'    then  v_address_usa_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_usa_row.CITY := v_row_value;
			when 'STATE_CODE'        then  v_address_usa_row.STATE_CODE := v_row_value;
			when 'ZIP_CODE'          then  v_address_usa_row.ZIP_CODE := v_row_value;
			when 'ZIP_CODE_4'        then  v_address_usa_row.ZIP_CODE_4 := v_row_value;
			when 'COUNTY'            then  v_address_usa_row.COUNTY := v_row_value;
			when 'FIPS_CODE'         then  v_address_usa_row.FIPS_CODE := v_row_value;
			when 'DESTINATION_POINT' then  v_address_usa_row.DESTINATION_POINT := v_row_value;
			when 'CHECK_DIGIT'       then  v_address_usa_row.CHECK_DIGIT := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_usa_row.VALID_ADDRESS := v_row_value;
d4946 3
a4948 5
     UPDATE ADDRESS_USA set row  =  v_address_usa_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
   
d4955 1
a4955 1
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP' ||
d4958 2
a4959 1
end ADDRESS_USA_U_SP;
d4961 3
a4963 3
procedure ADMINISTRATION_U_SP (
/*****************************************************************************
	ADMINISTRATION_U_SP
d4965 1
a4965 1
	This procedure is intended to update ADMINISTRATION records
d4973 8
a4980 6
created : 07/18/2012 mdh CCN Project....
*****************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
a4984 1
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
d4996 3
a4998 2
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
d5012 1
a5012 1
      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
d5025 1
a5025 1
                                              ,10); 
d5030 3
d5034 6
a5039 5
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
a5043 3
  else
     null ;
  end if;
d5045 7
a5051 1
  end loop ;
d5053 1
a5053 4
      UPDATE ADMINISTRATION set row = v_administration_row
         where cost_center_code = in_Cost_Center;
         
       commit;
d5059 1
a5059 1
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP' ||
d5062 6
a5067 5
end ADMINISTRATION_U_SP;				 
				
 procedure BANK_CARD_U_SP (
/*****************************************************************************
	BANK_CARD_U_SP
d5069 1
a5069 1
	This procedure is intended to update BANK CARD records
d5071 1
a5071 4
	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
d5077 5
a5081 6
created : 07/18/2012 mdh CCN Project....
*****************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
d5083 3
a5085 3
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
a5089 1
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
d5101 3
a5103 2
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
d5108 1
a5114 18

-------------  Business Rules go here                           
--	begin
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

d5117 1
a5117 1
      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
d5130 1
a5130 1
                                              ,10); 
d5135 3
d5139 7
a5145 13
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_CHANGE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_UI := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
	  ELSE
a5148 3
  else
     null ;
  end if;
d5150 7
a5156 7
 end loop ;
       
      UPDATE BANK_CARD set row = v_bank_card_row
        Where cost_center_code     =  in_COST_CENTER
          and polling_status_code  =  in_POLLING_STATUS_CODE
          and merchant_id          =  in_MERCHANT_ID
          and effective_date       =  in_EFFECTIVE_DATE;
d5164 2
a5165 3
      errpkg.raise_err(v_code
      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
      	, v_errm);
d5167 2
a5168 1
end BANK_CARD_U_SP;       
d5272 2
a5273 2
end REAL_ESTATE_U_SP;
        	
@


1.6
log
@*** empty log message ***
@
text
@d994 1
a994 1
/**********************************************************
d1006 1
a1006 1
**********************************************************/
d1095 1
a1095 1
/***************************************************************
d1107 1
a1107 1
***************************************************************/
d1197 3
a1199 3
PROCEDURE ADDRESS_USA_I_SP (
/***************************************************************
	ADDRESS_USA_I_SP
d1201 1
a1201 1
	This procedure is intended to insert new ADDRESS_USA records
d1203 5
a1207 4
	CostCenter - Cost Center that changed
        ADDRESS_TYPE
        EFFECTIVE_DATE
	OracleTableName -Table name for row (based on the table that was updated)
d1211 8
a1218 9
created : 05/02/2012 tal CCN Project....
***************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
d1234 3
a1236 3
v_ADDRESS_USA_row ADDRESS_USA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d1250 37
a1286 60
      
      
		      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
		
				    if (table_fields_rec.data_type <> 'DATE') then
				
				        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                    ,table_fields_rec.column_size); 
				
				    else
				       
				         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                                              ,8); 
				    end if;
		    
		    
		/***  below is a list of all the fields in the table  ***/
		/*
		            COST_CENTER_CODE
		            ADDRESS_TYPE
		            EFFECTIVE_DATE
		            EXPIRATION_DATE
		            ADDRESS_LINE_1
		            ADDRESS_LINE_2
		            ADDRESS_LINE_3
		            CITY
		            STATE_CODE
		            ZIP_CODE
		            ZIP_CODE_4
		            COUNTY
		            FIPS_CODE
		            DESTINATION_POINT
		            CHECK_DIGIT
		            VALID_ADDRESS
		*/
		
				  	case table_fields_rec.column_name
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE     :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE     :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE     :=  v_row_value;
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE     :=  v_row_value;
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1     :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2     :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3     :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY     :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE     :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE     :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4     :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY     :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE     :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT     :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT     :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS     :=  v_row_value;
		
					ELSE
						null;		
					END CASE;	   	
		
		
		      end if;
d1290 2
a1291 2
      insert into ADDRESS_USA values v_ADDRESS_USA_row;
      
d1298 2
a1299 2
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
d1301 5
a1305 6
	
end ADDRESS_USA_I_SP;
 
PROCEDURE REAL_ESTATE_I_SP (
/***************************************************************
	REAL_ESTATE_I_SP
d1307 1
a1307 1
	This procedure is intended to insert new REAL_ESTATE records
d1309 3
a1311 1
	CostCenter - Cost Center that changed
d1317 8
a1324 8
created : 05/03/2012 tal CCN Project....
***************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_cost_center          IN  REAL_ESTATE.COST_CENTER_CODE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
a1325 1

d1340 3
a1342 3
v_real_estate_row REAL_ESTATE%rowtype;
v_row_value     varchar2(1000);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d1356 1
a1356 1
      --dbms_output.put_line(in_Row_data.extract('/REAL_ESTATE/COST_CENTER_CODE/text()').getStringVal());
d1361 1
a1361 1
         if (table_fields_rec.data_type <> 'DATE') then
d1363 8
a1370 10
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
a1371 3
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_REAL_ESTATE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_REAL_ESTATE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
d1373 12
a1384 4
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
			when 'LEASE_OWN_CODE'         then  v_real_estate_row.LEASE_OWN_CODE       := v_row_value;
d1396 2
a1397 2
      insert into REAL_ESTATE values v_real_estate_row;
      
d1404 4
a1407 5
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
        	
end REAL_ESTATE_I_SP;
d1409 3
a1411 3
PROCEDURE SALES_REP_I_SP (
/***************************************************************
	SALES_REP_I_SP
d1413 1
a1413 1
	This procedure is intended to insert new SALES_REP records
d1415 3
a1417 1
	CostCenter - Cost Center that changed
d1423 8
a1430 8
created : 05/03/2012 tal CCN Project....
***************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_gems_emp_id          IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d1446 3
a1448 3
v_sales_rep_row SALES_REP%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
d1462 1
a1462 1
      --dbms_output.put_line(in_Row_data.extract('/SALES_REP/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
d1465 1
a1465 3
      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then
d1467 1
a1467 2
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
d1469 5
a1473 4
        else
       
           v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
d1475 2
a1476 2
    
    dbms_output.put_line('row value is ' || v_row_value);
a1477 1
/***  below is a list of all the fields in the table  ***/
d1479 14
a1492 9
	  	case table_fields_rec.column_name
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
d1498 3
a1500 3
      else
        null ;
      end if;
d1502 1
a1502 1
      end loop ;
d1504 1
a1504 1
      insert into SALES_REP values v_sales_rep_row;
d1512 2
a1513 2
      errpkg.raise_err(v_code, 'SALES_REP_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
d1515 1
a1515 2
	
end SALES_REP_I_SP;
d1517 3
a1519 3
PROCEDURE STATUS_I_SP (
/***************************************************************
	STATUS_I_SP
d1521 1
a1521 1
	This procedure is intended to insert new STATUS records
d1524 3
a1526 2
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
d1530 8
a1537 10
created : 05/03/2012 tal CCN Project....
***************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_costctr              IN  STATUS.COST_CENTER_CODE%TYPE,
in_status               IN  STATUS.STATUS_CODE%TYPE,
in_eff_date             IN  STATUS.EFFECTIVE_DATE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d1553 1
a1553 1
v_status_row STATUS%rowtype;
d1555 1
a1555 1
v_row_data      sys.xmltype := xmltype(in_Row_data);
d1569 127
a1695 1
      --dbms_output.put_line(in_Row_data.extract('/STATUS/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
d1698 1
a1698 1
      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1700 1
a1700 1
         if (table_fields_rec.data_type <> 'DATE') then
d1702 1
a1702 1
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d1705 1
a1705 1
         else
d1707 3
a1709 2
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10); 
         end if;
a1712 1
/***  below is a list of all the fields in the table  ***/
d1715 4
a1718 5
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');

d1723 3
d1727 3
a1729 5
      else
        null ;
      end if;

      end loop ;
d1731 1
a1731 1
      insert into STATUS values v_status_row;
d1733 126
d1865 3
a1867 2
      errpkg.raise_err(v_code, 'STATUS_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d1870 5
a1874 1
end STATUS_I_SP;
d1876 1
a1876 5
PROCEDURE STORE_I_SP (
/***************************************************************
	STORE_I_SP

	This procedure is intended to insert new STORE records
d1885 1
a1885 1
***************************************************************/
d1888 4
a1891 4
in_COST_CENTER          IN  STORE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
d1893 1
d1908 2
a1909 2
v_STORE_row STORE%rowtype;
v_row_value     varchar2(500);
d1924 1
a1924 1
      --dbms_output.put_line(in_Row_data.extract('/STORE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
d1943 2
d1947 6
a1952 2
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;
a1953 1
			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
d1955 3
a1957 2
			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;
d1959 924
a2882 10
			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			when 'DUNS_NUMBER'                then  v_STORE_row.DUNS_NUMBER              := v_row_value;
			when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
			when 'PRI_LOGO_GROUP_IND'         then  v_STORE_row.PRI_LOGO_GROUP_IND       := v_row_value;
			when 'SEC_LOGO_GROUP_IND'         then  v_STORE_row.SEC_LOGO_GROUP_IND       := v_row_value;
			when 'LEASE_OWN_CODE'             then  v_STORE_row.LEASE_OWN_CODE           := v_row_value;
			when 'MISSION_TYPE_CODE'          then  v_STORE_row.MISSION_TYPE_CODE        := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;
d2884 20
d2915 3
a2917 1
      insert into STORE values v_STORE_row;
d2920 1
a2920 1
      
d2925 4
a2928 5
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end STORE_I_SP;
d2930 3
a2932 4
PROCEDURE TERMINAL_I_SP 
(
/**********************************************************
	TERMINAL_I_SP
d2934 1
a2934 1
	This procedure is intended to insert new terminal records
d2936 3
a2938 1
	TERMINAL - Cost Center that changed
d2944 8
a2951 9
created : 04/24/2012 BLR CCN Project....
**********************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2954 5
a2958 1
 cursor table_fields_cur is
d2967 1
a2967 1
v_terminal_row TERMINAL%rowtype;
d2969 2
a2970 5
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
d2974 1
a2974 1
-------------BUSINESS RULES HERE
d2976 1
a2976 1
BEGIN
d2983 1
a2983 1
      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
a2984 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2986 26
a3011 22
               if (table_fields_rec.data_type <> 'date') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
              else
    
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
d3023 4
a3026 1
      insert into TERMINAL values v_terminal_row;
d3030 1
a3030 1
       EXCEPTION
d3034 2
a3035 2
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d3037 1
d3039 3
a3041 5
end TERMINAL_I_SP;

PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/**********************************************************
	TERRITORY_ASSIGNMENT_I_SP
d3043 1
a3043 1
	This procedure is intended to insert new territory_assignment records
d3045 3
a3047 1
	TERRITORY_ASSIGNMENT - Cost Center that changed
d3053 8
a3060 9
created : 05/04/2012 BLR CCN Project....
**********************************************************/
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d3063 5
a3067 1
 cursor table_fields_cur is
d3076 1
a3076 1
v_territory_assignment_row territory_assignment%rowtype;
d3078 1
a3078 6
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d3083 1
a3083 1
-------------BUSINESS RULES HERE
d3085 1
a3085 1
BEGIN
d3092 1
a3092 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
a3093 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d3095 29
a3123 23
               if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
               else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
               end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	
d3132 4
a3135 1
      insert into TERRITORY_ASSIGNMENT values v_territory_assignment_row;
d3139 1
a3139 1
       EXCEPTION
d3143 2
a3144 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d3146 1
d3148 3
a3150 5
end TERRITORY_ASSIGNMENT_I_SP;

PROCEDURE TERRITORY_I_SP (
/**********************************************************
	TERRITORY_I_SP
d3152 1
a3152 1
	This procedure is intended to insert new TERRITORY records
d3154 3
a3156 1
	TERRITORY - Cost Center that changed
d3162 8
a3169 8
created : 04/24/2012 BLR CCN Project....
**********************************************************/

in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d3172 5
a3176 1
 cursor table_fields_cur is
d3185 3
a3187 8
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d3192 1
a3192 1
-------------BUSINESS RULES HERE
d3194 1
a3194 1
BEGIN
d3201 1
a3201 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
a3202 1
      
d3204 1
d3206 1
a3206 3
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then
d3208 1
a3208 1
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d3210 2
a3211 2
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d3213 19
a3231 13
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
d3233 1
a3233 1
			null;	      
d3237 10
a3246 7
      else
        null ;
      end if;

      end loop ;
      
      insert into territory values v_territory_row;
d3250 1
a3250 1
       EXCEPTION
d3254 2
a3255 2
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
d3257 1
d3259 3
a3261 5
end TERRITORY_I_SP;

PROCEDURE TERRITORY_SALES_MGR_I_SP (
/**********************************************************
	TERRITORY_SALES_MGR_I_SP
d3263 1
a3263 1
	This procedure is intended to insert new territory_sales_mgr records
d3265 3
a3267 1
	TERRITORY_SALES_MGR - Cost Center that changed
d3273 8
a3280 7
created : 04/24/2012 BLR CCN Project....
**********************************************************/

 in_slsmgr     IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d3283 5
a3287 1
 cursor table_fields_cur is
d3296 1
a3296 1
v_territory_sales_mgr_row TERRITORY_SALES_MGR%rowtype;
d3298 1
a3298 6
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d3303 1
a3303 1
-------------BUSINESS RULES HERE
d3305 1
a3305 1
BEGIN
d3312 1
a3312 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_SALES_MGR/COST_CENTER_CODE/text()').getStringVal());
a3313 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d3315 12
a3326 5
                if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                     ,table_fields_rec.column_size); 
                else
d3328 20
a3347 18
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name			
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id:= v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name := v_row_value;
				
			
d3359 5
a3363 2
      insert into TERRITORY_SALES_MGR values v_territory_sales_mgr_row;
      
d3366 1
a3366 1
       EXCEPTION
d3370 2
a3371 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
d3373 1
d3375 3
a3377 5
end TERRITORY_SALES_MGR_I_SP;

PROCEDURE TYPE_I_SP (
/**********************************************************
	TYPE_I_SP
d3379 1
a3379 1
	This procedure is intended to insert new TYPE records
d3381 1
a3381 1
	TYPE - Cost Center that changed
d3387 4
a3390 7
created : 04/24/2012 BLR CCN Project....
**********************************************************/

 in_COSTCTR IN TYPE.COST_CENTER_CODE%TYPE
,in_TYPE IN TYPE.TYPE_CODE%TYPE
,in_EFF_DATE IN TYPE.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
d3392 1
a3392 1
,in_Row_data   IN varchar2--sys.xmltype
d3395 6
a3400 1
 cursor table_fields_cur is
d3405 1
a3405 1
      	WHERE TABLE_NAME = in_TABLE_NAME
d3409 1
a3409 1
v_type_row TYPE%rowtype;
a3410 6
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

d3415 1
a3415 1
-------------BUSINESS RULES HERE
d3417 1
a3417 1
BEGIN
d3424 1
a3424 1
      --dbms_output.put_line(in_Row_data.extract('/TYPE/COST_CENTER_CODE/text()').getStringVal());
a3425 2
      
             if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d3427 5
a3431 3
                if (table_fields_rec.data_type <> 'DATE') then
                
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d3433 6
a3438 1
                else
d3440 3
a3442 6
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name || '/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_VALUE); 
      
d3444 4
a3447 6
			when 'COST_CENTER_CODE' then  v_type_row.cost_center_code := v_row_value;
			when 'TYPE_CODE' then  v_type_row.type_code := v_row_value;
			when 'EFFECTIVE_DATE' then  v_type_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE' then  v_type_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			
			
d3452 3
d3456 1
a3456 5
      else
        null ;
      end if;

      end loop ;
d3458 4
a3461 1
      insert into TYPE values v_type_row;
d3463 1
a3463 3
      commit;
      
       EXCEPTION
d3467 1
a3467 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
d3470 5
d3476 1
a3476 11
end TYPE_I_SP;

/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/
       
PROCEDURE COST_CENTER_U_SP (
/**********************************************************
	COST_CENTER_U_SP

	This procedure is intended to UPDATE cost center records
d3478 4
a3481 1
	CostCenter - Cost Center that changed
d3487 7
a3493 3
created : 02/21/2012 kdp CCN Project....
**********************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
d3496 1
a3496 1
,in_Row_data   IN VARCHAR2--sys.xmltype
d3499 4
d3512 3
a3514 6
--;                                   
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%rowtype;
 v_row_value 	varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
a3518 1
-------------
d3525 18
d3545 1
a3545 1
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
d3550 1
a3550 2
--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 
d3552 2
a3553 1
		if (table_fields_rec.data_type <> 'DATE') then
d3555 7
a3561 6
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
d3565 12
a3576 20
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'TAX_JURISDICTION' then  v_cost_center_row.TAX_JURISDICTION := v_row_value;
			when 'TAX_COMPANY_CODE' then  v_cost_center_row.TAX_COMPANY_CODE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
		ELSE
d3580 3
d3584 7
a3590 5
      else
        null ;
      end if;

      end loop ;
d3592 1
a3592 2

      UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center;
a3593 3
      
      commit;

d3598 5
a3602 4
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);

end COST_CENTER_U_SP;
d3605 1
a3605 1
/***************************************************************
d3617 1
a3617 1
***************************************************************/
d3709 1
a3709 1
/***************************************************************
d3721 1
a3721 1
***************************************************************/
d3813 1
a3813 1
/***************************************************************
d3825 1
a3825 1
***************************************************************/
d3919 1
a3919 1
/***************************************************************
d3931 1
a3931 1
***************************************************************/
d4036 1
a4036 1
/**********************************************************
d4048 1
a4048 1
**********************************************************/
d4142 1
a4142 1
/**********************************************************
d4154 1
a4154 1
**********************************************************/
d4252 1
a4252 1
/**********************************************************
d4264 1
a4264 1
**********************************************************/
d4356 1
a4356 1
/**********************************************************
d4368 1
a4368 1
**********************************************************/
d4462 1
a4462 1
/**********************************************************
d4474 1
a4474 1
**********************************************************/
@


1.5
log
@*** empty log message ***
@
text
@a0 1
create or replace
d1916 1
a1916 1
               if (table_fields_rec.data_type <> 'date') then
d2121 1
a2121 1
                if (table_fields_rec.data_type <> 'date') then
d2228 1
a2228 1
                if (table_fields_rec.data_type <> 'date') then
d2400 1
a2400 1
created : 07/11/2012 tal CCN Project....
d2491 1
a2491 1

d2504 1
a2504 1
created : 07/11/2012 tal CCN Project....
d2686 4
a2689 1
      UPDATE status set row = v_status_row where cost_center_code = in_costctr;
d2714 1
a2714 1
created : 07/11/2012 tal CCN Project....
d2875 1
a2875 1
               if (table_fields_rec.data_type <> 'date') then
d2908 5
a2912 1
      UPDATE TERMINAL set row = v_terminal_row where cost_center_code = in_costctr;
d2914 2
a2915 2
      
       EXCEPTION
d2947 1
d2984 1
a2984 1
               if (table_fields_rec.data_type <> 'date') then
d3014 10
a3023 3
      
      UPDATE TERRITORY_ASSIGNMENT set row = v_territory_assignment_row where TERRITORY_SLS_MGR_CODE = in_slsmgr;
      commit;
d3091 1
a3091 1
                if (table_fields_rec.data_type <> 'date') then
d3128 1
a3128 1
      
d3229 5
a3233 2
      UPDATE territory set row = v_territory_row where TERRITORY_SLS_MGR_CODE =  in_slsmgr;
      commit;
d3303 1
a3303 1
                if (table_fields_rec.data_type <> 'date') then
d3333 4
a3336 1
      UPDATE TYPE set row = v_type_row where cost_center_code = in_costctr;
d3339 1
a3339 1
       EXCEPTION
@


1.4
log
@*** empty log message ***
@
text
@d1327 59
d1387 4
a1390 3
/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/
d1392 42
a1433 3
PROCEDURE COST_CENTER_U_SP (
/**********************************************************
	COST_CENTER_U_SP
d1435 1
a1435 1
	This procedure is intended to UPDATE cost center records
d1443 8
a1450 6
created : 02/21/2012 kdp CCN Project....
**********************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
d1453 3
d1465 95
a1559 1
--;                                   
d1562 14
a1575 3
 v_cost_center_row cost_center%rowtype;
 v_row_value 	varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
d1580 1
a1580 1
-------------
d1589 1
a1589 1
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
d1592 1
a1592 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1594 1
a1594 2
--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 
d1596 2
a1597 1
		if (table_fields_rec.data_type <> 'DATE') then
d1599 6
a1604 6
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
d1606 1
d1609 5
a1613 19
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'TAX_JURISDICTION' then  v_cost_center_row.TAX_JURISDICTION := v_row_value;
			when 'TAX_COMPANY_CODE' then  v_cost_center_row.TAX_COMPANY_CODE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
d1625 38
d1664 76
a1739 1
      UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center;
d1741 1
d1744 1
a1744 1

d1749 18
a1766 2
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
d1768 1560
a3327 1
end COST_CENTER_U_SP;
@


1.3
log
@latest version
@
text
@d1 1
d1444 1
a1444 2
end CCN_UI_INTERFACE_APP_PKG;

@


1.2
log
@adding update procedure for cost center
@
text
@a0 1
create or replace
d11 32
d230 1
a230 1
          ,in_MERCHANT_ID_CODE IN BANK_CARD.MERCHANT_ID_CODE%TYPE
d253 1
a253 1
        and merchant_id_code = in_MERCHANT_ID_CODE
d1010 1
a1010 1
,in_Row_data   IN sys.xmltype
d1017 1
d1025 1
d1042 4
a1045 1
      if (in_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1047 1
a1047 2
        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
d1049 6
d1067 6
a1072 6
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := v_row_value;
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := v_row_value;
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := v_row_value;
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := v_row_value;
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := v_row_value;
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := v_row_value;
d1093 349
d1444 1
@


1.1
log
@*** empty log message ***
@
text
@d992 1
d995 1
a995 4
  path        	        varchar2(50) := 'CCN_LOAD_FILES'; -- directory created in Oracle database UNTIL NEW ONE CREATED
  filename  			      varchar2(50) := in_TABLE_NAME || '_backfeed';
  stamp       			    varchar2(50) := to_char(sysdate,'HH:MI:SS'); -- used to create timestamp for data file /app/cpr/fldpayroll
  output_file 			utl_file.file_type;
a997 6
  l_out_file  UTL_FILE.file_type;
  l_buffer    RAW(32767);
  l_amount    BINARY_INTEGER := 32767;
  l_pos       INTEGER := 1;
  l_blob_len  INTEGER;
  v_out_clob clob;
d1001 1
a1001 5
/* working just remove for debbuging un comment for writing file
    output_file := utl_file.fopen (path
                                   ,filename || stamp
                                   , 'w' --binary
                                   , 32767);
a1002 2
    --adding header information for the backload file
 --    v_out_clob := in_cost_center || rpad(in_table_name,20) ;
d1011 1
a1011 1
        v_cost_center_row.cost_center_code := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d1014 26
a1039 3
 --       v_out_clob := v_out_clob || rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
 --                 ,table_fields_rec.column_size);
          --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/' || table_fields_rec.column_name ||'/text()').getStringVal())
d1042 1
a1042 1
        v_out_clob := v_out_clob || rpad(' ',table_fields_rec.column_size);
a1049 6
 /* working just remove for debbuging un comment for writing file
     UTL_FILE.put_line(output_file, v_out_clob, TRUE);

     utl_file.fclose(output_file);
 */
-- dbms_output.put_line(v_out_clob);
d1053 1
a1053 3


end CCN_UI_INTERFACE_APP_PKG;@

