create or replace PACKAGE BODY          CCN_BUSINESS_RULES_PKG
    AS
/******************************************************************************
	CCN_BUSINESS_RULES_PKG  BODY

	This Package BODY is intended to validate business rules for
	CCN application.  There will be a main validation program that will 
	run through all the rules and raise the first violation hit.
	
created :kdp 4/26/2012
revised :mdh 9/24/2012
         mdh 1/17/2013 - Address Warning Messages added
         mdh 5/09/2013 - Close_CCNTR_SP fix (ORA-20010)
         mdh 5/17/2013 - CLOSE_CCNTR_SP fix (ORA-2010) Add CLose Stat of 8
         12/16/2014 AXK326 CCN Project Team....
          Code changes made after deleting the sales manager link from the Territory Table
******************************************************************************/
PROCEDURE BUSINESS_RULES_SP( 
/*******************************************************************************
	 BUSINESS_RULES_SP  (XML to Rowtype Conversion)
   
  This procedure is intended to pull in the XML versions of the CCN tables, and
  convert them to ROWTYPEs.
  
  This procedure will then call the BUSINESS_RULES_SP (Rowtype) procedure which 
  is the "main" Business Rules procedure; which will execute each of the 
  individual business rules.    

created : MDH 10/04//2012
changed : 07/17/2014 CCN Project, prod issue : territory vs close date
          Passing a paramater to distinguish between business rule validation calls 
          and database update calls to TERRITORY_ROWTYPE_SP procedure
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
******************************************************************************/	
    inADDRESS_CAN_XMLTYPE    VARCHAR2--sys.xmltype
   ,inADDRESS_MEX_XMLTYPE    VARCHAR2--sys.xmltype
   ,inADDRESS_OTH_XMLTYPE    VARCHAR2--sys.xmltype
   ,inADDRESS_USA_XMLTYPE    VARCHAR2--sys.xmltype   
   ,inADDRESS_BRB_XMLTYPE    VARCHAR2--sys.xmltype   
   ,inADMIN_XMLTYPE          VARCHAR2--sys.xmltype
   ,inBANKCARD_XMLTYPE       VARCHAR2--sys.xmltype
   ,inCOST_CENTER_XMLTYPE    VARCHAR2--sys.xmltype
   ,inMARKETING_XMLTYPE      VARCHAR2--sys.xmltype
   ,inOTHER_XMLTYPE          VARCHAR2--sys.xmltype
   ,inPhone_XMLTYPE          VARCHAR2--sys.xmltype
   ,inPHONE_PRI_XMLTYPE      VARCHAR2--sys.xmltype
   ,inPHONE_SCD_XMLTYPE      VARCHAR2--sys.xmltype
   ,inPOLLING_XMLTYPE        VARCHAR2--sys.xmltype
   ,inREAL_ESTATE_XMLTYPE    VARCHAR2--sys.xmltype
   ,inSALES_REP_XMLTYPE      VARCHAR2--sys.xmltype
   ,inSTATUS_XMLTYPE         VARCHAR2--sys.xmltype
   ,inSTORE_XMLTYPE          VARCHAR2--sys.xmltype
   ,inTERMINAL_XMLTYPE       VARCHAR2--sys.xmltype
   ,inTERRITORY_XMLTYPE      VARCHAR2--sys.xmltype 
   ,inTYPE_XMLTYPE           VARCHAR2--sys.xmltype
 )
                IS         
v_code                 number;
v_errm                 varchar(500);
v_break                varchar(100);
--v_COST_CENTER  COST_CENTER.COST_CENTER_CODE%TYPE;
--v_TABLE_NAME           VARCHAR2(50);
v_ROW_DATE             DATE;
--
V_ADDRESS_CAN_ROWTYPE    ADDRESS_CAN%ROWTYPE;
V_ADDRESS_MEX_ROWTYPE    ADDRESS_MEX%ROWTYPE;
V_ADDRESS_OTH_ROWTYPE    ADDRESS_OTHER%ROWTYPE;
V_ADDRESS_USA_ROWTYPE    ADDRESS_USA%ROWTYPE;   
V_ADDRESS_BRB_ROWTYPE    ADDRESS_BRB%ROWTYPE;   
V_ADMIN_ROWTYPE          ADMINISTRATION%ROWTYPE;
V_BANKCARD_ROWTYPE       BANK_CARD%ROWTYPE;
V_COST_CENTER_ROWTYPE    COST_CENTER%ROWTYPE;
V_MARKETING_ROWTYPE      MARKETING%ROWTYPE;
V_OTHER_ROWTYPE          OTHER%ROWTYPE;
V_PHONE_ROWTYPE          PHONE%ROWTYPE;
V_PHONE_PRI_ROWTYPE      PHONE%ROWTYPE;
V_PHONE_SCD_ROWTYPE      PHONE%ROWTYPE;
V_POLLING_ROWTYPE        POLLING%ROWTYPE;
V_REAL_ESTATE_ROWTYPE    REAL_ESTATE%ROWTYPE;
V_SALES_REP_ROWTYPE      SALES_REP%ROWTYPE;
V_STATUS_ROWTYPE         STATUS%ROWTYPE;
V_STORE_ROWTYPE          STORE%ROWTYPE;
V_TERMINAL_ROWTYPE       TERMINAL%ROWTYPE;
V_TERRITORY_ROWTYPE      TERRITORY%ROWTYPE;  
V_TYPE_ROWTYPE           TYPE%ROWTYPE;
--
BEGIN --  BUSINESS_RULES_SP
-- 
v_break  :=  ('Entered the Business_Rules_SP (XML) ' ); 
--              || ' in_cost_center = ' || v_COST_CENTER.cost_center_code ); 
--
--
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
	                 TRANSLATE XML TABLES TO ROWTYPES
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/	
--
--
/**  Translate ADDRESS_CAN_XMLTYPE Table ***/
   IF (inADDRESS_CAN_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Address Canada XMLTYPE '); 
      CCN_TABLE_IU_PKG.ADDRESS_CAN_ROWTYPE_SP(
       NULL  
      ,NULL
      ,NULL
      ,'ADDRESS_CAN'  
      ,v_ROW_DATE    
      ,inaddress_can_xmltype    
      ,v_address_can_rowtype  
);
   END IF ;
--
--
/**  Translate ADDRESS_MEX_XMLTYPE Table ***/
   IF (inADDRESS_MEX_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Address Mexico XMLTYPE '); 
      CCN_TABLE_IU_PKG.ADDRESS_MEX_ROWTYPE_SP(
       NULL  
      ,NULL
      ,NULL
      ,'ADDRESS_MEX'  
      ,v_ROW_DATE    
      ,inaddress_mex_xmltype    
      ,v_address_mex_rowtype  
);
   END IF ;
--
--
/**  Translate ADDRESS_OTHER_XMLTYPE Table ***/
   IF (inADDRESS_OTH_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Address Mexico XMLTYPE '); 
      CCN_TABLE_IU_PKG.ADDRESS_OTHER_ROWTYPE_SP(
       NULL  
      ,NULL
      ,NULL
      ,'ADDRESS_OTHER'  
      ,v_ROW_DATE    
      ,inaddress_oth_xmltype    
      ,v_address_oth_rowtype  
);
   END IF ;
--
--
/**  Translate ADDRESS_USA_XMLTYPE Table ***/
   IF (inADDRESS_USA_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Address USA XMLTYPE '); 
      CCN_TABLE_IU_PKG.ADDRESS_USA_ROWTYPE_SP(
       NULL  
      ,NULL
      ,NULL
      ,'ADDRESS_USA'  
      ,v_ROW_DATE    
      ,inaddress_usa_xmltype    
      ,v_address_usa_rowtype  
);
   END IF ;
--
--
/**  Translate ADDRESS_BRB_XMLTYPE Table ***/
   IF (inADDRESS_BRB_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Address BRB XMLTYPE '); 
      CCN_TABLE_IU_PKG.ADDRESS_BRB_ROWTYPE_SP(
       NULL  
      ,NULL
      ,NULL
      ,'ADDRESS_BRB'  
      ,v_ROW_DATE    
      ,inaddress_brb_xmltype    
      ,v_address_brb_rowtype  
);
   END IF ;
--
--
/**  Translate ADMINISTRATION_XMLTYPE Table ***/
   IF (inADMIN_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Administration XMLTYPE '); 
      CCN_TABLE_IU_PKG.ADMINISTRATION_ROWTYPE_SP(
       NULL  
      ,'ADMINISTRATION'  
      ,v_ROW_DATE    
      ,inadmin_xmltype    
      ,v_admin_rowtype  
);
   END IF ;   
--
--
/**  Translate BANK_CARD_XMLTYPE Table ***/
   IF (inBANKCARD_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Bank Card XMLTYPE '); 
      CCN_TABLE_IU_PKG.BANK_CARD_ROWTYPE_SP(
       NULL  
      ,NULL
      ,NULL
      ,NULL
      ,'BANK_CARD'  
      ,v_ROW_DATE    
      ,inbankcard_xmltype    
      ,v_bankcard_rowtype  
);
   END IF ;      
--
--
/**  Translate COST CENTER_XMLTYPE Table ***/
   IF (inCOST_CENTER_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Cost Center XMLTYPE '); 
      CCN_TABLE_IU_PKG.COST_CENTER_ROWTYPE_SP(
       NULL  
      ,'COST_CENTER'  
      ,v_ROW_DATE    
      ,incost_center_xmltype    
      ,v_cost_center_rowtype  
);
   END IF ;    
--
--
/**  Translate MARKETING_XMLTYPE Table ***/
   IF (inMARKETING_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Marketing XMLTYPE '); 
      CCN_TABLE_IU_PKG.MARKETING_ROWTYPE_SP(
       NULL 
      ,NULL 
      ,'MARKETING'  
      ,v_ROW_DATE    
      ,inmarketing_xmltype    
      ,v_marketing_rowtype  
);
   END IF ;    
--
--
/**  Translate OTHER_XMLTYPE Table ***/
   IF (inOTHER_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Other XMLTYPE '); 
      CCN_TABLE_IU_PKG.OTHER_ROWTYPE_SP(
       NULL  
      ,v_other_rowtype  
      ,'OTHER'  
      ,v_ROW_DATE    
      ,inother_xmltype    
);
   END IF ;      
--
--
/**  Translate PHONE_XMLTYPE Table ***/
   IF (inPHONE_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Phone XMLTYPE '); 
      CCN_TABLE_IU_PKG.PHONE_ROWTYPE_SP(
       NULL  
      ,NULL
      ,v_phone_rowtype  
      ,'PHONE'  
      ,v_ROW_DATE    
      ,inphone_xmltype    
);
   END IF ;    
--
   IF (inPHONE_PRI_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Phone Primary XMLTYPE '); 
      CCN_TABLE_IU_PKG.PHONE_ROWTYPE_SP(
       NULL  
      ,NULL
      ,v_phone_pri_rowtype  
      ,'PHONE'  
      ,v_ROW_DATE    
      ,inphone_pri_xmltype    
);
   END IF ;    
   --
   IF (inPHONE_SCD_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Phone Secondary XMLTYPE '); 
      CCN_TABLE_IU_PKG.PHONE_ROWTYPE_SP(
       NULL  
      ,NULL
      ,v_phone_scd_rowtype  
      ,'PHONE'  
      ,v_ROW_DATE    
      ,inphone_scd_xmltype    
);
   END IF ;    
--
--
/**  Translate POLLING_XMLTYPE Table ***/
   IF (inPOLLING_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Polling XMLTYPE '); 
      CCN_TABLE_IU_PKG.POLLING_ROWTYPE_SP(
       'POLLING'  
       ,inpolling_xmltype   
       ,v_polling_rowtype  
);
   END IF ; 
--
--
/**  Translate REAL ESTATE_XMLTYPE Table ***/
   IF (inREAL_ESTATE_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Real Estate XMLTYPE '); 
      CCN_TABLE_IU_PKG.REAL_ESTATE_ROWTYPE_SP(
       'REAL_ESTATE'  
      ,inreal_estate_xmltype  
      ,v_real_estate_rowtype    
);
   END IF ;     
--
--
/**  Translate SALES REP_XMLTYPE Table ***/
   IF (inSALES_REP_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Sales Rep XMLTYPE ');  
      CCN_TABLE_IU_PKG.SALES_REP_ROWTYPE_SP(
       'SALES_REP'  
      ,insales_rep_xmltype  
      ,v_sales_rep_rowtype  
);
   END IF ; 
--
--
/**  Translate STATUS_XMLTYPE Table ***/
   IF (inSTATUS_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Status XMLTYPE '); 
      CCN_TABLE_IU_PKG.STATUS_ROWTYPE_SP(
       'STATUS'  
      ,instatus_xmltype    
      ,v_status_rowtype  
);
   END IF ;         
--
--
/**  Translate STORE_XMLTYPE Table ***/
   IF (inSTORE_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing Store XMLTYPE '); 
      CCN_TABLE_IU_PKG.STORE_ROWTYPE_SP(
       'STORE'  
      ,instore_xmltype    
      ,v_store_rowtype  
);
   END IF ; 
--
--
/**  Translate TERMINAL_XMLTYPE Table ***/
   IF (inTERMINAL_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing TERMINAL XMLTYPE '); 
      CCN_TABLE_IU_PKG.TERMINAL_ROWTYPE_SP(
       'TERMINAL'  --27-Aug-2013 [It's STATUS before]
      ,interminal_xmltype    
      ,v_terminal_rowtype      
  );
   END IF ; 
--
--
/**  Translate TERRITORY_XMLTYPE Table ***/
   IF (inTERRITORY_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing TERRITORY XMLTYPE '); 
      CCN_TABLE_IU_PKG.TERRITORY_ROWTYPE_SP(
       'TERRITORY' 
      ,interritory_xmltype    
      ,v_territory_rowtype 
      ,'Y' --should be passed only during validation, not during databaase updates for which default is set as 'N'
  );
  IF (v_status_rowtype.STATUS_CODE  IN ('X','5'))  AND (v_cost_center_rowtype.CATEGORY = 'T') THEN
       IF v_territory_rowtype.COST_CENTER_CODE = v_cost_center_rowtype.cost_center_code  AND     
          v_territory_rowtype.HOME_STORE IS NOT NULL THEN
            v_territory_rowtype.HOME_STORE := NULL;
       END IF ;
  END IF;
   END IF ;   

/**  Translate TYPE_XMLTYPE Table ***/
   IF (inTYPE_XMLTYPE  IS NOT NULL)  THEN
      v_break  := ('Processing TYPE XMLTYPE '); 
      CCN_TABLE_IU_PKG.TYPE_ROWTYPE_SP(
       'TYPE' 
      ,intype_xmltype  
      ,v_type_rowtype
  );
   END IF ;    
--
--
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
	                    CALL THE  BUSINESS RULES
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/	
--
--
v_break  := ('Entering Business Rules (rowtype)' );
--            || ' in_cost_center = ' || v_COST_CENTER.cost_center_code ); 
--
--
/**  Call CLOSED COST CENTER Business Rule ***/
 CCN_BUSINESS_RULES_PKG.Business_Rules_sp (
    V_ADDRESS_CAN_ROWTYPE    
   ,V_ADDRESS_MEX_ROWTYPE   
   ,V_ADDRESS_OTH_ROWTYPE    
   ,V_ADDRESS_USA_ROWTYPE    
   ,V_ADDRESS_BRB_ROWTYPE    
   ,V_ADMIN_ROWTYPE         
   ,V_BANKCARD_ROWTYPE       
   ,V_COST_CENTER_ROWTYPE    
   ,V_MARKETING_ROWTYPE      
   ,V_OTHER_ROWTYPE         
   ,V_PHONE_ROWTYPE
   ,V_PHONE_PRI_ROWTYPE
   ,V_PHONE_SCD_ROWTYPE
   ,V_POLLING_ROWTYPE       
   ,V_REAL_ESTATE_ROWTYPE   
   ,V_SALES_REP_ROWTYPE      
   ,V_STATUS_ROWTYPE         
   ,V_STORE_ROWTYPE          
   ,V_TERMINAL_ROWTYPE       
   ,V_TERRITORY_ROWTYPE     
   ,V_TYPE_ROWTYPE           
 );
--	
--
--
v_break  :=  ('Completed the Business_Rules_SP (rowtype) '); 
--              || ' in_cost_center = ' || v_COST_CENTER.cost_center_code ); 
--
--
--
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
	                       E X C E P T I O N S 
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/	
--
--
 EXCEPTION
       
       WHEN OTHERS THEN
                    v_code := SQLCODE;
                    v_errm := substr(SQLERRM,12, 500);
                    errpkg.raise_err(v_code, ' BUSINESS_RULES_SP (xmltype) Error ',
                    v_errm ||
                    v_break
                );   
       
END BUSINESS_RULES_SP; --XML

PROCEDURE Business_Rules_sp (
/*******************************************************************************
	 BUSINESS_RULES_SP (rowtype)

	This procedure is intended to be the "main" Business Rules procedure.  This
  routine will be excuted both by Batch and our UI Screens.
  
	Its purposes is to execute each of the individual Business Rules as defined
  in the Technical Document (Section 3.3) and housed in the Business Rules
	Package.
  
  Each Table specific business rule will be executed first if the related
  table rowtype is not "null".  
  
  Finally, specific Business Rules will be executed based on changes within
  specific columns of specific tables.

created : MDH  9/25//2012
revised : MDH 10/11/2012
          SXT 8/27/2014 - Adding the logic to suppress merchant id rules, bank card rules and history rules when status changed to I
          jxc517 08/27/2014 CCN Project - Adding the logic to suppress merchant id rules, bank card rules and history rules when statement type is TR
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
******************************************************************************/	
    inADDRESS_CAN_ROWTYPE    IN ADDRESS_CAN%ROWTYPE
   ,inADDRESS_MEX_ROWTYPE    IN ADDRESS_MEX%ROWTYPE
   ,inADDRESS_OTH_ROWTYPE    IN ADDRESS_OTHER%ROWTYPE
   ,inADDRESS_USA_ROWTYPE    IN ADDRESS_USA%ROWTYPE   
   ,inADDRESS_BRB_ROWTYPE    IN ADDRESS_BRB%ROWTYPE   
   ,inADMIN_ROWTYPE          IN ADMINISTRATION%ROWTYPE
   ,inBANKCARD_ROWTYPE       IN BANK_CARD%ROWTYPE
   ,inCOST_CENTER_ROWTYPE    IN COST_CENTER%ROWTYPE
   ,inMARKETING_ROWTYPE      IN MARKETING%ROWTYPE
   ,inOTHER_ROWTYPE          IN OTHER%ROWTYPE
   ,inPhone_ROWTYPE          IN PHONE%ROWTYPE
   ,inPHONE_PRI_ROWTYPE      IN PHONE%ROWTYPE
   ,inPHONE_SCD_ROWTYPE      IN PHONE%ROWTYPE
   ,inPOLLING_ROWTYPE        IN POLLING%ROWTYPE
   ,inREAL_ESTATE_ROWTYPE    IN REAL_ESTATE%ROWTYPE
   ,inSALES_REP_ROWTYPE      IN SALES_REP%ROWTYPE
   ,inSTATUS_ROWTYPE         IN STATUS%ROWTYPE
   ,inSTORE_ROWTYPE          IN STORE%ROWTYPE
   ,inTERMINAL_ROWTYPE       IN TERMINAL%ROWTYPE
   ,inTERRITORY_ROWTYPE      IN TERRITORY%ROWTYPE
   ,inTYPE_ROWTYPE           IN TYPE%ROWTYPE
 )
                IS         
v_code                 number;
v_errm                 varchar(500);
v_cost_center_rowtype  COST_CENTER%ROWTYPE;
v_break                varchar(100);
V_TERMINAL_ACTIVE_FLAG varchar2(1)  := 'Y';
V_STATEMENT_TYPE       COST_CENTER.STATEMENT_TYPE%TYPE;
--
--
BEGIN --  BUSINESS_RULES_SP
-- 
v_break  :=  ('Entered the Business_Rules_SP ' 
              || ' in_cost_center = ' || inCOST_CENTER_ROWTYPE.cost_center_code ); 
--
--
--  BEGIN
--  
--  
/*****************************************************************
 **             Call COST_CENTER to get Dates, etc.             **
--This will fail on insert ..... only need to do if this is an update.
but this validation should be done before call to this procedure happens.
 *****************************************************************/
--      SELECT * into v_cost_center_rowtype
--            from COST_CENTER          
--            where cost_center_code = inCOST_CENTER_ROWTYPE.cost_center_code; 
--            
--  EXCEPTION
--     WHEN NO_DATA_FOUND then
--           raise invalid_cost_center_err;
--                  
--  END; -- get Cost Center
--
--
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
	                       TABLE SPECIFIC RULES
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/	
--
--
--  dbms_output.put_line('Entering Table Specific Business Rules Test' );
v_break  := ('Entering Table Specific Business Rules' 
|| ' in_cost_center = ' || inCOST_CENTER_ROWTYPE.cost_center_code ); 
--
--
/**  Call ADDRESS_CAN Table Business Rule ***/
   IF (inADDRESS_CAN_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Address Canada Business Rules '); 
      CCN_BUSINESS_RULES_PKG.ADDRESS_CAN_BR_SP(
            inaddress_can_rowtype, inCOST_CENTER_ROWTYPE );          
   END IF ;
--
--
/**  Call ADDRESS_MEX Table Business Rule ***/
   IF (inADDRESS_MEX_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Address Mexico Business Rules '); 
      CCN_BUSINESS_RULES_PKG.ADDRESS_MEX_BR_SP(
            inaddress_mex_rowtype, inCOST_CENTER_ROWTYPE );          
   END IF ;
--
--
/**  Call ADDRESS_OTHER Table Business Rule ***/
   IF (inADDRESS_OTH_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Address Other Business Rules '); 
      CCN_BUSINESS_RULES_PKG.ADDRESS_OTH_BR_SP(
            inaddress_oth_rowtype, inCOST_CENTER_ROWTYPE );          
   END IF ;   
--
--
/**  Call ADDRESS_USA Table Business Rule ***/
   IF (inADDRESS_USA_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Address USA Business Rules '); 
      CCN_BUSINESS_RULES_PKG.ADDRESS_USA_BR_SP(
            inaddress_usa_rowtype, inCOST_CENTER_ROWTYPE );          
   END IF ;   
--
--
/**  Call ADDRESS_BRB Table Business Rule ***/
   IF (inADDRESS_BRB_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Address BRB Business Rules '); 
      --CCN_BUSINESS_RULES_PKG.ADDRESS_BRB_BR_SP(inaddress_brb_rowtype, inCOST_CENTER_ROWTYPE );          
      --Barbados TBD
   END IF ;   
--
--
/**  Call ADMINISTRATION Table Business Rule ***/
   IF (inADMIN_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      CCN_BUSINESS_RULES_PKG.ADMINISTRATION_BR_SP(
            inadmin_rowtype          
 					, incost_center_rowtype); 
   END IF ;

       BEGIN
           SELECT STATEMENT_TYPE
             INTO V_STATEMENT_TYPE
             FROM COST_CENTER
            WHERE COST_CENTER_CODE = inBANKCARD_ROWTYPE.cost_center_code;
       EXCEPTION WHEN OTHERS THEN NULL;
       END;
--
--
/**  Call BANK_CARD Table Business Rule ***/
   IF (inBANKCARD_ROWTYPE.cost_center_code  IS NOT NULL AND 
       --Adding the logic to suppress merchant id rules, bank card rules and history rules when statement type is TR
       NVL(V_STATEMENT_TYPE,'XXX') NOT IN ('TR') AND
       --Adding the logic to suppress merchant id rules, bank card rules and history rules when status changed to I
       inBANKCARD_ROWTYPE.polling_status_code <> 'I') THEN
       v_break  := ('Processing BankCard Business Rules '); 
       CCN_BUSINESS_RULES_PKG.BANK_CARD_BR_SP(
            inbankcard_rowtype          
 					, incost_center_rowtype
          , inpolling_rowtype); 
   END IF ;
   --
--
/**  Call COST_CENTER Table Business Rule ***/
   IF (inCOST_CENTER_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Cost Center Business Rules '); 
      CCN_BUSINESS_RULES_PKG.COST_CENTER_BR_SP(
 				    incost_center_rowtype 
          , inaddress_can_rowtype
          , inaddress_mex_rowtype
          , inaddress_oth_rowtype
          , inaddress_usa_rowtype
          , inaddress_brb_rowtype);
  END IF ; 
--
--
/**  Call MARKETING Table Business Rule - no rules 09/25/2012 mdh ***/
--   IF (inMARKETING_ROWTYPE.cost_center_code  is not null)  then
--      CCN_BUSINESS_RULES_PKG.MARKETING_BR_SP(
-- 					  incost_center_rowtype
--          , inmarketing_rowtype); 
--   END IF ;   
--
--
/**  Call OTHER Table Business Rule ***/
   IF (inOTHER_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing OTHER Business Rules ');    
      CCN_BUSINESS_RULES_PKG.OTHER_BR_SP(
 					  incost_center_rowtype
          , inother_rowtype); 
   END IF ; 
--
--
/**  Call PHONE Table Business Rule ***/
   IF (inPHONE_ROWTYPE.cost_center_code  IS NOT NULL)   THEN 
       v_break  := ('Processing Phone Business Rules '); 
       CCN_BUSINESS_RULES_PKG.PHONE_BR_SP(
 					  inphone_rowtype       
           ,incost_center_rowtype);
           
   END IF ; 
--
  IF (inPHONE_PRI_ROWTYPE.cost_center_code  IS NOT NULL)   THEN 
       v_break  := ('Processing Phone Business Rules - PRI '); 
       CCN_BUSINESS_RULES_PKG.PHONE_BR_SP(
 					 inphone_rowtype  
          ,incost_center_rowtype );
           
   END IF ; 
--
  IF (inPHONE_SCD_ROWTYPE.cost_center_code  IS NOT NULL)   THEN 
       v_break  := ('Processing Phone Business Rules - SCD '); 
       CCN_BUSINESS_RULES_PKG.PHONE_BR_SP(
 					  inphone_rowtype      
           ,incost_center_rowtype );
           
   END IF ; 
   
--
--
/**  Call POLLING Table Business Rule - no rules 09/25/2012 mdh ***/
 /*IF (inPOLLING_ROWTYPE.cost_center_code  is not null)  then
    -- CCN_BUSINESS_RULES_PKG.POLLING_BR_SP(
 					  --incost_center_rowtype
         -- , INPOLLING_ROWTYPE); 
   END IF ;   */
--
--
/**  Call REAL_ESTATE Table Business Rule ***/
   IF (inREAL_ESTATE_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Real Estate Business Rules ');    
      CCN_BUSINESS_RULES_PKG.REAL_ESTATE_BR_SP(
 					  incost_center_rowtype
          , inreal_estate_rowtype); 
   END IF ;      
--
--
/**  Call SALES_REP Table Business Rule ***/
   IF (inSALES_REP_ROWTYPE.gems_employee_id  IS NOT NULL)  THEN
       v_break  := ('Processing Sales Rep Business Rules '); 
       CCN_BUSINESS_RULES_PKG.SALES_REP_BR_SP(
 					  insales_rep_rowtype );
    END IF ; 
--
--
/**  Call STATUS Table Business Rule - no rules 09/25/2012 mdh ***/
--   IF (inSTATUS_ROWTYPE.cost_center_code  is not null)  then
--      CCN_BUSINESS_RULES_PKG.STATUS_BR_SP(
-- 					  incost_center_rowtype
--          , instatus_rowtype); 
--   END IF ;       
--
--
/**  Call STORE Table Business Rule ***/
   IF (inSTORE_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing STORE Business Rules ');   
      CCN_BUSINESS_RULES_PKG.STORE_BR_SP(
 					  instore_rowtype
          , incost_center_rowtype); 
   END IF ; 
--
--
/**  Call TERMINAL Table Business Rule ***/
   IF (inTERMINAL_ROWTYPE.cost_center_code  IS NOT NULL)  THEN
      v_break  := ('Processing Terminal Business Rules ');    
      CCN_BUSINESS_RULES_PKG.TERMINAL_BR_SP(
            interminal_rowtype, inpolling_rowtype ); 
   END IF ;   
--
--
/**  Call TERRITORY Table Business Rule ***/
   IF (inTERRITORY_ROWTYPE.cost_center_code  IS NOT NULL AND inCOST_CENTER_ROWTYPE.close_date IS NULL)  THEN
      v_break  := ('Processing Territory Business Rules ') ;  
      CCN_BUSINESS_RULES_PKG.TERRITORY_BR_SP(
 					  incost_center_rowtype
          , interritory_rowtype); 
   END IF ;   

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
	                       BUSINESS SPECIFIC RULES
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/	
--
--
v_break  := ('Entering Business Specific Rules' 
|| ' in_cost_center = ' || inCOST_CENTER_ROWTYPE.cost_center_code ); 
--
--
/**  Call CLOSED COST CENTER Business Rule ***/
IF (inCOST_CENTER_ROWTYPE.cost_center_code  IS NOT NULL)  THEN --Added to avoid un-necessary validations [27-Aug-2013]
   IF (inCOST_CENTER_ROWTYPE.close_date IS NOT NULL)  OR
      (inSTATUS_ROWTYPE.status_code  IS NOT NULL)  THEN
        IF (inSTATUS_ROWTYPE.STATUS_CODE IN ('X','5','8')) OR 
           (inCOST_CENTER_ROWTYPE.CLOSE_DATE IS NOT NULL) THEN 
              v_break  := ('Processing Closed Cost Center Business Rules '); 
              CCN_BUSINESS_RULES_PKG.close_ccntr_sp
               (instatus_rowtype,
                incost_center_rowtype,
                interritory_rowtype );
       END IF;
   END IF;
END IF;
--
--
/**  Call REOPEN CLOSED COST CENTER Business Rule ***/
--    IF (inCOST_CENTER_ROWTYPE.close_date is null)  or
--      ((inSTATUS_ROWTYPE.status_code  is not null)  and
--       (inSTATUS_ROWTYPE.status_code in ('X','5','8'))) then
--        v_break  := ('Processing Reopen Cost Center Business Rules '); 
--        CCN_BUSINESS_RULES_PKG.reopen_ccntr_sp
--               (instatus_rowtype,
--                incost_center_rowtype,
--                interritory_rowtype,
--                intype_rowtype);
--   END IF;

--
--
/**  Call DESTINATION POINT / CHECK DIGIT Business Rule ***/
   IF (inADDRESS_USA_ROWTYPE.cost_center_code  IS NOT NULL) AND
      (inADDRESS_USA_ROWTYPE.COUNTRY_CODE <> 'PRI') AND
      ((inADDRESS_USA_ROWTYPE.check_digit IS NOT NULL)  OR
       (inADDRESS_USA_ROWTYPE.destination_point IS NOT NULL)) THEN
      v_break  := ('Processing Check Digit/Dest. Point Business Rules ');       
      CCN_BUSINESS_RULES_PKG.DEST_PT_CHECK_DGT_ID_SP(
            inaddress_usa_rowtype.check_digit
          , inaddress_usa_rowtype.destination_point
          , inaddress_usa_rowtype.address_type );          
   END IF ;         
--
--
/**  Call MERCHANT ID Business Rule ***/
   IF (inBANKCARD_ROWTYPE.cost_center_code  IS NOT NULL AND 
       --Adding the logic to suppress merchant id rules, bank card rules and history rules when statement type is TR
       NVL(V_STATEMENT_TYPE,'XXX') NOT IN ('TR') AND
       --Adding the logic to suppress merchant id rules, bank card rules and history rules when status changed to I
       inBANKCARD_ROWTYPE.polling_status_code <> 'I')  THEN
      v_break  := ('Processing Merchant ID Business Rules ');      
      CCN_BUSINESS_RULES_PKG.MERCHANT_ID_SP(
            inbankcard_rowtype.MERCHANT_ID          
 					, inPOLLING_ROWTYPE.COST_CENTER_CODE 
 					, inPOLLING_ROWTYPE.polling_status_code);
   END IF ;
--
--
/**  Call POLLING STATUS HISTORY Business Rule ***/
/***   add V_TERMINAL_ACTIVE_FLAG parameter to verify that there is an
           active terminal record.  mdh 10/11/2012)                     ***/
   IF (inPOLLING_ROWTYPE.cost_center_code  IS NOT NULL)  AND  
      (inPOLLING_ROWTYPE.polling_status_code  IS NOT NULL) AND
       --Adding the logic to suppress merchant id rules, bank card rules and history rules when statement type is TR
       NVL(V_STATEMENT_TYPE,'XXX') NOT IN ('TR') AND
       --Adding the logic to suppress merchant id rules, bank card rules and history rules when status changed to I
       inBANKCARD_ROWTYPE.polling_status_code <> 'I' THEN
--      dbms_output.put_line('Processing Polling Status Business Rules ');        
      v_break  := ('Processing Polling Status Business Rules ');     
      CCN_BUSINESS_RULES_PKG.POLLING_STATUS_HIST_SP(
            inCOST_CENTER_ROWTYPE      
           ,inPOLLING_ROWTYPE        
           ,inSTATUS_ROWTYPE        
           ,inTYPE_ROWTYPE          
           ,inTERMINAL_ROWTYPE
           ,V_TERMINAL_ACTIVE_FLAG      
           ,inBANKCARD_ROWTYPE      
           ,inPHONE_ROWTYPE
           ,inPHONE_PRI_ROWTYPE
           ,inPHONE_SCD_ROWTYPE
           ,inSTORE_ROWTYPE            
           ,inADDRESS_CAN_ROWTYPE    
           ,inADDRESS_MEX_ROWTYPE    
           ,inADDRESS_OTH_ROWTYPE    
           ,inADDRESS_USA_ROWTYPE   
           ,inADDRESS_BRB_ROWTYPE   
           );

   END IF ;   
--
--
/**  Call TERRITORY HOME STORE Business Rule ***/
   IF (inTERRITORY_ROWTYPE.cost_center_code  IS NOT NULL)  AND  
      (inTERRITORY_ROWTYPE.CATEGORY  IS NOT NULL)  AND
      (inTERRITORY_ROWTYPE.home_store IS NOT NULL)     THEN
        v_break  := ('Processing Territory Home Store Business Rules ');       
        CCN_BUSINESS_RULES_PKG.TERRITORY_HOME_STORE_ASSIGN_SP(           
          incost_center_rowtype
         ,inTERRITORY_ROWTYPE);
   END IF ;   
--
--
v_break  :=  ('Completed the Business_Rules_SP ' 
              || ' in_cost_center = ' || inCOST_CENTER_ROWTYPE.cost_center_code ); 
--
--
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
	                       E X C E P T I O N S 
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/	
--
--
 EXCEPTION
       
       WHEN OTHERS THEN
                    v_code := SQLCODE;
                    v_errm := substr(SQLERRM,12, 500);
                    errpkg.raise_err(v_code, ' BUSINESS_RULES_SP Error ',
                    v_errm
                );   

 END Business_Rules_sp;
/*****************************************************************************/
--
PROCEDURE MERCHANT_ID_SP (
/*****************************************************************************
	MERCHANT_ID_SP

	This procedure is intended enforce the Business Rules
	for verifying the Merchant_ID_Code on the BANK_CARD Table
	TRD  Section: 3.3.3 

created : KDP 4/26/2012
******************************************************************************/	
	inMERCHANT_ID IN BANK_CARD.MERCHANT_ID%TYPE
	,inCOST_CENTER_CODE IN COST_CENTER.COST_CENTER_CODE%TYPE
	,inPOLLING_STATUS_CODE IN POLLING.POLLING_STATUS_CODE%TYPE)
        IS 
                      
                      
 non_numeric_exp 		EXCEPTION;
 invalid_merchID_exp    EXCEPTION;
 cost_center_exp 		EXCEPTION;
 check_digit_exp 		EXCEPTION;
 v_POLLING_STATUS_CODE  POLLING.POLLING_STATUS_CODE%TYPE;

 v_code number;
 v_errm varchar(500);
 
	BEGIN

		IF (LENGTH(TRIM(TRANSLATE(inMERCHANT_ID, ' +-.0123456789',' '))) IS NOT NULL) THEN 
			RAISE non_numeric_exp ;
		END IF;
-- dbms_output.put_line('raise not throw'); 

		IF (NVL(inMERCHANT_ID,'99999999999') = '99999999999') AND (inPOLLING_STATUS_CODE = 'P' ) THEN 
			RAISE invalid_merchID_exp ;
		END IF;		

		IF (SUBSTR(inMERCHANT_ID, 7, 4) <> SUBSTR(inCOST_CENTER_CODE,3,4)) THEN
			--RAISE cost_center_exp; 
      ERRPKG.STORE_WARNINGS(errnums.en_cost_center_err,
                            'MERCHANT_ID_SP.cost_center_exp ' || 'CCN_BUSINESS_RULES_PKG ');
		END IF;

		IF (CCN_BUSINESS_RULES_PKG.MODULUS_10(SUBSTR(INMERCHANT_ID,3,8)) <> SUBSTR(INMERCHANT_ID,11,1)) THEN
      RAISE check_digit_exp;
		END IF;	

	EXCEPTION
	
		WHEN non_numeric_exp THEN  
				  v_code := errnums.en_non_numeric_err;
			      errpkg.raise_err(v_code, 'MERCHANT_ID_SP.non_numeric_exp ' ||
             	 	'CCN_BUSINESS_RULES_PKG ', 'MERCHANT_ID have non numeric number');
		WHEN invalid_merchID_exp THEN  
				  v_code := errnums.en_invalid_merchID_err;
			      errpkg.raise_err(v_code, 'MERCHANT_ID_SP.invalid_merchID_exp ' ||
             		'CCN_BUSINESS_RULES_PKG ');             		
		WHEN cost_center_exp THEN  
				  v_code := errnums.en_cost_center_err;
			      errpkg.raise_err(v_code, 'MERCHANT_ID_SP.cost_center_exp ' ||
             		'CCN_BUSINESS_RULES_PKG ');             		             		
		WHEN check_digit_exp THEN  
				  v_code := errnums.en_check_digit_err;
			      errpkg.raise_err(v_code, 'MERCHANT_ID_SP.check_digit_exp ' ||
             		'CCN_BUSINESS_RULES_PKG ');             		             		
		WHEN OTHERS THEN
					v_code := SQLCODE;
					v_errm := substr(SQLERRM,1, 500);
			      errpkg.raise_err(v_code, v_errm ||
             		'CCN_BUSINESS_RULES_PKG ');             		             		
	END MERCHANT_ID_SP; 
	
FUNCTION MODULUS_10 (inValidate_nbr IN varchar)
/******************************************************************************
	MODULUS_10

	This function will calculate the check digit for a number
	passed in.  DO NOT PASS THE CHECK DIGIT WITH THE NUMBER.

created : KDP 4/26/2012modulu
******************************************************************************/	
RETURN number
IS
    v_curval NUMBER := 0;
    v_total NUMBER := 0;
    v_other_digit NUMBER := 1;
    
BEGIN

  IF(inValidate_nbr IS NULL) THEN
    RETURN 0;
  END IF;
  
  FOR i IN REVERSE 1 .. LENGTH(inValidate_nbr) LOOP
  
    v_curval:=SUBSTR(inValidate_nbr, i, 1);

    IF v_other_digit = 1 THEN
       v_other_digit := 0;
       v_curval := v_curval * 2;
      
      IF(v_curval> 9) THEN
        v_curval := v_curval-9;
      END IF;
    ELSE
       v_other_digit := 1;
    END IF;
   
    v_total := v_total + v_curval;
  
  END LOOP;

  IF MOD(v_total, 10) = 0 THEN
    RETURN 0;
  ELSE
    RETURN 10 - MOD(v_total, 10);
  END IF;
  
END MODULUS_10;	


PROCEDURE CLOSE_CCNTR_SP ( 
/*****************************************************************************
	CLOSE_CCNTR_SP

	This procedure is intended enforce the Business Rules
	for closing a cost center and verifying the following rules:
  
  1.)  The close_date.COST_CENTER is populated
  2.)  The status_code.STATUS is "5" (Stores) or "X" (Territories), or "9" for all others
  3.)  Store Cost Centers are not Home Store for any Teritory Ccntr
  4.)  Territory Cost Centers are not connected to any Store Cccnt
	TRD  Section: 3.3.2 

  All changes require a new "STATUS" table row being inserted and any
  previous active "STATUS" rows being expired using the effective date
  of the row - 1 day.
  
  Also, since we now have a new "TYPE" table, any active type records, should 
  we expire them as well using the expiration date of the "STATUS" table?
  
created : NDH 05/18/2012
revised : TAL 04/15/2012 CCNQC-018 Remove SELECT for Active STATUS Record
          MDH 05/09/2013 ORA-20010 DO not check Close_Date equal Startus Effective 
                                   Date for status_code "9" rows
          MDH 05/17/2013 ORA-20010 Add Closing Status of "8" for all non STORe  
                                   or TERRITORY Cost centers.  
          NXK927 01/08/2015        ADDED POS NON STORE INDICATOR and LET THE STORE BE CLOSED WITH 
                                   STATUS OF "8" FOR STORE FOR NON POS STORE
          AXK326 02/27/2015        Modified error to be raised when the closing store cost center is
                                   a home store for atleast one territory cost center
          jxc517 03/19/2015        corrected error code from en_invalid_close_status_err to
                                   en_invalid_status_err in exception handling
******************************************************************************/	
  inSTATUS_ROWTYPE       IN STATUS%ROWTYPE
 ,inCOST_CENTER_ROWTYPE  IN COST_CENTER%ROWTYPE
 ,inTERRITORY_ROWTYPE    IN TERRITORY%ROWTYPE )
        IS 
                         
 non_numeric_exp 		        EXCEPTION;
 invalid_ccntr_close_exp    EXCEPTION;
 invalid_status_code_exp    EXCEPTION;
-- no_act_status_rec_exp      EXCEPTION;   TAL 04/15/2012 CCNQC-018
 close_store_asgn_terr_exp  EXCEPTION;
 no_territory_exp           EXCEPTION;
 close_terr_asgn_store_exp  EXCEPTION;
 invalid_close_date_exp     EXCEPTION;
 invalid_close_status_exp   EXCEPTION;
 v_count                    NUMBER;
 
-- v_status_rowtype  STATUS%ROWTYPE;   TAL 04/15/2012 CCNQC-018
 v_territory_rowtype TERRITORY%ROWTYPE;

 
 v_curr_date date := sysdate;
 v_code number;
 v_errm varchar(500);
 
BEGIN
/******************************************************************************
	If the status is not an "X" or "5" and the Close date is null, 
  you should not be in this business rule.
  05/17/2013 MDH Status_Code of "9" changed to "8" for all on STORE & TERRITORY ccntrs. 
****************************************************************************/	
 
  IF (inSTATUS_ROWTYPE.STATUS_CODE NOT IN ('X','5','8')) AND 
     (inCOST_CENTER_ROWTYPE.CLOSE_DATE IS NULL) THEN 
        RAISE invalid_ccntr_close_exp;
  END IF;

/******************************************************************************
	If the status is an "X", "5", or "8" and the Close date is entered, it must 
  match the effective date of the new STATUS table row being inserted.
  If not, the effective date of the STATUS table row becomes the Close Date
  05/23/2012 for now we will raise an error.
  05/07/2013 MDH Do not check Close_Date equal Effective Date of STATUS 
                 table for Status_Code "9" rows per Pat Malloy.
  05/17/2013 MDH Status_Code of "9" changed to "8" for all on STORE & TERRITORY ccntrs.               
*******************************************************************************/	
    IF (inSTATUS_ROWTYPE.STATUS_CODE  IN ('X','5','8')) AND 
       (inCOST_CENTER_ROWTYPE.CLOSE_DATE   <> inSTATUS_ROWTYPE.EFFECTIVE_DATE) THEN 
        RAISE invalid_close_date_exp;
    END IF;


     
/*******************************************************************************
	get the active Status Table row.
           
  an active STATUS record is defined as cost center
                                        status code
                                        effective_date.
     The expiration date of null tells us we have an active STATUS
*******************************************************************************/

/******* TAL 04/15/2012 CCNQC-018 Remove SELECT for Active STATUS Record *******
**  When a cost center is closed, an active Status record is added with the 
**  effective date as the close date. The expiration date is always zero or null
BEGIN
	select *  into v_status_rowtype
		from STATUS 
		where STATUS.cost_center_code    =  inCOST_CENTER_ROWTYPE.Cost_Center_Code and
          STATUS.effective_date  <=  v_curr_date     and
          STATUS.expiration_date  is  null;
EXCEPTION
  WHEN NO_DATA_FOUND then
     raise no_act_status_rec_exp;
  
END;
******** TAL 04/15/2012 CCNQC-018 Remove SELECT for Active STATUS Record ******/

/*******************************************************************************
	if the Close Date has ben changed or is not null and the current status is not
  'X', '5', or '8', we will set it.
  05/22/2012 mdh for now just raise and error.
  05/17/2013 MDH Status_Code of "9" changed to "8" for all on STORE & TERRITORY ccntrs.
*******************************************************************************/	  	
	  IF (inCOST_CENTER_ROWTYPE.CLOSE_DATE  IS NOT NULL)  AND
       (inSTATUS_ROWTYPE.STATUS_CODE NOT IN ('X','5','8')) THEN
          RAISE invalid_close_status_exp;
    END IF;

/*******************************************************************************
	if the Cost Center is a Store (S) AND POS-STORE then the Status Code must be "5".
  if the Cost Center is a Store (S) AND NON POS COST CENTER then the Status Code must be "8".
  If the Cost Center is a Teritory (T) the Status Code must be "X"
  For all other Cost Centers, the Status Code must be "8"
  05/20/2013 MDH 
  UPDATED: NXK927 01/08/2015
*******************************************************************************/	  	
      IF (inCOST_CENTER_ROWTYPE.CLOSE_DATE  IS NOT NULL)  THEN
        IF (inCOST_CENTER_ROWTYPE.CATEGORY IN  ('S')  AND
	          inCOST_CENTER_ROWTYPE.POS_NON_STORE_IND = 'N' AND
            inSTATUS_ROWTYPE.STATUS_CODE NOT IN ('5')) 
           OR
           (inCOST_CENTER_ROWTYPE.CATEGORY IN  ('S')  AND
	          inCOST_CENTER_ROWTYPE.POS_NON_STORE_IND = 'Y' AND
            inSTATUS_ROWTYPE.STATUS_CODE NOT IN ('8')) 
           OR
           (inCOST_CENTER_ROWTYPE.CATEGORY IN  ('T')  AND
            inSTATUS_ROWTYPE.STATUS_CODE NOT IN ('X'))   
           OR
           (inCOST_CENTER_ROWTYPE.CATEGORY NOT IN  ('S','T')  AND
            inSTATUS_ROWTYPE.STATUS_CODE NOT IN ('8'))     THEN      
          RAISE invalid_status_code_exp;
        END IF;
      END IF;
        
/*******************************************************************************
	For Store and Territory Close Cost centers, they cannot be a HOME_STORE
  (TERRITORY Table) to any Territory or Vice Versa.
  STORE:     Cannot be a Home_Store for any territory
  Territory: Must be on TERRITORY table
             Must not have a Home_Store Assignment
*******************************************************************************/	      
 BEGIN
 
  IF (inSTATUS_ROWTYPE.STATUS_CODE  IN ('X','5'))  AND 
     (inCOST_CENTER_ROWTYPE.CATEGORY = 'S')    THEN
     SELECT count(*)  INTO v_count
	   	 FROM TERRITORY 
	   	 WHERE TERRITORY.HOME_STORE =  inCOST_CENTER_ROWTYPE.COST_CENTER_CODE ;       
     IF v_count > 0 THEN
        RAISE close_store_asgn_terr_exp;
     END IF;
END IF;

 EXCEPTION
       WHEN NO_DATA_FOUND THEN
          NULL;
END;
  -- Territory
BEGIN
  IF (inSTATUS_ROWTYPE.STATUS_CODE  IN ('X','5'))  AND 
     (inCOST_CENTER_ROWTYPE.CATEGORY = 'T')    THEN
--     select *  into v_territory_rowtype
--	   	 from TERRITORY 
--	   	 where v_territory_rowtype.COST_CENTER_CODE =  inCOST_CENTER_CODE ;
       IF inTERRITORY_ROWTYPE.COST_CENTER_CODE IS NULL  OR 
         (inTERRITORY_ROWTYPE.COST_CENTER_CODE IS NOT NULL  AND
          inTERRITORY_ROWTYPE.COST_CENTER_CODE  <> inCOST_CENTER_ROWTYPE.cost_center_code) THEN
           RAISE no_territory_exp;
       END IF;
       
       IF inTERRITORY_ROWTYPE.COST_CENTER_CODE = inCOST_CENTER_ROWTYPE.cost_center_code  AND     
          inTERRITORY_ROWTYPE.HOME_STORE  IS NOT NULL THEN
            RAISE close_terr_asgn_store_exp;
       END IF ;
  END IF;
--EXCEPTION  
--    when NO_DATA_FOUND then
--         raise no_territory_exp;
END;
/******************************************************************************  
  check CPR view looking for any account still attached to a store or 
  territory cost center.  If one is found force an error.
     to be added from CPR
******************************************************************************/  
  -- raise ar_accts_assigned_exp;
  
/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	EXCEPTION
	
		WHEN invalid_ccntr_close_exp THEN  
					v_code := errnums.en_ccntr_close_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.invalid_ccntr_close_exp '
             		,'Cost Center is not in a closed status ');
                
/******* TAL 04/15/2012 CCNQC-018 Remove SELECT for Active STATUS Record *******
    when no_act_status_rec_exp then  
		   		v_code := errnums.en_no_act_status_rec_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.no_act_status_rec_exp '
             		,'No Cost Center active status has been found ');
******** TAL 04/15/2012 CCNQC-018 Remove SELECT for Active STATUS Record ******/

    WHEN close_store_asgn_terr_exp THEN  
		   		v_code := errnums.en_close_store_asgn_terr_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.store_asgn_terr_exp ' 
             		,'Cost Center is home store for: ' ||
                v_territory_rowtype.COST_CENTER_CODE ||
                ' cannot close! ');              
    WHEN no_territory_exp THEN  
		   		v_code := errnums.en_no_territory_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.no_territory_exp ' 
             		,'Territory is not found for cost center : ' ||
                 inCOST_CENTER_ROWTYPE.cost_center_code ||
                ' cannot check for home store assignment! ');       
    WHEN close_terr_asgn_store_exp THEN  
		   		v_code := errnums.en_close_terr_asgn_store_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.close_terr_asgn_store_exp '
             		,'Territory has a home store assignment to cost center : '  ||
                inTERRITORY_ROWTYPE.HOME_STORE ||
                ' cannot close! ');                           
    WHEN invalid_close_date_exp THEN  
  				v_code := errnums.en_invalid_close_date_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.invalid_close_date_exp '
             		,'Close date does not match effective date for cost center ');        
    WHEN invalid_close_status_exp THEN  
          v_code := errnums.en_invalid_close_status_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.invalid_close_status_exp ' 
             		,'Close Date entered - No <CLOSE> status code entered ');
    WHEN invalid_status_code_exp THEN  
  				v_code := errnums.en_invalid_status_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.invalid_status_code_exp ' 
             		,'Cost Center: '  ||  inCOST_CENTER_ROWTYPE.COST_CENTER_CODE  || 
             		 ' Status Code: '  ||  inSTATUS_ROWTYPE.STATUS_CODE  || 
                ' is invalid for Cost Center Category: ' || 
                inCOST_CENTER_ROWTYPE.CATEGORY);            
 --   when ar_accts_assigned_exp then  
 -- 				v_code := errnums.en_ar_accts_assigned_err;
 --			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.ar_accts_assigned_exp ' ||
 --            		'Cost Center is assigned to account/job ');  
		WHEN OTHERS THEN
					v_code := SQLCODE;
					v_errm := substr(SQLERRM,1, 500);
			      errpkg.raise_err(v_code, v_errm ||
             		'CCN_BUSINESS_RULES_PKG ');   
                 
END CLOSE_CCNTR_SP;


/******************************************************************************/
PROCEDURE DEST_PT_CHECK_DGT_ID_SP(
/*******************************************************************************
	DEST_PT_CHECK_DGT_ID_SP

	This procedure is intended enforce the Business Rules
	for verifying the the Check_digit on the Address_USA Table
	TRD  Section: 3.3.4 

created : BLR 5/17/2012
*******************************************************************************/	
 inCheck_digit      IN ADDRESS_USA.check_digit%TYPE
,inDest_point       IN ADDRESS_USA.destination_point%TYPE 
,inAddress_type     IN ADDRESS_USA.address_type%TYPE)   
	
         IS              
 non_numeric_err  	         	EXCEPTION; 
 check_digit_err 	          	EXCEPTION;
 dest_point_err 	          	EXCEPTION;
 chk_dgt_non_numb_err        	EXCEPTION;
 dest_pt_non_numb_err        	EXCEPTION;
 
 divsor_n number;
 divend_n number;
 rem_n number;
 v_code number;
 v_count number;
 v_errm varchar(500);


 BEGIN
  
  /*check for existing cost_center number data */
 
 --Country code in Cost_center must be USA for additional checks  
 --check digit must be numeric and check digit cannot be equal to zero   
       -- v_addr_usa_rowtype.check_digit := 'F';
       
     
      IF (TRANSLATE(inCheck_digit, ' +-.0123456789',' ') IS NOT NULL) THEN 
         RAISE chk_dgt_non_numb_err ;
      END IF;
    
      IF inCheck_digit < '0'  THEN 
          RAISE check_digit_err ;
      END IF;	
      
      IF (TRANSLATE(inDest_point, ' +-.0123456789','  ') IS NOT NULL) THEN 
      	RAISE dest_pt_non_numb_err ;
	    END IF; 
    
      IF inDest_point < '00' THEN 
         RAISE dest_point_err ;
      END IF;		
      
 	EXCEPTION
	
	   WHEN CHECK_DIGIT_ERR THEN  
					v_code := errnums.en_check_digit_err;
		      ERRPKG.RAISE_ERR(V_CODE, 'DEST_PT_CHECK_DGT_ID_SP.check_digit_err ', 
       		'CCN_BUSINESS_RULES_PKG' ||  ' - Check digit must be greater or equal to zero');   
                
     WHEN chk_dgt_non_numb_err THEN  
					v_code := errnums.en_chk_dgt_non_numb_err;
		      errpkg.raise_err(v_code, 'DEST_PT_CHECK_DGT_ID_SP.chk_dgt_non_numb_err ',
       		'CCN_BUSINESS_RULES_PKG' ||  ' - Check digit must be numeric');   
                       		             		
     WHEN DEST_POINT_ERR THEN  
					v_code := errnums.en_dest_point_err;
			    ERRPKG.RAISE_ERR(V_CODE, 'DEST_PT_CHECK_DGT_ID_SP.dest_point_err ',
         	'CCN_BUSINESS_RULES_PKG' ||  ' - Destination Point must be  greater or equal to zero');   
          		             		
     WHEN dest_pt_non_numb_err THEN  
					v_code := errnums.en_dest_pt_non_numb_err;
			    errpkg.raise_err(v_code, 'DEST_PT_CHECK_DGT_ID_SP.dest_pt_non_numb_err ',
          'CCN_BUSINESS_RULES_PKG' ||  ' - Destination Point must be numeric');   
                
		 WHEN OTHERS THEN
					v_code := SQLCODE;
					v_errm := substr(SQLERRM,1, 500);
			     errpkg.raise_err(v_code, v_errm ||
          'CCN_BUSINESS_RULES_PKG ' || 'no errors found');     
               
                
 END DEST_PT_CHECK_DGT_ID_SP;
 
 
PROCEDURE POLLING_STATUS_HIST_SP (
/*******************************************************************************
	POLLING_STATUS_HIST_SP

	This procedure is intended enforce the Business Rules
	for verifying the POLLING_STATUS_Code on the POLLING Table
	TRD  Section: 3.3.6

created : BLR  6/13/2012
revised : MDH 10/11/2012
revised : BLR  4/16/2013  CCNA-352 Stop procedure from erroring on Inactive
                          polling_status_code.
revised : 8/27/2013 Added logic to get the missing data before calling the
                    validations for polling
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
*******************************************************************************/	
   inCOST_CENTER_ROWTYPE    IN COST_CENTER%ROWTYPE  
  ,inPOLLING_ROWTYPE        IN POLLING%ROWTYPE    
  ,inSTATUS_ROWTYPE         IN STATUS%ROWTYPE
  ,inTYPE_ROWTYPE           IN TYPE%ROWTYPE
  ,inTERMINAL_ROWTYPE       IN TERMINAL%ROWTYPE    
  ,V_TERMINAL_ACTIVE_FLAG   IN varchar2
  ,inBANKCARD_ROWTYPE       IN BANK_CARD%ROWTYPE
  ,inPhone_ROWTYPE          IN PHONE%ROWTYPE
  ,inPHONE_PRI_ROWTYPE      IN PHONE%ROWTYPE
  ,inPHONE_SCD_ROWTYPE      IN PHONE%ROWTYPE
  ,inSTORE_ROWTYPE          IN STORE%ROWTYPE         
  ,inADDRESS_CAN_ROWTYPE    IN ADDRESS_CAN%ROWTYPE
  ,inADDRESS_MEX_ROWTYPE    IN ADDRESS_MEX%ROWTYPE
  ,inADDRESS_OTH_ROWTYPE    IN ADDRESS_OTHER%ROWTYPE
  ,inADDRESS_USA_ROWTYPE    IN ADDRESS_USA%ROWTYPE   
  ,inADDRESS_BRB_ROWTYPE    IN ADDRESS_BRB%ROWTYPE   )
                IS                                                                                              
                
  invalid_poll_stat_err  	EXCEPTION;
  invalid_close_date_err     EXCEPTION;
    
 v_code number;
 v_count number;
 v_errm varchar(1000);
 
V_COST_CENTER_ROWTYPE       COST_CENTER%ROWTYPE;
V_STATUS_ROWTYPE            STATUS%ROWTYPE;
V_TYPE_ROWTYPE              TYPE%ROWTYPE;
V_PHONE_ROWTYPE             PHONE%ROWTYPE;
V_PHONE_PRI_ROWTYPE         PHONE%ROWTYPE;
V_PHONE_SCD_ROWTYPE         PHONE%ROWTYPE;
V_STORE_ROWTYPE             STORE%ROWTYPE;
V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%ROWTYPE;
V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%ROWTYPE;
V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%ROWTYPE;
V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%ROWTYPE;
V_ADDRESS_BRB_ROWTYPE       ADDRESS_BRB%ROWTYPE;
V_BANKCARD_ROWTYPE			BANK_CARD%ROWTYPE;
 
/*
   3.3.6   POLLING STATUS HISTORY rule is checked when new cost centers are added; 
             then the Polling record must be added with a polling status of "i" for Inactive.
             When a Cost center record is changed to a status of "p" or "q" or "i";
             the business rules are as follows: 
*/
    
	--BEGIN 
     BEGIN
IF INCOST_CENTER_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_COST_CENTER_ROWTYPE
        FROM COST_CENTER
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_COST_CENTER_ROWTYPE := INCOST_CENTER_ROWTYPE;
END IF;

IF INSTATUS_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_STATUS_ROWTYPE
        FROM STATUS
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND STATUS_CODE = 'A'
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_STATUS_ROWTYPE := INSTATUS_ROWTYPE;
END IF;

IF INTYPE_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_TYPE_ROWTYPE
        FROM TYPE
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND EXPIRATION_DATE IS NULL;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_TYPE_ROWTYPE := INTYPE_ROWTYPE;
END IF;

IF INPHONE_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_PHONE_ROWTYPE
        FROM PHONE
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND PHONE_NUMBER_TYPE = 'FAX'
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_PHONE_ROWTYPE := INPHONE_ROWTYPE;
END IF;

IF INPHONE_PRI_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_PHONE_PRI_ROWTYPE
        FROM PHONE
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND PHONE_NUMBER_TYPE = 'PRI'
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_PHONE_PRI_ROWTYPE := INPHONE_PRI_ROWTYPE;
END IF;

IF INPHONE_SCD_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_PHONE_SCD_ROWTYPE
        FROM PHONE
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND PHONE_NUMBER_TYPE = 'SCD'
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_PHONE_SCD_ROWTYPE := INPHONE_SCD_ROWTYPE;
END IF;

IF INSTORE_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_STORE_ROWTYPE
        FROM STORE
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_STORE_ROWTYPE := INSTORE_ROWTYPE;
END IF;

IF INADDRESS_CAN_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_ADDRESS_CAN_ROWTYPE
        FROM ADDRESS_CAN
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND EXPIRATION_DATE IS NULL
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_ADDRESS_CAN_ROWTYPE := INADDRESS_CAN_ROWTYPE;
END IF;

IF INADDRESS_MEX_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_ADDRESS_MEX_ROWTYPE
        FROM ADDRESS_MEX
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND EXPIRATION_DATE IS NULL
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_ADDRESS_MEX_ROWTYPE := INADDRESS_MEX_ROWTYPE;
END IF;

IF INADDRESS_OTH_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN   
      SELECT * INTO V_ADDRESS_OTHER_ROWTYPE
        FROM ADDRESS_OTHER
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND EXPIRATION_DATE IS NULL
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_ADDRESS_OTHER_ROWTYPE := INADDRESS_OTH_ROWTYPE;
END IF;

IF INADDRESS_USA_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_ADDRESS_USA_ROWTYPE
        FROM ADDRESS_USA
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND EXPIRATION_DATE IS NULL
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_ADDRESS_USA_ROWTYPE := INADDRESS_USA_ROWTYPE;
END IF;

IF INADDRESS_BRB_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_ADDRESS_BRB_ROWTYPE
        FROM ADDRESS_BRB
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
         AND EXPIRATION_DATE IS NULL
         AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_ADDRESS_BRB_ROWTYPE := INADDRESS_BRB_ROWTYPE;
END IF;

IF inBANKCARD_ROWTYPE.COST_CENTER_CODE IS NULL THEN
   BEGIN
      SELECT * INTO V_BANKCARD_ROWTYPE
        FROM BANK_CARD
       WHERE COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE
       AND EXPIRATION_DATE IS NULL;
       --AND ROWNUM < 2;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END;
ELSE
   V_BANKCARD_ROWTYPE := inBANKCARD_ROWTYPE;
END IF;
     
     
      CASE ( inPOLLING_ROWTYPE.polling_status_code) 
        WHEN 'Q' THEN
 --         ccn_business_rules_pkg.QUALITY_CTRL_STATUS_CHKS_SP 
 

            QUALITY_CTRL_STATUS_CHKS_SP (
            V_COST_CENTER_ROWTYPE   
           ,inPOLLING_ROWTYPE        
           ,V_STATUS_ROWTYPE         
           ,V_TYPE_ROWTYPE           
           ,inTERMINAL_ROWTYPE       
           ,V_TERMINAL_ACTIVE_FLAG   
           ,V_BANKCARD_ROWTYPE       ); 
           
 -- dbms_output.put_line('PROG 1');
        
        WHEN 'P' THEN
 --         ccn_business_rules_pkg.POLLING_CTRL_STATUS_CHKS_SP    
 

            POLLING_CTRL_STATUS_CHKS_SP (
            V_COST_CENTER_ROWTYPE    
           ,inPOLLING_ROWTYPE        
           ,V_STATUS_ROWTYPE         
           ,V_TYPE_ROWTYPE          
           ,inTERMINAL_ROWTYPE         
           ,V_TERMINAL_ACTIVE_FLAG   
           ,V_BANKCARD_ROWTYPE    
           ,V_Phone_ROWTYPE
           ,V_PHONE_PRI_ROWTYPE
           ,V_PHONE_SCD_ROWTYPE
           ,V_STORE_ROWTYPE                 
           ,V_ADDRESS_CAN_ROWTYPE   
           ,V_ADDRESS_MEX_ROWTYPE   
           ,V_ADDRESS_OTHER_ROWTYPE    
           ,V_ADDRESS_USA_ROWTYPE
           ,V_ADDRESS_BRB_ROWTYPE); 
           
--   BLR  4/16/2013  CCNA-352 Added Logic for Inactive status
--   inPOLLING_ROWTYPE.polling_status_code = 'I'; check close date in Cost
--     Center Table is populated. Error check requested via Pat Malloy
--     as of 4/12/13.
/*********************************************************************************
REVISED- 9/11/2013 COMMENTED OUT THE LOGIC FOR INACTIVE STATUS 
IT WAS THROWING ERROR '-20010'- (WHEN POLLING STATUS CODE WAS 'I' 
AND THE CLOSE DATE WAS NULL) EVEN FOR THE NEW COST_CENTER.
Even for the new cost center, if the polling status is inactive, 
the closed date must be entered and the status code must be closed
to not get the error
********************************************************************************/
 WHEN  'I' THEN
              /*if inCOST_CENTER_ROWTYPE.close_date is NULL then
                  raise invalid_close_date_err;
              end if;*/
              NULL;
              
--            CASE when inCOST_CENTER_ROWTYPE.close_date is NULL then
--               raise invalid_close_date_err;
--            END CASE;

        ELSE RAISE invalid_poll_stat_err;  
       
        
      END CASE; 
      
     EXCEPTION
			      	
        WHEN invalid_poll_stat_err THEN  
          v_code := errnums.en_invalid_poll_stat_err;
		      errpkg.raise_err(v_code, 'polling_status_hist_SP.invalid_poll_stat_err ' ,
          'CCN_BUSINESS_RULES_PKG -Polling status code must be <P or Q or I>');
       

        WHEN invalid_close_date_err THEN  
          v_code := errnums.en_invalid_close_date_err;
          --errpkg.raise_err(v_code, 'POLLING_STATUS_INACTIVE_SP.invalid_close_date_err ', 
          errpkg.raise_err(v_code, 'POLLING_STATUS_HIST_SP.invalid_close_date_err ',  --27-Aug-2013
         'CCN_BUSINESS_RULES_PKG - Close date must be entered when polling_status is Inactive'); 
               
          
        WHEN OTHERS THEN
            v_code := SQLCODE;
	          v_errm := substr(SQLERRM,1, 1000);
            errpkg.raise_err(v_code, 'CCN_BUSINESS_RULE_PKG.POLLING_STATUS_HIST_SP Error' 
            ,v_errm
            );
--           'CCN_BUSINESS_RULES_PKG.polling_status_hist_sp - No errors found');

   
 END POLLING_STATUS_HIST_SP;


PROCEDURE QUALITY_CTRL_STATUS_CHKS_SP (
/*******************************************************************************
	QUALITY_CTRL_STATUS_CHKS_SP

	This procedure is intended to enforce the Business Rules
	When a cost center is changed to "Q", there are checks for certain fields
	to be filled in as well as records to be active. An active record is when
	effective date is less than or equal to current date and expiration date 
  is zeros/null.
	TRD  Section: 3.3.7 

created : BLR 6/13/2012
*******************************************************************************/	
     inCOST_CENTER_ROWTYPE    IN COST_CENTER%ROWTYPE  
    ,inPOLLING_ROWTYPE        IN POLLING%ROWTYPE
    ,inSTATUS_ROWTYPE         IN STATUS%ROWTYPE
    ,inTYPE_ROWTYPE           IN TYPE%ROWTYPE
    ,inTERMINAL_ROWTYPE       IN TERMINAL%ROWTYPE 
    ,V_TERMINAL_ACTIVE_FLAG   IN varchar2
    ,inBANKCARD_ROWTYPE       IN BANK_CARD%ROWTYPE  )
                    IS         
 
 inactive_cost_center_err	EXCEPTION;
 invalid_cost_center_err	EXCEPTION;
 invalid_costctr_name_err EXCEPTION;
 inactive_status_err      EXCEPTION;
 inactive_polling_err     EXCEPTION;
 inactive_type_err        EXCEPTION;
 inactive_terminal_err    EXCEPTION;
 inactive_bank_card_err   EXCEPTION;
-- inactive_hierarchy_err   EXCEPTION;
 -- invalid_sgldate_err              EXCEPTION;

--  v_polling_rowtype               POLLING%ROWTYPE; 
--  v_costctr_rowtype               COST_CENTER%ROWTYPE; 
--  v_status_rowtype                STATUS%ROWTYPE; 
--  v_type_rowtype                  TYPE%ROWTYPE; 
--  v_terminal_rowtype              TERMINAL%ROWTYPE; 
--  v_bank_card_rowtype             BANK_CARD%ROWTYPE; 
 -- v_hierarchy_rowtype             HIERARCHY%ROWTYPE;
  
 v_curr_date           date := sysdate; 
 v_code number;
 v_count number;
 v_errm varchar(500);
 v_terminal_count integer := 0;
  

 BEGIN 
      
/*******************************************************************************
   3.3.7.1   A Cost Center record must exist with a Cost Center Name not null
*******************************************************************************/      
 
--     BEGIN
--         
--         select * into v_costctr_rowtype
--         from COST_CENTER
--         where cost_center_code =  inCostctr_cc; 
--         
--       
--      exception
--         when no_data_found then
--         raise invalid_cost_center_err;
--  See Error #01
--         
--    end;
    
/*******************************************************************************
   3.3.7.1a  A Cost Center Name cannot be null and polling status code must be
             a "p" or "q"
*******************************************************************************/		  
         
         IF inCOST_CENTER_ROWTYPE.cost_center_name  IS  NULL  THEN     
            RAISE invalid_costctr_name_err;
--  See Error #02
         END IF;
                 

/*******************************************************************************
   3.3.7.2a  An active Status record must exist before Polling record is updated.
                 Active means the Effective date must be less than current date 
                 and Expiration date is zero/null.
********************************************************************************/		
--
     BEGIN
--
--         select * into v_status_rowtype
--          from  status
--         where  cost_center_code =  incostctr_cc 
--           and     effective_date <= v_curr_date 
--           and     expiration_date  is  null;  
--               
--              
--         exception
--            when no_data_found then
--               raise inactive_status_err;
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inSTATUS_ROWTYPE.cost_center_Code
        AND  inSTATUS_ROWTYPE.effective_date  <= v_curr_date
        AND  inSTATUS_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           --raise inactive_status_err;
           	NULL;
      END IF;
--  See Error #03
--         
     END;

/*******************************************************************************
   3.3.7.2b  An active Type record must exist before Polling record is updated.
                 Active means the Effective date must be less than current date 
 	               and Expiration date is zero/null.
*******************************************************************************/		

	   BEGIN
--     
--        select * into v_type_rowtype
--        from type
--        where cost_center_code =  incostctr_cc
--            and   effective_date <=   v_curr_date  
--            and   expiration_date  is  null;
--      
--        exception
--            when no_data_found then
--            raise inactive_type_err;
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inTYPE_ROWTYPE.cost_center_Code
        AND  inTYPE_ROWTYPE.effective_date  <= v_curr_date
        AND  inTYPE_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE inactive_type_err;
      END IF;
--  See Error #04
            
     END; 

/*******************************************************************************
   3.3.7.3   NEED TO ADD HIERARCHY ROUTINE FOR D-A-D CHECK OF division,area,
             district date in DRM
*******************************************************************************/		


/*******************************************************************************
   3.3.7.4   A Polling record must exist before Polling Status can be changed.
*******************************************************************************/		
     
	     BEGIN
--       
--         select * into v_polling_rowtype
--         from   polling
--         where  cost_center_code = incostctr_cc;
--               
--         exception
--             when no_data_found then
--             raise inactive_polling_err;
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inPOLLING_ROWTYPE.cost_center_Code  THEN
              NULL;
      ELSE
           RAISE inactive_polling_err;
      END IF;
--  See Error #05
         
       END;  
          	      	
/**********************************************************************************
   3.3.7.5  An active Terminal record must exist before Polling record is updated.
               Active means the Effective date must be less than current date and
 	             Expiration date is zero/null.
**********************************************************************************/		
               
        
BEGIN

--     select  count(1)
--     into v_terminal_count
--      from terminal
--      where cost_center_code =  incostctr_cc
--       and   effective_date  <= v_curr_date
--       and   expiration_date is null
--       ;
--         
--      if v_terminal_count = 0 then
--         raise inactive_terminal_err;
--      end if;    
      IF    V_TERMINAL_ACTIVE_FLAG  <> 'Y'  THEN
             RAISE inactive_terminal_err;
      END IF;
--  See Error #06
END;
      
        	      	
/********************************************************************************
   3.3.7.6  NEED TO ADD HIERARCHY ROUTINE FOR D-A-D CHECK OF SGL division in DRM
*********************************************************************************/	


/***********************************************************************************
   3.3.7.7  An active Bank_Card  record must exist before Polling record is updated.
                Active is:  Effective date must be less than current date and
 	              Expiration date is zero/null.
************************************************************************************/		
  
    BEGIN
--       select * into v_bank_card_rowtype
--		    from  bank_card
--		   where  cost_center_code =  incostctr_cc
--        and   effective_date <= v_curr_date
--        and   expiration_date  is  null;  
--              
--       exception
--         when no_data_found then
--         raise inactive_bank_card_err;
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inBANKCARD_ROWTYPE.cost_center_Code
        AND  inBANKCARD_ROWTYPE.effective_date  <= v_curr_date
        AND  inBANKCARD_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE inactive_bank_card_err;
      END IF;
--  See Error #07
         
        
     END;

/*******************************************************************************
  EXCEPTION ERROR PROCESSING :
*******************************************************************************/		
  
	EXCEPTION
	
-- Error #01  
--    when invalid_cost_center_err then  
--         v_code := errnums.en_invalid_cost_center_err;
--		     errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.invalid_cost_center_err ' ,
--         'CCN_BUSINESS_RULES_PKG - Cost Center Number "' || inCostctr_cc || '" was not found' );  	
		 		
-- Error #02 
    WHEN invalid_costctr_name_err THEN  
         v_code := errnums.en_invalid_costctr_name_err;
		     errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.invalid_costctr_name_err ',
         'CCN_BUSINESS_RULES_PKG - Cost Center Name cannot be null');  	

-- Error #03 
		WHEN inactive_status_err THEN  
		    v_code := errnums.en_inactive_status_err;
		    errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.inactive_status_err ',
        'CCN_BUSINESS_RULES_PKG - STATUS not found for Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
        '" that has an effective date <= current date and an expiration date = 0');

-- Error #04         
    WHEN inactive_type_err THEN  
		    v_code := errnums.en_inactive_type_err;
		    errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.inactive_type_err ',
        'CCN_BUSINESS_RULES_PKG - TYPE not found for Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
        '" that has an effective date <= current date and an expiration date = 0');
				
-- Error #05         
    WHEN inactive_polling_err THEN  
		    v_code := errnums.en_inactive_polling_err;
		    errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.inactive_polling_err ',
        'CCN_BUSINESS_RULES_PKG - POLLING not found for Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || '"');

-- Error #06         
  	WHEN inactive_terminal_err THEN  
		    v_code := errnums.en_inactive_terminal_err;
		    errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.inactive_terminal_err ',
        'CCN_BUSINESS_RULES_PKG - TERMINAL not found for Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
        '" that has an effective date <= current date and an expiration date = 0');

-- Error #07     		
  	WHEN inactive_bank_card_err THEN  
        v_code := errnums.en_inactive_bank_card_err;
		    errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.inactive_bank_card_err ', 
        'CCN_BUSINESS_RULES_PKG - BANK_CARD not found for Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
        '" that has an effective date <= current date and an expiration date = 0');

-- Error #08   	
--		when inactive_hierarchy_err then  
--		    v_code := errnums.en_inactive_hierarchy_err;
--		    errpkg.raise_err(v_code, 'QUALITY_CTRL_STATUS_CHKS_SP.inactive_hierarchy_err ',
--        'CCN_BUSINESS_RULES_PKG - Must have an effective_date <= 0 and expiration_date > 0'); 
		 
-- Error #09 
		WHEN OTHERS THEN
        v_code := SQLCODE;
	      v_errm := substr(SQLERRM,1, 500);
        errpkg.raise_err(v_code, v_errm,
        'CCN_BUSINESS_RULES_PKG - No errors found');
    
 END QUALITY_CTRL_STATUS_CHKS_SP;
 
 
 PROCEDURE POLLING_CTRL_STATUS_CHKS_SP (
/*******************************************************************************
	 POLLING_CTRL_STATUS_CHKS_SP

	This procedure is intended enforce the Business Rules
	for verifying the POLLING_STATUS_Code on the POLLING Table
	TRD  Section: 3.3.8 

created : BLR 5/21/2012
revised : BLR 5-2-2013 CCNA-362 Needed logic for when polling status type is a 
                  'P' then polling cost center must have a valid phone number.
         **Note:  This rule is valid as long as we pass data back to the IDMS
                  Legacy system. This should be removed once we no longer pass
                  data to the IDMS Legacy system.
Modified: 07/02/2015 dxv848 modified the error message to match the condition that is 
                 actually causing the error.                   
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
*******************************************************************************/	
  inCOST_CENTER_ROWTYPE    IN COST_CENTER%ROWTYPE  
 ,inPOLLING_ROWTYPE        IN POLLING%ROWTYPE
 ,inSTATUS_ROWTYPE         IN STATUS%ROWTYPE
 ,inTYPE_ROWTYPE           IN TYPE%ROWTYPE
 ,inTERMINAL_ROWTYPE       IN TERMINAL%ROWTYPE    
 ,V_TERMINAL_ACTIVE_FLAG   IN varchar2
 ,inBANKCARD_ROWTYPE       IN BANK_CARD%ROWTYPE
 ,inPhone_ROWTYPE          IN PHONE%ROWTYPE
 ,inPHONE_PRI_ROWTYPE      IN PHONE%ROWTYPE
 ,inPHONE_SCD_ROWTYPE      IN PHONE%ROWTYPE
 ,inSTORE_ROWTYPE          IN STORE%ROWTYPE         
 ,inADDRESS_CAN_ROWTYPE    IN ADDRESS_CAN%ROWTYPE
 ,inADDRESS_MEX_ROWTYPE    IN ADDRESS_MEX%ROWTYPE
 ,inADDRESS_OTH_ROWTYPE    IN ADDRESS_OTHER%ROWTYPE
 ,inADDRESS_USA_ROWTYPE    IN ADDRESS_USA%ROWTYPE
 ,inADDRESS_BRB_ROWTYPE    IN ADDRESS_BRB%ROWTYPE)

                IS         

 invalid_merchid_err	    EXCEPTION;
 invalid_amexid_err		    EXCEPTION;
 invalid_discoverid_err	 	EXCEPTION;
 invalid_time_zone_err  	EXCEPTION;
 invalid_polling_err    	EXCEPTION;
-- invalid_poll_sched_err 	EXCEPTION;
-- invalid_poll_stat_err  	EXCEPTION;
 invalid_poll_phone_err 	EXCEPTION;
 invalid_cost_center_err	EXCEPTION;
 inactive_cost_center_err	EXCEPTION;
 invalid_costctr_name_err EXCEPTION;
 invalid_inventory_id_err	EXCEPTION;
 invalid_status_err       EXCEPTION;
 inactive_status_err      EXCEPTION;
 invalid_priority_err     EXCEPTION;
 invalid_cc_populated_err EXCEPTION; 
 invalid_poll_ind_err     EXCEPTION;
 invalid_type_err         EXCEPTION;
 inactive_type_err        EXCEPTION;
 invalid_terminal_err     EXCEPTION;
 inactive_terminal_err    EXCEPTION;
 invalid_store_err        EXCEPTION;
 inactive_store_err       EXCEPTION; 
 invalid_bnk_crd_err      EXCEPTION; 
 inactive_bank_card_err   EXCEPTION; 
 inactive_addr_usa_err    EXCEPTION; 
 inactive_addr_mex_err    EXCEPTION;
 inactive_addr_can_err    EXCEPTION; 
 inactive_addr_othr_err   EXCEPTION;
 invalid_addr_usa_err    EXCEPTION; 
 invalid_addr_mex_err    EXCEPTION;
 invalid_addr_can_err    EXCEPTION; 
 invalid_addr_brb_err    EXCEPTION; 
 invalid_addr_other_err   EXCEPTION;
 invalid_phone_err        EXCEPTION;
 inactive_phone_num_err   EXCEPTION;
 invalid_transport_type_err   EXCEPTION;
 invalid_tax_juris_err        EXCEPTION;
 invalid_tax_cmpny_code_err   EXCEPTION;
 
 
-- invalid_hierarchy_err    EXCEPTION;
-- inactive_hierarchy_err   EXCEPTION;
-- invalid_sgldate_err      EXCEPTION;

--  v_polling_rowtype               POLLING%ROWTYPE; 
--  v_phone_rowtype                 PHONE%ROWTYPE;   
--  v_costctr_rowtype               COST_CENTER%ROWTYPE; 
--  v_status_rowtype                STATUS%ROWTYPE; 
--  v_store_rowtype                 STORE%ROWTYPE; 
--  v_type_rowtype                  TYPE%ROWTYPE; 
--  v_terminal_rowtype              TERMINAL%ROWTYPE; 
--  v_bank_card_rowtype             BANK_CARD%ROWTYPE; 
--  v_address_usa_rowtype           ADDRESS_USA%ROWTYPE; 
--  v_address_can_rowtype           ADDRESS_CAN%ROWTYPE; 
--  v_address_mex_rowtype           ADDRESS_MEX%ROWTYPE; 
--  v_address_other_rowtype         ADDRESS_OTHER%ROWTYPE;
 
 --v_hierarchy_rowtype             HIERARCHY%ROWTYPE;
 v_curr_date           date := sysdate;
 v_code number;
 v_terminal_count number;
 v_errm varchar(500);
 phone_count           number;
 phone_rec varchar(30);
/* 3.3.8    POLLING CONTROL STATUS Cost Center Table must exist           
/* 3.3.8.1  The Cost Center record must exist with the following fields populated:
             cost center name,  transport type (new),   tax jurisdiction (new),         
            tax company code (new).            
   
*/
  BEGIN
--    begin
--    
--         select * into v_costctr_rowtype
--         from COST_CENTER
--         where cost_center_code =  inCostctr_cc; 
--     
--      exception
--         when no_data_found then
--         raise invalid_cost_center_err;
--    end;    
   
         IF inCOST_CENTER_ROWTYPE.cost_center_name IS NULL THEN          
            RAISE invalid_costctr_name_err;
         END IF;
         
         IF inCOST_CENTER_ROWTYPE.cost_center_name = '                                   '  THEN          
            RAISE invalid_costctr_name_err;
         END IF;
            
      
         IF inCOST_CENTER_ROWTYPE.transport_type IS NULL THEN         
--            raise invalid_transport_type_err;            removed...can't change in phase one
			  NULL;
         END IF;
         
          
      /*  IF  ((INPHONE_ROWTYPE.COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE 
             AND INPHONE_ROWTYPE.PHONE_NUMBER_TYPE  IN ('PRI', 'SCD', 'FAX'))
             AND (INPHONE_ROWTYPE.PHONE_NUMBER IS NULL))  
             THEN
             RAISE INACTIVE_PHONE_NUM_ERR;
         END IF; 
	*/
  
    IF  ((INPHONE_ROWTYPE.COST_CENTER_CODE = INPOLLING_ROWTYPE.COST_CENTER_CODE 
             AND inPHONE_PRI_ROWTYPE.phone_number_type  IN ('PRI','SCD', 'FAX'))
             AND (inPHONE_PRI_ROWTYPE.phone_number IS NULL))  
             THEN
             RAISE INACTIVE_PHONE_NUM_ERR;
         END IF; 
	
/*   3.3.8.2  The Cost Center record must exist with the phone number populated. 
*/
--    FOR phone_rec in ( select * 
--        from PHONE 
--        where cost_center_code =  inCostctr_cc 
--          and phone_number_type  in ('PP', 'SP')) LOOP
--      
--        if phone_rec.phone_number is null then
--            raise inactive_phone_num_err; 
--        end if;
--         
--    END LOOP;      	
--
      
 
/* 5-2-2013 - BLR - CCNA-351 --remove logic and simpilfied below for phone # checks.

     
   if (inPHONE_PRI_ROWTYPE.cost_center_code is not null  
      and inPHONE_PRI_ROWTYPE.phone_number_type  in ('PRI','SCD', 'FAX')
      and inPHONE_PRI_ROWTYPE.phone_number is not null
      and inPHONE_SCD_ROWTYPE.cost_center_code is not null  
      and inPHONE_SCD_ROWTYPE.phone_number_type  in ('PRI','SCD', 'FAX')
      and inPHONE_SCD_ROWTYPE.phone_number is not null    
      and inPHONE_ROWTYPE.cost_center_code is not null 
      and inPHONE_ROWTYPE.phone_number_type  in ('PRI','SCD', 'FAX')
      and inPHONE_ROWTYPE.phone_number is not null)  then
         null;
      else
          raise inactive_phone_num_err;
     end if;
*/                         
/*
    if ((inPHONE_ROWTYPE.cost_center_code = inCOST_CENTER_ROWTYPE.cost_center_code)  
    and (inPHONE_ROWTYPE.phone_number_type  in ('PRI','SCD','FAX'))
    and (inPHONE_ROWTYPE.phone_number is null))   then
        raise inactive_phone_num_err;
    end if;  
    
    if ((inPHONE_PRI_ROWTYPE.cost_center_code = inCOST_CENTER_ROWTYPE.cost_center_code)  
    and (inPHONE_PRI_ROWTYPE.phone_number_type  in ('SCD','PRI','FAX'))
    and (inPHONE_PRI_ROWTYPE.phone_number is null))   then
        raise inactive_phone_num_err;
    end if;  
      
  if ((inPHONE_SCD_ROWTYPE.cost_center_code = inCOST_CENTER_ROWTYPE.cost_center_code)  
    and (inPHONE_SCD_ROWTYPE.phone_number_type  in ('PRI','SCD','FAX'))
    and (inPHONE_SCD_ROWTYPE.phone_number is null))   then
        raise inactive_phone_num_err;
    end if;  
*/      

--
--   
/* 3.3.8.3  The Store record must exist with the following field populated
            inventory indicator equal 'y' and inventory start date not zero.            
*/
  
--     BEGIN
--         Select * into v_store_rowtype
--         from STORE
--         where  cost_center_code =  inCostctr_cc;
--         
--      exception
--         when no_data_found then
--         raise invalid_store_err;
--           
--     end;
--
       IF inSTORE_ROWTYPE.cost_center_code <> inCOST_CENTER_ROWTYPE.cost_center_code THEN
             RAISE invalid_store_err;
       END IF;
                 
         IF inSTORE_ROWTYPE.inventory_indicator <> 'Y'   THEN
             RAISE invalid_inventory_id_err;
        END IF;	
            
         IF INSTORE_ROWTYPE.perp_inv_start_date IS NULL
          AND inSTORE_ROWTYPE.inventory_indicator = 'Y'   THEN
            RAISE inactive_store_err;
        END IF;	     
      
 
/* 3.3.8.4  An active Type record must exist:
	    Effective_date must be less than/equal to current date.
	    Expiration_date should be equal to zero. 
   3.3.8.4a  Checking for an active Type record	
*/
--  BEGIN
--          
--    select * into v_type_rowtype
--      from TYPE
--        where cost_center_code =  inCostctr_cc       
--        and type_code is not null
--        and effective_date <= v_curr_date  
--        and expiration_date  is null;
--        
--    exception
--        when no_data_found then
--          raise invalid_type_err;
--    end;
--
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inTYPE_ROWTYPE.cost_center_Code
        AND  inTYPE_ROWTYPE.effective_date  <= v_curr_date
        AND  inTYPE_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE inactive_type_err;
      END IF;
  
/*3.3.8.4b  Checking for an active Status record	
*/  
--  BEGIN
--  
--    select * into v_status_rowtype
--    from STATUS
--    where  cost_center_code =  inCostctr_cc      
--      and  status_code is not null
--      and  effective_date <= v_curr_date   
--      and  expiration_date  is null;
--      
--    exception
--      when no_data_found then
--         raise invalid_status_err;
--  end;     
--
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inSTATUS_ROWTYPE.cost_center_Code
        AND  inSTATUS_ROWTYPE.effective_date  <= v_curr_date
        AND  inSTATUS_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           --raise inactive_status_err;
           NULL;
      END IF;
--
--
 /* 3.3.8.5  An active Cost center address record (address_Usa, Address_can, Address_Mex, or Address_other   
	    Effective_date must be less than/equal to current date.
	    Expiration_date should be equal to zero.
*/
  IF inCOST_CENTER_ROWTYPE.country_code IN ('USA', 'PRI') THEN
--    BEGIN
--      select * into v_address_usa_rowtype
--      from  ADDRESS_USA
--      where cost_center_code =  inCostctr_cc 
--        and address_type is not null
--        and effective_date  <= v_curr_date   
--        and expiration_date is null;
--               
--      exception
--      when no_data_found then
--          raise invalid_addr_usa_err;
--    END; 
      IF    inCOST_CENTER_ROWTYPE.cost_center_code = inADDRESS_USA_ROWTYPE.cost_center_Code
        AND  inADDRESS_USA_ROWTYPE.address_type IS NOT NULL
        AND  inADDRESS_USA_ROWTYPE.effective_date  <= v_curr_date
        AND  inADDRESS_USA_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE invalid_addr_usa_err;
      END IF;
  END IF;
       
  IF inCOST_CENTER_ROWTYPE.country_code = 'MEX' THEN
--    BEGIN
--      select * into v_address_mex_rowtype
--      from  ADDRESS_MEX  
--      where address_type is not null
--        and cost_center_code =  inCostctr_cc  
--        and effective_date  <= v_curr_date   
--        and expiration_date is null;
--               
--      exception
--      when no_data_found then
--          raise invalid_addr_mex_err;
--    END;
      IF    inCOST_CENTER_ROWTYPE.cost_center_code = inADDRESS_MEX_ROWTYPE.cost_center_Code
        AND  inADDRESS_MEX_ROWTYPE.address_type IS NOT NULL
        AND  inADDRESS_MEX_ROWTYPE.effective_date  <= v_curr_date
        AND  inADDRESS_MEX_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE invalid_addr_mex_err;
      END IF;
  END IF;    
  
  IF inCOST_CENTER_ROWTYPE.country_code = 'CAN' THEN
--    BEGIN
--      select * into v_address_can_rowtype
--      from  ADDRESS_CAN
--      where cost_center_code =  inCostctr_cc  
--        and address_type is not null
--        and effective_date  <= v_curr_date   
--        and expiration_date is null;
--               
--      exception
--      when no_data_found then
--          raise invalid_addr_can_err;
--    END;
      IF    inCOST_CENTER_ROWTYPE.cost_center_code = inADDRESS_CAN_ROWTYPE.cost_center_Code
        AND  inADDRESS_CAN_ROWTYPE.address_type IS NOT NULL
        AND  inADDRESS_CAN_ROWTYPE.effective_date  <= v_curr_date
        AND  inADDRESS_CAN_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE invalid_addr_can_err;
      END IF;
 END IF;  

  IF inCOST_CENTER_ROWTYPE.country_code = 'BRB' THEN
      IF    inCOST_CENTER_ROWTYPE.cost_center_code = inADDRESS_BRB_ROWTYPE.cost_center_Code
        AND  inADDRESS_BRB_ROWTYPE.address_type IS NOT NULL
        AND  inADDRESS_BRB_ROWTYPE.effective_date  <= v_curr_date
        AND  inADDRESS_BRB_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE invalid_addr_brb_err;
      END IF;
 END IF;  
 
  IF inCOST_CENTER_ROWTYPE .country_code NOT IN ('USA', 'PRI', 'MEX', 'CAN', 'BRB') THEN
--    BEGIN
--      select * into v_address_other_rowtype
--      from  ADDRESS_OTHER
--      where cost_center_code =  inCostctr_cc 
--        and address_type is not null
--        and effective_date  <= v_curr_date   
--        and expiration_date is null;
--               
--      exception
--      when no_data_found then
--          raise invalid_addr_other_err;
--    END;
      IF    inCOST_CENTER_ROWTYPE.cost_center_code = inADDRESS_OTH_ROWTYPE.cost_center_Code
        AND  inADDRESS_OTH_ROWTYPE.address_type IS NOT NULL
        AND  inADDRESS_OTH_ROWTYPE.effective_date  <= v_curr_date
        AND  inADDRESS_OTH_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE invalid_addr_other_err;
      END IF;
  END IF;  
  
/* 3.3.8.6  An active Cost center D-A-D record (DRM - Hiearchy). 
	    Effective_date must be less than/equal to current date.
	    Expiration_date should be equal to zero.

  BEGIN

    select *  into v_hierarchy_rowtype
    from HIERARCHY
      where HIERARCHY.cost_center_code =  inpolling_cc
        and HIERARCHY.polling_status_code  =  inpolling_status_code then
         	  raise invalid_hierarchy_err ;
    end if;
    
    if HIERARCHY.EFFECTIVE_DATE > v_curr_date   and
       HIERARCHY.expiration_date  is not null 
         raise invalid_sgldate_err ;
   	end if;	
*/

/* 3.3.8.9  The Cost Center record must exist with the following fields populated
            cost center name, transport type (new), tax jurisdiction (new), and tax company code (new).            
*/
   
--  BEGIN
--       
--    SELECT * into v_polling_rowtype
--    from POLLING
--    where  cost_center_code =  inCostctr_cc      
--      and  polling_status_code = inPolling_stat_cd;
--      
--    exception
--      when no_data_found then
--        raise invalid_polling_err;
--  END; 
     IF    inCOST_CENTER_ROWTYPE.cost_center_code = inPOLLING_ROWTYPE.cost_center_Code  THEN
               NULL;
      ELSE
           RAISE invalid_polling_err;
      END IF;
  
    IF (inPOLLING_ROWTYPE.TIME_ZONE NOT IN ('0','1', '2', '3', '4', '5'))  THEN 
        RAISE invalid_time_zone_err;
    END IF;
   
   
    IF (inPOLLING_ROWTYPE.polling_ind IS NULL)  THEN 
        RAISE invalid_poll_ind_err;
    END IF;             
/*
 5-2-2013 - BLR - CCNA-362 Needed logic for when polling status type is a 'P'
                  then polling cost center must have a a phone number entered.
                  This rule is valid as long as we pass data back to the IDMS
                  Legacy system. This should be removed once we no longer pass
                  data to the IDMS Legacy system.
*/
   /* if ((inPHONE_ROWTYPE.cost_center_code = inPOLLING_ROWTYPE.cost_center_Code)  
    and (inPHONE_ROWTYPE.phone_number_type  in ('PRI'))
    and (inPHONE_ROWTYPE.phone_number is null))   then
        raise invalid_phone_err;
    end if;  
    
   */
     
/* 3.3.8.10  Check for an active Polling Terminal record:
 	     **Note there can be multiple records.  
	     Effective_date must be less than/equal to current date
	     Expiration_date should be equal to zero.
*/     
   
	     
  BEGIN
--
--      select  count(1)
--      into v_terminal_count
--      from terminal
--      
--      where cost_center_code =  inCostctr_cc    
--       and   effective_date  <= v_curr_date
--       and   expiration_date is null
--       ;
--   
--      if v_terminal_count = 0 then
--           raise invalid_terminal_err;
--       end if;
--
      IF    V_TERMINAL_ACTIVE_FLAG  <> 'Y'  THEN
             RAISE invalid_terminal_err;
      END IF;
                
  END;        
   
 /* 3.3.8.11  Check for an active SGL division record:
	     Effective_date must be less than/equal to current date.
	     Expiration_date should be equal to zero.            


	     BEGIN

        select * into v_hierarchy_rowtype     
      	        from HIERARCHY
      	        where HIERARCHY.cost_center_code =  inpolling_cc and
                         HIERARCHY.polling_status_code  <>  inpolling_status_code then
          	            RAISE invalid_hierarchy_err ;
      	     end if;

      		if HIERARCHY.EFFECTIVE_DATE > v_curr_date   and
      	  	HIERARCHY.expiration_date  is not null  
      	    RAISE invalid_sgldate_err ;
     		end if;	
*/		


/* 3.3.8.12  Check for an active Bank_card record validation criteria:
	     merchant_code cannot be '9999999999',
                  amex_id cannot be '999999999' and 
	     discover_id can be null for Canada.           
*/
  
  BEGIN
--    select * into v_bank_card_rowtype
--    from BANK_CARD
--    where cost_center_code =  inCostctr_cc
--    and   polling_status_code = inPolling_stat_cd
--    and   merchant_id is not null
--    and   effective_date <= v_curr_date
--    and   expiration_date is null;
--    
--    exception
--      when no_data_found then
--        raise invalid_bnk_crd_err;
--
       IF    inCOST_CENTER_ROWTYPE.cost_center_code = inBANKCARD_ROWTYPE.cost_center_code
        AND  inBANKCARD_ROWTYPE.polling_status_code  = inPOLLING_ROWTYPE.polling_status_code
        AND  inBANKCARD_ROWTYPE.merchant_id IS NOT NULL
        AND  inBANKCARD_ROWTYPE.effective_date  <= v_curr_date
        AND  inBANKCARD_ROWTYPE.expiration_date IS NULL       THEN
              NULL;
      ELSE
           RAISE inactive_bank_card_err;
      END IF;
--
  END;  
  
    
    IF inBANKCARD_ROWTYPE.merchant_id = '99999999999' THEN
        RAISE invalid_merchID_err;
    END IF;		

     

    IF inBANKCARD_ROWTYPE.amex_se_id = '9999999999'  THEN
        RAISE invalid_amexID_err;
    END IF;	
        
    
             
    IF inCOST_CENTER_ROWTYPE.country_code = 'USA' THEN
        IF inBANKCARD_ROWTYPE.discover_id IS NULL THEN
           RAISE invalid_discoverid_err;
        END IF;	
    END IF;
       
 
    EXCEPTION
	
--    when invalid_cost_center_err then  
--        v_code := errnums.en_invalid_cost_center_err;
--		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_cost_center_err ',
--        'CCN_BUSINESS_RULES_PKG - Cost center not found');            		             		
		           		    
--		when inactive_cost_center_err then  
--		    v_code := errnums.en_inactive_cost_center_err;
--		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_cost_center ',
--        'CCN_BUSINESS_RULES_PKG - Must have an effective_date > 0 and expiration_date > 0'); 
    
    WHEN invalid_transport_type_err THEN    
        v_code := errnums.en_invalid_transport_type_err;        
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_transport_type_err ',
        'CCN_BUSINESS_RULES_PKG - Transport type not entered');   
        
       
--     when invalid_tax_juris_err then    
--        v_code := errnums.en_invalid_tax_juris_err;        
--		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_tax_juris_err ',
--        'CCN_BUSINESS_RULES_PKG - Tax jurisdiction not entered');   
        
--     when invalid_tax_cmpny_code_err then    
--        v_code := errnums.en_invalid_tax_cmpny_code_err;        
--		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_tax_cmpny_code_err ',
--        'CCN_BUSINESS_RULES_PKG - Tax company code not entered');           
        
--		when invalid_poll_phone_err then  
--        v_code := errnums.en_invalid_poll_phone_err;
--		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_poll_phone_err ',
--        'CCN_BUSINESS_RULES_PKG - Cost center not found');  
        
 	 WHEN invalid_phone_err THEN  
        v_code := errnums.en_invalid_phone_err;
        errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_phone_err ',
         'CCN_BUSINESS_RULES_PKG -  Phone# is required for Polling phone_type = <PRI>');            		             		
		           		    
		WHEN inactive_phone_num_err THEN  
		    v_code := errnums.en_inactive_phone_num_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_phone_num_err ',
        'CCN_BUSINESS_RULES_PKG - Phone# Must have a valid value. '); 
        
    WHEN invalid_store_err THEN  
        v_code := errnums.en_invalid_store_err;
        errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_store_err ',
        'CCN_BUSINESS_RULES_PKG -  Store cannot be found');            		             		
		           		    
		WHEN inactive_store_err THEN  
		    v_code := errnums.en_inactive_store_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_store_err ',
        'CCN_BUSINESS_RULES_PKG - Must have an effective_date > 0 and expiration_date > 0'); 
        
    WHEN invalid_inventory_id_err THEN 
         v_code := errnums.en_invalid_inventory_id_err;
		     errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_inventory_id_err ',
         'CCN_BUSINESS_RULES_PKG - inventory_id must be a <y>');         		             		
				
--    when invalid_type_err then  
--        v_code := errnums.en_invalid_type_err;
--        errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_type_err ',
--        'CCN_BUSINESS_RULES_PKG - Type cannot be found');            		             		
		           		    
		WHEN inactive_type_err THEN  
		    v_code := errnums.en_inactive_type_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_type_err ',
        'CCN_BUSINESS_RULES_PKG - Must have an effective_date > 0 and expiration_date > 0'); 
		
--    when invalid_status_err then  
--		    v_code := errnums.en_invalid_status_err;
--		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_status_err ',
--        'CCN_BUSINESS_RULES_PKG - Status cannot be found'); 
		
		WHEN inactive_status_err THEN  
		    v_code := errnums.en_inactive_status_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_status_err ',
        'CCN_BUSINESS_RULES_PKG - Must have an effective_date > 0 and expiration_date > 0'); 
   	    
		WHEN invalid_addr_usa_err THEN  
		    v_code := errnums.en_invalid_addr_usa_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_addr_usa_err ',
        'CCN_BUSINESS_RULES_PKG - ADDRESS USA cannot be found'); 
    		
    WHEN invalid_addr_mex_err THEN  
       v_code := errnums.en_invalid_addr_mex_err;
		   errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_addr_mex_err ',
       'CCN_BUSINESS_RULES_PKG - ADDRESS MEX cannot be found'); 
    			
    WHEN invalid_addr_can_err THEN  
       v_code := errnums.en_invalid_addr_can_err;
		   errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_addr_can_err ',
       'CCN_BUSINESS_RULES_PKG - ADDRESS CAN cannot be found'); 
    			      
    WHEN invalid_addr_brb_err THEN  
       v_code := errnums.en_invalid_addr_brb_err;
		   errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_addr_brb_err ',
       'CCN_BUSINESS_RULES_PKG - ADDRESS BRB cannot be found'); 
    			      
		WHEN invalid_addr_other_err THEN  
		      v_code := errnums.en_invalid_addr_other_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_addr_other_err ',
          'CCN_BUSINESS_RULES_PKG - ADDRESS OTHER cannot be found');
          		
		WHEN invalid_time_zone_err THEN  
		      v_code := errnums.en_invalid_time_zone_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_time_zone_err ',
 		     'CCN_BUSINESS_RULES_PKG -  Time zone cannot be null'); 
         
 		WHEN invalid_priority_err THEN  
          v_code := errnums.en_invalid_priority_err;
          errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_priority_err ', 
         'CCN_BUSINESS_RULES_PKG - Polling Priority must be null');  
         
		WHEN invalid_polling_err THEN 
          v_code := errnums.en_invalid_poll_sched_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_polling_err ',
          'CCN_BUSINESS_RULES_PKG - Polling data cannot be found');         		             		
		       	   		
--		when invalid_poll_sched_err then 
--          v_code := errnums.en_invalid_poll_sched_err;
--		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_poll_sched_err ',
--          'CCN_BUSINESS_RULES_PKG - Polling schedule code cannot be null');         		             		
		       	
--		when invalid_poll_stat_err then  
--          v_code := errnums.en_invalid_poll_stat_err;
--		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_poll_stat_err ',
--          'CCN_BUSINESS_RULES_PKG - Polling status code must be <P or Q>');         		             		
		        	
		WHEN invalid_poll_ind_err THEN  
          v_code := errnums.en_invalid_poll_ind_err;
          errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_poll_ind_err ', 
         'CCN_BUSINESS_RULES_PKG - Polling indicator must be = <Y or N>l'); 
         
		WHEN invalid_terminal_err THEN  
		    v_code := errnums.en_invalid_terminal_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_terminal_err',
        'CCN_BUSINESS_RULES_PKG - Terminal data cannot be found'); 
        
    WHEN inactive_bank_card_err THEN  
        v_code := errnums.en_inactive_bank_card_err;
		    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_bank_card_err ',
        'CCN_BUSINESS_RULES_PKG - Must have an effective_date > 0 and expiration date');	
        
		WHEN invalid_costctr_name_err THEN  
          v_code := errnums.en_invalid_costctr_name_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_costctr_name_err ',
          'CCN_BUSINESS_RULES_PKG - Cost Center Name cannot be null');         		             		
		
    WHEN invalid_merchID_err THEN  
		      v_code := errnums.en_invalid_merchID_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_merchID_err ',
          'CCN_BUSINESS_RULES_PKG - merch_id cannot = 9999999999'); 
 		 
		WHEN invalid_amexid_err THEN  
		      v_code := errnums.en_invalid_amexid_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_amexID_err',
          'CCN_BUSINESS_RULES_PKG - amex_id cannot = 999999999'); 
    
		WHEN invalid_discoverid_err THEN  
		      v_code := errnums.en_invalid_discoverid_err;
		      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_discoverID_err ',
         'CCN_BUSINESS_RULES_PKG - discover_id cannot be null, if USA'); 
         
  --	when invalid_hierarchy_err then  
  --      v_code := errnums.en_invalid_hierarchy_err;
  --      errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.invalid_hierarchy_err ',
  --      'CCN_BUSINESS_RULES_PKG - Hierarchy cannot be found');            		             		
		 

	--	when inactive_hierarchy_err then  
	--	    v_code := errnums.en_inactive_hierarchy_err;
	--	    errpkg.raise_err(v_code, 'polling_ctrl_status_chks_sp.inactive_hierarchy_err ',
  --      'CCN_BUSINESS_RULES_PKG - Must have an effective_date > 0 and expiration_date > 0'); 
		 

		WHEN OTHERS THEN
        v_code := SQLCODE;
	      v_errm := substr(SQLERRM,1, 1000);
        errpkg.raise_err(v_code, v_errm,
        'CCN_BUSINESS_RULES_PKG - No errors found');     
   
	END  POLLING_CTRL_STATUS_CHKS_SP;
  
  
PROCEDURE REOPEN_CCNTR_SP  ( 
/*****************************************************************************
	REOPEN_CCNTR_SP

	This procedure is intended enforce the Business Rules
	for RE-opening a closed cost center and verifying the following rules:
  
  1.)  The close_date.COST_CENTER is zero or null
  2.)  The status_code.STATUS is not "5" (Stores), "X" (Territories), or "9" for all others
  3.)  There is an active STATUS table row for the Cost Center
  4.)  Territory Cost Centers have a Home_Store assignment
	TRD  Section: 3.3.10 

  Re-opening a closed cost center should not need to expire a previous STATUS
  table row since this was already done when the cost center was closed. 
   
  Also, since we now have a new "TYPE" table, we should probably make sure a new
  TYPE table row is added in active status.  
    
created : MDH 6/01/2012
changed:  MDH 7/25/2012
******************************************************************************/	
  inSTATUS_ROWTYPE       IN STATUS%ROWTYPE
 ,inCOST_CENTER_ROWTYPE  IN COST_CENTER%ROWTYPE
 ,inTERRITORY_ROWTYPE    IN TERRITORY%ROWTYPE 
 ,inTYPE_ROWTYPE         IN TYPE%ROWTYPE)
        IS 
                         
 non_numeric_exp 		EXCEPTION;
 no_cost_center_exp EXCEPTION;
 invalid_reopen_ccntr_exp EXCEPTION;
 no_act_status_rec_exp EXCEPTION;
 invalid_act_status_code_exp EXCEPTION;
 no_territory_exp EXCEPTION;
 no_terr_home_store_exp EXCEPTION;
 no_act_type_rec_exp EXCEPTION;
 v_status_rowtype  STATUS%ROWTYPE;
 v_type_rowtype  TYPE%ROWTYPE;
 v_cost_center_rowtype COST_CENTER%ROWTYPE;

 v_curr_date date := sysdate;
 v_code number;
 v_errm varchar(500);
 
BEGIN
/******************************************************************************
	Verify that the cost center is being reopened by checking the Close_Date
  against the Cost_Center_Table.
  
  if the close date is not zeros and is a change to the COST_CENTER table's
  close date; then there is no re-open.
****************************************************************************/	
 BEGIN
 	SELECT *  INTO v_cost_center_rowtype
		FROM COST_CENTER 
		WHERE COST_CENTER.cost_center_code    =  inCOST_CENTER_ROWTYPE.Cost_Center_Code; 
          
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
     RAISE no_cost_center_exp;
 END;
 
  IF (inCOST_CENTER_ROWTYPE.CLOSE_DATE IS NOT NULL)
--    or
--     ((inCOST_CENTER_ROWTYPE.CLOSE_DATE is null) and
--      (inCOST_CENTER_ROWTYPE.CLOSE_DATE   =  v_cost_center_rowtype.close_date)) 
      THEN
        RAISE invalid_reopen_ccntr_exp;
  END IF;
/******************************************************************************
	Verify that the cost center STATUS table is active for the cost center  
  being opened.
  if instatus_code, Ineffective_date, null; look for a record.
  Then verify that the active status is not close ("X","5", or "9")
****************************************************************************/	
--BEGIN
--	select *  into v_status_rowtype
--		from STATUS 
--		where STATUS.cost_center_code    =  inCOST_CENTER_ROWTYPE.Cost_Center_Code and
--          STATUS.effective_date  <=  v_curr_date     and
--          STATUS.expiration_date  is  null;
--EXCEPTION
-- WHEN NO_DATA_FOUND then
--    raise no_act_status_rec_exp;
--  
--END;

--  if (inSTATUS_ROWTYPE.status_code  <>  ' '  and
--      inSTATUS_ROWTYPE.effective_date  is not null)  then
    IF (inSTATUS_ROWTYPE.expiration_date IS NOT NULL) THEN 
         RAISE no_act_status_rec_exp;
    END IF;
/* *** * PSG CCN Quality Control CCNQC-18 TAL
-- This exception should NOT be raised if the cost center is of type Other or Admin
-- So, this IF statement was replaced by the two IF statements following.
    if (inSTATUS_ROWTYPE.STATUS_CODE in ('X','5','9'))  THEN 
          raise invalid_act_status_code_exp;
    end if;
* *** */
    IF inSTATUS_ROWTYPE.STATUS_CODE = 'X'  OR
       inSTATUS_ROWTYPE.STATUS_CODE = '5'  THEN 
          RAISE invalid_act_status_code_exp;
    END IF;
    
    IF inSTATUS_ROWTYPE.STATUS_CODE = '9'  AND 
      (inTYPE_ROWTYPE.TYPE_CODE    <> '41'  AND 
       inTYPE_ROWTYPE.TYPE_CODE    <> '42') THEN 
          RAISE invalid_act_status_code_exp;
    END IF;

/******************************************************************************
	Verify that the cost center TYPE table is active for the cost center  
  being opened.
  if intype_code, Inteffective_date, null; look for a record.
****************************************************************************/	
--BEGIN
--	select *  into v_type_rowtype
--		from TYPE 
--		where TYPE.cost_center_code    =  inCOST_CENTER_ROWTYPE.Cost_Center_Code and
--          TYPE.effective_date     <=  v_curr_date     and
--          TYPE.expiration_date     is  null;
--EXCEPTION
-- WHEN NO_DATA_FOUND then
--    raise no_act_type_rec_exp;
--  
--END;

    IF (inTYPE_ROWTYPE.expiration_date IS NOT NULL) THEN 
         RAISE no_act_type_rec_exp;
    END IF;

/*******************************************************************************
	For Territory Cost centers only, if territory is being reopend, then there
  must be a HOME_STORE populated on the TERRITORY table.
  *******************************************************************************/	      
  IF (inCOST_CENTER_ROWTYPE.CATEGORY = 'T')    THEN
       IF inTERRITORY_ROWTYPE.cost_center_code  <> inCOST_CENTER_ROWTYPE.cost_center_code  THEN  
             RAISE no_territory_exp;
       END IF;
       
       IF inTERRITORY_ROWTYPE.cost_center_code = inCOST_CENTER_ROWTYPE.cost_center_code  AND
          ((inTERRITORY_ROWTYPE.home_store IS NULL)   OR
            inTERRITORY_ROWTYPE.home_store  = '      ')       THEN
            RAISE no_terr_home_store_exp;
       END IF ;
  END IF;

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	EXCEPTION
	
		WHEN no_cost_center_exp THEN  
					v_code := errnums.en_no_cost_center_err;
			      errpkg.raise_err(v_code, 'REOPEN_CCNTR_SP.no_cost_center_exp '
             		,'Cost Center is not found in COST_CENTER table ');    
     WHEN invalid_reopen_ccntr_exp THEN  
		   		v_code := errnums.en_invalid_reopen_ccntr_err;
			      errpkg.raise_err(v_code, 'REOPEN_CCNTR_SP.invalid_reopen_ccntr_exp '
             		,'Cost Center close date must be zeros (null) to re-open a cost center ');  
     WHEN no_act_status_rec_exp THEN  
		   		v_code := errnums.en_no_act_status_rec_err;
			      errpkg.raise_err(v_code, 'REOPEN_CCNTR_SP.no_act_status_rec_exp '
             		,'No Cost Center active STATUS table entry has been found ');  
     WHEN invalid_act_status_code_exp THEN  
		   		v_code := errnums.en_invalid_reopen_ccntr_err;
			      errpkg.raise_err(v_code, 'REOPEN_CCNTR_SP.invalid_act_status_code_exp '
             		,'Status Code cannot be "X", "5", or "9" when re-opening a Cost Center');  
     WHEN no_act_type_rec_exp THEN  
 		   		v_code := errnums.en_no_act_type_rec_err;
 			      errpkg.raise_err(v_code, 'REOPEN_CCNTR_SP.no_act_type_rec_exp '
             		,'No Cost Center active TYPE table entry has been found ');  
     WHEN no_territory_exp THEN  
		   		v_code := errnums.en_no_territory_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.no_territory_exp ' 
             		,'Territory table is not found for cost center : ' ||
                 inCOST_CENTER_ROWTYPE.cost_center_code ||
                ' cannot check for home store assignment! ');   
      WHEN no_terr_home_store_exp THEN  
		   		v_code := errnums.en_terr_home_store_err;
			      errpkg.raise_err(v_code, 'CLOSE_CCNTR_SP.terr_home_store_exp ' 
             		,'Territory Cost Center has no Home_Store assignment ');     
 
		WHEN OTHERS THEN
					v_code := SQLCODE;
					v_errm := substr(SQLERRM,1, 500);
			      errpkg.raise_err(v_code, v_errm ||
             		'CCN_BUSINESS_RULES_PKG ');   
                
END REOPEN_CCNTR_SP;

 
PROCEDURE TERRITORY_HOME_STORE_ASSIGN_SP ( 
/*****************************************************************************
	TERRITORY_HOME_STORE_ASSIGNMENT_SP

	This procedure is intended to enforce the Business Rules
	for territory home store assignment and verifying the following rules:
  
  1.)  The Territory Category must be "T".
  2.)  The Home Store must be populated and it must me a valid "S" ( STORE ) Cost Center.
           The Store Cost Center value must be on both the COST_CENTER table and the STORE table.
  3.)  The Home Store cannot be closed (Close_Date > zero)
  4.)  The Statement_Type must be the same between the "Territory" and the "Home Store",
           or a "Wild Card" denoted by a NULL value.
  5.)  The Entity_Type must be the same between the "Territory" and the "Home Store"
           or a "WildCard" denoted by a NULL value.

created : TAL 05/22/2012
Modification History
--------------------
Modified Date         Modified By    Description
--------------------------------------------------------------------------------
11/17/2014            SXT410         Raising warning instead of raising an error to 
                                     relax the Business rule that enforces the 
                                     statement type should be the same when 
                                     changing or adding a new home store to a territory.
******************************************************************************/	
  inCOST_CENTER_rowtype  IN  COST_CENTER%ROWTYPE
 ,inTerritory_rowtype    IN TERRITORY%ROWTYPE)

        IS 
        

-- Specify in_xxxxx_rowttype to get all the fields.

 invalid_territory_category_exp    EXCEPTION;
 no_home_store_spec_exp            EXCEPTION;
 no_home_store_cctr_exp            EXCEPTION;
 home_store_cctr_cat_exp           EXCEPTION;
 no_home_store_exp                 EXCEPTION;
 home_store_closed_exp             EXCEPTION;
 no_territory_cctr_exp             EXCEPTION;
 terr_store_statement_type_exp     EXCEPTION;
 terr_store_entity_type_exp        EXCEPTION;

 v_home_cost_center_rowtype         COST_CENTER%ROWTYPE;
 v_stor_cost_center_rowtype         COST_CENTER%ROWTYPE;
 v_terr_cost_center_rowtype         COST_CENTER%ROWTYPE;
 v_territory_rowtype                territory%ROWTYPE;
 v_store_rowtype                    store%ROWTYPE;
 
 
 v_curr_date date := sysdate;
 v_code   number;
 v_errm   varchar(500);
 v_count  number;
 
  
BEGIN

/******************************************************************************
  1.)  The Territory Category must be "T"
****************************************************************************/	  

        IF  inTerritory_rowtype.CATEGORY    <>  'T'  THEN  
            RAISE invalid_territory_category_exp;
        END IF;
        
 --       dbms_output.put_line('completed edit rule 01). ' );
        
   
/******************************************************************************
  2.)  The Home Store must be populated and it must me a valid "S" ( STORE ) Cost Center.
           The Store Cost Center value must be on both the COST_CENTER table and the STORE table.
****************************************************************************/	 

/******************************************************************************
	Home Store must be populated
****************************************************************************/	  
        
        IF  inTerritory_rowtype.home_store  IS  NULL  THEN
            RAISE no_home_store_spec_exp;
        END IF;


/******************************************************************************
	get COST_CENTER for the HOME STORE
****************************************************************************/	  

BEGIN

           SELECT * INTO  v_home_cost_center_rowtype
		         FROM cost_center 
            WHERE COST_CENTER.cost_center_code  =  inTerritory_rowtype.HOME_STORE;
	
EXCEPTION
  WHEN NO_DATA_FOUND THEN
     RAISE no_home_store_cctr_exp;
END;

/******************************************************************************
	Cost Center for Home Store must be Category "S"
****************************************************************************/	  

        IF  v_home_cost_center_rowtype.CATEGORY   <>  'S'  THEN
            RAISE home_store_cctr_cat_exp;
        END IF;


/******************************************************************************
	get the STORE for the HOME STORE
****************************************************************************/	  
BEGIN
        
 --          select count (1) into v_count
	--	            from store 
--		            where store.cost_center_code  =  interritory_home_store;
	--	            where STORE.cost_center_code  =  'thomas';
	
           SELECT * INTO  v_store_rowtype
		            FROM store
		            WHERE store.cost_center_code  = inTerritory_rowtype.home_store;
            
EXCEPTION
  WHEN NO_DATA_FOUND THEN
     RAISE no_home_store_exp;
END;

 --       dbms_output.put_line('completed edit rule 02). ' );   

/******************************************************************************
  3.)  The Home Store cannot be closed (Close_Date > zero)
****************************************************************************/	 

        IF  v_home_cost_center_rowtype.close_date    IS NOT  NULL THEN
            RAISE home_store_closed_exp;
        END IF;

 --       dbms_output.put_line('completed edit rule 03). ' );   

/******************************************************************************
  4.)  The Statement_Type must be the same between the "Territory" and the "Home Store",
           or a "Wild Card" denoted by a NULL value.
****************************************************************************/	 

/******************************************************************************
	get COST_CENTER for the TERRITORY
****************************************************************************/	  

 --       dbms_output.put_line('completed edit rule 04A). ' );
        
        IF   v_home_cost_center_rowtype.statement_type IS NOT NULL
        AND  inCOST_CENTER_rowtype.statement_type IS NOT NULL THEN
        
            IF (v_home_cost_center_rowtype.statement_type  <>  inCOST_CENTER_rowtype.statement_type) THEN
               ERRPKG.STORE_WARNINGS(errnums.en_terr_store_stmnt_type_err, 
                                     'TERRITORY_HOME_STORE_ASSIGNMENT_SP.terr_store_statement_type ' );
            END IF;
        
        END IF;

 --       dbms_output.put_line('completed edit rule 04B). ' );
       
/******************************************************************************
  5.)  The Entity_Type must be the same between the "Territory" and the "Home Store"
           or a "WildCard" denoted by a NULL value.
****************************************************************************/	 

 --       dbms_output.put_line('Rule 05 Home Store Entity Type = ' || v_home_cost_center_rowtype.entity_type );
 --       dbms_output.put_line('Rule 05 Territory  Entity Type = ' || v_terr_cost_center_rowtype.entity_type );

        IF   v_home_cost_center_rowtype.entity_type  IS NOT  NULL 
        AND  inCOST_CENTER_rowtype.entity_type  IS NOT  NULL   THEN
        
            IF  v_home_cost_center_rowtype.entity_type    <>   inCOST_CENTER_rowtype.entity_type  THEN 
                 RAISE terr_store_entity_type_exp;
            END IF;
            
        END IF;

 --       dbms_output.put_line('completed edit rule 05). ' );

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION
	
               WHEN invalid_territory_category_exp THEN
                    v_code := errnums.en_territory_category_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.invalid_territiry_category_exp '  ,
                   'Territory Category value is "' || inTerritory_rowtype.CATEGORY || '" and should be "T" ');
                   
               WHEN no_home_store_spec_exp THEN
                    v_code := errnums.en_no_home_store_spec_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.no_home_store_specified_exp '  ,
                   'Territory Home Store was not specified ' || inTerritory_rowtype.home_store );
                   
               WHEN no_home_store_cctr_exp THEN
                    v_code := errnums.en_no_home_store_cctr_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.no_home_store_cctr_exp '  ,
                   'No Cost Center found for the Home Store = ' || inTerritory_rowtype.HOME_STORE);
                   
               WHEN home_store_cctr_cat_exp THEN
                    v_code := errnums.en_home_store_cctr_cat_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.home_store_cctr_cat_exp '  ,
                   'Home Store Cost Center Category is "' || v_home_cost_center_rowtype.CATEGORY || '" and should be "S" ');
 
               WHEN no_home_store_exp THEN  
                    v_code := errnums.en_no_home_store_err;
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.no_home_store_exp ' ,
                   'Store not found for Home Store = ' || inTerritory_rowtype.HOME_STORE);
 
               WHEN home_store_closed_exp THEN  
                    v_code := errnums.en_home_store_cctr_closed_err;
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.home_store_closed_exp ' ,
                   'Home Store Cost Center ' || inTerritory_rowtype.HOME_STORE || ' is Closed '); 
       
               WHEN no_territory_cctr_exp THEN
                    v_code := errnums.en_no_territory_cctr_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.no_territory_cctr_exp '  ,
                   'No Cost Center found for the Territory = ');

               WHEN terr_store_entity_type_exp THEN  
                    v_code := errnums.en_terr_store_entity_type_err;
                    errpkg.raise_err(v_code, 'TERRITORY_HOME_STORE_ASSIGNMENT_SP.terr_store_entity_type ' ,
                   'Territory and Home Store Entity Type mismatch - "' ||
                    v_terr_cost_center_rowtype.entity_type || '" and "' || 
                    v_home_cost_center_rowtype.entity_type || '"' ); 
 
               WHEN OTHERS THEN
                    v_code := SQLCODE;
                    v_errm := substr(SQLERRM,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'TERRITORY_HOME_STORE_ASSIGNMENT_SP ');   
 

END territory_home_store_assign_sp;

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                       TABLE SPECIFIC BUSINESS RULES SECTION
**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
--
PROCEDURE ADDRESS_CAN_BR_SP ( 
/*****************************************************************************
	ADDRESS_CAN_BR_SP       3.3.26   'ADDRESS_CAN' TABLE COLUMNS

	This procedure is intended to enforce the Business Rules
	for ADDRESS_CAN validation edits and verifying the following rules:
      
  This list of Business Rules by field (column) for the ADDRESS_CAN Table rely 
  on the COST_CENTER having been added and are valid for Canadian Cost Centers only!
  (Statement_Type = "CN" or Country_Code = "CAN"). 

  Please note that this table is a "History" table.  
  Any changes force a new row to be inserted and any previous rows to be expired
  where the Expiration_Date is the Effective_Date of the new Row minus One Day!  (COMMON_PKG)

  Please also note that for Territories (Category="T") 
  the address shown is for the Home_Store (Territory Table). 
  All fields will be protected!  This will be accomplished using the CCN_UI_INTERFACE_APP_PKG
  which will determine the address based on the Category Code, and Home Store if a Territory cost center.

  Please also note that for Stores (S) or Other (O), 
  Cost Centers which are polling Cost Centers (Polling_Status_Code = 'P'), 
  there must be a "Mailing Address" present!

  The list below is the Business Rules by Field (Column) for the ADDRESS_CAN  Table:

  1.	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_CAN table.
      b. This field (column) is also verified against the COST_CENTER Table.
      c. Also, this must be a Canadian Cost Center.                               

  2.	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.

  3.	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_CAN Row minus 1 day. (COMMON_PKG)

  4.	Postal_Code (6-VR/BR): 
      a. This field (column) will be validated against some Canadian Postal_Code list 
          yet to be determined (Keith?).
                           
  5.	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.    
             
  6.	TAXWARE Warning Message:  (MDH 01/15/2013)
      For "Stores" with a "Mailing" or "Physical" Address, if the Zip_Code or 
      Zip_Code_4 fields are changed (not equal to current address) show a warning
      message that the TAXWARE table must be changed.  All Updates/Inserts will
      continue.
 
 created : TAL 08/07/2012
 revosed : MDH 01/17/2013
 modified: 04/20/2016 jxc517 CCN Project Team....
           Added business rule to enforce creating future address types with only future effective date
******************************************************************************/	
  
   inADDRESS_CAN_ROWTYPE           ADDRESS_CAN%ROWTYPE
   ,inCOST_CENTER_ROWTYPE           IN  COST_CENTER%ROWTYPE
   )
   
        IS 
        
-- Error #01a
   cctr_must_be_ent_exp            EXCEPTION;
    
-- Error #01b
   invalid_cost_center_exp         EXCEPTION;
    
-- Error #01c
   cost_center_not_can_exp         EXCEPTION;
    
-- Error #02a 
   invalid_eff_date_exp            EXCEPTION;
   
-- Error #03a  
   invalid_exp_date_exp            EXCEPTION;
   
-- Error #04a
   invalid_zip_code_exp            EXCEPTION;
               
-- Error #5
   status_check_warning_exp        EXCEPTION;
                   
-- Error #6
   taxware_check_warning_exp       EXCEPTION;
   
   invld_ftr_adr_efctv_dt_err      EXCEPTION;

   v_cost_center_rowtype           COST_CENTER%ROWTYPE;
   v_old_address_can_rowtype       ADDRESS_CAN%ROWTYPE;   
   
   v_code   number;
   v_date   date  ;
   v_curr_date date := sysdate;
   v_count  number;
   v_errm   varchar(500);
 
  
BEGIN

/******************************************************************************
  1).	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_CAN table.
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/ 

/*******************************************************************************
      a. Cost_Center can not be null, spaces, or all zeroes, and must 6 characters 
*******************************************************************************/

--    cost_center_code can not be null 
      IF  inaddress_can_rowtype.cost_center_code  IS  NULL
--    cost_center_code can not be just one or more spaces
      OR  REGEXP_LIKE(inaddress_can_rowtype.cost_center_code, '^ *$')
--    cost_center_code can not be all zeroes
      OR  inaddress_can_rowtype.cost_center_code  =   '000000'   
--    cost_center_code entered must be 6 characters in length
      OR  length(inaddress_can_rowtype.cost_center_code)  !=  6
      THEN
          RAISE cctr_must_be_ent_exp;
-- See Error #01a.
      END IF;
      

/*******************************************************************************
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/

BEGIN

	SELECT *  INTO v_cost_center_rowtype
		 FROM cost_center 
		WHERE cost_center.cost_center_code  =  inaddress_can_rowtype.cost_center_code;
    
EXCEPTION
  WHEN no_data_found THEN 
     --Cost Center might not be present during the creation of cost center
     --In such scenario's validate the details using the input cost center row type
     --Else log error stating cost center is not present
     IF v_cost_center_rowtype.cost_center_code IS NULL THEN
        v_cost_center_rowtype := inCOST_CENTER_ROWTYPE;
     ELSE
        --raise invalid_cost_center_exp;
        NULL;
     END IF;
-- See Error #01b.
  
END;

/*******************************************************************************
      c. Also, this must be a Canadian Cost Center.                               
*******************************************************************************/

      IF  v_cost_center_rowtype.country_code    !=  'CAN'    THEN 
          --raise cost_center_not_can_exp;
          NULL;
-- See Error #01c.
      END IF;

--    dbms_output.put_line('completed edit rule 01. ' );  


/*******************************************************************************
  2).	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

/*******************************************************************************
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

      IF  inaddress_can_rowtype.effective_date  IS NOT  NULL    THEN
--        test for a valid date entered into effective date
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_can_rowtype.effective_date;
-- Yes, it was a valid date (no EXCEPTION) 

EXCEPTION
  WHEN others THEN 
  RAISE invalid_eff_date_exp;
-- No,  not a valid date
-- See Error #02a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 02. ' );

/*******************************************************************************
  3).	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_CAN Row minus 1 day. (COMMON_PKG)
*******************************************************************************/

/*******************************************************************************
	     a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_CAN Row minus 1 day. (COMMON_PKG)
*******************************************************************************/	

      IF  inaddress_can_rowtype.expiration_date  IS NOT  NULL    THEN
--        test for a valid date entered into expiration date
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_can_rowtype.expiration_date;
-- Yes, it was a valid date (no EXCEPTION) 

EXCEPTION
  WHEN others THEN 
  RAISE invalid_exp_date_exp;
-- No,  not a valid date
-- See Error #03a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 03. ' );   

/*******************************************************************************
  4).	Postal_Code (6-VR/BR): 
      a. This field (column) will be validated against some Canadian Postal_Code list 
          yet to be determined (Keith?).

*******************************************************************************/

--  ^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$
--  Matches Canadian PostalCode formats with or without spaces (e.g., "T2X 1V4" or "T2X1V4")
--  Drop the " *" to eliminate the test for the space

/*******************************************************************************
	    a. This field (column) will be validated against some Canadian Postal_Code list 
          yet to be determined (Keith?).
*******************************************************************************/	  

      IF  NOT REGEXP_LIKE(inaddress_can_rowtype.postal_code, '^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1}\d{1}[A-Z]{1}\d{1}$')
      OR                  inaddress_can_rowtype.postal_code  IS  NULL    THEN
          RAISE invalid_zip_code_exp;
-- See Error #04a
      END IF;
            
--    dbms_output.put_line('completed edit rule 04. ' ); 

        
/*******************************************************************************
  5).	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.
*******************************************************************************/
 BEGIN
      
 	SELECT *  INTO v_old_address_can_rowtype
		FROM ADDRESS_CAN 
		WHERE ADDRESS_CAN.cost_center_code    =  inADDRESS_CAN_ROWTYPE.Cost_Center_Code 
      AND ADDRESS_CAN.address_type        =  inADDRESS_CAN_ROWTYPE.Address_Type
      AND ADDRESS_CAN.effective_date      <= v_curr_date   
      AND ADDRESS_CAN.expiration_date  IS  NULL;
      
   IF   (v_cost_center_rowtype.CATEGORY     IN  ('S'))
    AND (inADDRESS_CAN_ROWTYPE.address_type IN  ('M'))
    AND ((inADDRESS_CAN_ROWTYPE.address_line_1 IS NULL  AND  v_old_address_can_rowtype.address_line_1 IS NOT NULL
      OR  inADDRESS_CAN_ROWTYPE.address_line_1 IS NOT NULL  AND  v_old_address_can_rowtype.address_line_1 IS NULL
      OR  inADDRESS_CAN_ROWTYPE.address_line_1  != v_old_address_can_rowtype.address_line_1)
      OR (inADDRESS_CAN_ROWTYPE.address_line_2 IS NULL  AND  v_old_address_can_rowtype.address_line_2 IS NOT NULL
      OR  inADDRESS_CAN_ROWTYPE.address_line_2 IS NOT NULL  AND  v_old_address_can_rowtype.address_line_2 IS NULL
      OR  inADDRESS_CAN_ROWTYPE.address_line_2  != v_old_address_can_rowtype.address_line_2)
      OR (inADDRESS_CAN_ROWTYPE.address_line_3 IS NULL  AND  v_old_address_can_rowtype.address_line_3 IS NOT NULL
      OR  inADDRESS_CAN_ROWTYPE.address_line_3 IS NOT NULL  AND  v_old_address_can_rowtype.address_line_3 IS NULL     
      OR  inADDRESS_CAN_ROWTYPE.address_line_3  != v_old_address_can_rowtype.address_line_3))  THEN
           --raise status_check_warning_exp;    commented out for now
           NULL;
  END IF;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
       NULL;
  
 END;
 
-- dbms_output.put_line('completed address_can edit rule 5. ' ); 
         
/*******************************************************************************
 6).	TAXWARE Warning Message:  (MDH 01/15/2013)
      For "Stores" with a "Mailing" or "Physical" Address, if the Zip_Code or 
      Zip_Code_4 fields are changed (not equal to current address) show a warning
      message that the TAXWARE table must be changed.  All Updates/Inserts will
      continue.
*******************************************************************************/
  BEGIN
      
 	SELECT *  INTO v_old_address_can_rowtype
		FROM ADDRESS_CAN 
		WHERE ADDRESS_CAN.cost_center_code    =  inADDRESS_CAN_ROWTYPE.Cost_Center_Code 
      AND ADDRESS_CAN.address_type        =  inADDRESS_CAN_ROWTYPE.Address_Type
      AND ADDRESS_CAN.effective_date      <= v_curr_date   
      AND ADDRESS_CAN.expiration_date  IS  NULL;
      
   IF   (v_cost_center_rowtype.CATEGORY     IN  ('S'))
    AND (inADDRESS_CAN_ROWTYPE.address_type IN  ('M','P'))
    AND ((inADDRESS_CAN_ROWTYPE.postal_code IS NULL  AND  v_old_address_can_rowtype.postal_code IS NOT NULL
      OR  inADDRESS_CAN_ROWTYPE.postal_code IS NOT NULL  AND  v_old_address_can_rowtype.postal_code IS NULL
      OR  inADDRESS_CAN_ROWTYPE.postal_code  !=  v_old_address_can_rowtype.postal_code))  THEN
--            raise taxware_check_warning_exp; remove for now
			NULL;
  END IF;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
       NULL;
  
 END;
       
--    dbms_output.put_line('completed edit rule 6. ' ); 
        
--    dbms_output.put_line('completed ALL edit rules). ' );

    IF inADDRESS_CAN_ROWTYPE.address_type = 'F' AND inADDRESS_CAN_ROWTYPE.EFFECTIVE_DATE <= TRUNC(SYSDATE) THEN
        RAISE invld_ftr_adr_efctv_dt_err;
    END IF;

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION
          
-- Error #01a
               WHEN cctr_must_be_ent_exp     THEN
                    v_code := errnums.en_cctr_must_be_ent_err; 
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.cctr_must_be_ent_exp ' ,
                   '#01a ' ||
                   'Cost_Center_Code was entered as "' || inaddress_can_rowtype.cost_center_code || '", ' ||
                   'However, Cost_Center_Code must be entered , can not be "null" or "spaces", ' ||
                   'and must be 6 digits numeric.' );  

-- Error #01b
               WHEN invalid_cost_center_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.invalid_cost_center_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_can_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center was not found.' );
 
-- Error #01c
               WHEN cost_center_not_can_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.cost_center_not_can_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_can_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center is not a Canadian Cost Center.' );
                   
-- Error #02a
               WHEN invalid_eff_date_exp     THEN
                    v_code := errnums.en_invalid_eff_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.invalid_eff_date_exp ' ,
                   '#02a ' ||
                   'Effective_Date was entered as "' || inaddress_can_rowtype.effective_date || '", ' || 
                   'However, a valid date must be entered into this field.');   
                   
-- Error #03a
               WHEN invalid_exp_date_exp     THEN
                    v_code := errnums.en_invalid_exp_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.invalid_exp_date_exp ' ,
                   'Expiration_Date was entered as "' || inaddress_can_rowtype.expiration_date || '", ' || 
                   'However, a valid date must be entered into this field.');   
                   
-- Error #04a
               WHEN invalid_zip_code_exp     THEN
                    v_code := errnums.en_invalid_zip_code_err;
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.invalid_zip_code_exp ' ,
                   'Postal_Code was entered as "' || inaddress_can_rowtype.postal_code || '", ' || 
                   'However, this is not the correct format for a Canadian Postal Code.'); 
             
-- Error #5
               WHEN status_check_warning_exp     THEN
                    v_code := errnums.en_status_check_warning_wrn;  
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.status_check_warning_exp ' ,
                   '** WARNING ** ' ||  
                   'Address Line has been changed, please check status code for store relocation?');      
                                                
-- Error #6
               WHEN taxware_check_warning_exp     THEN
                    v_code := errnums.en_taxware_check_warning_wrn;  
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.taxware_check_warning_exp ' ,
                   '** WARNING ** ' ||  
                   'Zip Code has been changed, please check TAXWARE status for this store.');    
                  
               WHEN invld_ftr_adr_efctv_dt_err THEN
                    v_code := errnums.en_invld_ftr_adr_efctv_dt_err;
                    errpkg.raise_err(v_code, 'ADDRESS_CAN_BR_SP.invld_ftr_adr_efctv_dt_err ' ,
                   'Future Address Type can only have effective date in future');

END ADDRESS_CAN_BR_SP;

PROCEDURE ADDRESS_MEX_BR_SP ( 
/*****************************************************************************
	ADDRESS_MEX_BR_SP       3.3.27   'ADDRESS_MEX' TABLE COLUMNS

	This procedure is intended to enforce the Business Rules
	for ADDRESS_MEX validation edits and verifying the following rules:
      
  This list of Business Rules by field (column) for the ADDRESS_MEX Table rely
  on the COST_CENTER having been added and are valid for Mexican Cost Centers only!
  (Statement_Type = "MX" or Country_Code = "MEX"). 

  Please note that this table is a "History" table.
  Any changes force a new row to be inserted and any previous rows to be expired
  where the Expiration_Date is the Effective_Date of the new Row minus One Day!  (COMMON_PKG)

  Please also note that for Territories (Category="T")
  the address shown is for the Home_Store (Territory Table).
  All fields will be protected!  This will be accomplished using the CCN_UI_INTERFACE_APP_PKG
  which will determine the address based on the Category Code, and Home Store if a Territory cost center.

  Please also note that for Stores (S) or Other (O),
  Cost Centers which are polling Cost Centers (Polling_Status_Code = 'P'),
  there must be a "Mailing Address" present!

  The list below is the Business Rules by Field (Column) for the ADDRESS_MEX  Table:

  1.	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_MEX table.
      b. This field (column) is also verified against the COST_CENTER Table.
      c. Also, this must be a Mexican Cost Center.                               

  3.	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!
          The current System Date is used, but this field (column) can be changed.

  4.	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date
          of the new ADDRESS_MEX Row minus 1 day. (COMMON_PKG).

  5.	Postal_Code (5-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) will be validated against some Mexican Postal_Code list
          yet to be determined (Keith?).
                    
  6.	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.

 created : TAL 08/07/2012
 revised : MDH 01/17/2013
 modified: 04/20/2016 jxc517 CCN Project Team....
           Added business rule to enforce creating future address types with only future effective date
******************************************************************************/	
  
   inADDRESS_MEX_ROWTYPE           ADDRESS_MEX%ROWTYPE
   ,inCOST_CENTER_ROWTYPE           IN  COST_CENTER%ROWTYPE
   ) 
   
        IS 
        
-- Error #01a
   cctr_must_be_ent_exp            EXCEPTION;
    
-- Error #01b
   invalid_cost_center_exp         EXCEPTION;
    
-- Error #01c
   cost_center_not_mex_exp         EXCEPTION;
    
-- Error #03a 
   invalid_eff_date_exp            EXCEPTION;
   
-- Error #04a  
   invalid_exp_date_exp            EXCEPTION;
   
-- Error #05a
   invalid_zip_code_exp            EXCEPTION;
          
-- Error #6
   status_check_warning_exp        EXCEPTION;   
   
   invld_ftr_adr_efctv_dt_err      EXCEPTION;

   v_cost_center_rowtype           COST_CENTER%ROWTYPE;
   v_old_address_mex_rowtype       ADDRESS_MEX%ROWTYPE;   
   
   v_code   number;
   v_date   date  ;
   v_curr_date date := sysdate;
   v_count  number;
   v_errm   varchar(500);
 
  
BEGIN

/******************************************************************************
  1).	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_MEX table.
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/ 

/*******************************************************************************
      a. Cost_Center can not be null, spaces, or all zeroes, and must 6 characters 
*******************************************************************************/

--    cost_center_code can not be null 
      IF  inaddress_mex_rowtype.cost_center_code  IS  NULL
--    cost_center_code can not be just one or more spaces
      OR  REGEXP_LIKE(inaddress_mex_rowtype.cost_center_code, '^ *$')
--    cost_center_code can not be all zeroes
      OR  inaddress_mex_rowtype.cost_center_code  =   '000000'   
--    cost_center_code entered must be 6 characters in length
      OR  length(inaddress_mex_rowtype.cost_center_code)  !=  6
      THEN
          RAISE cctr_must_be_ent_exp;
-- See Error #01a.
      END IF;
      
      
/*******************************************************************************
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/

BEGIN

	SELECT *  INTO v_cost_center_rowtype
		 FROM cost_center 
		WHERE cost_center.cost_center_code  =  inaddress_mex_rowtype.cost_center_code;
     
EXCEPTION
  WHEN no_data_found THEN 
     --Cost Center might not be present during the creation of cost center
     --In such scenario's validate the details using the input cost center row type
     --Else log error stating cost center is not present
     IF v_cost_center_rowtype.cost_center_code IS NOT NULL THEN
        v_cost_center_rowtype := inCOST_CENTER_ROWTYPE;
     ELSE
        --raise invalid_cost_center_exp;
        NULL;
     END IF;
-- See Error #01b.
  
END;

/*******************************************************************************
      c. Also, this must be a Mexican Cost Center.                               
*******************************************************************************/

      IF  v_cost_center_rowtype.country_code    !=  'MEX'    THEN 
          --raise cost_center_not_mex_exp;
          NULL;
-- See Error #01c.
      END IF;
       
--    dbms_output.put_line('completed edit rule 01. ' );  


/*******************************************************************************
  3).	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

/*******************************************************************************
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

      IF  inADDRESS_MEX_rowtype.effective_date  IS NOT  NULL    THEN
--        test for a valid date entered into effective date
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inADDRESS_MEX_rowtype.effective_date;
-- Yes, it was a valid date (no EXCEPTION) 

EXCEPTION
  WHEN others THEN 
  RAISE invalid_eff_date_exp;
-- No,  not a valid date
-- See Error #03a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 03. ' );

/*******************************************************************************
  4).	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_MEX Row minus 1 day. (COMMON_PKG)
*******************************************************************************/

/*******************************************************************************
	     a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_MEX Row minus 1 day. (COMMON_PKG)
*******************************************************************************/	

      IF  inaddress_mex_rowtype.expiration_date  IS NOT  NULL    THEN
--        test for a valid date entered into expiration date 
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_mex_rowtype.expiration_date;
-- Yes, it was a valid date (no EXCEPTION)  

EXCEPTION
  WHEN others THEN 
  RAISE invalid_exp_date_exp;
-- No,  not a valid date
-- See Error #04a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 04. ' );   

/*******************************************************************************
  5).	Postal_Code (5-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) will be validated against some Mexican Postal_Code list
          yet to be determined (Keith?).

*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is mandatory and cannot be spaces. 
*******************************************************************************/

--    postal code can not be just one or more spaces
      IF      REGEXP_LIKE(inaddress_mex_rowtype.postal_code, '^ *$')
--    postal code must match correct format - 5 digit numeric
      OR  NOT REGEXP_LIKE(inADDRESS_MEX_rowtype.postal_code, '^\d{5}$')
--    postal code can not be null
      OR                  inaddress_mex_rowtype.postal_code  IS  NULL    THEN
          RAISE invalid_zip_code_exp; 
-- See Error #05a
      END IF;

/*******************************************************************************
      b. This field (column) will be validated against some Mexican Postal_Code list
          yet to be determined (Keith?).
*******************************************************************************/
            
--    dbms_output.put_line('completed edit rule 05. ' ); 
        
/*******************************************************************************
  6).	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.
*******************************************************************************/
 BEGIN
      
 	SELECT *  INTO v_old_address_mex_rowtype
		FROM ADDRESS_MEX 
		WHERE ADDRESS_MEX.cost_center_code    =  inADDRESS_MEX_ROWTYPE.Cost_Center_Code 
      AND ADDRESS_MEX.address_type        =  inADDRESS_MEX_ROWTYPE.Address_Type
      AND ADDRESS_MEX.effective_date      <= v_curr_date   
      AND ADDRESS_MEX.expiration_date  IS  NULL;
      
   IF   (v_cost_center_rowtype.CATEGORY     IN  ('S'))
    AND (inADDRESS_MEX_ROWTYPE.address_type IN  ('M'))
    AND ((inADDRESS_MEX_ROWTYPE.address_line_1 IS NULL  AND  v_old_address_mex_rowtype.address_line_1 IS NOT NULL
      OR  inADDRESS_MEX_ROWTYPE.address_line_1 IS NOT NULL  AND  v_old_address_mex_rowtype.address_line_1 IS NULL
      OR  inADDRESS_MEX_ROWTYPE.address_line_1  != v_old_address_mex_rowtype.address_line_1)
      OR (inADDRESS_MEX_ROWTYPE.address_line_2 IS NULL  AND  v_old_address_mex_rowtype.address_line_2 IS NOT NULL
      OR  inADDRESS_MEX_ROWTYPE.address_line_2 IS NOT NULL  AND  v_old_address_mex_rowtype.address_line_2 IS NULL
      OR  inADDRESS_MEX_ROWTYPE.address_line_2  != v_old_address_mex_rowtype.address_line_2)
      OR (inADDRESS_MEX_ROWTYPE.address_line_3 IS NULL  AND  v_old_address_mex_rowtype.address_line_3 IS NOT NULL
      OR  inADDRESS_MEX_ROWTYPE.address_line_3 IS NOT NULL  AND  v_old_address_mex_rowtype.address_line_3 IS NULL     
      OR  inADDRESS_MEX_ROWTYPE.address_line_3  != v_old_address_mex_rowtype.address_line_3))  THEN
--           raise status_check_warning_exp; remove for now.......
			NULL;
  END IF;
  
    IF inADDRESS_MEX_ROWTYPE.address_type = 'F' AND inADDRESS_MEX_ROWTYPE.EFFECTIVE_DATE <= TRUNC(SYSDATE) THEN
        RAISE invld_ftr_adr_efctv_dt_err;
    END IF;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
       NULL;
  
 END;
 
-- dbms_output.put_line('completed address_oth edit rule 6. ' ); 
        
--    dbms_output.put_line('completed ALL edit rules). ' );

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION
          
-- Error #01a
               WHEN cctr_must_be_ent_exp     THEN
                    v_code := errnums.en_cctr_must_be_ent_err; 
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.cctr_must_be_ent_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_mex_rowtype.cost_center_code || '", ' ||
                   'However, Cost_Center_Code must be entered , can not be "null" or "spaces", ' ||
                   'and must be 6 digits numeric.' );   
                    
-- Error #01b
               WHEN invalid_cost_center_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.invalid_cost_center_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_mex_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center was not found.' );
 
-- Error #01c
               WHEN cost_center_not_mex_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.cost_center_not_mex_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_mex_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center is not a Mexican Cost Center.' );
                   
-- Error #03a
               WHEN invalid_eff_date_exp     THEN
                    v_code := errnums.en_invalid_eff_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.invalid_eff_date_exp ' ,
                   'Effective_Date was entered as "' || inaddress_mex_rowtype.effective_date || '", ' || 
                   'However, a valid date must be entered into this field.');    
                   
-- Error #04a
               WHEN invalid_exp_date_exp     THEN
                    v_code := errnums.en_invalid_exp_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.invalid_exp_date_exp ' ,
                   'Expiration_Date was entered as "' || inaddress_mex_rowtype.expiration_date || '", ' || 
                   'However, a valid date must be entered into this field.');    
                   
-- Error #05a
               WHEN invalid_zip_code_exp     THEN
                    v_code := errnums.en_invalid_zip_code_err;
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.invalid_zip_code_exp ' ,
                   'Postal_Code was entered as "' || inaddress_mex_rowtype.postal_code || '", ' || 
                   'However, Mexico Postal Code format is 5 numeric digits.');  
             
-- Error #6
               WHEN status_check_warning_exp     THEN
                    v_code := errnums.en_status_check_warning_wrn;  
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.status_check_warning_exp ' ,
                   '** WARNING ** ' ||  
                   'Address Line has been changed, please check status code for store relocation?');                             

               WHEN invld_ftr_adr_efctv_dt_err THEN
                    v_code := errnums.en_invld_ftr_adr_efctv_dt_err;
                    errpkg.raise_err(v_code, 'ADDRESS_MEX_BR_SP.invld_ftr_adr_efctv_dt_err ' ,
                   'Future Address Type can only have effective date in future');
END ADDRESS_MEX_BR_SP;

PROCEDURE ADDRESS_OTH_BR_SP ( 
/*****************************************************************************
	ADDRESS_OTH_BR_SP       3.3.28   'ADDRESS_OTH' TABLE COLUMNS

	This procedure is intended to enforce the Business Rules
	for ADDRESS_OTH validation edits and verifying the following rules:
      
  This list of Business Rules by field (column) for the ADDRESS_OTH Table rely
  on the COST_CENTER having been added and are valid for Cost Centers 
  which are not Canadian, Mexican, or U.S. Cost Centers!  These are generally International Cost Centers. 

  Please note that this table is a "History" table.
  Any changes force a new row to be inserted and any previous rows to be expired
  where the Expiration_Date is the Effective_Date of the new Row minus One Day!  (COMMON_PKG)

  Please also note that for Territories (Category="T")
  the address shown is for the Home_Store (Territory Table).
  All fields will be protected!  This will be accomplished using the CCN_UI_INTERFACE_APP_PKG
  which will determine the address based on the Category Code, and Home Store if a Territory cost center.

  Please also note that for Stores (S) or Other (O),
  Cost Centers which are polling Cost Centers (Polling_Status_Code = 'P'),
  there must be a "Mailing Address" present!

  The list below is the Business Rules by Field (Column) for the ADDRESS_OTH  Table:

  1.	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_OTH table.
      b. This field (column) is also verified against the COST_CENTER Table.
      c. Also, this must not be a Canadian, Mexican, or United States Cost Center.                               

  3.	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!
          The current System Date is used, but this field (column) can be changed.

  4.	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date
          of the new ADDRESS_OTH Row minus 1 day. (COMMON_PKG).

  4.	Postal_Code (10-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) is free form, allowing the entry of international Postal Codes.

  6.	Country (25-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) is free form, allowing the entry of international Country Names.
           
  7.	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.

 created : TAL 08/07/2012
 revised : MDH 01/17/2013
 modified: 04/20/2016 jxc517 CCN Project Team....
           Added business rule to enforce creating future address types with only future effective date
******************************************************************************/	
  
   inADDRESS_OTH_ROWTYPE           ADDRESS_OTHER%ROWTYPE
   ,inCOST_CENTER_ROWTYPE           IN  COST_CENTER%ROWTYPE
   )  
   
        IS 
        
-- Error #01a
   cctr_must_be_ent_exp            EXCEPTION;
    
-- Error #01b
   invalid_cost_center_exp         EXCEPTION;
    
-- Error #01c
   cost_center_not_oth_exp         EXCEPTION;
    
-- Error #03a 
   invalid_eff_date_exp            EXCEPTION;
   
-- Error #04a  
   invalid_exp_date_exp            EXCEPTION;
   
-- Error #05a
   invalid_zip_code_exp            EXCEPTION;
   
-- Error #06a
   country_must_be_ent_exp         EXCEPTION;
       
-- Error #7
   status_check_warning_exp        EXCEPTION;   
   
   invld_ftr_adr_efctv_dt_err      EXCEPTION;

   v_cost_center_rowtype           COST_CENTER%ROWTYPE;
   v_old_address_oth_rowtype       ADDRESS_OTHER%ROWTYPE;   
   
   v_code   number;
   v_date   date  ;
   v_curr_date date := sysdate;
   v_count  number;
   v_errm   varchar(500);
 
  
BEGIN

/******************************************************************************
  1).	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_OTH table.
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/ 

/*******************************************************************************
      a. Cost_Center can not be null, spaces, or all zeroes, and must 6 characters 
*******************************************************************************/

--    cost_center_code can not be null 
      IF  inaddress_oth_rowtype.cost_center_code  IS  NULL
--    cost_center_code can not be just one or more spaces
      OR  REGEXP_LIKE(inaddress_oth_rowtype.cost_center_code, '^ *$')
--    cost_center_code can not be all zeroes
      OR  inaddress_oth_rowtype.cost_center_code  =   '000000'   
--    cost_center_code entered must be 6 characters in length
      OR  length(inaddress_oth_rowtype.cost_center_code)  !=  6
      THEN
          RAISE cctr_must_be_ent_exp;
-- See Error #01a.
      END IF;
            
/*******************************************************************************
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/

BEGIN

	SELECT *  INTO v_cost_center_rowtype
		 FROM cost_center 
		WHERE cost_center.cost_center_code  =  inaddress_oth_rowtype.cost_center_code;
      
EXCEPTION
  WHEN no_data_found THEN 
     --Cost Center might not be present during the creation of cost center
     --In such scenario's validate the details using the input cost center row type
     --Else log error stating cost center is not present
     IF v_cost_center_rowtype.cost_center_code IS NOT NULL THEN
        v_cost_center_rowtype := inCOST_CENTER_ROWTYPE;
     ELSE
--        raise invalid_cost_center_exp;
			NULL;
     END IF;
-- See Error #01b.
  
END;

/*******************************************************************************
      c. Also, this must not be a 'CAN', 'MEX', or 'USA' Cost Center.                               
*******************************************************************************/

      IF  v_cost_center_rowtype.country_code     IN  ('CAN','MEX','USA','PRI','BRB')    THEN 
         -- raise cost_center_not_oth_exp;
         NULL;
-- See Error #01c.
      END IF;
       
--    dbms_output.put_line('completed edit rule 01. ' );  


/*******************************************************************************
  3).	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

/*******************************************************************************
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

      IF  inaddress_oth_rowtype.effective_date  IS NOT  NULL    THEN
--        test for a valid date entered into effective date 
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_oth_rowtype.effective_date;
-- Yes, it was a valid date (no EXCEPTION)  

EXCEPTION
  WHEN others THEN 
  RAISE invalid_eff_date_exp;
-- No,  not a valid date
-- See Error #03a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 03. ' );

/*******************************************************************************
  4).	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_OTH Row minus 1 day. (COMMON_PKG)
*******************************************************************************/

/*******************************************************************************
	     a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_OTH Row minus 1 day. (COMMON_PKG)
*******************************************************************************/	

      IF  inaddress_oth_rowtype.expiration_date  IS NOT  NULL    THEN
--        test for a valid date entered into expiration date  
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_oth_rowtype.expiration_date;
-- Yes, it was a valid date (no EXCEPTION)   

EXCEPTION
  WHEN others THEN 
  RAISE invalid_exp_date_exp;
-- No,  not a valid date
-- See Error #04a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 04. ' );   

/*******************************************************************************
  5).	Postal_Code (10-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) is free form, allowing the entry of international Postal Codes.
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is mandatory and cannot be spaces. 
*******************************************************************************/

--    postal code can not be just one or more spaces
      IF      (REGEXP_LIKE(inaddress_oth_rowtype.postal_code, '^ *$')
--    postal code can not be null 
      OR                  inaddress_oth_rowtype.postal_code  IS  NULL)
      AND inaddress_oth_rowtype.country_code  <> 'TTO' THEN
          RAISE invalid_zip_code_exp;  
-- See Error #05a
      END IF;
      
/*******************************************************************************
	    b. This field (column) is free form, allowing the entry of international Postal Codes.
*******************************************************************************/
-- no further field edit is necessary

--    dbms_output.put_line('completed edit rule 05. ' );   

/*******************************************************************************
  6).	Country (25-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) is free form, allowing the entry of international Country Names.

*******************************************************************************/

/*******************************************************************************
      a. This field (column) is mandatory and cannot be spaces. 
*******************************************************************************/

--    country can not be just one or more spaces
      IF      REGEXP_LIKE(inaddress_oth_rowtype.country_code, '^ *$')
--    country can not be null 
      OR                  inaddress_oth_rowtype.country_code  IS  NULL    THEN
          RAISE country_must_be_ent_exp;  
-- See Error #05a
      END IF;
      
/*******************************************************************************
      b. This field (column) is free form, allowing the entry of international Country Names.
*******************************************************************************/
            
--    dbms_output.put_line('completed edit rule 06. ' ); 
       
/*******************************************************************************
  7).	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.
*******************************************************************************/
 BEGIN
      
 	SELECT *  INTO v_old_address_oth_rowtype
		FROM ADDRESS_OTHER 
		WHERE ADDRESS_OTHER.cost_center_code    =  inADDRESS_OTH_ROWTYPE.Cost_Center_Code 
      AND ADDRESS_OTHER.address_type        =  inADDRESS_OTH_ROWTYPE.Address_Type
      AND ADDRESS_OTHER.effective_date      <= v_curr_date   
      AND ADDRESS_OTHER.expiration_date  IS  NULL;
      
   IF   (v_cost_center_rowtype.CATEGORY     IN  ('S'))
    AND (inADDRESS_OTH_ROWTYPE.address_type IN  ('M'))
    AND ((inADDRESS_OTH_ROWTYPE.address_line_1 IS NULL  AND  v_old_address_oth_rowtype.address_line_1 IS NOT NULL
      OR  inADDRESS_OTH_ROWTYPE.address_line_1 IS NOT NULL  AND  v_old_address_oth_rowtype.address_line_1 IS NULL
      OR  inADDRESS_OTH_ROWTYPE.address_line_1  != v_old_address_oth_rowtype.address_line_1)
      OR (inADDRESS_OTH_ROWTYPE.address_line_2 IS NULL  AND  v_old_address_oth_rowtype.address_line_2 IS NOT NULL
      OR  inADDRESS_OTH_ROWTYPE.address_line_2 IS NOT NULL  AND  v_old_address_oth_rowtype.address_line_2 IS NULL
      OR  inADDRESS_OTH_ROWTYPE.address_line_2  != v_old_address_oth_rowtype.address_line_2)
      OR (inADDRESS_OTH_ROWTYPE.address_line_3 IS NULL  AND  v_old_address_oth_rowtype.address_line_3 IS NOT NULL
      OR  inADDRESS_OTH_ROWTYPE.address_line_3 IS NOT NULL  AND  v_old_address_oth_rowtype.address_line_3 IS NULL     
      OR  inADDRESS_OTH_ROWTYPE.address_line_3  != v_old_address_oth_rowtype.address_line_3))  THEN
           --raise status_check_warning_exp; remove for now
           NULL;
  END IF;
  
    IF inADDRESS_OTH_ROWTYPE.address_type = 'F' AND inADDRESS_OTH_ROWTYPE.EFFECTIVE_DATE <= TRUNC(SYSDATE) THEN
        RAISE invld_ftr_adr_efctv_dt_err;
    END IF;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
       NULL;
  
 END;
 
 -- dbms_output.put_line('completed address_oth edit rule 7. ' ); 
        
--    dbms_output.put_line('completed ALL edit rules). ' );

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION  
                   
-- Error #01a         
               WHEN cctr_must_be_ent_exp     THEN
                    v_code := errnums.en_cctr_must_be_ent_err; 
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.cctr_must_be_ent_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_oth_rowtype.cost_center_code || '", ' ||
                   'However, Cost_Center_Code must be entered , can not be "null" or "spaces", ' || 
                   'and must be 6 digits numeric.' );  
                   
-- Error #01b
               WHEN invalid_cost_center_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.invalid_cost_center_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_oth_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center was not found.' );
 
-- Error #01c
               WHEN cost_center_not_oth_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.cost_center_not_oth_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_oth_rowtype.cost_center_code || '", ' ||
                   'and has a Country_Code of "' || v_cost_center_rowtype.country_code || '". ' ||
                   'For Address Type "OTHER" Country_Code can not be "CAN", "MEX", or "USA".' ); 
                   
-- Error #03a
               WHEN invalid_eff_date_exp     THEN
                    v_code := errnums.en_invalid_eff_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.invalid_eff_date_exp ' ,
                   'Effective_Date was entered as "' || inaddress_oth_rowtype.effective_date || '", ' || 
                   'However, a valid date must be entered into this field.');     
                   
-- Error #04a
               WHEN invalid_exp_date_exp     THEN
                    v_code := errnums.en_invalid_exp_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.invalid_exp_date_exp ' ,
                   'Expiration_Date was entered as "' || inaddress_oth_rowtype.expiration_date || '", ' || 
                   'However, a valid date must be entered into this field.');     
                   
-- Error #05a
               WHEN invalid_zip_code_exp     THEN
                    v_code := errnums.en_invalid_zip_code_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.invalid_zip_code_exp ' ,
                   'Postal_Code was entered as "' || inaddress_oth_rowtype.postal_code || '", ' || 
                   'However, Postal Code can not be "null" or "spaces".');      
                   
-- Error #06a
               WHEN country_must_be_ent_exp  THEN
                    v_code := errnums.en_country_must_be_ent_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.country_must_be_ent_exp ' ,
                   'Country was entered as "' || inaddress_oth_rowtype.country_code || '", ' || 
                   'However, Country must be entered and can not be "null" or "spaces".');  
              
-- Error #7
               WHEN status_check_warning_exp     THEN
                    v_code := errnums.en_status_check_warning_wrn;  
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.status_check_warning_exp ' ,
                   '** WARNING ** ' ||  
                   'Address Line has been changed, please check status code for store relocation?');                       

               WHEN invld_ftr_adr_efctv_dt_err THEN
                    v_code := errnums.en_invld_ftr_adr_efctv_dt_err;
                    errpkg.raise_err(v_code, 'ADDRESS_OTH_BR_SP.invld_ftr_adr_efctv_dt_err ' ,
                   'Future Address Type can only have effective date in future');

END ADDRESS_OTH_BR_SP;

PROCEDURE ADDRESS_USA_BR_SP ( 
/*****************************************************************************
	ADDRESS_USA_BR_SP       3.3.29   'ADDRESS_USA' TABLE COLUMNS

	This procedure is intended to enforce the Business Rules
	for ADDRESS_USA validation edits and verifying the following rules:
      
  This list of Business Rules by field (column) for the ADDRESS_USA Table rely
  on the COST_CENTER having been added which are U.S. Cost Centers only!
  (Statement_Type = "US" or Country_Code = "USA"). 

  Please note that this table is a "History" table.
  Any changes force a new row to be inserted and any previous rows to be expired
  where the Expiration_Date is the Effective_Date of the new Row minus One Day!  (COMMON_PKG)

  Please also note that for Territories (Category="T")
  the address shown is for the Home_Store (Territory Table).
  All fields will be protected!  This will be accomplished using the CCN_UI_INTERFACE_APP_PKG
  which will determine the address based on the Category Code, and Home Store if a Territory cost center.

  Please also note that for Stores (S) or Other (O),
  Cost Centers which are polling Cost Centers (Polling_Status_Code = 'P'),
  there must be a "Mailing Address" present!

  The list below is the Business Rules by Field (Column) for the ADDRESS_USA  Table:

  1.	Cost_Center_Code (6-BR):     
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_USA table.
      b. This field (column) is also verified against the COST_CENTER Table.
      c. Also, this must be a United States Cost Center.                               

  2.	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!
          The current System Date is used, but this field (column) can be changed.

  3.	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date
          of the new ADDRESS_USA Row minus 1 day. (COMMON_PKG).

  4.  State_Code (2-VR/BR): 
      a. This field (column) is used against a TRANSLATION Table
      to obtain the Numeric State Code as well!  
      This may be needed for the UI screens but will be mandatory for the CCN Back Feed job CCN00600.

  5.	Zip_Code (5-VR/BR): 
      a. This field (column) is mandatory and must be numeric.
      b. This field (column) is edited against the U.S. Postal Service API (Keith?).

  6.	Zip_Code_4 (4-VR/BR): 
      a. This field (column) is Optional, but when entered, must be numeric. 
      b. This field (column) is also edited against the U.S. Postal Service API (Keith?).
      c. This field (column) can contain all 9"s until it is made a "Polling" store (Polling_Status_Code).

  7.	County (30-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) is free form, allowing the entry of U.S. County Names.
      c. This field (column) will also be edited against some form of U.S. County API (Keith?).

  8.	FIPS_Code (10-VR/BR): 
      a. This field (column) is Optional, but when entered, must be numeric. 
      b. These field (column) values come from the HEARS Group
          and are currently updated by batch program CCN09000.
      c. We may build an API to obtain these values directly from HEARS (Keith?).

  9.	Destination_Point (2-VR/BR):   (Technical Document 3.3.4)
      a. This field (column) is Mandatory and must be numeric and not zero. 
      b. This field (column) is required for USA "Mailing" Address.  Puerto Rico address can default to all 9"s.
      c. We may open this check to additional Address Types for USA.

  10.	Check_Digit (1-VR/BR):   (Technical Document 3.3.4)
      a. This field (column) is Mandatory and must be numeric and not zero. 
      b. This field (column) is required for USA "Mailing" Address.  Puerto Rico address can default to all 9"s. .
      c. We may open this check to additional Address Types for USA.
      
  11.	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.
      
  12.	TAXWARE Warning Message:  (MDH 01/15/2013)
      For "Stores" with a "Mailing" or "Physical" Address, if the Zip_Code or 
      Zip_Code_4 fields are changed (not equal to current address) show a warning
      message that the TAXWARE table must be changed.  All Updates/Inserts will
      continue.     

 created : TAL 08/07/2012
 revised : MDH 01/17/2013
 modified: 04/20/2016 jxc517 CCN Project Team....
           Added business rule to enforce creating future address types with only future effective date
******************************************************************************/	
  
   inADDRESS_USA_ROWTYPE           ADDRESS_USA%ROWTYPE
   ,inCOST_CENTER_ROWTYPE           IN  COST_CENTER%ROWTYPE
   ) 
   
        IS 
        
-- Error #01a
   cctr_must_be_ent_exp            EXCEPTION;
    
-- Error #01b
   invalid_cost_center_exp         EXCEPTION;
    
-- Error #01c
   cost_center_not_usa_exp         EXCEPTION;
    
-- Error #02a 
   invalid_eff_date_exp            EXCEPTION;
   
-- Error #03a  
   invalid_exp_date_exp            EXCEPTION;
   
-- Error #04a
   invalid_state_code_exp          EXCEPTION;
   
-- Error #05a
   invalid_zip_code_exp            EXCEPTION;
   
-- Error #06a
   invalid_zip_code_4_exp          EXCEPTION;
   
-- Error #07a
   invalid_county_exp              EXCEPTION;
   
-- Error #08a
   invalid_fips_code_exp           EXCEPTION;
   
-- Error #09a
   invalid_dest_point_exp          EXCEPTION;
   
-- Error #10a
   invalid_check_digit_exp         EXCEPTION;
     
-- Error #11
   status_check_Warning_exp        EXCEPTION;
       
-- Error #12
   taxware_check_Warning_exp      EXCEPTION;   
   
   invld_ftr_adr_efctv_dt_err      EXCEPTION;

   v_cost_center_rowtype           COST_CENTER%ROWTYPE;
   v_old_address_usa_rowtype       ADDRESS_USA%ROWTYPE;  
   
   v_code   number;
   v_date   date  ;
   v_curr_date date := sysdate;
   v_count  number;
   v_errm   varchar(500);
 
  
BEGIN

/******************************************************************************
  1).	Cost_Center_Code (6-BR):    
      a. This field (column) cannot be spaces and must be numeric
          as it is the primary key to the ADDRESS_USA table.
      b. This field (column) is also verified against the COST_CENTER Table.
      c. Also, this must be a United States Cost Center.                            
*******************************************************************************/ 

/*******************************************************************************
      a. Cost_Center can not be null, spaces, or all zeroes, and must 6 characters 
*******************************************************************************/

--    cost_center_code can not be null 
      IF  inaddress_usa_rowtype.cost_center_code  IS  NULL
--    cost_center_code can not be just one or more spaces
      OR  REGEXP_LIKE(inaddress_usa_rowtype.cost_center_code, '^ *$')
--    cost_center_code can not be all zeroes
      OR  inaddress_usa_rowtype.cost_center_code  =   '000000'   
--    cost_center_code entered must be 6 characters in length
      OR  length(inaddress_usa_rowtype.cost_center_code)  !=  6
      THEN
          RAISE cctr_must_be_ent_exp;
-- See Error #01a.
      END IF;
            
/*******************************************************************************
      b. This field (column) is also verified against the COST_CENTER Table.
*******************************************************************************/

BEGIN

	SELECT *  INTO v_cost_center_rowtype
		 FROM cost_center 
		WHERE cost_center.cost_center_code  =  inaddress_usa_rowtype.cost_center_code;
      
EXCEPTION
  WHEN no_data_found THEN 
     --Cost Center might not be present during the creation of cost center
     --In such scenario's validate the details using the input cost center row type
     --Else log error stating cost center is not present
     IF v_cost_center_rowtype.cost_center_code IS NOT NULL THEN
        v_cost_center_rowtype := inCOST_CENTER_ROWTYPE;
     ELSE
       -- raise invalid_cost_center_exp;
       NULL;
     END IF;
-- See Error #01b.
  
END;

/*******************************************************************************
      c. Also, this must be a United States Cost Center.                               
*******************************************************************************/

      IF  v_cost_center_rowtype.country_code    !=  'USA'    THEN 
          --raise cost_center_not_usa_exp;
          NULL;
-- See Error #01c.
      END IF;
       
--    dbms_output.put_line('completed edit rule 01. ' );  

/*******************************************************************************
  2).	Effective_Date (VR/BR): 
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

/*******************************************************************************
      a. This field (column) is changed automatically any time an address field (column) is changed!  
          The current System Date is used, but this field (column) can be changed.
*******************************************************************************/

      IF  inaddress_usa_rowtype.effective_date  IS NOT  NULL    THEN
--        test for a valid date entered into effective date 
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_usa_rowtype.effective_date;
-- Yes, it was a valid date (no EXCEPTION)  

EXCEPTION
  WHEN others THEN 
  RAISE invalid_eff_date_exp;
-- No,  not a valid date
-- See Error #02a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 02. ' );

/*******************************************************************************
  3).	Expiration_Date (VR/BR): 
      a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_USA Row minus 1 day. (COMMON_PKG)
*******************************************************************************/

/*******************************************************************************
	     a. The Expiration_Date will become the Effective_Date 
          of the new ADDRESS_USA Row minus 1 day. (COMMON_PKG)
*******************************************************************************/	

      IF  inaddress_usa_rowtype.expiration_date  IS NOT  NULL    THEN
--        test for a valid date entered into expiration date  
BEGIN
--        move value entered to a work field defined as a date format
          v_date  :=  inaddress_usa_rowtype.expiration_date;
-- Yes, it was a valid date (no EXCEPTION)   

EXCEPTION
  WHEN others THEN 
  RAISE invalid_exp_date_exp;
-- No,  not a valid date
-- See Error #03a
END;

      END IF;
      
--    dbms_output.put_line('completed edit rule 03. ' );   

/*******************************************************************************
  4).	State_Code (2-VR/BR): 
      a. This field (column) is used against a TRANSLATION Table
      to obtain the Numeric State Code as well!  
      This may be needed for the UI screens but will be mandatory for the CCN Back Feed job CCN00600.
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is used against a TRANSLATION Table
      to obtain the Numeric State Code as well!  
*******************************************************************************/

--    state code must be in the Code_Detail table
      IF  NOT  common_tools.code_detail_valid('STATE_CODE', inaddress_usa_rowtype.state_code) 
      OR       inaddress_usa_rowtype.state_code  IS  NULL    THEN
          RAISE invalid_state_code_exp;   
-- See Error #04a
      END IF;            
--    dbms_output.put_line('completed edit rule 04. ' );    

/*******************************************************************************
  5). Zip_Code First 5 (5-VR/BR): 
      a. This field (column) is mandatory and must be numeric.
      b. This field (column) is edited against the U.S. Postal Service API (Keith?).
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is mandatory and must be numeric.
*******************************************************************************/

--    postal code can not be just one or more spaces
      IF      REGEXP_LIKE(inaddress_usa_rowtype.zip_code, '^ *$')
--    postal code must match correct format - 5 digit numeric 
      OR  NOT REGEXP_LIKE(inaddress_usa_rowtype.zip_code, '\d{5}')
--    postal code can not be null 
      OR                  inaddress_usa_rowtype.zip_code  IS  NULL    THEN
          RAISE invalid_zip_code_exp;  
-- See Error #05a
      END IF;

/*******************************************************************************
	    b. This field (column) is edited against the U.S. Postal Service API (Keith?).
*******************************************************************************/            

--    dbms_output.put_line('completed edit rule 05. ' );  

/*******************************************************************************
  6).	Zip_Code Last 4 (4-VR/BR): 
      a. This field (column) is Optional, but when entered, must be numeric. 
      b. This field (column) is also edited against the U.S. Postal Service API (Keith?).
      c. This field (column) can contain all 9"s until it is made a "Polling" store (Polling_Status_Code).
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is Optional, but when entered, must be numeric. 
*******************************************************************************/

--    zip code 4 is optional
      IF  inaddress_usa_rowtype.zip_code_4  IS NOT  NULL    THEN
--        zip code 4 can not be just one or more spaces
          IF      REGEXP_LIKE(inaddress_usa_rowtype.zip_code_4, '^ *$')
--            zip code 4 must match correct format - 4 digit numeric 
          OR  NOT REGEXP_LIKE(inaddress_usa_rowtype.zip_code_4, '\d{4}')    
THEN
              RAISE invalid_zip_code_4_exp;  
-- See Error #06a
          END IF;
      END IF;

/*******************************************************************************
	    b. This field (column) is also edited against the U.S. Postal Service API (Keith?).
*******************************************************************************/            

/*******************************************************************************
	    c. This field (column) can contain all 9"s until it is made a "Polling" store (Polling_Status_Code).
*******************************************************************************/            

--    dbms_output.put_line('completed edit rule 06. ' );  

/*******************************************************************************
  7).	County (30-VR/BR): 
      a. This field (column) is mandatory and cannot be spaces. 
      b. This field (column) is free form, allowing the entry of U.S. County Names.
      c. This field (column) will also be edited against some form of U.S. County API (Keith?).
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is mandatory and cannot be spaces. 
*******************************************************************************/

--    county can not be just one or more spaces
      IF  REGEXP_LIKE(inaddress_usa_rowtype.county, '^ *$')
--    county can not be null 
      OR  ((inaddress_usa_rowtype.county  IS  NULL) AND (inaddress_usa_rowtype.country_code <> 'PRI')) THEN
          RAISE invalid_county_exp;  
-- See Error #07a
      END IF;

/*******************************************************************************
	    b. This field (column) is free form, allowing the entry of U.S. County Names. 
*******************************************************************************/

/*******************************************************************************
	    c. This field (column) will also be edited against some form of U.S. County API (Keith?).
*******************************************************************************/
            
--    dbms_output.put_line('completed edit rule 07. ' );   

/*******************************************************************************
  8).	FIPS_Code (10-VR/BR): 
      a. This field (column) is Optional, but when entered, must be numeric. 
      b. These field (column) values come from the HEARS Group 
          and are currently updated by batch program CCN09000.
      c. We may build an API to obtain these values directly from HEARS (Keith?).
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is Optional, but when entered, must be numeric.
*******************************************************************************/

      IF  inaddress_usa_rowtype.fips_code  IS NOT  NULL    THEN
          IF  NOT REGEXP_LIKE(inaddress_usa_rowtype.fips_code, '^\d{10}$')    THEN
          RAISE invalid_fips_code_exp;  
-- See Error #08a
          END IF;
      END IF;

/*******************************************************************************
	    b. These field (column) values come from the HEARS Group
          and are currently updated by batch program CCN09000.
*******************************************************************************/

/*******************************************************************************
	    c. We may build an API to obtain these values directly from HEARS (Keith?).
*******************************************************************************/
            
--    dbms_output.put_line('completed edit rule 08. ' );   

/*******************************************************************************
  9).	Destination_Point (2-VR/BR):   (Technical Document 3.3.4)
      a. This field (column) is Mandatory and must be numeric and not zero. 
      b. This field (column) is required for USA "Mailing" Address.  
          Puerto Rico address can default to all 9"s.
      c. We may open this check to additional Address Types for USA.
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is Mandatory and must be numeric and not zero. 
*******************************************************************************/
IF inaddress_usa_rowtype.COUNTRY_CODE <> 'PRI' THEN
      IF      REGEXP_LIKE(inaddress_usa_rowtype.destination_point, '^ *$')
      OR  NOT REGEXP_LIKE(INADDRESS_USA_ROWTYPE.DESTINATION_POINT, '^\d{2}$') 
      OR                  INADDRESS_USA_ROWTYPE.DESTINATION_POINT  <  '00'   
      /*or                  inaddress_usa_rowtype.destination_point  is  null*/    THEN
          RAISE invalid_dest_point_exp;   
-- See Error #09a 
      END IF;

/*******************************************************************************
	    b. This field (column) is required for USA "Mailing" Address.  
          Puerto Rico address can default to all 9"s.
*******************************************************************************/

/*******************************************************************************
	    c. We may open this check to additional Address Types for USA.
*******************************************************************************/
 
--    dbms_output.put_line('completed edit rule 09. ' ); 

/*******************************************************************************
 10).	Check_Digit (1-VR/BR):   (Technical Document 3.3.4)
      a. This field (column) is Mandatory and must be numeric and not zero. 
      b. This field (column) is required for USA "Mailing" Address.
          Puerto Rico address can default to all 9"s.
      c. We may open this check to additional Address Types for USA.
*******************************************************************************/

/*******************************************************************************
	    a. This field (column) is Mandatory and must be numeric and not zero. 
*******************************************************************************/

--      if  not regexp_like(inaddress_usa_rowtype.check_digit, '[1-9]')
      IF  INADDRESS_USA_ROWTYPE.CHECK_DIGIT NOT IN  (0,1,2,3,4,5,6,7,8,9)
      /*or  inaddress_usa_rowtype.check_digit  is null */   THEN
          RAISE invalid_check_digit_exp;   
-- See Error #10a 
      END IF;
END IF;
/*******************************************************************************
	    b. This field (column) is required for USA "Mailing" Address.
          Puerto Rico address can default to all 9"s.
*******************************************************************************/

/*******************************************************************************
	    c. We may open this check to additional Address Types for USA.
*******************************************************************************/
            
--    dbms_output.put_line('completed edit rule 10. ' ); 
       
/*******************************************************************************
  11).	Status_Code Change Based on change of Address_Line_1,2,3:  (MDH 01/15/2013)
      For "Stores" Cost Centers with Address_Type "M" 
        if the ADDRESS_LINE_1, ADDRESS_LINE_2, or ADDRESS_LINE_3 is updated then  
             raise warning message exception (- Warning - Address_Line changed please check Status_Code)
             The Status_Code must be changed to "3" (Relocation). All Updates/Inserts will continue.
*******************************************************************************/
 BEGIN
      
 	SELECT *  INTO v_old_address_usa_rowtype
		FROM ADDRESS_USA 
		WHERE ADDRESS_USA.cost_center_code    =  inADDRESS_USA_ROWTYPE.Cost_Center_Code 
      AND ADDRESS_USA.address_type        =  inADDRESS_USA_ROWTYPE.Address_Type
      AND ADDRESS_USA.effective_date      <= v_curr_date   
      AND ADDRESS_USA.expiration_date  IS  NULL;
      
   IF   (v_cost_center_rowtype.CATEGORY     IN  ('S'))
    AND (inADDRESS_USA_ROWTYPE.address_type IN  ('M'))
    AND ((inADDRESS_USA_ROWTYPE.address_line_1 IS NULL  AND  v_old_address_usa_rowtype.address_line_1 IS NOT NULL
      OR  inADDRESS_USA_ROWTYPE.address_line_1 IS NOT NULL  AND  v_old_address_usa_rowtype.address_line_1 IS NULL
      OR  inADDRESS_USA_ROWTYPE.address_line_1  != v_old_address_usa_rowtype.address_line_1)
      OR (inADDRESS_USA_ROWTYPE.address_line_2 IS NULL  AND  v_old_address_usa_rowtype.address_line_2 IS NOT NULL
      OR  inADDRESS_USA_ROWTYPE.address_line_2 IS NOT NULL  AND  v_old_address_usa_rowtype.address_line_2 IS NULL
      OR  inADDRESS_USA_ROWTYPE.address_line_2  != v_old_address_usa_rowtype.address_line_2)
      OR (inADDRESS_USA_ROWTYPE.address_line_3 IS NULL  AND  v_old_address_usa_rowtype.address_line_3 IS NOT NULL
      OR  inADDRESS_USA_ROWTYPE.address_line_3 IS NOT NULL  AND  v_old_address_usa_rowtype.address_line_3 IS NULL     
      OR  inADDRESS_USA_ROWTYPE.address_line_3  != v_old_address_usa_rowtype.address_line_3))  THEN
           --raise status_check_warning_exp; remove for now
           NULL;
  END IF;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
       NULL;
  
 END;
 
 -- dbms_output.put_line('completed address_usa edit rule 11. ' ); 
         
/*******************************************************************************
 12).	TAXWARE Warning Message:  (MDH 01/15/2013)
      For "Stores" with a "Mailing" or "Physical" Address, if the Zip_Code or 
      Zip_Code_4 fields are changed (not equal to current address) show a warning
      message that the TAXWARE table must be changed.  All Updates/Inserts will
      continue.
*******************************************************************************/
  BEGIN
      
 	SELECT *  INTO v_old_address_usa_rowtype
		FROM ADDRESS_USA 
		WHERE ADDRESS_USA.cost_center_code    =  inADDRESS_USA_ROWTYPE.Cost_Center_Code 
      AND ADDRESS_USA.address_type        =  inADDRESS_USA_ROWTYPE.Address_Type
      AND ADDRESS_USA.effective_date      <= v_curr_date   
      AND ADDRESS_USA.expiration_date  IS  NULL;
      
   IF   (v_cost_center_rowtype.CATEGORY     IN  ('S'))
    AND (inADDRESS_USA_ROWTYPE.address_type IN  ('M','P'))
    AND ((inADDRESS_USA_ROWTYPE.zip_code IS NULL  AND  v_old_address_usa_rowtype.zip_code IS NOT NULL
      OR  inADDRESS_USA_ROWTYPE.zip_code IS NOT NULL  AND  v_old_address_usa_rowtype.zip_code IS NULL
      OR  inADDRESS_USA_ROWTYPE.zip_code  !=  v_old_address_usa_rowtype.zip_code)
      OR (inADDRESS_USA_ROWTYPE.zip_code_4 IS NULL  AND  v_old_address_usa_rowtype.zip_code_4 IS NOT NULL
      OR  inADDRESS_USA_ROWTYPE.zip_code_4 IS NOT NULL  AND  v_old_address_usa_rowtype.zip_code_4 IS NULL
      OR  inADDRESS_USA_ROWTYPE.zip_code_4  !=  v_old_address_usa_rowtype.zip_code_4))  THEN
--            raise taxware_check_warning_exp; remove for now
			NULL;
  END IF;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
       NULL;
  
 END;
       
--    dbms_output.put_line('completed edit rule 12. ' ); 
        
--    dbms_output.put_line('completed ALL edit rules). ' );

    IF inADDRESS_USA_ROWTYPE.address_type = 'F' AND inADDRESS_USA_ROWTYPE.EFFECTIVE_DATE <= TRUNC(SYSDATE) THEN
        RAISE invld_ftr_adr_efctv_dt_err;
    END IF;

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION
          
-- Error #01a
               WHEN cctr_must_be_ent_exp     THEN
                    v_code := errnums.en_cctr_must_be_ent_err; 
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.cctr_must_be_ent_exp ' ,                   '#01a ' ||
                   'Cost_Center_Code was entered as "' || inaddress_USA_rowtype.cost_center_code || '", ' ||
                   'However, Cost_Center_Code must be entered , can not be "null" or "spaces", ' ||
                   'and must be 6 digits numeric.' );   
                   
-- Error #01b
               WHEN invalid_cost_center_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_cost_center_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_USA_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center was not found.' );
 
-- Error #01c
               WHEN cost_center_not_usa_exp  THEN  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.cost_center_not_usa_exp ' ,
                   'Cost_Center_Code was entered as "' || inaddress_usa_rowtype.cost_center_code || '", ' ||
                   'However, specified Cost_Center is not a United States Cost Center.' );
                   
-- Error #02a
               WHEN invalid_eff_date_exp     THEN
                    v_code := errnums.en_invalid_eff_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_eff_date_exp ' ,
                   'Effective_Date was entered as "' || inaddress_USA_rowtype.effective_date || '", ' || 
                   'However, a valid date must be entered into this field.');    
                   
-- Error #03a
               WHEN invalid_exp_date_exp     THEN
                    v_code := errnums.en_invalid_exp_date_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_exp_date_exp ' ,
                   'Expiration_Date was entered as "' || inaddress_USA_rowtype.expiration_date || '", ' || 
                   'However, a valid date must be entered into this field.');  
                   
-- Error #04a
               WHEN invalid_state_code_exp     THEN
                    v_code := errnums.en_invalid_code_detail_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.en_invalid_code_detail_err ' ,
                   'State_Code was entered as "' || inaddress_usa_rowtype.state_code || '", ' || 
                   'This value was not found on the Code_Detail table.');  
                   
-- Error #05a
               WHEN invalid_zip_code_exp     THEN
                    v_code := errnums.en_invalid_zip_code_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_zip_code_exp ' ,
                   'Zip_Code was entered as "' || inaddress_usa_rowtype.zip_code || '", ' || 
                   'However, United States Zip Code "First Five" format is 5 numeric digits.');    
                   
-- Error #06a
               WHEN invalid_zip_code_4_exp   THEN
                    v_code := errnums.en_invalid_zip_code_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_zip_code_4_exp ' ,
                   'Zip_Code Plus Four was entered as "' || inaddress_usa_rowtype.zip_code_4 || '", ' || 
                   'However, United States Zip Code "Plus Four" format is 4 numeric digits.');    
                   
-- Error #07a
               WHEN invalid_county_exp       THEN
                    v_code := errnums.en_invalid_county_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_county_exp ' ,
                   'County was entered as "' || inaddress_usa_rowtype.county || '", ' || 
                   'However, County can not be "null" or "spaces".');    
                   
-- Error #08a
               WHEN invalid_fips_code_exp    THEN
                    v_code := errnums.en_invalid_fips_code_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_fips_code_exp ' ,
                   'FIPS_Code was entered as "' || inaddress_usa_rowtype.fips_code || '", ' ||
                   'However, FIPS_Code, if entered, must be 10 numeric digits.');    
                   
-- Error #09a
               WHEN invalid_dest_point_exp       THEN
                    v_code := errnums.en_invalid_dest_point_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_dest_point_exp ' ,
                   'Destination_Point was entered as "' || inaddress_usa_rowtype.destination_point || '", ' || 
                   'However, Destination_Point must be 2 numeric digits and can be "00".');    
                   
-- Error #10a
               WHEN invalid_check_digit_exp     THEN
                    v_code := errnums.en_invalid_check_digit_err;  
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invalid_check_digit_exp ' ,
                   'Check_Digit was entered as "' || inaddress_usa_rowtype.check_digit || '", ' || 
                   'However, Check_Digit must be 1 numeric digit including "0".');    
               
-- Error #11
               WHEN status_check_warning_exp     THEN
                    v_code := errnums.en_status_check_warning_wrn;  
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.status_check_warning_exp ' ,
                   '** WARNING ** ' ||  
                   'Address Line has been changed, please check status code for store relocation?');    
                                
-- Error #12
               WHEN taxware_check_warning_exp     THEN
                    v_code := errnums.en_taxware_check_warning_wrn;  
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.taxware_check_warning_exp ' ,
                   '** WARNING ** ' ||  
                   'Zip Code has been changed, please check TAXWARE status for this store.');    

               WHEN invld_ftr_adr_efctv_dt_err THEN
                    v_code := errnums.en_invld_ftr_adr_efctv_dt_err;
                    errpkg.raise_err(v_code, 'ADDRESS_USA_BR_SP.invld_ftr_adr_efctv_dt_err ' ,
                   'Future Address Type can only have effective date in future');

END ADDRESS_USA_BR_SP;

PROCEDURE ADMINISTRATION_BR_SP (
/*******************************************************************************
	 ADMINISTRATION_BR_SP

	This procedure is intended enforce the Business Rules
	for verifying the CATEGORY on the ADMINISTRATION Table
	TRD  Section: 3.3.20 

created : BLR 8/3/2012
REVISED : blr 5/2/2013 -- CCNA-360 - This logic is being commented out temporary
                      via Pat Malloy request 5/2/13 The filed being validated 
                      'admin_cost_cntr_type' is a new field request does not 
                      exsist in the Legacy IDMS system. Hence can not check 
                      field until it's been loaded to the Administration table.
                      Reserve for future.
*******************************************************************************/	
  
  inAdmin_rowtype                  IN  ADMINISTRATION%ROWTYPE
 ,inCostctr_rowtype                IN  COST_CENTER%ROWTYPE)
                IS         
 
 inactive_cost_center_err    	EXCEPTION;
 invalid_admin_cc_catg_err    EXCEPTION; 
 invalid_admin_category_err   EXCEPTION;   
 invalid_internal_mail_err    EXCEPTION;
 invalid_admin_cc_type_err    EXCEPTION;
 invalid_intr_mail_nbr_err    EXCEPTION;
 invalid_code_detail_err      EXCEPTION;
 
 v_curr_date           date := sysdate;
 v_code number;
 v_count number;
 v_errm varchar(500);
 
/*
   3.3.20   The list below are the business rules by column for the Administration table:
	 **note:This table is only stored if the category of the cost_center_table is an "A".
*/

 BEGIN
/*
   3.3.20.1a  A Cost Center row is selected to validate category code is an "A"; otherwise Adminstration table cannot be added
*/	
    
      
     IF inCostctr_rowtype.cost_center_code <>  inAdmin_rowtype.cost_center_code THEN
	      RAISE inactive_cost_center_err;
     END IF;   
	
/*
   3.3.20.1b  For this administration table, the category must be "A"     
*/		
      IF  NOT  common_tools.code_detail_valid('CATEGORY', inCostctr_rowtype.CATEGORY) THEN  -- value not found in table 
              RAISE invalid_admin_cc_catg_err; 
      END IF; 
    
     IF inAdmin_rowtype.CATEGORY <> 'A'   THEN
         RAISE invalid_admin_category_err;
     END IF;	
           
/* 
-- CCNA-360 - This logic is being commented out temporary via Pat Malloy request 5/2/13
-- The filed being validated 'admin_cost_cntr_type' is a new field request
-- does not exsist in the Legacy IDMS system. Hence can not check field until 
-- it's been loaded to the Administration table. Reserve for future.

      if  not  common_tools.code_detail_valid('ADMIN_COST_CNTR_TYPE', inAdmin_rowtype.admin_cost_cntr_type) then  -- value not found in table 
         raise invalid_admin_cc_type_err; 
     end if;  
*/         
    EXCEPTION
              		    
      WHEN inactive_cost_center_err THEN  
--	    v_code := errnums.en_inactive_cost_center_err;
	    v_code := errnums.en_inactive_cost_center_err;
	    errpkg.raise_err(v_code, 'ADMINISTRATION_BR_SP.inactive_cost_center ' ,
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Cost Center "' || inCostctr_rowtype.cost_center_code || '", ' ||
        'Admin cost center is "' || inAdmin_rowtype.cost_center_code || '". ' ||        
        'Cost Center codes for Adminstration and Cost Center do not match. ');         

      WHEN invalid_admin_cc_catg_err THEN
       v_code := errnums.en_invalid_admin_cc_catg_err;
	    errpkg.raise_err(v_code, 'ADMINISTRATION_BR_SP.invalid_admin_cc_catg_err ' ,
        'CCN_BUSINESS_RULES_PKG ' 
        || 'For Cost Center "' || inCostctr_rowtype.CATEGORY || '", ' ||
        'Admin Category_Code is "' || inAdmin_rowtype.CATEGORY || '". ' ||        
        'Category code is not valid on Code table. '); 
		
        
	    v_code := errnums.en_invalid_code_detail_err;
	    errpkg.raise_err(v_code, 'ADMINISTRATION_BR_SP.invalid_admin_cc_catg_err ' ,
        'CCN_BUSINESS_RULES_PKG ' || 
        'Entered Category_Code was "' || inAdmin_rowtype.CATEGORY || '". ' || 
        'For an Administrative Cost_Center Category must be "A". '); 

      WHEN invalid_admin_category_err THEN  
	    v_code := errnums.en_invalid_admin_category_err;
	    errpkg.raise_err(v_code, 'ADMINISTRATION_BR_SP.invalid_admin_category_err ' ,
        'CCN_BUSINESS_RULES_PKG ' 
        || 'For Cost Center "' || inCostctr_rowtype.CATEGORY || '", ' ||
        'Category_Code is "' || inAdmin_rowtype.CATEGORY || '". ' ||
        'For an Administrative table the Category must be "A". '); 
		
      WHEN invalid_intr_mail_nbr_err THEN  
	    v_code := errnums.en_invalid_code_detail_err;
	    errpkg.raise_err(v_code, 'ADMINISTRATION_BR_SP.invalid_intr_mail_nbr_err ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Cost Center "' || inAdmin_rowtype.cost_center_code || '", ' ||
        'Internal_mail_number is "' || inAdmin_rowtype.internal_mail_number || '". ' ||
        'For a Administrative INTERNAL_MAIL_NUMBER is invalid. '); 
    
/*
blr 5/2/2013 -- CCNA-360 - This logic is being commented out temporary; until
                           data is loaded - Pat MAlloy request 5/2/13.
                           
      when invalid_admin_cc_type_err then  
	    v_code := errnums.en_invalid_code_detail_err;
	    errpkg.raise_err(v_code, 'ADMINISTRATION_BR_SP.invalid_admin_cc_type_err ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Cost Center "' || inAdmin_rowtype.cost_center_code || '", ' ||
        'Admin_CC_Code is "' || inAdmin_rowtype.admin_cost_cntr_type || '". ' ||
        'For a Administrative ADMIN_COST_CNTR_TYPE must be "01,02,03, or 04". '); 
*/

      WHEN OTHERS THEN
      v_code := SQLCODE;
	    v_errm := substr(SQLERRM,1, 500);
      errpkg.raise_err(v_code, v_errm ||
        'CCN_BUSINESS_RULES_PKG ' || 'No errors found');
     
    
 END  ADMINISTRATION_BR_SP;
 
PROCEDURE BANK_CARD_BR_SP (
/*******************************************************************************
	 BANK_CARD_BR_SP

	This procedure is intended enforce the Business Rules
	for verifying the BANK_CARD_BR on the BANK_CARD table
	TRD  Section: 3.3.11 

created : BLR 7/26//2012
modified: 03/02/2016 nxk927 CCN Project....
          added new error if the polling status is P and
          PCI_MERCHANT_ID or PCI_DISCOVER_ID IS NULL.
Modified: 04/11/2016 jxc517 CCN Project Team....
          Added below rules:
          1. Merchant_Id should be of 12 characters maximum
          2. PCI_Merchant_Id should be of 13 characters maximum
          3. Discover_Id and PCI_Discover_Id should be of 15 characters maximum
          4. For now we don't care having characters in PCI Merchant Id/ PCI Discover Id
modified: 05/26/2016 nxk927 CCN Project....
          reverting PCI changes to move ADDRESS_BRB changes ahead
******************************************************************************/	
    inbankcard_rowtype          IN Bank_card%ROWTYPE
   ,inCostctr_rowtype           IN COST_CENTER%ROWTYPE
   ,inPolling_rowtype           IN POLLING%ROWTYPE
 )
                IS         
 
 invalid_merchid_err            EXCEPTION;
 invalid_amexid_err             EXCEPTION;
 invalid_discoverid_err         EXCEPTION;
 bad_merchant_id_err            EXCEPTION;
 discvr_id_nonum_err            EXCEPTION;
 discvr_id_zero_err             EXCEPTION;
 amex_id_zero_err               EXCEPTION;
 amex_id_nonum_err              EXCEPTION;
 invalid_polling_err            EXCEPTION;
 invalid_cost_center_err        EXCEPTION;
 invalid_bank_card_err          EXCEPTION;
 invalid_amex_id_size_err       EXCEPTION;
 invalid_pci_id_err             EXCEPTION;
 invalid_discover_id_size_err   EXCEPTION;
 invalid_pci_dscvr_id_size_err  EXCEPTION;
 invalid_merchant_id_size_err   EXCEPTION;
 invalid_pci_mrchnt_id_size_err EXCEPTION;
 v_curr_date           date := sysdate;
 v_code number;
 v_count number;
 v_phone number;
 v_errm varchar(500);
 
/*
   3.3.11 Bank_card History rules are checked when new cost centers is added/updated; 
             This is a "History" table. Any changes force a new row to be inserted and any
	previous rows to be expired when the expiration_date = effective_date
	of the new Row minus One day!(Common_PKG).
*/

/*
   3.3.11.1   A Cost Center row must exist with a Cost Center Name not null
*/      
 BEGIN 

     IF inCostctr_rowtype.cost_center_code <>  inbankcard_rowtype.cost_center_code THEN
        RAISE invalid_cost_center_err;
     END IF;	
	

/* 3.3.11.2a  Discover_id column must be numeric and cannot be zeros; Can be all 9's;
	     The field can be "null" for Canadian cost centers only
*/            
    
     IF inCostctr_rowtype.country_code    =  'CAN'  
         AND inbankcard_rowtype.discover_id IS NOT NULL  THEN
     	       RAISE invalid_discoverid_err;
     END IF;	
     
	   IF (TRANSLATE( inbankcard_rowtype.discover_id, ' +-.0123456789',' ') IS NOT NULL) THEN  
 	       RAISE discvr_id_nonum_err ;
     END IF;
      	
	   IF  inbankcard_rowtype.discover_id = '000000000000000' THEN
	       RAISE discvr_id_zero_err ;
     END IF;
  
/* 3.3.11.3a The amex_se_id column must be numeric and cannot equal zeros;
	    This field can be "null" unless Cost Center table has a polling_status_code = "P",
	    then null is invalid
*/
	    			
       IF inPolling_rowtype.cost_center_code <>  inbankcard_rowtype.cost_center_code    
          OR inPolling_rowtype.polling_status_code  <> inbankcard_rowtype.polling_status_code THEN
              RAISE invalid_polling_err;
       END IF;
         
	    IF (inbankcard_rowtype.amex_se_id IS NULL 
	        AND  inPolling_rowtype.polling_status_code = 'P') THEN
	        RAISE invalid_amexid_err;
      END IF;
   
    IF (TRANSLATE( inbankcard_rowtype.amex_se_id, ' +-.0123456789',' ') IS NOT NULL) THEN  
 	      RAISE amex_id_nonum_err;
 	  END IF;
       	
    IF inbankcard_rowtype.amex_se_id = '0000000000' THEN
	     RAISE amex_id_zero_err ;
  	END IF;
   
   IF inbankcard_rowtype.amex_se_id IS NOT NULL AND LENGTH(inbankcard_rowtype.amex_se_id) <> 10 THEN
       RAISE invalid_amex_id_size_err;
   END IF;
	
   IF ((inbankcard_rowtype.PCI_MERCHANT_ID IS NULL or
        inbankcard_rowtype.PCI_DISCOVER_ID IS NULL)
        AND  inPolling_rowtype.polling_status_code = 'P') THEN
        ERRPKG.STORE_WARNINGS(errnums.en_invalid_pci_id_err,
                              'PCI information passed is null when polling_status is P');
   END IF;

   IF inbankcard_rowtype.discover_id IS NOT NULL AND LENGTH(inbankcard_rowtype.discover_id) > 15 THEN
       --UI anyways won't allow this to happen, but for batch
       RAISE invalid_discover_id_size_err;
   END IF;

   IF inbankcard_rowtype.pci_discover_id IS NOT NULL AND LENGTH(inbankcard_rowtype.pci_discover_id) > 15 THEN
       --UI anyways won't allow this to happen, but for batch
       RAISE invalid_pci_dscvr_id_size_err;
   END IF;

   IF inbankcard_rowtype.merchant_id IS NOT NULL AND LENGTH(inbankcard_rowtype.merchant_id) > 12 THEN
       --UI anyways won't allow this to happen, but for batch
       RAISE invalid_merchant_id_size_err;
   END IF;

   IF inbankcard_rowtype.pci_merchant_id IS NOT NULL AND LENGTH(inbankcard_rowtype.pci_merchant_id) > 13 THEN
       --UI allows this to happen as well as for batch
       RAISE invalid_pci_mrchnt_id_size_err;
   END IF;

EXCEPTION
	
	
		WHEN invalid_merchID_err THEN  
		      v_code := errnums.en_invalid_merchID_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_merchID_err ',  
          'CCN_BUSINESS_RULES_PKG ' || 'merch_id cannot = 9999999999'); 
 		
    WHEN invalid_discoverid_err THEN  
		      v_code := errnums.en_invalid_discoverid_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_discoverID_err ',
         'CCN_BUSINESS_RULES_PKG ' || 'discover_id cannot be null, if USA'); 
          	
		WHEN  bad_merchant_id_err THEN 
			  --KDP maybe more detail in the message for why the error is being thrown 
		      v_code := errnums.en_bad_merchant_id_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.bad_merchant_id_err ',
 		     'CCN_BUSINESS_RULES_PKG ' || 'error was return from merchant_s_sp procedure'); 
 		
		WHEN discvr_id_nonum_err THEN 
          v_code := errnums.en_discvr_id_nonum_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.discvr_id_nonum_err ',
          'CCN_BUSINESS_RULES_PKG ' || 'Discover_id is not numeric');         		             		
		
       	
		WHEN discvr_id_zero_err THEN  
          v_code := errnums.en_discvr_id_zero_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.discvr_id_zero_err ',
          'CCN_BUSINESS_RULES_PKG '  || 'discover_id cannot be zeroes');         		             		

		WHEN amex_id_zero_err THEN  
          v_code := errnums.en_amex_id_zero_err;
          errpkg.raise_err(v_code, 'bank_card_br_sp.amex_id_zero_err ',
         'CCN_BUSINESS_RULES_PKG '  || 'Amex_se_id cannot be zeroes');         		             		
		      
		WHEN amex_id_nonum_err	THEN  
          v_code := errnums.en_amex_id_nonum_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.amex_id_nonum_err ',
          'CCN_BUSINESS_RULES_PKG '  || 'Amex_se_id is not numeric');         		             		
		
		      
		WHEN invalid_amexid_err	THEN  
          v_code := errnums.en_invalid_amexid_err;
		      errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_amexid_err ',
          'CCN_BUSINESS_RULES_PKG '  || 'Amex_Se_id cannot be null when polling_status = P');         		             		
		
		
    WHEN invalid_polling_err THEN  
        v_code := errnums.en_invalid_polling_err;
        errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_polling_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'Polling row cannot be found');            		             		
				
		WHEN invalid_bank_card_err THEN  
        v_code := errnums.en_inactive_bank_card_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.inactive_bank_card_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'Bank_Card row cannot be found');
   
		WHEN invalid_cost_center_err THEN  
        v_code := errnums.en_invalid_cost_center_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_cost_center_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'Cost center row cannot be found');            		             		
		  		    
		WHEN invalid_amex_id_size_err THEN  
        v_code := errnums.en_invalid_amex_id_size_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_amex_id_size_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'AMEX ID entered is not of valid size'); 
		
        WHEN invalid_discover_id_size_err THEN  
        v_code := errnums.en_invalid_dscvr_id_size_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_discover_id_size_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'DISCOVER ID entered is not of valid size, maximum size is 15');
		WHEN invalid_pci_dscvr_id_size_err THEN  
        v_code := errnums.en_invld_pci_dscvr_id_size_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_pci_dscvr_id_size_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'PCI DISCOVER ID entered is not of valid size, maximum size is 15');
		WHEN invalid_merchant_id_size_err THEN  
        v_code := errnums.en_invalid_mrchnt_id_size_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_merchant_id_size_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'MERCHANT ID entered is not of valid size, maximum size is 12');
		WHEN invalid_pci_mrchnt_id_size_err THEN  
        v_code := errnums.en_invld_pci_mrchnt_id_sz_err;
		    errpkg.raise_err(v_code, 'bank_card_br_sp.invalid_pci_mrchnt_id_size_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'PCI MERCHANT ID entered is not of valid size, maximum size is 13');
    WHEN OTHERS THEN
        v_code := SQLCODE;
	    v_errm := substr(SQLERRM,1, 500);
        errpkg.raise_err(v_code, v_errm ||
        'CCN_BUSINESS_RULES_PKG '  || 'No errors found');

END  BANK_CARD_BR_SP;
  
PROCEDURE COST_CENTER_BR_SP  (
/*****************************************************************************
	COST_CENTER_BR_SP       3.3.17   'COST_CENTER' TABLE COLUMNS

	This procedure is intended to enforce the Business Rules
	for COST_CENTER validation edits and verifying the following rules:
      
  The list below are the business rules by column for the COST_CENTER table:

    1.	Cost_Center_Code (6-VR): 
        This Field is broken down into two (2) sub fields. 
            The COA (Pick list will be created) code is 2 digits and will be edited (??????), 
            And the 4 digit Cost Center Number which can be any numeric or alpha-numeric number.
        The Cost_Center_Code cannot already be in the COST_CENTER table (New Function).   
        The Cost_Center_Code cannot be Spaces.
        
        In Addition -- For a Cost_Center "ADD"  Address Information must also be present
       ( A Cost_Center may not be added without an Address )       
TAL 05/23/2013 CCNA-384 When a cost center is being added there must be an address being added also

    2.	Category (1-VR/BR): 
        The Category code determines whether a STORE, ADMINISTRATION, REAL_ESTATE, TERRITORY,
            or OTHER table will be stored.  

    3.	Statement_Type (2-VR/BR): 
        This Field (column) cannot be null!
        The Statement_Type determines the Sherwin-Williams entities (usually acquisitions), 
          which are part of the SW family. 
        The Statement_Type is the closest thing to our current GNRC Indicator in IDMS. 
        This code will be used in verifying D-A-D assignments (Hierarchy_Detail table)
          by comparing to the Statement_Type of the Hierarchy_Detail table.
        This code is also used to make sure that the Contry_Code is populated correctly.
        This will happen in the 'Insert' package of the COST_CENTER table.
          Statement_Type is 'MX'    Country_Code is 'MEX'
          Statement_Type is 'PR'    Country_Code is 'PRI'
          Statement_Type is 'TR'    Country_Code is 'TTO'
          Statement_Type is 'JM'    Country_Code is 'JAM'
          Statement_Type is 'AW'    Country_Code is 'ABW'
          Statement_Type is 'CW'    Country_Code is 'CUW'
          Statement_Type is 'AN'    Country_Code is 'ANT'
          Statement_Type is 'GD'    Country_Code is 'GRD'

          Country_Code is 'CAN'    Statement_Type is 'CN','AC','DC'
          
          Country_Code is 'USA'    Statement_Type is 'US','AU','DU','CK','CP','DP','FB',
                                                     'GP','GS','MB','MZ','NP','SG','QK'
TAL 04/29/2013 CCNQC-25 fix to Country Code must match Statement Type added "UN" for "USA"


    4.	Country_Code (3-VR/BR): 
        This Field (column) cannot be null!
        The Country_Code determines the country that the Sherwin-Williams cost center resides.
        This field also determines the Address Table used (ADDRESS_USA, ADDRESS_CAN, ADDRESS_MEX, ADDRESS_OTHER).  
        This will also happen in the 'Insert' package of the COST_CENTER table.
        The Country_Code is compared to the Statement_Type (above) to validate and force consistency between these two fields.
        In most cases, the Statement_Type forces the Country_Code!

    5.	Close_Date (VR/BR): 
        For the Business Rules for this field (column) please refer to the Technical Document (section 3.3.2).

    6.	Financial_Close_Date (VR/BR): 
        This date refers to the date that the Financial Data was cleaned off of the books for a Cost Center.
        This field can only be populated if the cost center has previously been closed 
          (i.e. Close_Date not zeros and STATUS table reflects 'closed' status.

    7.	Currency_Code (3-VR/BR):  
        This field is also influenced by the Country_Code,
          since the Statement_Type, Country_Code, and Currency_Code must correspond to each other.  
        This will also happen in the 'Insert' package of the COST_CENTER table.
          If Country_Code is 'USA' then Currency_Code must be 'USD' for 'Store' cost centers only. 
          If Country_Code is 'CAN' then Currency_Code must be 'CAD' for 'Store' cost centers only.
          If Country_Code is 'GRD' then Currency_Code must be 'GRD' or 'USA' for 'Store' cost centers only.
          If Country_Code is 'MEX' then first two digits of Currency_Code must start with 'MX' for 'Store' cost centers only.

    8.	POS_Prog_Ver_Nbr: 
        There are no edits for this field.  This field can be changed, but is usually updated from Polling (CCN00500). 

    9.	POS_Prog_Ver_Eff_Date: 
        There are no edits for this field.  This field can be changed, but is usually updated from Polling (CCN00500). 
        
   10.  DUNS_NUMBER:
        This field is only required for Store(S) and Other(o) cost centers.
        this field cannot be spaces and must be numeric.

 created : TAL 08/03/2012
 revised : TAL 04/29/2013 CCNQC-25 fix to Country Code must match Statement Type added "UN" for "USA"
           MDH 06/19/2013 added Duns_Number check.
           MDH 07/02/2013 Added GD statement type and GRD for Grenada.
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
          Added logic to check for availability of Standard cost and Primary cost
          fields for Non CANADA countries and raise a warning.
changed : 09/19/2016 jxc517 CCN Project Team....
          Added a new error to stop non CN/AC statement types to have 
          primary/standard cost center indicator as "08"
          Added a new error to stop CN/AC statement types to have 
          primary/standard cost center indicator other than "08"
******************************************************************************/	
   
   incost_center_rowtype             cost_center%ROWTYPE
  ,inaddress_can_rowtype             address_can%ROWTYPE
  ,inaddress_mex_rowtype             address_mex%ROWTYPE
  ,inaddress_oth_rowtype             address_other%ROWTYPE
  ,inaddress_usa_rowtype             address_usa%ROWTYPE
  ,inaddress_brb_rowtype             address_brb%ROWTYPE
       )
   
        IS 

-- Error #01a
   cost_center_pre_not_valid_exp   EXCEPTION;
   
-- Error #01b
   cost_center_suf_not_valid_exp   EXCEPTION;
   
-- Error #01c
-- duplicate_cost_center_exp       exception;
   
-- Error #01d
   cctr_must_be_ent_exp            EXCEPTION;
   
-- Error #01x
   address_info_missing_exp        EXCEPTION;   
-- TAL 05/23/2013 CCNA-384 When a cost center is being added 
-- there must be an address being added also
   
-- Error #02a  
   invalid_category_exp            EXCEPTION;
   
-- Error #03a  
   invalid_statement_type_exp      EXCEPTION;
   
-- Error #04a
   invalid_country_code_exp        EXCEPTION;
   
-- Error #04b
   country_statement_match_exp     EXCEPTION;
   
-- Error #05a
-- invalid_close_date_exp          exception;
   
-- Error #06a
   invalid_fin_close_date_exp      EXCEPTION;
   
-- Error #07a
   invalid_currency_code_exp       EXCEPTION;
   
-- Error #07b
   country_currency_match_exp      EXCEPTION;
      
-- Error #10a
   invalid_duns_nbr_exp            EXCEPTION;
   invalid_duns_nbr_size_err       EXCEPTION;
      
-- Error #10b
   INVALID_DUNS_NUM_EXP            EXCEPTION;
-- Error #10c   
   INVALID_PRI_LOGO_GROUP          EXCEPTION;

   v_code   number;
   v_date   date  ;
   v_count  number;
   v_errm   varchar(500);
   v_cost_center  number   := 0 ;
   
   v_address_can_rowtype        Address_CAN%ROWTYPE ;
   v_address_mex_rowtype        Address_MEX%ROWTYPE ;
   v_address_oth_rowtype        Address_OTHER%ROWTYPE ;
   v_address_usa_rowtype        Address_USA%ROWTYPE ;
   
   v_code_detail_country_row          code_detail%ROWTYPE;
   v_code_detail_statement_row        code_detail%ROWTYPE;
 
   cc_standard_primary_cost_exp 		EXCEPTION;
BEGIN

/******************************************************************************
  1).	Cost_Center_Code (6-VR): 
        This Field is broken down into two (2) sub fields. 
      a.      The COA (Pick list will be created) code is 2 digits and will be edited (??????), 
      b.      And the 4 digit Cost Center Number which can be any numeric or alpha-numeric number.
      c.  The Cost_Center_Code cannot already be in the COST_CENTER table (New Function).   
      d.  The Cost_Center_Code cannot be Spaces.
      
        In Addition -- For a Cost_Center "ADD"  Address Information must also be present
       ( A Cost_Center may not be added without an Address )       
TAL 05/23/2013 CCNA-384 When a cost center is being added there must be an address being added also
*******************************************************************************/ 

/*******************************************************************************
      d. Cost_Center can not be null, spaces, or all zeroes, and must 6 characters 
*******************************************************************************/

--    cost_center_code can not be null 
      IF  incost_center_rowtype.cost_center_code  IS  NULL
--    cost_center_code can not be just one or more spaces
      OR  REGEXP_LIKE(incost_center_rowtype.cost_center_code, '^ *$')
--    cost_center_code can not be all zeroes
      OR  incost_center_rowtype.cost_center_code  =   '000000'   
--    cost_center_code entered must be 6 characters in length
      OR  length(incost_center_rowtype.cost_center_code)  !=  6
      THEN
          RAISE cctr_must_be_ent_exp;
-- See Error #01d.
      END IF;
      
/*******************************************************************************
      a. Cost_Center first 2 digits must be numeric. 
*******************************************************************************/

/*******************************************************************************
      b. Cost_Center last 4 digits must be numeric or alpha.
*******************************************************************************/

/*******************************************************************************
      c. Cost_Center_Code cannot already be in the COST_CENTER table.
*******************************************************************************/	
     
--begin
--
--      select  count(1)  into  v_count
--       from  cost_center
--       where cost_center.cost_center_code     =  incost_center_rowtype.cost_center_code ;
--        
--      if v_count > 0 then
--         raise duplicate_cost_center_exp;  
-- See Error #01c.
--      end if;    
--      
--end;

/*******************************************************************************
        In Addition -- For a Cost_Center "ADD"  Address Information must also be present
       ( A Cost_Center may not be added without an Address )       
TAL 05/23/2013 CCNA-384 When a cost center is being added there must be an address being added also
*******************************************************************************/	
     
  BEGIN
  IF incost_center_rowtype.CATEGORY <> 'T' THEN
        SELECT  count(1)  INTO  v_count
         FROM  cost_center
         WHERE cost_center.cost_center_code     =  incost_center_rowtype.cost_center_code ;
          
--      if a Cost_Center not found - this is an add, so verify Address information is present
        IF v_count = 0 THEN
           IF inaddress_can_rowtype.cost_center_code  IS  NULL  AND
              inaddress_mex_rowtype.cost_center_code  IS  NULL  AND
              inaddress_oth_rowtype.cost_center_code  IS  NULL  AND
              INADDRESS_USA_ROWTYPE.COST_CENTER_CODE  IS  NULL  AND
              INADDRESS_BRB_ROWTYPE.COST_CENTER_CODE  IS  NULL  THEN
                 
                 RAISE ADDRESS_INFO_MISSING_EXP; 
                 --null;
-- See Error #01x.
-- TAL 05/23/2013 CCNA-384 When a cost center is being added 
-- there must be an address being added also
           END IF;
        END IF; 
      END IF;  
  END;

/*******************************************************************************
  2).	Category (1-VR/BR): 
      a.  The Category determines whether a the Cost_Center is a:
          STORE, ADMINISTRATION, REAL_ESTATE, TERRITORY, or OTHER.  
          'A' = Admisistration
          'R' = Real Estate
          'S' = Store
          'T' = Territory
          'O' = Other
*******************************************************************************/

      IF  NOT  common_tools.code_detail_valid('CATEGORY', incost_center_rowtype.CATEGORY) 
      OR       incost_center_rowtype.CATEGORY  IS  NULL    THEN 
          RAISE invalid_category_exp;
-- See Error #02a
      END IF;

/*******************************************************************************
  3).	Statement_Type (2-VR/BR): 
      a.  This Field (column) cannot be null!
          Must match an entry in the table below.
          Statement_Type is 'MX'    Country_Code is 'MEX'
          Statement_Type is 'PR'    Country_Code is 'PRI'
          Statement_Type is 'TR'    Country_Code is 'TTO'
          Statement_Type is 'JM'    Country_Code is 'JAM'
          Statement_Type is 'AW'    Country_Code is 'ABW'
          Statement_Type is 'CW'    Country_Code is 'CUW'
          Statement_Type is 'AN'    Country_Code is 'ANT'
          Statement_Type is 'GD'    Country_Code is 'GRD'          

          Country_Code is 'CAN'    Statement_Type is 'CN','AC','DC'
          
          Country_Code is 'USA'    Statement_Type is 'US','AU','DU','CK','CP','DP','FB',
                                                     'GP','GS','MB','MZ','NP','SG','QK'
TAL 04/29/2013 CCNQC-25 fix to Country Code must match Statement Type added "UN" for "USA"

*******************************************************************************/

/*******************************************************************************
	     a. validate Statement_Type
*******************************************************************************/	

      IF  NOT  common_tools.code_detail_valid('STATEMENT_TYPE', incost_center_rowtype.statement_type) 
      OR       incost_center_rowtype.statement_type  IS  NULL    THEN
          RAISE invalid_statement_type_exp;
-- See Error #03a
      END IF;
      
/*******************************************************************************
  4).	Country_Code (3-VR/BR):
      a.  This Field (column) cannot be null!
          Must match an entry in the table below.
          Statement_Type is 'MX'    Country_Code is 'MEX'
          Statement_Type is 'PR'    Country_Code is 'PRI'
          Statement_Type is 'TR'    Country_Code is 'TTO'
          Statement_Type is 'JM'    Country_Code is 'JAM'
          Statement_Type is 'AW'    Country_Code is 'ABW'
          Statement_Type is 'CW'    Country_Code is 'CUW'
          Statement_Type is 'AN'    Country_Code is 'ANT'
          Statement_Type is 'GD'    Country_Code is 'GRD'

          Country_Code is 'CAN'    Statement_Type is 'CN','AC','DC'
          
          Country_Code is 'USA'    Statement_Type is 'US','AU','DU','CK','CP','DP','FB',
                                                     'GP','GS','MB','MZ','NP','SG','QK'
TAL 04/29/2013 CCNQC-25 fix to Country Code must match Statement Type added "UN" for "USA"
                                                     
      b.  Country_Code must match to Statement_Type.

*******************************************************************************/

/*******************************************************************************
	    a. validate Country_Code
*******************************************************************************/	  

      IF  NOT  common_tools.code_detail_valid('COUNTRY_CODE', incost_center_rowtype.country_code) 
      OR       incost_center_rowtype.country_code  IS  NULL   THEN
          RAISE invalid_country_code_exp;
-- See Error #04a
      END IF;
      
/*******************************************************************************
	    b. validate Country_Code and Statement_Type match
*******************************************************************************/	  

--a funtion to call translation table will replace code in this section.

/*******************************************************************************
This matching routine needs to be better defined 
MDH 07/02/2013 Added GD statement type and GRD for Grenada.
*******************************************************************************/

      IF (incost_center_rowtype.country_code        =   'MEX'
      AND incost_center_rowtype.statement_type  NOT IN ('MX') )
      
      OR (incost_center_rowtype.country_code        =   'PRI'
      AND incost_center_rowtype.statement_type  NOT IN ('PR') )
      
      OR (incost_center_rowtype.country_code        =   'TTO'
      AND incost_center_rowtype.statement_type  NOT IN ('TR') )
      
      OR (incost_center_rowtype.country_code        =   'JAM'
      AND incost_center_rowtype.statement_type  NOT IN ('JM') )
      
      OR (incost_center_rowtype.country_code        =   'ABW'
      AND incost_center_rowtype.statement_type  NOT IN ('AW') )
      
      OR (incost_center_rowtype.country_code        =   'CUW'
      AND incost_center_rowtype.statement_type  NOT IN ('CW') )
      
      OR (incost_center_rowtype.country_code        =   'ANT'
      AND incost_center_rowtype.statement_type  NOT IN ('AN') )
            
      OR (incost_center_rowtype.country_code        =   'GRD'
      AND incost_center_rowtype.statement_type  NOT IN ('GD') )
      
      OR (incost_center_rowtype.country_code        =   'CAN'
      AND incost_center_rowtype.statement_type  NOT IN ('CN','AC','DC','GC') )

      OR (incost_center_rowtype.country_code        =   'BRB'
      AND incost_center_rowtype.statement_type  NOT IN ('BB') )
      
      OR (incost_center_rowtype.country_code        =   'USA'
      AND incost_center_rowtype.statement_type  NOT IN ('US','AU','DU','CK','CP','DP','FB','UN',
--  TAL 04/29/2013 CCNQC-25 fix to Country Code must match Statement Type added "UN" for "USA"
                                                        'GP','GS','MB','MZ','NP','SG','QK','PK','CO','FP','KP','CX') )  
      THEN
               RAISE country_statement_match_exp;
-- See Error #04b          
      END IF;

/*******************************************************************************
  5). Close_Date (VR/BR): 
      a.  For the Business Rules for this field (column) please refer to the Technical Document (section 3.3.2).
          Not necessary, CLOSE_CCNTR_SP procedure checks close date.
          MDH 01/17/2013     
*******************************************************************************/	  

/*******************************************************************************
	    a. validate Close_Date
*******************************************************************************/	  

--     if  incost_center_rowtype.close_date  is not  null    then
--          raise invalid_close_date_exp;
-- See Error #05a
--      end if;

/*******************************************************************************
  6).	Financial_Close_Date (VR/BR): 
        This date refers to the date that the Financial Data was cleaned off of the books for a Cost Center.
        This field can only be populated if the cost center has previously been closed 
          (i.e. Close_Date not zeros and STATUS table reflects 'closed' status.

*******************************************************************************/	  

/*******************************************************************************
	    a. validate Financial_Close_Date
 *******************************************************************************/

      IF  incost_center_rowtype.financial_close_date  IS NOT  NULL    THEN
      
BEGIN

      v_date  :=  incost_center_rowtype.financial_close_date;
-- Yes, it was a valid date (no EXCEPTION)

EXCEPTION
  WHEN others THEN
  RAISE invalid_fin_close_date_exp;
-- No,  not a valid date
-- See Error #06a
END;

      END IF;
      
/*******************************************************************************
  7). Currency_Code (3-VR/BR):  
      a. This field is also influenced by the Country_Code,
          since the Statement_Type, Country_Code, and Currency_Code must correspond to each other.  
        This will also happen in the 'Insert' package of the COST_CENTER table.
          If Country_Code is 'USA' then Currency_Code must be 'USD' for 'Store' cost centers only. 
          If Country_Code is 'CAN' then Currency_Code must be 'CAD' for 'Store' cost centers only.
          If Country_Code is 'GRD' then Currency_Code must be 'GRD' or 'USA' for 'Store' cost centers only.
          If Country_Code is 'MEX' then first two digits of Currency_Code must start with 'MX' for 'Store' cost centers only.
*******************************************************************************/	  

/*******************************************************************************
	     a. validate Currency_Code
                 
MDH 07/02/2013 Added GD statement type and GRD for Grenada.      
*******************************************************************************/	  

--  Currency_Code edit is valid for "Store" Cost_Centers only

      IF  incost_center_rowtype.CATEGORY  =  'S'    THEN
          
          IF  NOT  common_tools.code_detail_valid('CURRENCY_CODE', incost_center_rowtype.currency_code) 
          OR   incost_center_rowtype.currency_code  IS  NULL    THEN
               RAISE invalid_currency_code_exp;
-- See Error #07a
          END IF;
          
          IF ( incost_center_rowtype.country_code    =  'USA'
          AND  incost_center_rowtype.currency_code  !=  'USD' )
          
          OR ( incost_center_rowtype.country_code    =  'CAN'
          AND  incost_center_rowtype.currency_code  !=  'CAD' )
                    
          OR ( incost_center_rowtype.country_code    =  'GRD'
          AND (incost_center_rowtype.currency_code  !=  'GRD'
          AND   incost_center_rowtype.currency_code  !=  'USD' ) )
          
          OR ( incost_center_rowtype.country_code    =  'MEX'
          AND  substr(incost_center_rowtype.currency_code,1,2)  !=  'MX' )  
                                                                THEN
               RAISE country_currency_match_exp;
-- See Error #07b
          END IF;
 
        IF incost_center_rowtype.PRI_LOGO_GROUP_IND  IS NULL
         THEN 
         RAISE INVALID_PRI_LOGO_GROUP;
        END IF;   
          
      END IF;
      
/*******************************************************************************
  8). POS_Prog_Ver_Nbr: 
      a. There are no edits for this field.  This field can be changed, but is usually updated from Polling (CCN00500). 
*******************************************************************************/	  

/*******************************************************************************
	    a. validate POS_Prog_Ver_Nbr
*******************************************************************************/	  

/*******************************************************************************
  9). POS_Prog_Ver_Eff_Date: 
      a. there are no edits for this field.  this field can be changed, but is usually updated from polling (ccn00500). 
*******************************************************************************/	  

/*******************************************************************************
	    a. validate POS_Prog_Ver_Eff_Date
*******************************************************************************/	  


/*******************************************************************************
 10). DUNS_NUMBER: 
      a. The duns number must be entered for Store(S) and Other(O) Cost Centers
         It cannot be null or spaces and must be numeric. 
*******************************************************************************/	  
      
BEGIN
  IF (incost_center_rowtype.CATEGORY  IN ('S', 'O'))   THEN
      IF (incost_center_rowtype.DUNS_NUMBER IS NULL  
      OR  incost_center_rowtype.DUNS_NUMBER = '         ')  THEN
-- See Error #10a      
           RAISE invalid_duns_nbr_exp;
      END IF;
     IF NOT REGEXP_LIKE(incost_center_rowtype.DUNS_NUMBER, '\d{9}')  THEN
-- See Error #10b      
           RAISE invalid_duns_num_exp;
      END IF;
  END IF;
-- Duns Number must be of size 9 characters
  IF incost_center_rowtype.DUNS_NUMBER IS NOT NULL 
     AND LENGTH(incost_center_rowtype.DUNS_NUMBER) < 9 THEN
      RAISE invalid_duns_nbr_size_err;
  END IF;
END;

/*******************************************************************************
 11). VALIDATE STANDARD COST and PRIMARY COST fields for NON Canada customers and
 raise a warning if it is NULL. Made changes as per ASP-400 mxk766 - 
	Standard/Primary Cost indicators
 Added by mxk766 on 8/17/2016
*******************************************************************************/
BEGIN

IF (NVL(incost_center_rowtype.country_code,'XX') NOT IN ('CAN')  AND
    (incost_center_rowtype.std_cost_identifier  IS NULL OR
     incost_center_rowtype.prim_cost_identifier IS NULL
     )
    ) THEN

  ERRPKG.STORE_WARNINGS(
                        errnums.en_cc_strd_primry_price_err,
                        'COST_CENTER_BR_SP.CC_STANDARD_PRIMARY_COST_EXP'|| ' CCN_BUSINESS_RULES_PKG '
                        );
END IF;

END;

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION

-- Error #01c
--               when duplicate_cost_center_exp then
--                    v_code := errnums.en_duplicate_cost_center_err; 
--                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.duplicate_cost_center_exp '  ,
--                   'Cost_Center_Code was entered as "' || incost_center_rowtype.cost_center_code || '". ' ||
--                   'However, Cost_Center already exists.' );  

-- Error #01b
--             when invalid_cost_center_exp  then  
--                  v_code := errnums.en_invalid_cost_center_err;
--                  errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_cost_center_exp ' ,
--                 'Cost_Center_Code was entered as "' || incost_center_rowtype.cost_center_code || '", ' ||
--                 'However, specified Cost_Center was not found.' );
          
-- Error #01d
               WHEN cctr_must_be_ent_exp     THEN
                    v_code := errnums.en_cctr_must_be_ent_err; 
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.cctr_must_be_ent_exp ' ,
                   'Cost_Center_Code was entered as "' || incost_center_rowtype.cost_center_code || '", ' ||
                   'However, Cost_Center_Code must be entered , can not be "null" or "spaces", ' ||
                   'and must be 6 digits numeric.' );  

-- Error #01x
                 WHEN address_info_missing_exp THEN
                      v_code := errnums.en_address_info_missing_err; 
                      errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.address_info_missing_exp '  ,
                     'Cost_Center_Code was entered as "' || incost_center_rowtype.cost_center_code || '". ' ||
                     'However, for new Cost Centers, Address information must also be entered.' );  
 
                    
-- Error #02a
               WHEN invalid_category_exp THEN
                    v_code := errnums.en_invalid_code_detail_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.category_not_valid_exp ' ,
                   'Category was entered as "' || incost_center_rowtype.CATEGORY || '". ' || 
                   'This value was not found on the Code_Detail table.');  
                   
-- Error #03a
               WHEN invalid_statement_type_exp THEN
                    v_code := errnums.en_invalid_code_detail_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_statement_type_exp ' ,
                   'Statement_Type was entered as "' || incost_center_rowtype.statement_type || '". ' || 
                   'This value was not found on the Code_Detail table.'); 
                   
-- Error #04a
               WHEN invalid_country_code_exp THEN
                    v_code := errnums.en_invalid_code_detail_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_country_code_exp ' ,
                   'Country_Code was entered as "' || incost_center_rowtype.country_code || '". ' || 
                   'This value was not found on the Code_Detail table.'); 
                   
-- Error #04b
               WHEN country_statement_match_exp THEN
                    v_code := errnums.en_country_stmt_match_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.country_statement_match_exp ' ,
                   'Country_Code and Statement_Type were entered as  "' || incost_center_rowtype.country_code ||
                   '" and "' || incost_center_rowtype.statement_type || '". ' ||
                   'These two fields must contain corresponding values.' );  
                   
-- Error #05a
--               when invalid_close_date_exp then
--                    v_code := errnums.en_invalid_close_date_err;
--                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_close_date_exp ' ,
--                   'Close_Date was entered as  "' || incost_center_rowtype.close_date || '". ' ||
--                   'However, Close_Date can not be entered.' );  
                   
-- Error #06a
               WHEN invalid_fin_close_date_exp THEN
                    v_code := errnums.en_invalid_fin_close_date_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_fin_close_date_exp ' ,
                   'Fin_Close_Date was entered as  "' || incost_center_rowtype.financial_close_date || '". ' ||
                   'However, Fin_Close_Date must be a valid date.' );  
                   
-- Error #07a
               WHEN invalid_currency_code_exp THEN
                    v_code := errnums.en_invalid_currency_code_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_currency_code_exp ' ,
                   'Currency_Code was entered as  "' ||  incost_center_rowtype.currency_code || '". ' ||
                   'This value was not found on the Code_Detail table.'); 
                   
-- Error #07a
               WHEN country_currency_match_exp THEN
                    v_code := errnums.en_country_currency_match_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.country_currency_match_exp ' ,
                   'Country_Code and Currency_Code were entered as  "' || incost_center_rowtype.country_code ||
                   '" and "' ||  incost_center_rowtype.currency_code || '". ' ||
                   'These two fields must contain corresponding values.' );  
                   
-- Error #08a       no edits for this field
                   
-- Error #09a       no edits for this field

-- Error #10a  
               WHEN invalid_duns_nbr_exp THEN
                    v_code := errnums.en_invalid_duns_number_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_duns_nbr_exp ' ,
                   'Duns Number is Mandatory for Store and Other Cost Centers');  
-- Error #10b  
               WHEN invalid_duns_num_exp THEN
                    v_code := errnums.en_invalid_duns_number_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_duns_num_exp ' ,
                   'Duns Number must be numeric');  
               WHEN invalid_duns_nbr_size_err THEN
                    v_code := errnums.en_invalid_duns_nbr_size_err;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.invalid_duns_nbr_size_err ' ,
                   'Duns Number must be of 9 characters'); 
               WHEN INVALID_PRI_LOGO_GROUP THEN
                    v_code := errnums.en_invalid_pri_logo_group;
                    errpkg.raise_err(v_code, 'COST_CENTER_BR_SP.INVALID_PRI_LOGO_GROUP ' ,
                   'STORE MUST HAVE A PRIMARY LOGO');  

END COST_CENTER_BR_SP;

/*******************************************************************************
--PROCEDURE MARKETING_BR_SP (
********************************************************************************
	 MARKETING_BR_SP

	There were no Business Rules necessary for the MARKETING Table other than
  Effective and Expiration Dates. 
	TRD  Section: 3.3.30 

created : MDH 9/24/2012
*******************************************************************************/	

PROCEDURE OTHER_BR_SP (
/*******************************************************************************
	 OTHER_BR_SP

	This procedure is intended enforce the Business Rules
	for verifying the CATEGORY on the OTHER Table
	TRD  Section: 3.3.20 

created : BLR 8/3/2012
*******************************************************************************/	
  inCostctr_rowtype                IN  COST_CENTER%ROWTYPE
 ,inOther_rowtype                  IN  OTHER%ROWTYPE )
                IS         
 
 inactive_cost_center_err    	EXCEPTION;
 invalid_othr_cc_catg_err     EXCEPTION; 
 invalid_other_category_err   EXCEPTION;  
 invalid_code_detail_err      EXCEPTION;
 
 --v_cost_center_rowtype       COST_CENTER%ROWTYPE; 
  
 v_curr_date           date := sysdate;
 v_code number;
 v_count number;
 v_errm varchar(500);
 
/*
   3.3.20   The list below are the business ruels by column for the Administration table:
	 **note:This table is only stored if the category of the cost_center_table is an "R".
*/

 BEGIN
/* 
    3.3.20.1a  A Cost Center row is selected to validate category code is an "O"; otherwise Other table cannot be added(fixed)
*/	
    
      IF inCostctr_rowtype.cost_center_code <>  inOther_rowtype.cost_center_code THEN
	       RAISE inactive_cost_center_err;
      END IF;
    
	
/* 
	
   3.3.20.1b  For this OTHER table, the category must be "O"     
*/		
      IF  NOT  common_tools.code_detail_valid('CATEGORY',inCostctr_rowtype.CATEGORY) THEN  -- value not found in table 
              RAISE invalid_othr_cc_catg_err; 
      END IF; 

    
     IF inOther_rowtype.CATEGORY <> 'O'   THEN
         RAISE invalid_other_category_err;
      END IF;	
          
         
    EXCEPTION
              		    
      WHEN inactive_cost_center_err THEN     
	    v_code := errnums.en_inactive_cost_center_err;
	    errpkg.raise_err(v_code, 'OTHER_BR_SP.inactive_cost_center_err ' ,
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Other Cost Center "' || inOther_rowtype.cost_center_code || '", ' ||
        'Cost Center is "' || inCostctr_rowtype.cost_center_code || '". ' ||
        'Cost center code on the Other and Cost Center table do not match '); 
		

      WHEN invalid_othr_cc_catg_err THEN           
	    v_code := errnums.en_invalid_code_detail_err;
	    errpkg.raise_err(v_code, 'OTHER_BR_SP.invalid_othr_cc_catg_err ' ,
        'CCN_BUSINESS_RULES_PKG ' || 
        'Entered cost center Category_Code was "' || inCostctr_rowtype.CATEGORY || '". ' || 
        'invalid category code on the Code Detail table '); 

      WHEN invalid_other_category_err THEN  
	    v_code := errnums.en_invalid_other_category_err;
	    errpkg.raise_err(v_code, 'OTHER_BR_SP.invalid_other_category_err ' ,
        'CCN_BUSINESS_RULES_PKG ' 
        || 'For Cost Center "' || inOther_rowtype.cost_center_code || '", ' ||
        'Category_Code is "' || inOther_rowtype.CATEGORY || '". ' ||
        'For an OTHER table column Category code must be "O". '); 
		
      WHEN OTHERS THEN
      v_code := SQLCODE;
	    v_errm := substr(SQLERRM,1, 500);
      errpkg.raise_err(v_code, v_errm ||
        'CCN_BUSINESS_RULES_PKG ' || 'No errors found');
     
    
 END  OTHER_BR_SP; 
 
PROCEDURE PHONE_BR_SP ( 
/*****************************************************************************
	PHONE_BR_SP

	This procedure is intended to enforce the Business Rules
	for PHONE validation edits and verifying the following rules:
  
  First:  Phone_Number must be entered.
       a. Phone_Number must be 7 digits numeric,
          Phone_Number can not be spaces or nulls.
       b. Phone_Number can not be zeroes.
       
       This check will eliminate the need for some specific Business Rules 
       edits below.
  
  1.)  Phone_Number_Type (2-BR):
    	 a. For a "Polling" store (Polling_Status_Code is "P") 
          There must be a Primary (PP) and Secondary (SP) phone number present!
       b. Primary (PRI) and Secondary (SCD) phone numbers are required 
          for Store (Category "S") and Other (Category "O") Cost Centers.
       c. For BANK_CARD records there should be Two (2) Phone records (BC1 null).

  2.)  Phone_Area_Code (4-BR):  
       a. The Area Code can be spaces, but if entered, must be numeric and 
       cannot be zeros.
       b. If the Area Code is entered, the Phone Number must be entered!     

  3.)  Phone_Number (7-BR):  
       a. The Phone Number cannot be spaces.  
          This field must be entered and must be numeric and cannot be zeros.
       b. If the Area Code is entered, the Phone Number must be entered!     

  4.)  Phone_Number_Ext (6-BR):
       a. This field (column) can be spaces, but if entered, must be numeric and
       cannot be zeros.
       b. If the Extension Number is entered, the Phone Number must be entered!     

 created : TAL 07/31/2012
 revised : BLR CCNA-351 04-16-13 Allow nulls and spaces for secondary &
           fax numbers; if Primary number exist. Program was forcing a number  
           for fax & secondary#'s
******************************************************************************/	
  
   in_phone_rowtype             PHONE%ROWTYPE
   ,incost_center_rowtype      COST_CENTER%ROWTYPE
   )
   
        IS 

-- First Error a. 
   phone_nbr_not_valid_exp         EXCEPTION;
   
-- Error #02 -- tested
   area_code_not_valid_exp         EXCEPTION;
      
-- Error #04
   extension_not_valid_exp         EXCEPTION;
  
  
   v_code   number;
   v_errm   varchar(500);
   v_PHONE  number   := 0 ;
 
  
BEGIN
--revised : BLR CCNA-351 04-16-13 Added to not edit phone numbers for closed
--          cost centers.
            
IF incost_center_rowtype.cost_center_code = in_phone_rowtype.cost_center_code
   AND incost_center_rowtype.close_date > NULL     THEN
   RETURN;
END IF;

IF in_phone_rowtype.phone_number_type IS NULL
    OR  in_phone_rowtype.phone_number_type = '     '  THEN
   RETURN;
     
       ELSE  
   
/*******************************************************************************
 CCNA-351 - COMMENTED FIRST CHECK BECAUSE PHONE# CAN BE NULL OR ZERO FOR
             SECONDARY & FAX PHONE NUMBERS. 
  
  First:  Phone_Number must be entered.
       a. Phone_Number must be 7 digits numeric,
          Phone_Number can not be spaces or nulls.
       b. Phone_Number can not be zeroes.
       
       This check will eliminate the need for some specific Business Rules edits
       later in this Procedure.
  
*******************************************************************************/

/*******************************************************************************
      a. validate Phone_Number entered
*******************************************************************************/	  
   IF  in_phone_rowtype.phone_area_code  IS NOT  NULL   THEN
--    phone_number can not be null 
--     if  in_phone_rowtype.phone_number  is  null  
--    phone_number can not be just one or more spaces
      IF  REGEXP_LIKE(in_phone_rowtype.phone_number, '^ *$')
--    phone_number can not be all zeroes
          OR  in_phone_rowtype.phone_number  =   '0000000'
--    phone_number must be 7 digits numeric
          OR  NOT REGEXP_LIKE(in_phone_rowtype.phone_number, '^\d{7}$')  THEN
              RAISE phone_nbr_not_valid_exp; 
-- See First Error a.             
      END IF;
 END IF;

/*******************************************************************************
  1.)  Phone_Number_Type (2-BR):
    	 a. For a "Polling" store (Polling_Status_Code is "P") 
          There must be a Primary (PRI) and Secondary (SCD) phone number present.
       b. Primary (PRI) and Secondary (SCD) phone numbers are required 
          for Store (Category "S") and Other (Category "O") Cost Centers.
       c. For BANK_CARD records there should be Two (2) Phone records (BC1 null).
       
*****       This section is not to be done till further defined      ****
            4-16-13
*******************************************************************************/

/*******************************************************************************
  2.)  Phone_Area_Code (4-BR):  
       a. The Area Code can be spaces, but if entered, must be numeric and 
       cannot be zeros.
       b. If the Area Code is entered, the Phone Number must be entered!     

*******************************************************************************/

/*******************************************************************************
	     a. validate Area_Code
*******************************************************************************/	  
      
      IF  in_phone_rowtype.phone_area_code  IS NOT  NULL   THEN
      
          IF  length(in_phone_rowtype.phone_area_code)  <  3   THEN
              RAISE area_code_not_valid_exp;
-- See Error #02
          END IF;
          
          IF  NOT REGEXP_LIKE(in_phone_rowtype.phone_area_code, '^\d{3}$')
          AND NOT REGEXP_LIKE(in_phone_rowtype.phone_area_code, '^\d{4}$')   THEN
              RAISE area_code_not_valid_exp;
-- See Error #02
          END IF;
          
          IF  in_phone_rowtype.phone_area_code  =  '000'
          OR  in_phone_rowtype.phone_area_code  =  '0000'   THEN
              RAISE area_code_not_valid_exp;
-- See Error #02
          END IF;
          
      END IF;

/*******************************************************************************
	     b. Phone_Number must be entered - edits performed above
*******************************************************************************/	  
              
--      dbms_output.put_line('completed edit rule 02. ' );   


/*******************************************************************************
  3.)  Phone_Number (7-BR):  
       a. The Phone Number cannot be spaces.  
          This field must be entered and must be numeric and cannot be zeros.
       b. If the Area Code is entered, the Phone Number must be entered!     

*******************************************************************************/

/*******************************************************************************
	     a. validate Phone_number - edits performed above
*******************************************************************************/	  

/*******************************************************************************
	     b. if Area_Code is entered, then Phone_Number can not be null - edits 
       performed above
*******************************************************************************/	  
       
--      dbms_output.put_line('completed edit rule 03. ' ); 


/*******************************************************************************
  4.)  Phone_Number_Ext (6-BR):
       a. This field (column) can be spaces, but if entered, must be numeric and
       cannot be zeros.
       b. If the Extension Number is entered, the Phone Number must be entered!     
*******************************************************************************/	  

/*******************************************************************************
	     a. validate Phone_Extension
*******************************************************************************/	  
     IF  in_phone_rowtype.phone_extension IS NOT  NULL   THEN                      
--    if  phone_extension contains any digit that is not numeric
        IF  REGEXP_LIKE(in_phone_rowtype.phone_extension, '\D')    THEN
            RAISE extension_not_valid_exp;
-- See Error #04
        END IF;

          v_phone  :=  in_phone_rowtype.phone_extension;  
        IF  v_phone  =  0    THEN
            RAISE extension_not_valid_exp;
-- See Error #04
        END IF;
  END IF;   
  
  DBMS_OUTPUT.PUT_LINE(in_phone_rowtype.cost_center_code || ' | ' || in_phone_rowtype.PHONE_NUMBER_TYPE || ' | ' 
              || in_phone_rowtype.PHONE_AREA_CODE || ' | '
          || in_phone_rowtype.PHONE_NUMBER
          || in_phone_rowtype.PHONE_EXTENSION);

END IF;  
/*******************************************************************************
	     b. if Extension is entered, then Phone_Number can not be null - edits 
       performed above
*******************************************************************************/	  
       
--      dbms_output.put_line('completed edit rule 04. ' );
                     
--      dbms_output.put_line('completed ALL edit rules). ' );

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
          EXCEPTION
                      
-- First Error a.
               WHEN phone_nbr_not_valid_exp THEN
                    v_code := errnums.en_invalid_phone_err;
                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.invalid_phone_nbr_exp ' ,
                   'Phone_Number was entered as "' || in_phone_rowtype.phone_number || '", ' ||
                   'Phone_Number must be 7 digits numeric ' ||
                   'and can not be "null", "spaces", or all "zeroes".' );
                   
-- Error #00                  
--               when invalid_phone_request_exp then
--                    v_code := errnums.en_invalid_phone_request_err; 
--                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.invalid_phone_request_exp '  ,
--                   'Invalid Phone_Request entered "' || 
--                    inphone_request_type || '", ' ||
--                    'Phone Request Type must be either "B" for Bank_card Phone or "P" for Polling Phone ' );         

-- Error #01a                   
 --              when invalid_phone_type then
--                    v_code := errnums.en_invalid_phone_type_err; 
--                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.invalid_phone_type_exp '  ,
--                   'Invalid Phone_types entered "' || 
--                    inpolling_phone1_rowtype.phone_number_type || '" and "' || 
--                    inpolling_phone2_rowtype.phone_number_type || '" ' ||
--                    'for Polling_Status = "P", ' || 'Phone_types must be "PRI" and "SCD"' );
          
-- Error #01b                  
--               when invalid_phone_type_exp2 then
--                    v_code := errnums.en_invalid_phone_type_err; 
--                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.invalid_phone_type_exp '  ,
--                   'Invalid Phone_types entered "' || 
--                    inpolling_phone1_rowtype.phone_number_type || '" and "' || 
--                    inpolling_phone2_rowtype.phone_number_type || '" ' ||
--                    'for Category = "S" or "O", ' || 'Phone_types must be "PRI" and "SCD"' );
                   
-- Error #01c
--               when invalid_eff_date_exp then
--                    v_code := errnums.en_invalid_eff_date_err; 
--                    v_code := errnums.en_invalid_polling_err; 
--                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.invalid_eff_date_exp '  ,
--                   'Effective Date entered "' || ineffective_date || '" is not a valid date');
                   
-- Error #02 -- tested
               WHEN area_code_not_valid_exp THEN
                    v_code := errnums.en_invalid_phone_err;
                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.area_code_not_valid_exp ' ,
                   'Area_Code was entered as "' || in_phone_rowtype.phone_area_code || '", ' || 
                   'If entered, Area_Code must be 3 or 4 digits numeric ' ||
                   'and can not contain "spaces" or be all "zeroes".');
                   
-- Error #04 -- tested
               WHEN extension_not_valid_exp THEN
                    v_code := errnums.en_invalid_phone_err;
                    errpkg.raise_err(v_code, 'PHONE_VALIDATION_EDITS_SP.extension_not_valid_exp ' ,
                   'Extension was entered as  "' || in_phone_rowtype.phone_extension || '", ' || 
                   'If entered, Extension must be from 1 to 6 digits numeric ' ||
                   'and can not contain "spaces" or be all "zeroes".');
                    

END PHONE_BR_SP;



 
/*******************************************************************************
--PROCEDURE POLLING_BR_SP (
	 POLLING_BR_SP

	There were no Business Rules necessary for the POLLING Table other than
  Effective and Expiration Dates. 
	TRD  Section: 3.3.12 

created : TAL 9/25/2012
*******************************************************************************/	

  PROCEDURE REAL_ESTATE_BR_SP (
/*******************************************************************************
	 REAL_ESTATE_BR_SP

	This procedure is intended enforce the Business Rules
	for verifying the CATEGORY on the REAL_ESTATE_ Table
	TRD  Section: 3.3.20 

created : BLR 8/3/2012
*******************************************************************************/	
  inCostctr_rowtype       IN  COST_CENTER%ROWTYPE
 ,inReal_estate_rowtype   IN  REAL_ESTATE%ROWTYPE )

                IS         
 
 inactive_cost_center_err	    EXCEPTION;
 invalid_code_detail_err	    EXCEPTION;
 invalid_re_cc_catg_err       EXCEPTION; 
 invalid_re_category_err      EXCEPTION; 
 
 
 v_curr_date           date := sysdate;
 v_code number;
 v_count number;
 v_errm varchar(500);
 
/*
   3.3.20   The list below are the business ruels by column for the Administration table:
	 **note:This table is only stored if the category of the cost_center_table is an "R".
*/

 BEGIN
/*
   3.3.20.1a  A Cost Center row is selected to validate category code is an "R"; otherwise Real_Estate table cannot be added
*/
	   
      IF inCostctr_rowtype.cost_center_code <>  inReal_estate_rowtype.cost_center_code THEN
	       RAISE inactive_cost_center_err;
      END IF;   
	
/*
   3.3.20.1b  For this administration table, the category must be "R"     
*/		
      IF  NOT  common_tools.code_detail_valid('CATEGORY', inCostctr_rowtype.CATEGORY) THEN  -- value not found in table 
              RAISE invalid_re_cc_catg_err; 
      END IF; 

    
     IF inReal_estate_rowtype.CATEGORY <> 'R'   THEN
         RAISE invalid_re_category_err;
      END IF;	
      
            
    EXCEPTION
              		    
       WHEN inactive_cost_center_err THEN  
	     v_code := errnums.en_inactive_cost_center_err;
	     errpkg.raise_err(v_code, 'REAL_ESTATE_BR_SP.inactive_cost_center ',
        'CCN_BUSINESS_RULES_PKG ' ||  
        'For R/E Cost Center "' || inReal_estate_rowtype.cost_center_code || '", ' ||
        'For CC Cost Center "' || inCostctr_rowtype.cost_center_code || '", ' ||
        'Cost center codes on Real Estate and Cost Center table do not match '); 
         
      WHEN invalid_re_category_err THEN        
      v_code := errnums.en_invalid_re_category_err;
	    errpkg.raise_err(v_code, 'REAL_ESTATE_BR_SP.invalid_re_category_err ' ,
        'CCN_BUSINESS_RULES_PKG ' || 
        'Entered Category_Code was "' || inReal_estate_rowtype.CATEGORY || '". ' || 
        'Invalid Real_Estate category code; - should be "R". '); 

      WHEN invalid_re_cc_catg_err THEN  
	    v_code := errnums.en_invalid_code_detail_err;
	    errpkg.raise_err(v_code, 'REAL_ESTATE_BR_SP.invalid_re_cc_catg_err ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Cost Center "' || inReal_estate_rowtype.cost_center_code || '", ' ||
        'Category_Code is "' || inCostctr_rowtype.CATEGORY || '". ' ||
        'invalid category code on the Code Detail table '); 
        
      		
      WHEN OTHERS THEN
      v_code := SQLCODE;
	    v_errm := substr(SQLERRM,1, 500);
      errpkg.raise_err(v_code, v_errm ||
        'CCN_BUSINESS_RULES_PKG '  || 'No errors found');
     
    
 END  REAL_ESTATE_BR_SP;

PROCEDURE SALES_REP_BR_SP ( 
/*****************************************************************************
	SALES_REP_BR_SP

	This procedure is intended to enforce the Business Rules
	for Sales Rep validation edits and verifying the following rules:
  
  The GEMS Emplyee I.D. must be numeric and must be on the EMP_Data file
       which is a veiw of the GEMS database.  
 
  Please note that the Social Security Number is only used to initially load 
       the data from the legacy IDMS Database.  It will be deleted and thus not
       used within this procedure. 
               
  In Addition:

  1.)  Gems_Employee_ID (7-BR): 
       This field (column) cannot be spaces and must be numeric as it is the  
          primary key to the SALES_REP Table.  
       This field (column) will be validated against the EMP_Data view from 
          the GEMS database.
      
 2.)  Social Security Number (9-VR/BR): 
       This field (column) is temporary and used only to load the initial data
          from the legacy IDMS CCN Database.
           
 3.)  Expiration_Date (VR/BR): 
       When entered, the expiration date cannot be less than the effective date. 
          the COMMON_PKG rules do not apply here since the SALES_REP table is
          not a history record. 
 
 4.)  Employee_Code: 
       This field (column) must be on the CODE_DETAIL table.           
      
 5.)  Employee_Code (2-VR/BR): 
       The following rules apply: 
          Employee_Code is "13" - Employee must be on disability
          Employee_Code is "15" - Employee should be terminated and Exp_date is not null.
          Employee_Code is "10" - This is a new employee.
          
 
created : MDH 08/01/2012
******************************************************************************/	
  
   inSALES_REP_ROWTYPE   IN  SALES_REP%ROWTYPE )
--  ,inTERRITORY_ROWTYPE   IN  TERRITORY%rowtype )

        IS 
        
-- Specify in_xxxxx_rowttype to get all the fields.

 gems_emp_id_non_num_exp           EXCEPTION;
 gems_emp_id_exp                   EXCEPTION;
 no_emp_data_exp                   EXCEPTION;
 emp_data_not_act_exp              EXCEPTION;
 invalid_eff_date_exp              EXCEPTION; /* TAL */
 invalid_exp_date_exp              EXCEPTION; /* TAL */
 expdt_must_be_gt_effdt_exp        EXCEPTION; /* TAL */
 invalid_employee_code_exp         EXCEPTION;
 invalid_emp_code_act_exp          EXCEPTION;
 invalid_emp_code_dis_exp          EXCEPTION;
 invalid_emp_code_ter_exp          EXCEPTION;
 invalid_emp_code_dec_exp          EXCEPTION;
 invalid_emp_code_ret_exp          EXCEPTION; 
 invalid_emp_code_non_exp          EXCEPTION;
  
 v_emp_data_rowtype          EMP_DATA%ROWTYPE;
   
 v_curr_date date := sysdate;
 v_code   number;
 v_errm   varchar(500);
 v_count  number;
 v_terminal  number;
 v_date   date;
 
 
  
BEGIN

/*******************************************************************************
  The GEMS Emplyee I.D. must be numeric.  
*******************************************************************************/

BEGIN

      IF (TRANSLATE(inSALES_REP_ROWTYPE.gems_employee_id, ' +-.0123456789',' ') IS NOT NULL) THEN 
--  See First Error A       
         RAISE gems_emp_id_non_num_exp ;
      END IF;
--  
--    if v_addr_usa_rowtype.check_digit < '1'  THEN    
      IF inSALES_REP_ROWTYPE.gems_employee_id < '0000001'  THEN 
--  See Second Error B           
          RAISE gems_emp_id_exp ;
      END IF;	
--  
END;
--
--
/*******************************************************************************
  The Social Security Number must be numeric.
  
 2.)  Social Security Number (9-VR/BR): 
       This field (column) is temporary and used only to load the initial data
          from the legacy IDMS CCN Database.
           
  This Social Security Number will be deleted in Phase II of the CCN project as
  it was only needed to load the Sales_Rep data from the Legacy IDMS CCN
  Database into the CCN Oracle Database.
  08/02/2012  MDH 
*******************************************************************************/
--
--
/*******************************************************************************
   The GEMS Emplyee I.D. must be on the EMP_Data file which is a view of
       the GEMS database.  
*******************************************************************************/	  
--
BEGIN

   IF inSALES_REP_ROWTYPE.gems_employee_id  IS NOT NULL  THEN
      SELECT * INTO  v_emp_data_rowtype
        FROM  EMP_DATA
        WHERE EMP_DATA.employee_number =  inSALES_REP_ROWTYPE.gems_employee_id;
   END IF ;
   
    IF v_emp_data_rowtype.emp_payroll_status NOT IN ('A')  THEN 
            RAISE emp_data_not_act_exp;
--  See Third Error C-1
      END IF;
   
   EXCEPTION
     WHEN no_data_found THEN
         RAISE no_emp_data_exp;
--  See Third Error C-2
END;
--     
--          
/*******************************************************************************
  3A.)  Effective_Date (VR): 
       There must be a valid date in this field (column). 
*******************************************************************************/	 
--
/*******************************************************************************
       test for valid date
*******************************************************************************/	
--
BEGIN

      v_date  :=  inSALES_REP_ROWTYPE.effective_date;
-- Yes, it was a valid date (no EXCEPTION)

EXCEPTION
  WHEN others THEN
  RAISE invalid_eff_date_exp;
-- No,  not a valid date
--  See Fourth Error D
END;
--
--
/*******************************************************************************
     
 3B.)  Expiration_Date (VR/BR): 
       When entered, the expiration date cannot be less than the effective date. 
          the COMMON_PKG rules do not apply here since the SALES_REP table is
          not a history record. 
 
*******************************************************************************/	 
--
/*******************************************************************************
       test for valid date
*******************************************************************************/	 
BEGIN

      v_date  :=  inSALES_REP_ROWTYPE.expiration_date;
-- Yes, it was a valid date (no EXCEPTION)

EXCEPTION
  WHEN others THEN
  RAISE invalid_exp_date_exp;
-- No,  not a valid date
--  See Fifth Error E-1
END;
--
--
/*******************************************************************************
       expiration_date can not be less than effective_date
*******************************************************************************/	 
--        
        IF  inSALES_REP_ROWTYPE.expiration_date  IS NOT  NULL  THEN
            IF  inSALES_REP_ROWTYPE.expiration_date  <  inSALES_REP_ROWTYPE.effective_date  THEN
                RAISE expdt_must_be_gt_effdt_exp;
            END IF;    
--  See Fifth Error E-2
        END IF;
--
--
/*******************************************************************************
  4.)  Employee_Code: 
       This field (column) must be on the CODE_DETAIL table.     
*******************************************************************************/	 
BEGIN
      IF inSALES_REP_ROWTYPE.employee_code  IS NOT NULL  THEN
          IF NOT COMMON_TOOLS.code_detail_valid('EMPLOYEE_CODE',
                 inSALES_REP_ROWTYPE.employee_code)  THEN
                   RAISE invalid_employee_code_exp; 
          END IF;
      END IF;
--        
--  See Sixth Error F
--
END;
--
--
/*******************************************************************************
     
 5.)  Employee_Code (2-VR/BR): 
       The following rules apply: 
          Employee_Code is "13" - Employee must be on disability
          Employee_Code is "15" - Employee should be terminated and Exp_date is not null.
          Employee_Code is "10" - This is a new employee.
          Employee_Code is "17" - This is a Retired employee.
          EMployee_Code is "18" - This is a Deceased employee.
*******************************************************************************/	 

BEGIN
       IF inSALES_REP_ROWTYPE.employee_code  IS NOT NULL  THEN
          IF (inSALES_REP_ROWTYPE.employee_code IN ('10')   AND
               v_emp_data_rowtype.emp_payroll_status NOT IN ('A'))  THEN
                 RAISE invalid_emp_code_act_exp;
--  See Seventh Error G-1
          END IF;
          IF (inSALES_REP_ROWTYPE.employee_code IN ('13')   AND
               v_emp_data_rowtype.emp_payroll_status NOT IN ('L'))  THEN
                 RAISE invalid_emp_code_dis_exp;
--  See Seventh Error G-2                 
          END IF;
          IF (inSALES_REP_ROWTYPE.employee_code IN ('15')   AND
               v_emp_data_rowtype.emp_payroll_status NOT IN ('T','D'))  THEN
                 RAISE invalid_emp_code_ter_exp;
--  See Seventh Error G-3                 
          END IF;
          IF (inSALES_REP_ROWTYPE.employee_code IN ('18')   AND
               v_emp_data_rowtype.emp_payroll_status NOT IN ('T','D'))  THEN
                 RAISE invalid_emp_code_dec_exp;
--  See Seventh Error G-4                 
          END IF;
          IF (inSALES_REP_ROWTYPE.employee_code IN ('17')   AND
               v_emp_data_rowtype.emp_payroll_status NOT IN ('T','D','R'))  THEN
                 RAISE invalid_emp_code_ret_exp;
--  See Seventh Error G-5                 
          END IF;          
       ELSE
       RAISE invalid_emp_code_non_exp;
--  See Seventh Error G-6        
       END IF;
--   
END ;
--
--
/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
 EXCEPTION

-- First Error A                   
               WHEN gems_emp_id_non_num_exp THEN
                    v_code := errnums.en_no_cost_center_err; 
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.gems_emp_id_non_num_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || '" is not numeric "' );
-- Second Error B
               WHEN gems_emp_id_exp  THEN
                    v_code := errnums.en_ccntr_close_err; 
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.gems_emp_id_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" cannot be zero "' );
-- Third Error C-1    
               WHEN emp_data_not_act_exp THEN
                    v_code := errnums.en_no_emp_data_err;   
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.sls_emp_data_not_act_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" does not have an active status on GEMS "' );                   
-- Third Error C-2    
               WHEN no_emp_data_exp THEN
                    v_code := errnums.en_no_emp_data_err;     
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.no_emp_data_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" employee I.D. not found in GEMS File "' );
-- Fourth Error D    
               WHEN invalid_eff_date_exp THEN
                    v_code := errnums.en_invalid_eff_date_err; 
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_eff_date_exp '  ,
                    'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id ||  
                   'Effective Date entered "' || inSALES_REP_ROWTYPE.effective_date || '" is not a valid date');
-- Fifth Error E-1    
               WHEN invalid_exp_date_exp THEN
                    v_code := errnums.en_invalid_exp_date_err; 
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_exp_date_exp '  ,
                    'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id ||                     
                   'Expiration Date entered "' || inSALES_REP_ROWTYPE.expiration_date || '" is not a valid date');
-- Fifth Error E-2    
               WHEN expdt_must_be_gt_effdt_exp THEN  
                    v_code := errnums.en_expdt_must_be_gt_effdt_err;
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.expdt_must_be_gt_effdt_exp ' ,
                    'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id ||                      
                   '" Expiration Date entered "' || inSALES_REP_ROWTYPE.expiration_date || 
                   '" must be Greater Than the Effective Date entered "' || inSALES_REP_ROWTYPE.effective_date || '"');
-- Sixth Error F    
               WHEN invalid_employee_code_exp THEN
                    v_code := errnums.en_invalid_code_detail_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" Employee Code "' || inSALES_REP_ROWTYPE.employee_code || '" is not found in Code Table' );
-- Seventh Error G-1    
               WHEN invalid_emp_code_act_exp THEN
                    v_code := errnums.en_invalid_emp_code_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_act_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" is not Active status (GEMS) based on employee code entered' );                   
-- Seventh Error G-2    
               WHEN invalid_emp_code_dis_exp THEN
                    v_code := errnums.en_invalid_emp_code_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_dis_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" is not Disability status (GEMS) based on employee code entered' );
-- Seventh Error G-3    
               WHEN invalid_emp_code_ter_exp THEN
                    v_code := errnums.en_invalid_emp_code_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_ter_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" is not Terminated status (GEMS) based on employee code entered ');
-- Seventh Error G-4   
               WHEN invalid_emp_code_dec_exp THEN
                    v_code := errnums.en_invalid_emp_code_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_dec_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" is not Terminated (Deceased) status (GEMS) based on employee code entered ');    
-- Seventh Error G-5   
               WHEN invalid_emp_code_ret_exp THEN
                    v_code := errnums.en_invalid_emp_code_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_ret_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" is not Retired status (GEMS) based on employee code entered ');                       
-- Seventh Error G-6    
               WHEN invalid_emp_code_non_exp THEN
                    v_code := errnums.en_invalid_emp_code_err;    
                    errpkg.raise_err(v_code, 'SALES_REP_BR_SP.invalid_emp_code_non_exp '  ,
                   'Sales Rep. "' || inSALES_REP_ROWTYPE.gems_employee_id || 
                   '" is not a valid employee status code ');                 
-- Others
               WHEN OTHERS THEN
                    v_code := SQLCODE;
                    v_errm := substr(SQLERRM,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'TERRITORY_BR_SP Error ');   
 

END SALES_REP_BR_SP;

/*******************************************************************************
--PROCEDURE STATUS_BR_SP (
********************************************************************************
	 STATUS_BR_SP

	There were no Business Rules necessary for the STATUS Table other than
  Effective and Expiration Dates. 
	TRD  Section: 3.3.15 

created : MDH 9/24/2012
*******************************************************************************/	

PROCEDURE STORE_BR_SP (
/*******************************************************************************
	 STORE_BR_SP

	This procedure is intended enforce the Business Rules
	for verifying specific columns on the STORE Table
	TRD  Section: 3.3.19 

created : BLR 7/26/2012
revised : BLR  4/17/2013  CCNA-349 Inventory_indicator is an "N", ignore the 
                          check of the inventory_start_date. Pat states when a
                          new cost center is added, the inventory_indicator is
                          defaulted automatically to 'n' and the date is null.
                          The error check was removed from program.
        : SXH487 11/01/2016 moved the checks for STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER from COST_CENTER_BR_SP
          and added another check to see if the store is a selling store
*******************************************************************************/

  inStore_rowtype                  IN  STORE%ROWTYPE
 ,inCC_rowtype                     IN  COST_CENTER%ROWTYPE)
 
                IS
 inactive_cost_center_err      EXCEPTION;
 invalid_store_category_err    EXCEPTION;
 invalid_category_err          EXCEPTION;
 set_perp_inv_dt_err           EXCEPTION;
 invalid_inventory_id_err      EXCEPTION;
 invalid_code_detail_err       EXCEPTION;
 invalid_class_cd_err          EXCEPTION;
 invalid_rurl_met_zone_err     EXCEPTION;
 invalid_sell_store_flag_err   EXCEPTION;
 cn_ac_prmry_stndrd_cc_ind     EXCEPTION;
 non_cn_ac_prmry_std_cc_ind    EXCEPTION;

   
 v_curr_date           date := sysdate;
 v_code number;
 v_count number;
 v_errm varchar(500);
 
/*
   3.3.19   Store Category rule is checked when new cost centers are added; 
             then the Store record is only added if the category of the Cost_Center table is "S":            
*/

 BEGIN
/*
   3.3.19.1a  A Cost Center row is selected to validate category code is an "S"; otherwise Store table cannot be added
*/	     


    IF  inCC_rowtype.cost_center_code <> inStore_rowtype.cost_center_code THEN
	            RAISE inactive_cost_center_err; 
      END IF;    
    
	
/*
   3.3.19.1b  For this STORE table validation check, the category should be "S"     
*/		
      IF  NOT  common_tools.code_detail_valid('CATEGORY', inStore_rowtype.CATEGORY) THEN  -- value not found in table 
              RAISE invalid_store_category_err; 
      END IF; 


		  IF (inCC_rowtype.CATEGORY <> 'S' )   THEN
         RAISE invalid_category_err;
      END IF;	
    
/* 3.3.19.2a  Check the "INVENTORY_INDICATOR" column validation is set to 'N';
	     If not set, this date will be "NULL".
*/  

       IF  NOT  common_tools.code_detail_valid('INVENTORY_INDICATOR',inStore_rowtype.inventory_indicator) THEN 
            RAISE invalid_inventory_id_err; 
       END IF; 
       
--   BLR  4/17/2013  CCNA-349 Inventory_indicator is an "N", ignore checking inventory start date;
--                   because when indicator is an "N" then inventory strat date will always be NULL.
--                   removed code check for error mentioned above.        
      
/* 3.3.19.2b  Check the "INVENTORY_INDICATOR" column is set to 'Y';
	     If this field is not populated, the current system date will be used.
*/            
       IF inStore_rowtype.inventory_indicator = 'Y'  
            AND inStore_rowtype.perp_inv_start_date IS NULL THEN  
                RAISE set_perp_inv_dt_err;
      END IF;
        
	/* 3.3.19.2a  Check the "CLASSIFICATION_CODE" column  - only verify if not null mdh 10/03/2012 per Pat Malloy;
  */  
       IF (inSTORE_rowtype.classification_code IS NOT NULL) THEN
         IF  NOT  common_tools.code_detail_valid('CLASSIFICATION_CODE',  inStore_rowtype.classification_code) THEN  -- value not found in table 
              RAISE invalid_class_cd_err; 
         END IF; 
        END IF;
         
/* 3.3.19.2a  Check the "RURAL_METRO_ZONE_CODE" column MUST BE 1,2, OR 3;	    
*/  
       IF (inSTORE_rowtype.rural_metro_zone_code IS NOT NULL) THEN -- changed by TAL946
         IF  NOT  common_tools.code_detail_valid('RURAL_METRO_ZONE_CODE',  inStore_rowtype.rural_metro_zone_code) THEN  -- value not found in table 
              RAISE invalid_rurl_met_zone_err; 
         END IF; 
        END IF;

/* 3.3.19.2a  Check the "SELLING_STORE_FLAG" column MUST BE "Y" OR "N";
*/  
       IF (inSTORE_rowtype.selling_store_flag IS NOT NULL) THEN --  changed by TAL946
        IF  NOT  common_tools.code_detail_valid('SELLING_STORE_FLAG',  inStore_rowtype.selling_store_flag) THEN  -- value not found in table 
              RAISE invalid_sell_store_flag_err; 
         END IF; 
        END IF;

    IF NVL(inSTORE_rowtype.SELLING_STORE_FLAG, 'N') = 'Y' THEN      
       --non CN/AC statement types can not have primary/standard cost center indicator as "08"
       IF NVL(inCC_rowtype.statement_type, 'XX') NOT IN ('CN', 'AC')  AND
           (NVL(inCC_rowtype.std_cost_identifier, 'XX') = '08'
            OR
            NVL(inCC_rowtype.prim_cost_identifier, 'XX') = '08') THEN
           RAISE non_cn_ac_prmry_std_cc_ind;
       END IF;
  
       --CN/AC statement types can have primary/standard cost center indicator as "08" alone
       IF NVL(inCC_rowtype.statement_type, 'XX') IN ('CN', 'AC')  AND
           (NVL(inCC_rowtype.std_cost_identifier, 'XX') <> '08'
            OR
            NVL(inCC_rowtype.prim_cost_identifier, 'XX') <> '08') THEN
           RAISE cn_ac_prmry_stndrd_cc_ind;
       END IF;
    END IF;

    EXCEPTION
              		    
      WHEN inactive_cost_center_err THEN  
        v_code := errnums.en_inactive_cost_center_err;
        errpkg.raise_err(v_code, 'store_br_sp.inactive_cost_center_err ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Store Cost Center "' ||  inStore_rowtype.cost_center_code || '", ' ||
        'For CC Cost Center "' || inCC_rowtype.cost_center_code || '". ' ||
        'Cost Center codes are invalid; do not match Cost Center and Store tables'); 
     
      
      WHEN invalid_category_err THEN  
        v_code := errnums.en_invalid_category_err;
        errpkg.raise_err(v_code, 'store_br_sp_BR_SP.invalid_category_err ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'For Store Cost Center "' ||  inStore_rowtype.cost_center_code || '", ' ||
        'CC Category_Code is "' || inCC_rowtype.CATEGORY || '". ' ||
        'When storing category for Store table; category must equal S on Cost Center Table '); 
     
     WHEN invalid_store_category_err THEN                        
        v_code := errnums.en_invalid_code_detail_err;
        errpkg.raise_err(v_code, 'store_br_sp_BR_SP.invalid_store_category_err ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'Store Cost Center is "' ||  inStore_rowtype.cost_center_code || '", ' ||
        'Category_Code is "' || inStore_rowtype.CATEGORY || '". ' ||
        'The STORE Table category column is invalid;  not found on Code Detail  '); 
     		
     		
     WHEN set_perp_inv_dt_err THEN  
          v_code := errnums.en_set_perp_inv_dt_err;
          errpkg.raise_err(v_code, 'store_br_sp.set_perp_inv_dt_err ',
        'CCN_BUSINESS_RULES_PKG ' || 'Perp_inv_start_date must be entered when inventory_indicator = <Y>'); 
	        
      WHEN invalid_class_cd_err THEN  
         v_code := errnums.en_invalid_code_detail_err;
          errpkg.raise_err(v_code, 'store_br_sp.invalid_class_cd_err ' ,
        'CCN_BUSINESS_RULES_PKG ' || 
        'Entered Classification_Code was "' || inStore_rowtype.classification_code || '". ' || 
        'For a Store classification must be "01-27". '); 

      WHEN invalid_rurl_met_zone_err  THEN  
         v_code := errnums.en_invalid_rurl_met_zone_err;
          errpkg.raise_err(v_code, 'store_br_sp.invalid_rurl_met_zone_err  ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'Store Cost Center is "' || inStore_rowtype.cost_center_code || '", ' ||
        'Rural Metro Code is "' || inStore_rowtype.rural_metro_zone_code || '". ' ||
        'For a Store table Rural Metro Code must be 1,2,3 or Null. '); 
              
      WHEN  invalid_sell_store_flag_err     THEN  
         v_code := errnums.en_invalid_code_detail_err;
         errpkg.raise_err(v_code, 'store_br_sp.invalid_sell_store_flag_err  ',
        'CCN_BUSINESS_RULES_PKG ' || 
        'Store Cost Center is "' || inStore_rowtype.cost_center_code || '", ' ||
        'Selling_store_flag is "' || inStore_rowtype.selling_store_flag || '". ' ||
        'For a Store table the selling_store_flag  must be "Y" or "N" '); 
        
     WHEN  invalid_inventory_id_err     THEN
          v_code := errnums.en_invalid_code_detail_err;
          errpkg.raise_err(v_code, 'store_br_sp.invalid_inventory_id_err  ',
          'CCN_BUSINESS_RULES_PKG ' || 
          'For Cost Center "' || inStore_rowtype.cost_center_code || '", ' ||
          'Inventory_indicator is "' || inStore_rowtype.inventory_indicator || '". ' ||
          'For a Store table the inventory_indicator must be "Y" or "N" '); 
     WHEN cn_ac_prmry_stndrd_cc_ind THEN
             errpkg.raise_err(errnums.en_cn_ac_prmry_stndrd_cc_ind,
                              'store_br_sp.cn_ac_prmry_stndrd_cc_ind ' ,
                              'Standard/Primary Cost Center Indicator can only be "08" for CN/AC');
     WHEN non_cn_ac_prmry_std_cc_ind THEN
            errpkg.raise_err(errnums.en_non_cn_ac_prmry_std_cc_ind,
                             'store_br_sp.non_cn_ac_prmry_std_cc_ind ' ,
                              'Standard/Primary Cost Center Indicator can not be "08" for non CN/AC');

     WHEN OTHERS THEN
      v_code := SQLCODE;
	    v_errm := substr(SQLERRM,1, 500);
      errpkg.raise_err(v_code, v_errm ||
        'CCN_BUSINESS_RULES_PKG '  || 'No errors found');
     
 END  STORE_BR_SP;
 
 PROCEDURE TERMINAL_BR_SP ( 
/*****************************************************************************
	TERMINAL_BR_SP

	This procedure is intended to enforce the Business Rules
	for terminal validation edits and verifying the following rules:
  
  First, there must be a POLLING Table row for the Cost Center 
       to which a terminal is being added.
  Second, each Terminal Row added is checked against all other Terminal Rows 
       for that Cost Center.  
       There cannot be any duplication of Terminal_Number for any Terminals for a Cost Center.  
       This means that no other terminals in a set can have the same terminal number 
       with a zero Expiration_Date.
       
  In Addition:

  1.)  Terminal_Number (5-BR): 
       This field cannot be spaces and must be numeric.  
       This Terminal number cannot have a duplicate for this Cost Center 
       (based on Effective and Expiration dates).  
       All Terminal Rows must be checked for duplicate Terminal Numbers! 
  2.)  POS_Last_Tran_Date: 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500).
  3.)  POS_Last_Tran_Number (5): 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500).
  4.)  POS_Prog_Ver_Nbr: 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500). 
  5.)  POS_Prog_Ver_Eff_Date: 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500). 
  6.)  Effective_Date (VR): 
       There must be a valid date in this field (column). 
  7.)  Expiration_Date (VR/BR): 
       There must be a valid date in this field (column). 
       The Expiration Date cannot be less than the Effective_Date.
       The Expiration Date, when entered is the Effective_Date of the new row minus one Day!  (COMMON_PKG)
       A Terminal can be "Un-Expired" !  
       In This Case, again, all Terminal Â¿rowsÂ¿ must be checked for duplicate Terminal Numbers. 
       This is based on effective dates and expiration dates . 

created : TAL 07/27/2012
Modified: 06/02/2015 jxc517 CCN Project....
          Code to handle first time duplicate terminal add's is added
        : 03/02/2016 nxk927 CCN Project....
          added new error if the PCI_TERMINAL_ID IS NULL.   
        : 03/15/2016 nxk927 CCN Project....
          error message updated
        : 03/23/2016 jxc517 CCN Project....
          Modified the query to raise "actv_dup_terr_exists_err" error not to include terminated terminal 
          for that cost center
        : 05/26/2016 nxk927 CCN Project....
          Reverted the PCI changes to move the ADDRESS_BRB changes ahead.
        : 01/25/2017 mxk766 CCN Project....
          Added code to capture the number of terminals in the UI.
******************************************************************************/	
  
    IN_TERMINAL_ROWTYPE    IN   TERMINAL%ROWTYPE,
     IN_POLLING_ROWTYPE     IN   POLLING%ROWTYPE
    ) 
        IS 

 no_cost_center_exp                EXCEPTION;
 invalid_polling_exp               EXCEPTION;
 duplicate_terminal_exp            EXCEPTION;
 invalid_terminal_nbr_exp          EXCEPTION;
 invalid_eff_date_exp              EXCEPTION;
 invalid_exp_date_exp              EXCEPTION;
 expdt_must_be_gt_effdt_exp        EXCEPTION;
 no_terminal_cctr_exp              EXCEPTION;
 actv_dup_terr_exists_err          EXCEPTION;
	en_invalid_terminal_counts_exp    EXCEPTION;
 
 v_cost_center_rowtype             cost_center%ROWTYPE;
 v_polling_rowtype                 polling%ROWTYPE;
 v_terminal_rowtype                terminal%ROWTYPE;
 v_duplicate_rowtype               terminal%ROWTYPE;
  
 v_curr_date date := sysdate;
 v_code   number;
 v_errm   varchar(500);
 v_count  number;
 v_terminal  number;
 v_date   date;
 
 
  
BEGIN

/*******************************************************************************
    Check number of terminals entered. If it is > 15 then raise an error
*******************************************************************************/

BEGIN
IF CCN_BUSINESS_RULES_PKG.G_TERMINAL_COUNTER>15 THEN
CCN_BUSINESS_RULES_PKG.G_TERMINAL_COUNTER :=0;
RAISE en_invalid_terminal_counts_exp;
END IF;
END;

/*******************************************************************************
    First, there must be a POLLING Table row for the Cost Center 
           to which a terminal is being added.
*******************************************************************************/

/*******************************************************************************
	  get COST_CENTER for the specified POLLING/TERMINAL
*******************************************************************************/	  

BEGIN
           SELECT * INTO  v_cost_center_rowtype
            FROM  cost_center
            WHERE cost_center.cost_center_code  =  in_terminal_rowtype.cost_center_code ;
	 
EXCEPTION
  WHEN no_data_found THEN
     RAISE no_cost_center_exp;
--  See First Error A
END;
        
/*******************************************************************************
	  get POLLING for the specified Cost Center
*******************************************************************************/	  

BEGIN

           SELECT * INTO  v_polling_rowtype
            FROM  POLLING
            WHERE polling.cost_center_code     =  in_terminal_rowtype.cost_center_CODE
             AND  POLLING.POLLING_STATUS_CODE  =  IN_TERMINAL_ROWTYPE.POLLING_STATUS_CODE ;

EXCEPTION

WHEN no_data_found THEN
     IF in_polling_rowtype.cost_center_code IS NOT NULL THEN
        V_POLLING_ROWTYPE := IN_POLLING_ROWTYPE;
     ELSE
        RAISE INVALID_POLLING_EXP;
     END IF;
 --  See First Error B
END;
        
/*******************************************************************************
    Second, each Terminal Row added is checked against all other Terminal Rows 
            for that Cost Center.  
            There cannot be any duplication of Terminal_Number for any Terminals for a Cost Center.  
            This means that no other terminals in a set can have the same terminal number 
            with a zero Expiration_Date.
*******************************************************************************/

/*******************************************************************************
	  check for duplicate Terminal Number for this POLLING
*******************************************************************************/	

--begin
--  commented out mdh 10/03/2012 database will error on duplicates based on key.
--      select  count(1)  into  v_count
--       from  terminal
--       where terminal.cost_center_code     =  in_terminal_rowtype.cost_center_code
--        and  terminal.terminal_number      =  in_terminal_rowtype.terminal_number
--        and  terminal.expiration_date     is  null ;
--        
--      if v_count > 0 then
--         raise duplicate_terminal_exp;
--      end if;    
--  See Second Error
--end;
        
/*******************************************************************************
  1.)  Terminal_Number (5-BR): 
       This field cannot be spaces and must be numeric.  
       This Terminal number cannot have a duplicate for this Cost Center 
       (based on Effective and Expiration dates).  
       All Terminal Rows must be checked for duplicate Terminal Numbers! 
*******************************************************************************/	  

--    terminal number can not be null 
      IF  in_terminal_rowtype.terminal_number  IS  NULL  
--    terminal number can not be just one or more spaces
      OR  REGEXP_LIKE(in_terminal_rowtype.terminal_number, '^ *$')
--    terminal number can not be all zeroes
      OR  in_terminal_rowtype.terminal_number  =   '00000'
--    terminal number must be 5 digits numeric
      OR  NOT REGEXP_LIKE(in_terminal_rowtype.terminal_number, '^\d{5}$')  THEN
          RAISE invalid_terminal_nbr_exp; 
-- See Error #01a. 
      END IF;
           
/*******************************************************************************
  2.)  POS_Last_Tran_Date: 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500).
*******************************************************************************/	 
           
/*******************************************************************************
  3.)  POS_Last_Tran_Number (5): 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500).
  
*******************************************************************************/	 
           
/*******************************************************************************
  4.)  POS_Prog_Ver_Nbr: 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500). 
*******************************************************************************/	 
           
/*******************************************************************************
  5.)  POS_Prog_Ver_Eff_Date: 
       There are no edits for this field.  
       This field can be changed, but is usually updated from Polling (CCN00500). 
*******************************************************************************/	 
           
/*******************************************************************************
  6.)  Effective_Date (VR): 
       There must be a valid date in this field (column). 
*******************************************************************************/	 

/*******************************************************************************
       test for valid date
*******************************************************************************/	 
BEGIN

      v_date  :=  in_terminal_rowtype.effective_date;
-- Yes, it was a valid date (no EXCEPTION)

EXCEPTION
  WHEN others THEN
  RAISE invalid_eff_date_exp;
-- No,  not a valid date
-- See Error #06
END;

/*******************************************************************************
  7.)  Expiration_Date (VR/BR): 
       A. There must be a valid date in this field (column). 
       B. The Expiration Date cannot be less than the Effective_Date.
       C. The Expiration Date, when entered is the Effective_Date of the new row minus one Day!  (COMMON_PKG)
       D. The Terminal can be "Un-Expired" !  
          In This Case, again, all Terminal "rows" must be checked for duplicate Terminal Numbers. 
          This is based on effective dates and expiration dates . 
*******************************************************************************/	

/*******************************************************************************
       test for valid date
*******************************************************************************/	 
BEGIN

      v_date  :=  in_terminal_rowtype.expiration_date;
-- Yes, it was a valid date (no EXCEPTION)

EXCEPTION
  WHEN others THEN
  RAISE invalid_exp_date_exp;
-- No,  not a valid date
-- See Error #07A
END;

/*******************************************************************************
       expiration_date can not be less than effective_date
*******************************************************************************/	 
        
        IF  in_terminal_rowtype.expiration_date  IS NOT  NULL  THEN
            IF  in_terminal_rowtype.expiration_date  <  in_terminal_rowtype.effective_date  THEN
                RAISE expdt_must_be_gt_effdt_exp;
            END IF;    
-- See Error #07B
        END IF;

/*******************************************************************************
       check for duplicate row when "un-expiring" a Terminal
*******************************************************************************/	 

-- Managed by "Second Edit" above

/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
    --Modified below code to handle first time duplicate terminal add's 06/02/2015
    IF in_terminal_rowtype.EXPIRATION_DATE IS NULL THEN
        SELECT COUNT(*)
          INTO V_COUNT
          FROM TERMINAL
         WHERE TERMINAL_NUMBER = in_terminal_rowtype.TERMINAL_NUMBER
           AND EXPIRATION_DATE IS NULL
           AND COST_CENTER_CODE <> in_terminal_rowtype.COST_CENTER_CODE;
        IF V_COUNT > 0 THEN
            RAISE actv_dup_terr_exists_err;
        END IF;
    END IF;

   --checking if PCI_terminal_id  is null. 
   --if null raise warning
   IF in_terminal_rowtype.PCI_TERMINAL_ID is null then
      ERRPKG.STORE_WARNINGS(errnums.en_pci_terminal_id_err,'PCI Terminal ID is null');
   END IF;

   EXCEPTION

-- First Error A                   
               WHEN no_cost_center_exp THEN
                    v_code := errnums.en_no_cost_center_err; 
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.no_cost_center '  ,
                   'Cost_Center "' || in_terminal_rowtype.cost_center_code || '" not found ' );
	
-- First Error B
               WHEN invalid_polling_exp  THEN
                    v_code := errnums.en_invalid_polling_err; 
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.invalid_polling_exp '  ,
                   'Polling not found for Cost_Center "' || in_terminal_rowtype.cost_center_code || 
                   '" Polling_Status "' || in_terminal_rowtype.polling_status_code || '"' );
               
-- Second Error    
               WHEN duplicate_terminal_exp THEN
                    v_code := errnums.en_duplicate_terminal_err; 
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.duplicate_terminal_exp '  ,
                   'Duplicate Terminal specified for Cost Center "' || in_terminal_rowtype.cost_center_code || 
                   '" Terminal "' || in_terminal_rowtype.terminal_number || '"');

-- Error #01A                   
               WHEN invalid_terminal_nbr_exp THEN
                    v_code := errnums.en_invalid_terminal_nbr_err; 
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.invalid_terminal_nbr_exp '  ,
                   'Terminal Number was entered as "' || in_terminal_rowtype.terminal_number || '", ' ||
                   'Terminal Number must be 5 digit numeric ' ||
                   'and can not equal "spaces" or all "zeroes"' );
                   
-- Error #06
               WHEN invalid_eff_date_exp THEN
                    v_code := errnums.en_invalid_eff_date_err;
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.invalid_eff_date_exp '  ,
                   'Effective Date entered "' || in_terminal_rowtype.effective_date || '" is not a valid date');
                   
-- Error #07A
               WHEN invalid_exp_date_exp THEN
                    v_code := errnums.en_invalid_exp_date_err;
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.invalid_exp_date_exp '  ,
                   'Expiration Date entered "' || in_terminal_rowtype.expiration_date || '" is not a valid date');
 
 -- Error #07B
               WHEN expdt_must_be_gt_effdt_exp THEN  
                    v_code := errnums.en_expdt_must_be_gt_effdt_err;
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.expdt_must_be_gt_effdt_exp ' ,
                   'Expiration Date entered "' || in_terminal_rowtype.expiration_date || 
                   '" must be Greater Than the Effective Date entered "' || in_terminal_rowtype.effective_date || '"');
  
               WHEN actv_dup_terr_exists_err THEN  
                    v_code := errnums.en_actv_dup_terr_exists_err;
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.actv_dup_terr_exists_err ' ,
                   'Terminal number entered "'||in_terminal_rowtype.terminal_number||'" is used for some other active terminal cost center record');

               WHEN en_invalid_terminal_counts_exp THEN
                    v_code := errnums.en_invalid_terminal_counts_exp;
                    errpkg.raise_err(v_code, 'TERMINAL_VALIDATION_EDITS_SP.en_invalid_terminal_counts_exp ',
                   'Invalid number of terminals entered. More than 15 terminals are not allowed');
  -- Others
               WHEN OTHERS THEN
                    v_code := SQLCODE;
                    v_errm := substr(SQLERRM,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'TERMINAL_VALIDATION_EDITS_SP Error ');   
 

END TERMINAL_BR_SP;
 
PROCEDURE TERRITORY_BR_SP ( 
/*****************************************************************************
	TERRITORY_BR_SP

	This procedure is intended to enforce the Business Rules
	for Territory validation edits and verifying the following rules:
  
  First, there must be a COST_CENTER Table row for the Cost Center 
       to which a Territory is being added and/or changed.
  Second, the Teritory can only be added if the Category on the COST_CENTER 
       table is a "T". 
  Third, the Territory_Sales_Mgr_Code must be valid in the TERRITORY_SALES_MBR
       table.
              
  In Addition:

  1.)  Territory_Sales_Mgr_Code (7-BR): 
       This field (column) cannot be spaces as it is the primary key to the 
          TERRITORY_SALES_MGR Table.  
       For new Territories, the Territory_Sales_MGR_Code is defaulted to 
          "NULL" so that the territory can be addded into the CCN Database.
       This field is made up of a 6 digit D-A-D and a 1 digit alpha character
       This 6 digit D-A-D is defined as follows"
             2 Digit Division Number
             2 Digit Area Number
             2 Digit District Number
 2.)  Category: 
       For the Territory table this value must be a "T".  
 3.)  Lease_Car_Indicator: 
       This field (column) must be on the CODE_DETAIL table.  
 4.)  Territory_Type_Busn_Code: 
       This field (column) must be on the CODE_DETAIL table.       
 5.)  Home_Store (6-BR): 
       Since this is a Territory, the Home_Store must have a value refering to  
       a "Store" Cost Center.  This field can only be null if the Territory is
       "closed" (i.e. Close_Date is not null).
       Please refer to Business Rule 3.3.1 
 
created : MDH 07/31/2012
******************************************************************************/	
  
   inCOST_CENTER_ROWTYPE  IN  COST_CENTER%ROWTYPE
  ,inTERRITORY_ROWTYPE    IN  TERRITORY%ROWTYPE )

        IS 
        
-- Specify in_xxxxx_rowttype to get all the fields.

 no_cost_center_exp                EXCEPTION;
 ccntr_closed_exp                  EXCEPTION;
 invalid_category_exp              EXCEPTION;
 invalid_category2_exp             EXCEPTION;
 invalid_lease_car_exp             EXCEPTION;
 invalid_terr_type_busn_exp        EXCEPTION;
-- invalid_terr_sls_mgr_exp    EXCEPTION;   PSG CCN Quality Control CCNQC-23 TAL
 sls_mgr_not_active_exp            EXCEPTION;
 invalid_home_store_desig1_exp     EXCEPTION;
 INVALID_HOME_STORE_DESIG2_EXP     EXCEPTION;
 invalid_terr_sls_mgr_code_EXP     EXCEPTION;
    
 v_curr_date date := sysdate;
 v_code   number;
 v_errm   varchar(500);
 v_count  number;
 v_terminal  number;
 v_date   date;
 
 
  
BEGIN

/*******************************************************************************
    First, there must be a COST_CENTER Table row for the Cost Center 
           to which a Territory is being added.
*******************************************************************************/

/*******************************************************************************
	  get COST_CENTER for the specified Territory
*******************************************************************************/	  

BEGIN

       IF inCOST_CENTER_ROWTYPE.cost_center_code  IS NULL   THEN 
          RAISE no_cost_center_exp;
--  See First Error A
       END IF;

/******************************************************************************
    The Teritory can only be added if the Cost_Center is not closed! 
*******************************************************************************/  	
       IF inCOST_CENTER_ROWTYPE.close_date IS NOT NULL  THEN 
            RAISE ccntr_closed_exp;
       END IF; 
--  See Second Error B
/******************************************************************************
Second, the Teritory can only be added if the Category on the COST_CENTER 
       table is a "T".
*******************************************************************************/   
       IF inTERRITORY_ROWTYPE.CATEGORY IS NOT NULL THEN
          IF NOT COMMON_TOOLS.code_detail_valid('CATEGORY',
                 inTERRITORY_ROWTYPE.CATEGORY)  THEN
                   RAISE invalid_category_exp; 
          END IF;
       END IF;
--        
       IF inCOST_CENTER_ROWTYPE.CATEGORY <> inTERRITORY_ROWTYPE.CATEGORY  OR 
          inCOST_CENTER_ROWTYPE.CATEGORY NOT IN ('T') OR 
          inTERRITORY_ROWTYPE.CATEGORY NOT IN ('T')  THEN 
            RAISE invalid_category2_exp;
--  See Third Error C-2
      END IF;
   
END;      
--
/*******************************************************************************
    Third, the Territory_Sales_Mgr_Code must be valid in the TERRITORY_SALES_MBR
      table.
*******************************************************************************/	  

/* *** PSG CCN Quality Control CCNQC-23 TAL
   EXCEPTION
     when no_data_found then
         raise invalid_terr_sls_mgr_exp;
--  See Fourth Error D-2
*** */
--END;
--
/*******************************************************************************
     3.)  Lease_Car_Indicator: (1-BR) 
       This field (column) must be on the CODE_DETAIL table.   
*******************************************************************************/	 
BEGIN
       IF inTERRITORY_ROWTYPE.lease_car_indicator IS NOT NULL THEN
           IF NOT COMMON_TOOLS.code_detail_valid('LEASE_CAR_INDICATOR',
                  inTERRITORY_ROWTYPE.lease_car_indicator)  THEN
                   RAISE invalid_lease_car_exp; 
           END IF;
       END IF;
--        
--  See Fifth Error E
--   
END ;
--
/*******************************************************************************
     4.)  Territory_Type_Busn_Code: 
       This field (column) must be on the CODE_DETAIL table.     
*******************************************************************************/	 
BEGIN
       IF inTERRITORY_ROWTYPE.territory_type_busn_code IS NOT NULL THEN
          IF NOT COMMON_TOOLS.code_detail_valid('TERRITORY_TYPE_BUSN_CODE',
                 inTERRITORY_ROWTYPE.territory_type_busn_code)  THEN
                   RAISE invalid_terr_type_busn_exp; 
           END IF;
       END IF;    
--        
--  See Sixth Error F
--
END ;
--
/*******************************************************************************
  5.)  Home_Store (6-BR): 
       Since this is a Territory, the Home_Store must have a value refering to  
       a "Store" Cost Center.  This field can only be null if the Territory is
       "closed" (i.e. Close_Date is not null).
       Please refer to Business Rule 3.3.1 
 
*******************************************************************************/	 
BEGIN
       IF (inTERRITORY_ROWTYPE.home_store  IS NULL   AND
           inCOST_CENTER_ROWTYPE.close_date IS NULL)  THEN 
            RAISE invalid_home_store_desig1_exp;
--  See Seventh Error G-1            
       END IF;
       
       IF (inTERRITORY_ROWTYPE.home_store IS NOT NULL  AND
           inCOST_CENTER_ROWTYPE.close_date IS NOT NULL)  THEN 
             RAISE invalid_home_store_desig2_exp;
--  See Seventh Error G-2
      END IF;
   
END ;
--
/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
--	
          EXCEPTION

-- First Error A                   
               WHEN no_cost_center_exp THEN
                    v_code := errnums.en_no_cost_center_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.no_cost_center_exp '  ,
                   'Cost_Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || '" not found ' );
-- Second Error B
               WHEN ccntr_closed_exp  THEN
                    v_code := errnums.en_ccntr_close_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.ccntr_close_exp '  ,
                   'Territory Cost_Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" is closed, date is "' || TO_CHAR(inCOST_CENTER_ROWTYPE.close_date,'MM-DD-YYYY') || '"' );
-- Third Error C-1
               WHEN invalid_category_exp  THEN
                    v_code := errnums.en_territory_category_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.invalid_category_exp '  ,
                   'Cost_Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" Catgory "' || inTERRITORY_ROWTYPE.CATEGORY || '" not found in Code Table' );                    
-- Third Error C-2
               WHEN invalid_category2_exp  THEN
                    v_code := errnums.en_territory_category_err; 
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.invalid_category2_exp '  ,
                   'Cost_Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" Has an invalid Catgory of "' || inCOST_CENTER_ROWTYPE.CATEGORY || '"' ); 

/* *** PSG CCN Quality Control CCNQC-23 TAL
-- Fourth Error D-2    
               when invalid_terr_sls_mgr_exp then
                    v_code := errnums.en_no_sales_mgr_err;    
                    errpkg.raise_err(v_code, 'TERRITORY_BR__SP.invalid_terr_sls_mgr_exp '  ,
                   'Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" has not Territory Sales Manager Table "' || v_Terr_Sales_MGR_rowtype.territory_sls_mgr_code || '"');
*** */
-- Fifth Error E    
               WHEN invalid_lease_car_exp THEN
                    v_code := errnums.en_invalid_code_detail_err;    
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.invalid_lease_car_exp '  ,
                   'Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" Lease Car Indicator "' || inTERRITORY_ROWTYPE.lease_car_indicator || '" is not found in Code Table ');  
-- Sixth Error F    
               WHEN invalid_terr_type_busn_exp THEN
                    v_code := errnums.en_invalid_code_detail_err;    
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.invalid_terr_type_busn_exp '  ,
                   'Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" Territory Type Of Business "' || inTERRITORY_ROWTYPE.territory_type_busn_code || '" is not found in Code table');                        
-- Fifth Error G-1    
               WHEN invalid_home_store_desig1_exp THEN
                    v_code := errnums.en_inv_home_store_desig1_err;    
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.invalid_home_store_desig1_exp '  ,
                   'Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" Home Store Required "' || '"');
-- Fifth Error G-2    
               WHEN invalid_home_store_desig2_exp THEN
                    v_code := errnums.en_inv_home_store_desig1_err;    
                    errpkg.raise_err(v_code, 'TERRITORY_BR_SP.invalid_home_store_desig2_exp '  ,
                   'Cost Center "' || inCOST_CENTER_ROWTYPE.cost_center_code || 
                   '" Home Store not Required for closed territory"' || '"');      
                              
-- Others
               WHEN OTHERS THEN
                    v_code := SQLCODE;
                    v_errm := substr(SQLERRM,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'TERRITORY_BR_SP Error ');   
 
END TERRITORY_BR_SP;

PROCEDURE COMPARE_ZIPCODE_SP(
/*******************************************************************************
    This procedure is to compare the Taxware Zip code with Address Zip code.
     1.If there is no record in taxware for given cost center then do nothing.   
     2.If taxware zip code does not match with address zip code then send an email.
     3.If zip code in taxware with value as null and not matching with address 
       zip code then send an email.	   
     4.If zip code in taxware with value as NOT null and not matching with 
       address zip code then send an email. 
     5.If zip code in both tables as null then send an email.

created : 04/22/2015 SXT410 CCN Project...
revised : 
*******************************************************************************/
    IN_COST_CENTER COST_CENTER.COST_CENTER_CODE%TYPE
)
AS
    V_TAXWARE_ZIP_CODE TAXWARE.TWJ_ZIP%TYPE;
    v_ZIP_CODE         ADDRESS_CAN.POSTAL_CODE%TYPE;
    V_CLOB             CLOB;

BEGIN    
    SELECT TWJ_ZIP
      INTO V_TAXWARE_ZIP_CODE
      FROM TAXWARE
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER);

    SELECT ZIP_CODE 
      INTO v_ZIP_CODE
      FROM
    (
     SELECT ZIP_CODE
       FROM ADDRESS_USA      
      WHERE EXPIRATION_DATE IS NULL
        AND EFFECTIVE_DATE <= TRUNC(SYSDATE) 
        AND ADDRESS_TYPE = 'M'
        AND UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER) 
    UNION
     SELECT POSTAL_CODE ZIP_CODE
       FROM ADDRESS_CAN
      WHERE EXPIRATION_DATE IS NULL
        AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
        AND ADDRESS_TYPE = 'M'       
        AND UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER)
    );

    IF (NVL(V_TAXWARE_ZIP_CODE,'X') <> NVL(v_ZIP_CODE,'XX')) THEN
       MAIL_PKG.SEND_MAIL('TAXWARE_WARNING_MESSAGE', NULL, UPPER(IN_COST_CENTER), NULL);
    END IF;
       
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
END COMPARE_ZIPCODE_SP;

PROCEDURE PCI_TERMINAL_COUNT_CHECK(
/*****************************************************************************
    This procedure is intended to check if the count of PCI TERMINAL ID and TERMINAL NUMBER
    matches. If it don't match then send the report in an email

Created : 03/02/2016 nxk927 CCN Project Team...
Changed : 04/07/2016 nxk927 CCN Project Team...
          changed the data type size to 15 from 6
*******************************************************************************/
IN_COST_CENTER_CODE  IN  COST_CENTER.COST_CENTER_CODE%TYPE,
IN_ROW_DATA          IN  CLOB)
IS
 V_TERMINAL_COUNT   NUMBER := 0;
 V_PCI_TERM_COUNT   NUMBER :=0;
 V_CLOB             CLOB;
 v_Row_data XMLTYPE := sys.XMLTYPE(in_row_data);
BEGIN
    SELECT COUNT(TERMINAL_NUMBER), COUNT(PCI_TERMINAL_ID)
      INTO V_TERMINAL_COUNT, V_PCI_TERM_COUNT
      FROM XMLTABLE ('/POLLING_UI/TERMINAL_TABLE/TERMINAL'
           PASSING v_Row_data
           COLUMNS TERMINAL_NUMBER VARCHAR2(6) PATH 'TERMINAL_NUMBER/text()',
                   PCI_TERMINAL_ID VARCHAR2(15)PATH  'PCI_TERMINAL_ID/text()' );
    IF V_TERMINAL_COUNT <> V_PCI_TERM_COUNT THEN
       FOR REC IN (SELECT COST_CENTER_CODE, 
                          TERMINAL_NUMBER,
                          PCI_TERMINAL_ID
                     FROM TERMINAL
                    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                      AND EXPIRATION_DATE IS NULL) LOOP
           V_CLOB := V_CLOB || 
                     REC.COST_CENTER_CODE || ',' || REC.TERMINAL_NUMBER || ',' || REC.PCI_TERMINAL_ID  ||
                     CHR(10) ;
       END LOOP;
       IF V_CLOB <> EMPTY_CLOB() THEN
          MAIL_PKG.SEND_MAIL('PCI_POS_TERMINAL_MISMATCH', NULL, IN_COST_CENTER_CODE,V_CLOB);
       END IF;
    END IF;
END PCI_TERMINAL_COUNT_CHECK;

END CCN_BUSINESS_RULES_PKG;