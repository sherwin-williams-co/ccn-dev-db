head	1.16;
access;
symbols;
locks; strict;
comment	@# @;


1.16
date	2013.07.15.20.27.27;	author sw\kdp465;	state Exp;
branches;
next	1.15;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1a3051e45b2e443b;
filename	CCN_HIERARCHY.pkg;

1.15
date	2013.07.10.19.27.29;	author sw\kdp465;	state Exp;
branches;
next	1.14;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2ec51ddb5a00fab;
filename	CCN_HIERARCHY.pkg;

1.14
date	2013.07.08.20.31.01;	author sw\kdp465;	state Exp;
branches;
next	1.13;
deltatype	text;
kopt	kv;
permissions	666;
commitid	48c51db21842408;
filename	CCN_HIERARCHY.pkg;

1.13
date	2013.06.26.17.30.17;	author sw\sxh487;	state Exp;
branches;
next	1.12;
deltatype	text;
kopt	kv;
permissions	666;
commitid	132c51cb2528701b;
filename	CCN_HIERARCHY.pkg;

1.12
date	2013.06.26.14.38.01;	author sw\sxh487;	state Exp;
branches;
next	1.11;
deltatype	text;
kopt	kv;
permissions	666;
commitid	50851cafcc86c42;
filename	CCN_HIERARCHY.pkg;

1.11
date	2013.06.25.13.49.14;	author sw\sxh487;	state Exp;
branches;
next	1.10;
deltatype	text;
kopt	kv;
permissions	666;
commitid	27c851c99fd978ca;
filename	CCN_HIERARCHY.pkg;

1.10
date	2013.06.20.14.34.19;	author sw\sxh487;	state Exp;
branches;
next	1.9;
deltatype	text;
kopt	kv;
permissions	666;
commitid	269c51c312ea14a1;
filename	CCN_HIERARCHY.pkg;

1.9
date	2013.05.09.18.15.34;	author sw\kdp465;	state Exp;
branches;
next	1.8;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1968518be7c56c62;
filename	CCN_HIERARCHY.pkg;

1.8
date	2013.05.03.18.58.47;	author sw\kdp465;	state Exp;
branches;
next	1.7;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2278518408e638a9;
filename	CCN_HIERARCHY.pkg;

1.7
date	2012.10.01.20.40.33;	author sw\kdp465;	state Exp;
branches;
next	1.6;
deltatype	text;
kopt	kv;
permissions	666;
commitid	9585069ffc03617;
filename	CCN_HIERARCHY.pkg;

1.6
date	2012.07.24.14.04.19;	author SW\Oxd628;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1604500eab6277a6;
filename	CCN_HIERARCHY.pkg;

1.5
date	2012.04.23.20.50.24;	author sw\kdp465;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	14d44f95c0901a3b;
filename	CCN_HIERARCHY.pkg;

1.4
date	2012.04.19.14.57.53;	author SW\Oxd628;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	16804f9027f153e5;
filename	CCN_HIERARCHY.pkg;

1.3
date	2012.04.19.14.55.59;	author SW\Oxd628;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
permissions	666;
commitid	12984f90277e526d;
filename	CCN_HIERARCHY.pkg;

1.2
date	2012.03.28.17.39.55;	author SW\Oxd628;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	b9c4f734cea18f8;
filename	CCN_HIERARCHY.pkg;

1.1
date	2012.03.27.21.08.25;	author SW\Oxd628;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	4f44f722c486a6b;
filename	CCN_HIERARCHY.pkg;


desc
@@


1.16
log
@edited query for returning attached codst en
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@PACKAGE BODY CCN_HIERARCHY
    AS
	
/*********************************************************** 
This package is will return data from the hierarchy_detail table

created : 03/22/2012 OD CCN coding project
************************************************************/

FUNCTION CHECK_PREVIOUS_LEVELS (
/***********************************************************
      CHECK_PREVIOUS_LEVELS 
      This Procedure will check if the previous Hierarchy levels 
      exists in HIERARCHY_DETAIL or HIERARCHY_DETAIL_HST in
      HRCHY_DTL_CURR_LVL_VAL before the insert of the next level
      
Created : 02/27/2013 SH CCN Project
************************************************************/
            in_IND IN VARCHAR2 DEFAULT NULL,
            in_HRCHY_HDR_NAME  IN HIERARCHY_DETAIL_HST.HRCHY_HDR_NAME%TYPE,
            in_hrchy_dtl_level in hierarchy_detail_hst.hrchy_dtl_level%type,
            in_CURR_VAL        IN HIERARCHY_DETAIL_HST.HRCHY_DTL_CURR_LVL_VAL%TYPE
            )
             RETURN VARCHAR2
IS

  V_LVL_EXISTS VARCHAR2(1);

 BEGIN
     IF IN_IND = 'H'
     THEN
         SELECT CASE WHEN count(*) >0 THEN
                    'Y'
                   ELSE
                    'N'
                   END CASE
              INTO V_LVL_EXISTS
              FROM HIERARCHY_DETAIL_HST A
             WHERE UPPER(HRCHY_HDR_NAME) = UPPER(in_HRCHY_HDR_NAME) 
               AND HRCHY_DTL_LEVEL = IN_HRCHY_DTL_LEVEL 
               AND (HRCHY_DTL_NEXT_LVL_VAL = in_CURR_VAL OR HRCHY_DTL_NEXT_LVL_VAL = '~~~'); 
               
    ELSE
        SELECT CASE WHEN count(*) >0 THEN
                    'Y'
                   ELSE
                    'N'
                   END CASE
              INTO V_LVL_EXISTS
              FROM HIERARCHY_DETAIL A
             WHERE UPPER(HRCHY_HDR_NAME) = UPPER(in_HRCHY_HDR_NAME) 
               AND HRCHY_DTL_LEVEL = IN_HRCHY_DTL_LEVEL 
               AND HRCHY_DTL_CURR_LVL_VAL = in_CURR_VAL;
    END IF;
       
     RETURN V_LVL_EXISTS;
END CHECK_PREVIOUS_LEVELS;


PROCEDURE hierarchy_insert_wrapper( 
/***********************************************************
      hierarchy_insert_wrapper 
      This Procedure will insert into HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST 
      
      Insert Detail Process, overloaded function
      accepts xml
  
Created : 07/12/2013 SH CCN Project
************************************************************/
  in_xml IN VARCHAR2)
IS

  v_hierarchy_detail_row  HIERARCHY_DETAIL%ROWTYPE;
  
  V_CONTEXT   VARCHAR2(1000);
  SQ          INTEGER;
  SE          VARCHAR2(300);

begin
  
    ccn_hierarchy.hierarchy_detail_insert(in_XML);
    
  EXCEPTION 
        WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            v_context := v_context || ' ' || sq || ' ' || se; 
            dbms_output.put_line( 'ccn_hierarchy.HIERARCHY_INSERT_WRAPPER - '|| v_context); 
            ERRPKG.RAISE_ERR(-20004, 'ccn_hierarchy.HIERARCHY_INSERT_WRAPPER -', V_CONTEXT);  
END hierarchy_insert_wrapper;

PROCEDURE hierarchy_insert_wrapper( 
/***********************************************************
      hierarchy_insert_wrapper 
      This Procedure will insert into HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST 
      
Created : 02/27/2013 SH CCN Project
************************************************************/
  in_ind in varchar2,
  in_hierarchy_detail_row IN hierarchy_detail%rowtype)
IS
  --Insert Detail Process, overloaded function
  --accepts a rowtype

  v_hierarchy_detail_row  HIERARCHY_DETAIL%ROWTYPE;
  
  V_CONTEXT   VARCHAR2(1000);
  SQ          INTEGER;
  SE          VARCHAR2(300);

begin
    v_hierarchy_detail_row := in_hierarchy_detail_row;
    
    if in_ind = 'H' then
       V_CONTEXT := 'Inserting into hierarchy_detail_hst ';
       insert into hierarchy_detail_hst values v_hierarchy_detail_row;
    else
       V_CONTEXT := 'Inserting into hierarchy_detail ';
       insert into hierarchy_detail values v_hierarchy_detail_row; 
    end if;
    
  EXCEPTION 
        WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            v_context := v_context || ' ' || sq || ' ' || se; 
            dbms_output.put_line( 'ccn_hierarchy.HIERARCHY_INSERT_WRAPPER - '|| v_context); 
            ERRPKG.RAISE_ERR(-20004, 'ccn_hierarchy.HIERARCHY_INSERT_WRAPPER -', V_CONTEXT);  
END hierarchy_insert_wrapper;

FUNCTION HIERARCHY_DESC_RETURN (
/***********************************************************
      HIERARCHY_DESC_RETURN 
      This Procedure will return the Hierarchy level DESC 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. This is used for the insert into hist for Transfer 
      process.
input param : in_HRCHY_DTL_CURR_LVL_VAL
Created : 03/19/2013 SH CCN Project
revised : 05/02/2013 kdp ccn Header Name to query 
************************************************************/
            in_HRCHY_DTL_CURR_LVL_VAL IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
            ,in_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
            )
             RETURN VARCHAR2
IS

  V_HRCHY_DTL_DESC HIERARCHY_DETAIL.HRCHY_DTL_DESC%TYPE;

 BEGIN
            SELECT DISTINCT HRCHY_DTL_DESC
              INTO V_HRCHY_DTL_DESC
              FROM HIERARCHY_DETAIL 
             WHERE HRCHY_DTL_CURR_LVL_VAL = in_HRCHY_DTL_CURR_LVL_VAL
             AND HRCHY_HDR_NAME = in_HRCHY_HDR_NAME;
        
     RETURN V_HRCHY_DTL_DESC;
END HIERARCHY_DESC_RETURN;

PROCEDURE RETURN_HIERARCHY (	
/**********************************************************
	RETURN_HIERARCHY

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail table based on header name, current value , traverse ( UP or DOWN DEFAULT is UP)
	and level
	ex. CCN_HIERARCHY.RETURN_HIERARCHY('DAD Structure','703252','DOWN',OUT_DEFINED_REF_CURSOR)

created : 03/22/2012 OD CCN Project....
**********************************************************/

				IN_HEADER_NAME 		IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    , 	IN_CURR_ROW_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
			    ,	IN_LEVEL		IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_TRAVERSE		IN VARCHAR2 DEFAULT 'UP'
			    ,   OUT_HIERARCHY_REF_CUR IN OUT REF_CURSOR
       --  ,   OUT_HIERARCHY_REF_CUR IN OUT SYS_REFCURSOR
			   )
                                                                                               
	
	
        IS                 
        
        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN
	
    V_CONTEXT := 'START';

		IF IN_TRAVERSE = 'UP' THEN

    V_CONTEXT := 'Traverse Up Query';
 --Concatenation is needed because We need level and value to get the hierarchy as sometimes the value accross levels could be the same
 
 			OPEN  OUT_HIERARCHY_REF_CUR FOR

		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		hr.HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.pa =  AR.Ch
        		order by AR.lev;

        	ELSE
          
        V_CONTEXT := 'Traverse Down Query';  

	OPEN  OUT_HIERARCHY_REF_CUR FOR
		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		hr.HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.CH =  AR.PA
        		order by AR.lev;

		END IF;
    
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY',V_CONTEXT);    
        			

		--Error handling to be put  
	END RETURN_HIERARCHY;
                         
PROCEDURE RETURN_HIERARCHY_LAST_LVL (	
/**********************************************************
	RETURN_HIERARCHY

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail lowest level table based on header name, current value , t
	

created : 06/22/2012 kdp CCN Project....
**********************************************************/

				IN_HEADER_NAME 			IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    ,	IN_LEVEL			IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_COMPOSITE_KEY	IN HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
			    ,   OUT_HIERARCHY_REF_CUR IN OUT REF_CURSOR
       --  ,   OUT_HIERARCHY_REF_CUR IN OUT SYS_REFCURSOR
			   )
                                                                                               
	
	
        IS                 
        
        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN
	
    V_CONTEXT := 'START';

    V_CONTEXT := 'Traverse Down Query';  

	OPEN  OUT_HIERARCHY_REF_CUR FOR
		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		hr.HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				)  AR
				WHERE HRCHY_DTL_LEVEL = IN_LEVEL
				AND HRCHY_DTL_PREV_LVL_VAL = IN_COMPOSITE_KEY
				--CONNECT BY  PRIOR AR.CH =  AR.PA
        		order by AR.lev;

  
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY',V_CONTEXT);    
        			

		--Error handling to be put  
	END RETURN_HIERARCHY_LAST_LVL;	
	
PROCEDURE RETURN_HIERARCHY_HIST (
/**********************************************************
	RETURN_HIERARCHY_HIST

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail_hst table based on header name, current value , traverse ( UP or DOWN DEFAULT is UP), level
	and structure as of history date 
	ex. CCN_HIERARCHY.RETURN_HIERARCHY('DAD Structure','703252','DOWN',TO_DATE(03/24/2011','MM/DD/YYYY'),OUT_DEFINED_REF_CURSOR)

created : 03/22/2012 OD CCN Project....
**********************************************************/
				IN_HEADER_NAME 	IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    ,   IN_CURR_ROW_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
			    ,	IN_LEVEL	IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_TRAVERSE	IN VARCHAR2 DEFAULT 'UP'
			    ,	IN_HIST_DATE	IN HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE DEFAULT NULL
			    ,   OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
			   )

        IS                 
        
        EFF_DATE DATE;
        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN
	
/* Selecting the Maximum date that is less than or equal to the effective date passed in So as to get the structure as of that date */
		   
       V_CONTEXT := 'Select maximum date that is less than or equal to the effective date passed';
       
			SELECT MAX(HRCHY_DTL_EFF_DATE) INTO EFF_DATE
			  FROM HIERARCHY_DETAIL
			 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME 
			   AND HRCHY_DTL_EFF_DATE <= IN_HIST_DATE;	
	
	
		IF IN_TRAVERSE = 'UP' THEN

 --Concatenation is needed because We need level and value to get the hierarchy as sometimes the value accross levels could be the same
 
      V_CONTEXT := 'Traverse Up History Query';
 
 			OPEN  OUT_HIERARCHY_REF_CUR FOR
                               SELECT DISTINCT
                                AR.LEV,
                                AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                                AR.HRCHY_DTL_CURR_ROW_VAL,
                                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
                                hr.HRCHY_DTL_DESC,
                                hr.HRCHY_DTL_CURR_ROW_VAL,
                                xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL_HST hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
                                   AND HRCHY_DTL_EFF_DATE = NVL(EFF_DATE, HRCHY_DTL_EFF_DATE)
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.PA =  AR.CH
        		order by AR.lev; 

        			
        	ELSE
          
          V_CONTEXT := 'Traverse Down History Query';
        	
        		OPEN  OUT_HIERARCHY_REF_CUR FOR
                                SELECT DISTINCT
                                AR.LEV,
                                AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                                AR.HRCHY_DTL_CURR_ROW_VAL,
                                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
                                hr.HRCHY_DTL_DESC,
                                hr.HRCHY_DTL_CURR_ROW_VAL,
                                xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL_HST hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				   AND HRCHY_DTL_EFF_DATE = EFF_DATE
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.CH =  AR.PA
        		order by AR.lev;

		END IF;
    
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_HIST',V_CONTEXT);    
        			    

END RETURN_HIERARCHY_HIST;

PROCEDURE RETURN_HIERARCHY_UP (
/**********************************************************
	RETURN_DAD

	This procedure will return a ref cursor with DAD data from 
	from the hierarchy_detail table based on just the 
  header name, cost center or last level value

created : 07/22/2012 OD CCN Project....
**********************************************************/
						IN_HEADER_NAME 	IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
					    , 	IN_ROW_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
					    ,   OUT_HIERARCHY_REF_CUR IN OUT REF_CURSOR
					   )
             
IS

SQ INTEGER;
SE VARCHAR2(100);
V_CONTEXT VARCHAR2(100);
V_FULL_VAL HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
V_LVL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;


BEGIN

V_CONTEXT := 'Begin Selecting DAD value';

SELECT HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_ROW_VAL, HRCHY_DTL_LEVEL INTO V_FULL_VAL,V_LVL
  FROM HIERARCHY_DETAIL 
 WHERE HRCHY_HDR_NAME =  IN_HEADER_NAME
   AND HRCHY_DTL_CURR_ROW_VAL = IN_ROW_VAL;

V_CONTEXT := 'Call hierarchy package traverse UP to get DAD';

RETURN_HIERARCHY(IN_HEADER_NAME,V_FULL_VAL,V_LVL,'UP',OUT_HIERARCHY_REF_CUR);

EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_UP',V_CONTEXT);    
        			    

END RETURN_HIERARCHY_UP;

PROCEDURE HIERARCHY_PICKLIST(	
/**********************************************************
	HIERARCHY_PICKLIST

	This procedure will return data in ref_cursor 
        from HIERARCHY_DETAIL depending on the input params
        Ex - If all the Areas need to be returned for a Given 
        Division then the XML from the UI will have Hierarchy Name
        and Hierarchy Detail level '2' and current division ='04'
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>35</HRCHY_LEVEL3>
      <HRCHY_LEVEL4>708113</HRCHY_LEVEL4>
  </row_data>
</HIERARCHY_DETAIL>

created : 02/13/2013 SH CCN Project....
**********************************************************/
  in_XML                VARCHAR2,--XMLTYPE,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR)
 
IS
    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_XML xmltype := sys.xmltype(in_XML);
    
    V_CONTEXT           VARCHAR2(100);
    V_COUNT             INTEGER := 1;
    V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_DTL_LEVEL   HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
    V_CURR_VAL          HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
  
   BEGIN
         IF (v_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_NAME );
             
             V_CONTEXT := 'Extracting HRCHY_DTL_LEVEL';
             V_HRCHY_DTL_LEVEL := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_DTL_LEVEL );
             
             V_CONTEXT := 'Extracting HRCHY LEVELS';
             /* for each level, extract elements to form the composite key */
              WHILE V_COUNT < V_HRCHY_DTL_LEVEL LOOP
                    V_CURR_VAL := V_CURR_VAL || v_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || V_COUNT ||'/text()').GETSTRINGVAL();
                    V_COUNT := V_COUNT + 1;
              END LOOP;
         END IF;
         -- DBMS_OUTPUT.put_line(V_CURR_VAL );
        
        V_CONTEXT := 'Selecting for Ref Cursor';
        open OUT_HIERARCHY_REF_CUR for
          SELECT DISTINCT HRCHY_DTL_CURR_ROW_VAL, HRCHY_DTL_DESC
          , hrchy_dtl_eff_date
          , HRCHY_DTL_EXP_DATE
          --, xmltype.getStringVal(UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
            from hierarchy_detail 
         where hrchy_hdr_name = upper(v_hrchy_hdr_name)
           and hrchy_dtl_level = v_hrchy_dtl_level
           and hrchy_dtl_prev_lvl_val = decode( v_hrchy_dtl_level, 1, hrchy_dtl_prev_lvl_val, v_curr_val)
           and HRCHY_DTL_EXP_DATE IS NULL           
         ORDER BY HRCHY_DTL_CURR_ROW_VAL;
      
   EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_PICKLIST',V_CONTEXT);   
          
END HIERARCHY_PICKLIST;

PROCEDURE HIERARCHY_STMNT_TYPE_PICKLIST(	
/**********************************************************
	HIERARCHY_STMNT_TYPE_PICKLIST

	This procedure will return data in ref_cursor 
        for statement type from HIERARCHY_DETAIL depending 
        on the input params
        Ex - If all the Areas need to be returned for a Given 
        Division then the XML from the UI will have Hierarchy Name
        and Hierarchy Detail level '2' and current division ='04'
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>35</HRCHY_LEVEL3>
      <HRCHY_LEVEL4>708113</HRCHY_LEVEL4>
  </row_data>
</HIERARCHY_DETAIL>

created : 06/20/2013 SH CCN Project....
**********************************************************/
  in_XML                VARCHAR2,--XMLTYPE,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR)
 
IS
    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_XML xmltype := sys.xmltype(in_XML);
    
    V_CONTEXT           VARCHAR2(100);
    V_COUNT             INTEGER := 1;
    V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_DTL_LEVEL   HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
    V_CURR_VAL          HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
  
   BEGIN
         IF (v_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_NAME );
             
             V_CONTEXT := 'Extracting HRCHY_DTL_LEVEL';
             V_HRCHY_DTL_LEVEL := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_DTL_LEVEL );
             
             V_CONTEXT := 'Extracting HRCHY LEVELS';
             /* for each level, extract elements to form the composite key */
              WHILE V_COUNT = V_HRCHY_DTL_LEVEL LOOP
                    V_CURR_VAL := V_CURR_VAL || v_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || V_COUNT ||'/text()').GETSTRINGVAL();
                    V_COUNT := V_COUNT + 1;
              END LOOP;
         END IF;
         -- DBMS_OUTPUT.put_line(V_CURR_VAL );
        
        open OUT_HIERARCHY_REF_CUR for
          SELECT xmltype.getStringVal(UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
            from HIERARCHY_DETAIL 
         where UPPER(HRCHY_HDR_NAME) = UPPER(V_HRCHY_HDR_NAME)
           and HRCHY_DTL_LEVEL = V_HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_LVL_VAL = V_CURR_VAL;
      
   EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_PICKLIST',V_CONTEXT);   
          
END HIERARCHY_STMNT_TYPE_PICKLIST;

PROCEDURE HIERARCHY_HDR_DESC_PICKLIST(	
/**********************************************************
	HIERARCHY_HDR_DESC_PICKLIST

	This procedure will return the data in ref cursor
        from HIERARCHY_HEADER and HIERARCHY_DESCRIPTION
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
  </row_data>
</HIERARCHY_DETAIL>
created : 02/13/2013 SH CCN Project....
**********************************************************/
  in_XML                VARCHAR2,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
  )
 
IS
    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_XML xmltype := sys.xmltype(in_XML);
    
    V_CONTEXT           VARCHAR2(100);
    V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
  
   BEGIN
        IF (V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
            V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
            V_HRCHY_HDR_NAME := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
            -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_NAME );
        END IF;
        
          OPEN OUT_HIERARCHY_REF_CUR FOR
        SELECT DISTINCT HH.HRCHY_HDR_LEVELS,HD.HRCHY_HDR_LVL_DESC, HD.HRCHY_HDR_LVL_NBR
          from hierarchy_header hh, hierarchy_description hd
         WHERE UPPER(HH.HRCHY_HDR_NAME) = UPPER(HD.HRCHY_HDR_NAME)
           AND UPPER(HH.HRCHY_HDR_NAME) = UPPER(V_HRCHY_HDR_NAME)
           order by HD.HRCHY_HDR_LVL_NBR ASC;
         
  EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HDR_DESC_PICKLIST',V_CONTEXT);  
END HIERARCHY_HDR_DESC_PICKLIST;
    
PROCEDURE HIERARCHY_HEADER_INSERT(
/**********************************************************
	HIERARCHY_HEADER_INSERT

	This procedure will insert into the table HIERARCHY_HEADER
        
<HIERARCHY_HEADER>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LEVELS>04</HRCHY_HDR_LEVELS> 
      <HRCHY_HDR_DESC>Div Area Dist Structure</HRCHY_HDR_DESC> 
  </row_data>
</HIERARCHY_HEADER>

created : 02/13/2013 SH CCN Project....
**********************************************************/
    in_XML                VARCHAR2)
IS

    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_xml xmltype := sys.xmltype(in_xml);
     
    V_CONTEXT               VARCHAR2(100);
    V_HRCHY_HDR_NAME        HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_HDR_LEVELS      HIERARCHY_HEADER.HRCHY_HDR_LEVELS%TYPE;
    V_HRCHY_HDR_DESC        HIERARCHY_HEADER.HRCHY_HDR_DESC%TYPE;
    v_ErrText               VARCHAR2(500);
    v_code                  NUMBER;
  
   begin
         IF (v_XML.EXISTSNODE('/HIERARCHY_HEADER/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_HEADER/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_NAME );
             
             V_CONTEXT := 'Extracting HRCHY_HDR_LEVELS';
             V_HRCHY_HDR_LEVELS := v_XML.EXTRACT('/HIERARCHY_HEADER/row_data/HRCHY_HDR_LEVELS/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_LEVELS );

             V_CONTEXT := 'Extracting HRCHY_HDR_DESC';
             V_HRCHY_HDR_DESC := v_XML.EXTRACT('/HIERARCHY_HEADER/row_data/HRCHY_HDR_DESC/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_DESC );
                  
             V_CONTEXT := 'Inserting into HIERARCHY_HEADER';
             INSERT INTO HIERARCHY_HEADER  ( HRCHY_HDR_NAME,
                                             HRCHY_HDR_LEVELS,
                                             HRCHY_HDR_DESC
                                           )
                                     VALUES( UPPER(V_HRCHY_HDR_NAME),
                                             v_hrchy_hdr_levels,
                                             V_HRCHY_HDR_DESC
                                           );
         END IF;
  
  EXCEPTION 
    WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
            ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HEADER_INSERT',V_CONTEXT); 
          
END HIERARCHY_HEADER_INSERT;


PROCEDURE HIERARCHY_DESCRIPTION_INSERT(
/**********************************************************
	HIERARCHY_DESCRIPTION_INSERT

	This procedure will insert into the table HIERARCHY_DESCRIPTION 
        
<HIERARCHY_DESCRIPTION>
  <row_data>
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>03</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>AREA</HRCHY_HDR_LVL_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  	<HRCHY_LEVELS>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>04</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>DIST</HRCHY_HDR_LVL_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  </row_data>
</HIERARCHY_DESCRIPTION>

created : 02/13/2013 SH CCN Project....
**********************************************************/
    in_XML                VARCHAR2)
IS

    SQ INTEGER;
    SE VARCHAR2(100);
    invalid_order_wrn EXCEPTION;
    
    V_XML xmltype := SYS.xmltype(IN_XML);
    V_XML_FRAG           CLOB;
    v_code               NUMBER;
    
    V_COUNT 		    INTEGER := 1;
    V_CONTEXT               varchar2(100);
    V_HRCHY_HDR_NAME        HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%type;
    V_HRCHY_HDR_LVL_NBR     HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%type;
    V_HRCHY_HDR_LVL_DESC    HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%type;
    V_UPPER_LVL_VER_VALUE   HIERARCHY_DESCRIPTION.UPPER_LVL_VER_VALUE%TYPE;
  
   BEGIN
         WHILE v_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']') = 1 LOOP
         
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_NAME );
             
             V_CONTEXT := 'Extracting HRCHY_HDR_LVL_NBR';
             V_HRCHY_HDR_LVL_NBR := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_NBR/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(V_HRCHY_HDR_LVL_NBR );
             
             V_CONTEXT := 'Extracting HRCHY_HDR_LVL_DESC';
             V_HRCHY_HDR_LVL_DESC := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_DESC/text()').GETSTRINGVAL();
             -- DBMS_OUTPUT.put_line(HRCHY_HDR_LVL_DESC );
             
             --check the order of levels entered
             BEGIN
                ccn_hier_business_rules_pkg.Header_Lvl_Validation_sp(in_XML);
                
             EXCEPTION 
                WHEN OTHERS THEN
                        raise invalid_order_wrn;
             END;
             
             V_CONTEXT := 'Extracting UPPER_LVL_VER_VALUE';
             if (v_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/attributes') = 1) then
                 V_XML_FRAG := v_XML.extract('/HIERARCHY_DETAIL/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/attributes').GETCLOBVAL();
                 V_UPPER_LVL_VER_VALUE := sys.xmltype.createXML(V_XML_FRAG);
             end if;
             
             V_CONTEXT := 'Inserting into HIERARCHY_DESCRIPTION';
             INSERT INTO HIERARCHY_DESCRIPTION ( HRCHY_HDR_NAME,
                                                 HRCHY_HDR_LVL_NBR,
                                                 HRCHY_HDR_LVL_DESC,
                                                 UPPER_LVL_VER_VALUE
                                                )
                                          VALUES( UPPER(V_HRCHY_HDR_NAME),
                                                  V_HRCHY_HDR_LVL_NBR,
                                                  V_HRCHY_HDR_LVL_DESC,
                                                  V_UPPER_LVL_VER_VALUE
                                                 );
        
          V_COUNT := V_COUNT + 1;
          
         END LOOP;
  
  EXCEPTION 
      WHEN invalid_order_wrn THEN
           v_code := errnums.en_invalid_order_wrn;
           errpkg.raise_err(v_code, 'The Order of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is incorrect');
             
      WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DESCRIPTION_INSERT',V_CONTEXT); 
          
END HIERARCHY_DESCRIPTION_INSERT;

PROCEDURE HIERARCHY_DETAIL_INSERT(
/**********************************************************
	HIERARCHY_DETAIL_INSERT

	This procedure will insert into the table HIERARCHY_DETAIL 
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD Structure</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>01</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
      <HRCHY_LEVEL3>10</HRCHY_LEVEL3>
      <HRCHY_DTL_DESC>Ohio</HRCHY_DTL_DESC>
      <HRCHY_DTL_EFF_DATE>01-10-2013</HRCHY_DTL_EFF_DATE>
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
         <Name>statement_type</Name> 
         <Description>pkListValue</Description> 
         <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
  </row_data>
</HIERARCHY_DETAIL>

created : 02/13/2013 SH CCN Project....
**********************************************************/
    in_XML                VARCHAR2)
IS
  --Insert Detail Process
  V_COUNT                 INTEGER;
  V_PREV_LVL_EXISTS       VARCHAR2(1);
  v_curr_lvl_exists       varchar2(1);
  v_hierarchy_detail_row  hierarchy_detail%rowtype;
  V_FOUND                 VARCHAR2(1):= 'N';
  v_CC_flag               VARCHAR2(1);
  v_rowdata               sys.XMLTYPE;
  
  CC_exists_err  EXCEPTION;
  V_CODE         NUMBER;
  V_CONTEXT      VARCHAR2(100);
  SQ             INTEGER;
  SE             varchar2(100);
    
  V_LVL_EXISTS   varchar2(1);
  V_XML_FRAG     clob;
  v_XML xmltype := sys.xmltype(in_XML);

BEGIN
   
    IF (V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
       v_hierarchy_detail_row.HRCHY_HDR_NAME    := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
       v_hierarchy_detail_row.hrchy_dtl_level := v_xml.extract('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').getstringval();
       v_hierarchy_detail_row.hrchy_dtl_eff_date  := to_date(v_xml.extract('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EFF_DATE/text()').getstringval(), 'MM-DD-YYYY');
         if (V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text') = 1) then
            v_hierarchy_detail_row.hrchy_dtl_exp_date  := to_date(v_xml.extract('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()').getstringval(), 'MM-DD-YYYY'); 
         end if;
       v_hierarchy_detail_row.hrchy_dtl_desc      := v_xml.extract('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_DESC/text()').getstringval(); 
    END IF;
   
    IF (V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data/attributes') = 1) THEN
          V_XML_FRAG := V_XML.extract('/HIERARCHY_DETAIL/row_data/attributes').GETCLOBVAL();
    end if;
   
   V_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE := SYS.xmltype.CREATEXML(V_XML_FRAG);
    
   V_COUNT := v_hierarchy_detail_row.HRCHY_DTL_LEVEL; 
   FOR j IN REVERSE 2..v_hierarchy_detail_row.HRCHY_DTL_LEVEL
   loop  
        if v_hierarchy_detail_row.hrchy_dtl_level >0 then
           FOR i IN 1..v_hierarchy_detail_row.HRCHY_DTL_LEVEL
           loop
               if i < v_hierarchy_detail_row.hrchy_dtl_level then
                  v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL  :=  v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL || V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
               END IF;
               
               if v_hierarchy_detail_row.hrchy_dtl_curr_lvl_val is not null then
                  v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL  := v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL || V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
               else
                  v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL  := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
               END IF;
                 v_hierarchy_detail_row.HRCHY_DTL_CURR_ROW_VAL   := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
           END loop;
           
              --v_hierarchy_detail_row.hrchy_dtl_exp_date := null;
           
              if v_hierarchy_detail_row.hrchy_dtl_level = 1 then
                 v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL := '~~~';
              END IF;

          CASE WHEN v_hierarchy_detail_row.HRCHY_DTL_LEVEL = V_COUNT 
          THEN
                BEGIN
                    --Checking for duplicate Cost Center
                    IF ccn_hier_business_rules_pkg.GET_HDR_LVL_DESC_SP(v_hierarchy_detail_row.HRCHY_HDR_NAME, v_hierarchy_detail_row.hrchy_dtl_level) = 'Cost Center' THEN    
                       V_CONTEXT := 'Calling the DUPLICATE_COST_CENTER';
                       ccn_hier_business_rules_pkg.DUPLICATE_COST_CENTER(v_hierarchy_detail_row.HRCHY_HDR_NAME, v_hierarchy_detail_row.hrchy_dtl_level, v_hierarchy_detail_row.HRCHY_DTL_CURR_ROW_VAL);
                     END IF;
                     
                 EXCEPTION
                    WHEN OTHERS THEN
                        raise CC_exists_err;
                 END;
                 
              --last level check
              v_hierarchy_detail_row.hrchy_dtl_next_lvl_val := '~~~';
              --Check if the previous level exists for the HRCHY_DTL_CURR_LVL_VAL
              v_context := 'Check the Prev levels in Detail';
              IF V_COUNT <> '1'THEN
                V_LVL_EXISTS :=  CCN_HIERARCHY.CHECK_PREVIOUS_LEVELS( NULL,
                                                                      v_hierarchy_detail_row.hrchy_hdr_name,
                                                                      v_hierarchy_detail_row.HRCHY_DTL_LEVEL -1,
                                                                      v_hierarchy_detail_row.hrchy_dtl_prev_lvl_val
                                                                     );
              else
                  v_lvl_exists := 'Y';
              end if;
              
              IF V_LVL_EXISTS = 'Y' THEN
                 --checking if the record for the curr val already exists
                 --for duplicates
                 V_CONTEXT := 'Check the curr row already exits in Detail';
                 SELECT CASE WHEN count(*) >0 THEN
                    'Y'
                   ELSE
                    'N'
                   END CASE
                   INTO V_CURR_LVL_EXISTS
                   FROM HIERARCHY_DETAIL
                  WHERE UPPER(HRCHY_HDR_NAME) = UPPER(v_hierarchy_detail_row.HRCHY_HDR_NAME) 
                    AND HRCHY_DTL_LEVEL = v_hierarchy_detail_row.HRCHY_DTL_LEVEL 
                    AND HRCHY_DTL_PREV_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL
                    AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL;
                    
                    IF V_CURR_LVL_EXISTS = 'N' THEN
                       V_CONTEXT := 'Inserting the current level in Detail';
                       --Insert a record for the current level
                       ccn_hierarchy.hierarchy_insert_wrapper(NULL, v_hierarchy_detail_row);
                    END IF;
             ELSE
                DBMS_OUTPUT.PUT_LINE('The Previous Level does not exist.');
                --RAISE PREVIOUS_LEVEL_NOT_EXISTS_ERR;
             END IF;
             
          when v_hierarchy_detail_row.hrchy_dtl_level < v_count then
             IF V_FOUND = 'N' THEN --flag to exit if Previous level exists
               --previous levels check
               --checking if a record for the previous level exists
               V_CONTEXT := 'Check the prev level exits in Detail';
                 SELECT CASE WHEN count(*) >0 THEN
                    'Y'
                   ELSE
                    'N'
                   END CASE
                   INTO V_PREV_LVL_EXISTS
                   from hierarchy_detail 
                  where upper(hrchy_hdr_name) = upper(v_hierarchy_detail_row.hrchy_hdr_name)
                    and hrchy_dtl_level = v_hierarchy_detail_row.hrchy_dtl_level 
                    AND HRCHY_DTL_PREV_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL
                    and hrchy_dtl_curr_lvl_val = v_hierarchy_detail_row.hrchy_dtl_curr_lvl_val
                    and (HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_NEXT_LVL_VAL OR HRCHY_DTL_NEXT_LVL_VAL = '~~~');
                          
                    --if the record does not exist Insert else update 
                    IF V_PREV_LVL_EXISTS = 'N' THEN
                       v_context := 'Inserting the Previous level in Detail';
                       ccn_hierarchy.HIERARCHY_INSERT_WRAPPER(NULL, v_hierarchy_detail_row); 
                    else
                         V_FOUND := 'Y';
                         V_CONTEXT := 'Updating the current level in Detail';
                         --Record exists, update the HRCHY_DTL_NEXT_LVL_VAL
                         UPDATE HIERARCHY_DETAIL
                            SET HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_NEXT_LVL_VAL
                          WHERE UPPER(HRCHY_HDR_NAME) = UPPER(v_hierarchy_detail_row.HRCHY_HDR_NAME)
                            AND HRCHY_DTL_LEVEL = v_hierarchy_detail_row.HRCHY_DTL_LEVEL 
                            AND HRCHY_DTL_PREV_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL
                            AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL
                            and hrchy_dtl_next_lvl_val = '~~~'
                            AND HRCHY_DTL_NEXT_LVL_VAL <> v_hierarchy_detail_row.HRCHY_DTL_NEXT_LVL_VAL;
                     end if; --V_PREV_LVL_EXISTS check
             end if;     
          ELSE
               NULL;
          END CASE; 
          
      --reset all the values for the next level
      v_hierarchy_detail_row.hrchy_dtl_level := v_hierarchy_detail_row.hrchy_dtl_level -1;
      v_hierarchy_detail_row.hrchy_dtl_next_lvl_val := nvl(v_hierarchy_detail_row.hrchy_dtl_curr_lvl_val, '~~~');
      v_hierarchy_detail_row.hrchy_dtl_curr_lvl_val := null;
      v_hierarchy_detail_row.hrchy_dtl_curr_row_val := null;
      v_hierarchy_detail_row.hrchy_dtl_prev_lvl_val := null;
      V_FOUND := 'N';
     END IF; --V_HRCHY_DTL_LEVEL >0 check
  END LOOP;
  
  EXCEPTION 
       -- WHEN RAISE PREVIOUS_LEVEL_NOT_EXISTS_ERR THEN
           --  v_code := errnums.en_invalid_lvl_err; 
           --   ERRPKG.RAISE_ERR(V_CODE, 'HIERARCHY_DETAIL_INSERT.PREVIOUS_LEVEL_NOT_EXISTS_ERR ',
           --                  'CCN_HIERARCHY_PKG ' || ' HRCHY_DTL_PREV_LVL_VAL ' || V_HRCHY_DTL_PREV_LVL_VAL || ' for level ' || V_HRCHY_DTL_LEVEL ||
           --                   'Not Found' );
        WHEN CC_exists_err THEN  
             v_code := errnums.en_CC_exists_err;
             errpkg.raise_err(v_code, 'The Cost Center ' || v_hierarchy_detail_row.HRCHY_DTL_CURR_ROW_VAL|| ' already exists');
        
        WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            v_context := v_context || ' ' || sq || ' ' || se; 
            DBMS_OUTPUT.PUT_LINE('ERROR -' || V_CONTEXT); 
            --ERRPKG.RAISE_ERR(-20004, 'HIERARCHY_DETAIL_INSERT ', V_CONTEXT);  
END HIERARCHY_DETAIL_INSERT;

procedure HIERARCHY_TRANSFER_PROCESS(
/**********************************************************************

HIERARCHY_TRANSFER_PROCESS

	This procedure will Transfer Cost Center from one Hierarchy to another 

Input :-

<HIERARCHY_DETAIL>
  <row_data>
        <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
        <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
        <FROM_HIERARCHY>
            <HRCHY_LEVEL1>05</HRCHY_LEVEL1> 
            <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
            <HRCHY_LEVEL3>95</HRCHY_LEVEL3>
        </FROM_HIERARCHY>
	<TRANSFER_TO>
        	<TO_HIERARCHY>
       		     <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
       		     <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
       		     <HRCHY_LEVEL3>35</HRCHY_LEVEL3>
       		     <HRCHY_LEVEL4>784659</HRCHY_LEVEL4>
       		     <HRCHY_DTL_EFF_DATE>01-APR-2014</HRCHY_DTL_EFF_DATE>
       		     <HRCHY_DTL_EXP_DATE>01-APR-2015</HRCHY_DTL_EXP_DATE>
			        <attributes>
			             <upper_lvl_ver_desc> 
			                  <Name>statement_type</Name>
			                  <Description>pkListValue</Description>
			                  <Value>US1</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>ManagerName</Name>
			                  <Description>CC Mgr Name</Description>
			                  <Value>Some Name1</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>state_code</Name>
			                  <Description>pkListValue</Description>
			                  <Value>CA1</Value>
			             </upper_lvl_ver_desc>
			        </attributes>
                     <HRCHY_DTL_DESC>LAS VEGAS-RANCHO</HRCHY_DTL_DESC>
       		 </TO_HIERARCHY>
                 <TO_HIERARCHY>
       		     <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
        	     <HRCHY_LEVEL2>03</HRCHY_LEVEL2> 
        	     <HRCHY_LEVEL3>99</HRCHY_LEVEL3>
        	     <HRCHY_LEVEL4>784987</HRCHY_LEVEL4>
		     <HRCHY_DTL_EFF_DATE>01-MAY-2014</HRCHY_DTL_EFF_DATE>
		     <HRCHY_DTL_EXP_DATE>01-MAY-2015</HRCHY_DTL_EXP_DATE>
			        <attributes>
			             <upper_lvl_ver_desc> 
			                  <Name>statement_type</Name>
			                  <Description>pkListValue</Description>
			                  <Value>US2</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>ManagerName</Name>
			                  <Description>CC Mgr Name</Description>
			                  <Value>Some Name2</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>state_code</Name>
			                  <Description>pkListValue</Description>
			                  <Value>CA2</Value>
			             </upper_lvl_ver_desc>
			        </attributes>
                     <HRCHY_DTL_DESC>WEST PACIFIC NW PF REP</HRCHY_DTL_DESC>
        	 </TO_HIERARCHY>
                 <TO_HIERARCHY>
       		     <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
        	     <HRCHY_LEVEL2>04</HRCHY_LEVEL2> 
        	     <HRCHY_LEVEL3>05</HRCHY_LEVEL3>
        	     <HRCHY_LEVEL4>786892</HRCHY_LEVEL4>
		     <HRCHY_DTL_EFF_DATE>01-JUN-2014</HRCHY_DTL_EFF_DATE>
		     <HRCHY_DTL_EXP_DATE>01-JUN-2015</HRCHY_DTL_EXP_DATE>
			        <attributes>
			             <upper_lvl_ver_desc> 
			                  <Name>statement_type</Name>
			                  <Description>pkListValue</Description>
			                  <Value>US3</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>ManagerName</Name>
			                  <Description>CC Mgr Name</Description>
			                  <Value>Some Name3</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>state_code</Name>
			                  <Description>pkListValue</Description>
			                  <Value>CA3</Value>
			             </upper_lvl_ver_desc>
			        </attributes>
                     <HRCHY_DTL_DESC>02/11 WEST PF REP</HRCHY_DTL_DESC>
        	 </TO_HIERARCHY>
	</TRANSFER_TO>

  </row_data>
</HIERARCHY_DETAIL>

created : 03/13/2013 SH CCN Project.... 
******************************************************************************/
 in_XML                VARCHAR2)
is
  --TRANSFER_PROCESS calling the hierarchy_insert_wrapper
  --EX: Transfer a Cost Center from one Hierarchy to another
  V_COUNT                          NUMBER := 1;
  V_LAST_LVL                       VARCHAR2(1);
  V_DTL_COUNT                      NUMBER;
  V_PREV_LVL_EXISTS                VARCHAR2(1);
  V_CURR_LVL_EXISTS                VARCHAR2(1);
  V_FOUND                          VARCHAR2(1):= 'N';
  V_HRCHY_DTL_LEVEL                HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
  V_HRCHY_DTL_PREV_LVL_VAL_FROM    HIERARCHY_DETAIL_HST.HRCHY_DTL_PREV_LVL_VAL%TYPE;
  V_HRCHY_DTL_CURR_LVL_VAL_FROM    HIERARCHY_DETAIL_HST.HRCHY_DTL_CURR_LVL_VAL%TYPE;
  V_HRCHY_DTL_CURR_ROW_VAL_FROM    HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE;
  V_HRCHY_DTL_NEXT_LVL_VAL_FROM    HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE;
  v_hierarchy_detail_row_to        HIERARCHY_DETAIL%ROWTYPE;
  V_HIERARCHY_DETAIL_ROW_FROM      HIERARCHY_DETAIL%ROWTYPE;
  v_xml_frag                       CLOB;

  V_ROW_DATA XMLTYPE := SYS.XMLTYPE(IN_XML);
  V_CONTEXT   VARCHAR2(1000);
  SQ          INTEGER;
  SE          VARCHAR2(100);

BEGIN
         IF (v_row_data.existsnode('/HIERARCHY_DETAIL/row_data') = 1) THEN
             v_hierarchy_detail_row_from.hrchy_hdr_name  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
             V_HRCHY_DTL_LEVEL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
         END IF;
 
         v_hierarchy_detail_row_to.hrchy_hdr_name    := v_hierarchy_detail_row_from.hrchy_hdr_name;
         v_hierarchy_detail_row_to.hrchy_dtl_level   := v_hrchy_dtl_level;
         v_hierarchy_detail_row_from.hrchy_dtl_level := v_hrchy_dtl_level;
      
         --Extracting the TO_HIERARCHY
         WHILE V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' || '[' || V_COUNT || ']') = 1 LOOP
             --building composite keys
             FOR i IN 1..v_hierarchy_detail_row_to.hrchy_dtl_level LOOP
                 IF i < v_hierarchy_detail_row_to.hrchy_dtl_level THEN
                    v_hierarchy_detail_row_to.hrchy_dtl_prev_lvl_val  :=  v_hierarchy_detail_row_to.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
                 END IF;
                 
                 IF v_hierarchy_detail_row_to.hrchy_dtl_curr_lvl_val IS NOT NULL THEN
                    v_hierarchy_detail_row_to.hrchy_dtl_curr_lvl_val := v_hierarchy_detail_row_to.HRCHY_DTL_CURR_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
                 ELSE
                    v_hierarchy_detail_row_to.HRCHY_DTL_CURR_LVL_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
                 end if;
                 
                 v_xml_frag := v_row_data.extract('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || v_count || ']'||'/attributes').getclobval();                 
                 V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_DESC          := V_ROW_DATA.extract('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_DTL_DESC/text()').GETSTRINGVAL();
                 v_hierarchy_detail_row_to.UPPER_LVL_VER_VALUE     := SYS.xmltype.CREATEXML(V_XML_FRAG);
                 v_hierarchy_detail_row_to.HRCHY_DTL_CURR_ROW_VAL  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').getstringval();
                 v_hierarchy_detail_row_to.HRCHY_DTL_EFF_DATE      := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_DTL_EFF_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');
                 
                 if (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY/HRCHY_DTL_EXP_DATE/text()') = 1) then
                      V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_EXP_DATE      := TO_DATE(V_ROW_DATA.extract('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY'); 
                 end if;
                 
             END LOOP;

             V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
             IF v_hierarchy_detail_row_to.hrchy_dtl_level = 1 THEN
                v_hierarchy_detail_row_to.hrchy_dtl_prev_lvl_val := '~~~';
             END IF;
             
             --Check if the previous level exists for the HRCHY_DTL_CURR_LVL_VAL 
             --in Hierarchy_Detail for the next level insert
             --if it exists then insert else raise an error
             IF v_hierarchy_detail_row_to.HRCHY_DTL_LEVEL <> '1'THEN
                v_prev_lvl_exists :=  ccn_hierarchy.check_previous_levels( NULL,
                                                                            v_hierarchy_detail_row_to.HRCHY_HDR_NAME,
                                                                            v_hierarchy_detail_row_to.HRCHY_DTL_LEVEL-'1',
                                                                            v_hierarchy_detail_row_to.HRCHY_DTL_PREV_LVL_VAL
                                                                           );
             else
                 v_prev_lvl_exists := 'Y';
             end if;
              
              IF V_PREV_LVL_EXISTS = 'Y' THEN
                 --check for the current record before the insert for TO_HIERARCHY
                 V_CONTEXT := 'Selecting the current level in Detail';
                 SELECT CASE WHEN COUNT(*) = 0 THEN
                      'N'
                     ELSE
                      'Y'
                     END CASE
                    INTO V_CURR_LVL_EXISTS
                   from HIERARCHY_DETAIL
                  WHERE HRCHY_HDR_NAME = v_hierarchy_detail_row_to.HRCHY_HDR_NAME 
                    and HRCHY_DTL_LEVEL = v_hierarchy_detail_row_to.HRCHY_DTL_LEVEL 
                    AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row_to.HRCHY_DTL_CURR_LVL_VAL;
                    
                    if v_curr_lvl_exists = 'N' then
                        --Transfer(Insert) to the new HIERARCHY   
                        v_context := 'Inserting the current level in Detail';
                        ccn_hierarchy.HIERARCHY_INSERT_WRAPPER(NULL, v_hierarchy_detail_row_to); 
                    ELSE
                        DBMS_OUTPUT.PUT_LINE('The Current Level already exists in Hierarchy Detail.');
                    END IF;
               ELSE
                  DBMS_OUTPUT.PUT_LINE('The Previous Level does not exist in Hierarchy Detail.');
                  --RAISE PREVIOUS_LEVEL_NOT_EXISTS_ERR;
               END IF;  
      
         V_DTL_COUNT  := v_hierarchy_detail_row_to.HRCHY_DTL_LEVEL -1;
         --Loop through all the levels to check for existence of previous records in History
         FOR J IN REVERSE 1..V_DTL_COUNT LOOP
            IF V_FOUND = 'N' THEN --flag to exit if Previous level exists
               --building composite keys(from level HRCHY_DTL_LEVEL-1)
               FOR i IN 1..V_DTL_COUNT
               LOOP
                   IF i < V_DTL_COUNT THEN
                      v_hierarchy_detail_row_from.HRCHY_DTL_PREV_LVL_VAL :=  v_hierarchy_detail_row_from.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
                   END IF;
                   
                   IF v_hierarchy_detail_row_from.HRCHY_DTL_CURR_LVL_VAL IS NOT NULL THEN
                      v_hierarchy_detail_row_from.HRCHY_DTL_CURR_LVL_VAL := v_hierarchy_detail_row_from.HRCHY_DTL_CURR_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
                   ELSE
                      v_hierarchy_detail_row_from.HRCHY_DTL_CURR_LVL_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
                   END IF;
                      v_hierarchy_detail_row_from.HRCHY_DTL_CURR_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
               END LOOP;

             BEGIN
                v_hierarchy_detail_row_from.HRCHY_DTL_DESC := CCN_HIERARCHY.HIERARCHY_DESC_RETURN(v_hierarchy_detail_row_from.HRCHY_DTL_CURR_LVL_VAL
                																				 ,v_hierarchy_detail_row_to.HRCHY_HDR_NAME
                																				);
             
             EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_DESC := NULL;
             END;
             
             IF V_HRCHY_DTL_LEVEL = V_DTL_COUNT+1 THEN --last level
                v_hierarchy_detail_row_from.HRCHY_DTL_NEXT_LVL_VAL := v_hierarchy_detail_row_from.HRCHY_DTL_CURR_LVL_VAL || v_hierarchy_detail_row_to.HRCHY_DTL_CURR_ROW_VAL; 
             END IF;
             
             IF V_DTL_COUNT = 1 THEN
                V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL := '~~~';
             END IF;
            
             V_HRCHY_DTL_PREV_LVL_VAL_FROM := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL;
             V_HRCHY_DTL_CURR_LVL_VAL_FROM := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
             V_HRCHY_DTL_CURR_ROW_VAL_FROM := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_ROW_VAL;
             V_HRCHY_DTL_NEXT_LVL_VAL_FROM := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL;
             V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_EFF_DATE := TRUNC(SYSDATE);
             V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_EXP_DATE     := V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_EXP_DATE;
              -----------------------------------------------------------
              --deleting the curr row from HIERARCHY_DETAIL for last level
              IF V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_LEVEL = V_DTL_COUNT +1  THEN
                 V_CONTEXT := 'Deleting the current level in Detail';
                 V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
                 V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_ROW_VAL := V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_ROW_VAL; 
                 --V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL || V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_ROW_VAL; 
                
                    --Transfer(Insert) to the new Hierarchy   
                    V_CONTEXT := 'Inserting last level in Hist ';
                    --assignment of the values for the last level
                    V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_LEVEL        := V_HRCHY_DTL_LEVEL;
                    V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_DESC         := V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_DESC;
                    V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
                    V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL;
                    V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL := V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_NEXT_LVL_VAL;
                                        
                   --deleting the current level in HIERARCHY_DETAIL
                   DELETE FROM HIERARCHY_DETAIL
                    where hrchy_hdr_name = v_hierarchy_detail_row_to.hrchy_hdr_name
                      AND HRCHY_DTL_LEVEL = V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_LEVEL 
                      and hrchy_dtl_curr_lvl_val = v_hierarchy_detail_row_from.hrchy_dtl_curr_lvl_val
                      and HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row_from.HRCHY_DTL_NEXT_LVL_VAL;

                   ccn_hierarchy.HIERARCHY_INSERT_WRAPPER('H', V_HIERARCHY_DETAIL_ROW_FROM);

                    --deleting/updating the previous level in HIERARCHY_DETAIL
                    --checking to see if this is the last level, if so then update else delete
                    V_CONTEXT := 'Checking if the last level in Detail';
                    SELECT CASE WHEN COUNT(*) > 1 THEN
                            'N'
                         ELSE
                            'Y'
                         END CASE
                         INTO V_LAST_LVL
                        from HIERARCHY_DETAIL
                       WHERE HRCHY_HDR_NAME = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_HDR_NAME
                         AND HRCHY_DTL_LEVEL = V_DTL_COUNT 
                         AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
                      
                      --if (previous) not the last level then delete, else update
                      IF V_LAST_LVL = 'N' THEN
                         V_CONTEXT := 'Deleting for prev level';
                         DELETE FROM HIERARCHY_DETAIL
                          where hrchy_hdr_name = v_hierarchy_detail_row_from.hrchy_hdr_name
                            AND HRCHY_DTL_LEVEL =  V_DTL_COUNT
                            and hrchy_dtl_curr_lvl_val = v_hierarchy_detail_row_from.hrchy_dtl_curr_lvl_val
                            and HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row_from.HRCHY_DTL_NEXT_LVL_VAL;
                      ELSE
                         v_context := 'Updating the last level';
                         UPDATE HIERARCHY_DETAIL
                            SET HRCHY_DTL_NEXT_LVL_VAL = '~~~'
                          WHERE HRCHY_HDR_NAME = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_HDR_NAME
                            and hrchy_dtl_curr_lvl_val = v_hierarchy_detail_row_from.hrchy_dtl_curr_lvl_val
                            and HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row_from.HRCHY_DTL_NEXT_LVL_VAL;
                      END IF;
                 END IF;
               
                  --re-assigning the fields for the prev level
                  V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL := V_HRCHY_DTL_PREV_LVL_VAL_FROM;
                  V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL := V_HRCHY_DTL_CURR_LVL_VAL_FROM;
                  V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_ROW_VAL := V_HRCHY_DTL_CURR_ROW_VAL_FROM;
                  V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL := V_HRCHY_DTL_NEXT_LVL_VAL_FROM;
                  V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_LEVEL := V_DTL_COUNT;
                  
               --Check if the previous level exists for the HRCHY_DTL_NEXT_LVL_VAL in HISTORY 
               --for FROM_HIERARCHY
               v_context := 'Checking previous levels';
               IF v_hierarchy_detail_row_from.HRCHY_DTL_LEVEL <> '1'THEN
                  v_prev_lvl_exists := ccn_hierarchy.check_previous_levels( 'H',
                                                                            V_HIERARCHY_DETAIL_ROW_TO.HRCHY_HDR_NAME,
                                                                            V_DTL_COUNT,
                                                                            V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL
                                                                           );
               else
                 v_prev_lvl_exists := 'Y';
               end if;
             
                 v_context := 'Inserting in Hist';
                 V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_LEVEL := V_DTL_COUNT;
                 if v_prev_lvl_exists = 'N' then
                    ccn_hierarchy.HIERARCHY_INSERT_WRAPPER('H', V_HIERARCHY_DETAIL_ROW_FROM);
                 ELSE
                     IF V_DTL_COUNT = V_HRCHY_DTL_LEVEL-1 ---(N-1) level check
                     THEN
                         UPDATE HIERARCHY_DETAIL_HST
                            SET HRCHY_DTL_NEXT_LVL_VAL = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL
                          WHERE UPPER(HRCHY_HDR_NAME)  = UPPER(V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_HDR_NAME)
                            AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL
                            AND HRCHY_DTL_NEXT_LVL_VAL = '~~~'
                            AND HRCHY_DTL_NEXT_LVL_VAL <> V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL;
                      END IF;
                      V_FOUND := 'Y';
                 END IF;
              --reset all the values for the next level
              V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
              V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL := NULL;
              V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_ROW_VAL := NULL;
              V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL := NULL;
              V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_EFF_DATE   := NULL;
              V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_EXP_DATE   := NULL;
              V_DTL_COUNT := V_DTL_COUNT-1;
            END IF;
        END LOOP;
          --reset all the values for the next level
          V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_LVL_VAL := NULL;
          V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_ROW_VAL := NULL;
          V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_PREV_LVL_VAL := NULL;
          V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_NEXT_LVL_VAL := NULL;
          V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_EFF_DATE   := NULL;
          V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_EXP_DATE   := NULL;
          V_FOUND := 'N';
          V_COUNT := V_COUNT +1;
          
END LOOP;

EXCEPTION

     /*WHEN RAISE PREVIOUS_LEVEL_NOT_EXISTS_ERR THEN
          V_CODE := ERRNUMS.EN_INVALID_LVL_ERR; 
          ERRPKG.RAISE_ERR(V_CODE, 'HIERARCHY_TRANSFER_PROCESS.PREVIOUS_LEVEL_NOT_EXISTS_ERR ',
                           'CCN_HIERARCHY_PKG ' || ' HRCHY_DTL_PREV_LVL_VAL ' || V_HRCHY_DTL_PREV_LVL_VAL || ' for level ' || V_HRCHY_DTL_LEVEL ||
                             'Not Found' );*/
      WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           
           v_context := v_context || ' ' || sq || ' ' || se; 
           DBMS_OUTPUT.PUT_LINE('ERROR -' );
           ERRPKG.RAISE_ERR(-20004,'HIERARCHY_TRANSFER_PROCESS ',V_CONTEXT); 
END HIERARCHY_TRANSFER_PROCESS;  


PROCEDURE HIERARCHY_HDR_PICKLIST(	
/**********************************************************
	HIERARCHY_HDR_DESC_PICKLIST

	This procedure will return the data in ref cursor
        from HIERARCHY_HEADER and HIERARCHY_DESCRIPTION
        

created : 04/25/2013 kdp CCN Project....
**********************************************************/
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
  )
 
IS
	  SQ          INTEGER;
	  SE          VARCHAR2(100);
    
	  V_CONTEXT           VARCHAR2(100);
	  V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
  
   BEGIN
        
          OPEN OUT_HIERARCHY_REF_CUR FOR
		select distinct hrchy_hdr_name 
		from HIERARCHY_DESCRIPTION;
         
  EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HDR_DESC_PICKLIST',V_CONTEXT);  
END HIERARCHY_HDR_PICKLIST;

END CCN_HIERARCHY;

@


1.15
log
@for loading cost centers
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d59 44
a102 2
PROCEDURE hierarchy_insert_wrapper
( in_ind in varchar2,
d357 1
a357 1
				CONNECT BY  PRIOR AR.CH =  AR.PA
d791 2
d803 1
a803 1
             
d819 7
a825 6
  EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HEADER_INSERT',V_CONTEXT); 
d1044 1
a1044 1
              v_hierarchy_detail_row.hrchy_dtl_exp_date := null;
d1063 1
@


1.14
log
@hier changes
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a261 1
			    , 	IN_CURR_ROW_VAL		IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
d265 1
d649 1
a649 1
              WHILE V_COUNT < V_HRCHY_DTL_LEVEL LOOP
d658 4
a661 5
            FROM HIERARCHY_DETAIL 
         WHERE UPPER(HRCHY_HDR_NAME) = UPPER(V_HRCHY_HDR_NAME)
           AND HRCHY_DTL_LEVEL = V_HRCHY_DTL_LEVEL
           AND HRCHY_DTL_PREV_LVL_VAL = DECODE( V_HRCHY_DTL_LEVEL, 1, HRCHY_DTL_PREV_LVL_VAL, V_CURR_VAL)
         ORDER BY HRCHY_DTL_CURR_ROW_VAL;
@


1.13
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d117 1
a117 2
             AND HRCHY_HDR_NAME = in_HRCHY_HDR_NAME
             ;
d249 26
d276 57
d576 1
d579 1
a579 1
          , HRCHY_DTL_EFF_DATE
d582 5
a586 4
            FROM HIERARCHY_DETAIL 
         WHERE UPPER(HRCHY_HDR_NAME) = UPPER(V_HRCHY_HDR_NAME)
           AND HRCHY_DTL_LEVEL = V_HRCHY_DTL_LEVEL
           AND HRCHY_DTL_PREV_LVL_VAL = DECODE( V_HRCHY_DTL_LEVEL, 1, HRCHY_DTL_PREV_LVL_VAL, V_CURR_VAL)
d709 1
a709 1
          FROM HIERARCHY_HEADER HH, HIERARCHY_DESCRIPTION HD
d744 2
a745 2
    v_XML xmltype := sys.xmltype(in_XML);
    
d770 2
a771 2
                                     VALUES( V_HRCHY_HDR_NAME,
                                             V_HRCHY_HDR_LEVELS,
d841 2
a842 1
    SE varchar2(100);
d846 1
d848 1
a848 1
    V_COUNT 			INTEGER := 1;
a857 1
        -- IF (v_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS') = 1) THEN
d870 9
d891 1
a891 1
                                          VALUES( V_HRCHY_HDR_NAME,
d896 1
a896 2
         --END IF;
         
d901 6
a906 1
  EXCEPTION WHEN OTHERS THEN
d951 2
d954 5
a958 4
  
  V_CONTEXT   VARCHAR2(100);
  SQ          INTEGER;
  SE          varchar2(100);
d960 2
a961 2
  V_LVL_EXISTS                varchar2(1);
  V_XML_FRAG                  clob;
d979 1
a979 1
      
d1007 12
a1018 1
          then
d1080 1
a1080 1
                       insert into hierarchy_detail values v_hierarchy_detail_row;
d1115 4
a1118 1
  
d1280 2
a1281 1
                 V_XML_FRAG := V_ROW_DATA.extract('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/attributes').GETCLOBVAL();                 V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_DESC          := V_ROW_DATA.extract('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_DTL_DESC/text()').GETSTRINGVAL();
d1546 2
a1547 1
END CCN_HIERARCHY;@


1.12
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d851 4
a854 2
  V_CURR_LVL_EXISTS       VARCHAR2(1);
  v_hierarchy_detail_row  HIERARCHY_DETAIL%ROWTYPE;
d883 1
a883 1
   FOR j IN REVERSE v_hierarchy_detail_row.HRCHY_DTL_LEVEL-2..v_hierarchy_detail_row.HRCHY_DTL_LEVEL
d949 1
d970 2
a971 1
                    ELSE
d980 1
a980 1
                            AND HRCHY_DTL_NEXT_LVL_VAL = '~~~'
d982 2
a983 1
                     END IF; --V_PREV_LVL_EXISTS check
d994 1
a994 1
     
@


1.11
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d89 3
a91 3
            V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
            DBMS_OUTPUT.PUT_LINE( 'HIERARCHY_INSERT_WRAPPER - '|| V_CONTEXT); 
            ERRPKG.RAISE_ERR(-20004, 'HIERARCHY_INSERT_WRAPPER -', V_CONTEXT);  
d958 1
a958 1
                    AND HRCHY_DTL_LEVEL = v_hierarchy_detail_row.HRCHY_DTL_LEVEL 
d960 2
a961 1
                    AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL;
d975 3
a977 1
                            AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL;
d1204 1
a1204 1
                    IF V_CURR_LVL_EXISTS = 'N' THEN
d1206 2
a1207 2
                        V_CONTEXT := 'Inserting the current level in Detail';
                        HIERARCHY_INSERT_WRAPPER(NULL, v_hierarchy_detail_row_to); 
d1278 1
a1278 1
                    WHERE HRCHY_HDR_NAME = V_HIERARCHY_DETAIL_ROW_TO.HRCHY_HDR_NAME
d1280 2
a1281 1
                      AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
d1283 1
a1283 1
                   HIERARCHY_INSERT_WRAPPER('H', V_HIERARCHY_DETAIL_ROW_FROM);
d1303 1
a1303 1
                          WHERE HRCHY_HDR_NAME = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_HDR_NAME
d1305 2
a1306 1
                            AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
d1312 2
a1313 1
                            AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL;
d1326 12
a1337 7
               V_CONTEXT := 'Checking previous levels';
               v_prev_lvl_exists := ccn_hierarchy.check_previous_levels( 'H',
                                                                         V_HIERARCHY_DETAIL_ROW_TO.HRCHY_HDR_NAME,
                                                                         V_DTL_COUNT,
                                                                         V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_NEXT_LVL_VAL
                                                                        );
                 V_CONTEXT := 'Inserting in Hist';
d1339 2
a1340 2
                 if V_PREV_LVL_EXISTS = 'N' then
                    HIERARCHY_INSERT_WRAPPER('H', V_HIERARCHY_DETAIL_ROW_FROM);
@


1.10
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d668 2
a669 2
   BEGIN
         IF (v_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
d714 1
a714 1
      <HRCHY_HDR_LVL_DESC>AREA</HRCHY_HDR_DESC> 
d733 1
a733 1
      <HRCHY_HDR_LVL_DESC>DIST</HRCHY_HDR_DESC> 
d763 1
a763 1
    V_COUNT 			INTEGER := 0;
d826 15
a840 10
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>05</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>04</HRCHY_LEVEL2> 
      <HRCHY_LEVEL3>86</HRCHY_LEVEL3>
      <HRCHY_LEVEL4>785900</HRCHY_LEVEL4>
      <HRCHY_DTL_DESC>PF WEST REGION</HRCHY_DTL_DESC>
      <HRCHY_DTL_EFF_DATE>01-JAN-2013</HRCHY_DTL_EFF_DATE>
      <HRCHY_DTL_EXP_DATE>01-JAN-9999</HRCHY_DTL_EXP_DATE>
      <UPPER_LVL_VER_VALUE>01</UPPER_LVL_VER_VALUE>
d866 5
a870 3
       v_hierarchy_detail_row.HRCHY_DTL_LEVEL := V_XML.extract('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
       v_hierarchy_detail_row.hrchy_dtl_eff_date  := v_xml.extract('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EFF_DATE/text()').getstringval();
       --V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE  := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(); 
d909 11
a919 7
              V_CONTEXT := 'Check the Prev levels in Detail';
              V_LVL_EXISTS :=  CCN_HIERARCHY.CHECK_PREVIOUS_LEVELS( NULL,
                                                                    v_hierarchy_detail_row.hrchy_hdr_name,
                                                                    v_hierarchy_detail_row.HRCHY_DTL_LEVEL -1,
                                                                    v_hierarchy_detail_row.HRCHY_DTL_PREV_LVL_VAL
                                                                   );

d934 1
a934 3
                    AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL
                    AND HRCHY_DTL_CURR_ROW_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_ROW_VAL
                    AND (HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_NEXT_LVL_VAL OR HRCHY_DTL_NEXT_LVL_VAL = '~~~');
d939 1
a939 1
                       hierarchy_insert_wrapper(NULL, v_hierarchy_detail_row);
d960 1
a960 2
                    AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL
                    AND (HRCHY_DTL_NEXT_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_NEXT_LVL_VAL OR HRCHY_DTL_NEXT_LVL_VAL = '~~~');
d974 1
a974 3
                            AND HRCHY_DTL_CURR_LVL_VAL = v_hierarchy_detail_row.HRCHY_DTL_CURR_LVL_VAL
                            AND HRCHY_DTL_NEXT_LVL_VAL = '~~~'
                            AND HRCHY_DTL_NEXT_LVL_VAL <> v_hierarchy_detail_row.HRCHY_DTL_NEXT_LVL_VAL;
d1162 5
a1166 1
                 V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_EXP_DATE      := TO_DATE(V_ROW_DATA.extract('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || V_COUNT || ']'||'/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY'); 
d1177 10
a1186 6
             v_prev_lvl_exists :=  ccn_hierarchy.check_previous_levels( NULL,
                                                                        v_hierarchy_detail_row_to.HRCHY_HDR_NAME,
                                                                        v_hierarchy_detail_row_to.HRCHY_DTL_LEVEL-'1',
                                                                        v_hierarchy_detail_row_to.HRCHY_DTL_PREV_LVL_VAL
                                                                       );

@


1.9
log
@sync CVS
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
d499 1
a499 1
          , xmltype.getStringVal(UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
d515 75
d1401 1
a1401 2
END CCN_HIERARCHY;

@


1.8
log
@changes to save procedures
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d135 4
a138 4
				IN_HEADER_NAME 	IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    , 	IN_CURR_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
			    ,	IN_LEVEL	IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_TRAVERSE	IN VARCHAR2 DEFAULT 'UP'
d161 4
a164 2
				SELECT DISTINCT
				AR.HRCHY_HDR_NAME,
d172 2
a173 2
                                xmltype.getStringVal(AR.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE,
                                AR.HRCHY_DTL_CURR_ROW_VAL
d176 1
a176 1
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_LVL_VAL ) lev,
d178 11
a188 2
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa, 
						 hr.* 
d191 5
a195 6
				)  AR      
				START WITH AR.LEV = IN_LEVEL || IN_CURR_VAL
				CONNECT BY  PRIOR AR.PA =  AR.CH
        order by lev;	
        			
        			
d199 5
a203 4
        	
        		OPEN  OUT_HIERARCHY_REF_CUR FOR
				SELECT DISTINCT  
				AR.HRCHY_HDR_NAME,
d211 2
a212 2
                                xmltype.getStringVal(AR.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE,
                                AR.HRCHY_DTL_CURR_ROW_VAL
d215 1
a215 1
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_LVL_VAL ) lev,
d217 11
a227 2
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa, 
						 hr.* 
d230 4
a233 5
				)  AR      
				START WITH AR.LEV = IN_LEVEL || IN_CURR_VAL
				CONNECT BY  PRIOR  AR.CH =   AR.PA
        order by lev;
        		
d263 1
a263 1
			    , IN_CURR_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
d296 3
a298 2
				SELECT DISTINCT  
				AR.HRCHY_HDR_NAME,
d306 2
a307 2
                                xmltype.getStringVal(AR.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE,
                                AR.HRCHY_DTL_CURR_ROW_VAL
d310 1
a310 1
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_LVL_VAL ) lev,
d312 11
a322 2
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa, 
						 hr.* 
d325 6
a330 6
				   AND HRCHY_DTL_EFF_DATE = NVL(EFF_DATE, HRCHY_DTL_EFF_DATE)
				)  AR      
				START WITH AR.LEV = IN_LEVEL || IN_CURR_VAL
				CONNECT BY  PRIOR AR.PA =  AR.CH 
        order by lev;		
        			
d337 3
a339 2
				SELECT DISTINCT  
				AR.HRCHY_HDR_NAME,
d347 2
a348 2
                                xmltype.getStringVal(AR.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE,
                                AR.HRCHY_DTL_CURR_ROW_VAL
d351 1
a351 1
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_LVL_VAL ) lev,
d353 11
a363 2
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa, 
						 hr.* 
d367 4
a370 5
				)  AR      
				START WITH AR.LEV = IN_LEVEL || IN_CURR_VAL
				CONNECT BY  PRIOR  AR.CH =   AR.PA
        order by lev;
        		
@


1.7
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d10 112
a121 1
	
d170 2
a171 1
        AR.UPPER_LVL_VER_VALUE
d200 2
a201 1
        AR.UPPER_LVL_VER_VALUE
d260 1
a260 2
/* Selecting the Maximum date that is less than or equal to the effective date passed in
		   So as to get the structure as of that date */
d262 1
a262 1
       V_CONTEXT := 'Select aximum date that is less than or equal to the effective date passed';
d286 2
a287 1
        AR.UPPER_LVL_VER_VALUE
d296 1
a296 1
				   AND HRCHY_DTL_EFF_DATE = EFF_DATE
d317 2
a318 1
        AR.UPPER_LVL_VER_VALUE
d325 1
a325 1
				  FROM HIERARCHY_DETAIL hr
d399 888
a1286 1
	
@


1.6
log
@*** empty log message ***
@
text
@d288 1
a288 1
/@


1.5
log
@Added new procedures
@
text
@d1 1
d4 1
d11 2
d29 2
a30 1
			    ,   OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
d59 2
a60 1
				AR.HRCHY_DTL_DESC
d71 2
a72 1
				CONNECT BY  PRIOR AR.PA =  AR.CH;	
d88 2
a89 1
				AR.HRCHY_DTL_DESC
d100 2
a101 1
				CONNECT BY  PRIOR  AR.CH =   AR.PA;
d106 1
a106 1
	EXCEPTION WHEN OTHERS THEN
d174 2
a175 1
				AR.HRCHY_DTL_DESC
d187 2
a188 1
				CONNECT BY  PRIOR AR.PA =  AR.CH ;		
d204 2
a205 1
				AR.HRCHY_DTL_DESC
d217 2
a218 1
				CONNECT BY  PRIOR  AR.CH =   AR.PA;
d223 1
a223 1
	EXCEPTION WHEN OTHERS THEN
d235 51
d288 1
a288 1

@


1.4
log
@added comments
@
text
@a0 1
create or replace
a2 1
	
a8 2
	

d97 1
a97 1
EXCEPTION WHEN OTHERS THEN
d210 1
a210 1
EXCEPTION WHEN OTHERS THEN
d224 1
a224 1
/@


1.3
log
@added error handling
@
text
@d47 1
a47 1
 --We need level and value to get the hierarchy as sometimes the value accross levels could be the same
d156 1
a156 1
 --We need level and value to get the hierarchy as sometimes the value accross levels could be the same
@


1.2
log
@changes to include history structure
@
text
@d1 1
a1 1
CREATE OR REPLACE
d14 11
d27 1
a28 1
			    ,	IN_HIST_DATE	IN HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE DEFAULT NULL
d34 82
d117 1
a117 1
	RETURN_HIERARCHY
d120 2
a121 2
	from the hierarchy_detail table based on header name, current value , traverse ( UP or DOWN DEFAULT is UP)
	and structure as of history date (NULL if you want current structure which is also the DEFAULT)
d126 8
d137 3
d143 1
a143 14
		/* If the date passed is NULL then return the current structure */
	
		IF IN_HIST_DATE IS NULL THEN
		
			OPEN  OUT_HIERARCHY_REF_CUR FOR
				SELECT DISTINCT * FROM HIERARCHY_DETAIL
				WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				AND HRCHY_DTL_EXP_DATE IS NULL
				START WITH HRCHY_DTL_CURR_LVL_VAL = IN_CURR_VAL
        			CONNECT BY  PRIOR HRCHY_DTL_CURR_LVL_VAL =   DECODE(IN_TRAVERSE,'UP',HRCHY_DTL_NEXT_LVL_VAL,HRCHY_DTL_PREV_LVL_VAL)   ;
				
		ELSE
		
		/* Selecting the Maximum date that is less than or equal to the effective date passed in
d146 2
d151 31
a181 10
			   AND HRCHY_DTL_EFF_DATE <= IN_HIST_DATE;
			   
			   
			OPEN  OUT_HIERARCHY_REF_CUR FOR
				SELECT DISTINCT * FROM HIERARCHY_DETAIL
				WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				--AND HRCHY_DTL_EXP_DATE IS NOT NULL
				AND HRCHY_DTL_EFF_DATE = EFF_DATE
				START WITH HRCHY_DTL_CURR_LVL_VAL = IN_CURR_VAL
        			CONNECT BY  PRIOR HRCHY_DTL_CURR_LVL_VAL =   DECODE(IN_TRAVERSE,'UP',HRCHY_DTL_NEXT_LVL_VAL,HRCHY_DTL_PREV_LVL_VAL);
d183 41
a223 3
		END IF;	   
			   
			   
d225 1
a225 4
	  
	END RETURN_HIERARCHY;
	
	--Error handling to be put
d228 1
a228 1
  /@


1.1
log
@First
@
text
@d6 1
a6 1
This package is intended will return data from the hierarchy_detail table
d15 3
a17 3
			    , 	IN_LEVEL	IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_TRAVERSE	IN VARCHAR2
			    ,   IN_INCLUDE	IN CHAR
d26 4
a29 2
	This procedure is intended to return a ref cursor with dh data from 
	from the hierarchy table based on header name, level and
d33 3
a35 1
        IS                  
d39 3
a41 2
		IF IN_TRAVERSE = 'UP' THEN
		
d46 3
a48 3
				START WITH HRCHY_DTL_LEVEL= DECODE(IN_INCLUDE,'Y',IN_LEVEL,TO_NUMBER(IN_LEVEL) - 1)
				CONNECT BY PRIOR HRCHY_DTL_CURR_LVL_VAL =  HRCHY_DTL_NEXT_LVL_VAL   ;
				
d51 10
a60 1
			
d64 8
a71 5
				START WITH HRCHY_DTL_LEVEL= DECODE(IN_INCLUDE,'Y',IN_LEVEL,TO_NUMBER(IN_LEVEL) + 1)
				CONNECT BY PRIOR HRCHY_DTL_CURR_LVL_VAL =  HRCHY_DTL_PREV_LVL_VAL  ;
				
		END IF;		

d75 2
@

