create or replace PACKAGE BODY CALL_BUSINESS_RULES_PKG as 
/***************************************************************************** 
This package BODY has procedures and functions related to the CALL_BUSINESS_RULES Package

created : 03/05/2013 TAL CCN project
changes : 12/16/2014 AXK326 CCN Project Team....
          Code changes made after deleting the sales manager link from the Territory Table
changed : 04/17/2017 rxa457 CCN Project Team....
          Added Business Rules call  related to table DISPATCH_TERMINAL

******************************************************************************/
 

PROCEDURE CALL_BUSINESS_RULES_SP  ( 
/******************************************************************************
	CALL_BUSINESS_RULES_SP   --    Business Rules Calling Procedure

	This procedure is intended to call the Business Rules Package for all 
  Cost Center table entries returned from the Database.
  
created : 02/26/2013 TAL CCN Project....
changed : 05/24/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
Changed:  03/08/2018 mxv711 CCN Project Team..
          asp400:asp-763 changes to handle LAD_CUSTOMER in CCN
*******************************************************************************/
  
   in_Cost_Center_Code      IN   COST_CENTER.Cost_Center_Code%type  
  )
    
is

  v_code number;
  v_errm  varchar2(500);  
  v_note  varchar2(200);
        
  v_ADDRESS_CAN_rowtype    ADDRESS_CAN%rowtype;
  v_ADDRESS_MEX_rowtype    ADDRESS_MEX%rowtype;
  v_ADDRESS_OTH_rowtype    ADDRESS_OTHER%rowtype;
  v_ADDRESS_USA_rowtype    ADDRESS_USA%rowtype;   
  v_ADDRESS_BRB_rowtype    ADDRESS_BRB%rowtype;   
	v_ADMIN_rowtype          ADMINISTRATION%rowtype;
  v_LAD_CUSTOMER_rowtype   LAD_CUSTOMER%rowtype;
	v_BANKCARD_rowtype       BANK_CARD%rowtype;
	v_COST_CENTER_rowtype    COST_CENTER%rowtype;
	v_MARKETING_rowtype      MARKETING%rowtype;
	v_OTHER_rowtype          OTHER%rowtype;
	v_PHONE_rowtype          PHONE%rowtype;

	v_PHONE_PRI_rowtype      PHONE%rowtype;
	v_PHONE_SCD_rowtype      PHONE%rowtype;
	v_POLLING_rowtype        POLLING%rowtype;
	v_REAL_ESTATE_rowtype    REAL_ESTATE%rowtype;
	v_SALES_REP_rowtype      SALES_REP%rowtype;
	v_STATUS_rowtype         STATUS%rowtype;

	v_STORE_rowtype          STORE%rowtype;
	v_TERMINAL_rowtype       TERMINAL%rowtype;
	v_TERRITORY_rowtype      TERRITORY%rowtype;  
	v_TYPE_rowtype           TYPE%rowtype;
    V_DISPATCH_TERMINAL_ROWTYPE DISPATCH_TERMINAL%ROWTYPE;
--------------------------------------------------------------------------------
	BEGIN  --  Begin Call_Business_Rules_SP
--------------------------------------------------------------------------------

			CALL_BUSINESS_RULES_PKG.BUSINESS_RULES_INPUT_1 (
         in_cost_center_code   
				,v_COST_CENTER_rowtype   
        ,v_ADMIN_rowtype
        ,v_LAD_CUSTOMER_rowtype
				,v_BANKCARD_rowtype    
				,v_MARKETING_rowtype    
				,v_OTHER_rowtype         
				,v_PHONE_rowtype         
			);	
      

      CALL_BUSINESS_RULES_PKG.BUSINESS_RULES_INPUT_2 (
         in_cost_center_code
				,v_PHONE_PRI_rowtype
				,v_PHONE_SCD_rowtype
				,v_POLLING_rowtype
				,v_REAL_ESTATE_rowtype
				,v_SALES_REP_rowtype
				,v_STATUS_rowtype
        ,v_COST_CENTER_rowtype
			);
      
      
			CALL_BUSINESS_RULES_PKG.BUSINESS_RULES_INPUT_3 (
         in_cost_center_code   
				,v_STORE_rowtype      
				,v_TERMINAL_rowtype      
				,v_TERRITORY_rowtype
				,v_TYPE_rowtype         
        ,v_COST_CENTER_rowtype
			);

--------------------------------------------------------------------------------
    BEGIN  --  Begin Process of Business Rules for the next Cost-Center	
--------------------------------------------------------------------------------

      	CCN_BUSINESS_RULES_PKG.BUSINESS_RULES_SP( 
         v_ADDRESS_CAN_rowtype
        ,v_ADDRESS_MEX_rowtype
        ,v_ADDRESS_OTH_rowtype
        ,v_ADDRESS_USA_rowtype   
        ,v_ADDRESS_BRB_rowtype   
   		,v_ADMIN_rowtype
        ,v_LAD_CUSTOMER_rowtype
        ,v_BANKCARD_rowtype       
        ,v_COST_CENTER_rowtype   
        ,v_MARKETING_rowtype     
        ,v_OTHER_rowtype         
        ,v_PHONE_rowtype   
        ,v_PHONE_PRI_rowtype      
        ,v_PHONE_SCD_rowtype      
        ,v_POLLING_rowtype     
        ,v_REAL_ESTATE_rowtype
        ,v_SALES_REP_ROWTYPE      
        ,v_STATUS_ROWTYPE         
        ,v_STORE_rowtype      
        ,V_DISPATCH_TERMINAL_ROWTYPE
        ,v_TERMINAL_rowtype     
        ,v_TERRITORY_rowtype  
        ,v_TYPE_rowtype         
        );

--------------------------------------------------------------------------------
    EXCEPTION  --  Handle Exceptions from Business Rules for one Cost Center
--------------------------------------------------------------------------------

      when others then
--            v_COST_CENTER_rowtype.cost_center_code || '" ' );

        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,13,500);
    CALL_BUSINESS_RULES_PKG.LOG_PROCEDURE_ERRORS(v_code, 'CALL_BUSINESS_RULES',
                      v_errm, v_COST_CENTER_rowtype.cost_center_code, v_note ) ;

--------------------------------------------------------------------------------
    END;   --  Ended Process of Business Rules for the next Cost-Center	
--------------------------------------------------------------------------------
      
--------------------------------------------------------------------------------
    EXCEPTION  --  Exceptions
--------------------------------------------------------------------------------

    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CALL_BUSINESS_RULES_SP ' ||
                            v_errm || 'in Others' );
        
--------------------------------------------------------------------------------
END CALL_BUSINESS_RULES_SP;  --  Call_Business_Rules_SP
--------------------------------------------------------------------------------


PROCEDURE BUSINESS_RULES_INPUT_1 (
/******************************************************************************
	BUSINESS_RULES_INPUT_1

	This procedure Build the Business Rules 1 Rowtype ROWs
			COST_CENTER%rowtype
			ADMINISTRATION%rowtype
			BANK_CARD%rowtype
			MARKETING%rowtype
			OTHER%rowtype
			PHONE_FAX%rowtype

created : 02/21/2013 MDH -- CCN Project....
Changed:  03/08/2018 mxv711 CCN Project Team..
          asp400:asp-763 changes to handle LAD_CUSTOMER in CCN
******************************************************************************/
/***  below are the fields required for the Business_Rules_Input call: Cost_Center_code, Table_Rowtypes ***/
   in_cost_center            in   varchar2
  ,v_COST_CENTER_rowtype     out  COST_CENTER%rowtype
  ,v_ADMINISTRATION_rowtype  out  ADMINISTRATION%rowtype
  ,v_LAD_CUSTOMER_rowtype    out  LAD_CUSTOMER%rowtype
  ,v_BANK_CARD_rowtype       out  BANK_CARD%rowtype
  ,v_MARKETING_rowtype       out  MARKETING%rowtype
  ,v_OTHER_rowtype           out  OTHER%rowtype
  ,v_PHONE_FAX_rowtype       out  PHONE%rowtype
)

 is 

   invalid_cost_center_exp    exception;  -- Error #01
   
 v_code  number;
 v_errm  varchar2(500);
 v_curr_date date := sysdate;
 

BEGIN  --  BUSINESS_RULES_INPUT_1

--------------------------------------------------------------------------------
  Begin  --  Select Cost Center
--------------------------------------------------------------------------------
   	select * into v_COST_CENTER_rowtype
     from COST_CENTER 
    where COST_CENTER.cost_center_code  =  in_cost_center; 
      
    exception
      when no_data_found then 
         raise invalid_cost_center_exp;
-- See Error #01.

--------------------------------------------------------------------------------
  End;  --  End Select Cost Center
--------------------------------------------------------------------------------


/******************************************************************************/
  If  v_cost_center_rowtype.category  =  'A'  then  --  Check for ADMINISTRATION
/******************************************************************************/
  
--------------------------------------------------------------------------------
    Begin  --  Select Administration
--------------------------------------------------------------------------------
      select * into v_ADMINISTRATION_rowtype
       from ADMINISTRATION 
      where ADMINISTRATION.cost_center_code  =  in_cost_center;
      
      exception
        when no_data_found then 
            v_ADMINISTRATION_rowtype  := null;

--------------------------------------------------------------------------------
    End;  --  End Select Administration
--------------------------------------------------------------------------------
                        
/******************************************************************************/
  End If;  --  END Check for ADMINISTRATION
/******************************************************************************/


/******************************************************************************/
  If  v_cost_center_rowtype.category  =  'C'  then  --  Check for LAD_CUSTOMER
/******************************************************************************/

--------------------------------------------------------------------------------
    Begin  --  Select LAD_CUSTOMER
--------------------------------------------------------------------------------
      select * into v_LAD_CUSTOMER_rowtype
       from LAD_CUSTOMER 
      where LAD_CUSTOMER.cost_center_code  =  in_cost_center;

      exception
        when no_data_found then 
            v_LAD_CUSTOMER_rowtype  := null;

--------------------------------------------------------------------------------
    End;  --  End Select LAD_CUSTOMER
--------------------------------------------------------------------------------

/******************************************************************************/
  End If;  --  END Check for LAD_CUSTOMER
/******************************************************************************/


/******************************************************************************/
  If  v_cost_center_rowtype.category  =  'O'  then  --  Check for OTHER
/******************************************************************************/

--------------------------------------------------------------------------------
    Begin  --  Select Other
--------------------------------------------------------------------------------
      select * into v_OTHER_rowtype
       from OTHER 
      where OTHER.cost_center_code  =  in_cost_center;
      
      exception
        when no_data_found then 
            v_OTHER_rowtype  := null;

--------------------------------------------------------------------------------
    End;  --  End Select Other
--------------------------------------------------------------------------------
    
/******************************************************************************/
  End If;  --  Check for OTHER
/******************************************************************************/

--------------------------------------------------------------------------------
    Begin  --  Fax Phone Number (FAX)
--------------------------------------------------------------------------------
      select * into v_PHONE_FAX_rowtype
       from PHONE 
      where PHONE.cost_center_code  =  in_cost_center
        and PHONE.phone_number_type  =  'FAX';
      
      exception
        when no_data_found then 
          v_PHONE_FAX_rowtype  := null;

--------------------------------------------------------------------------------
    End;  --  End Select Fax Phone Number
--------------------------------------------------------------------------------


/******************************************************************************/
  If  v_cost_center_rowtype.category  in ('S', 'O')   then  
/******************************************************************************/

--------------------------------------------------------------------------------
    Begin  --  Select Bank_Card
--------------------------------------------------------------------------------
      select * into v_BANK_CARD_rowtype
       from BANK_CARD 
      where BANK_CARD.cost_center_code  =  in_cost_center
 			   and (effective_date     <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
      
      exception
        when no_data_found then 
            v_BANK_CARD_rowtype  := null;

--------------------------------------------------------------------------------
    End;  --  End Select Bank_Card
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
    Begin  --  Select Marketing
--------------------------------------------------------------------------------
      select * into v_MARKETING_rowtype
       from MARKETING 
      where MARKETING.cost_center_code  =  in_cost_center
   		   and (effective_date     <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
      
      exception
        when no_data_found then 
            v_MARKETING_rowtype  := null;

--------------------------------------------------------------------------------
    End;  --  End Select Marketing
--------------------------------------------------------------------------------
    
/******************************************************************************/
  End If;  --  Check for Store or OTHER
/******************************************************************************/


--------------------------------------------------------------------------------      
  EXCEPTION  --  All Exceptions
--------------------------------------------------------------------------------

-- Error #01
               when invalid_cost_center_exp  then  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'BUSINESS_RULES_INPUT_1.invalid_cost_center_err ' ,
                   'Cost_Center_Code was entered as "' || in_cost_center || '", ' ||
                   'However, specified Cost_Center was not found.' );
                    
-- Error Others
               WHEN OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,12, 500);
                    errpkg.raise_err(v_code, v_errm || ' BUSINESS_RULES_INPUT_1 Error ' );   
        	
END BUSINESS_RULES_INPUT_1;


PROCEDURE BUSINESS_RULES_INPUT_2 ( 
     in_cost_center_code             in  varchar2                         
    ,V_PHONE_PRI_ROWTYPE             out PHONE%ROWTYPE
    ,V_PHONE_SCD_ROWTYPE             out PHONE%ROWTYPE
    ,V_POLLING_ROWTYPE               out POLLING%ROWTYPE
    ,V_REAL_ESTATE_ROWTYPE           out REAL_ESTATE%ROWTYPE
    ,V_SALES_REP_ROWTYPE             out SALES_REP%ROWTYPE
    ,V_STATUS_ROWTYPE                out STATUS%ROWTYPE 
    ,V_cost_center_rowtype           out COST_CENTER%ROWTYPE 
           )  
/********************************************************************
	Business_Rules_Input_2

    This procedure is intended to test the BUSINESS_RULES_PACKAGE
  
   
created : 02/21/2013 BLR CCN   Project....
*********************************************************************/
        is       
        
 v_code number;
 v_errm varchar2(500);
    
 invalid_cost_center_err    EXCEPTION;
 
  BEGIN 
      
/*  
 1.0  For VALIDATION OF COST_CENTER_CODE INPUT 
*/	
      BEGIN

        select * into v_cost_center_rowtype
              from COST_CENTER
              where COST_CENTER.cost_center_code =   in_cost_center_code;	
     
        EXCEPTION
           when no_data_found then
             raise invalid_cost_center_err;         
            
      END;
   
        BEGIN     
           select *
           into v_status_rowtype
           from STATUS
           where cost_center_code =   in_cost_center_code
           and expiration_date is null;          
  
          EXCEPTION
            when no_data_found then
                  v_status_rowtype  :=  null ;
    
        END;
   
        BEGIN
           select *
             into v_phone_pri_rowtype
             from PHONE
             where cost_center_code =   in_cost_center_code
              and phone_number_type =  'PRI' ;
             
           EXCEPTION
             when no_data_found then
                  v_phone_PRI_rowtype  :=  null ;
      
        END;
               
        BEGIN
             select *
              into v_phone_SCD_rowtype
              from PHONE
              where cost_center_code =   in_cost_center_code
              and phone_number_type =  'SCD' ;    
       
             EXCEPTION
                when no_data_found then
                  v_phone_SCD_rowtype  :=  null ;   
     
        END;
      
        BEGIN
           select *
           into v_polling_rowtype
           from POLLING
           where cost_center_code =   in_cost_center_code;	           
       
           EXCEPTION
             when no_data_found then
              v_polling_rowtype  :=  null ;
      
        END;
 
  if v_cost_center_rowtype.category = 'R'  then          
       BEGIN
           select *
           into v_real_estate_rowtype
           from REAL_ESTATE
           where cost_center_code =   in_cost_center_code;	           
       
           EXCEPTION
             when no_data_found then
                  v_real_estate_rowtype  :=  null ;
      
       END;
  end if;
  
 
  EXCEPTION
       
 
  when invalid_cost_center_err then  
       v_code := errnums.en_invalid_cost_center_err;
       errpkg.raise_err(v_code, 'Business_Rules_Input_2.invalid_cost_center_err ',    
       'Entered COST CENTER was "' || IN_COST_CENTER_CODE || '". ' || 
       'Business_Rules_Input_2 ' || 'Cost Center code not found in cost center table  ". '); 
 
  when OTHERS then
       v_code := sqlcode;
	     v_errm := substr(sqlerrm,1, 500);
       errpkg.raise_err(v_code, v_errm ||
       'Business_Rules_Input_2 '  || 'No errors found');
     
  
END BUSINESS_RULES_INPUT_2;


PROCEDURE BUSINESS_RULES_INPUT_3 (
/******************************************************************************
	BUSINESS_RULES_INPUT_3

	This procedure Build the Business Rules 3 Rowtype ROWs
			STORE%rowtype
			TERMINAL%rowtype
			TERRITORY%rowtype
			TYPE%rowtype

created  : 02/21/2013 TAL    -- CCN Project....
modified : 12/15/2014 axk326 -- CCN Project Team....
           Removed link for Territory_Sales_Mgr, territory_assigment
******************************************************************************/
/***  below are the fields required for the Business_Rules_Input call: Cost_Center_code, Table_Rowtypes ***/
   in_cost_center          in   varchar2
  ,v_STORE_rowtype  	     out  STORE%rowtype
  ,v_TERMINAL_rowtype      out  TERMINAL%rowtype
  ,v_TERRITORY_rowtype     out  TERRITORY%rowtype
  ,v_TYPE_rowtype          out  TYPE%rowtype
  ,v_COST_CENTER_rowtype   out  COST_CENTER%rowtype

)

 is 

   invalid_cost_center_exp    exception;  -- Error #01 
   
 v_code  number;
 v_errm  varchar2(500);
 

BEGIN  --  BUSINESS_RULES_INPUT_3

--------------------------------------------------------------------------------
  Begin  --  Select Cost Center
--------------------------------------------------------------------------------

  	
    select * into v_cost_center_rowtype
     from cost_center 
    where cost_center.cost_center_code  =  in_cost_center; 
      
    exception
      when no_data_found then
         raise invalid_cost_center_exp;
-- See Error #01.

--------------------------------------------------------------------------------
  End;  --  End Select Cost Center
--------------------------------------------------------------------------------


/******************************************************************************/
  If  v_cost_center_rowtype.category  =  'S'  then  --  Check for STORE
/******************************************************************************/
  
--------------------------------------------------------------------------------
    Begin  --  Select Store
--------------------------------------------------------------------------------

   
      select * into v_store_rowtype
       from store 
      where store.cost_center_code  =  in_cost_center;
      
      exception
        when no_data_found then
          v_store_rowtype  :=  null ;

--------------------------------------------------------------------------------
    End;  --  End Select Store
--------------------------------------------------------------------------------
                        
/******************************************************************************/
  End If;  --  END Check for STORE
/******************************************************************************/


/******************************************************************************/
  If  v_cost_center_rowtype.category  =  'T'  then  --  Check for TERRITORY
/******************************************************************************/

--------------------------------------------------------------------------------
    Begin  --  Select Territory
--------------------------------------------------------------------------------

 
      select * into v_territory_rowtype
       from territory 
      where territory.cost_center_code  =  in_cost_center;
      
      exception
        when no_data_found then
          v_territory_rowtype  :=  null ; 

--------------------------------------------------------------------------------
    End;  --  End Select Territory
--------------------------------------------------------------------------------
    
/******************************************************************************/
  End If;  --  Check for TERRITORY
/******************************************************************************/

--------------------------------------------------------------------------------
  Begin  --  Select Type
--------------------------------------------------------------------------------
  
   	select * into v_type_rowtype
     from type 
    where type.cost_center_code  =  in_cost_center
     and  type.expiration_date   is  null ;
      
    exception
      when no_data_found then
         v_type_rowtype  :=  null;

--------------------------------------------------------------------------------
  End;  --  End Select Type
--------------------------------------------------------------------------------

    
--------------------------------------------------------------------------------      
  EXCEPTION  --  All Exceptions
--------------------------------------------------------------------------------

-- Error #01
               when invalid_cost_center_exp  then  
                    v_code := errnums.en_invalid_cost_center_err;
                    errpkg.raise_err(v_code, 'BUSINESS_RULES_INPUT_3.invalid_cost_center_err ' ,
                   'Cost_Center_Code was entered as "' || in_cost_center || '", ' ||
                   'However, specified Cost_Center was not found.' );
                
-- Error Others
               WHEN OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,12, 500);
                    errpkg.raise_err(v_code, v_errm || ' BUSINESS_RULES_INPUT_3 Error ' );   

        	
END BUSINESS_RULES_INPUT_3 ;


PROCEDURE LOG_PROCEDURE_ERRORS  (
/*******************************************************************************
  This Procedure is designed to LOG Processing Errors to the ERROR_LOG Table
  
  v_code      the '-99999' Component of the Oracle Error Message 'ORA-99999'
  v_proc      the calling procedure name
  v_errm      the error message to be written to the ERROR_LOG
  v_cost_center   Cost_Center occurrence during processing
  v_note      optional notes to be written to the ERROR_LOG
  
Created: 02/28/2013 TAL
Updated: 05/21/2013 TAL - added v_note to the parameter list
*******************************************************************************/
    v_code         IN   VARCHAR2
   ,v_proc         IN   VARCHAR2
   ,v_errm         IN   VARCHAR2
   ,v_cost_center  IN   VARCHAR2
   ,v_note         IN   VARCHAR2
   )

IS
   PRAGMA AUTONOMOUS_TRANSACTION;
    v_err_proc  varchar2(20);
    v_err_code  varchar2(09);
    v_err_seq  number;
   
BEGIN

    v_err_proc  :=  substr(v_proc,1,20); 
    v_err_seq   :=  ERROR_LOG_SEQ.nextval;
--  v_err_code  :=  ('ORA' || SQLCODE) ;
    v_err_code  :=  ('ORA' || v_code) ;

   INSERT INTO ERROR_LOG (
          ERROR_ID
        , COST_CENTER
        , ERROR_DATE
        , MODULE
        , ERROR_TEXT
        , ERROR_CODE
        , NOTES
        )
        
        VALUES (
                v_err_seq
              , v_cost_center
              , SYSDATE
              , v_err_proc
              , v_errm
              , v_err_code
              , v_note
              );

   COMMIT;
   
   EXCEPTION
   
      when others then
        dbms_output.put_line(' *** LOG INSERT Failed *** ');
        dbms_output.put_line(sqlerrm);
        
      
END  LOG_PROCEDURE_ERRORS;    


END CALL_BUSINESS_RULES_PKG;