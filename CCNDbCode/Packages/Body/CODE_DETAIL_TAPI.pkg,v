head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2012.09.14.14.24.54;	author TAL946;	state dead;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	444;
commitid	1bc050533e34664e;
filename	CODE_DETAIL_TAPI.pkg;

1.1
date	2012.04.18.17.14.56;	author sw\mdh01r;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	77c4f8ef68f6ea4;
filename	CODE_DETAIL_TAPI.pkg;


desc
@@


1.2
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@create or replace
PACKAGE body CODE_DETAIL_tapi
IS
  -- insert
PROCEDURE ins(
    IN_CODE_HEADER_NAME            IN CODE_DETAIL.CODE_HEADER_NAME%type ,
    IN_CODE_DETAIL_DESCRIPTION     IN CODE_DETAIL.CODE_DETAIL_DESCRIPTION%type DEFAULT NULL ,
    IN_CODE_HEADER_TYPE            IN CODE_DETAIL.CODE_HEADER_TYPE%type ,
    IN_CODE_DETAIL_EXPIRE_EFF_DATE IN CODE_DETAIL.CODE_DETAIL_EXPIRE_EFF_DATE%type DEFAULT NULL ,
    IN_CODE_DETAIL_EXPIRE_USER     IN CODE_DETAIL.CODE_DETAIL_EXPIRE_USER%type DEFAULT NULL ,
    IN_CODE_DETAIL_EXPIRE_FLAG     IN CODE_DETAIL.CODE_DETAIL_EXPIRE_FLAG%type DEFAULT NULL ,
    IN_CODE_DETAIL_VALUE           IN CODE_DETAIL.CODE_DETAIL_VALUE%type )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  INSERT
  INTO CODE_DETAIL
    (
      CODE_HEADER_NAME ,
      CODE_DETAIL_DESCRIPTION ,
      CODE_HEADER_TYPE ,
      CODE_DETAIL_EXPIRE_EFF_DATE ,
      CODE_DETAIL_EXPIRE_USER ,
      CODE_DETAIL_EXPIRE_FLAG ,
      CODE_DETAIL_VALUE
    )
    VALUES
    (
      IN_CODE_HEADER_NAME ,
      IN_CODE_DETAIL_DESCRIPTION ,
      IN_CODE_HEADER_TYPE ,
      IN_CODE_DETAIL_EXPIRE_EFF_DATE ,
      IN_CODE_DETAIL_EXPIRE_USER ,
      IN_CODE_DETAIL_EXPIRE_FLAG ,
      IN_CODE_DETAIL_VALUE
    );

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'CODE_DETAIL Insert');

END;

-- update
PROCEDURE upd
  (
    IN_CODE_HEADER_NAME            IN CODE_DETAIL.CODE_HEADER_NAME%type ,
    IN_CODE_DETAIL_DESCRIPTION     IN CODE_DETAIL.CODE_DETAIL_DESCRIPTION%type DEFAULT NULL ,
    IN_CODE_HEADER_TYPE            IN CODE_DETAIL.CODE_HEADER_TYPE%type ,
    IN_CODE_DETAIL_EXPIRE_EFF_DATE IN CODE_DETAIL.CODE_DETAIL_EXPIRE_EFF_DATE%type DEFAULT NULL ,
    IN_CODE_DETAIL_EXPIRE_USER     IN CODE_DETAIL.CODE_DETAIL_EXPIRE_USER%type DEFAULT NULL ,
    IN_CODE_DETAIL_EXPIRE_FLAG     IN CODE_DETAIL.CODE_DETAIL_EXPIRE_FLAG%type DEFAULT NULL ,
    IN_CODE_DETAIL_VALUE           IN CODE_DETAIL.CODE_DETAIL_VALUE%type
  )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  UPDATE CODE_DETAIL
  SET CODE_DETAIL_DESCRIPTION   = IN_CODE_DETAIL_DESCRIPTION ,
    CODE_DETAIL_EXPIRE_EFF_DATE = IN_CODE_DETAIL_EXPIRE_EFF_DATE ,
    CODE_DETAIL_EXPIRE_USER     = IN_CODE_DETAIL_EXPIRE_USER ,
    CODE_DETAIL_EXPIRE_FLAG     = IN_CODE_DETAIL_EXPIRE_FLAG
  WHERE CODE_HEADER_NAME        = IN_CODE_HEADER_NAME
  AND CODE_HEADER_TYPE          = IN_CODE_HEADER_TYPE
  AND CODE_DETAIL_VALUE         = IN_CODE_DETAIL_VALUE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'CODE_DETAIL Update');

END;

-- del
PROCEDURE del(
    IN_CODE_HEADER_NAME  IN CODE_DETAIL.CODE_HEADER_NAME%type ,
    IN_CODE_HEADER_TYPE  IN CODE_DETAIL.CODE_HEADER_TYPE%type ,
    IN_CODE_DETAIL_VALUE IN CODE_DETAIL.CODE_DETAIL_VALUE%type )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  DELETE
  FROM CODE_DETAIL
  WHERE CODE_HEADER_NAME = IN_CODE_HEADER_NAME
  AND CODE_HEADER_TYPE   = IN_CODE_HEADER_TYPE
  AND CODE_DETAIL_VALUE  = IN_CODE_DETAIL_VALUE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'CODE_DETAIL Delete');

END;

END CODE_DETAIL_tapi;@


1.1
log
@*** empty log message ***
@
text
@@

