head	1.28;
access;
symbols;
locks; strict;
comment	@# @;


1.28
date	2013.07.17.21.07.23;	author sw\kdp465;	state Exp;
branches;
next	1.27;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1a3851e7078a7f10;
filename	CCN_TABLE_IU_PKG.pkg;

1.27
date	2013.07.05.18.51.21;	author sw\BLRA2R;	state Exp;
branches;
next	1.26;
deltatype	text;
kopt	kv;
permissions	666;
commitid	267c51d715a86d59;
filename	CCN_TABLE_IU_PKG.pkg;

1.26
date	2013.06.28.22.06.50;	author sw\kdp465;	state Exp;
branches;
next	1.25;
deltatype	text;
kopt	kv;
permissions	666;
commitid	75051ce08f96009;
filename	CCN_TABLE_IU_PKG.pkg;

1.25
date	2013.06.26.21.57.47;	author sw\kdp465;	state Exp;
branches;
next	1.24;
deltatype	text;
kopt	kv;
permissions	666;
commitid	263051cb63da3cd8;
filename	CCN_TABLE_IU_PKG.pkg;

1.24
date	2013.06.26.20.07.21;	author sw\kdp465;	state Exp;
branches;
next	1.23;
deltatype	text;
kopt	kv;
permissions	666;
commitid	48851cb49f86852;
filename	CCN_TABLE_IU_PKG.pkg;

1.23
date	2013.06.19.16.27.52;	author sw\kdp465;	state Exp;
branches;
next	1.22;
deltatype	text;
kopt	kv;
permissions	666;
commitid	257051c1dc071d67;
filename	CCN_TABLE_IU_PKG.pkg;

1.22
date	2013.06.14.20.25.54;	author sw\kdp465;	state Exp;
branches;
next	1.21;
deltatype	text;
kopt	kv;
permissions	666;
commitid	12e051bb7c514cec;
filename	CCN_TABLE_IU_PKG.pkg;

1.21
date	2013.06.14.14.25.46;	author sw\tal946;	state Exp;
branches;
next	1.20;
deltatype	text;
kopt	kv;
permissions	666;
commitid	293451bb27e9394a;
filename	CCN_TABLE_IU_PKG.pkg;

1.20
date	2013.06.14.05.08.11;	author sw\kdp465;	state Exp;
branches;
next	1.19;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1f9c51baa5370e7e;
filename	CCN_TABLE_IU_PKG.pkg;

1.19
date	2013.06.13.21.14.46;	author sw\kdp465;	state Exp;
branches;
next	1.18;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2ae051ba36452431;
filename	CCN_TABLE_IU_PKG.pkg;

1.18
date	2013.06.10.20.59.16;	author sw\kdp465;	state Exp;
branches;
next	1.17;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1e8051b63e232dee;
filename	CCN_TABLE_IU_PKG.pkg;

1.17
date	2013.06.10.19.08.30;	author sw\kdp465;	state Exp;
branches;
next	1.16;
deltatype	text;
kopt	kv;
permissions	666;
commitid	270051b624235906;
filename	CCN_TABLE_IU_PKG.pkg;

1.16
date	2013.05.30.18.40.53;	author sw\mdh01r;	state Exp;
branches;
next	1.15;
deltatype	text;
kopt	kv;
permissions	666;
commitid	12c451a79d34688d;
filename	CCN_TABLE_IU_PKG.pkg;

1.15
date	2013.05.02.16.08.21;	author sw\kdp465;	state Exp;
branches;
next	1.14;
deltatype	text;
kopt	kv;
permissions	666;
commitid	25e451828f746815;
filename	CCN_TABLE_IU_PKG.pkg;

1.14
date	2013.05.02.16.07.27;	author sw\kdp465;	state Exp;
branches;
next	1.13;
deltatype	text;
kopt	kv;
permissions	666;
commitid	276051828f3d6762;
filename	CCN_TABLE_IU_PKG.pkg;

1.13
date	2013.04.12.12.10.18;	author sw\BLRA2R;	state Exp;
branches;
next	1.12;
deltatype	text;
kopt	kv;
permissions	666;
commitid	3cc5167f9a9173a;
filename	CCN_TABLE_IU_PKG.pkg;

1.12
date	2013.03.20.19.18.56;	author sw\kdp465;	state Exp;
branches;
next	1.11;
deltatype	text;
kopt	kv;
permissions	666;
commitid	a1c514a0b9f5a3b;
filename	CCN_TABLE_IU_PKG.pkg;

1.11
date	2013.01.18.14.10.39;	author sw\BLRA2R;	state Exp;
branches;
next	1.10;
deltatype	text;
kopt	kv;
permissions	666;
commitid	271450f957de502b;
filename	CCN_TABLE_IU_PKG.pkg;

1.10
date	2013.01.16.18.57.34;	author sw\kdp465;	state Exp;
branches;
next	1.9;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1a6c50f6f81d0f80;
filename	CCN_TABLE_IU_PKG.pkg;

1.9
date	2012.12.21.15.22.00;	author sw\mdh01r;	state Exp;
branches;
next	1.8;
deltatype	text;
kopt	kv;
permissions	666;
commitid	26b450d47e977b0e;
filename	CCN_TABLE_IU_PKG.pkg;

1.8
date	2012.10.25.19.59.41;	author sw\kdp465;	state Exp;
branches;
next	1.7;
deltatype	text;
kopt	kv;
permissions	666;
commitid	23fc50899a2b69fe;
filename	CCN_TABLE_IU_PKG.pkg;

1.7
date	2012.10.16.17.54.00;	author sw\mdh01r;	state Exp;
branches;
next	1.6;
deltatype	text;
kopt	kv;
permissions	666;
commitid	6c8507d9f364a9a;
filename	CCN_TABLE_IU_PKG.pkg;

1.6
date	2012.10.15.14.59.02;	author sw\kdp465;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1b54507c24b57691;
filename	CCN_TABLE_IU_PKG.pkg;

1.5
date	2012.10.11.18.35.22;	author sw\kdp465;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	ac450771169639c;
filename	CCN_TABLE_IU_PKG.pkg;

1.4
date	2012.10.08.15.36.46;	author TAL946;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	18dc5072f30d7084;
filename	CCN_TABLE_IU_PKG.pkg;

1.3
date	2012.10.04.19.22.39;	author sw\kdp465;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
permissions	666;
commitid	db4506de1fd64db;
filename	CCN_TABLE_IU_PKG.pkg;

1.2
date	2012.10.04.18.03.17;	author sw\BLRA2R;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	12f0506dcf64281f;
filename	CCN_TABLE_IU_PKG.pkg;

1.1
date	2012.09.21.15.35.13;	author TAL946;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	ac505c892f3f0e;
filename	CCN_TABLE_IU_PKG.pkg;


desc
@@


1.28
log
@fixed bank card loading
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@package BODY CCN_TABLE_IU_PKG 
    as
-- PACKAGE BODY
/****************************************************************************** 
This package is intended to control access to the core CCN table.

created : 09/18/2012 TAL -- CCN coding project
revised : 12/20/2012 MDH -- Add EXPIRE_DATA_SP procedure 
*******************************************************************************/

	PROCEDURE All_TABLE_COL_S_SP (
/*******************************************************************************
	All_TABLE_COL_S_SP
	
	This procedure is intended to return a ref cursor with data from 
	from the all_table_col table.  

created : 04/26/2012 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
			in_TABLE_NAME IN ALL_TAB_COLUMNS.TABLE_NAME%TYPE
			,out_ALL_TAB_REF_CUR OUT REF_CURSOR	)
    is                  
		v_code number;
		v_errm varchar2(500);

	BEGIN

		  OPEN out_ALL_TAB_REF_CUR FOR
			  
		  SELECT DECODE(COLUMN_NAME,'EFFECTIVE_DATE',TABLE_NAME || '_' || COLUMN_NAME
		  							,'EXPIRATION_DATE',TABLE_NAME || '_' || COLUMN_NAME
		  							, COLUMN_NAME) AS COLUMN_NAME
		      	FROM all_tab_columns
    	  		WHERE TABLE_NAME = in_table_name
    		    order by column_id asc;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_S_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	END All_TABLE_COL_S_SP;

	PROCEDURE ADDRESS_CAN_S_SP  ( IN_COST_CENTER          IN  ADDRESS_CAN.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_CAN.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_CAN_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	ADDRESS_CAN_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_CAN table.  

created : 11/15/2010 kdp CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN
     
   OPEN out_ADDRESS_CAN_REF_CUR FOR
			  
		 SELECT * 
     FROM ADDRESS_CAN AC
	  		 WHERE COST_CENTER_CODE  = IN_COST_CENTER
         AND  ADDRESS_TYPE      = NVL(IN_ADDRESS_TYPE, AC.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
	 		    );
              
  EXCEPTION	  
      WHEN others THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);  
	END ADDRESS_CAN_S_SP;


	PROCEDURE ADDRESS_MEX_S_SP  ( IN_COST_CENTER          IN  ADDRESS_MEX.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_MEX.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_MEX_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_MEX table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_MEX_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_MEX AM
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AM.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	
  EXCEPTION   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
	END ADDRESS_MEX_S_SP;


	PROCEDURE ADDRESS_OTHER_S_SP  ( IN_COST_CENTER            IN  ADDRESS_OTHER.COST_CENTER_CODE%TYPE
                                , IN_ADDRESS_TYPE           IN  ADDRESS_OTHER.ADDRESS_TYPE%TYPE
                                , OUT_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_OTHER table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_OTHER AO
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AO.ADDRESS_TYPE) 
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
 
  EXCEPTION
   	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP, ' || ' ' ||
             'COST_CENTER_CODE iFs ' || IN_COST_CENTER || ';  ' || 
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
	END ADDRESS_OTHER_S_SP;


	PROCEDURE ADDRESS_USA_S_SP  ( IN_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE
                              , out_ADDRESS_USA_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_USA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_USA table.  

created : 03/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_USA_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_USA AU
			  WHERE COST_CENTER_CODE = IN_COST_CENTER
			   AND ADDRESS_TYPE = NVL(IN_ADDRESS_TYPE, AU.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	
  EXCEPTION  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
    
	END ADDRESS_USA_S_SP;


	PROCEDURE ADMINISTRATION_S_SP (in_COST_CENTER IN ADMINISTRATION.COST_CENTER_CODE%TYPE
							,out_ADMINISTRATION_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADMINISTRATION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADMINISTRATION table.  

created : 03/20/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_ADMINISTRATION_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADMINISTRATION
			  where cost_center_code = in_COST_CENTER;
    	    
  EXCEPTION   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	end administration_s_sp;

	
  PROCEDURE BANK_CARD_S_SP  ( IN_COST_CENTER          IN  BANK_CARD.COST_CENTER_CODE%TYPE
                            , IN_POLLING_STATUS_CODE  IN  BANK_CARD.POLLING_STATUS_CODE%TYPE
                            , IN_MERCHANT_ID_CODE     IN  BANK_CARD.MERCHANT_ID%TYPE
                            , OUT_BANK_CARD_REF_CUR   OUT REF_CURSOR)
/*******************************************************************************
	BANK_CARD_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the bank_card table.  

created : 03/21/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_curr_date date := sysdate;
 
	BEGIN

		  OPEN out_BANK_CARD_REF_CUR FOR
			  
			  SELECT * 
			  from bank_card
			  where cost_center_code    = in_cost_center
			   and  polling_status_code = in_polling_status_code
         and  merchant_id         = nvl(in_merchant_id_code, bank_card.merchant_id)
			   and (effective_date     <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	 
 EXCEPTION  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BANK_CARD_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center || ';  ' || 
             'POLLING_STATUS_CODE is '  || in_polling_status_code || ';  ' || 
             'MERCHANT_ID_CODE is '     || in_merchant_id_code
             || '; ' || v_errm
             );

	END BANK_CARD_S_SP;
  

PROCEDURE BATCH_JOB_S_SP (in_batch_job_name     in  batch_job.batch_job_name%type
                        , in_batch_job_number   in  batch_job.batch_job_number%type
			, out_BATCH_JOB_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	BATCH_JOB_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the BATCH_JOB table.  

created : 07/18/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_input_row  varchar2(30);
	BEGIN
            
		  OPEN out_BATCH_JOB_REF_CUR FOR
			  
			  SELECT * 
			  FROM BATCH_JOB
			  where batch_job_name = in_batch_job_name
			  and batch_job_number = in_batch_job_number;
	  
 EXCEPTION 
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_S_SP, ' || ' ' ||
             'BATCH_JOB_NAME is ' || in_BATCH_JOB_NAME || ';  ' ||
             'BATCH_JOB_NUMBER is ' || in_BATCH_JOB_NUMBER, v_errm);
                      
	END BATCH_JOB_S_SP;


PROCEDURE CODE_DETAIL_S_SP ( in_CODE_HEADER_NAME      IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
			   , in_CODE_HEADER_TYPE      IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
			   , in_CODE_DETAIL_VALUE     IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
			  , out_CODE_DETAIL_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	CODE_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_DETAIL table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_DETAIL
			  where code_header_name   =  in_CODE_HEADER_NAME
                           and  code_header_type   =  in_CODE_HEADER_TYPE
                           and  code_detail_value  =  in_CODE_DETAIL_VALUE ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,      'CODE_DETAIL_S_SP, '  || ' ' ||            
             'CODE_HEADER_NAME is '  || in_code_header_name || ';  ' ||
             'CODE_HEADER_TYPE is '  || in_code_header_type || ';  '  ||
             'CODE_DETAIL_VALUE is ' || in_CODE_DETAIL_VALUE || '; ' || v_errm);
                     
	END CODE_DETAIL_S_SP;


PROCEDURE CODE_HEADER_S_SP (in_CODE_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
                          , in_CODE_HEADER_TYPE in CODE_HEADER.CODE_HEADER_TYPE%TYPE
							,out_CODE_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	CODE_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_HEADER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_HEADER
			  where code_header_name = in_CODE_HEADER_NAME
                           and  code_header_type = in_CODE_HEADER_TYPE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, ' CODE_HEADER_S_SP, ' || ' ' ||
             'CODE_HEADER_NAME is ' || in_CODE_HEADER_NAME || ';  ' ||
             'CODE_HEADER_TYPE is ' || in_CODE_HEADER_TYPE || '; ' || v_errm    );
                     
	END CODE_HEADER_S_SP;


	PROCEDURE COST_CENTER_S_SP (in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
				, out_COST_CENTER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 11/15/2011 kdp CCN Project....
*******************************************************************************/
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
	  
	END COST_CENTER_S_SP;


PROCEDURE EMP_DATA_S_SP (in_EMPLOYEE_NUMBER IN EMP_DATA.EMPLOYEE_NUMBER%TYPE
							,out_EMP_DATA_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	EMP_DATA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the EMP_DATA table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_EMP_DATA_REF_CUR FOR
			  
			  SELECT * 
			  FROM EMP_DATA
			  where employee_number = in_EMPLOYEE_NUMBER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_S_SP, ' || ' ' ||
             'EMPLOYEE_NUMBER is ' || in_EMPLOYEE_NUMBER || '; ' || v_errm);
                     
	END EMP_DATA_S_SP;


PROCEDURE HIERARCHY_DESCRIPTION_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE
                        , in_HRCHY_HDR_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
 			, out_HIERARCHY_DESCRIPT_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_DESCRIPTION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DESCRIPTION table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DESCRIPT_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DESCRIPTION
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_hdr_lvl_nbr     = in_HRCHY_HDR_lvl_nbr ;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_DESCRIPTION_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_HDR_LVL_NBR is '  ||  in_HRCHY_HDR_LVL_NBR || '; ' || v_errm);
                     
	END HIERARCHY_DESCRIPTION_S_SP;


PROCEDURE HIERARCHY_DETAIL_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
          ,in_HRCHY_DTL_LEVEL         HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
          ,in_HRCHY_DTL_PREV_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
          ,in_HRCHY_DTL_CURR_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
          ,in_HRCHY_DTL_NEXT_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE
          ,in_HRCHY_DTL_EFF_DATE      HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE                  
 			, out_HIERARCHY_DETAIL_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	HIERARCHY_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DETAIL table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DETAIL
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_dtl_level        = in_HRCHY_DTL_LEVEL
          and hrchy_dtl_prev_lvl_val = in_HRCHY_DTL_PREV_LVL_VAL
          and hrchy_dtl_curr_lvl_val = in_HRCHY_DTL_CURR_LVL_VAL
          and hrchy_dtl_next_lvl_val = in_HRCHY_DTL_NEXT_LVL_VAL
          and hrchy_dtl_eff_date     = in_HRCHY_DTL_EFF_DATE;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_DETAIL_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_DTL_LEVEL is '  ||  in_HRCHY_DTL_LEVEL || ';  ' ||
             'HRCHY_DTL_PREV_LVL_VAL is '  ||  in_HRCHY_DTL_PREV_LVL_VAL || ';  ' ||
             'HRCHY_DTL_CURR_LVL_VAL is '  ||  in_HRCHY_DTL_CURR_LVL_VAL || ';  ' ||
             'HRCHY_DTL_NEXT_LVL_VAL is '  ||  in_HRCHY_DTL_NEXT_LVL_VAL || ';  ' ||
             'HRCHY_DTL_EFF_DATE is '      ||  in_HRCHY_DTL_EFF_DATE || '; ' || v_errm);
                     
	END HIERARCHY_DETAIL_S_SP;


PROCEDURE HIERARCHY_HEADER_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE
  			, out_HIERARCHY_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_HEADER table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_HEADER
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME); 
			 
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_HEADER_S_SP, ' || ' ' ||
             'HRCHY_HDR_NAME is ' || in_hrchy_hdr_name || '; ' || v_errm);
                     
	END HIERARCHY_HEADER_S_SP;


 
PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER                 IN  MARKETING.COST_CENTER_CODE%TYPE
                          , IN_MARKETING_TYPE              IN  MARKETING.MARKETING_TYPE%TYPE                          
                          , OUT_MARKETING_REF_CUR          IN  OUT sys_refcursor)
/*******************************************************************************
	MARKETING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the MARKETING table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
changed : 05/29/2013 BLR CCNA-408 add marketing fields via record expansion. 
          Fields are mkt_brand, mkt_mission, mkt_sales_floor_size,
          mkt_warehouse_size, & mkt_real_estate_setting.
*******************************************************************************/
        as                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;
MKT_STATS varchar2(07);
MKT_ROW    MARKETING%ROWTYPE;

	BEGIN

		  OPEN OUT_MARKETING_REF_CUR FOR
			  
			  select  S.*  
               ,( S.mkt_brand || S.mkt_mission || S.mkt_sales_floor_size || 
                  S.mkt_warehouse_size || S.mkt_real_estate_setting) as MKT_STATS
               from MARKETING S              
			  where S.cost_center_code        = in_cost_center         
         and  S.marketing_type          = nvl(in_marketing_type, marketing_type) 
			   and (S.effective_date         <=  v_curr_date  
			   and (S.expiration_date is null or expiration_date  >=  v_curr_date)
  );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,     'MARKETING_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER   || ';  ' ||
             'MARKETING_TYPE is '   || in_MARKETING_TYPE || '; ' || v_errm);
                     
	END MARKETING_S_SP;

PROCEDURE OTHER_S_SP (in_COST_CENTER IN OTHER.COST_CENTER_CODE%TYPE
							,out_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the OTHER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM OTHER
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END OTHER_S_SP;



PROCEDURE PHONE_S_SP (in_COST_CENTER IN PHONE.COST_CENTER_CODE%TYPE
							,out_PHONE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	PHONE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the PHONE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_PHONE_REF_CUR FOR
			  
			  SELECT * 
			  FROM PHONE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END PHONE_S_SP;


PROCEDURE POLLING_S_SP (in_COST_CENTER IN POLLING.COST_CENTER_CODE%TYPE
					,in_POLLING_STATUS_CODE IN OUT POLLING.POLLING_STATUS_CODE%TYPE
					, out_POLLING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling table.  

created : 11/15/2010 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);


	BEGIN
         
	     	  SELECT POLLING_STATUS_CODE INTO in_POLLING_STATUS_CODE
	     	  FROM POLLING a
			  where a.cost_center_code = in_COST_CENTER
			  and a.polling_status_code = NVL(in_POLLING_STATUS_CODE,polling_status_code)
			  and current_flag = 'Y';
	
	
		  OPEN out_POLLING_REF_CUR FOR
			  
			  SELECT * 
			  FROM POLLING a
			  where a.cost_center_code = in_COST_CENTER
			  and a.polling_status_code = NVL(in_POLLING_STATUS_CODE,polling_status_code)
			  and current_flag = 'Y';
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_S_SP, '		|| ' ' ||
		'COST_CENTER_CODE is ' 	|| in_COST_CENTER || ';  ' ||
		'POLLING_STATUS_CODE is '	|| in_POLLING_STATUS_CODE || '; ' || v_errm);
                     	  
	END POLLING_S_SP;
  
PROCEDURE POLLING_DWLD_RSN_HIST_S_SP ( in_cost_center         in polling_dwld_rsn_hist.cost_center_code%type
					                           , in_polling_status_code in polling_dwld_rsn_hist.polling_status_code%type
					                           , in_effective_date      in polling_dwld_rsn_hist.effective_date%type, out_POLLING_DWLD_RSN_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling_dwld_rsn_hist table.  

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_POLLING_DWLD_RSN_REF_CUR FOR
			  
			  select * 
			  from polling_dwld_rsn_hist
			  where cost_center_code     = in_cost_center
			   and  polling_status_code  = in_polling_status_code
         and  effective_date       = in_effective_date  ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_DWLD_RSN_HIST_S_SP, '	|| ' ' ||
		'COST_CENTER_CODE is '    || in_cost_center || ';  ' ||
		'POLLING_STATUS_CODE is '	|| in_polling_status_code || ';  ' ||
    'EFFECTIVE_DATE is '      || in_effective_date || '; ' || v_errm );
                     	  
	END POLLING_DWLD_RSN_HIST_S_SP;

PROCEDURE REAL_ESTATE_S_SP (in_COST_CENTER IN REAL_ESTATE.COST_CENTER_CODE%TYPE
							,out_REAL_ESTATE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	REAL_ESTATE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the REAL_ESTATE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_REAL_ESTATE_REF_CUR FOR
			  
			  SELECT * 
			  FROM REAL_ESTATE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'REAL_ESTATE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END REAL_ESTATE_S_SP;


PROCEDURE SALES_REP_S_SP  ( IN_GEMS_EMPLOYEE_ID   IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE
                          , OUT_SALES_REP_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	SALES_REP_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the SALES_REP table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_SALES_REP_REF_CUR FOR
			  
			  SELECT * 
			  from sales_rep
			  where gems_employee_id = in_gems_employee_id 
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_S_SP, ' || ' ' ||
             'GEMS_EMPLOYEE_ID is ' || in_GEMS_EMPLOYEE_ID || '; ' || v_errm);
                     
	END SALES_REP_S_SP;


PROCEDURE   STATUS_S_SP ( IN_COST_CENTER     IN  STATUS.COST_CENTER_CODE%TYPE
                        , IN_STATUS_CODE     IN  STATUS.STATUS_CODE%TYPE
                        , OUT_STATUS_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STATUS_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STATUS table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_STATUS_REF_CUR FOR
			  
			  SELECT * 
			  from status
			  where cost_center_code  =  in_cost_center  
			  and status_code         =  nvl(in_status_code, status.status_code) 
			  and (effective_date    <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'STATUS_S_SP, ' || ' ' ||
		'COST_CENTER_CODE is ' || in_COST_CENTER  || ';  ' ||
		'STATUS_CODE is '      || in_STATUS_CODE || '; ' || v_errm);
                     
	END STATUS_S_SP;


PROCEDURE STORE_S_SP (in_COST_CENTER IN STORE.COST_CENTER_CODE%TYPE
							,out_STORE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STORE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STORE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_STORE_REF_CUR FOR
			  
			  SELECT * 
			  FROM STORE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END STORE_S_SP;


PROCEDURE TAXWARE_S_SP (in_COST_CENTER IN TAXWARE.COST_CENTER_CODE%TYPE
		      ,out_TAXWARE_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	TAXWARE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TAXWARE table.  

created : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_TAXWARE_REF_CUR FOR
			  
			  SELECT * 
			  FROM TAXWARE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END TAXWARE_S_SP;


PROCEDURE TERMINAL_S_SP ( IN_COST_CENTER_CODE   IN  TERMINAL.COST_CENTER_CODE%TYPE
                        , IN_POLLING_STATUS_CD  IN  TERMINAL.POLLING_STATUS_CODE%TYPE
                        , IN_TERMINAL_NUMBER    IN  TERMINAL.TERMINAL_NUMBER%TYPE
                        , OUT_TERMINAL_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERMINAL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERMINAL  table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  

  v_code    number;
  v_errm    varchar2(500); 
  v_curr_date date := sysdate;

	BEGIN

		  OPEN OUT_TERMINAL_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERMINAL
			  where cost_center_code = in_COST_CENTER_CODE
			  and  polling_status_code = in_polling_status_cd  
			  and  terminal_number = nvl(in_terminal_number, terminal.terminal_number) 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
        errpkg.raise_err(v_code, 'TERMINAL_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center_code  || ';  ' ||
             'POLLING STATUS CODE is '  || in_polling_status_cd || ';  ' ||
             'TERMINAL NUMBER is '      || in_terminal_number 
             || '; ' || v_errm);

              
	END  TERMINAL_S_SP;


PROCEDURE TERRITORY_S_SP ( in_terr_sls_mgr_cd  TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,in_terr_cc TERRITORY.COST_CENTER_CODE%TYPE            
                                     ,out_TERRITORY_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY table.  

created : 03/22/2012 BLR CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure 
		  05/02/2013 kdp corrected query.	
*******************************************************************************/

      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    


	BEGIN

		  OPEN out_TERRITORY_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY
			  where cost_center_code = in_TERR_cc
			  and TERRITORY_SLS_MGR_CODE = NVL(in_TERR_SLS_MGR_CD,TERRITORY_SLS_MGR_CODE );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
         errpkg.raise_err(v_code, 'TERRITORY_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_TERR_CC || ';  ' ||
             'SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD || '; ' || v_errm);
             
	END;-- TERRITORY_S_SP;


PROCEDURE TERRITORY_ASSIGNMENT_S_SP ( IN_TERR_SLS_MGR_CD      IN  TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,IN_COST_CENTER          IN  TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE                                     
                                     ,IN_GEMS_EMP_ID          IN  TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
                                     ,OUT_TERR_ASSIGN_REF_CUR OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_ASSIGNMENT_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_ASSIGNMENT table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
       is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);
  v_curr_date date := sysdate;   


	BEGIN

		  OPEN out_TERR_assign_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_ASSIGNMENT
			  where cost_center_code = IN_COST_CENTER
			  and TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD
			  and gems_employee_id = in_gems_emp_id
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	Errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_S_SP, ' || ' ' ||
	     'TERRITORY SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD || ';  ' ||
       'COST CENTER CODE is ' || IN_COST_CENTER || ';  ' ||             
	     'GEMS EMPLOYEE ID is ' || in_gems_EMP_ID || '; ' || v_errm);
              
	END TERRITORY_ASSIGNMENT_S_SP;


PROCEDURE TERRITORY_SALES_MGR_S_SP  ( IN_TERR_SLS_MGR_CD        IN  TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
      				           				    , OUT_TERR_SLS_MGR_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERRITORY_SALES_MGR_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_SALES_MGR table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500); 
  v_curr_date date := sysdate;   

	BEGIN

		  OPEN out_TERR_SLS_MGR_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_SALES_MGR
			  where TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
			  
  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_S_SP, ' || ' ' ||
             'SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD
             || '; ' || v_errm);

              
	END  TERRITORY_SALES_MGR_S_SP;

PROCEDURE  TYPE_S_SP ( 
           IN_COST_CENTER   IN TYPE.COST_CENTER_CODE%TYPE 
          ,IN_TYPE_CODE     IN TYPE.TYPE_CODE%TYPE
          ,OUT_TYPE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	TYPE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TYPE table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    
  v_curr_date date := sysdate;

	BEGIN

		  OPEN out_Type_REF_CUR FOR
			  
			  select * 
			  from type
			  WHERE COST_CENTER_CODE = IN_COST_CENTER  
         and  type_code        = nvl(in_type_code, type.type_code)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TYPE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'TYPE CODE is ' || in_TYPE_CODE || '; ' || v_errm);    
              
	END;-- TYPE_S_SP;

/*++++++++++++++++++++++++
INSERTS (ADDS)
+++++++++++++++++++++++*/


procedure ADDRESS_CAN_I_SP ( 
/*******************************************************************************
	ADDRESS_CAN_I_SP

	This procedure is intended to Insert new Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/27/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_CAN> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_CAN' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_CAN' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_CAN_ROWTYPE_SP ( 
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_CAN_row        
					);
--
--  Expire currently active ADDRESS_CAN Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_CAN'
		 , v_address_can_row.COST_CENTER_CODE
     , v_address_can_row.EFFECTIVE_DATE
     , v_address_can_row.ADDRESS_TYPE);
--
  --Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_CAN values v_address_can_row ;    
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_CAN SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_CAN_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_CAN_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_CAN_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_CAN_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_CAN_row.CITY
									, PROVINCE_CODE = v_ADDRESS_CAN_row.PROVINCE_CODE
									, POSTAL_CODE = v_ADDRESS_CAN_row.POSTAL_CODE
									, VALID_ADDRESS = v_ADDRESS_CAN_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_CAN_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_CAN_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_CAN_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_CAN_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS CAN Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS CAN Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_CAN_I_SP;


procedure ADDRESS_MEX_I_SP ( 
/******************************************************************************
	ADDRESS_MEX_I_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 10/02/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure 
          changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_MEX> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_MEX' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_MEX' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_MEX_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_MEX_row        
					);
--
--  Expire currently active ADDRESS_CAN Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_MEX'
		 , v_address_mex_row.COST_CENTER_CODE
     , v_address_mex_row.EFFECTIVE_DATE
     , v_address_mex_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_MEX values v_address_mex_row;    
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_MEX SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_MEX_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_MEX_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_MEX_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_MEX_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_MEX_row.CITY
									, PROVINCE_CODE = v_ADDRESS_MEX_row.PROVINCE_CODE
									, POSTAL_CODE = v_ADDRESS_MEX_row.POSTAL_CODE
									, VALID_ADDRESS = v_ADDRESS_MEX_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_MEX_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_MEX_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_MEX_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_MEX_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS MEX Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS MEX Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_MEX_I_SP;


procedure ADDRESS_OTHER_I_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_I_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 TAL upgraded to work with multiple address and updates
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_OTHER> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_OTHER' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_OTHER' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_OTHER_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_OTHER_row        
					);
--
--  Expire currently active ADDRESS_OTHER Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_OTHER'
		 , v_address_other_row.COST_CENTER_CODE
     , v_address_other_row.EFFECTIVE_DATE
     , v_address_other_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_OTHER values v_address_other_row;    
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_OTHER SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_OTHER_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_OTHER_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_OTHER_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_OTHER_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_OTHER_row.CITY
									, PROVINCE_CODE = v_ADDRESS_OTHER_row.PROVINCE_CODE
									, STATE_CODE = v_ADDRESS_OTHER_row.STATE_CODE
									, POSTAL_CODE = v_ADDRESS_OTHER_row.POSTAL_CODE
									, VALID_ADDRESS = v_ADDRESS_OTHER_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_OTHER_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_OTHER_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_OTHER_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_OTHER_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS USA Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS OTHER Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END ADDRESS_OTHER_I_SP;


PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
	ADDRESS_USA_I_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
		: 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 kdp upgraded to work with multiple address and updates
*******************************************************************************/
in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_ADDRESS_USA_row ADDRESS_USA%rowtype;

v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;


begin


--  LOOP Once for each occurrence of <ADDRESS_USA> in the passed XML
    WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']') = 1 LOOP
	
    v_xml_frag := v_Row_data.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']').getCLOBVal();
	
--  convert XML to ROWTYPE --
    CCN_TABLE_IU_PKG.ADDRESS_USA_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_USA_row        
					);
				
--  Expire currently active ADDRESS_USA Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_USA'
		 , v_address_usa_row.COST_CENTER_CODE
     , v_address_usa_row.EFFECTIVE_DATE
     , v_address_usa_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
    BEGIN
      INSERT into ADDRESS_USA values v_ADDRESS_USA_row;     
				    				    
				    EXCEPTION
				       WHEN dup_val_on_index THEN
				            BEGIN
--								dbms_output.put_line('in dup_val on index');
								UPDATE ADDRESS_USA SET 
                    EXPIRATION_DATE = NULL--v_ADDRESS_USA_row.EXPIRATION_DATE
									, ADDRESS_LINE_1 = v_ADDRESS_USA_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_USA_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_USA_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_USA_row.CITY
									, STATE_CODE = v_ADDRESS_USA_row.STATE_CODE
									, ZIP_CODE = v_ADDRESS_USA_row.ZIP_CODE
									, ZIP_CODE_4 = v_ADDRESS_USA_row.ZIP_CODE_4
									, COUNTY = v_ADDRESS_USA_row.COUNTY
									, FIPS_CODE = v_ADDRESS_USA_row.FIPS_CODE
									, DESTINATION_POINT = v_ADDRESS_USA_row.DESTINATION_POINT
									, CHECK_DIGIT = v_ADDRESS_USA_row.CHECK_DIGIT
									, VALID_ADDRESS = v_ADDRESS_USA_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_USA_row.COUNTRY_CODE
								WHERE 
									COST_CENTER_CODE = v_ADDRESS_USA_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_USA_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_USA_row.EFFECTIVE_DATE;
                  										                
				  -- dbms_output.put_line('ADDRESS USA Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS USA Update Error' );
					           END;
						       
				    END;  
		V_COUNT := V_COUNT + 1;		      
      END LOOP;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
END ADDRESS_USA_I_SP;
 
 
 procedure ADMINISTRATION_I_SP (
/*******************************************************************************
	ADMINISTRATION_I_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/01/2012 mdh CCN Project....
revised :10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_administration_row administration%rowtype;
--
--v_row_value 	varchar2(500);
--
--
begin
--
-- Convert XML to ROWTYPE --
   ADMINISTRATION_ROWTYPE_SP (
	 in_COST_CENTER     
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_administration_row
	);

      
      INSERT into ADMINISTRATION values v_administration_row;
      
       
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end ADMINISTRATION_I_SP;				 
				
 
 procedure BANK_CARD_I_SP (
/*******************************************************************************
	BANK_CARD_I_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_bank_card_row bank_card%rowtype;
--
--
begin
-- 
--dbms_output.put_line('before rowtype bank card');
-- Convert XML to ROWTYPE --
       BANK_CARD_ROWTYPE_SP (
		 in_COST_CENTER          
		,in_POLLING_STATUS_CODE   
		,in_MERCHANT_ID           
		,in_EFFECTIVE_DATE 
		,in_TABLE_NAME  
		,in_ROW_DATE    
		,in_Row_data   
		,v_bank_card_row 
		);
--
-- 
--dbms_output.put_line('after rowtype bank card');
--  Expire currently active BANK_CARD Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'BANK_CARD'
		 , v_bank_card_row.COST_CENTER_CODE
     , v_bank_card_row.EFFECTIVE_DATE);
--
--  Insert new BANK_CARD row --  
		--dbms_output.put_line('before insert bank card');
		v_bank_card_row.EFFECTIVE_DATE := sysdate;
		--dbms_output.put_line('v_bank_card_row.EFFECTIVE_DATE ' || v_bank_card_row.EFFECTIVE_DATE );
     
      INSERT into BANK_CARD values v_bank_card_row;
        
      --dbms_output.put_line('after insert bank card');
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_I_SP;				 
				
PROCEDURE BATCH_JOB_I_SP (
/*******************************************************************************
	BATCH_JOB_I_SP

	This procedure is intended to insert new BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

 --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
-- dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getstringval()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_batch_job_row.batch_job_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_batch_job_row.batch_job_status         := v_row_value;
--  	when 'BATCH_JOB_START_DATE'           then  v_batch_job_row.batch_job_start_date        := v_row_value;
      when 'BATCH_JOB_START_DATE'		        then  v_batch_job_row.batch_job_start_date	    	:= to_date(v_row_value,'YYYYMMDD');
--  	when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := to_date(v_row_value,'YYYYMMDD');
--			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := to_date(v_row_value,'YYYYMMDD');
--			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into BATCH_JOB values v_BATCH_JOB_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end BATCH_JOB_I_SP;

PROCEDURE CODE_DETAIL_I_SP (
/*******************************************************************************
	CODE_DETAIL_I_SP

	This procedure is intended to insert new CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_DETAIL values v_CODE_DETAIL_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_DETAIL_I_SP;

PROCEDURE CODE_HEADER_I_SP (
/*******************************************************************************
	CODE_HEADER_I_SP

	This procedure is intended to insert new CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_HEADER values v_CODE_HEADER_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_HEADER_I_SP;

PROCEDURE COST_CENTER_I_SP (
/*******************************************************************************
	COST_CENTER_I_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
*******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 

v_cost_center_row cost_center%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
 	COST_CENTER_ROWTYPE_SP (
 		in_COST_CENTER  
		,in_TABLE_NAME  
		,in_ROW_DATE    
		,in_Row_data    
		,v_cost_center_row  
);
--
--
-- Insert new COST_CENTER row --      
      insert into cost_center values v_cost_center_row;
      
      

end COST_CENTER_I_SP;

PROCEDURE EMP_DATA_I_SP (
/*******************************************************************************
	EMP_DATA_I_SP

	This procedure is intended to insert new EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into EMP_DATA values v_EMP_DATA_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end EMP_DATA_I_SP;

PROCEDURE MARKETING_I_SP (
/*******************************************************************************
	MARKETING_I_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
       MARKETING_ROWTYPE_SP (
	 in_cost_center          
	,in_marketing_type  
	,in_TABLE_NAME           
	,in_ROW_DATE              
	,in_Row_data              
	,v_MARKETING_row   
	);
--
--
--  Expire currently active MARKETING Record before insert --

dbms_output.put_line('v_marketing_row.COST_CENTER_CODE ' || v_marketing_row.COST_CENTER_CODE);
dbms_output.put_line('v_marketing_row.EFFECTIVE_DATE ' || v_marketing_row.EFFECTIVE_DATE);
dbms_output.put_line('v_marketing_row.CATEGORY ' || v_marketing_row.CATEGORY);
       

      COMMON_TOOLS.EXPIRE_DATA_SP (
      'MARKETING'
		 , v_marketing_row.COST_CENTER_CODE
     , v_marketing_row.EFFECTIVE_DATE);
--
--  Insert new MARKETING row -- 
dbms_output.put_line('before insert');
      insert into MARKETING values v_MARKETING_row;
dbms_output.put_line('after insert');      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
dbms_output.put_line('in others sqlcode ' || v_errm );        
	
end MARKETING_I_SP;

PROCEDURE OTHER_I_SP (
/*******************************************************************************
	OTHER_I_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
	 in_COST_CENTER          
	,v_OTHER_row
	,in_TABLE_NAME           
	,in_ROW_DATE            
	,in_Row_data             
	 );

      insert into OTHER values v_OTHER_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end OTHER_I_SP;				 
				

PROCEDURE PHONE_I_SP (
/*******************************************************************************
	PHONE_I_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -variable 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_PHONE_row PHONE%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
	in_COST_CENTER           
	,in_phone_number_type     
	,v_PHONE_row              
	,in_TABLE_NAME          
	,in_ROW_DATE             
	,in_Row_data              
	); 

      
      insert into PHONE values v_PHONE_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end PHONE_I_SP;
               

PROCEDURE POLLING_I_SP (
/*******************************************************************************
	POLLING_I_SP

	This procedure is intended to insert new POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created:  05/02/2012 tal CCN Project....
revised	: 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
		: 04/03/2013 BLR error message pointing to wrong procedure
        : 06/11/2013 kdp added insert row flag to identify currnet polling row
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_POLLING_row         out POLLING%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );
                   
      out_POLLING_row.current_flag := 'Y';            
                  
      insert into POLLING values out_POLLING_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end POLLING_I_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_I_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_I_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/


      for table_fields_rec in table_fields_cur loop

--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_I_SP;

 
PROCEDURE REAL_ESTATE_I_SP (
/******************************************************************************
	REAL_ESTATE_I_SP

	This procedure is intended to insert new REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_row     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      insert into REAL_ESTATE values out_REAL_ESTATE_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_I_SP;


PROCEDURE SALES_REP_I_SP (
/*****************************************************************************
	SALES_REP_I_SP

	This procedure is intended to insert new SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_row       out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWYTPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      insert into sales_rep values out_sales_rep_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end SALES_REP_I_SP;


PROCEDURE STATUS_I_SP (
/*****************************************************************************
	STATUS_I_SP

	This procedure is intended to insert new STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
revised: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
         12/20/2012 mdh - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_row     out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  STATUS_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_status_row 
                   );
--
--  Expire currently active STATUS Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'STATUS'
		 , out_status_row.COST_CENTER_CODE
     , out_status_row.EFFECTIVE_DATE);
--
--  Insert new STATUS row --                  
      insert into status values out_status_row;
      
      
    
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
end STATUS_I_SP;
        

PROCEDURE STORE_I_SP (
/*****************************************************************************
	STORE_I_SP

	This procedure is intended to insert new STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_store_row     out store%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_store_row 
                   );
                  
      insert into store values out_store_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
 
 end STORE_I_SP;
 

PROCEDURE TAXWARE_I_SP (
/*****************************************************************************
	TAXWARE_I_SP

	This procedure is intended to insert new TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_taxware_row     out taxware%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_taxware_row 
                   );
                  
      insert into taxware values out_taxware_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
             
	end TAXWARE_I_SP;
  

PROCEDURE TERMINAL_I_SP (
/*****************************************************************************
	TERMINAL_I_SP

	This procedure is intended to insert new terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_row     out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
      insert into terminal values out_terminal_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        

end TERMINAL_I_SP;


PROCEDURE TERRITORY_I_SP (
/******************************************************************************
	TERRITORY_I_SP

	This procedure is intended to insert new TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,IN_ROW_DATA             IN  VARCHAR2 --sys.xmltype
,out_territory_row       out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      insert into territory values out_territory_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_I_SP;


PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_I_SP

	This procedure is intended to insert new territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/04/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ASSIGNMENT_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_ASSIGN_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_assignment_row 
                   );
                  
      insert into territory_assignment values out_territory_assignment_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_ASSIGNMENT_I_SP;


PROCEDURE TERRITORY_SALES_MGR_I_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_I_SP

	This procedure is intended to insert new territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_SALES_MGR_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_SALES_MGR_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_sales_mgr_row 
                   );
                  
      insert into territory_sales_mgr values out_territory_sales_mgr_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);

end TERRITORY_SALES_MGR_I_SP;


PROCEDURE TYPE_I_SP (
/******************************************************************************
	TYPE_I_SP

	This procedure is intended to insert new TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
revised : 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
          12/20/2012 MDH - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_type_row            out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
--
--  Expire currently active TYPE Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'TYPE'
		 , out_type_row.COST_CENTER_CODE
     , out_type_row.EFFECTIVE_DATE);
--
--  Insert new TYPE row --                   
      insert into type values out_type_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TYPE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end TYPE_I_SP;

/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/

procedure ADDRESS_CAN_U_SP ( 
/*******************************************************************************
	ADDRESS_CAN_U_SP

	This procedure is intended to update Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%rowtype;
--
--
begin
-- 
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_CAN_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE  
	,in_EFFECTIVE_DATE 
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data   
	,v_address_can_row
	); 

end;
  
      
   UPDATE ADDRESS_CAN set row = v_address_can_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_CAN_U_SP;

procedure ADDRESS_MEX_U_SP ( 
/*******************************************************************************
	ADDRESS_MEX_U_SP

	This procedure is intended to Update Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%rowtype;
--
--
begin
--
--
-- Convert XML to ROWTYPE --
 ADDRESS_MEX_ROWTYPE_SP ( 
	 in_COST_CENTER     
	,in_ADDRESS_TYPE   
	,in_EFFECTIVE_DATE  
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_address_mex_row
	);

      
     UPDATE ADDRESS_MEX set row  =  v_address_mex_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP, ' || ' ' ||
             'IN_TABLE_NAME IS ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_U_SP;

procedure ADDRESS_OTHER_U_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_U_SP

	This procedure is intended to Update OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
revise : 10/02/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_OTHER_ROWTYPE_SP ( 
	  in_COST_CENTER     
	 ,in_ADDRESS_TYPE    
	 ,in_EFFECTIVE_DATE  
	 ,in_TABLE_NAME  
	 ,in_ROW_DATE    
	 ,in_Row_data    
	 ,v_address_other_row   
	 );
      
      UPDATE ADDRESS_OTHER set row  =  v_address_other_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_U_SP;

PROCEDURE ADDRESS_USA_U_SP (
/*******************************************************************************
	ADDRESS_USA_U_SP

	This procedure is intended to Update ADDRESS_USA address records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_USA table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/20/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure

*******************************************************************************/
in_COST_CENTER    IN ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_usa_row address_usa%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_USA_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_ADDRESS_TYPE        
	,in_EFFECTIVE_DATE       
	,in_TABLE_NAME          
	,in_ROW_DATE             
	,in_Row_data              
	,v_address_usa_row         
	);
           
     UPDATE ADDRESS_USA set row  =  v_address_usa_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
   
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_USA_U_SP;

procedure ADMINISTRATION_U_SP (
/*******************************************************************************
	ADMINISTRATION_U_SP

	This procedure is intended to update ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_administration_row administration%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADMINISTRATION_ROWTYPE_SP (
 	 in_COST_CENTER    
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_administration_row   
	); 
      
      UPDATE ADMINISTRATION set row = v_administration_row
         where cost_center_code = in_Cost_Center;
         
       
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADMINISTRATION_U_SP;				 
				
				
procedure BANK_CARD_U_SP (
/*******************************************************************************
	BANK_CARD_U_SP

	This procedure is intended to update BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_bank_card_row bank_card%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 BANK_CARD_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_POLLING_STATUS_CODE   
	,in_MERCHANT_ID          
	,in_EFFECTIVE_DATE        
	,in_TABLE_NAME  
	,in_ROW_DATE   
	,in_Row_data    
	,v_bank_card_row   
	); 
       
      UPDATE BANK_CARD set row = v_bank_card_row
        Where cost_center_code     =  in_COST_CENTER
          and polling_status_code  =  in_POLLING_STATUS_CODE
          and merchant_id          =  in_MERCHANT_ID
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
end BANK_CARD_U_SP;

PROCEDURE BATCH_JOB_U_SP (
/*******************************************************************************
	BATCH_JOB_U_SP

	This procedure is intended to update existing BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_BATCH_JOB_row.BATCH_JOB_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_BATCH_JOB_row.BATCH_JOB_status         := v_row_value;
			when 'BATCH_JOB_START_DATE'           then  v_BATCH_JOB_row.BATCH_JOB_start_date        := v_row_value;
--			when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := v_row_value;
--			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := v_row_value;
--			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update batch_job set row = v_batch_job_row  where BATCH_JOB_NAME    = in_BATCH_JOB_NAME 
                                                   and  BATCH_JOB_NUMBER  = in_BATCH_JOB_NUMBER ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	end BATCH_JOB_U_SP;

PROCEDURE CODE_DETAIL_U_SP (
/*******************************************************************************
	CODE_DETAIL_U_SP

	This procedure is intended to update existing CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName   - Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_detail set row = v_code_detail_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type 
                                                      and  code_detail_value  = in_code_detail_value ;    
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	end CODE_DETAIL_U_SP;

PROCEDURE CODE_HEADER_U_SP (
/*******************************************************************************
	CODE_HEADER_U_SP

	This procedure is intended to update existing CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_header set row = v_code_header_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type ;    
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_HEADER_U_SP;
       
PROCEDURE COST_CENTER_U_SP (
/*****************************************************************************
	COST_CENTER_U_SP

	This procedure is intended to UPDATE cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
*****************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 

            
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%rowtype;
-------------
--
--
begin
--
dbms_output.put_line('before cost center convert to rowtype ');  
-- Convert XML to ROWTYPE --
 COST_CENTER_ROWTYPE_SP (
	 in_COST_CENTER  
	,in_TABLE_NAME  
	,in_ROW_DATE     
	,in_Row_data    
	,v_cost_center_row   
	);
--
--
--  
	dbms_output.put_line('before update call');  
	dbms_output.put_line(v_cost_center_row.cost_center_name);
	dbms_output.put_line('what is the cost_center ' || v_cost_center_row.cost_center_code);
    dbms_output.put_line('what is pop kit ' || v_cost_center_row.POP_KIT_CODE);
    	 

      --UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center; 
      UPDATE cost_center set
		COST_CENTER_NAME = v_cost_center_row.COST_CENTER_NAME,
		CATEGORY = v_cost_center_row.CATEGORY,
		ENTITY_TYPE = v_cost_center_row.ENTITY_TYPE,
		STATEMENT_TYPE = v_cost_center_row.STATEMENT_TYPE,
		COUNTRY_CODE = v_cost_center_row.COUNTRY_CODE,
		TRANSPORT_TYPE = v_cost_center_row.TRANSPORT_TYPE,
		BEGIN_DATE = v_cost_center_row.BEGIN_DATE,
		OPEN_DATE = v_cost_center_row.OPEN_DATE,
		MOVE_DATE = v_cost_center_row.MOVE_DATE,
		CLOSE_DATE = v_cost_center_row.CLOSE_DATE,
		FINANCIAL_CLOSE_DATE = v_cost_center_row.FINANCIAL_CLOSE_DATE,
		POS_PROG_VER_EFF_DATE = v_cost_center_row.POS_PROG_VER_EFF_DATE,
		UPS_ZONE_CODE = v_cost_center_row.UPS_ZONE_CODE,
		RPS_ZONE_CODE = v_cost_center_row.RPS_ZONE_CODE,
		CURRENCY_CODE = v_cost_center_row.CURRENCY_CODE,
		POS_PROG_VER_NBR = v_cost_center_row.POS_PROG_VER_NBR,
		LEASE_OWN_CODE = v_cost_center_row.LEASE_OWN_CODE,
		MISSION_TYPE_CODE = v_cost_center_row.MISSION_TYPE_CODE,
		DUNS_NUMBER = v_cost_center_row.DUNS_NUMBER,
		PRI_LOGO_GROUP_IND = v_cost_center_row.PRI_LOGO_GROUP_IND,
		SCD_LOGO_GROUP_IND = v_cost_center_row.SCD_LOGO_GROUP_IND,
		BANKING_TYPE = v_cost_center_row.BANKING_TYPE,
		DEPOSIT_BAG_REORDER = v_cost_center_row.DEPOSIT_BAG_REORDER,
		DEPOSIT_TICKET_REORDER = v_cost_center_row.DEPOSIT_TICKET_REORDER,
		POP_KIT_CODE = v_cost_center_row.POP_KIT_CODE
     where cost_center_code = v_cost_center_row.cost_center_code;

      
      
--      
   dbms_output.put_line('after update call');   

  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);

end cost_center_u_sp;

PROCEDURE EMP_DATA_U_SP (
/*******************************************************************************
	EMP_DATA_U_SP

	This procedure is intended to update existing EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
--
begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update emp_data set row = v_emp_data_row where employee_number  =  in_employee_number ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end emp_data_u_sp;

PROCEDURE MARKETING_U_SP (
/*******************************************************************************
	MARKETING_U_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
      MARKETING_ROWTYPE_SP (
	 in_cost_center           
	,in_marketing_type      
	,in_TABLE_NAME           
	,in_ROW_DATE              
	,in_Row_data              
	,v_marketing_row
	);

      
      update marketing set row = v_marketing_row where cost_center_code = in_cost_center
                                                  and  marketing_type   = in_marketing_type ;      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end marketing_u_sp;

PROCEDURE OTHER_U_SP (
/*******************************************************************************
	OTHER_U_SP

	This procedure is intended to update existing OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%rowtype;
--
--
--
begin
--
-- 
 begin
 --
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
	in_COST_CENTER          
	, v_OTHER_row  
	,in_TABLE_NAME            
	,in_ROW_DATE             
	,in_Row_data              
	);

 end;
     
      
      UPDATE OTHER set row = v_other_row where cost_center_code = in_cost_center;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end other_u_sp;

PROCEDURE PHONE_U_SP (
/*******************************************************************************
	PHONE_U_SP

	This procedure is intended to update existing PHONE records

	PHONE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised: 10/03/12 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_phone_row PHONE%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_phone_number_type    
	, v_phone_row         
	,in_TABLE_NAME           
	,in_ROW_DATE             
	,in_Row_data             
	);
      
      --dbms_output.put_line(v_phone_row.phone_number_type|| ':'|| v_phone_row.phone_number);
      UPDATE PHONE 
      set 
		PHONE_AREA_CODE = v_phone_row.PHONE_AREA_CODE
		,PHONE_NUMBER = v_phone_row.PHONE_NUMBER
		,PHONE_EXTENSION = v_phone_row.PHONE_EXTENSION
      where cost_center_code = v_phone_row.cost_center_code
      and phone_number_type = v_phone_row.phone_number_type ; 
      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end PHONE_U_SP;

PROCEDURE POLLING_U_SP (
/*******************************************************************************
	POLLING_U_SP

	This procedure is intended to update existing POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/02/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_POLLING_row         out POLLING%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );
                  
      update polling set row      = out_polling_row
       where cost_center_code     = out_polling_row.cost_center_code 
        and  polling_status_code  = out_polling_row.polling_status_code ;
      
--dbms_output.put_line('polling update done in POLLING_U_SP');      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'POLLING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end POLLING_U_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_U_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_U_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
--
begin

/* 
*/

-------------  Business Rules go here                           
--	begin

--	exception
	
--		when others then
--    dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      update polling_dwld_rsn_hist set row = v_polling_dwld_rsn_hist_row where cost_center_code     = in_cost_center
                                              and  polling_status_code  = in_polling_status_code 
                                              and  effective_date       = in_effective_date ;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_U_SP;

PROCEDURE REAL_ESTATE_U_SP (
/******************************************************************************
	REAL_ESTATE_U_SP

	This procedure is intended to update existing REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_row     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      update real_estate set row      = out_real_estate_row
       where cost_center_code     = out_real_estate_row.cost_center_code ;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_U_SP;


PROCEDURE SALES_REP_U_SP (
/*******************************************************************************
	SALES_REP_U_SP

	This procedure is intended to update changed SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_row     out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
--
begin
--
-- Convert XML to ROWTYPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      update SALES_REP set row    = OUT_SALES_REP_ROW 
       where GEMS_EMPLOYEE_ID     = OUT_SALES_REP_ROW.GEMS_EMPLOYEE_ID;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
	END SALES_REP_U_SP;
  

PROCEDURE STATUS_U_SP (
/*******************************************************************************
	STATUS_U_SP

	This procedure is intended to update changed STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_row          out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  STATUS_ROWTYPE_SP ( 
         in_table_name
        ,in_Row_Data
        ,out_STATUS_row    
                   );
                  
      update status set row    = out_status_row
       where cost_center_code  = out_status_row.cost_center_code 
        and  status_code       = out_status_row.status_code              
        and  effective_date    = out_status_row.effective_date; 
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
END STATUS_U_SP;


PROCEDURE STORE_U_SP (
/******************************************************************************
	STORE_U_SP

	This procedure is intended to update changed STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_STORE_row           out STORE%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_STORE_row 
                   );
                  
      update store set row     = out_store_row
       where cost_center_code  = out_store_row.cost_center_code ; 
           
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END STORE_U_SP;


PROCEDURE TAXWARE_U_SP (
/*******************************************************************************
	TAXWARE_U_SP

	This procedure is intended to update changed TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_TAXWARE_row         out TAXWARE%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin
--
-- Convert XML to ROWTYPE --	
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_TAXWARE_row 
                   );
                  
      update TAXWARE set row   = out_TAXWARE_row
       where cost_center_code  = out_TAXWARE_row.cost_center_code ; 
           
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);
                     
	END TAXWARE_U_SP;


PROCEDURE TERMINAL_U_SP (
/******************************************************************************
	TERMINAL_U_SP

	This procedure is intended to update changed terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_row     out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
      UPDATE TERMINAL SET ROW       = OUT_TERMINAL_ROW
       WHERE COST_CENTER_CODE       = OUT_TERMINAL_ROW.COST_CENTER_CODE
          AND POLLING_STATUS_CODE   = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
          AND TERMINAL_NUMBER       = OUT_TERMINAL_ROW.TERMINAL_NUMBER
          AND EFFECTIVE_DATE        = OUT_TERMINAL_ROW.EFFECTIVE_DATE;
           
      
    
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERMINAL_U_SP;


PROCEDURE TERRITORY_U_SP (
/*******************************************************************************
	TERRITORY_U_SP

	This procedure is intended to update changed TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_row     out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      update territory set row        = out_territory_row
       where territory_sls_mgr_code   = out_territory_row.territory_sls_mgr_code
        and  cost_center_code         = out_territory_row.cost_center_code ;
         
        
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_U_SP;


PROCEDURE TERRITORY_ASSIGNMENT_U_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_U_SP

	This procedure is intended to update changed territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ASSIGNMENT_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_ASSIGN_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_assignment_row 
                   );
                  
      update territory_assignment set row      = out_territory_assignment_row
        where territory_sls_mgr_code = out_territory_assignment_row.territory_sls_mgr_code
          and cost_center_code = out_territory_assignment_row.cost_center_code
          and gems_employee_id = out_territory_assignment_row.gems_employee_id
          and effective_date   = out_territory_assignment_row.effective_date ;
          
        
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_ASSIGNMENT_U_SP;


PROCEDURE TERRITORY_SALES_MGR_U_SP (
/*****************************************************************************
	TERRITORY_SALES_MGR_U_SP

	This procedure is intended to update changed territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_SALES_MGR_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_SALES_MGR_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_sales_mgr_row 
                   );
                  
      update territory_sales_mgr set row      = out_territory_sales_mgr_row
       where territory_sls_mgr_code           = out_territory_sales_mgr_row.territory_sls_mgr_code;
       
      
          
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_U_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_SALES_MGR_U_SP;
 

PROCEDURE TYPE_U_SP (
/*****************************************************************************
	TYPE_U_SP

	This procedure is intended to update changed TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,IN_ROW_DATA             in  varchar2 --sys.xmltype
,out_type_row            out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
                  
      update type set row       = out_type_row
       where cost_center_code   = out_type_row.cost_center_code
        and type_code           = out_type_row.type_code
        and effective_date      = out_type_row.effective_date ; 
        
      
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'TYPE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);

end TYPE_U_SP;
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PROCEDURE ADDRESS_CAN_ROWTYPE_SP ( 
/*******************************************************************************
	 ADDRESS_CAN_ROWTYPE_SP

	This procedure is intended to Insert/Update  Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_cost_center     in  address_can.cost_center_code%type 
,in_address_type    in  address_can.address_type%type 
,in_effective_date  in  address_can.effective_date%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_can%rowtype
)

 is 
 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
 
v_address_can_row   ADDRESS_CAN%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);  
      
      
     if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;

        
--       dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE  := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE      := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE    := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1    := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2    := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3    := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY              := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE     := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE       := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS     := v_row_value;
			when 'COUNTRY_CODE'		 then  v_address_can_row.COUNTRY_CODE     := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
   out_address_type := v_address_can_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end  ADDRESS_CAN_ROWTYPE_SP;				 
				
procedure ADDRESS_MEX_ROWTYPE_SP ( 
 /******************************************************************************
	ADDRESS_MEX_ROWTYPE_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_mex%rowtype
)

 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row  ADDRESS_MEX%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;

        
--        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE     := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1   := v_row_value;
	   		when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2   := v_row_value;
	    	when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3   := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY             := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE    := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE      := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS    := v_row_value;
			when 'COUNTRY_CODE' 	 then v_address_mex_row.COUNTRY_CODE          :=  v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
    out_address_type := v_address_mex_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_ROWTYPE_SP;

procedure ADDRESS_OTHER_ROWTYPE_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_ROWTYPE_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_other%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name); 


   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;        
        --dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE     := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1   := v_row_value;
	   		when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2   := v_row_value;
	    	when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3   := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY             := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE_CODE    := v_row_value;
      		when 'STATE'             then  v_address_other_row.STATE_CODE       := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE      := v_row_value;
      		when 'COUNTRY_CODE'      then  v_address_other_row.COUNTRY_CODE     := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS    := v_row_value;
		ELSE
			null;		
		END CASE;	   	


  else
      null ;
  end if;
    v_row_value := null;
  end loop ;
      
     out_address_type  :=  v_address_other_row; 
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_ROWTYPE_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_ROWTYPE_SP;

PROCEDURE ADDRESS_USA_ROWTYPE_SP (
/*******************************************************************************
	ADDRESS_USA_ROWTYPE_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/

 in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE 
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_address_type        out address_usa%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_ADDRESS_USA_row  ADDRESS_USA%rowtype;
v_row_value                  varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/


dbms_output.put_line('after begin in ADDRESS_USA_ROWTYPE_SP');
      for table_fields_rec in table_fields_cur loop

      
      
		      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
		
   		if (table_fields_rec.data_type <> 'DATE') then
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
      else
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
        end if;
		    
		    
		/***  below is a list of all the fields in the table  ***/
		/*
		            COST_CENTER_CODE
		            ADDRESS_TYPE
		            EFFECTIVE_DATE
		            EXPIRATION_DATE
		            ADDRESS_LINE_1
		            ADDRESS_LINE_2
		            ADDRESS_LINE_3
		            CITY
		            STATE_CODE
		            ZIP_CODE
		            ZIP_CODE_4
		            COUNTY
		            FIPS_CODE
		            DESTINATION_POINT
		            CHECK_DIGIT
		            VALID_ADDRESS
		*/
		
				  	case table_fields_rec.column_name
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE  :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE          :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE      :=  TO_DATE(v_row_value,'MM-DD-YYYY');
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE    :=  TO_DATE(v_row_value,'MM-DD-YYYY');
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1      :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2      :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3      :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY                          :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE              :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE                  :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4              :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY                      :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE                :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT            :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS        :=  v_row_value;
                           		when 'COUNTRY_CODE' then v_ADDRESS_USA_row.COUNTRY_CODE          :=  v_row_value;
		
					ELSE
						null;		
					END CASE;	   	
		
		
		      end if;

      end loop ;
      
     out_address_type  := v_ADDRESS_USA_row;
      
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_ROWTYPE_SP, ' || ' ' ||
        'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_ROWTYPE_SP;

procedure ADMINISTRATION_ROWTYPE_SP (
/*******************************************************************************
	ADMINISTRATION_ROWTYPE_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE 
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_administration_type  out ADMINISTRATION%rowtype
)
 
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
    --dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE     := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY             := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

  end loop ;
      
    out_administration_type :=  v_administration_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end ADMINISTRATION_ROWTYPE_SP;				 
				
procedure BANK_CARD_ROWTYPE_SP (
/*******************************************************************************
	BANK_CARD_ROWTYPE_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_bank_card_row  out  bank_card%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/



      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
    --dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code  := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID          := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE       := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID   := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE         := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id           := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID          := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
       
       out_bank_card_row := v_bank_card_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_ROWTYPE_SP;				 
				
PROCEDURE COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
	COST_CENTER_ROWTYPE_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised:
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
,out_cost_center_type  out cost_center%rowtype
)
 is 
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_cost_center_row cost_center%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := UPPER(v_row_value);
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
			when 'POP_KIT_CODE' then  v_cost_center_row.POP_KIT_CODE := v_row_value;
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
    out_cost_center_type :=  v_cost_center_row;
    
         
  

end COST_CENTER_ROWTYPE_SP;

PROCEDURE MARKETING_ROWTYPE_SP (
/*******************************************************************************
	MARKETING_ROWTYPE_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center          in  marketing.cost_center_code%type 
,in_marketing_type       in  marketing.marketing_type%type 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_marketing_type  out marketing%rowtype

)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_MARKETING_row MARKETING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_MARKETING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_MARKETING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code           := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                   := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type             := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date             := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date            := to_date(v_row_value,'MM-DD-YYYY');
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                  := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size       := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size         := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting    := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     out_marketing_type  :=  v_marketing_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end MARKETING_ROWTYPE_SP;

PROCEDURE OTHER_ROWTYPE_SP (
/*******************************************************************************
	OTHER_ROWTYPE_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE 
,out_other_type              OUT OTHER%ROWTYPE

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
 
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_OTHER_row OTHER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     out_other_type  :=  v_other_row; 
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end OTHER_ROWTYPE_SP;				 
				
PROCEDURE PHONE_ROWTYPE_SP (
/*******************************************************************************
	PHONE_ROWTYPE_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE 
,in_phone_number_type    in  phone.phone_number_type%type 
,out_phone_type              OUT PHONE%ROWTYPE 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_PHONE_row PHONE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_ouutput.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code       := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type      := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code        := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number           := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension        := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
    
    out_phone_type  :=    v_PHONE_row;
           
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
             errpkg.raise_err(v_code, 'PHONE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end PHONE_ROWTYPE_SP;				 
				

PROCEDURE POLLING_ROWTYPE_SP (
/*******************************************************************************
	POLLING_ROWTYPE_SP

	This procedure Build a POLLING Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Polling_ROWTYPE  -  Polling Data Row

created  : 09/26/2012 TAL -- CCN Project....
		 : 04/03/2013 BLR error message pointing to wrong procedure
         : 06/12/2013 kdp upated code to work with current_flag
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_polling_rowtype     out polling%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_POLLING_row   POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

	      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
	
   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
		 
		/***  below is a list of all the fields in the table  ***/
		
			  	case table_fields_rec.column_name
					when 'COST_CENTER_CODE'           then  v_polling_row.cost_center_code            := v_row_value;
					when 'POLLING_STATUS_CODE'        then  v_polling_row.polling_status_code         := v_row_value;
          			when 'MULTICAST_IND'              then  v_polling_row.multicast_ind               := v_row_value;
					when 'TIME_ZONE'                  then  v_polling_row.time_zone                   := v_row_value;
					when 'POLLING_IND'                then  v_polling_row.polling_ind                 := v_row_value;
					when 'NEXT_DOWNLOAD_BLOCK_COUNT'  then  v_POLLING_row.NEXT_DOWNLOAD_BLOCK_COUNT   := v_row_value;
					when 'CURRENT_FLAG'  			  then  v_POLLING_row.CURRENT_FLAG   			  := v_row_value;
          ELSE
            null;		
          END CASE;	   	
		
	     end if;

    end loop ;
      
      out_polling_rowtype  :=  v_POLLING_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);        
	
END POLLING_ROWTYPE_SP;


PROCEDURE REAL_ESTATE_ROWTYPE_SP (
/******************************************************************************
	REAL_ESTATE_ROWTYPE_SP

	This procedure Build a REAL_ESTATE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  REAL_ESTATE_ROWTYPE  -  REAL_ESTATE Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_rowtype     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_real_estate_row   real_estate%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
      ELSE
        null;		
      END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      out_real_estate_rowtype  :=  v_real_estate_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_ROWTYPE_SP;


PROCEDURE SALES_REP_ROWTYPE_SP (
/******************************************************************************
	SALES_REP_ROWTYPE_SP

	This procedure Build a SALES_REP Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Sales_Rep_ROWTYPE  -  Sales_Rep Data Row

created : 09/26/2012 TAL -- CCN Project....
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_rowtype   out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_sales_rep_row   sales_rep%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case TABLE_FIELDS_REC.COLUMN_NAME
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
      ELSE 
        null;		
      END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      out_SALES_REP_rowtype  :=  v_SALES_REP_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'SALES_REP_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end SALES_REP_ROWTYPE_SP;


PROCEDURE STATUS_ROWTYPE_SP (
/******************************************************************************
	STATUS_ROWTYPE_SP

	This procedure Build a STATUS Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Status_ROWTYPE   -  Status Data Row

created: 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_rowtype   out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_status_row   status%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case TABLE_FIELDS_REC.COLUMN_NAME
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');
      ELSE  
        null;		
      END CASE;	   	

      else
        null ;
      end if;

      end loop ;
      
      out_STATUS_rowtype  :=  v_STATUS_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STATUS_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
END STATUS_ROWTYPE_SP;


PROCEDURE STORE_ROWTYPE_SP (
/******************************************************************************
	STORE_ROWTYPE_SP

	This procedure Build a STORE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Store_ROWTYPE    -  Store Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_store_rowtype       out store%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_store_row     store%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;
			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;
			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;
		ELSE
			null;		
		END CASE;	   	

      else
        null ;
      end if;

      end loop ;
      
      out_STORE_rowtype  :=  v_STORE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STORE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end STORE_ROWTYPE_SP;


PROCEDURE TAXWARE_ROWTYPE_SP (
/******************************************************************************
	TAXWARE_ROWTYPE_SP

	This procedure Build a TAXWARE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Taxware_ROWTYPE  -  Taxware Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_taxware_rowtype   out taxware%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_taxware_row   taxware%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;
			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;
			when 'LAST_MAINT_DATE'            then  v_TAXWARE_row.LAST_MAINT_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'LAST_MAINT_METHOD_ID'       then  v_TAXWARE_row.LAST_MAINT_METHOD_ID     := v_row_value;
			when 'LAST_MAINT_USER_ID'         then  v_TAXWARE_row.LAST_MAINT_USER_ID       := v_row_value;
		ELSE
			null;		
		END CASE;

      else
        null ;
      end if;

      end loop ;
      
      out_TAXWARE_rowtype  :=  v_TAXWARE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TAXWARE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TAXWARE_ROWTYPE_SP;


PROCEDURE TERMINAL_ROWTYPE_SP (
/******************************************************************************
	TERMINAL_ROWTYPE_SP

	This procedure Build a TERMINAL Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_rowtype   out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_terminal_row   terminal%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code       := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code    := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number        := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date         := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date     := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number   := v_row_value;
			
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERMINAL_rowtype  :=  v_TERMINAL_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERMINAL_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TERMINAL_ROWTYPE_SP;


PROCEDURE TERRITORY_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_ROWTYPE_SP

	This procedure Build a TERRITORY Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_rowtype   out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_row   territory%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'     then  v_territory_row.territory_sls_mgr_code    := v_row_value;
      when 'COST_CENTER_CODE'           then  v_territory_row.cost_center_code          := v_row_value;
			when 'CATEGORY'                   then  v_territory_row.category                  := v_row_value;
			when 'LEASE_CAR_INDICATOR'        then  v_territory_row.lease_car_indicator       := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE'   then  v_territory_row.territory_type_busn_code  := v_row_value;
			when 'HOME_STORE'                 then  v_territory_row.home_store                := v_row_value;
			 
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_rowtype  :=  v_TERRITORY_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);      
      errpkg.raise_err(v_code, 'TERRITORY_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TERRITORY_ROWTYPE_SP;


PROCEDURE TERRITORY_ASSIGN_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_ASSIGN_ROWTYPE_SP

	This procedure Build a TERRITORY_ASSIGNMENT Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_Assignment_ROWTYPE  -  Territory_Assignment Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_assignment_row   territory_assignment%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code   := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code         := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category                 := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id         := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date           := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date          := to_date(v_row_value,'MM-DD-YYYY');
						
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_ASSIGNMENT_row  :=  v_TERRITORY_ASSIGNMENT_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end TERRITORY_ASSIGN_ROWTYPE_SP;


PROCEDURE TERRITORY_SALES_MGR_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_ROWTYPE_SP

	This procedure Build a TERRITORY_SALES_MGR Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_Sales_Mgr_ROWTYPE  -  Territory_Sales_Mgr Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_sales_mgr_row   territory_sales_mgr%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name		
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code  := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id        := v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad   := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type  := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date          := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date         := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name              := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial          := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name               := v_row_value;
			 
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_SALES_MGR_row  :=  v_TERRITORY_SALES_MGR_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end TERRITORY_SALES_MGR_ROWTYPE_SP;


PROCEDURE TYPE_ROWTYPE_SP (
/******************************************************************************
	TYPE_ROWTYPE_SP

	This procedure Build a TYPE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Type_ROWTYPE     -  Type Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_type_rowtype        out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_type_row      type%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'   then  v_type_row.cost_center_code   := v_row_value;
			when 'TYPE_CODE'          then  v_type_row.type_code          := v_row_value;
			when 'EFFECTIVE_DATE'     then  v_type_row.effective_date     := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'    then  v_type_row.expiration_date    := to_date(v_row_value,'MM-DD-YYYY');
			
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TYPE_rowtype  :=  v_TYPE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TYPE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
END TYPE_ROWTYPE_SP;


--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

	PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;

--REMOVE TESTING

PROCEDURE CC_ADDTL_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDTL_TABLES_UI_SP  --   create/update tables
	 impacted by cost center table changes/inserts VIA
   COST_CENTER_UI_UPSERT_SP.
        Procedure

	This procedure is intended to insert/update the database
	 for the following tables when creating/updating the
	 Cost_Center associated tables.
	Tables are as follows: 
            , ADMINISTRATION
            , STORE
            , OTHER
            , REAL_ESTATE
            , TERRITORY
            tables.  

created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 
   in_table_name          IN  varchar2   
  ,in_row_data           IN  varchar2  --sys.xmltype
  )
 IS

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
 
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data);
v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--
v_xml_administration_frag clob;
v_xml_store_frag clob;
v_xml_other_frag clob;
v_xml_real_estate_frag clob;
v_xml_territory_frag clob;
--

V_TERRITORY_ROWTYPE            TERRITORY%rowtype;
V_STORE_ROWTYPE                STORE%rowtype;
V_OTHER_ROWTYPE                OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE       ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE          REAL_ESTATE%rowtype;
--
v_count integer := 1;
        
--  ADMINISTRATION insert/update process 

begin

   --     for tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/COST_CENTER_UI/' || in_table_name) = 1) then   
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| in_table_name).getCLOBVal();
     
       -- case tables_rec.table_name
        case in_table_name    
            when 'ADMINISTRATION' 	then v_xml_administration_frag := v_xml_frag;
            when 'STORE' 	     	then v_xml_store_frag := v_xml_frag;
            when 'OTHER'		    then v_xml_other_frag := v_xml_frag;
            when 'REAL_ESTATE'	then v_xml_real_estate_frag := v_xml_frag;
            when 'TERRITORY'		then v_xml_territory_frag := v_xml_frag;		
                    
        else
            null;
        end case;
 
     
      
       BEGIN 
          if v_xml_administration_frag  is not null  then
              CCN_TABLE_IU_PKG.ADMINISTRATION_I_SP (                            
                 null   
                , 'ADMINISTRATION' 
                , null
                , v_xml_administration_frag);    
 --        dbms_output.put_line('ADMINISTRATION Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.ADMINISTRATION_U_SP (                  
                     null   
                , 'ADMINISTRATION' 
                , null
                , v_xml_administration_frag); 
 --         dbms_output.put_line('ADMINISTRATION Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADMINISTRATION Update Error' );
           end;
        end;

--  STORE insert/update process 
 
       begin
        
          if v_xml_store_frag  is not null  then
              CCN_TABLE_IU_PKG.STORE_I_SP (                            
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype);                    
 --   dbms_output.put_line('STORE Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.STORE_U_SP (                  
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype); 
 --   dbms_output.put_line('STORE Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'STORE Update Error' );
           end;
        end;

--  OTHER insert/update process 
 
       begin
        
          if v_xml_other_frag  is not null  then
              CCN_TABLE_IU_PKG.OTHER_I_SP (                            
                   null   
                , 'OTHER' 
                , null
                , v_xml_other_frag);              
             
 --  Dbms_output.put_line('OTHER Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.OTHER_U_SP (                  
                      null   
                , 'OTHER' 
                , null
                , v_xml_other_frag);              
                           
 --   dbms_output.put_line('OTHER Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'OTHER Update Error' );
           end;
        end;

--  REAL_ESTATE insert/update process 
 
       begin
        
          if v_xml_real_estate_frag  is not null  then
              CCN_TABLE_IU_PKG.REAL_ESTATE_I_SP (                            
                 'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
 --     dbms_output.put_line('REAL_ESTATE Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
          
            begin
              CCN_TABLE_IU_PKG.REAL_ESTATE_U_SP (                  
               'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
  --     dbms_output.put_line('REAL_ESTATE Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'REAL_ESTATE Update Error' );
           end;
        end;

--  TERRITORY insert/update process 
 
       begin
        
          if v_xml_territory_frag  is not null  then
              CCN_TABLE_IU_PKG.TERRITORY_I_SP (                            
                      'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                   
             
  --  dbms_output.put_line('TERRITORY Insert executed ');
          end if;
          
       EXCEPTION
       
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.TERRITORY_U_SP (                  
                    'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                        
               
 -- dbms_output.put_line('TERRITORY Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'TERRITORY Update Error' );
           end;
        end;
 END if;
 
    EXCEPTION
    when others then
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
          v_errm || ' ' ||
          ' Errors' );
 --  dbms_output.put_line('in others ');
 --  dbms_output.put_line(sqlerrm);   

END CC_ADDTL_TABLES_UI_SP;

PROCEDURE CC_ADDRESS_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDRESS_TABLES_UI_SP   --   create/update tables
	 impacted by cost center table changes/inserts via 
   COST_CENTER_UI_UPSERT_SP.
        Procedure

	This procedure will add one address row singular
	for the following tables depending on category type : 
               ADDRESS_USA
            ,  ADDRESS_CAN
            ,  ADDRESS_MEX
            ,  ADDRESS_OTHER
           
            tables.  

created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 
 
in_table_name          IN  varchar2 
,in_row_data            IN  varchar2  --sys.xmltype
)
 IS
 
 cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data); 
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--

v_xml_addr_usa_frag clob;
v_xml_addr_mex_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
--

V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%rowtype;
V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%rowtype;
V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%rowtype;
V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%rowtype;
--
v_count integer := 1;
       
 begin

dbms_output.put_line(in_table_name); 
 
    if (v_Row_data.existsNode('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| in_table_name) = 1) then 
    	 dbms_output.put_line('23here');	  
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT').getCLOBVal();
         dbms_output.put_line(v_xml_frag);
       case in_table_name      
       
            when 'ADDRESS_CAN'      then v_xml_addr_can_frag := v_xml_frag;
            when 'ADDRESS_MEX'     	then v_xml_addr_mex_frag := v_xml_frag;
            when 'ADDRESS_USA'	    then v_xml_addr_usa_frag := v_xml_frag;
            when 'ADDRESS_OTHER'	  then v_xml_addr_oth_frag := v_xml_frag;            
        else
            null;
        end case;
    
     
        BEGIN
        
          if v_xml_addr_can_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_CAN'
                 , null
                 , v_xml_addr_can_frag);                 
             
 -- dbms_output.put_line('ADDRESS CAN Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_CAN_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_CAN'
                 , null
                 , v_xml_addr_can_frag);                          
               
 --  dbms_output.put_line('ADDRESSCAN Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS CAN Update Error' );
           end;
        end;  

--  ADDRESS_MEX insert/update process 

       begin
      
         if v_xml_addr_mex_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_MEX'
                 , null
                 , v_xml_addr_mex_frag);                 
             
  --  dbms_output.put_line('ADDRESS MEX Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_MEX_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_MEX'
                 , null
                 , v_xml_addr_mex_frag);                          
               
  -- dbms_output.put_line('ADDRESS MEX Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS MEX Update Error' );
           end;
        end;

--  ADDRESS_OTHER insert/update process 

       begin
 
          if v_xml_addr_oth_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_OTHER'
                 , null
                 , v_xml_addr_oth_frag);                 
             
 -- dbms_output.put_line('ADDRESS OTHER Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_OTHER'
                 , null
                 , v_xml_addr_oth_frag);                          
               
  --  dbms_output.put_line('ADDRESS OTHER Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS OTHER Update Error' );
           end;
        end;

--  ADDRESS_USA insert/update process 

       begin
dbms_output.put_line('ADDRESS USA Insert before executed ');       
          if v_xml_addr_usa_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_USA'
                 , null
                 , v_xml_addr_usa_frag);                 
             
   dbms_output.put_line('ADDRESS USA Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_USA_U_SP (                  
                   null                      --in_cost_center
                 , null                      --in_address_type
                 , null                      --in_effective_date
                 , 'ADDRESS_USA'             --in_table_name
                 , null                      --in_row_date
                 , v_xml_addr_usa_frag);     --in_row_data   xml                   
                
  -- dbms_output.put_line('ADDRESS USA Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS USA Update Error' );
           end;
        end;
  END IF;


    EXCEPTION
    when others then
    
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
          v_errm || ',' ||
          ' Errors' );
  -- dbms_output.put_line('in others ');
  -- dbms_output.put_line(sqlerrm);   

 
END CC_ADDRESS_TABLES_UI_SP;

end CCN_TABLE_IU_PKG;

@


1.27
log
@ccna - 408 PASS MARKING TYPE CODES FIELDS
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d576 3
a578 3
PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER       IN  MARKETING.COST_CENTER_CODE%TYPE
                         		, IN_MARKETING_TYPE              IN  MARKETING.MARKETING_TYPE%TYPE                          
                         		, OUT_MARKETING_REF_CUR          IN  OUT sys_refcursor)
d603 3
a605 3
	  select  S.*  
             		  ,( S.mkt_brand || S.mkt_mission || S.mkt_sales_floor_size || 
              	    S.mkt_warehouse_size || S.mkt_real_estate_setting) as MKT_STATS
d608 1
a608 1
      			   and  S.marketing_type          = nvl(in_marketing_type, marketing_type) 
d1708 2
a1709 1
--
d1722 2
a1723 1
--
d1730 6
a1735 2
--  Insert new BANK_CARD row --       
      INSERT into BANK_CARD values  v_bank_card_row;
d1737 1
a1737 1
      
d7503 2
a7504 1
end CCN_TABLE_IU_PKG;@


1.26
log
@UPPER cost center fix
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
d576 4
a579 3
PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER        IN  MARKETING.COST_CENTER_CODE%TYPE
                          , IN_MARKETING_TYPE     IN  MARKETING.MARKETING_TYPE%TYPE 
                          , OUT_MARKETING_REF_CUR OUT REF_CURSOR)
d589 3
d593 1
a593 1
        is                  
d597 2
d602 1
a602 1
		  OPEN out_MARKETING_REF_CUR FOR
d604 9
a612 7
			  select * 
			  from marketing
			  where cost_center_code = in_cost_center
         and  marketing_type   = nvl(in_marketing_type, marketing.marketing_type)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
a623 1

d7498 1
a7498 2
end CCN_TABLE_IU_PKG;

@


1.25
log
@MARKETING FIX
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d5640 1
a5640 1
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
@


1.24
log
@fixes for saving phone table data
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d2281 1
d2289 2
a2290 1
--  Insert new MARKETING row --
d2292 1
d2302 1
a2302 1
        
@


1.23
log
@fixes for polling
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d3835 1
d3849 3
a3851 2
	dbms_output.put_line(in_cost_center);
	 
d4176 9
a4184 1
      UPDATE PHONE set row = v_phone_row where cost_center_code = in_cost_center;
d5659 2
@


1.22
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d684 1
a684 1
					,in_POLLING_STATUS_CODE IN POLLING.POLLING_STATUS_CODE%TYPE
d699 1
d701 8
a708 1

d712 3
a714 3
			  FROM POLLING
			  where cost_center_code = in_COST_CENTER
			  and polling_status_code = in_POLLING_STATUS_CODE
d2278 5
@


1.21
log
@added multiple address ability to XML input and update if address is a duplicate
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d1219 1
a1219 1
--  Insert new ADDRESS_OTHER row --
d4971 1
d5159 2
a5160 1
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d5172 1
a5172 1
 --       dbms_output.put_line('row value is ' || v_row_value);
d5197 1
a5197 1

d7462 2
a7463 1
end CCN_TABLE_IU_PKG;@


1.20
log
@cost center fix insert
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
d1157 1
d1175 1
d1188 6
a1193 2
--
--
d1195 17
a1211 11
--
-- Convert XML to ROWTYPE --
 ADDRESS_CAN_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE  
	,in_EFFECTIVE_DATE 
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data   
	,v_address_can_row
	); 
d1220 36
a1255 2
--  Insert new ADDRESS_CAN row --
   INSERT into ADDRESS_CAN values v_address_can_row ;
d1264 3
a1266 2
end ADDRESS_CAN_I_SP;				 
				
d1285 1
d1298 6
a1303 2
-- 
--
d1305 17
a1321 11
--  
-- Convert XML to ROWTYPE -- 
 ADDRESS_MEX_ROWTYPE_SP ( 
	  in_COST_CENTER
	 ,in_ADDRESS_TYPE    
	 ,in_EFFECTIVE_DATE  
	 ,in_TABLE_NAME  
	 ,in_ROW_DATE    
	 ,in_Row_data    
	 ,v_address_mex_row 
	 );
d1330 36
a1365 2
--  Insert new ADDRESS_MEX row --      
     INSERT into ADDRESS_MEX values v_address_mex_row;
d1374 2
a1375 1
end ADDRESS_MEX_I_SP;
d1394 1
d1407 6
a1412 2
--
--
d1414 17
a1430 11
--
-- Convert XML to ROWTYPE --
  ADDRESS_OTHER_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE    
	,in_EFFECTIVE_DATE  
	,in_TABLE_NAME  
	,in_ROW_DATE   
	,in_Row_data    
	,v_address_other_row
	); 
d1440 36
a1475 1
      INSERT into ADDRESS_OTHER values v_address_other_row;
d1484 2
a1485 1
end ADDRESS_OTHER_I_SP;
d1517 1
a1517 2
--
--v_row_value     varchar2(500);
d1521 2
a1522 2
--
--
a1523 7
--
-- convert XML to ROWTYPE --
	dbms_output.put_line('before convert XML to ROWTYPE');
	dbms_output.put_line (in_Row_data);
	
	   WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']') = 1 LOOP 
--         V_HRCHY_HDR_NAME     := v_XML.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']';
d1525 3
d1529 1
a1529 1
			v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']').getCLOBVal();
d1531 2
a1532 3
	
	
				  ADDRESS_USA_ROWTYPE_SP (
d1541 15
a1555 27
					dbms_output.put_line('after convert XML to ROWTYPE');
				--
				--
				--  Expire currently active ADDRESS_USA Record before insert --
--					dbms_output.put_line('Expire currently active ADDRESS_USA Record before insert');
--				    
--				    dbms_output.put_line('v_address_usa_row.COST_CENTER_CODE ' || v_address_usa_row.COST_CENTER_CODE );                                                                                 
--					dbms_output.put_line('v_address_usa_row.EFFECTIVE_DATE ' || v_address_usa_row.EFFECTIVE_DATE );                                                                                 
--					dbms_output.put_line('v_address_usa_row.ADDRESS_TYPE ' || v_address_usa_row.ADDRESS_TYPE );                                                                                 
						
				      COMMON_TOOLS.EXPIRE_DATA_SP (
				      'ADDRESS_USA'
						 , v_address_usa_row.COST_CENTER_CODE
				     , v_address_usa_row.EFFECTIVE_DATE
				     , v_address_usa_row.ADDRESS_TYPE);
				--
				--  Insert new ADDRESS_USA row --  
--					dbms_output.put_line('attempt insert'); 

 					begin

				      insert into ADDRESS_USA values v_ADDRESS_USA_row;     
				    
				    
				    exception
				       when dup_val_on_index then
				            begin
d1557 3
a1559 3
								update ADDRESS_USA set 
									EXPIRATION_DATE = null--v_ADDRESS_USA_row.EXPIRATION_DATE
									,ADDRESS_LINE_1 = v_ADDRESS_USA_row.ADDRESS_LINE_1
d1572 1
a1572 1
								where 
d1576 1
a1576 3

							
				                
d1585 3
a1587 10
					           end;

		             WHEN OTHERS THEN 
		                 v_code  := SQLCODE;
		                 v_errm  := substr(SQLERRM,1,200);
		                 errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
		                 v_errm || ';  ' ||
		                 'ADDRESS USA Update Error' );						       
				    end;  
		
d1589 1
a1589 1
      end loop;
d1596 1
a1596 2
             'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
        
d1598 1
a1598 1
end ADDRESS_USA_I_SP;
d3833 37
a3869 2
--
      UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center;
d3871 1
a3871 1
      
d7461 1
a7461 2
end CCN_TABLE_IU_PKG;

@


1.19
log
@polling fix
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
a1 1
package body CCN_UI_INTERFACE_APP_PKG
d5 1
a5 1
This package is intended to return data for the cost_center table
d8 6252
a6259 2
changed : 09/21/2012 TAL -- Split into Table_IU and Interface_UI
        : 04/04/2013 TAL -- Modified Error Messages to be easier to read
d6261 28
d6290 3
a6292 1
--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE
d6294 1
a6294 3
	PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP
d6296 22
a6317 2
	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  
d6319 3
a6321 6
created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  
d6323 13
a6335 1
	BEGIN
a6336 11
		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;
d6338 3
a6340 1
--REMOVE TESTING
d6342 1
d6344 3
a6346 6
PROCEDURE ADDRESS_UI_SP ( inCost_center                   in COST_CENTER.cost_center_code%type
                         ,inCountry_code                  in COST_CENTER.country_code%type
                         ,inAddressType					          in ADDRESS_USA.address_type%type DEFAULT NULL                                                 
                         ,out_ADDRESS_REF_CUR             out sys_refcursor)
/*******************************************************************************
	ADDRESS_UI_SP
d6348 9
a6356 7
	This procedure is intended to return an address ref cursor with data to be
	used for java  ADDRESS screen. 
     
created : 09/05/2012 BLR CCN UI Project....
revised :
*******************************************************************************/
        is                  
d6359 33
a6391 1
 v_in_costctr varchar2(6);  
d6393 19
a6411 5
 v_cost_center_row         COST_CENTER%ROWTYPE;
 v_home_store              TERRITORY.home_store%TYPE;
 
 invalid_country_code_err    EXCEPTION;
-- invalid_cost_center_err     EXCEPTION;
d6413 3
a6415 69
  BEGIN 
         
/*  
 1.0  For VALIDATION OF COUNTRY_CODE INPUT 
*/		
      if  not common_tools.code_detail_valid ('COUNTRY_CODE',inCountry_code) then  
      -- value not found in table 
              raise invalid_country_code_err; 
      end if; 
  
 /*  
 2.0  Get Cost Center Table for Category code validation
*/	
      
      select * into v_cost_center_row
              from COST_CENTER
              where cost_center_code =   inCost_center;
 
/*  
 3.0  when category code equal 'T' use home_store cost center
*/  
   
      if v_cost_center_row.category = 'T'  then    
         select home_store 
           into v_home_store
           from TERRITORY
           where cost_center_code =   inCost_center;	         
         else
           v_home_store := inCost_center;      
      end if;
 /*  
4.0  Validate which Country code column is being processed to extract correct
      address table such as:
      - ADDRESS_USA;
      - ADDRESS_CAN;
      - ADDRESS_MEX;
      - ADDRESS_OTHER
      ADDRESS_OTHER TABLE HOUSES ALL COUNTRIES EXCEPT USA, CANADA, PUERTO RICO, OR MEXICO
*/   
       
	    CASE ( inCountry_code ) 
        when 'USA' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );     
         
         when 'PRI' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );    
            
         when 'CAN' then
            CCN_TABLE_IU_PKG.ADDRESS_CAN_S_SP (                
             v_home_store 
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
                
         when 'MEX' then
            CCN_TABLE_IU_PKG.ADDRESS_MEX_S_SP (            
              v_home_store
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
         else 
            CCN_TABLE_IU_PKG.ADDRESS_OTHER_S_SP (           
             v_home_store
            ,inAddressType
            ,out_ADDRESS_REF_CUR );
a6416 3
  END CASE; 
         
     
d6418 53
a6470 20
       
   when invalid_country_code_err then  
        v_code := errnums.en_invalid_code_detail_err;
        errpkg.raise_err(v_code, 'ADDRESS_UI_SP.invalid_country_code_err ',    
        'Entered Country_Code was "' || InCountry_code || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Country code must be found on "CODE_DETAIL TABLE ". '); 
  
  
    when OTHERS then
       v_code := sqlcode;
	     v_errm := substr(sqlerrm,1, 500);
       errpkg.raise_err(v_code, v_errm ||
        'CCN_TABLE_IU_PKG '  || 'No errors found');
       
 END ADDRESS_UI_SP;
 
 
PROCEDURE COST_CENTER_UI_SP ( 
 /******************************************************************************
	COST_CENTER_UI_SP   --    Cost Center User Interface Procedure
d6472 1
a6472 3
	This procedure is intended to return a ref cursor with data from 
	from the COST_CENTER, ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
  STATUS, TYPE, MARKETING, PHONE, TAXWARE, and ADDRESS tables.  
d6474 1
a6474 12
created : 09/06/2012 MDH CCN Project....
*******************************************************************************/
            IN_COST_CENTER          IN  COST_CENTER.COST_CENTER_CODE%TYPE
 --          
					, OUT_COST_CENTER_REF_CUR       OUT SYS_REFCURSOR
 					, OUT_CC_CATEGORY_REF_CUR       OUT SYS_REFCURSOR    
          , OUT_STATUS_REF_CUR            OUT SYS_REFCURSOR     
    			, OUT_TYPE_REF_CUR              OUT SYS_REFCURSOR   
     			, OUT_MARKETING_REF_CUR         OUT SYS_REFCURSOR   
  				, OUT_TAXWARE_REF_CUR           OUT SYS_REFCURSOR    
      		, OUT_PHONE_REF_CUR             OUT SYS_REFCURSOR     
      		, OUT_ADDRESS_REF_CUR           OUT SYS_REFCURSOR  )
d6476 20
a6495 1
       IS   
a6496 7
v_code                 number;
v_errm                 VARCHAR(500);
v_address_type         VARCHAR2(1)  := 'M';
v_cost_center_rowtype  COST_CENTER%rowtype;
v_break                VARCHAR(100);
v_cost_center          COST_CENTER.cost_center_code%TYPE;
invalid_cost_center_err     EXCEPTION;
d6498 3
a6500 2
BEGIN --  COST_CENTER_UI_SP
--
d6502 4
a6505 4
  BEGIN
  v_break  := ('Convert the in_cost_center to 6 digit ' );
    
  v_cost_center := common_tools.cost_center_look_up_fnc(in_COST_CENTER);
d6507 7
a6513 4
     WHEN OTHERS then
           raise invalid_cost_center_err;
                  
  END; -- get 6 digit Cost Center
a6514 18
  BEGIN -- Get Cost Center
                
  v_break  := ('Entered the Cost_Center_UI_SP ' 
                || ' in_cost_center = ' || v_cost_center || ' ' );
--
/**  Call COST_CENTER to get Category Code  ***/
      select * into v_cost_center_rowtype
            from COST_CENTER          
            where cost_center_code = v_cost_center; 
            
  EXCEPTION
     WHEN NO_DATA_FOUND then
           raise invalid_cost_center_err;
                  
  END; -- get Cost Center
--
--
/**  Call COST_CENTER Reference Cursor  ***/
d6516 1
a6516 5
      CCN_TABLE_IU_PKG.COST_CENTER_S_SP(
            v_cost_center          
 					, out_cost_center_ref_cur);      
--
--
d6518 19
a6536 154
	Use the Category code of the COST_CENTER table to determine the type of 
	processing to be done as follows:
  
	  S  -->  Store, Marketing, and Taxware data
	  A  -->  Administration data
	  R  -->  Real_Estate data
	  T  -->  Territory data
    O  -->  Other, Marketing, and Taxware data    
*******************************************************************************/
--
v_break  :=  ('Entered the Category Routine ' 
              || ' in_cost_center = ' || v_cost_center 
              || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CASE ( v_cost_center_rowtype.category) 
        when 'S' then
 --         STORE Table
          v_break  :=  ('Entered the STORE Category Routine ' );
          CCN_TABLE_IU_PKG.STORE_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);  
 --         MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);    
 --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             
          
        when 'A' then
 --         ADMINISTRATION Table
          v_break  :=  ('Entered the ADMINISTRATION Category Routine ' );
          CCN_TABLE_IU_PKG.ADMINISTRATION_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);  
          
        when 'R' then
 --         REAL_ESTATE Table
          v_break  :=  ('Entered the REAL ESTATE Category Routine ' );
          CCN_TABLE_IU_PKG.REAL_ESTATE_S_SP(
            v_cost_center          
					, out_cc_category_ref_cur);    
          
        when 'T' then
 --         TERRITORY Table
          v_break  :=  ('Entered the TERRITORY Category Routine ' );
          CCN_TABLE_IU_PKG.TERRITORY_S_SP(
            null   
           ,v_cost_center
					, out_cc_category_ref_cur);    
  
        when 'O' then
 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(
            v_cost_center  
					, out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            v_cost_center
          , null
					, out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            v_cost_center
					, out_taxware_ref_cur);             
          
     END CASE;         
--
--
/**  Call STATUS Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.STATUS_S_SP(
            v_cost_center          
 					, null
 					, out_status_ref_cur);
--
--
/**  Call TYPE Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.TYPE_S_SP(
            v_cost_center          
 					, null
          , out_type_ref_cur);
--
--
/**  Call PHONE Reference Cursor  ***/
--
v_break  := ('Entered the PHONE Routine ' 
             || ' in_cost_center = ' || v_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '> ');
--
      CCN_TABLE_IU_PKG.PHONE_S_SP(
            v_cost_center          
 					, out_phone_ref_cur);
--
--
/******************************************************************************
	Call the ADDRESS_UI_SP procedure to obtain the "Mailing" address only for 
	the cost center being processed.
  
 v_address_type is set to 'M' 
*******************************************************************************/	
--	
v_break  :=  ('Entered the ADDRESS Routine ' 
               || ' in_cost_center = ' || v_cost_center 
               || ' category <' || v_cost_center_rowtype.category || '>'
               || ' address type <' || v_address_type || '>'
               || ' country <' || v_cost_center_rowtype.country_code || '> ' );
--
/**  Call ADDRESS Reference Cursor  based on country_code ***/  
--
--      CCN_TABLE_IU_PKG.ADDRESS_UI_SP(
      ADDRESS_UI_SP(
            v_cost_center
          , v_cost_center_rowtype.country_code
          , v_address_type
 					, out_address_ref_cur);
--
   v_break  := ('Ended call to COST_CENTER_UI_SP ' );
--   
--
 EXCEPTION
       
       when invalid_cost_center_err then  
        v_code := errnums.en_invalid_cost_center_err;
        errpkg.raise_err(v_code, 'COST_CENTER_UI_SP.invalid_cost_center_err '
        || v_break,    
        'Entered Cost_Center_Code was "' ||  v_COST_CENTER || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Cost Center is not found - Would you like to Add? '
        ); 
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm || ' ' 
                    || v_break || ' ' 
                    || 'COST_CENTER_UI_SP Error '
                    );   
 
       
       null;
  
end COST_CENTER_UI_SP;
d6538 1
d6540 11
a6550 3
PROCEDURE POLLING_UI_SP (
/******************************************************************************
	POLLING_UI_SP   --    Polling User Interface Stored Procedure
d6552 3
a6554 2
	This procedure is intended to return a ref cursor with data from 
	from the POLLING, BANK_CARD, and TERMINAL tables.  
d6556 1
a6556 11
created : 09/05/2012 TAL CCN Project....
********************************************************************************/
            in_cost_center            in  polling.cost_center_code%type
 					, in_polling_status_code    in  polling.polling_status_code%type
          , in_merchant_id_code       in  bank_card.merchant_id%type
          , in_terminal_number        in  terminal.terminal_number%type
					, out_polling_refcur        out sys_refcursor
 					, out_bank_card_refcur      out sys_refcursor
			    , OUT_TERMINAL_REFCUR       OUT SYS_REFCURSOR
          )
       is
d6558 1
a6558 5
v_code                 number;
v_errm                 varchar(500);
v_break                VARCHAR(100);
       
BEGIN --  POLLING_UI_SP
d6560 1
a6560 1
/**  Call POLLING Reference Cursor  ***/
d6562 1
a6562 1
      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.POLLING_S_SP ';
d6564 8
a6571 6
      CCN_TABLE_IU_PKG.POLLING_S_SP(
            in_cost_center          
 					, in_polling_status_code        
					, OUT_POLLING_REFCUR);  
          
      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.POLLING_S_SP ';      
d6573 11
a6583 1
/**  Call BANK_CARD Reference Cursor  ***/
a6584 1
      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';
d6586 3
a6588 5
      CCN_TABLE_IU_PKG.BANK_CARD_S_SP(
            in_cost_center          
 					, in_polling_status_code
          , in_merchant_id_code
					, OUT_BANK_CARD_REFCUR);
d6590 1
a6590 1
      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';
d6592 6
a6597 3
/**  Call TERMINAL Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
d6599 4
a6602 7
      CCN_TABLE_IU_PKG.TERMINAL_S_SP(
            in_cost_center          
 					, in_polling_status_code
          , in_terminal_number
					, out_terminal_refcur);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
a6603 12
 EXCEPTION
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'COST_CENTER_UI_SP Error ' || 
                'Last Break Point was '    || v_break );   
 
       null;
 
END POLLING_UI_SP;
d6605 1
a6605 1
PROCEDURE POLLING_UI_UPSERT_SP ( 
d6607 1
a6607 1
	POLLING_UI_UPSERT_SP   --    POLLING User Interface Update/Insert Procedure
d6609 1
a6609 2
	This procedure is intended to update the database for the following tables 
       used in the Polling UI.
d6611 3
a6613 10
	Tables: 
            POLLING
          , BANK_CARD
          , TERMINAL
  
created : 11/09/2012 MDH CCN Project....
revised : 12/19/2012 MDH take inserts/updates out of loop process.
*******************************************************************************/
--
in_row_data  IN  varchar2)--sys.xmltype 
d6615 11
a6625 2
is
--cursor to get table names....
d6627 1
a6627 1
cursor TABLES_CUR is
d6629 11
a6639 7
    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like 'CREATE$JAVA$LOB$TABLE'
        ;
d6642 1
d6645 3
a6647 1
v_Row_data xmltype := sys.xmltype(in_Row_data);
d6649 1
a6649 40
v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_polling_frag clob;
v_xml_bank_card_frag clob;
v_xml_terminal_frag clob;
--
V_BANK_CARD_ROWTYPE      BANK_CARD%rowtype;
V_POLLING_ROWTYPE        POLLING%rowtype;
V_TERMInAL_ROWTYPE       TERMINAL%rowtype;
--
v_count integer := 1;
--
BEGIN
--
--    Removing fragments to send to individual procedures.
--
 FOR tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/POLLING_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/POLLING_UI/'|| tables_rec.table_name).getCLOBVal();
     
        CASE tables_rec.table_name
            when 'POLLING'   then 
            	v_xml_polling_frag   := v_xml_frag;
            	dbms_output.put_line('tablename ' || tables_rec.table_name); 
            when 'BANK_CARD' then 
            	v_xml_bank_card_frag := v_xml_frag;
            	dbms_output.put_line('tablename ' || tables_rec.table_name);        
        else
            null;
        END CASE;
      dbms_output.put_line('after getting frags ' );
    end if;
d6651 1
a6651 20
    
--
--
 END LOOP; --TABLES_CUR
--
--
--********************************************************************************
-- POLLING insert/update process - must be processed before BANK_CARD or TERMINAL
--*********************************************************************************
   BEGIN
       if v_xml_polling_frag  is not null  then
        dbms_output.put_line('polling frag yes' ); 
            CCN_TABLE_IU_PKG.POLLING_I_SP (
                 'POLLING'             
                , v_xml_polling_frag
                , v_polling_rowtype );
                
       end if;
--
	dbms_output.put_line('POLLING_I_SP' ); 
d6653 6
a6658 27
     EXCEPTION
          when dup_val_on_index  then
            BEGIN
              CCN_TABLE_IU_PKG.POLLING_U_SP (
                  'POLLING'
                , v_xml_polling_frag 
                , v_polling_rowtype );
                dbms_output.put_line('Polling Update executed ');
            EXCEPTION 
               WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                   v_errm ||
                   ' Polling Update Error ' );
           END;
   END;
--
--
--******************************************************************************
-- TERMINAL insert/update process with loop - This is processed second
--******************************************************************************
-- 
     WHILE v_Row_data.existsNode('/POLLING_UI/TERMINAL_TABLE/' || 'TERMINAL' || '[' || v_count || ']') = 1 LOOP
--         dbms_output.put_line(v_userlist.extract('//user[' || v_count || ']/name/text()').getStringVal());
--
           v_xml_terminal_frag := v_Row_data.extract('/POLLING_UI/TERMINAL_TABLE/'|| 'TERMINAL' || '[' || v_count || ']').getCLOBVal();
d6660 40
a6699 70
            -- TERMINAL insert/update process 
            BEGIN
                if v_xml_terminal_frag  is not null  then
                    CCN_TABLE_IU_PKG.TERMINAL_I_SP (
                      'TERMINAL'             
                     , v_xml_terminal_frag
                     , v_terminal_rowtype );
--                        dbms_output.put_line('Terminal Insert executed ');
                end if;
            EXCEPTION
                  when dup_val_on_index  then
                   BEGIN
                       CCN_TABLE_IU_PKG.TERMINAL_U_SP (
                           'TERMINAL'
                         , v_xml_terminal_frag 
                         , v_terminal_rowtype );
 --                         dbms_output.put_line('Terminal Update executed ');
                    EXCEPTION 
                        WHEN OTHERS THEN 
                            v_code  := SQLCODE;
                            v_errm  := substr(SQLERRM,1,200);
                            errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm  ||
                            ' Terminal Update Error ' );
                    END;  
            END;
--                
            v_count := v_count + 1;
--                
     END LOOP; -- TERMINALS
--
--
--******************************************************************************
-- BANK_CARD insert/update process - This is processed third
--******************************************************************************
   BEGIN
          if v_xml_bank_card_frag  is not null  then
              CCN_TABLE_IU_PKG.BANK_CARD_I_SP (
                 null
               , null
               , null
               , null
               , 'BANK_CARD'
               , null
               , v_xml_bank_card_frag);
          end if;
   EXCEPTION
         when dup_val_on_index  then
          BEGIN
              CCN_TABLE_IU_PKG.BANK_CARD_U_SP (
                  null
                , null
                , null
                , null
                , 'BANK_CARD'
                , null
                , v_xml_bank_card_frag); 
--                dbms_output.put_line('Bank_Card Update executed ');
          EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Bank_Card Update Error ' );
          END; 
   END;
--
--
EXCEPTION
d6701 1
a6701 24
    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'POLLING_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );
                            
END POLLING_UI_UPSERT_SP;

PROCEDURE ADDRESS_UI_UPSERT_SP ( 
/******************************************************************************
	ADDRESS_UI_UPSERT_SP   --    ADDRESS User Interface Update/Insert Procedure

	This procedure is intended to update the database for the following tables 
       used in the ADDRESS UI.

	Tables: 
            ADDRESS_CAN, 
            ADDRESS_USA, 
            ADDRESS_MEX, 
            ADDRESS_OTHER
  
created : 12/12/2012 TAL CCN Project....
revised :
*******************************************************************************/
d6703 3
a6705 1
in_row_data  IN  varchar2 ) --sys.xmltype 
d6707 11
a6717 2
is
--cursor to get table names....
d6719 1
a6719 1
cursor TABLES_CUR is
d6721 11
a6731 7
    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like 'CREATE$JAVA$LOB$TABLE'
        ;
d6734 10
a6743 1
*/
d6745 18
a6762 1
v_Row_data xmltype := sys.xmltype(in_Row_data);
a6763 19
-- v_row_value varchar2(500);
-- v_row_xml_frag sys.xmltype;
-- v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
--
v_xml_ADDRESS_CAN_frag clob;
v_xml_ADDRESS_USA_frag clob;
v_xml_ADDRESS_MEX_frag clob;
v_xml_ADDRESS_OTH_frag clob;
--
V_ADDRESS_CAN_ROWTYPE        ADDRESS_CAN%rowtype;
V_ADDRESS_USA_ROWTYPE        ADDRESS_USA%rowtype;
V_ADDRESS_MEX_ROWTYPE        ADDRESS_MEX%rowtype;
V_ADDRESS_OTH_ROWTYPE        ADDRESS_OTHER%rowtype;
--
v_count integer := 1;
d6765 3
a6767 1
begin
d6769 13
a6781 3
--    dbms_output.put_line('Entered into Procedure ADDRESS_UI_UPSERT_SP');
    
--    Removing fragments to send to individual procedures.
a6782 135
 for tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) then
     
--     dbms_output.put_line('v-row-data node = ADDRESS_UI_UPSERT');
     
        --v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();
		v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT').getCLOBVal();
     
        case tables_rec.table_name
            when 'ADDRESS_CAN'   then v_xml_ADDRESS_CAN_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_CAN fragment found' );
            when 'ADDRESS_USA'   then v_xml_ADDRESS_USA_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_USA fragment found' );
            when 'ADDRESS_MEX'   then v_xml_ADDRESS_MEX_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_MEX fragment found' );
            when 'ADDRESS_OTHER' then v_xml_ADDRESS_OTH_frag   := v_xml_frag;
--            dbms_output.put_line('ADDRESS_OTH fragment found' );
        else
            null;
        end case;
        
BEGIN      -- ADDRESS Processing
           
  BEGIN      -- ADDRESS_CAN Insert Process 
          
            if v_xml_ADDRESS_CAN_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_CAN'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_CAN_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_CAN Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_CAN_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_CAN Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_CAN Insert Error');
            
  END;       -- ADDRESS_CAN Insert Process 
           
  BEGIN      -- ADDRESS_USA Insert Process 
          
            if v_xml_ADDRESS_USA_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_USA'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_USA_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_USA Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_USA_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_USA Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_USA Insert Error');
            
  END;       -- ADDRESS_USA Insert Process 
           
  BEGIN      -- ADDRESS_MEX Insert Process 
          
            if v_xml_ADDRESS_MEX_frag  is not null  then
                    
                CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_MEX'                       --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_MEX_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_MEX Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_MEX_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_MEX Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_MEX Insert Error');
            
  END;       -- ADDRESS_MEX Insert Process 
           
  BEGIN      -- ADDRESS_OTH Insert Process 
          
            if v_xml_ADDRESS_OTH_frag  is not null  then
            
                CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (
                    null                                --in_cost_center
                  , null                                --in_address_type
                  , null                                --in_effective_date
                  , 'ADDRESS_OTHER'                     --in_table_name
                  , null                                --in_row_date
                  , v_xml_ADDRESS_OTH_frag );           --in_row_data   xml
                
--          dbms_output.put_line('ADDRESS_OTH Insert executed ');
          
            end if;
          
         EXCEPTION
            WHEN OTHERS THEN
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,200);
                errpkg.raise_err(v_code, 'ADDRESS_OTH_UI_UPSERT_SP ' ||
                v_errm ||
                ' ADDRESS_OTH Insert Error ' );
                
--              dbms_output.put_line('ADDRESS_OTH Insert Error');
            
  END;       -- ADDRESS_OTH Insert Process 
d6784 1
a6784 1
END;       -- ADDRESS Processing
d6786 3
a6788 1
End if;    -- if (v_Row_data.existsNode('/ADDRESS_UI_UPSERT/'
d6790 2
d6793 6
a6798 1
 end loop; --TABLES_CUR
d6800 1
a6800 1
exception
d6802 11
a6812 7
    when others then
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code, 'ADDRESS_UI_UPSERT_SP ' ||
                            v_errm || ' in Others ' );
--        dbms_output.put_line('in others ');
--        dbms_output.put_line(sqlerrm);
d6814 1
a6814 1
END ADDRESS_UI_UPSERT_SP;
d6816 1
a6816 1
PROCEDURE COST_CENTER_UI_UPSERT_SP ( 
d6818 3
a6820 1
	COST_CENTER_UI_UPSERT_SP   --    Cost Center User Interface Update delete
d6823 10
a6832 11
	This procedure is intended to update the database for the following tables used in
        Cost Center UI.
	Tables: 
              COST_CENTER
           ,  ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
            , STATUS
            , TYPE
            , MARKETING
            , PHONE
            , TAXWARE
            , ADDRESS tables.  
d6834 2
a6835 2
created : 10/26/2012 KDP CCN Project....
revised:   12/03/2012 BLR  CCN Project....
a6836 2

 in_row_data  in varchar2) --sys.xmltype
d6838 3
d6843 1
a6843 1
--cursor to get table names....
d6845 7
a6851 1
 cursor TABLES_CUR is
a6852 16
 SELECT table_name
 FROM insertorder
 ;
 
/*
    	SELECT
           distinct table_name
      	FROM all_tab_columns a
      	WHERE owner = 'COSTCNTR'
      	AND table_name not like 'TEMP%'
        AND table_name not like 'CREATE$JAVA$LOB$TABLE'
        ;
*/
/*
*/

a6853 3

in_table_name varchar2(25);

d6861 1
a6861 1

a6862 10
v_xml_cost_center_frag clob;
v_xml_phone_frag clob;
v_xml_addr_usa_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
v_xml_addr_mex_frag clob;
v_xml_type_frag clob;
v_xml_status_frag clob;
v_xml_taxware_frag clob;
v_xml_marketing_frag clob;
a6869 10
V_COST_CENTER_ROWTYPE      COST_CENTER%rowtype;
V_PHONE_ROWTYPE                  PHONE%rowtype;
V_ADDRUSA_ROWTYPE              ADDRESS_USA%rowtype;
V_ADDRCAN_ROWTYPE              ADDRESS_CAN%rowtype;
V_ADDRMEX_ROWTYPE              ADDRESS_MEX%rowtype;
V_ADDROTHER_ROWTYPE          ADDRESS_OTHER%rowtype;
V_TYPE_ROWTYPE                     TYPE%rowtype;
V_STATUS_ROWTYPE                  STATUS%rowtype;
V_TAXWARE_ROWTYPE              TAXWARE%rowtype;
V_MARKETING_ROWTYPE           MARKETING%rowtype;
d6871 4
a6874 5
V_STORE_ROWTYPE                   STORE%rowtype;
V_OTHER_ROWTYPE                   OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE    ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE        REAL_ESTATE%rowtype;

d6877 3
a6880 3
--
--    Removing fragments to send to individual procedures.
--
d6882 4
a6885 5
 for tables_rec in tables_cur loop 
   
    if (v_Row_data.existsNode('/COST_CENTER_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| tables_rec.table_name).getCLOBVal();
d6887 2
a6888 6
        case tables_rec.table_name
            when 'COST_CENTER' 	then v_xml_cost_center_frag := v_xml_frag;
            when 'STATUS' 		  then v_xml_status_frag := v_xml_frag;
            when 'TYPE'		      then v_xml_type_frag := v_xml_frag;
            when 'TAXWARE'	  	then v_xml_taxware_frag := v_xml_frag;
            when 'MARKETING'		then v_xml_marketing_frag := v_xml_frag;
d6894 1
a6894 4
            when 'ADDRESS_USA' 	then v_xml_addr_usa_frag := v_xml_frag;
            when 'ADDRESS_CAN' 	then v_xml_addr_can_frag := v_xml_frag;
            when 'ADDRESS_MEX' 	then v_xml_addr_mex_frag := v_xml_frag;
            when 'ADDRESS_OTHER'	then v_xml_addr_oth_frag := v_xml_frag;           
d6898 31
d6930 1
a6930 1
        in_table_name := tables_rec.table_name;  		
d6932 29
a6961 18
        if tables_rec.table_name in ('ADMINISTRATION', 'STORE', 'OTHER', 'REAL_ESTATE', 'TERRITORY') then  
    --      EXECUTE CC_ADDTL_TABLES_UI; 
    
            CCN_TABLE_IU_PKG.CC_ADDTL_TABLES_UI_SP (
             in_table_name                      
            ,in_row_data);         
        end if;

       if tables_rec.table_name in ('ADDRESS_USA', 'ADDRESS_CAN', 'ADDRESS_MEX', 'ADDRESS_OTHER') then  
    --      EXECUTE CC_ADDRESS_TABLES_UI; 
            dbms_output.put_line('EXECUTE CC_ADDRESS_TABLES_UI');
            CCN_TABLE_IU_PKG.CC_ADDRESS_TABLES_UI_SP (
              in_table_name                      
             ,in_row_data);         
       end if;

        
 --  COST_CENTER insert/update process 
d6964 4
a6967 4
          if v_xml_cost_center_frag  is not null  then
              CCN_TABLE_IU_PKG.COST_CENTER_I_SP (
                  null   
                , 'COST_CENTER' 
d6969 4
a6972 6
                , v_xml_cost_center_frag);    
                 --   , v_cost_center_rowtype );
--              dbms_output.put_line('Cost Center Insert executed ');
	
          end if; 
          
d6975 1
d6977 3
a6979 3
              CCN_TABLE_IU_PKG.COST_CENTER_U_SP (                 
                 null   
                , 'COST_CENTER' 
d6981 3
a6983 2
                , v_xml_cost_center_frag);        
	
d6988 5
a6992 5
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Cost Center Update Error ' );
            end;
       end;
d6994 1
a6994 1
 --  STATUS insert/update process 
d6997 8
a7004 7
       
          if v_xml_status_frag  is not null  then
              CCN_TABLE_IU_PKG.STATUS_I_SP (
                'STATUS'             
                , v_xml_status_frag                
                , v_status_rowtype );
--              dbms_output.put_line('Status Insert executed ');
d7006 1
a7006 1
      EXCEPTION
d7008 1
d7010 6
a7015 5
              CCN_TABLE_IU_PKG.STATUS_U_SP (
                'STATUS'
                , v_xml_status_frag                 
                , v_status_rowtype );
                
d7020 17
a7036 16
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Status Update Error ' );
            end;
      end;

 --  TYPE insert/update process 

      begin
        
          if v_xml_type_frag  is not null  then
              CCN_TABLE_IU_PKG.TYPE_I_SP (
                 'TYPE'                
                , v_xml_type_frag                
                , v_type_rowtype );
--              dbms_output.put_line('Type Insert executed ');
d7038 3
a7040 1
      EXCEPTION
d7042 1
d7044 6
a7049 5
              CCN_TABLE_IU_PKG.TYPE_U_SP (
                  'TYPE'             
                , v_xml_type_frag                
                , v_type_rowtype );
                
d7054 3
a7056 3
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' Type Update Error ' );
d7058 75
a7132 1
      end;
d7134 51
d7186 1
a7186 1
--  MARKETING insert/update process 
d7189 9
a7197 8
        
          if v_xml_marketing_frag  is not null  then
              CCN_TABLE_IU_PKG.MARKETING_I_SP (                            
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag);                 
d7199 1
a7199 1
--              dbms_output.put_line('MARKETING Insert executed ');
d7204 9
a7212 7
              CCN_TABLE_IU_PKG.MARKETING_U_SP (                  
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag);           
                     
d7217 3
a7219 3
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' MARKETING Update Error ' );
d7223 1
a7223 1
--  TAXWARE insert/update process 
d7226 11
a7236 7
        
          if v_xml_taxware_frag  is not null  then
              CCN_TABLE_IU_PKG.TAXWARE_I_SP (                            
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);    
--              dbms_output.put_line('TAXWARE Insert executed ');
d7241 9
a7249 5
              CCN_TABLE_IU_PKG.TAXWARE_U_SP (                  
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);  
                
d7254 3
a7256 3
                 errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                 v_errm ||
                 ' TAXWARE Update Error ' );
d7260 25
a7284 10
  end if;   
     
 -- 
      if (v_Row_data.existsNode('/COST_CENTER_UI/PHONE_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1) then
 --/COST_CENTER_UI/PHONE_TABLE/PHONE[1] 
        
              WHILE v_Row_data.existsNode('/COST_CENTER_UI/PHONE_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1 LOOP
                --dbms_output.put_line(v_userlist.extract('//user[' || v_count || ']/name/text()').getStringVal());        
                v_xml_phone_frag := v_Row_data.extract('/COST_CENTER_UI/PHONE_TABLE/'|| tables_rec.table_name || '[' || v_count || ']').getCLOBVal();
 
d7286 8
a7293 33
    
 --  PHONE_TABLE insert/update process 
              begin
              
                if v_xml_phone_frag  is not null  then
                   CCN_TABLE_IU_PKG.PHONE_I_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);                    
                  
--               dbms_output.put_line('Phone Insert executed ');
               end if;
          
              EXCEPTION
                 when dup_val_on_index  then
                   begin
                     CCN_TABLE_IU_PKG.PHONE_U_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);   
                     
              EXCEPTION 
                 WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
                   v_errm ||
                   ' Phone Update Error ' );
             end;
d7295 4
a7298 6
              v_count := v_count + 1;
              
              END LOOP; --phone loop
      end if;    
   end loop; --tables_cur
   
d7304 2
a7305 2
         errpkg.raise_err(v_code, 'COST_CENTER_UI_UPSERT_SP ' ||
          v_errm ||
d7307 3
d7311 1
a7311 1
END COST_CENTER_UI_UPSERT_SP;
d7313 1
a7313 1
end CCN_UI_INTERFACE_APP_PKG;
@


1.18
log
@adding notes
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
a1 1
package BODY CCN_TABLE_IU_PKG 
d5 1
a5 1
This package is intended to control access to the core CCN table.
d8 2
a9 6152
revised : 12/20/2012 MDH -- Add EXPIRE_DATA_SP procedure 
*******************************************************************************/

	PROCEDURE All_TABLE_COL_S_SP (
/*******************************************************************************
	All_TABLE_COL_S_SP
	
	This procedure is intended to return a ref cursor with data from 
	from the all_table_col table.  

created : 04/26/2012 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
			in_TABLE_NAME IN ALL_TAB_COLUMNS.TABLE_NAME%TYPE
			,out_ALL_TAB_REF_CUR OUT REF_CURSOR	)
    is                  
		v_code number;
		v_errm varchar2(500);

	BEGIN

		  OPEN out_ALL_TAB_REF_CUR FOR
			  
		  SELECT DECODE(COLUMN_NAME,'EFFECTIVE_DATE',TABLE_NAME || '_' || COLUMN_NAME
		  							,'EXPIRATION_DATE',TABLE_NAME || '_' || COLUMN_NAME
		  							, COLUMN_NAME) AS COLUMN_NAME
		      	FROM all_tab_columns
    	  		WHERE TABLE_NAME = in_table_name
    		    order by column_id asc;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_S_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	END All_TABLE_COL_S_SP;

	PROCEDURE ADDRESS_CAN_S_SP  ( IN_COST_CENTER          IN  ADDRESS_CAN.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_CAN.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_CAN_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	ADDRESS_CAN_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_CAN table.  

created : 11/15/2010 kdp CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN
     
   OPEN out_ADDRESS_CAN_REF_CUR FOR
			  
		 SELECT * 
     FROM ADDRESS_CAN AC
	  		 WHERE COST_CENTER_CODE  = IN_COST_CENTER
         AND  ADDRESS_TYPE      = NVL(IN_ADDRESS_TYPE, AC.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
	 		    );
              
  EXCEPTION	  
      WHEN others THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);  
	END ADDRESS_CAN_S_SP;


	PROCEDURE ADDRESS_MEX_S_SP  ( IN_COST_CENTER          IN  ADDRESS_MEX.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_MEX.ADDRESS_TYPE%TYPE
                              , OUT_ADDRESS_MEX_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_MEX_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_MEX table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_MEX_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_MEX AM
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AM.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	
  EXCEPTION   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
	END ADDRESS_MEX_S_SP;


	PROCEDURE ADDRESS_OTHER_S_SP  ( IN_COST_CENTER            IN  ADDRESS_OTHER.COST_CENTER_CODE%TYPE
                                , IN_ADDRESS_TYPE           IN  ADDRESS_OTHER.ADDRESS_TYPE%TYPE
                                , OUT_ADDRESS_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_OTHER table.  

created : 02/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_OTHER AO
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
			   AND ADDRESS_TYPE       = NVL(IN_ADDRESS_TYPE, AO.ADDRESS_TYPE) 
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
 
  EXCEPTION
   	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' || 
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
        
	END ADDRESS_OTHER_S_SP;


	PROCEDURE ADDRESS_USA_S_SP  ( IN_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE
                              , IN_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE
                              , out_ADDRESS_USA_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADDRESS_USA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADDRESS_USA table.  

created : 03/20/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_ADDRESS_USA_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADDRESS_USA AU
			  WHERE COST_CENTER_CODE = IN_COST_CENTER
			   AND ADDRESS_TYPE = NVL(IN_ADDRESS_TYPE, AU.ADDRESS_TYPE)
         AND (EFFECTIVE_DATE   <= V_CURR_DATE  
         AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE  >=  V_CURR_DATE)
			      );
	
  EXCEPTION  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || IN_COST_CENTER || ';  ' ||  
             'ADDRESS_TYPE is '     || in_ADDRESS_TYPE || '; ' || v_errm);
    
	END ADDRESS_USA_S_SP;


	PROCEDURE ADMINISTRATION_S_SP (in_COST_CENTER IN ADMINISTRATION.COST_CENTER_CODE%TYPE
							,out_ADMINISTRATION_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	ADMINISTRATION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the ADMINISTRATION table.  

created : 03/20/2012 mdh CCN Project....
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_ADMINISTRATION_REF_CUR FOR
			  
			  SELECT * 
			  FROM ADMINISTRATION
			  where cost_center_code = in_COST_CENTER;
    	    
  EXCEPTION   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	end administration_s_sp;

	
  PROCEDURE BANK_CARD_S_SP  ( IN_COST_CENTER          IN  BANK_CARD.COST_CENTER_CODE%TYPE
                            , IN_POLLING_STATUS_CODE  IN  BANK_CARD.POLLING_STATUS_CODE%TYPE
                            , IN_MERCHANT_ID_CODE     IN  BANK_CARD.MERCHANT_ID%TYPE
                            , OUT_BANK_CARD_REF_CUR   OUT REF_CURSOR)
/*******************************************************************************
	BANK_CARD_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the bank_card table.  

created : 03/21/2012 mdh CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_curr_date date := sysdate;
 
	BEGIN

		  OPEN out_BANK_CARD_REF_CUR FOR
			  
			  SELECT * 
			  from bank_card
			  where cost_center_code    = in_cost_center
			   and  polling_status_code = in_polling_status_code
         and  merchant_id         = nvl(in_merchant_id_code, bank_card.merchant_id)
			   and (effective_date     <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	 
 EXCEPTION  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BANK_CARD_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center || ';  ' || 
             'POLLING_STATUS_CODE is '  || in_polling_status_code || ';  ' || 
             'MERCHANT_ID_CODE is '     || in_merchant_id_code
             || '; ' || v_errm
             );

	END BANK_CARD_S_SP;
  

PROCEDURE BATCH_JOB_S_SP (in_batch_job_name     in  batch_job.batch_job_name%type
                        , in_batch_job_number   in  batch_job.batch_job_number%type
			, out_BATCH_JOB_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	BATCH_JOB_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the BATCH_JOB table.  

created : 07/18/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm  varchar2(500);
v_input_row  varchar2(30);
	BEGIN
            
		  OPEN out_BATCH_JOB_REF_CUR FOR
			  
			  SELECT * 
			  FROM BATCH_JOB
			  where batch_job_name = in_batch_job_name
			  and batch_job_number = in_batch_job_number;
	  
 EXCEPTION 
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_S_SP, ' || ' ' ||
             'BATCH_JOB_NAME is ' || in_BATCH_JOB_NAME || ';  ' ||
             'BATCH_JOB_NUMBER is ' || in_BATCH_JOB_NUMBER, v_errm);
                      
	END BATCH_JOB_S_SP;


PROCEDURE CODE_DETAIL_S_SP ( in_CODE_HEADER_NAME      IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
			   , in_CODE_HEADER_TYPE      IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
			   , in_CODE_DETAIL_VALUE     IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
			  , out_CODE_DETAIL_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	CODE_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_DETAIL table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_DETAIL
			  where code_header_name   =  in_CODE_HEADER_NAME
                           and  code_header_type   =  in_CODE_HEADER_TYPE
                           and  code_detail_value  =  in_CODE_DETAIL_VALUE ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,      'CODE_DETAIL_S_SP, '  || ' ' ||            
             'CODE_HEADER_NAME is '  || in_code_header_name || ';  ' ||
             'CODE_HEADER_TYPE is '  || in_code_header_type || ';  '  ||
             'CODE_DETAIL_VALUE is ' || in_CODE_DETAIL_VALUE || '; ' || v_errm);
                     
	END CODE_DETAIL_S_SP;


PROCEDURE CODE_HEADER_S_SP (in_CODE_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
                          , in_CODE_HEADER_TYPE in CODE_HEADER.CODE_HEADER_TYPE%TYPE
							,out_CODE_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	CODE_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the CODE_HEADER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_CODE_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM CODE_HEADER
			  where code_header_name = in_CODE_HEADER_NAME
                           and  code_header_type = in_CODE_HEADER_TYPE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, ' CODE_HEADER_S_SP, ' || ' ' ||
             'CODE_HEADER_NAME is ' || in_CODE_HEADER_NAME || ';  ' ||
             'CODE_HEADER_TYPE is ' || in_CODE_HEADER_TYPE || '; ' || v_errm    );
                     
	END CODE_HEADER_S_SP;


	PROCEDURE COST_CENTER_S_SP (in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
				, out_COST_CENTER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 11/15/2011 kdp CCN Project....
*******************************************************************************/
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
	  
	END COST_CENTER_S_SP;


PROCEDURE EMP_DATA_S_SP (in_EMPLOYEE_NUMBER IN EMP_DATA.EMPLOYEE_NUMBER%TYPE
							,out_EMP_DATA_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	EMP_DATA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the EMP_DATA table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_EMP_DATA_REF_CUR FOR
			  
			  SELECT * 
			  FROM EMP_DATA
			  where employee_number = in_EMPLOYEE_NUMBER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_S_SP, ' || ' ' ||
             'EMPLOYEE_NUMBER is ' || in_EMPLOYEE_NUMBER || '; ' || v_errm);
                     
	END EMP_DATA_S_SP;


PROCEDURE HIERARCHY_DESCRIPTION_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE
                        , in_HRCHY_HDR_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
 			, out_HIERARCHY_DESCRIPT_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_DESCRIPTION_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DESCRIPTION table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DESCRIPT_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DESCRIPTION
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_hdr_lvl_nbr     = in_HRCHY_HDR_lvl_nbr ;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_DESCRIPTION_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_HDR_LVL_NBR is '  ||  in_HRCHY_HDR_LVL_NBR || '; ' || v_errm);
                     
	END HIERARCHY_DESCRIPTION_S_SP;


PROCEDURE HIERARCHY_DETAIL_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
          ,in_HRCHY_DTL_LEVEL         HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
          ,in_HRCHY_DTL_PREV_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
          ,in_HRCHY_DTL_CURR_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE
          ,in_HRCHY_DTL_NEXT_LVL_VAL  HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE
          ,in_HRCHY_DTL_EFF_DATE      HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE                  
 			, out_HIERARCHY_DETAIL_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	HIERARCHY_DETAIL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_DETAIL table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_DETAIL_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_DETAIL
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME) 
			    and hrchy_dtl_level        = in_HRCHY_DTL_LEVEL
          and hrchy_dtl_prev_lvl_val = in_HRCHY_DTL_PREV_LVL_VAL
          and hrchy_dtl_curr_lvl_val = in_HRCHY_DTL_CURR_LVL_VAL
          and hrchy_dtl_next_lvl_val = in_HRCHY_DTL_NEXT_LVL_VAL
          and hrchy_dtl_eff_date     = in_HRCHY_DTL_EFF_DATE;
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCH_DETAIL_S_SP, ' || ' ' || 
             'HRCHY_HDR_NAME is ' || in_HRCHY_HDR_NAME  || ';  ' ||
             'HRCHY_DTL_LEVEL is '  ||  in_HRCHY_DTL_LEVEL || ';  ' ||
             'HRCHY_DTL_PREV_LVL_VAL is '  ||  in_HRCHY_DTL_PREV_LVL_VAL || ';  ' ||
             'HRCHY_DTL_CURR_LVL_VAL is '  ||  in_HRCHY_DTL_CURR_LVL_VAL || ';  ' ||
             'HRCHY_DTL_NEXT_LVL_VAL is '  ||  in_HRCHY_DTL_NEXT_LVL_VAL || ';  ' ||
             'HRCHY_DTL_EFF_DATE is '      ||  in_HRCHY_DTL_EFF_DATE || '; ' || v_errm);
                     
	END HIERARCHY_DETAIL_S_SP;


PROCEDURE HIERARCHY_HEADER_S_SP (in_HRCHY_HDR_NAME IN HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE
  			, out_HIERARCHY_HEADER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	HIERARCHY_HEADER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the HIERARCH_HEADER table.  

created : 03/22/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_HIERARCHY_HEADER_REF_CUR FOR
			  
			  SELECT * 
			  FROM HIERARCHY_HEADER
			  where upper(hrchy_hdr_name) = upper(in_HRCHY_HDR_NAME); 
			 
			 	  
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'HIERARCHY_HEADER_S_SP, ' || ' ' ||
             'HRCHY_HDR_NAME is ' || in_hrchy_hdr_name || '; ' || v_errm);
                     
	END HIERARCHY_HEADER_S_SP;


PROCEDURE MARKETING_S_SP  ( IN_COST_CENTER        IN  MARKETING.COST_CENTER_CODE%TYPE
                          , IN_MARKETING_TYPE     IN  MARKETING.MARKETING_TYPE%TYPE 
                          , OUT_MARKETING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	MARKETING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the MARKETING table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_MARKETING_REF_CUR FOR
			  
			  select * 
			  from marketing
			  where cost_center_code = in_cost_center
         and  marketing_type   = nvl(in_marketing_type, marketing.marketing_type)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code,     'MARKETING_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER   || ';  ' ||
             'MARKETING_TYPE is '   || in_MARKETING_TYPE || '; ' || v_errm);
                     
	END MARKETING_S_SP;


PROCEDURE OTHER_S_SP (in_COST_CENTER IN OTHER.COST_CENTER_CODE%TYPE
							,out_OTHER_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	OTHER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the OTHER table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_OTHER_REF_CUR FOR
			  
			  SELECT * 
			  FROM OTHER
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END OTHER_S_SP;



PROCEDURE PHONE_S_SP (in_COST_CENTER IN PHONE.COST_CENTER_CODE%TYPE
							,out_PHONE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	PHONE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the PHONE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_PHONE_REF_CUR FOR
			  
			  SELECT * 
			  FROM PHONE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_S_SP, ' || ' ' ||
             ' COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END PHONE_S_SP;


PROCEDURE POLLING_S_SP (in_COST_CENTER IN POLLING.COST_CENTER_CODE%TYPE
					,in_POLLING_STATUS_CODE IN POLLING.POLLING_STATUS_CODE%TYPE
					, out_POLLING_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling table.  

created : 11/15/2010 kdp CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_POLLING_REF_CUR FOR
			  
			  SELECT * 
			  FROM POLLING
			  where cost_center_code = in_COST_CENTER
			  and polling_status_code = in_POLLING_STATUS_CODE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_S_SP, '		|| ' ' ||
		'COST_CENTER_CODE is ' 	|| in_COST_CENTER || ';  ' ||
		'POLLING_STATUS_CODE is '	|| in_POLLING_STATUS_CODE || '; ' || v_errm);
                     	  
	END POLLING_S_SP;
  
PROCEDURE POLLING_DWLD_RSN_HIST_S_SP ( in_cost_center         in polling_dwld_rsn_hist.cost_center_code%type
					                           , in_polling_status_code in polling_dwld_rsn_hist.polling_status_code%type
					                           , in_effective_date      in polling_dwld_rsn_hist.effective_date%type, out_POLLING_DWLD_RSN_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the polling_dwld_rsn_hist table.  

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_POLLING_DWLD_RSN_REF_CUR FOR
			  
			  select * 
			  from polling_dwld_rsn_hist
			  where cost_center_code     = in_cost_center
			   and  polling_status_code  = in_polling_status_code
         and  effective_date       = in_effective_date  ;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'POLLING_DWLD_RSN_HIST_S_SP, '	|| ' ' ||
		'COST_CENTER_CODE is '    || in_cost_center || ';  ' ||
		'POLLING_STATUS_CODE is '	|| in_polling_status_code || ';  ' ||
    'EFFECTIVE_DATE is '      || in_effective_date || '; ' || v_errm );
                     	  
	END POLLING_DWLD_RSN_HIST_S_SP;

PROCEDURE REAL_ESTATE_S_SP (in_COST_CENTER IN REAL_ESTATE.COST_CENTER_CODE%TYPE
							,out_REAL_ESTATE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	REAL_ESTATE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the REAL_ESTATE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_REAL_ESTATE_REF_CUR FOR
			  
			  SELECT * 
			  FROM REAL_ESTATE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'REAL_ESTATE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END REAL_ESTATE_S_SP;


PROCEDURE SALES_REP_S_SP  ( IN_GEMS_EMPLOYEE_ID   IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE
                          , OUT_SALES_REP_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	SALES_REP_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the SALES_REP table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_SALES_REP_REF_CUR FOR
			  
			  SELECT * 
			  from sales_rep
			  where gems_employee_id = in_gems_employee_id 
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_S_SP, ' || ' ' ||
             'GEMS_EMPLOYEE_ID is ' || in_GEMS_EMPLOYEE_ID || '; ' || v_errm);
                     
	END SALES_REP_S_SP;


PROCEDURE   STATUS_S_SP ( IN_COST_CENTER     IN  STATUS.COST_CENTER_CODE%TYPE
                        , IN_STATUS_CODE     IN  STATUS.STATUS_CODE%TYPE
                        , OUT_STATUS_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STATUS_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STATUS table.  

created : 03/20/2012 tal CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;

	BEGIN

		  OPEN out_STATUS_REF_CUR FOR
			  
			  SELECT * 
			  from status
			  where cost_center_code  =  in_cost_center  
			  and status_code         =  nvl(in_status_code, status.status_code) 
			  and (effective_date    <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 
		'STATUS_S_SP, ' || ' ' ||
		'COST_CENTER_CODE is ' || in_COST_CENTER  || ';  ' ||
		'STATUS_CODE is '      || in_STATUS_CODE || '; ' || v_errm);
                     
	END STATUS_S_SP;


PROCEDURE STORE_S_SP (in_COST_CENTER IN STORE.COST_CENTER_CODE%TYPE
							,out_STORE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	STORE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the STORE table.  

created : 03/20/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_STORE_REF_CUR FOR
			  
			  SELECT * 
			  FROM STORE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END STORE_S_SP;


PROCEDURE TAXWARE_S_SP (in_COST_CENTER IN TAXWARE.COST_CENTER_CODE%TYPE
		      ,out_TAXWARE_REF_CUR OUT REF_CURSOR)
/******************************************************************************
	TAXWARE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TAXWARE table.  

created : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_TAXWARE_REF_CUR FOR
			  
			  SELECT * 
			  FROM TAXWARE
			  where cost_center_code = in_COST_CENTER;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_COST_CENTER || '; ' || v_errm);
                     
	END TAXWARE_S_SP;


PROCEDURE TERMINAL_S_SP ( IN_COST_CENTER_CODE   IN  TERMINAL.COST_CENTER_CODE%TYPE
                        , IN_POLLING_STATUS_CD  IN  TERMINAL.POLLING_STATUS_CODE%TYPE
                        , IN_TERMINAL_NUMBER    IN  TERMINAL.TERMINAL_NUMBER%TYPE
                        , OUT_TERMINAL_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERMINAL_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERMINAL  table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  

  v_code    number;
  v_errm    varchar2(500); 
  v_curr_date date := sysdate;

	BEGIN

		  OPEN OUT_TERMINAL_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERMINAL
			  where cost_center_code = in_COST_CENTER_CODE
			  and  polling_status_code = in_polling_status_cd  
			  and  terminal_number = nvl(in_terminal_number, terminal.terminal_number) 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
        errpkg.raise_err(v_code, 'TERMINAL_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is '     || in_cost_center_code  || ';  ' ||
             'POLLING STATUS CODE is '  || in_polling_status_cd || ';  ' ||
             'TERMINAL NUMBER is '      || in_terminal_number 
             || '; ' || v_errm);

              
	END  TERMINAL_S_SP;


PROCEDURE TERRITORY_S_SP ( in_terr_sls_mgr_cd  TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,in_terr_cc TERRITORY.COST_CENTER_CODE%TYPE            
                                     ,out_TERRITORY_REF_CUR  OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY table.  

created : 03/22/2012 BLR CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure 
		  05/02/2013 kdp corrected query.	
*******************************************************************************/

      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    


	BEGIN

		  OPEN out_TERRITORY_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY
			  where cost_center_code = in_TERR_cc
			  and TERRITORY_SLS_MGR_CODE = NVL(in_TERR_SLS_MGR_CD,TERRITORY_SLS_MGR_CODE );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
         errpkg.raise_err(v_code, 'TERRITORY_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_TERR_CC || ';  ' ||
             'SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD || '; ' || v_errm);
             
	END;-- TERRITORY_S_SP;


PROCEDURE TERRITORY_ASSIGNMENT_S_SP ( IN_TERR_SLS_MGR_CD      IN  TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
                                     ,IN_COST_CENTER          IN  TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE                                     
                                     ,IN_GEMS_EMP_ID          IN  TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
                                     ,OUT_TERR_ASSIGN_REF_CUR OUT REF_CURSOR )
/*******************************************************************************
	TERRITORY_ASSIGNMENT_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_ASSIGNMENT table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
       is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);
  v_curr_date date := sysdate;   


	BEGIN

		  OPEN out_TERR_assign_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_ASSIGNMENT
			  where cost_center_code = IN_COST_CENTER
			  and TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD
			  and gems_employee_id = in_gems_emp_id
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	Errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_S_SP, ' || ' ' ||
	     'TERRITORY SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD || ';  ' ||
       'COST CENTER CODE is ' || IN_COST_CENTER || ';  ' ||             
	     'GEMS EMPLOYEE ID is ' || in_gems_EMP_ID || '; ' || v_errm);
              
	END TERRITORY_ASSIGNMENT_S_SP;


PROCEDURE TERRITORY_SALES_MGR_S_SP  ( IN_TERR_SLS_MGR_CD        IN  TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
      				           				    , OUT_TERR_SLS_MGR_REF_CUR  OUT REF_CURSOR)
/*******************************************************************************
	TERRITORY_SALES_MGR_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TERRITORY_SALES_MGR table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
      is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500); 
  v_curr_date date := sysdate;   

	BEGIN

		  OPEN out_TERR_SLS_MGR_REF_CUR FOR
			  
			  SELECT * 
			  FROM TERRITORY_SALES_MGR
			  where TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD 
			  and (effective_date <=  v_curr_date  
			  and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );
			  
  exception
    WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_S_SP, ' || ' ' ||
             'SALES MANAGER NUMBER is ' || in_TERR_SLS_MGR_CD
             || '; ' || v_errm);

              
	END  TERRITORY_SALES_MGR_S_SP;

PROCEDURE  TYPE_S_SP ( 
           IN_COST_CENTER   IN TYPE.COST_CENTER_CODE%TYPE 
          ,IN_TYPE_CODE     IN TYPE.TYPE_CODE%TYPE
          ,OUT_TYPE_REF_CUR OUT REF_CURSOR)
/*******************************************************************************
	TYPE_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the TYPE table.  

created : 03/21/2012 blr CCN Project....
changed : 09/12/2012 TAL included eff-date exp-date logic
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
        is                  

  V_CODE    NUMBER;
  V_ERRM    VARCHAR2(500);    
  v_curr_date date := sysdate;

	BEGIN

		  OPEN out_Type_REF_CUR FOR
			  
			  select * 
			  from type
			  WHERE COST_CENTER_CODE = IN_COST_CENTER  
         and  type_code        = nvl(in_type_code, type.type_code)
			   and (effective_date  <=  v_curr_date  
			   and (expiration_date is null or expiration_date  >=  v_curr_date)
			      );

  exception
     WHEN OTHERS THEN 
        v_code  := sqlcode;
        v_errm  := substr(SQLERRM, 1, 200);
	errpkg.raise_err(v_code, 'TYPE_S_SP, ' || ' ' ||
             'COST_CENTER_CODE is ' || in_cost_center || ';  ' ||
             'TYPE CODE is ' || in_TYPE_CODE || '; ' || v_errm);    
              
	END;-- TYPE_S_SP;

/*++++++++++++++++++++++++
INSERTS (ADDS)
+++++++++++++++++++++++*/

procedure ADDRESS_CAN_I_SP ( 
/*******************************************************************************
	ADDRESS_CAN_I_SP

	This procedure is intended to Insert new Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/27/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_CAN_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE  
	,in_EFFECTIVE_DATE 
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data   
	,v_address_can_row
	); 
--
--  Expire currently active ADDRESS_CAN Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_CAN'
		 , v_address_can_row.COST_CENTER_CODE
     , v_address_can_row.EFFECTIVE_DATE
     , v_address_can_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_CAN row --
   INSERT into ADDRESS_CAN values v_address_can_row ;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_CAN_I_SP;				 
				
procedure ADDRESS_MEX_I_SP ( 
/******************************************************************************
	ADDRESS_MEX_I_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 10/02/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure 
          changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%rowtype;
-- 
--
begin
--  
-- Convert XML to ROWTYPE -- 
 ADDRESS_MEX_ROWTYPE_SP ( 
	  in_COST_CENTER
	 ,in_ADDRESS_TYPE    
	 ,in_EFFECTIVE_DATE  
	 ,in_TABLE_NAME  
	 ,in_ROW_DATE    
	 ,in_Row_data    
	 ,v_address_mex_row 
	 );
--
--  Expire currently active ADDRESS_CAN Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_MEX'
		 , v_address_mex_row.COST_CENTER_CODE
     , v_address_mex_row.EFFECTIVE_DATE
     , v_address_mex_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_MEX row --      
     INSERT into ADDRESS_MEX values v_address_mex_row;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_I_SP;

procedure ADDRESS_OTHER_I_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_I_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/30/2012 mdh CCN Project....
revised : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  ADDRESS_OTHER_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE    
	,in_EFFECTIVE_DATE  
	,in_TABLE_NAME  
	,in_ROW_DATE   
	,in_Row_data    
	,v_address_other_row
	); 
--
--  Expire currently active ADDRESS_OTHER Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_OTHER'
		 , v_address_other_row.COST_CENTER_CODE
     , v_address_other_row.EFFECTIVE_DATE
     , v_address_other_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_OTHER row --
      INSERT into ADDRESS_OTHER values v_address_other_row;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_I_SP;

PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
	ADDRESS_USA_I_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/02/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
		: 04/03/2013 BLR error message pointing to wrong procedure
        : 06/10/2013 kdp upgraded to work with multiple address and updates
*******************************************************************************/
in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_ADDRESS_USA_row ADDRESS_USA%rowtype;
--
--v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
v_xml_frag      clob;
v_count 		integer := 1;
--
--
begin
--
-- convert XML to ROWTYPE --
--	dbms_output.put_line('before convert XML to ROWTYPE');
--	dbms_output.put_line (in_Row_data);
	
	   WHILE v_Row_data.EXISTSNODE('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']') = 1 LOOP 
--         V_HRCHY_HDR_NAME     := v_XML.EXTRACT('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']';

	
			v_xml_frag := v_Row_data.extract('/ADDRESS_UI_UPSERT/ADDRESS_USA' || '[' || V_COUNT || ']').getCLOBVal();
	
	
	
				  ADDRESS_USA_ROWTYPE_SP (
					 in_COST_CENTER           
					,in_ADDRESS_TYPE          
					,in_EFFECTIVE_DATE        
					,in_TABLE_NAME            
					,in_ROW_DATE             
					,v_xml_frag--in_Row_data             
					,v_ADDRESS_USA_row        
					);
					dbms_output.put_line('after convert XML to ROWTYPE');
				--
				--
				--  Expire currently active ADDRESS_USA Record before insert --
--					dbms_output.put_line('Expire currently active ADDRESS_USA Record before insert');
--				    
--				    dbms_output.put_line('v_address_usa_row.COST_CENTER_CODE ' || v_address_usa_row.COST_CENTER_CODE );                                                                                 
--					dbms_output.put_line('v_address_usa_row.EFFECTIVE_DATE ' || v_address_usa_row.EFFECTIVE_DATE );                                                                                 
--					dbms_output.put_line('v_address_usa_row.ADDRESS_TYPE ' || v_address_usa_row.ADDRESS_TYPE );                                                                                 
						
				      COMMON_TOOLS.EXPIRE_DATA_SP (
				      'ADDRESS_USA'
						 , v_address_usa_row.COST_CENTER_CODE
				     , v_address_usa_row.EFFECTIVE_DATE
				     , v_address_usa_row.ADDRESS_TYPE);
				--
				--  Insert new ADDRESS_USA row --  
--					dbms_output.put_line('attempt insert'); 

 					begin

				      insert into ADDRESS_USA values v_ADDRESS_USA_row;     
				    
				    
				    exception
				       when dup_val_on_index then
				            begin
--								dbms_output.put_line('in dup_val on index');
								update ADDRESS_USA set 
									EXPIRATION_DATE = null--v_ADDRESS_USA_row.EXPIRATION_DATE
									,ADDRESS_LINE_1 = v_ADDRESS_USA_row.ADDRESS_LINE_1
									, ADDRESS_LINE_2 = v_ADDRESS_USA_row.ADDRESS_LINE_2
									, ADDRESS_LINE_3 = v_ADDRESS_USA_row.ADDRESS_LINE_3
									, CITY = v_ADDRESS_USA_row.CITY
									, STATE_CODE = v_ADDRESS_USA_row.STATE_CODE
									, ZIP_CODE = v_ADDRESS_USA_row.ZIP_CODE
									, ZIP_CODE_4 = v_ADDRESS_USA_row.ZIP_CODE_4
									, COUNTY = v_ADDRESS_USA_row.COUNTY
									, FIPS_CODE = v_ADDRESS_USA_row.FIPS_CODE
									, DESTINATION_POINT = v_ADDRESS_USA_row.DESTINATION_POINT
									, CHECK_DIGIT = v_ADDRESS_USA_row.CHECK_DIGIT
									, VALID_ADDRESS = v_ADDRESS_USA_row.VALID_ADDRESS
									, COUNTRY_CODE = v_ADDRESS_USA_row.COUNTRY_CODE
								where 
									COST_CENTER_CODE = v_ADDRESS_USA_row.COST_CENTER_CODE
									AND ADDRESS_TYPE = v_ADDRESS_USA_row.ADDRESS_TYPE
									AND EFFECTIVE_DATE = v_ADDRESS_USA_row.EFFECTIVE_DATE;

							
				                
				  -- dbms_output.put_line('ADDRESS USA Update executed ');
					            EXCEPTION 
					             WHEN OTHERS THEN 
					                 v_code  := SQLCODE;
					                 v_errm  := substr(SQLERRM,1,200);
					                 errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
					                 v_errm || ';  ' ||
					                 'ADDRESS USA Update Error' );
					           end;
						       
				    end;  
		V_COUNT := V_COUNT + 1;		      
      end loop;
        
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_I_SP;
 
 
 procedure ADMINISTRATION_I_SP (
/*******************************************************************************
	ADMINISTRATION_I_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/01/2012 mdh CCN Project....
revised :10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_administration_row administration%rowtype;
--
--v_row_value 	varchar2(500);
--
--
begin
--
-- Convert XML to ROWTYPE --
   ADMINISTRATION_ROWTYPE_SP (
	 in_COST_CENTER     
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_administration_row
	);

      
      INSERT into ADMINISTRATION values v_administration_row;
      
       
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end ADMINISTRATION_I_SP;				 
				
 
 procedure BANK_CARD_I_SP (
/*******************************************************************************
	BANK_CARD_I_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
          12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_bank_card_row bank_card%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
       BANK_CARD_ROWTYPE_SP (
		 in_COST_CENTER          
		,in_POLLING_STATUS_CODE   
		,in_MERCHANT_ID           
		,in_EFFECTIVE_DATE 
		,in_TABLE_NAME  
		,in_ROW_DATE    
		,in_Row_data   
		,v_bank_card_row 
		);
--
--
--  Expire currently active BANK_CARD Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'BANK_CARD'
		 , v_bank_card_row.COST_CENTER_CODE
     , v_bank_card_row.EFFECTIVE_DATE);
--
--  Insert new BANK_CARD row --       
      INSERT into BANK_CARD values  v_bank_card_row;
        
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_I_SP;				 
				
PROCEDURE BATCH_JOB_I_SP (
/*******************************************************************************
	BATCH_JOB_I_SP

	This procedure is intended to insert new BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

 --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
-- dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getstringval()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_batch_job_row.batch_job_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_batch_job_row.batch_job_status         := v_row_value;
--  	when 'BATCH_JOB_START_DATE'           then  v_batch_job_row.batch_job_start_date        := v_row_value;
      when 'BATCH_JOB_START_DATE'		        then  v_batch_job_row.batch_job_start_date	    	:= to_date(v_row_value,'YYYYMMDD');
--  	when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := to_date(v_row_value,'YYYYMMDD');
--			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := to_date(v_row_value,'YYYYMMDD');
--			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into BATCH_JOB values v_BATCH_JOB_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end BATCH_JOB_I_SP;

PROCEDURE CODE_DETAIL_I_SP (
/*******************************************************************************
	CODE_DETAIL_I_SP

	This procedure is intended to insert new CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_DETAIL values v_CODE_DETAIL_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_DETAIL_I_SP;

PROCEDURE CODE_HEADER_I_SP (
/*******************************************************************************
	CODE_HEADER_I_SP

	This procedure is intended to insert new CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into CODE_HEADER values v_CODE_HEADER_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_HEADER_I_SP;

PROCEDURE COST_CENTER_I_SP (
/*******************************************************************************
	COST_CENTER_I_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
*******************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 

v_cost_center_row cost_center%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
 	COST_CENTER_ROWTYPE_SP (
 		in_COST_CENTER  
		,in_TABLE_NAME  
		,in_ROW_DATE    
		,in_Row_data    
		,v_cost_center_row  
);
--
--
-- Insert new COST_CENTER row --      
      insert into cost_center values v_cost_center_row;
      
      

end COST_CENTER_I_SP;

PROCEDURE EMP_DATA_I_SP (
/*******************************************************************************
	EMP_DATA_I_SP

	This procedure is intended to insert new EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into EMP_DATA values v_EMP_DATA_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end EMP_DATA_I_SP;

PROCEDURE MARKETING_I_SP (
/*******************************************************************************
	MARKETING_I_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
        : 12/20/2012 mdh Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
       MARKETING_ROWTYPE_SP (
	 in_cost_center          
	,in_marketing_type  
	,in_TABLE_NAME           
	,in_ROW_DATE              
	,in_Row_data              
	,v_MARKETING_row   
	);
--
--
--  Expire currently active MARKETING Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'MARKETING'
		 , v_marketing_row.COST_CENTER_CODE
     , v_marketing_row.EFFECTIVE_DATE);
--
--  Insert new MARKETING row --
      insert into MARKETING values v_MARKETING_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end MARKETING_I_SP;

PROCEDURE OTHER_I_SP (
/*******************************************************************************
	OTHER_I_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
	 in_COST_CENTER          
	,v_OTHER_row
	,in_TABLE_NAME           
	,in_ROW_DATE            
	,in_Row_data             
	 );

      insert into OTHER values v_OTHER_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end OTHER_I_SP;				 
				

PROCEDURE PHONE_I_SP (
/*******************************************************************************
	PHONE_I_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -variable 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_PHONE_row PHONE%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
	in_COST_CENTER           
	,in_phone_number_type     
	,v_PHONE_row              
	,in_TABLE_NAME          
	,in_ROW_DATE             
	,in_Row_data              
	); 

      
      insert into PHONE values v_PHONE_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end PHONE_I_SP;
               

PROCEDURE POLLING_I_SP (
/*******************************************************************************
	POLLING_I_SP

	This procedure is intended to insert new POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/02/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_POLLING_row         out POLLING%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );
                  
      insert into POLLING values out_POLLING_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end POLLING_I_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_I_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_I_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/


      for table_fields_rec in table_fields_cur loop

--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_I_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_I_SP;

 
PROCEDURE REAL_ESTATE_I_SP (
/******************************************************************************
	REAL_ESTATE_I_SP

	This procedure is intended to insert new REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_row     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      insert into REAL_ESTATE values out_REAL_ESTATE_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_I_SP;


PROCEDURE SALES_REP_I_SP (
/*****************************************************************************
	SALES_REP_I_SP

	This procedure is intended to insert new SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_row       out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWYTPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      insert into sales_rep values out_sales_rep_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end SALES_REP_I_SP;


PROCEDURE STATUS_I_SP (
/*****************************************************************************
	STATUS_I_SP

	This procedure is intended to insert new STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
revised: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
         12/20/2012 mdh - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_row     out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  STATUS_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_status_row 
                   );
--
--  Expire currently active STATUS Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'STATUS'
		 , out_status_row.COST_CENTER_CODE
     , out_status_row.EFFECTIVE_DATE);
--
--  Insert new STATUS row --                  
      insert into status values out_status_row;
      
      
    
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
end STATUS_I_SP;
        

PROCEDURE STORE_I_SP (
/*****************************************************************************
	STORE_I_SP

	This procedure is intended to insert new STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_store_row     out store%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_store_row 
                   );
                  
      insert into store values out_store_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
 
 end STORE_I_SP;
 

PROCEDURE TAXWARE_I_SP (
/*****************************************************************************
	TAXWARE_I_SP

	This procedure is intended to insert new TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_taxware_row     out taxware%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_taxware_row 
                   );
                  
      insert into taxware values out_taxware_row;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
             
	end TAXWARE_I_SP;
  

PROCEDURE TERMINAL_I_SP (
/*****************************************************************************
	TERMINAL_I_SP

	This procedure is intended to insert new terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_row     out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
      insert into terminal values out_terminal_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        

end TERMINAL_I_SP;


PROCEDURE TERRITORY_I_SP (
/******************************************************************************
	TERRITORY_I_SP

	This procedure is intended to insert new TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,IN_ROW_DATA             IN  VARCHAR2 --sys.xmltype
,out_territory_row       out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      insert into territory values out_territory_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_I_SP;


PROCEDURE TERRITORY_ASSIGNMENT_I_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_I_SP

	This procedure is intended to insert new territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/04/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ASSIGNMENT_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_ASSIGN_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_assignment_row 
                   );
                  
      insert into territory_assignment values out_territory_assignment_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_ASSIGNMENT_I_SP;


PROCEDURE TERRITORY_SALES_MGR_I_SP (
/******************************************************************************
	TERRITORY_SALES_MGR_I_SP

	This procedure is intended to insert new territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_SALES_MGR_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TERRITORY_SALES_MGR_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_sales_mgr_row 
                   );
                  
      insert into territory_sales_mgr values out_territory_sales_mgr_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);

end TERRITORY_SALES_MGR_I_SP;


PROCEDURE TYPE_I_SP (
/******************************************************************************
	TYPE_I_SP

	This procedure is intended to insert new TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 04/24/2012 BLR CCN Project....
revised : 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
          12/20/2012 MDH - Add EXPIRE_DATA_SP procedure
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_type_row            out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
--
--  Expire currently active TYPE Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'TYPE'
		 , out_type_row.COST_CENTER_CODE
     , out_type_row.EFFECTIVE_DATE);
--
--  Insert new TYPE row --                   
      insert into type values out_type_row;
      
      
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TYPE_I_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end TYPE_I_SP;

/*++++++++++++++++++++++++
Updates
+++++++++++++++++++++++*/

procedure ADDRESS_CAN_U_SP ( 
/*******************************************************************************
	ADDRESS_CAN_U_SP

	This procedure is intended to update Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_can_row ADDRESS_CAN%rowtype;
--
--
begin
-- 
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_CAN_ROWTYPE_SP ( 
	 in_COST_CENTER    
	,in_ADDRESS_TYPE  
	,in_EFFECTIVE_DATE 
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data   
	,v_address_can_row
	); 

end;
  
      
   UPDATE ADDRESS_CAN set row = v_address_can_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_CAN_U_SP;

procedure ADDRESS_MEX_U_SP ( 
/*******************************************************************************
	ADDRESS_MEX_U_SP

	This procedure is intended to Update Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_mex_row ADDRESS_MEX%rowtype;
--
--
begin
--
--
-- Convert XML to ROWTYPE --
 ADDRESS_MEX_ROWTYPE_SP ( 
	 in_COST_CENTER     
	,in_ADDRESS_TYPE   
	,in_EFFECTIVE_DATE  
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_address_mex_row
	);

      
     UPDATE ADDRESS_MEX set row  =  v_address_mex_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP, ' || ' ' ||
             'IN_TABLE_NAME IS ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_U_SP;

procedure ADDRESS_OTHER_U_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_U_SP

	This procedure is intended to Update OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/19/2012 mdh CCN Project....
revise : 10/02/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_other_row ADDRESS_OTHER%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_OTHER_ROWTYPE_SP ( 
	  in_COST_CENTER     
	 ,in_ADDRESS_TYPE    
	 ,in_EFFECTIVE_DATE  
	 ,in_TABLE_NAME  
	 ,in_ROW_DATE    
	 ,in_Row_data    
	 ,v_address_other_row   
	 );
      
      UPDATE ADDRESS_OTHER set row  =  v_address_other_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_U_SP;

PROCEDURE ADDRESS_USA_U_SP (
/*******************************************************************************
	ADDRESS_USA_U_SP

	This procedure is intended to Update ADDRESS_USA address records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_USA table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/20/2012 mdh CCN Project....
revised : 10/03/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure

*******************************************************************************/
in_COST_CENTER    IN ADDRESS_USA.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_USA.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_USA.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_address_usa_row address_usa%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADDRESS_USA_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_ADDRESS_TYPE        
	,in_EFFECTIVE_DATE       
	,in_TABLE_NAME          
	,in_ROW_DATE             
	,in_Row_data              
	,v_address_usa_row         
	);
           
     UPDATE ADDRESS_USA set row  =  v_address_usa_row
        Where cost_center_code     =  in_COST_CENTER
          and address_type         =  in_ADDRESS_TYPE
          and effective_date       =  in_EFFECTIVE_DATE;
   
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_USA_U_SP;

procedure ADMINISTRATION_U_SP (
/*******************************************************************************
	ADMINISTRATION_U_SP

	This procedure is intended to update ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_administration_row administration%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 ADMINISTRATION_ROWTYPE_SP (
 	 in_COST_CENTER    
	,in_TABLE_NAME  
	,in_ROW_DATE    
	,in_Row_data    
	,v_administration_row   
	); 
      
      UPDATE ADMINISTRATION set row = v_administration_row
         where cost_center_code = in_Cost_Center;
         
       
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADMINISTRATION_U_SP;				 
				
				
procedure BANK_CARD_U_SP (
/*******************************************************************************
	BANK_CARD_U_SP

	This procedure is intended to update BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/18/2012 mdh CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
 v_bank_card_row bank_card%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
 BANK_CARD_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_POLLING_STATUS_CODE   
	,in_MERCHANT_ID          
	,in_EFFECTIVE_DATE        
	,in_TABLE_NAME  
	,in_ROW_DATE   
	,in_Row_data    
	,v_bank_card_row   
	); 
       
      UPDATE BANK_CARD set row = v_bank_card_row
        Where cost_center_code     =  in_COST_CENTER
          and polling_status_code  =  in_POLLING_STATUS_CODE
          and merchant_id          =  in_MERCHANT_ID
          and effective_date       =  in_EFFECTIVE_DATE;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
end BANK_CARD_U_SP;

PROCEDURE BATCH_JOB_U_SP (
/*******************************************************************************
	BATCH_JOB_U_SP

	This procedure is intended to update existing BATCH_JOB records

	BATCH_JOB_NAME    - Batch Job Name   that changed
  BATCH_JOB_NUMBER  - Batch Job Number that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_batch_job_name    in  batch_job.batch_job_name%type,
in_batch_job_number  in  batch_job.batch_job_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_BATCH_JOB_row BATCH_JOB%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'BATCH_JOB_NAME'                 then  v_batch_job_row.batch_job_name              := v_row_value;
			when 'BATCH_JOB_NUMBER'               then  v_BATCH_JOB_row.BATCH_JOB_number            := v_row_value;
			when 'BATCH_JOB_CONDITION'            then  v_BATCH_JOB_row.BATCH_JOB_status         := v_row_value;
			when 'BATCH_JOB_START_DATE'           then  v_BATCH_JOB_row.BATCH_JOB_start_date        := v_row_value;
--			when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
			when 'BATCH_JOB_END_DATE'             then  v_batch_job_row.batch_job_end_date          := v_row_value;
--			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
			when 'BATCH_JOB_LAST_RUN_DATE'        then  v_batch_job_row.batch_job_last_run_date     := v_row_value;
--			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update batch_job set row = v_batch_job_row  where BATCH_JOB_NAME    = in_BATCH_JOB_NAME 
                                                   and  BATCH_JOB_NUMBER  = in_BATCH_JOB_NUMBER ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'BATCH_JOB_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	end BATCH_JOB_U_SP;

PROCEDURE CODE_DETAIL_U_SP (
/*******************************************************************************
	CODE_DETAIL_U_SP

	This procedure is intended to update existing CODE_DETAIL records

	CODE_HEADER_NAME  - Code Header Name  that changed
  CODE_HEADER_TYPE  - Code Header Type  that changed
  CODE_DETAIL_VALUE - Code Detail Value that changed
	OracleTableName   - Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/16/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_CODE_HEADER_name   in  CODE_DETAIL.CODE_HEADER_name%type,
in_code_header_type   in  code_detail.code_header_type%type,
in_code_detail_value  in  code_detail.code_detail_value%type, 

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_DETAIL_row CODE_DETAIL%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_DETAIL/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_detail_row.code_header_name              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_detail_row.code_header_type              := v_row_value;
			when 'CODE_DETAIL_VALUE'                then  v_CODE_DETAIL_row.CODE_DETAIL_VALUE             := v_row_value;
			when 'CODE_DETAIL_DESCRIPTION'          then  v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_FLAG'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_USER'          then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER       := v_row_value;
			when 'CODE_DETAIL_EXPIRE_EFF_DATE'      then  v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_detail set row = v_code_detail_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type 
                                                      and  code_detail_value  = in_code_detail_value ;    
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_DETAIL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	end CODE_DETAIL_U_SP;

PROCEDURE CODE_HEADER_U_SP (
/*******************************************************************************
	CODE_HEADER_U_SP

	This procedure is intended to update existing CODE_HEADER records

	CODE_HEADER_NAME - Code Header Name that changed
  CODE_HEADER_TYPE - Code Header Type that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_code_header_name   in  code_header.code_header_name%type,
in_code_header_type   in  CODE_HEADER.code_header_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_CODE_HEADER_row CODE_HEADER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/CODE_HEADER/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'CODE_HEADER_NAME'                 then  v_code_header_row.CODE_HEADER_NAME              := v_row_value;
			when 'CODE_HEADER_TYPE'                 then  v_code_header_row.CODE_HEADER_TYPE              := v_row_value;
			when 'CODE_HEADER_DESCRIPTION'          then  v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION       := v_row_value;
			when 'CODE_HEADER_EXPIRE_FLAG'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG       := v_row_value;
			when 'CODE_HEADER_EXPIRE_USER'          then  v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER       := v_row_value;
			when 'CODE_HEADER_EXPIRE_EFF_DATE'      then  v_code_header_row.CODE_HEADER_EXPIRE_EFF_DATE   := v_row_value;
			when 'CODE_HEADER_DTL_VAL_SIZE'         then  v_code_header_row.CODE_HEADER_DTL_VAL_SIZE      := v_row_value;
			when 'CODE_HEADER_DTL_VAL_DEFAULT'      then  v_code_header_row.CODE_HEADER_DTL_VAL_DEFAULT   := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update code_header set row = v_code_header_row where code_header_name   = in_code_header_name
                                                      and  code_header_type   = in_code_header_type ;    
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'CODE_HEADER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end CODE_HEADER_U_SP;
       
PROCEDURE COST_CENTER_U_SP (
/*****************************************************************************
	COST_CENTER_U_SP

	This procedure is intended to UPDATE cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 02/21/2012 kdp CCN Project....
updated : 08/24/2012 tal CCN Project....
*****************************************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
)
 is 

            
 v_code number;
 v_errm varchar2(500);
 v_cost_center_row cost_center%rowtype;
-------------
--
--
begin
--
-- Convert XML to ROWTYPE --
 COST_CENTER_ROWTYPE_SP (
	 in_COST_CENTER  
	,in_TABLE_NAME  
	,in_ROW_DATE     
	,in_Row_data    
	,v_cost_center_row   
	);
--
--
--
      UPDATE cost_center set row = v_cost_center_row where cost_center_code = in_cost_center;
--      
      

  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);

end cost_center_u_sp;

PROCEDURE EMP_DATA_U_SP (
/*******************************************************************************
	EMP_DATA_U_SP

	This procedure is intended to update existing EMP_DATA records

	EMPLOYEE_NUMBER - Employee Number than changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_employee_number  in  emp_data.employee_number%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_EMP_DATA_row EMP_DATA%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
--
begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/EMP_DATA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'NATIONAL_IDENTIFIER'              then  v_emp_data_row.national_identifier           := v_row_value;
			when 'RECORD_TYPE'                      then  v_EMP_DATA_row.record_type                   := v_row_value;
			when 'COMPANY_CODE'                     then  v_emp_data_row.COMPANY_CODE                  := v_row_value;
			when 'FILE_NUMBER'                      then  v_EMP_DATA_row.FILE_NUMBER                   := v_row_value;
			when 'EMPLOYEE_NAME'                    then  v_emp_data_row.employee_name                 := v_row_value;
			when 'LAST_NAME'                        then  v_EMP_DATA_row.LAST_NAME                     := v_row_value;
			when 'FIRST_NAME'                       then  v_emp_data_row.FIRST_NAME                    := v_row_value;
			when 'MIDDLE_INITIAL'                   then  v_emp_data_row.middle_initial                := v_row_value;
			when 'HOME_ADDRESS_LINE1'               then  v_emp_data_row.HOME_ADDRESS_LINE1            := v_row_value;
			when 'HOME_ADDRESS_LINE2'               then  v_EMP_DATA_row.HOME_ADDRESS_LINE2            := v_row_value;
			when 'HOME_CITY_STATE'                  then  v_emp_data_row.home_city_state               := v_row_value;
			when 'HOME_CITY'                        then  v_EMP_DATA_row.HOME_CITY                     := v_row_value;
			when 'HOME_STATE'                       then  v_emp_data_row.HOME_STATE                    := v_row_value;
			when 'HOME_POSTAL_CODE'                 then  v_EMP_DATA_row.HOME_POSTAL_CODE              := v_row_value;
			when 'HOME_PHONE'                       then  v_emp_data_row.home_phone                    := v_row_value;
			when 'SEX'                              then  v_EMP_DATA_row.SEX                           := v_row_value;
			when 'EMP_PAYROLL_STATUS'               then  v_EMP_DATA_row.EMP_PAYROLL_STATUS            := v_row_value;
			when 'EMP_ASSIGNMENT_STATUS'            then  v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS         := v_row_value;
			when 'EMP_DIVISION'                     then  v_EMP_DATA_row.EMP_DIVISION                  := v_row_value;
			when 'ACCOUNT_NUMBER'                   then  v_EMP_DATA_row.ACCOUNT_NUMBER                := v_row_value;
			when 'FLSA_CODE'                        then  v_EMP_DATA_row.FLSA_CODE                     := v_row_value;
			when 'EMPLOYEE_NUMBER'                  then  v_emp_data_row.EMPLOYEE_NUMBER               := v_row_value;
			when 'PAYROLL_EMP_RPT_SEQ_ID'           then  v_emp_data_row.PAYROLL_EMP_RPT_SEQ_ID        := v_row_value;
    ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      update emp_data set row = v_emp_data_row where employee_number  =  in_employee_number ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMP_DATA_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end emp_data_u_sp;

PROCEDURE MARKETING_U_SP (
/*******************************************************************************
	MARKETING_U_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in  marketing.cost_center_code%type,
in_marketing_type       in  marketing.marketing_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_MARKETING_row MARKETING%rowtype;
--
--
--
begin
--
-- Convert XML to ROWTYPE --
      MARKETING_ROWTYPE_SP (
	 in_cost_center           
	,in_marketing_type      
	,in_TABLE_NAME           
	,in_ROW_DATE              
	,in_Row_data              
	,v_marketing_row
	);

      
      update marketing set row = v_marketing_row where cost_center_code = in_cost_center
                                                  and  marketing_type   = in_marketing_type ;      
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end marketing_u_sp;

PROCEDURE OTHER_U_SP (
/*******************************************************************************
	OTHER_U_SP

	This procedure is intended to update existing OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/12/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_OTHER_row OTHER%rowtype;
--
--
--
begin
--
-- 
 begin
 --
-- Convert XML to ROWTYPE --
   OTHER_ROWTYPE_SP (
	in_COST_CENTER          
	, v_OTHER_row  
	,in_TABLE_NAME            
	,in_ROW_DATE             
	,in_Row_data              
	);

 end;
     
      
      UPDATE OTHER set row = v_other_row where cost_center_code = in_cost_center;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end other_u_sp;

PROCEDURE PHONE_U_SP (
/*******************************************************************************
	PHONE_U_SP

	This procedure is intended to update existing PHONE records

	PHONE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/03/2012 tal CCN Project....
revised: 10/03/12 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE,
in_phone_number_type    in  phone.phone_number_type%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_phone_row PHONE%rowtype;
--
--
begin
--
-- Convert XML to ROWTYPE --
  PHONE_ROWTYPE_SP (
	 in_COST_CENTER         
	,in_phone_number_type    
	, v_phone_row         
	,in_TABLE_NAME           
	,in_ROW_DATE             
	,in_Row_data             
	);
      
      UPDATE PHONE set row = v_phone_row where cost_center_code = in_cost_center;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'PHONE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end PHONE_U_SP;

PROCEDURE POLLING_U_SP (
/*******************************************************************************
	POLLING_U_SP

	This procedure is intended to update existing POLLING records

	CostCenter         -  Cost Center           that changed
  PollingStatusCode  -  Polling Status Code   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/02/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call POLLING_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_POLLING_row         out POLLING%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  POLLING_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_POLLING_row 
                   );
                  
      update polling set row      = out_polling_row
       where cost_center_code     = out_polling_row.cost_center_code 
        and  polling_status_code  = out_polling_row.polling_status_code ;
      
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'POLLING_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end POLLING_U_SP;


PROCEDURE POLLING_DWLD_RSN_HIST_U_SP (
/*******************************************************************************
	POLLING_DWLD_RSN_HIST_U_SP

	This procedure is intended to insert new POLLING_DWLD_RSN_HIST records

	CostCenter         -  Cost Center          that changed
  PollingStatusCode  -  Polling Status Code  that changed
  EffectiveDate      -  Effective Date       that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/25/2012 tal CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_cost_center          in polling_dwld_rsn_hist.cost_center_code%type,
in_polling_status_code  in polling_dwld_rsn_hist.polling_status_code%type,
in_effective_date       in polling_dwld_rsn_hist.effective_date%type,

in_table_name in varchar2,
in_ROW_DATE   IN DATE,
in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype;
v_row_value 	varchar2(500);
--
--
begin

/* 
*/

-------------  Business Rules go here                           
--	begin

--	exception
	
--		when others then
--    dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

      for table_fields_rec in table_fields_cur loop

--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
--    dbms_output.put_line('row value is ' || v_row_value);
 
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_polling_dwld_rsn_hist_row.cost_center_code     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_polling_dwld_rsn_hist_row.polling_status_code  := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_polling_dwld_rsn_hist_row.effective_date       := to_date(v_row_value,'MM-DD-YYYY');
			when 'DOWNLOAD_DATE'        then  v_polling_dwld_rsn_hist_row.download_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_DOWNLOAD_REASON'  then  v_polling_dwld_rsn_hist_row.pos_download_reason  := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
      
      insert into POLLING_DWLD_RSN_HIST values v_polling_dwld_rsn_hist_row;
      
      update polling_dwld_rsn_hist set row = v_polling_dwld_rsn_hist_row where cost_center_code     = in_cost_center
                                              and  polling_status_code  = in_polling_status_code 
                                              and  effective_date       = in_effective_date ;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'POLLING_DWLD_RSN_HIST_U_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end POLLING_DWLD_RSN_HIST_U_SP;

PROCEDURE REAL_ESTATE_U_SP (
/******************************************************************************
	REAL_ESTATE_U_SP

	This procedure is intended to update existing REAL_ESTATE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call REAL_ESTATE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_row     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  REAL_ESTATE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_real_estate_row 
                   );
                  
      update real_estate set row      = out_real_estate_row
       where cost_center_code     = out_real_estate_row.cost_center_code ;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_U_SP;


PROCEDURE SALES_REP_U_SP (
/*******************************************************************************
	SALES_REP_U_SP

	This procedure is intended to update changed SALES_REP records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 blr CCN Project....
changed: 10/02/2012 TAL - modified to call SALES_REP_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_row     out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
--
begin
--
-- Convert XML to ROWTYPE --
  SALES_REP_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_sales_rep_row 
                   );
                  
      update SALES_REP set row    = OUT_SALES_REP_ROW 
       where GEMS_EMPLOYEE_ID     = OUT_SALES_REP_ROW.GEMS_EMPLOYEE_ID;
       
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
	END SALES_REP_U_SP;
  

PROCEDURE STATUS_U_SP (
/*******************************************************************************
	STATUS_U_SP

	This procedure is intended to update changed STATUS records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 07/11/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_row          out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  STATUS_ROWTYPE_SP ( 
         in_table_name
        ,in_Row_Data
        ,out_STATUS_row    
                   );
                  
      update status set row    = out_status_row
       where cost_center_code  = out_status_row.cost_center_code 
        and  status_code       = out_status_row.status_code              
        and  effective_date    = out_status_row.effective_date; 
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STATUS_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
             
END STATUS_U_SP;


PROCEDURE STORE_U_SP (
/******************************************************************************
	STORE_U_SP

	This procedure is intended to update changed STORE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created: 05/03/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call STORE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_STORE_row           out STORE%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  STORE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_STORE_row 
                   );
                  
      update store set row     = out_store_row
       where cost_center_code  = out_store_row.cost_center_code ; 
           
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'STORE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
END STORE_U_SP;


PROCEDURE TAXWARE_U_SP (
/*******************************************************************************
	TAXWARE_U_SP

	This procedure is intended to update changed TAXWARE records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 08/24/2012 tal CCN Project....
changed: 10/02/2012 TAL - modified to call TAXWARE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*****************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_TAXWARE_row         out TAXWARE%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin
--
-- Convert XML to ROWTYPE --	
  TAXWARE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_TAXWARE_row 
                   );
                  
      update TAXWARE set row   = out_TAXWARE_row
       where cost_center_code  = out_TAXWARE_row.cost_center_code ; 
           
      
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TAXWARE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);
                     
	END TAXWARE_U_SP;


PROCEDURE TERMINAL_U_SP (
/******************************************************************************
	TERMINAL_U_SP

	This procedure is intended to update changed terminal records

	TERMINAL - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERMINAL_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_row     out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERMINAL_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_terminal_row 
                   );
                  
      UPDATE TERMINAL SET ROW       = OUT_TERMINAL_ROW
       WHERE COST_CENTER_CODE       = OUT_TERMINAL_ROW.COST_CENTER_CODE
          AND POLLING_STATUS_CODE   = OUT_TERMINAL_ROW.POLLING_STATUS_CODE
          AND TERMINAL_NUMBER       = OUT_TERMINAL_ROW.TERMINAL_NUMBER
          AND EFFECTIVE_DATE        = OUT_TERMINAL_ROW.EFFECTIVE_DATE;
           
      
    
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERMINAL_U_SP;


PROCEDURE TERRITORY_U_SP (
/*******************************************************************************
	TERRITORY_U_SP

	This procedure is intended to update changed TERRITORY records

	TERRITORY - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_row     out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_row 
                   );
                  
      update territory set row        = out_territory_row
       where territory_sls_mgr_code   = out_territory_row.territory_sls_mgr_code
        and  cost_center_code         = out_territory_row.cost_center_code ;
         
        
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_U_SP;


PROCEDURE TERRITORY_ASSIGNMENT_U_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_U_SP

	This procedure is intended to update changed territory_assignment records

	TERRITORY_ASSIGNMENT - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_ASSIGNMENT_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_ASSIGN_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_assignment_row 
                   );
                  
      update territory_assignment set row      = out_territory_assignment_row
        where territory_sls_mgr_code = out_territory_assignment_row.territory_sls_mgr_code
          and cost_center_code = out_territory_assignment_row.cost_center_code
          and gems_employee_id = out_territory_assignment_row.gems_employee_id
          and effective_date   = out_territory_assignment_row.effective_date ;
          
        
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_ASSIGNMENT_U_SP;


PROCEDURE TERRITORY_SALES_MGR_U_SP (
/*****************************************************************************
	TERRITORY_SALES_MGR_U_SP

	This procedure is intended to update changed territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TERRITORY_SALES_MGR_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TERRITORY_SALES_MGR_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_territory_sales_mgr_row 
                   );
                  
      update territory_sales_mgr set row      = out_territory_sales_mgr_row
       where territory_sls_mgr_code           = out_territory_sales_mgr_row.territory_sls_mgr_code;
       
      
          
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_U_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        
end TERRITORY_SALES_MGR_U_SP;
 

PROCEDURE TYPE_U_SP (
/*****************************************************************************
	TYPE_U_SP

	This procedure is intended to update changed TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
changed: 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,IN_ROW_DATA             in  varchar2 --sys.xmltype
,out_type_row            out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
--
begin
--
-- Convert XML to ROWTYPE --	
  TYPE_ROWTYPE_SP (
         in_table_name
        ,in_Row_Data
        ,out_type_row 
                   );
                  
      update type set row       = out_type_row
       where cost_center_code   = out_type_row.cost_center_code
        and type_code           = out_type_row.type_code
        and effective_date      = out_type_row.effective_date ; 
        
      
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(sqlerrm,1,200);
      errpkg.raise_err(v_code, 'TYPE_U_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);

end TYPE_U_SP;
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PROCEDURE ADDRESS_CAN_ROWTYPE_SP ( 
/*******************************************************************************
	 ADDRESS_CAN_ROWTYPE_SP

	This procedure is intended to Insert/Update  Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_cost_center     in  address_can.cost_center_code%type 
,in_address_type    in  address_can.address_type%type 
,in_effective_date  in  address_can.effective_date%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_can%rowtype
)

 is 
 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
 
v_address_can_row   ADDRESS_CAN%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);  
      
      
     if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;

        
--       dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE  := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE      := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE    := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1    := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2    := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3    := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY              := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE     := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE       := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS     := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
   out_address_type := v_address_can_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_CAN_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end  ADDRESS_CAN_ROWTYPE_SP;				 
				
procedure ADDRESS_MEX_ROWTYPE_SP ( 
 /******************************************************************************
	ADDRESS_MEX_ROWTYPE_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_mex%rowtype
)

 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row  ADDRESS_MEX%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;

        
--        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE     := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1   := v_row_value;
	   		when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2   := v_row_value;
	    	when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3   := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY             := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE    := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE      := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS    := v_row_value;
			when 'COUNTRY_CODE' 	 then v_address_mex_row.COUNTRY_CODE          :=  v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
    out_address_type := v_address_mex_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_MEX_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_MEX_ROWTYPE_SP;

procedure ADDRESS_OTHER_ROWTYPE_SP ( 
/*******************************************************************************
	ADDRESS_OTHER_ROWTYPE_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE
,in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE
,in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_other%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;        
 --       dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE     := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE   := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE  := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1   := v_row_value;
	   		when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2   := v_row_value;
	    	when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3   := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY             := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE_CODE    := v_row_value;
      		when 'STATE'             then  v_address_other_row.STATE_CODE       := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE      := v_row_value;
      		when 'COUNTRY_CODE'      then  v_address_other_row.COUNTRY_CODE     := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS    := v_row_value;
		ELSE
			null;		
		END CASE;	   	


  else
      null ;
  end if;

  end loop ;
      
     out_address_type  :=  v_address_other_row; 
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_ROWTYPE_SP,' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
end ADDRESS_OTHER_ROWTYPE_SP;

PROCEDURE ADDRESS_USA_ROWTYPE_SP (
/*******************************************************************************
	ADDRESS_USA_ROWTYPE_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/

 in_COST_CENTER          IN  ADDRESS_USA.COST_CENTER_CODE%TYPE 
,in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE 
,in_EFFECTIVE_DATE       IN  ADDRESS_USA.EFFECTIVE_DATE%TYPE 
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_address_type        out address_usa%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_ADDRESS_USA_row  ADDRESS_USA%rowtype;
v_row_value                  varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/


dbms_output.put_line('after begin in ADDRESS_USA_ROWTYPE_SP');
      for table_fields_rec in table_fields_cur loop

      
      
		      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
		
   		if (table_fields_rec.data_type <> 'DATE') then
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
      else
          v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
        end if;
		    
		    
		/***  below is a list of all the fields in the table  ***/
		/*
		            COST_CENTER_CODE
		            ADDRESS_TYPE
		            EFFECTIVE_DATE
		            EXPIRATION_DATE
		            ADDRESS_LINE_1
		            ADDRESS_LINE_2
		            ADDRESS_LINE_3
		            CITY
		            STATE_CODE
		            ZIP_CODE
		            ZIP_CODE_4
		            COUNTY
		            FIPS_CODE
		            DESTINATION_POINT
		            CHECK_DIGIT
		            VALID_ADDRESS
		*/
		
				  	case table_fields_rec.column_name
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE  :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE          :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE      :=  TO_DATE(v_row_value,'MM-DD-YYYY');
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE    :=  TO_DATE(v_row_value,'MM-DD-YYYY');
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1      :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2      :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3      :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY                          :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE              :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE                  :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4              :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY                      :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE                :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT            :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS        :=  v_row_value;
                           		when 'COUNTRY_CODE' then v_ADDRESS_USA_row.COUNTRY_CODE          :=  v_row_value;
		
					ELSE
						null;		
					END CASE;	   	
		
		
		      end if;

      end loop ;
      
     out_address_type  := v_ADDRESS_USA_row;
      
  EXCEPTION
  
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_ROWTYPE_SP, ' || ' ' ||
        'IN_TABLE_NAME is ' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_ROWTYPE_SP;

procedure ADMINISTRATION_ROWTYPE_SP (
/*******************************************************************************
	ADMINISTRATION_ROWTYPE_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE 
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_administration_type  out ADMINISTRATION%rowtype
)
 
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
    --dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE     := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY             := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

  end loop ;
      
    out_administration_type :=  v_administration_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end ADMINISTRATION_ROWTYPE_SP;				 
				
procedure BANK_CARD_ROWTYPE_SP (
/*******************************************************************************
	BANK_CARD_ROWTYPE_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_bank_card_row  out  bank_card%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
/*

*/

begin

/* 
*/



      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
    --dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE     := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code  := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID          := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE       := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID   := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE         := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id           := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID          := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
       
       out_bank_card_row := v_bank_card_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code
      	, 'BANK_CARD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME is ' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_ROWTYPE_SP;				 
				
PROCEDURE COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
	COST_CENTER_ROWTYPE_SP

	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised:
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
,out_cost_center_type  out cost_center%rowtype
)
 is 
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_cost_center_row cost_center%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
    out_cost_center_type :=  v_cost_center_row;
    
         
  

end COST_CENTER_ROWTYPE_SP;

PROCEDURE MARKETING_ROWTYPE_SP (
/*******************************************************************************
	MARKETING_ROWTYPE_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center          in  marketing.cost_center_code%type 
,in_marketing_type       in  marketing.marketing_type%type 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_marketing_type  out marketing%rowtype

)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_MARKETING_row MARKETING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_MARKETING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_MARKETING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code           := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                   := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type             := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date             := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date            := to_date(v_row_value,'MM-DD-YYYY');
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                  := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size       := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size         := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting    := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     out_marketing_type  :=  v_marketing_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MARKETING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end MARKETING_ROWTYPE_SP;

PROCEDURE OTHER_ROWTYPE_SP (
/*******************************************************************************
	OTHER_ROWTYPE_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE 
,out_other_type              OUT OTHER%ROWTYPE

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
 
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_OTHER_row OTHER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
     out_other_type  :=  v_other_row; 
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'OTHER_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
        
	
end OTHER_ROWTYPE_SP;				 
				
PROCEDURE PHONE_ROWTYPE_SP (
/*******************************************************************************
	PHONE_ROWTYPE_SP

	This procedure is intended to insert new PHONE records

	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE 
,in_phone_number_type    in  phone.phone_number_type%type 
,out_phone_type              OUT PHONE%ROWTYPE 

,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_PHONE_row PHONE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_ouutput.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;    
     
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code       := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type      := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code        := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number           := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension        := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
    
    out_phone_type  :=    v_PHONE_row;
           
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
             errpkg.raise_err(v_code, 'PHONE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_TABLE_NAME || '; ' || v_errm);
	
end PHONE_ROWTYPE_SP;				 
				

PROCEDURE POLLING_ROWTYPE_SP (
/*******************************************************************************
	POLLING_ROWTYPE_SP

	This procedure Build a POLLING Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Polling_ROWTYPE  -  Polling Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_polling_rowtype     out polling%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_POLLING_row   POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

	      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
	
   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
		 
		/***  below is a list of all the fields in the table  ***/
		
			  	case table_fields_rec.column_name
					when 'COST_CENTER_CODE'           then  v_polling_row.cost_center_code            := v_row_value;
					when 'POLLING_STATUS_CODE'        then  v_polling_row.polling_status_code         := v_row_value;
          when 'MULTICAST_IND'              then  v_polling_row.multicast_ind               := v_row_value;
					when 'TIME_ZONE'                  then  v_polling_row.time_zone                   := v_row_value;
					when 'POLLING_IND'                then  v_polling_row.polling_ind                 := v_row_value;
					when 'NEXT_DOWNLOAD_BLOCK_COUNT'  then  v_POLLING_row.NEXT_DOWNLOAD_BLOCK_COUNT   := v_row_value;
          ELSE
            null;		
          END CASE;	   	
		
	     end if;

    end loop ;
      
      out_polling_rowtype  :=  v_POLLING_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'POLLING_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || IN_TABLE_NAME || '; ' || v_errm);        
	
END POLLING_ROWTYPE_SP;


PROCEDURE REAL_ESTATE_ROWTYPE_SP (
/******************************************************************************
	REAL_ESTATE_ROWTYPE_SP

	This procedure Build a REAL_ESTATE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  REAL_ESTATE_ROWTYPE  -  REAL_ESTATE Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_real_estate_rowtype     out real_estate%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_real_estate_row   real_estate%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
      ELSE
        null;		
      END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      out_real_estate_rowtype  :=  v_real_estate_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'REAL_ESTATE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end REAL_ESTATE_ROWTYPE_SP;


PROCEDURE SALES_REP_ROWTYPE_SP (
/******************************************************************************
	SALES_REP_ROWTYPE_SP

	This procedure Build a SALES_REP Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Sales_Rep_ROWTYPE  -  Sales_Rep Data Row

created : 09/26/2012 TAL -- CCN Project....
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_sales_rep_rowtype   out sales_rep%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_sales_rep_row   sales_rep%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case TABLE_FIELDS_REC.COLUMN_NAME
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
      ELSE 
        null;		
      END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      out_SALES_REP_rowtype  :=  v_SALES_REP_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'SALES_REP_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end SALES_REP_ROWTYPE_SP;


PROCEDURE STATUS_ROWTYPE_SP (
/******************************************************************************
	STATUS_ROWTYPE_SP

	This procedure Build a STATUS Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Status_ROWTYPE   -  Status Data Row

created: 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_status_rowtype   out status%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_status_row   status%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case TABLE_FIELDS_REC.COLUMN_NAME
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');
      ELSE  
        null;		
      END CASE;	   	

      else
        null ;
      end if;

      end loop ;
      
      out_STATUS_rowtype  :=  v_STATUS_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STATUS_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
END STATUS_ROWTYPE_SP;


PROCEDURE STORE_ROWTYPE_SP (
/******************************************************************************
	STORE_ROWTYPE_SP

	This procedure Build a STORE Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Store_ROWTYPE    -  Store Data Row

created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
a10 72
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_store_rowtype       out store%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_store_row     store%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;
			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;
			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;
		ELSE
			null;		
		END CASE;	   	

      else
        null ;
      end if;

      end loop ;
      
      out_STORE_rowtype  :=  v_STORE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'STORE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end STORE_ROWTYPE_SP;
d12 1
d14 1
a14 1
PROCEDURE TAXWARE_ROWTYPE_SP (
d16 1
a16 1
	TAXWARE_ROWTYPE_SP
d18 2
a19 1
	This procedure Build a TAXWARE Rowtype ROW
d21 6
a26 3
	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Taxware_ROWTYPE  -  Taxware Data Row
d28 1
a28 11
created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_taxware_rowtype   out taxware%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
d30 11
a40 1
cursor table_fields_cur is
d42 1
a42 15
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_taxware_row   taxware%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/
a43 1
begin
d45 6
a50 1
      for table_fields_rec in table_fields_cur loop
d52 16
a67 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d69 69
a137 32
   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if; 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;
			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;
			when 'LAST_MAINT_DATE'            then  v_TAXWARE_row.LAST_MAINT_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'LAST_MAINT_METHOD_ID'       then  v_TAXWARE_row.LAST_MAINT_METHOD_ID     := v_row_value;
			when 'LAST_MAINT_USER_ID'         then  v_TAXWARE_row.LAST_MAINT_USER_ID       := v_row_value;
		ELSE
			null;		
		END CASE;

      else
        null ;
      end if;

      end loop ;
      
      out_TAXWARE_rowtype  :=  v_TAXWARE_row;
d139 3
d143 20
a162 8
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TAXWARE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TAXWARE_ROWTYPE_SP;
d164 3
d168 12
a179 3
PROCEDURE TERMINAL_ROWTYPE_SP (
/******************************************************************************
	TERMINAL_ROWTYPE_SP
d181 1
a181 1
	This procedure Build a TERMINAL Rowtype ROW
d183 7
a189 3
	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row
d191 2
a192 11
created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_terminal_rowtype   out terminal%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
d194 9
a202 1
cursor table_fields_cur is
d204 18
a221 11
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_terminal_row   terminal%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d223 155
a377 18
/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
d379 4
a382 15
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code       := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code    := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number        := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date         := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date        := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date     := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number   := v_row_value;
			
		ELSE
			null;		
		END CASE;

a383 17
      else
        null ;
      end if;

      end loop ;
      
      out_TERMINAL_rowtype  :=  v_TERMINAL_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERMINAL_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TERMINAL_ROWTYPE_SP;
d385 1
a385 2

PROCEDURE TERRITORY_ROWTYPE_SP (
d387 1
a387 1
	TERRITORY_ROWTYPE_SP
d389 2
a390 1
	This procedure Build a TERRITORY Rowtype ROW
d392 11
a402 3
	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_ROWTYPE  -  Territory Data Row
d404 5
a408 11
created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_rowtype   out territory%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
d410 1
a410 1
cursor table_fields_cur is
d412 1
a412 11
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_row   territory%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d414 8
a421 7
/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop
d423 1
a423 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d425 5
a429 1
   		if (table_fields_rec.data_type <> 'DATE') then
d431 1
a431 8
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
d433 1
a433 16
	  	case table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'     then  v_territory_row.territory_sls_mgr_code    := v_row_value;
      when 'COST_CENTER_CODE'           then  v_territory_row.cost_center_code          := v_row_value;
			when 'CATEGORY'                   then  v_territory_row.category                  := v_row_value;
			when 'LEASE_CAR_INDICATOR'        then  v_territory_row.lease_car_indicator       := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE'   then  v_territory_row.territory_type_busn_code  := v_row_value;
			when 'HOME_STORE'                 then  v_territory_row.home_store                := v_row_value;
			 
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;
d435 1
a435 3
      end loop ;
      
      out_TERRITORY_rowtype  :=  v_TERRITORY_row;
d437 5
a441 19
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);      
      errpkg.raise_err(v_code, 'TERRITORY_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
end TERRITORY_ROWTYPE_SP;


PROCEDURE TERRITORY_ASSIGN_ROWTYPE_SP (
/******************************************************************************
	TERRITORY_ASSIGN_ROWTYPE_SP

	This procedure Build a TERRITORY_ASSIGNMENT Rowtype ROW

	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_Assignment_ROWTYPE  -  Territory_Assignment Data Row
d443 1
a443 13
created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_assignment_row     out territory_assignment%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is
d445 1
a445 7
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
d447 8
a454 22
v_territory_assignment_row   territory_assignment%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

begin

      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
d456 1
a456 32
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code   := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code         := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category                 := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id         := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date           := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date          := to_date(v_row_value,'MM-DD-YYYY');
						
		ELSE
			null;		
		END CASE;


      else
        null ;
      end if;

      end loop ;
      
      out_TERRITORY_ASSIGNMENT_row  :=  v_TERRITORY_ASSIGNMENT_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end TERRITORY_ASSIGN_ROWTYPE_SP;
d458 1
a458 2

PROCEDURE TERRITORY_SALES_MGR_ROWTYPE_SP (
d460 1
a460 1
	TERRITORY_SALES_MGR_ROWTYPE_SP
d462 2
a463 1
	This procedure Build a TERRITORY_SALES_MGR Rowtype ROW
d465 10
a474 3
	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Territory_Sales_Mgr_ROWTYPE  -  Territory_Sales_Mgr Data Row
d476 2
a477 11
created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_territory_sales_mgr_row     out territory_sales_mgr%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);
d479 1
a479 1
cursor table_fields_cur is
d481 7
a487 11
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_territory_sales_mgr_row   territory_sales_mgr%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
a489 1
-------------  Business Rules go here 
d492 1
a492 1
begin
d494 40
a533 1
      for table_fields_rec in table_fields_cur loop
d535 20
a554 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d556 27
a582 8
   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
d584 70
a653 16
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name		
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code  := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id        := v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad   := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type  := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date          := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date         := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name              := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial          := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name               := v_row_value;
			 
		ELSE
			null;		
		END CASE;
d655 24
d680 1
a680 3
      else
        null ;
      end if;
d682 2
a683 13
      end loop ;
      
      out_TERRITORY_SALES_MGR_row  :=  v_TERRITORY_SALES_MGR_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is ' || in_table_name || '; ' || v_errm);
        	
end TERRITORY_SALES_MGR_ROWTYPE_SP;
d685 1
d687 7
a693 3
PROCEDURE TYPE_ROWTYPE_SP (
/******************************************************************************
	TYPE_ROWTYPE_SP
d695 2
a696 1
	This procedure Build a TYPE Rowtype ROW
d698 1
a698 3
	OracleTableName  -  Table name for row -varible
      xml file     -  the data being inserted
  Type_ROWTYPE     -  Type Data Row
d700 19
a718 29
created : 09/26/2012 TAL -- CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
******************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_table_name           in  varchar2 
,in_row_data             in  varchar2 --sys.xmltype
,out_type_rowtype        out type%rowtype
)
 is 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_type_row      type%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/
d722 3
a724 24
      for table_fields_rec in table_fields_cur loop

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

   		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
        end if;
 
/***  below is a list of all the fields in the table  ***/
      
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'   then  v_type_row.cost_center_code   := v_row_value;
			when 'TYPE_CODE'          then  v_type_row.type_code          := v_row_value;
			when 'EFFECTIVE_DATE'     then  v_type_row.effective_date     := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'    then  v_type_row.expiration_date    := to_date(v_row_value,'MM-DD-YYYY');
			
		ELSE
			null;		
		END CASE;
d726 135
d862 1
a862 17
      else
        null ;
      end if;

      end loop ;
      
      out_TYPE_rowtype  :=  v_TYPE_row;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TYPE_ROWTYPE_SP, ' || ' ' ||
             'IN_TABLE_NAME is '|| in_table_name || '; ' || v_errm);
        	
END TYPE_ROWTYPE_SP;
d864 1
a865 1
--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE
d867 1
a867 3
	PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP
d869 1
a869 2
	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  
d871 7
a877 20
created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;
d879 1
a879 1
--REMOVE TESTING
d881 1
a881 1
PROCEDURE CC_ADDTL_TABLES_UI_SP ( 
d883 1
a883 3
    CC_ADDTL_TABLES_UI_SP  --   create/update tables
	 impacted by cost center table changes/inserts VIA
   COST_CENTER_UI_UPSERT_SP.
d886 11
a896 10
	This procedure is intended to insert/update the database
	 for the following tables when creating/updating the
	 Cost_Center associated tables.
	Tables are as follows: 
            , ADMINISTRATION
            , STORE
            , OTHER
            , REAL_ESTATE
            , TERRITORY
            tables.  
d898 2
a899 2
created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
d901 2
a903 3
   in_table_name          IN  varchar2   
  ,in_row_data           IN  varchar2  --sys.xmltype
  )
d906 1
a906 1
cursor table_fields_cur is
d908 1
a908 7
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
d910 16
d927 3
d937 1
a937 1
v_table_name varchar2(50);
d939 10
d956 10
d967 5
a971 4
V_STORE_ROWTYPE                STORE%rowtype;
V_OTHER_ROWTYPE                OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE       ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE          REAL_ESTATE%rowtype;
a973 3
        
--  ADMINISTRATION insert/update process 

d975 3
d979 5
a983 4
   --     for tables_rec in tables_cur loop 
    
    if (v_Row_data.existsNode('/COST_CENTER_UI/' || in_table_name) = 1) then   
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| in_table_name).getCLOBVal();
d985 6
a990 2
       -- case tables_rec.table_name
        case in_table_name    
d996 4
a999 1
                    
d1003 2
d1006 16
a1021 30
     
      
       BEGIN 
          if v_xml_administration_frag  is not null  then
              CCN_TABLE_IU_PKG.ADMINISTRATION_I_SP (                            
                 null   
                , 'ADMINISTRATION' 
                , null
                , v_xml_administration_frag);    
 --        dbms_output.put_line('ADMINISTRATION Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.ADMINISTRATION_U_SP (                  
                     null   
                , 'ADMINISTRATION' 
                , null
                , v_xml_administration_frag); 
 --         dbms_output.put_line('ADMINISTRATION Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADMINISTRATION Update Error' );
           end;
        end;
a1022 3
--  STORE insert/update process 
 
       begin
d1024 1
a1024 28
          if v_xml_store_frag  is not null  then
              CCN_TABLE_IU_PKG.STORE_I_SP (                            
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype);                    
 --   dbms_output.put_line('STORE Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
           
            begin
              CCN_TABLE_IU_PKG.STORE_U_SP (                  
                 'STORE' 
                , v_xml_store_frag
                , v_store_rowtype); 
 --   dbms_output.put_line('STORE Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'STORE Update Error' );
           end;
        end;

--  OTHER insert/update process 
 
d1027 4
a1030 4
          if v_xml_other_frag  is not null  then
              CCN_TABLE_IU_PKG.OTHER_I_SP (                            
                   null   
                , 'OTHER' 
d1032 6
a1037 4
                , v_xml_other_frag);              
             
 --  Dbms_output.put_line('OTHER Insert executed ');
          end if;
a1039 1
           
d1041 3
a1043 3
              CCN_TABLE_IU_PKG.OTHER_U_SP (                  
                      null   
                , 'OTHER' 
d1045 2
a1046 3
                , v_xml_other_frag);              
                           
 --   dbms_output.put_line('OTHER Update executed ');
d1051 5
a1055 5
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'OTHER Update Error' );
           end;
        end;
d1057 1
a1057 1
--  REAL_ESTATE insert/update process 
d1060 7
a1066 8
        
          if v_xml_real_estate_frag  is not null  then
              CCN_TABLE_IU_PKG.REAL_ESTATE_I_SP (                            
                 'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
 --     dbms_output.put_line('REAL_ESTATE Insert executed ');
d1068 1
a1068 1
       EXCEPTION
a1069 1
          
d1071 5
a1075 6
              CCN_TABLE_IU_PKG.REAL_ESTATE_U_SP (                  
               'REAL_ESTATE' 
                , v_xml_real_estate_frag
                , v_real_estate_rowtype);                
             
  --     dbms_output.put_line('REAL_ESTATE Update executed ');
d1080 16
a1095 17
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'REAL_ESTATE Update Error' );
           end;
        end;

--  TERRITORY insert/update process 
 
       begin
        
          if v_xml_territory_frag  is not null  then
              CCN_TABLE_IU_PKG.TERRITORY_I_SP (                            
                      'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                   
             
  --  dbms_output.put_line('TERRITORY Insert executed ');
d1097 1
a1097 3
          
       EXCEPTION
       
a1098 1
           
d1100 5
a1104 6
              CCN_TABLE_IU_PKG.TERRITORY_U_SP (                  
                    'TERRITORY'   
                     , v_xml_territory_frag
                     , v_territory_rowtype);                        
               
 -- dbms_output.put_line('TERRITORY Update executed ');
d1109 3
a1111 3
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'TERRITORY Update Error' );
d1113 1
a1113 21
        end;
 END if;
 
    EXCEPTION
    when others then
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP, ' || ' ' ||
          v_errm || ' ' ||
          ' Errors' );
 --  dbms_output.put_line('in others ');
 --  dbms_output.put_line(sqlerrm);   

END CC_ADDTL_TABLES_UI_SP;

PROCEDURE CC_ADDRESS_TABLES_UI_SP ( 
 /******************************************************************************
    CC_ADDRESS_TABLES_UI_SP   --   create/update tables
	 impacted by cost center table changes/inserts via 
   COST_CENTER_UI_UPSERT_SP.
        Procedure
a1114 8
	This procedure will add one address row singular
	for the following tables depending on category type : 
               ADDRESS_USA
            ,  ADDRESS_CAN
            ,  ADDRESS_MEX
            ,  ADDRESS_OTHER
           
            tables.  
d1116 1
a1116 11
created:   12/13/2012 BLR  CCN Project....
changed : 04/03/2013 BLR error message pointing to wrong procedure
*******************************************************************************/
 
 
in_table_name          IN  varchar2 
,in_row_data            IN  varchar2  --sys.xmltype
)
 IS
 
 cursor table_fields_cur is
d1118 1
a1118 49
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
        
v_Row_data XMLTYPE := SYS.XMLTYPE(in_row_data); 
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);
v_table_name varchar2(50);
--

v_xml_addr_usa_frag clob;
v_xml_addr_mex_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
--

V_ADDRESS_CAN_ROWTYPE       ADDRESS_CAN%rowtype;
V_ADDRESS_MEX_ROWTYPE       ADDRESS_MEX%rowtype;
V_ADDRESS_USA_ROWTYPE       ADDRESS_USA%rowtype;
V_ADDRESS_OTHER_ROWTYPE     ADDRESS_OTHER%rowtype;
--
v_count integer := 1;
       
 begin
 
 
    if (v_Row_data.existsNode('/COST_CENTER_UI/'|| in_table_name) = 1) then   
         v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| in_table_name).getCLOBVal();
 
       case in_table_name      
       
            when 'ADDRESS_CAN'      then v_xml_addr_can_frag := v_xml_frag;
            when 'ADDRESS_MEX'     	then v_xml_addr_mex_frag := v_xml_frag;
            when 'ADDRESS_USA'	    then v_xml_addr_usa_frag := v_xml_frag;
            when 'ADDRESS_OTHER'	  then v_xml_addr_oth_frag := v_xml_frag;            
        else
            null;
        end case;
    
     
        BEGIN
d1120 7
a1126 8
          if v_xml_addr_can_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_CAN_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_CAN'
                 , null
                 , v_xml_addr_can_frag);                 
d1128 1
a1128 1
 -- dbms_output.put_line('ADDRESS CAN Insert executed ');
d1133 7
a1139 9
              CCN_TABLE_IU_PKG.ADDRESS_CAN_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_CAN'
                 , null
                 , v_xml_addr_can_frag);                          
               
 --  dbms_output.put_line('ADDRESSCAN Update executed ');
d1144 3
a1146 3
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS CAN Update Error' );
d1148 1
a1148 1
        end;  
d1150 1
a1150 1
--  ADDRESS_MEX insert/update process 
d1153 7
a1159 11
      
         if v_xml_addr_mex_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_MEX_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_MEX'
                 , null
                 , v_xml_addr_mex_frag);                 
             
  --  dbms_output.put_line('ADDRESS MEX Insert executed ');
d1164 5
a1168 9
              CCN_TABLE_IU_PKG.ADDRESS_MEX_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_MEX'
                 , null
                 , v_xml_addr_mex_frag);                          
               
  -- dbms_output.put_line('ADDRESS MEX Update executed ');
d1173 3
a1175 3
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS MEX Update Error' );
d1179 9
a1187 3
--  ADDRESS_OTHER insert/update process 

       begin
a1188 58
          if v_xml_addr_oth_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_OTHER'
                 , null
                 , v_xml_addr_oth_frag);                 
             
 -- dbms_output.put_line('ADDRESS OTHER Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_OTHER_U_SP (                  
                   null
                 , null
                 , null
                 , 'ADDRESS_OTHER'
                 , null
                 , v_xml_addr_oth_frag);                          
               
  --  dbms_output.put_line('ADDRESS OTHER Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS OTHER Update Error' );
           end;
        end;

--  ADDRESS_USA insert/update process 

       begin
       
          if v_xml_addr_usa_frag  is not null  then
              CCN_TABLE_IU_PKG.ADDRESS_USA_I_SP (                            
                   null
                 , null
                 , null
                 , 'ADDRESS_USA'
                 , null
                 , v_xml_addr_usa_frag);                 
             
  -- dbms_output.put_line('ADDRESS USA Insert executed ');
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.ADDRESS_USA_U_SP (                  
                   null                      --in_cost_center
                 , null                      --in_address_type
                 , null                      --in_effective_date
                 , 'ADDRESS_USA'             --in_table_name
                 , null                      --in_row_date
                 , v_xml_addr_usa_frag);     --in_row_data   xml                   
d1190 33
a1222 8
  -- dbms_output.put_line('ADDRESS USA Update executed ');
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
                 v_errm || ';  ' ||
                 'ADDRESS USA Update Error' );
d1224 6
a1229 4
        end;
  END IF;


d1235 2
a1236 2
         errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP, ' || ' ' ||
          v_errm || ',' ||
a1237 3
  -- dbms_output.put_line('in others ');
  -- dbms_output.put_line(sqlerrm);   

d1239 1
a1239 1
END CC_ADDRESS_TABLES_UI_SP;
d1241 1
a1241 1
end CCN_TABLE_IU_PKG;
@


1.17
log
@Address update
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1361 2
a1362 1
changed : 04/03/2013 BLR error message pointing to wrong procedure
d1385 2
a1386 2
	--dbms_output.put_line('before convert XML to ROWTYPE');
	--dbms_output.put_line (in_Row_data);
d1394 2
d1405 1
a1405 1
--					dbms_output.put_line('after convert XML to ROWTYPE');
d1409 5
a1413 5
 --					dbms_output.put_line('Expire currently active ADDRESS_USA Record before insert');
				    
 --				    dbms_output.put_line('v_address_usa_row.COST_CENTER_CODE ' || v_address_usa_row.COST_CENTER_CODE );                                                                                 
 --					dbms_output.put_line('v_address_usa_row.EFFECTIVE_DATE ' || v_address_usa_row.EFFECTIVE_DATE );                                                                                 
 --					dbms_output.put_line('v_address_usa_row.ADDRESS_TYPE ' || v_address_usa_row.ADDRESS_TYPE );                                                                                 
d7298 1
a7298 2
end CCN_TABLE_IU_PKG;				 
				
@


1.16
log
@Add ADDRESS_TYPE to EXPIRE_DATA_SP routine in ADDRESS_CAN, ADDRESS_MEX, ADDRESS_OTHER, & ADDRESS_USA  procedures.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1376 3
a1378 1
--v_Row_data      sys.xmltype := xmltype(in_Row_data);
d1384 81
a1464 20
  ADDRESS_USA_ROWTYPE_SP (
	 in_COST_CENTER           
	,in_ADDRESS_TYPE          
	,in_EFFECTIVE_DATE        
	,in_TABLE_NAME            
	,in_ROW_DATE             
	,in_Row_data             
	,v_ADDRESS_USA_row        
	);
--
--
--  Expire currently active ADDRESS_USA Record before insert --
      COMMON_TOOLS.EXPIRE_DATA_SP (
      'ADDRESS_USA'
		 , v_address_usa_row.COST_CENTER_CODE
     , v_address_usa_row.EFFECTIVE_DATE
     , v_address_usa_row.ADDRESS_TYPE);
--
--  Insert new ADDRESS_USA row --   
      insert into ADDRESS_USA values v_ADDRESS_USA_row;
d5101 2
d7295 2
a7296 1
end CCN_TABLE_IU_PKG;
@


1.15
log
@correct query in territory sp
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1203 2
a1204 1
     , v_address_can_row.EFFECTIVE_DATE);
d1267 2
a1268 1
     , v_address_mex_row.EFFECTIVE_DATE);
d1330 2
a1331 1
     , v_address_other_row.EFFECTIVE_DATE);
d1397 2
a1398 1
     , v_address_usa_row.EFFECTIVE_DATE);
@


1.14
log
@corrected code for
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d993 2
a994 1
changed : 04/03/2013 BLR error message pointing to wrong procedure
@


1.13
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
a1 1
PACKAGE BODY AS CCN_TABLE_IU_PKG_BLR
a10 1

d19 1
d42 2
a43 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_S_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d58 1
d66 2
a67 2

		  OPEN out_ADDRESS_CAN_REF_CUR FOR
d69 3
a71 3
			  SELECT * 
        FROM ADDRESS_CAN AC
			  WHERE COST_CENTER_CODE  = IN_COST_CENTER
d75 4
a78 4
			      );
	  
  EXCEPTION
	  WHEN OTHERS THEN 
d81 3
a83 4
      errpkg.raise_err(v_code, 'ADDRESS_CAN_S_SP' ||
             'COST_CENTER_CODE' || in_cost_center ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
        
d98 1
d116 2
a117 3

	  
  EXCEPTION
d121 3
a123 3
      errpkg.raise_err(v_code, 'ADDRESS_MEX_S_SP' ||
             'COST_CENTER_CODE' || IN_COST_CENTER ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
d139 1
d157 1
a157 1
	  
d159 1
a159 1
	  WHEN OTHERS THEN 
d162 3
a164 3
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_S_SP' ||
             'COST_CENTER_CODE' || IN_COST_CENTER ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
d180 1
d198 2
a199 2
	  
  EXCEPTION
d203 3
a205 3
      errpkg.raise_err(v_code, 'ADDRESS_USA_S_SP' ||
             'COST_CENTER_CODE' || IN_COST_CENTER ||
             'ADDRESS_TYPE'     || in_ADDRESS_TYPE);
d231 2
a232 2
	  
  EXCEPTION
d236 2
a237 2
      errpkg.raise_err(v_code, 'ADMINISTRATION_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
d254 1
d260 1
a260 1

d273 2
a274 2
	  
 EXCEPTION 
d278 5
a282 4
      errpkg.raise_err(v_code, 'BANK_CARD_S_SP' ||
             'COST_CENTER_CODE'     || in_cost_center ||
             'POLLING_STATUS_CODE'  || in_polling_status_code ||
             'MERCHANT_ID_CODE'     || in_merchant_id_code
d298 1
d303 1
a303 1

d305 1
a305 1

d317 4
a320 4
      errpkg.raise_err(v_code, 'BATCH_JOB_S_SP' ||
             'BATCH_JOB_NAME' || in_BATCH_JOB_NAME ||
             'BATCH_JOB_NUMBER' || in_BATCH_JOB_NUMBER );

d335 1
d355 4
a358 4
      errpkg.raise_err(v_code,      'CODE_DETAIL_S_SP'  ||            
             'CODE_HEADER_NAME'  || in_code_header_name ||
             'CODE_HEADER_TYPE'  || in_code_header_type ||
             'CODE_DETAIL_VALUE' || in_CODE_DETAIL_VALUE);
d373 1
d392 3
a394 4
      errpkg.raise_err(v_code,    
             'CODE_HEADER_S_SP' ||
             'CODE_HEADER_NAME' || in_CODE_HEADER_NAME ||
             'CODE_HEADER_TYPE' || in_CODE_HEADER_TYPE     );
d430 1
d448 2
a449 2
      errpkg.raise_err(v_code, 'EMP_DATA_S_SP' ||
             'EMPLOYEE_NUMBER' || in_EMPLOYEE_NUMBER);
d464 1
d484 3
a486 3
      errpkg.raise_err(v_code, 'HIERARCH_DESCRIPTION_S_SP' || 
             'HRCHY_HDR_NAME' || in_HRCHY_HDR_NAME  ||
             'HRCHY_HDR_LVL_NBR'  ||  in_HRCHY_HDR_LVL_NBR);
d505 1
d529 7
a535 7
      errpkg.raise_err(v_code, 'HIERARCH_DETAIL_S_SP' || 
             'HRCHY_HDR_NAME' || in_HRCHY_HDR_NAME  ||
             'HRCHY_DTL_LEVEL'  ||  in_HRCHY_DTL_LEVEL ||
             'HRCHY_DTL_PREV_LVL_VAL'  ||  in_HRCHY_DTL_PREV_LVL_VAL ||
             'HRCHY_DTL_CURR_LVL_VAL'  ||  in_HRCHY_DTL_CURR_LVL_VAL ||
             'HRCHY_DTL_NEXT_LVL_VAL'  ||  in_HRCHY_DTL_NEXT_LVL_VAL ||
             'HRCHY_DTL_EFF_DATE'      ||  in_HRCHY_DTL_EFF_DATE);
d549 1
d569 2
a570 2
      errpkg.raise_err(v_code, 'HIERARCH_HEADER_S_SP' ||
             'HRCHY_HDR_NAME' || in_hrchy_hdr_name);
d586 1
d609 3
a611 3
      errpkg.raise_err(v_code,     'MARKETING_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER   ||
             'MARKETING_TYPE'   || in_MARKETING_TYPE);
d625 1
d643 2
a644 2
      errpkg.raise_err(v_code, 'OTHER_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
d659 1
d677 2
a678 2
      errpkg.raise_err(v_code, 'PHONE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
d693 1
d713 3
a715 3
		'POLLING_S_SP'		||
		'COST_CENTER_CODE' 	|| in_COST_CENTER ||
		'POLLING_STATUS_CODE'	|| in_POLLING_STATUS_CODE );
d729 1
d750 4
a753 4
		'POLLING_DWLD_RSN_HIST_S_SP'		||
		'COST_CENTER_CODE'    || in_cost_center ||
		'POLLING_STATUS_CODE'	|| in_polling_status_code ||
    'EFFECTIVE_DATE'      || in_effective_date );
d766 1
d784 2
a785 2
      errpkg.raise_err(v_code, 'REAL_ESTATE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
d800 1
d822 2
a823 2
      errpkg.raise_err(v_code, 'SALES_REP_S_SP' ||
             'GEMS_EMPLOYEE_ID' || in_GEMS_EMPLOYEE_ID);
d839 1
d863 3
a865 3
		'STATUS_S_SP'      ||
		'COST_CENTER_CODE' || in_COST_CENTER  ||
		'STATUS_CODE'      || in_STATUS_CODE);
d879 1
d897 2
a898 2
      errpkg.raise_err(v_code, 'STORE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
d912 1
d930 2
a931 2
      errpkg.raise_err(v_code, 'TAXWARE_S_SP' ||
             'COST_CENTER_CODE' || in_COST_CENTER);
d948 1
d973 5
a977 5
        errpkg.raise_err(v_code, 'TERMINAL_S_SP KEY IS' ||
             'COST_CENTER_CODE'     || in_cost_center_code  ||
             'POLLING STATUS CODE'  || in_polling_status_cd ||
             'TERMINAL NUMBER'      || in_terminal_number 
             );
d993 1
d1009 1
a1009 1
			  and TERRITORY_SLS_MGR_CODE = in_TERR_SLS_MGR_CD;
d1015 3
a1017 3
         errpkg.raise_err(v_code, 'TERRITORY_S_SP KEY IS ' ||
             'COST_CENTER_CODE' || in_TERR_CC ||
             'SALES MANAGER NUMBER' || in_TERR_SLS_MGR_CD);
d1034 1
d1060 4
a1063 4
	Errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENTL_S_SP KEY IS' ||
	     'TERRITORY SALES MANAGER NUMBER' || in_TERR_SLS_MGR_CD ||
       'COST CENTER CODE' || IN_COST_CENTER ||             
	     'GEMS EMPLOYEE ID' || in_gems_EMP_ID);
d1078 1
d1101 3
a1103 2
	errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_S_SP KEY IS' ||
             'SALES MANAGER NUMBER' || in_TERR_SLS_MGR_CD);
d1120 1
d1144 3
a1146 3
	errpkg.raise_err(v_code, 'TYPE_S_SP KEY IS ' ||
             'COST_CENTER_CODE' || in_cost_center ||
             'TYPE CODE' || in_TYPE_CODE);    
d1170 1
d1206 1
a1206 3
  
   commit;
      
d1211 2
a1212 2
      errpkg.raise_err(v_code, 'ADDRESS_CAN_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1233 1
d1269 1
a1269 3
       
     commit;
      
d1274 2
a1275 2
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1295 1
d1331 1
a1331 3
      
      commit;
      
d1336 2
a1337 2
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1357 1
d1397 1
a1397 3
      
      commit;
      
d1402 2
a1403 2
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
d1423 1
d1453 1
a1453 1
       commit;
d1459 2
a1460 2
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1484 1
d1525 1
a1525 1
      commit;
d1532 1
a1532 1
      	, 'BANK_CARD_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
d1552 1
d1592 2
a1593 2
      --dbms_output.put_line(in_Row_data.extract('/BATCH_JOB/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1615 1
a1615 1
			when 'BATCH_JOB_CONDITION'            then  v_batch_job_row.batch_job_condition         := v_row_value;
d1620 1
a1620 1
			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
d1622 1
a1622 1
			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
d1636 1
a1636 1
      commit;
d1642 2
a1643 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1663 1
d1745 1
a1745 1
      commit;
d1751 2
a1752 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1771 1
d1853 1
a1853 1
      commit;
d1859 2
a1860 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d1907 1
a1907 1
      commit;
d1924 1
d2020 1
a2020 1
      commit;
d2026 2
a2027 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2048 1
d2087 1
a2087 1
      commit;
d2093 2
a2094 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2114 1
d2142 1
a2142 1
      commit;
d2148 2
a2149 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2171 1
d2202 1
a2202 1
      commit;
d2208 2
a2209 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2230 1
d2255 1
a2255 1
      commit;
d2261 2
a2262 2
      errpkg.raise_err(v_code, 'POLLING_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2282 1
d2358 1
a2358 1
      commit;
d2365 1
a2365 1
      	, 'POLLING_DWLD_RSN_HIST_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
d2386 1
d2411 1
a2411 1
      commit;
d2418 2
a2419 2
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d2438 1
d2463 1
a2463 1
      commit;
d2469 2
a2470 2
      errpkg.raise_err(v_code, 'SALES_REP_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
d2490 1
d2522 1
a2522 1
      commit;
d2528 2
a2529 2
      errpkg.raise_err(v_code, 'STATUS_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d2548 1
d2573 1
a2573 1
      commit;
d2579 2
a2580 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2599 1
d2624 1
a2624 1
      commit;
d2630 2
a2631 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2650 1
d2675 1
a2675 1
      commit;
d2681 2
a2682 2
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d2702 1
d2727 1
a2727 1
      commit;
d2733 2
a2734 2
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
d2753 1
d2778 1
a2778 1
      commit;
d2784 2
a2785 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d2804 1
d2829 1
a2829 1
      commit;
d2835 2
a2836 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
d2856 1
d2888 1
a2888 1
      commit;
d2894 2
a2895 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2918 1
d2958 1
a2958 1
      commit;
d2964 2
a2965 2
      errpkg.raise_err(v_code, 'ADDRESS_CAN_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d2984 1
d3019 1
a3019 1
      commit;
d3025 2
a3026 2
      errpkg.raise_err(v_code, 'ADDRESS_MEX_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3046 1
d3079 1
a3079 1
      commit;
d3085 2
a3086 2
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3106 1
d3140 1
a3140 1
      commit;
d3146 2
a3147 2
      errpkg.raise_err(v_code, 'ADDRESS_USA_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3164 1
d3192 1
a3192 1
       commit;
d3198 2
a3199 2
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3220 1
d3257 1
a3257 1
      commit;
d3264 1
a3264 1
      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
d3283 1
d3346 1
a3346 1
			when 'BATCH_JOB_CONDITION'            then  v_BATCH_JOB_row.BATCH_JOB_condition         := v_row_value;
d3348 1
a3348 1
			when 'BATCH_JOB_START_TIME'           then  v_batch_job_row.batch_job_start_time        := v_row_value;
d3350 1
a3350 1
			when 'BATCH_JOB_END_TIME'             then  v_batch_job_row.batch_job_end_time          := v_row_value;
d3352 1
a3352 1
			when 'BATCH_JOB_LAST_RUN_TIME'        then  v_BATCH_JOB_row.BATCH_JOB_last_run_time     := v_row_value;
d3367 1
a3367 1
      commit;
d3373 2
a3374 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3393 1
d3477 1
a3477 1
      commit;
d3483 2
a3484 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3502 1
d3585 1
a3585 1
      commit;
d3591 2
a3592 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3641 1
a3641 1
      commit;
d3647 2
a3648 2
      errpkg.raise_err(v_code, 'COST_CENTER_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
d3665 1
d3758 1
a3758 1
      commit;
d3764 2
a3765 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3784 1
d3817 1
a3817 1
      commit;
d3823 2
a3824 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3843 1
d3878 1
a3878 1
      commit;
d3884 2
a3885 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3904 1
d3934 1
a3934 1
      commit;
d3940 2
a3941 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d3961 1
d3988 1
a3988 1
      commit;
d3994 2
a3995 2
      errpkg.raise_err(v_code, 'POLLING_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4015 1
d4105 1
a4105 1
      commit;
d4112 1
a4112 1
      	, 'POLLING_DWLD_RSN_HIST_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
d4132 1
d4158 1
a4158 1
      commit;
d4165 2
a4166 2
      errpkg.raise_err(v_code, 'REAL_ESTATE_I_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d4185 1
d4212 1
a4212 1
      commit;
d4218 2
a4219 2
      errpkg.raise_err(v_code, 'SALES_REP_U_SP' ||
             'in_TABLE_NAME' || in_table_name);
d4238 1
d4265 1
a4265 1
      commit;
d4271 2
a4272 2
      errpkg.raise_err(v_code, 'STATUS_U_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d4291 1
d4317 1
a4317 1
      COMMIT;
d4323 2
a4324 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4343 1
d4372 1
a4372 1
      COMMIT;
d4378 2
a4379 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || IN_TABLE_NAME);
d4398 1
d4427 1
a4427 1
      commit;
d4433 2
a4434 2
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d4453 1
d4480 1
a4480 1
        commit;
d4486 2
a4487 2
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
d4506 1
d4536 1
a4536 1
        commit;
d4542 2
a4543 2
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_U_SP' ||
             'IN_TABLE_NAME' || in_table_name);
d4562 1
d4588 1
a4588 1
      commit;
d4594 2
a4595 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_table_name);
d4614 1
d4642 1
a4642 1
      commit;
d4648 2
a4649 2
      errpkg.raise_err(v_code, 'TYPE_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4669 1
d4759 2
a4760 2
      errpkg.raise_err(v_code, 'ADDRESS_CAN_ROWTYPE_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4779 1
d4868 2
a4869 2
      errpkg.raise_err(v_code, 'ADDRESS_MEX_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4888 1
d4975 2
a4976 2
      errpkg.raise_err(v_code, 'ADDRESS_OTHER_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4994 1
d5101 2
a5102 2
      errpkg.raise_err(v_code, 'ADDRESS_USA_ROWTYPE_SP' ||
        'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
d5120 1
d5197 2
a5198 2
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d5219 1
d5308 1
a5308 1
      	, 'BANK_CARD_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
d5415 3
d5435 1
d5525 2
a5526 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d5544 1
a5544 1
revised : 
d5625 2
a5626 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d5646 1
d5729 2
a5730 2
             errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d5746 1
d5813 2
a5814 2
      errpkg.raise_err(v_code, 'POLLING_ROWTYPE_SP' ||
             'in_TABLE_NAME' || IN_TABLE_NAME);        
d5830 1
d5897 2
a5898 2
      errpkg.raise_err(v_code, 'REAL_ESTATE_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d5985 2
a5986 2
      errpkg.raise_err(v_code, 'SALES_REP_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6002 1
d6069 2
a6070 2
      errpkg.raise_err(v_code, 'STATUS_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6086 1
d6156 2
a6157 2
      errpkg.raise_err(v_code, 'STORE_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6173 1
d6246 2
a6247 2
      errpkg.raise_err(v_code, 'TAXWARE_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6263 1
d6336 2
a6337 2
      errpkg.raise_err(v_code, 'TERMINAL_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6353 1
d6423 3
a6425 4
      v_errm  := substr(SQLERRM,1,200);
      
      errpkg.raise_err(v_code, 'TERRITORY_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6441 1
d6513 2
a6514 2
      errpkg.raise_err(v_code, 'TERRITORY_ASSIGNMENT_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6530 1
d6605 2
a6606 2
      errpkg.raise_err(v_code, 'TERRITORY_SALES_MGR_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6622 1
d6692 2
a6693 2
      errpkg.raise_err(v_code, 'TYPE_ROWTYPE_SP' ||
             'IN_TABLE_NAME'|| in_table_name);
d6749 1
d6822 1
a6822 1
                dbms_output.put_line('ADMINISTRATION Insert executed ');
d6833 1
a6833 1
                 dbms_output.put_line('ADMINISTRATION Update executed ');
d6838 2
a6839 2
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP' ||
                 v_errm ||
d6853 1
a6853 1
                dbms_output.put_line('STORE Insert executed ');
d6863 1
a6863 1
                 dbms_output.put_line('STORE Update executed ');
d6868 2
a6869 2
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP' ||
                 v_errm ||
d6885 1
a6885 1
                dbms_output.put_line('OTHER Insert executed ');
d6897 1
a6897 1
                 dbms_output.put_line('OTHER Update executed ');
d6902 2
a6903 2
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP' ||
                 v_errm ||
d6918 1
a6918 1
                dbms_output.put_line('REAL_ESTATE Insert executed ');
d6929 1
a6929 1
                 dbms_output.put_line('REAL_ESTATE Update executed ');
d6934 2
a6935 2
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP' ||
                 v_errm ||
d6950 1
a6950 1
                dbms_output.put_line('TERRITORY Insert executed ');
d6963 1
a6963 1
                 dbms_output.put_line('TERRITORY Update executed ');
d6968 2
a6969 2
                 errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP' ||
                 v_errm ||
d6979 2
a6980 2
         errpkg.raise_err(v_code, 'CC_ADDTL_TABLES_UI_SP' ||
          v_errm ||
d6982 2
a6983 2
        dbms_output.put_line('in others ');
        dbms_output.put_line(sqlerrm);   
d7004 1
d7074 1
a7074 1
                dbms_output.put_line('ADDRESS CAN Insert executed ');
d7087 1
a7087 1
                 dbms_output.put_line('ADDRESSCAN Update executed ');
d7092 2
a7093 2
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP' ||
                 v_errm ||
d7111 1
a7111 1
                dbms_output.put_line('ADDRESS MEX Insert executed ');
d7124 1
a7124 1
                 dbms_output.put_line('ADDRESS MEX Update executed ');
d7129 2
a7130 2
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP' ||
                 v_errm ||
d7148 1
a7148 1
                dbms_output.put_line('ADDRESS OTHER Insert executed ');
d7161 1
a7161 1
                 dbms_output.put_line('ADDRESS OTHER Update executed ');
d7166 2
a7167 2
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP' ||
                 v_errm ||
d7185 1
a7185 1
                dbms_output.put_line('ADDRESS USA Insert executed ');
d7198 1
a7198 1
                 dbms_output.put_line('ADDRESS USA Update executed ');
d7203 2
a7204 2
                 errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP' ||
                 v_errm ||
d7216 2
a7217 2
         errpkg.raise_err(v_code, 'CC_ADDRESS_TABLES_UI_SP' ||
          v_errm ||
d7219 2
a7220 2
        dbms_output.put_line('in others ');
        dbms_output.put_line(sqlerrm);   
@


1.12
log
@sync
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
@


1.11
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
package body CCN_TABLE_IU_PKG
@


1.10
log
@Fix address type usa remove rpads
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d6642 493
@


1.9
log
@added in EXPIRE_DATA_SP routine into selected "Insert" procedures.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d1346 1
a1346 1

d2523 2
a2524 2


d2886 1
a2886 3


v_address_can_row ADDRESS_CAN%rowtype;
a3026 1

d3073 2
a3074 2


d4774 2
a4775 2
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2   := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3   := v_row_value;
d4780 1
d4879 2
a4880 2
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2   := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3   := v_row_value;
d4882 2
a4883 2
			when 'PROVINCE'          then  v_address_other_row.PROVINCE_CODE         := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE_CODE            := v_row_value;
d4885 1
a4885 1
      when 'COUNTRY'           then  v_address_other_row.COUNTRY_CODE          := v_row_value;
d4968 3
a4970 6

	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ; 
        else          
	        v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                   ; 
d5011 1
@


1.8
log
@Address other db change
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d9 1
a9 1
changed : 
d1144 1
d1157 2
a1158 6

/*

*/
-------------  Business Rules go here 

d1160 2
a1161 5

/* 
*/


d1171 8
a1178 2


d1207 2
a1208 1
revised: 10/02/12 blr  CCN Project....
d1221 2
a1222 3
 


d1224 2
a1225 4


  
 
d1235 8
a1242 2
      

d1271 1
a1282 2


d1284 2
a1285 2


d1287 2
a1288 3

/* 
*/
d1298 8
a1305 3

     
      
d1334 1
d1346 1
a1346 3


v_ADDRESS_USA_row ADDRESS_USA%rowtype;
d1351 1
a1351 5
/*

*/
-------------  Business Rules go here 

d1353 2
a1354 4

/* 
*/

d1364 9
a1372 3

   
      
d1412 2
a1413 3

v_administration_row administration%rowtype;

d1416 1
a1416 5
/*

*/
-------------  Business Rules go here 

d1418 2
a1419 5

/* 
*/
  

d1461 1
d1475 3
a1477 5


v_bank_card_row bank_card%rowtype;


d1479 2
a1480 6

/* 
*/



d1491 9
a1499 2

       
d1863 3
a1865 3

-------------

d1867 2
a1868 2


d1876 3
a1878 3


      
d2020 1
d2033 4
a2036 7



v_MARKETING_row MARKETING%rowtype;



d2038 2
a2039 2


a2046 1

d2048 9
a2056 1

d2097 3
a2099 11



v_OTHER_row OTHER%rowtype;


/*

*/
-------------  Business Rules go here 

d2101 2
a2102 4

/* 
*/

d2154 3
a2156 11



v_PHONE_row PHONE%rowtype;


/*

*/
-------------  Business Rules go here 

d2158 2
a2159 6

/* 
*/



d2209 4
a2212 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2214 2
a2215 1
	
d2363 4
a2366 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2368 2
a2369 1
	
d2414 4
a2417 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2419 2
a2420 1
	
d2454 2
a2455 1
changed: 10/02/2012 TAL - modified to call STATUS_ROWTYPE_SP
d2465 4
a2468 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2470 2
a2471 1
	
d2477 8
a2484 1
                  
d2522 2
a2524 6
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/
d2527 2
a2528 1
	
d2572 4
a2575 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2577 2
a2578 1
	
d2622 4
a2625 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2627 2
a2628 1
	
d2673 4
a2676 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2678 2
a2679 1
	
d2723 4
a2726 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2728 2
a2729 1
	
d2773 4
a2776 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2778 2
a2779 1
	
d2813 2
a2814 1
changed: 10/02/2012 TAL - modified to call TYPE_ROWTYPE_SP
d2824 4
a2827 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d2829 2
a2830 1
	
d2836 8
a2843 1
                  
a2889 1

d2891 1
a2891 5
/*

*/
-------------  Business Rules go here 

d2893 3
a2895 4

/* 
*/

d2897 2
a2898 1

a2954 2
 

d2956 5
a2960 11
/*

*/
-------------  Business Rules go here 

begin

/* 
*/


a2970 1
 
d3016 2
a3017 6

/*

*/
-------------  Business Rules go here 

d3019 2
a3020 4

/* 
*/

d3076 1
a3077 6
v_address_usa_row address_usa%rowtype;

/*

*/
-------------  Business Rules go here 
d3080 2
a3081 3

/* 
*/
a3090 1

a3131 1

d3133 1
a3133 3
/*

*/
d3135 2
a3136 1

a3143 1
     
d3190 2
a3191 6


/*

*/

d3193 2
a3194 1

a3574 6



/*

*/
d3576 2
a3577 1

d3579 2
a3580 4

/* 
*/

d3588 3
a3590 4




d3592 1
a3592 2
      
      
d3643 2
a3644 5
/*

*/
-------------  Business Rules go here 

d3748 3
a3750 7


/*

*/
-------------  Business Rules go here 

d3752 2
a3753 4

/* 
*/

d3805 3
a3807 7


/*

*/
-------------  Business Rules go here 

d3809 2
a3810 3

/* 
*/
d3812 2
d3865 3
a3867 8
v_phone_row PHONE%rowtype;


/*

*/
-------------  Business Rules go here 

d3869 2
a3870 5

/* 
*/


a3878 2


d3918 4
a3921 8
        
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_row_data);

/*
-------------  Business Rules go here 
*/

d3923 2
a3924 1
	
d3990 1
a3990 4
/*

*/

d4087 4
a4090 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4092 2
a4093 1
	
d4139 5
a4143 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4145 2
a4146 1
	
d4191 4
a4194 8
        
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4196 2
a4197 1
	
d4243 4
a4246 8
        
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4248 2
a4249 1
	
d4294 2
a4295 3
 
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d4302 2
a4303 1
	
d4348 4
a4351 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4353 2
a4354 1
	
d4402 4
a4405 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4407 2
a4408 1
	
d4455 4
a4458 7
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4460 2
a4461 1
	
d4509 4
a4512 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4514 2
a4515 1
	
d4560 4
a4563 8

v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);

/*
-------------  Business Rules go here 
*/

d4565 2
a4566 1
	
@


1.7
log
@fix dates in address_can,mex,usa,other rowtype procedures and take out dbms_outputs
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d5014 2
a5015 2
			when 'PROVINCE'          then  v_address_other_row.PROVINCE         := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE            := v_row_value;
d5017 1
a5017 1
      when 'COUNTRY'           then  v_address_other_row.COUNTRY          := v_row_value;
@


1.6
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1569 1
a1569 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1584 1
a1584 1
    dbms_output.put_line('row value is ' || v_row_value);
d1680 1
a1680 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1695 1
a1695 1
    dbms_output.put_line('row value is ' || v_row_value);
d1786 1
a1786 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1801 1
a1801 1
    dbms_output.put_line('row value is ' || v_row_value);
d1937 1
a1937 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1952 1
a1952 1
    dbms_output.put_line('row value is ' || v_row_value);
d2311 1
a2311 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d2326 1
a2326 1
    dbms_output.put_line('row value is ' || v_row_value);
d3345 1
a3345 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3360 1
a3360 1
    dbms_output.put_line('row value is ' || v_row_value);
d3455 1
a3455 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3470 1
a3470 1
    dbms_output.put_line('row value is ' || v_row_value);
d3562 1
a3562 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3577 1
a3577 1
    dbms_output.put_line('row value is ' || v_row_value);
d3732 1
a3732 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3747 1
a3747 1
    dbms_output.put_line('row value is ' || v_row_value);
d4116 1
a4116 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4131 1
a4131 1
    dbms_output.put_line('row value is ' || v_row_value);
d4776 1
a4776 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);  
d4791 1
a4791 1
        dbms_output.put_line('row value is ' || v_row_value);
d4795 11
a4805 11
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
d4884 1
a4884 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4898 1
a4898 1
        dbms_output.put_line('row value is ' || v_row_value);
d4903 10
a4912 10
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS := v_row_value;
d4990 1
a4990 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d5002 1
a5002 1
        dbms_output.put_line('row value is ' || v_row_value);
d5007 12
a5018 12
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE := v_row_value;
      when 'COUNTRY'           then  v_address_other_row.COUNTRY := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS := v_row_value;
d5130 16
a5145 16
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE     :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE     :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE     :=  v_row_value;
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE     :=  v_row_value;
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1     :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2     :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3     :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY     :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE     :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE     :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4     :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY     :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE     :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT     :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT     :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS     :=  v_row_value;
d5221 1
a5221 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d5238 2
a5239 2
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
d5323 1
a5323 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d5340 6
a5345 6
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
d5347 4
a5350 4
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
d5534 1
a5534 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d5554 10
a5563 10
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                      := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type                := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date                := v_row_value;
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date               := v_row_value;
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                     := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                   := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size          := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size            := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting       := v_row_value;
d5743 1
a5743 1
      --dbms_output.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
d5762 5
a5766 5
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code              := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type             := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code               := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number                  := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension               := v_row_value;
@


1.5
log
@changed all_table_col_s_sp() to return column name that identifies table name with
 effective date.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d4717 2
a4718 2


d4776 4
a4779 3
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4781 1
a4781 1
		if (table_fields_rec.data_type <> 'DATE') then
d4783 2
a4784 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
d4786 2
a4787 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
d4789 1
d4888 1
a4888 1
		if (table_fields_rec.data_type <> 'DATE') then
d4890 2
a4891 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
d4893 2
a4894 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
d4896 1
d4994 1
a4994 1
		   if (table_fields_rec.data_type <> 'DATE') then
d4996 2
a4997 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
d4999 3
a5001 4
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
d5099 8
a5106 10
				    if (table_fields_rec.data_type <> 'DATE') then
				
				        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                    ,table_fields_rec.column_size); 
				
				    else
				       
				         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                                              ,8); 
				    end if;
d5225 1
a5225 1
    if (table_fields_rec.data_type <> 'DATE') then
d5227 6
a5232 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
d5234 1
a5234 1
    dbms_output.put_line('row value is ' || v_row_value);
a5318 19
-------------  Business Rules go here                           
--	begin
--dbms_output.put_line('before call to br');														
--		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
--												in_COST_CENTER
--												,in_POLLING_STATUS_CODE);
--												
--											
--dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;
d5327 1
a5327 1
    if (table_fields_rec.data_type <> 'DATE') then
d5329 6
a5334 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
d5336 1
a5336 1
    dbms_output.put_line('row value is ' || v_row_value);
d5423 1
a5423 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d5430 1
a5430 1
		if (table_fields_rec.data_type <> 'DATE') then
d5432 2
a5433 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
d5435 2
a5436 2
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
d5538 1
a5538 1
    if (table_fields_rec.data_type <> 'DATE') then
d5540 6
a5545 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
d5547 1
a5547 1
    dbms_output.put_line('row value is ' || v_row_value);
d5643 1
a5643 2
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d5646 1
a5646 1
    if (table_fields_rec.data_type <> 'DATE') then
d5648 7
a5654 10
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d5744 1
a5744 2
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d5747 1
a5747 1
    if (table_fields_rec.data_type <> 'DATE') then
d5749 7
a5755 10
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d5835 8
a5842 10
		    if (table_fields_rec.data_type <> 'DATE') then
		
		        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
		
		    else
		       
		         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                                              ,8); 
		    end if;
d5918 1
a5918 1
      if (table_fields_rec.data_type <> 'DATE') then
d5920 6
a5925 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
d6001 1
a6001 1
      if (table_fields_rec.data_type <> 'DATE') then
d6003 6
a6008 9
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
 
d6089 1
a6089 1
      if (table_fields_rec.data_type <> 'DATE') then
d6091 6
a6096 9
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
 
d6172 1
a6172 1
      if (table_fields_rec.data_type <> 'DATE') then
d6174 6
a6179 9
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
 
d6258 1
a6258 1
      if (table_fields_rec.data_type <> 'DATE') then
d6260 6
a6265 9
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
 
d6347 1
a6347 1
      if (table_fields_rec.data_type <> 'DATE') then
d6349 6
a6354 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
d6436 1
a6436 1
      if (table_fields_rec.data_type <> 'DATE') then
d6438 6
a6443 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
d6524 1
a6524 1
      if (table_fields_rec.data_type <> 'DATE') then
d6526 6
a6531 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
d6612 1
a6612 1
      if (table_fields_rec.data_type <> 'DATE') then
d6614 6
a6619 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
d6703 1
a6703 1
      if (table_fields_rec.data_type <> 'DATE') then
d6705 6
a6710 8
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                ,table_fields_rec.column_size); 

      else
       
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
      end if;
@


1.4
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d32 3
a34 1
			  SELECT * 
d5323 7
a5329 4
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
d6835 2
a6836 1
end CCN_TABLE_IU_PKG;@


1.3
log
@clean up of code and some calls.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d2199 1
d2206 2
a2207 1
	CostCenter - Cost Center that changed
d2213 2
a2214 1
created : 05/02/2012 tal CCN Project....
d2216 4
a2219 6
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  POLLING.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN  POLLING.POLLING_STATUS_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
a2224 11
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_POLLING_row POLLING%rowtype;
d2227 1
a2227 1
--
d2229 1
a2229 1

a2230 1
-------------  Business Rules go here 
a2232 7

/* 
*/

      for table_fields_rec in table_fields_cur loop

	      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2234 7
a2240 37
		    if (table_fields_rec.data_type <> 'DATE') then
		
		        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
		
		    else
		       
		         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                                              ,8); 
		    end if;
		    
		    --dbms_output.put_line('row value is ' || v_row_value);
		 
		/***  below is a list of all the fields in the table  ***/
		/***  not used		when 'EFFECTIVE_DATE'		  then  v_POLLING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
		/***  not used		when 'EXPIRATION_DATE'		then  v_POLLING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
		
			  	case table_fields_rec.column_name
					when 'COST_CENTER_CODE'		      then  v_polling_row.cost_center_code		     := v_row_value;
					when 'POLLING_STATUS_CODE'	      then  v_polling_row.polling_status_code		 := v_row_value;
					--when 'POLLING_PHONE_PFX'	      then  v_polling_row.polling_phone_pfx		     := v_row_value;
		      		--when 'POLLING_PHONE_NUMBER'	      then  v_polling_row.polling_phone_number	     := v_row_value;
		     		when 'MULTICAST_IND'	          then  v_polling_row.multicast_ind		         := v_row_value;
					when 'TIME_ZONE'		          then  v_polling_row.time_zone			         := v_row_value;
					when 'POLLING_IND'            	  then  v_polling_row.polling_ind			     := v_row_value;
					--when 'POLLING_PRIORITY'		      then  v_polling_row.polling_priority		     := v_row_value;
					--when 'POLLING_SCHEDULE_CODE'	  then  v_polling_row.polling_schedule_code	     := v_row_value;
					when 'NEXT_DOWNLOAD_BLOCK_CODE'   then  v_POLLING_row.NEXT_DOWNLOAD_BLOCK_COUNT	 := v_row_value;
				ELSE
					null;		
				END CASE;	   	
		
	     end if;

    end loop ;
      
      insert into POLLING values v_POLLING_row;
d2248 1
a2248 1
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
a2249 1
        
d2253 1
d2356 1
d2370 7
a2376 9
created : 05/03/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_cost_center          IN  REAL_ESTATE.COST_CENTER_CODE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
a2377 1

d2382 2
a2383 1
cursor table_fields_cur is
a2384 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_real_estate_row REAL_ESTATE%rowtype;
v_row_value     varchar2(1000);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d2386 1
a2386 1

a2387 1
-------------  Business Rules go here 
d2390 8
a2397 43

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/REAL_ESTATE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
  --  dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_REAL_ESTATE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_REAL_ESTATE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into REAL_ESTATE values v_real_estate_row;
d2411 1
d2424 2
a2425 1
created : 05/03/2012 tal CCN Project....
d2427 4
a2430 6
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_gems_emp_id          IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d2436 2
a2437 1
cursor table_fields_cur is
a2438 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_sales_rep_row SALES_REP%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
d2440 1
a2440 1

a2441 1
-------------  Business Rules go here 
d2444 8
a2451 47

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/SALES_REP/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

        else
       
           v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
        end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into SALES_REP values v_sales_rep_row;
a2461 1
	
d2464 1
d2477 2
a2478 1
created : 05/03/2012 tal CCN Project....
d2480 4
a2483 8
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_costctr              IN  STATUS.COST_CENTER_CODE%TYPE,
in_status               IN  STATUS.STATUS_CODE%TYPE,
in_eff_date             IN  STATUS.EFFECTIVE_DATE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d2489 2
a2490 1
cursor table_fields_cur is
a2491 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_status_row STATUS%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
d2493 1
a2493 1

a2494 1
-------------  Business Rules go here 
d2497 8
a2504 43

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STATUS/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into STATUS values v_status_row;
d2507 1
a2507 1
      
d2514 2
a2516 2
	
end STATUS_I_SP;
d2530 7
a2536 9
created : 05/03/2012 tal CCN Project....
updated : 08/24/2012 tal CCN Project....
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  STORE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
a2541 11
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_STORE_row STORE%rowtype;
d2544 1
a2544 1
--
d2546 1
a2546 1

a2547 1
-------------  Business Rules go here 
d2550 8
a2557 53

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STORE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;

			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;

			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			--when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			--when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			--when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into STORE values v_STORE_row;
d2567 3
a2569 3
        
	
end STORE_I_SP;
d2584 6
a2589 7
******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  TAXWARE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
a2594 11
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_TAXWARE_row TAXWARE%rowtype;
d2597 1
a2597 1
--
d2599 1
a2599 1

a2600 1
-------------  Business Rules go here 
d2603 8
a2610 49

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TAXWARE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;

			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TAXWARE values v_TAXWARE_row;
d2620 1
a2620 1
        
d2622 1
d2624 1
a2624 2
PROCEDURE TERMINAL_I_SP 
(
d2637 6
a2642 8
******************************************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2645 5
a2649 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_terminal_row TERMINAL%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);
a2650 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
d2652 1
a2652 1

a2653 1
-------------BUSINESS RULES HERE
d2655 9
a2663 46
BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'date') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
              else
    
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TERMINAL values v_terminal_row;
d2677 1
d2691 1
d2693 4
a2696 5
in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2699 2
a2700 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);
d2702 2
a2703 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
a2704 1
--
d2706 1
a2706 1

a2707 1
-------------BUSINESS RULES HERE
d2709 9
a2717 46
BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      


      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then

	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
		ELSE
			null;	      
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into territory values v_territory_row;
d2728 1
a2729 1
end TERRITORY_I_SP;
d2744 6
a2749 8
******************************************************************************/
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2752 2
a2753 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_assignment_row territory_assignment%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);
d2755 2
a2756 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
a2757 1
--
d2759 1
a2759 1

a2760 1
-------------BUSINESS RULES HERE
d2762 9
a2770 44
BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
               else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
               end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TERRITORY_ASSIGNMENT values v_territory_assignment_row;
d2781 1
a2782 1
end TERRITORY_ASSIGNMENT_I_SP;
d2797 1
d2799 4
a2802 4
 in_slsmgr     IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d2805 2
a2806 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_sales_mgr_row TERRITORY_SALES_MGR%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);
d2808 2
a2809 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
a2810 1
--
d2812 1
a2812 1

a2813 1
-------------BUSINESS RULES HERE
d2815 9
a2823 48
BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_SALES_MGR/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                     ,table_fields_rec.column_size); 
                else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
                end if;
     
--     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name			
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id:= v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name := v_row_value;
				
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TERRITORY_SALES_MGR values v_territory_sales_mgr_row;
a2832 1
        
d2836 1
d2850 6
a2855 7
*****************************************************************************/
 in_COSTCTR IN TYPE.COST_CENTER_CODE%TYPE
,in_TYPE IN TYPE.TYPE_CODE%TYPE
,in_EFF_DATE IN TYPE.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2--sys.xmltype
d2858 2
a2859 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_TABLE_NAME
        order by column_id asc
      	;
--;
v_type_row TYPE%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);
d2861 2
a2862 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
a2863 1
--
d2865 1
a2865 1

a2866 1
-------------BUSINESS RULES HERE
d2868 9
a2876 43
BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TYPE/COST_CENTER_CODE/text()').getStringVal());
--      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
             if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
                else
    
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name || '/text()').getStringVal(),10);
                    
                end if;
     
--     dbms_output.put_line('row value is  ' || v_row_VALUE); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_type_row.cost_center_code := v_row_value;
			when 'TYPE_CODE' then  v_type_row.type_code := v_row_value;
			when 'EFFECTIVE_DATE' then  v_type_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE' then  v_type_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into TYPE values v_type_row;
a2886 1

d4003 2
a4004 1
created : 05/02/2012 tal CCN Project....
d4006 4
a4009 7
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
in_COST_CENTER          IN  POLLING.COST_CENTER_CODE%TYPE,
in_polling_status_code  in  polling.polling_status_code%type,

in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2--sys.xmltype
d4014 3
a4017 14
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_POLLING_row POLLING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d4019 1
a4019 1

a4020 1
-------------  Business Rules go here 
d4023 10
a4032 50

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/POLLING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		  then  v_POLLING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_POLLING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'		        then  v_polling_row.cost_center_code		       := v_row_value;
			when 'POLLING_STATUS_CODE'	      then  v_polling_row.polling_status_code		     := v_row_value;			
     	when 'MULTICAST_IND'	          	then  v_polling_row.multicast_ind		           := v_row_value;
			when 'TIME_ZONE'		              then  v_polling_row.time_zone			             := v_row_value;
			when 'POLLING_IND'            		then  v_polling_row.polling_ind			           := v_row_value;			
			when 'NEXT_DOWNLOAD_BLOCK_COUNT' 	then  v_polling_row.next_download_block_count	 := v_row_value; 
      
		ELSE
			null;		
		END CASE;	   	

         dbms_output.put_line('Block Count Value Is ' || v_polling_row.next_download_block_count);

      else
        null ;
      end if;

      end loop ;
      
      update polling set row = v_polling_row where cost_center_code     = in_cost_center
                                              and  polling_status_code  = in_polling_status_code ;
d4039 2
a4040 2
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
a4041 1
        
d4045 1
d4170 1
a4170 1
	This procedure is intended to update changes to REAL_ESTATE records
d4178 7
a4184 9
created : 07/11/2012 blr CCN Project....
updated : 08/24/2012 tal CCN Project....
*****************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_cost_center          IN  REAL_ESTATE.COST_CENTER_CODE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
a4185 1

d4190 2
a4191 1
cursor table_fields_cur is
a4192 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_real_estate_row REAL_ESTATE%rowtype;
v_row_value     varchar2(1000);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d4194 1
a4194 1

a4195 1
-------------  Business Rules go here 
d4198 9
a4206 17

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/REAL_ESTATE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
a4207 27
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_REAL_ESTATE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_REAL_ESTATE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'       then  v_real_estate_row.cost_center_code     := v_row_value;
			when 'CATEGORY'               then  v_real_estate_row.CATEGORY             := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
          
      UPDATE real_estate set row = v_real_estate_row where cost_center_code = in_cost_center;
      
d4218 2
a4219 1
end real_estate_u_sp;
d4233 2
a4234 1
created : 07/11/2012 blr CCN Project....
d4236 4
a4239 6
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_gems_emp_id          IN  SALES_REP.GEMS_EMPLOYEE_ID%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d4245 2
a4246 1
cursor table_fields_cur is
a4247 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_sales_rep_row SALES_REP%rowtype;
v_row_value     varchar2(500);
v_row_data      sys.xmltype := xmltype(in_Row_data);
--
d4249 1
a4249 1

a4250 1
-------------  Business Rules go here 
d4253 25
a4277 62

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/SALES_REP/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

        else
       
           v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
        end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'GEMS_EMPLOYEE_ID'           then  v_SALES_REP_row.GEMS_EMPLOYEE_ID         := v_row_value;
			when 'SOCIAL_SECURITY_NUMBER'     then  v_SALES_REP_row.SOCIAL_SECURITY_NUMBER   := v_row_value;
			when 'EFFECTIVE_DATE'		          then  v_SALES_REP_row.EFFECTIVE_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'		        then  v_SALES_REP_row.EXPIRATION_DATE		 := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'                 then  v_sales_rep_row.FIRST_NAME               := v_row_value;
			when 'MIDDLE_INITIAL'             then  v_sales_rep_row.MIDDLE_INITIAL           := v_row_value;
			when 'LAST_NAME'                  then  v_sales_rep_row.LAST_NAME                := v_row_value;
			when 'EMPLOYEE_CODE'              then  v_sales_rep_row.EMPLOYEE_CODE            := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE sales_rep set row = v_sales_rep_row where gems_employee_id = in_gems_emp_id;
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'SALES_REP_I_SP' ||
             'in_TABLE_NAME' || in_table_name);
        
	
end SALES_REP_U_SP;

PROCEDURE STATUS_U_SP (
/*******************************************************************************
	STATUS_U_SP
d4287 2
a4288 1
created : 07/11/2012 tal CCN Project....
d4290 4
a4293 8
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_costctr              IN  STATUS.COST_CENTER_CODE%TYPE,
in_status               IN  STATUS.STATUS_CODE%TYPE,
in_eff_date             IN  STATUS.EFFECTIVE_DATE%TYPE,
in_table_name           IN  VARCHAR2,
in_row_date             IN  DATE,
in_row_data             IN  varchar2 --sys.xmltype
d4298 1
a4298 12

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_status_row STATUS%rowtype;
d4301 1
a4301 1
--
d4303 1
a4303 1

a4304 1
-------------  Business Rules go here 
d4307 11
a4317 47

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STATUS/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_status_row.COST_CENTER_CODE        := v_row_value;
			when 'STATUS_CODE'      then  v_status_row.STATUS_CODE             := v_row_value;
			when 'EFFECTIVE_DATE'		then  v_status_row.EFFECTIVE_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'	then  v_status_row.EXPIRATION_DATE         := TO_DATE(v_row_value,'MM-DD-YYYY');

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      
      UPDATE status set row = v_status_row
        where cost_center_code = in_costctr 
          and STATUS_CODE = in_status              
          and EFFECTIVE_DATE = in_eff_date;
d4324 1
a4324 1
      errpkg.raise_err(v_code, 'STATUS_I_SP' ||
d4326 3
a4328 3
        
	
end STATUS_U_SP;
d4342 7
a4348 9
created : 07/11/2012 blr CCN Project....
updated : 08/24/2012 tal CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  STORE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
d4353 3
a4356 14
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_STORE_row STORE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d4358 1
a4358 1

a4359 1
-------------  Business Rules go here 
d4362 9
a4370 53

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/STORE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then

            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_STORE_row.COST_CENTER_CODE         := v_row_value;
			when 'CATEGORY'                   then  v_STORE_row.CATEGORY                 := v_row_value;

			when 'PERP_INV_START_DATE'        then  v_STORE_row.PERP_INV_START_DATE      := TO_DATE(v_row_value,'MM-DD-YYYY');

			when 'CLASSIFICATION_CODE'        then  v_STORE_row.CLASSIFICATION_CODE      := v_row_value;
			when 'INVENTORY_INDICATOR'        then  v_STORE_row.INVENTORY_INDICATOR      := v_row_value;

			when 'RURAL_METRO_ZONE_CODE'      then  v_STORE_row.RURAL_METRO_ZONE_CODE    := v_row_value;
			--when 'BANKING_TYPE'               then  v_STORE_row.BANKING_TYPE             := v_row_value;
			--when 'DEPOSIT_BAG_REORDER'        then  v_STORE_row.DEPOSIT_BAG_REORDER      := v_row_value;
			---when 'DEPOSIT_TICKET_REORDER'     then  v_STORE_row.DEPOSIT_TICKET_REORDER   := v_row_value;
			when 'SELLING_STORE_FLAG'         then  v_STORE_row.SELLING_STORE_FLAG       := v_row_value;

		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE STORE set row = v_STORE_row where cost_center_code = in_COST_CENTER;
d4372 1
a4372 1
      commit;
d4381 2
a4382 2
	
end STORE_U_SP;
d4397 6
a4402 7
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

in_COST_CENTER          IN  TAXWARE.COST_CENTER_CODE%TYPE,
in_TABLE_NAME           IN  VARCHAR2,
in_ROW_DATE             IN  DATE,
in_Row_data             IN  varchar2 --sys.xmltype
d4407 1
a4407 12

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_TAXWARE_row TAXWARE%rowtype;
d4410 1
a4410 1
--
d4412 1
a4412 1

a4413 1
-------------  Business Rules go here 
d4416 20
a4436 2
/* 
*/
d4438 5
a4442 1
      for table_fields_rec in table_fields_cur loop
d4444 5
a4448 2
      --dbms_output.put_line(in_Row_data.extract('/TAXWARE/GEMS_EMPLOYEE_ID_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4450 11
a4460 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4462 2
a4463 1
         if (table_fields_rec.data_type <> 'DATE') then
d4465 3
a4467 2
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
d4469 15
a4483 5
         else
       
            v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
         end if;
d4485 9
a4493 3
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
d4495 3
a4497 5
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'           then  v_TAXWARE_row.COST_CENTER_CODE         := v_row_value;
			when 'TWJ_STATE'                  then  v_TAXWARE_row.TWJ_STATE                := v_row_value;
			when 'TWJ_ZIP'                    then  v_TAXWARE_row.TWJ_ZIP                  := v_row_value;
			when 'TWJ_GEO'                    then  v_TAXWARE_row.TWJ_GEO                  := v_row_value;
d4499 1
a4499 1
			when 'TWJ_MAINTENANCE_DATE'       then  v_TAXWARE_row.TWJ_MAINTENANCE_DATE     := TO_DATE(v_row_value,'MM-DD-YYYY');
d4501 5
a4505 2
			when 'TWJ_COUNTRY'                then  v_TAXWARE_row.TWJ_COUNTRY              := v_row_value;
			when 'TWJ_COMPANY'                then  v_TAXWARE_row.TWJ_COMPANY              := v_row_value;
d4507 11
a4517 3
		ELSE
			null;		
		END CASE;	   	
d4519 2
d4522 3
a4524 3
      else
        null ;
      end if;
d4526 13
a4538 1
      end loop ;
d4540 1
a4540 5
      UPDATE TAXWARE set row = v_TAXWARE_row where cost_center_code = in_COST_CENTER;
           
      commit;
      
  EXCEPTION
d4544 2
a4545 2
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
d4547 2
a4548 1
	end TAXWARE_U_SP;
d4550 1
a4550 2
PROCEDURE TERMINAL_U_SP 
(
d4552 1
a4552 1
	TERMINAL_U_SP
d4554 1
a4554 1
	This procedure is intended to update changed terminal records
d4556 1
a4556 1
	TERMINAL - Cost Center that changed
d4563 6
a4568 8
******************************************************************************/
 in_costctr    IN TERMINAL.COST_CENTER_CODE%TYPE
,in_poll_stat  IN TERMINAL.POLLING_STATUS_CODE%TYPE
,in_term_no    IN TERMINAL.TERMINAL_NUMBER%TYPE
,in_eff_date   IN TERMINAL.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d4571 5
a4575 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_terminal_row TERMINAL%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);
a4576 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
d4578 1
a4578 1

a4579 1
-------------BUSINESS RULES HERE
d4581 15
a4595 44
BEGIN

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERMINAL/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

               if (table_fields_rec.data_type <> 'DATE') then
                
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
              else
    
                 v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
              end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_terminal_row.cost_center_code := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_terminal_row.polling_status_code := v_row_value;
			when 'TERMINAL_NUMBER'      then  v_terminal_row.terminal_number := v_row_value;
			when 'EFFECTIVE_DATE'       then  v_terminal_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_terminal_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_DATE'   then  v_terminal_row.pos_last_tran_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_LAST_TRAN_NUMBER' then  v_terminal_row.pos_last_tran_number := v_row_value;
			
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
a4596 7
      UPDATE TERMINAL set row = v_terminal_row
        where cost_center_code = in_costctr
          and POLLING_STATUS_CODE = in_poll_stat
          and TERMINAL_NUMBER = in_term_no
          and EFFECTIVE_DATE = in_eff_date;
      commit;
    
d4600 2
a4601 2
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERMINAL_I_SP' ||
d4604 1
a4605 1
end TERMINAL_U_SP;
d4607 3
a4609 3
PROCEDURE TERRITORY_U_SP (
/*******************************************************************************
	TERRITORY_U_SP
d4611 1
a4611 1
	This procedure is intended to update changed TERRITORY records
d4613 1
a4613 1
	TERRITORY - Cost Center that changed
d4620 1
d4622 4
a4625 6

in_slsmgr IN TERRITORY.TERRITORY_SLS_MGR_CODE%TYPE
,in_territory IN TERRITORY.COST_CENTER_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d4628 2
a4629 12
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_row TERRITORY%rowtype;
v_row_value 	varchar2(1000);
v_row_data     sys.xmltype  := xmltype(in_row_data);
d4631 2
a4632 3
V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 
a4633 1
--
d4635 1
a4635 1

a4636 1
-------------BUSINESS RULES HERE
d4638 22
a4659 1
BEGIN
d4661 3
a4663 2
/* 
*/
d4665 1
a4665 1
      for table_fields_rec in table_fields_cur loop
d4667 5
a4671 3
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
d4673 11
d4685 2
a4686 3
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then                
                
          if (table_fields_rec.data_type <> 'DATE') then
d4688 3
a4690 21
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
          else          
	           v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
          end if;
                                            
                                    
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE' then  v_territory_row.TERRITORY_SLS_MGR_CODE := v_row_value;
      when 'COST_CENTER_CODE' then  v_territory_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY' then  v_territory_row.CATEGORY := v_row_value;
			when 'LEASE_CAR_INDICATOR' then  v_territory_row.LEASE_CAR_INDICATOR := v_row_value;
			when 'TERRITORY_TYPE_BUSN_CODE' then  v_territory_row.TERRITORY_TYPE_BUSN_CODE := v_row_value;
			when 'HOME_STORE' then  v_territory_row.HOME_STORE := v_row_value;
			
		ELSE
			null;	      
		END CASE;	   	
d4692 14
a4705 6

      else
        null ;
      end if;

      end loop ;
d4707 1
a4707 7
      UPDATE territory set row = v_territory_row 
        where TERRITORY_SLS_MGR_CODE =  in_slsmgr       
          and COST_CENTER_CODE  =  in_territory;
         
        commit;
      
       EXCEPTION
d4710 5
a4714 4
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'TERRITORY_I_SP' ||
             'in_table_name' || in_table_name);
        
a4715 1
end TERRITORY_U_SP;
d4717 3
a4719 3
PROCEDURE TERRITORY_ASSIGNMENT_U_SP (
/******************************************************************************
	TERRITORY_ASSIGNMENT_U_SP
d4721 1
a4721 1
	This procedure is intended to update changed territory_assignment records
d4723 3
a4725 1
	TERRITORY_ASSIGNMENT - Cost Center that changed
d4731 9
a4739 9
created : 07/11/2012 BLR CCN Project....
******************************************************************************/
 in_slsmgr     IN TERRITORY_ASSIGNMENT.TERRITORY_SLS_MGR_CODE%TYPE
,in_costctr    IN TERRITORY_ASSIGNMENT.COST_CENTER_CODE%TYPE
,in_gems_id    IN TERRITORY_ASSIGNMENT.GEMS_EMPLOYEE_ID%TYPE
,in_eff_date   IN TERRITORY_ASSIGNMENT.EFFECTIVE_DATE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
d4743 6
a4748 1
 cursor table_fields_cur is
a4755 7
--;
v_territory_assignment_row territory_assignment%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
d4757 3
a4759 1

d4764 1
a4764 1
-------------BUSINESS RULES HERE
d4766 1
a4766 1
BEGIN
d4773 1
a4773 1
      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_ASSIGNMENT/COST_CENTER_CODE/text()').getStringVal());
a4774 2
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4776 3
a4778 310
               if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
               else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
               end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_assignment_row.territory_sls_mgr_code := v_row_value;
			when 'COST_CENTER_CODE'         then  v_territory_assignment_row.cost_center_code := v_row_value;
			when 'CATEGORY'                 then  v_territory_assignment_row.category := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_assignment_row.gems_employee_id := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_assignment_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_assignment_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
						
		  ELSE
			    null;		
		  END CASE;	   	


      else
        null ;
      end if;

      end loop ;
    
    
      UPDATE TERRITORY_ASSIGNMENT set row = v_territory_assignment_row 
        where TERRITORY_SLS_MGR_CODE = in_slsmgr
          and COST_CENTER_CODE = in_costctr
          and GEMS_EMPLOYEE_ID = in_gems_id
          and EFFECTIVE_DATE   = in_eff_date;
        commit;
        
   dbms_output.put_line('row value is  ' || v_row_value); 
      
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'IN_TABLE_NAME' || in_table_name);
        

end TERRITORY_ASSIGNMENT_U_SP;

PROCEDURE TERRITORY_SALES_MGR_U_SP (
/*****************************************************************************
	TERRITORY_SALES_MGR_U_SP

	This procedure is intended to update changed territory_sales_mgr records

	TERRITORY_SALES_MGR - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
******************************************************************************/

 in_slsmgr     IN TERRITORY_SALES_MGR.TERRITORY_SLS_MGR_CODE%TYPE
,in_table_name IN VARCHAR2
,in_row_date   IN DATE
,in_row_data   IN varchar2 --sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_territory_sales_mgr_row TERRITORY_SALES_MGR%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--

BEGIN


      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TERRITORY_SALES_MGR/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
            if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                     ,table_fields_rec.column_size); 
                else
    
                  v_row_value := rpad(v_row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_value); 
      
	  	CASE table_fields_rec.column_name			
			when 'TERRITORY_SLS_MGR_CODE'   then  v_territory_sales_mgr_row.territory_sls_mgr_code := v_row_value;
			when 'GEMS_EMPLOYEE_ID'         then  v_territory_sales_mgr_row.gems_employee_id:= v_row_value;
			when 'TERRITORY_SLS_MGR_DAD'    then  v_territory_sales_mgr_row.territory_sls_mgr_dad := v_row_value;
			when 'TERRITORY_SALES_MGR_TYPE' then  v_territory_sales_mgr_row.territory_sls_mgr_type := v_row_value;
			when 'EFFECTIVE_DATE'           then  v_territory_sales_mgr_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'          then  v_territory_sales_mgr_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'FIRST_NAME'               then  v_territory_sales_mgr_row.first_name := v_row_value;
			when 'MIDDLE_INITIAL'           then  v_territory_sales_mgr_row.middle_initial := v_row_value;
			when 'LAST_NAME'                then  v_territory_sales_mgr_row.last_name := v_row_value;
				
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
        
      UPDATE TERRITORY_SALES_MGR set row = v_territory_sales_mgr_row where TERRITORY_SLS_MGR_CODE = in_slsmgr;
      commit;
   dbms_output.put_line('row value is  ' || v_row_value);    
       EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_table_name);
        

end TERRITORY_SALES_MGR_U_SP;
 
PROCEDURE TYPE_U_SP (
/*****************************************************************************
	TYPE_U_SP

	This procedure is intended to update changed TYPE records

	TYPE - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 07/11/2012 BLR CCN Project....
updated : 08/24/2012 tal CCN Project....
******************************************************************************/

 in_COSTCTR IN TYPE.COST_CENTER_CODE%TYPE
,in_TYPE IN TYPE.TYPE_CODE%TYPE
,in_EFF_DATE IN TYPE.EFFECTIVE_DATE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2--sys.xmltype
)
 is 
 cursor table_fields_cur is
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_TABLE_NAME
        order by column_id asc
      	;
--;
v_type_row TYPE%rowtype;
v_row_value 	varchar2(500);
v_row_data     sys.xmltype  := xmltype(in_row_data);

V_CODE     NUMBER;
V_ERRM     VARCHAR2(200);
 

--

BEGIN


      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/TYPE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
      
             if (v_row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

                if (table_fields_rec.data_type <> 'DATE') then
                
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
                else
    
                   v_row_value := rpad(v_row_data.extract('/'|| in_TABLE_NAME|| '/' || table_fields_rec.column_name || '/text()').getStringVal(),10);
                    
                end if;
     
     dbms_output.put_line('row value is  ' || v_row_VALUE); 
      
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_type_row.cost_center_code := v_row_value;
			when 'TYPE_CODE' then  v_type_row.type_code := v_row_value;
			when 'EFFECTIVE_DATE' then  v_type_row.effective_date := to_date(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE' then  v_type_row.expiration_date := to_date(v_row_value,'MM-DD-YYYY');
			
			
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      UPDATE TYPE set row = v_type_row 
        where cost_center_code = in_costctr
          and type_code = in_TYPE
          and effective_date = in_EFF_DATE;
      commit;
      
    EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'All_TABLE_COL_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        

end TYPE_U_SP;

procedure ADDRESS_CAN_ROWTYPE_SP ( 
/*******************************************************************************
	 ADDRESS_CAN_ROWTYPE_SP

	This procedure is intended to Insert/Update  Canadian address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_cost_center     in  address_can.cost_center_code%type 
,in_address_type    in  address_can.address_type%type 
,in_effective_date  in  address_can.effective_date%type
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_address_type  out address_can%rowtype
)

 is 
 
 v_code number;
 v_errm varchar2(500);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
 
v_address_can_row   ADDRESS_CAN%rowtype;
v_row_value 	   varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
-------------  Business Rules go here 

begin

/* 
*/

      for table_fields_rec in table_fields_cur loop

      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		if (table_fields_rec.data_type <> 'DATE') then
d5157 1087
a6243 1
  
d6247 6
a6252 5
      errpkg.raise_err(v_code, 'ADDRESS_USA_ROWTYPE_SP' ||
        'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_ROWTYPE_SP;
d6254 3
a6256 3
procedure ADMINISTRATION_ROWTYPE_SP (
/*******************************************************************************
	ADMINISTRATION_ROWTYPE_SP
d6258 1
a6258 1
	This procedure is intended to Insert new ADMINISTRATION records
d6260 3
a6262 5
	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
d6264 6
a6269 7
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE 
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_administration_type  out ADMINISTRATION%rowtype
a6270 1
 
a6273 1
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
d6284 5
a6288 4
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
--
d6290 1
a6290 1

a6291 1
-------------  Business Rules go here 
a6294 3
/* 
*/

a6296 3
      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d6299 1
a6299 1
    if (table_fields_rec.data_type <> 'DATE') then
d6302 1
a6302 1
                    ,table_fields_rec.column_size); 
d6304 1
a6304 1
    else
d6306 1
a6306 1
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d6308 1
a6308 3
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d6310 1
d6312 11
a6322 5
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
d6325 1
a6325 1
		END CASE;	   	
d6327 3
a6329 3
  else
     null ;
  end if;
d6331 1
a6331 1
  end loop ;
d6333 1
a6333 1
    out_administration_type :=  v_administration_row;
d6339 6
a6344 9
      errpkg.raise_err(v_code, 'ADMINISTRATION_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end ADMINISTRATION_ROWTYPE_SP;				 
				
procedure BANK_CARD_ROWTYPE_SP (
/*******************************************************************************
	BANK_CARD_ROWTYPE_SP
d6346 3
a6348 1
	This procedure is intended to Insert new BANK CARD records
d6350 1
a6350 8
	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
d6352 3
a6354 6
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE 
,in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type 
,in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE 
,in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type
d6356 6
a6361 4
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
,out_bank_card_row  out  bank_card%rowtype
a6365 1
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
d6376 5
a6380 4
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
d6382 1
a6382 1

a6386 21
/* 
*/


-------------  Business Rules go here                           
--	begin
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

a6388 3
      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d6391 1
a6391 1
    if (table_fields_rec.data_type <> 'DATE') then
d6394 1
a6394 1
                    ,table_fields_rec.column_size); 
d6396 1
a6396 1
    else
d6398 1
a6398 1
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
d6400 1
a6400 3
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d6402 14
a6416 15
	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
	  ELSE
			null;		
		END CASE;	   	
d6418 3
a6420 3
  else
     null ;
  end if;
d6422 3
a6424 3
 end loop ;
       
       out_bank_card_row := v_bank_card_row;
d6430 10
a6439 10
      errpkg.raise_err(v_code
      	, 'BANK_CARD_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
      	, v_errm);
        
	
end BANK_CARD_ROWTYPE_SP;				 
				
PROCEDURE COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
	COST_CENTER_ROWTYPE_SP
d6441 1
a6441 1
	This procedure is intended to insert new cost center records
d6443 3
a6445 5
	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
d6447 6
a6452 8
created : 09/21/2012 blr CCN Project....
revised:
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN VARCHAR2--sys.xmltype
,out_cost_center_type  out cost_center%rowtype
d6455 3
d6467 5
a6471 5
--;
v_cost_center_row cost_center%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
d6473 1
a6473 1

a6474 1
-------------
a6477 3
/* 
*/

a6479 3
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d6482 1
a6482 2
--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 
d6484 2
a6485 1
		if (table_fields_rec.data_type <> 'DATE') then
d6487 5
a6491 6
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
d6493 10
a6502 24

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
d6505 1
a6505 1
		END CASE;	   	
d6514 11
a6524 1
    out_cost_center_type :=  v_cost_center_row;
a6525 1
end COST_CENTER_ROWTYPE_SP;
d6527 3
a6529 12
PROCEDURE MARKETING_ROWTYPE_SP (
/*******************************************************************************
	MARKETING_ROWTYPE_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
d6531 1
a6531 5
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center          in  marketing.cost_center_code%type 
,in_marketing_type       in  marketing.marketing_type%type 
d6533 3
a6535 4
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
,out_marketing_type  out marketing%rowtype
d6537 6
d6557 2
a6558 2
--;
v_MARKETING_row MARKETING%rowtype;
d6561 1
a6561 1
--
d6563 1
a6563 1

a6564 1
-------------  Business Rules go here 
a6567 3
/* 
*/

a6569 3
      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d6572 1
a6572 1
    if (table_fields_rec.data_type <> 'DATE') then
d6575 1
a6575 1
                    ,table_fields_rec.column_size); 
d6577 1
a6577 1
    else
d6579 3
a6581 5
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d6584 1
a6584 3
/***  not used		when 'EFFECTIVE_DATE'		then  v_MARKETING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_MARKETING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

d6586 7
a6592 10
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                      := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type                := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date                := v_row_value;
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date               := v_row_value;
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                     := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                   := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size          := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size            := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting       := v_row_value;
d6595 1
a6595 1
		END CASE;	   	
d6604 1
a6604 1
     out_marketing_type  :=  v_marketing_row;
d6610 5
a6614 5
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end MARKETING_ROWTYPE_SP;
a6615 3
PROCEDURE OTHER_ROWTYPE_SP (
/*******************************************************************************
	OTHER_ROWTYPE_SP
d6617 3
a6619 1
	This procedure is intended to insert new OTHER records
d6621 1
a6621 10
	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
d6623 3
a6625 2
 in_COST_CENTER          IN  OTHER.COST_CENTER_CODE%TYPE 
,out_other_type              OUT OTHER%ROWTYPE
d6627 6
a6632 4
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
 
d6647 2
a6648 2
--;
v_OTHER_row OTHER%rowtype;
d6651 1
a6651 1
--
d6653 1
a6653 1

a6654 1
-------------  Business Rules go here 
a6657 3
/* 
*/

a6659 3
      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d6662 1
a6662 1
    if (table_fields_rec.data_type <> 'DATE') then
d6665 1
a6665 1
                    ,table_fields_rec.column_size); 
d6667 1
a6667 1
    else
d6669 3
a6671 5
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
a6673 6
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
d6675 11
d6688 1
a6688 1
		END CASE;	   	
d6697 1
a6697 1
     out_other_type  :=  v_other_row; 
d6703 5
a6707 9
      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end OTHER_ROWTYPE_SP;				 
				
PROCEDURE PHONE_ROWTYPE_SP (
/*******************************************************************************
	PHONE_ROWTYPE_SP
a6708 1
	This procedure is intended to insert new PHONE records
d6710 3
a6712 7
	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
d6714 1
a6714 3
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
d6716 3
a6718 3
 in_COST_CENTER          IN  PHONE.COST_CENTER_CODE%TYPE 
,in_phone_number_type    in  phone.phone_number_type%type 
,out_phone_type              OUT PHONE%ROWTYPE 
d6720 6
a6725 3
,in_TABLE_NAME           IN  VARCHAR2 
,in_ROW_DATE             IN  DATE 
,in_Row_data             IN  varchar2--sys.xmltype
d6740 2
a6741 2
--;
v_PHONE_row PHONE%rowtype;
d6744 1
a6744 1
--
d6746 1
a6746 1

a6747 1
-------------  Business Rules go here 
a6750 3
/* 
*/

a6752 3
      --dbms_output.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

d6755 1
a6755 1
    if (table_fields_rec.data_type <> 'DATE') then
d6758 1
a6758 1
                    ,table_fields_rec.column_size); 
d6760 1
a6760 1
    else
d6762 3
a6764 5
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d6767 1
a6767 3
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

d6769 5
a6773 5
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code              := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type             := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code               := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number                  := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension               := v_row_value;
d6776 1
a6776 1
		END CASE;	   	
d6784 3
a6786 3
    
    out_phone_type  :=    v_PHONE_row;
           
d6791 5
a6795 8
             errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
	
end PHONE_ROWTYPE_SP;				 
				


d6830 1
a6830 2
end CCN_TABLE_IU_PKG;

@


1.2
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a1164 1
begin
d1167 8
a1174 16
/*******************************************************************************
	 ADDRESS_CAN_ROWTYPE_SP

	This procedure is intended to call new Canadian address records
        xml file - the data being inserted

created : 10/01/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER    
,in_ADDRESS_TYPE  
,in_EFFECTIVE_DATE 
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data   
,v_address_can_row
); 
a1176 3

end;

a1219 4
/*

*/
-------------  Business Rules go here 
a1222 2
/* 
*/
a1224 1
 BEGIN
d1227 8
a1234 24
 /******************************************************************************
	ADDRESS_MEX_ROWTYPE_SP

	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

 created : 09/21/2012 blr CCN Project....
 *******************************************************************************/
 
  in_COST_CENTER
 ,in_ADDRESS_TYPE    
 ,in_EFFECTIVE_DATE  
 ,in_TABLE_NAME  
 ,in_ROW_DATE    
 ,in_Row_data    
 ,v_address_mex_row 
 );
a1235 1
 end;    
a1276 1
--cursor table_fields_cur is
d1278 1
a1278 14
--    	SELECT column_name
--          ,data_length column_size
--          ,data_type
--      	FROM all_tab_columns
--      	WHERE TABLE_NAME = in_table_name
--        order by column_id asc
--      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;

--v_row_value 	varchar2(500);
--v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*
a1279 2
*/
-------------  Business Rules go here 
a1284 1
begin
d1286 8
a1293 2
/*******************************************************************************
	ADDRESS_OTHER_ROWTYPE_SP
a1294 22
	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER    
,in_ADDRESS_TYPE    
,in_EFFECTIVE_DATE  
,in_TABLE_NAME  
,in_ROW_DATE   
,in_Row_data    
,v_address_other_row
); 

end;
a1336 10
--cursor table_fields_cur is

--    	SELECT column_name
--          ,data_length column_size
--          ,data_type
--      	FROM all_tab_columns
--      	WHERE TABLE_NAME = in_table_name
--        order by column_id asc
--      	;
--;
d1352 1
a1352 1
begin
d1354 8
a1361 14
/*******************************************************************************
	ADDRESS_USA_ROWTYPE_SP

	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/
a1362 10
 in_COST_CENTER           
,in_ADDRESS_TYPE          
,in_EFFECTIVE_DATE        
,in_TABLE_NAME            
,in_ROW_DATE             
,in_Row_data             
,v_ADDRESS_USA_row        
);

end;
a1404 11
--cursor table_fields_cur is

--    	SELECT column_name
--          ,data_length column_size
--          ,data_type
--      	FROM all_tab_columns
--      	WHERE TABLE_NAME = in_table_name
--        order by column_id asc
--      	;
--;

d1419 1
a1419 1
  begin
d1421 6
a1426 10
/*******************************************************************************
	ADMINISTRATION_ROWTYPE_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
a1427 10
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER     
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data    
,v_administration_row
);

  end;    
a1474 10
--cursor table_fields_cur is

--    	SELECT column_name
--          ,data_length column_size
--          ,data_type
--      	FROM all_tab_columns
--      	WHERE TABLE_NAME = in_table_name
--        order by column_id asc
--      	;
--;
a1477 5
--v_row_value 	varchar2(500);
--
/*

*/
a1484 16
-------------  Business Rules go here                           
--	begin
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;
a1485 1
begin
d1487 9
a1495 13
/*******************************************************************************
	BANK_CARD_ROWTYPE_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
a1496 12
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER          
,in_POLLING_STATUS_CODE   
,in_MERCHANT_ID           
,in_EFFECTIVE_DATE 
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data   
,v_bank_card_row 
);
end;
a1858 10
--cursor table_fields_cur is

--    	SELECT column_name
--          ,data_length column_size
--          ,data_type
--      	FROM all_tab_columns
--      	WHERE TABLE_NAME = in_table_name
--        order by column_id asc
--      	;
--;
a1861 7

--v_row_value 	varchar2(500);
--v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
/*

*/
a1865 8
/* 
*/
 begin
 COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
	COST_CENTER_ROWTYPE_SP

	This procedure is intended to insert new cost center records
d1867 7
a1873 5
	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
a1874 9
created : 09/21/2012 blr CCN Project....
revised:
*******************************************************************************/
 in_COST_CENTER  
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data    
,v_cost_center_row  
);
a1875 1
 end;
a2035 4
/*

*/
-------------  Business Rules go here 
a2038 2
/* 
*/
a2039 1
     begin
d2041 6
a2046 22
/*******************************************************************************
	MARKETING_ROWTYPE_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised :  
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center          
,in_marketing_type  
,in_TABLE_NAME           
,in_ROW_DATE              
,in_Row_data              
,v_MARKETING_row   
d2048 1
a2048 1
);
a2049 2
    end;
      
a2105 2
  begin
  
d2107 6
a2112 22
/*******************************************************************************
	OTHER_ROWTYPE_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 10/03/2012 blr CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          
,v_OTHER_row
,in_TABLE_NAME           
,in_ROW_DATE            
,in_Row_data             
 );
a2113 2
  end;    
      
d2173 1
a2173 1
begin
d2176 7
a2182 4
/*******************************************************************************
	PHONE_ROWTYPE_SP

	This procedure is intended to insert new PHONE records
a2183 21
	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER           
,in_phone_number_type     
,v_PHONE_row              
,in_TABLE_NAME          
,in_ROW_DATE             
,in_Row_data              
); 

end;
a2353 13
-------------  Business Rules go here                           
--	begin

--	exception
	
--		when others then
--    dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'POLLING_DWLD_RSN_HIST_I_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;
d2474 1
a2474 1
    dbms_output.put_line('row value is ' || v_row_value);
d3309 1
a3309 1
     dbms_output.put_line('row value is  ' || v_row_value); 
d3401 1
a3401 1
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3415 1
a3415 1
     dbms_output.put_line('row value is  ' || v_row_VALUE); 
d3495 1
d3497 8
a3504 18
/*******************************************************************************
	 ADDRESS_CAN_ROWTYPE_SP

	This procedure is intended to call new Canadian address records
        xml file - the data being inserted

created : 10/01/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER    
,in_ADDRESS_TYPE  
,in_EFFECTIVE_DATE 
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data   
,v_address_can_row
); 


d3565 1
a3565 1
 begin
d3567 8
a3574 2
 /******************************************************************************
	ADDRESS_MEX_ROWTYPE_SP
d3576 1
a3576 23
	This procedure is intended to Insert new Mexico address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_CAN table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 10/02/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER     
,in_ADDRESS_TYPE   
,in_EFFECTIVE_DATE  
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data    
,v_address_mex_row
);

 end;    
a3632 1
 begin
d3634 8
a3641 12
 /*******************************************************************************
	ADDRESS_OTHER_ROWTYPE_SP

	This procedure is intended to Insert new OTHER address records

	CostCenter      - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
a3642 12
 created : 09/21/2012 blr CCN Project....
 *******************************************************************************/
  in_COST_CENTER     
 ,in_ADDRESS_TYPE    
 ,in_EFFECTIVE_DATE  
 ,in_TABLE_NAME  
 ,in_ROW_DATE    
 ,in_Row_data    
 ,v_address_other_row   
 );

 end;
a3699 1
begin
d3701 8
a3708 2
/*******************************************************************************
	ADDRESS_USA_ROWTYPE_SP
d3710 1
a3710 23
	This procedure is intended to insert new ADDRESS_USA records

	CostCenter - Cost Center that changed
  Address Type    - Address Type that changed
  Effective Date  - Effective Date of ADDRESS_OTHER table that changed
	OracleTableName -Table name for row (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/

 in_COST_CENTER         
,in_ADDRESS_TYPE        
,in_EFFECTIVE_DATE       
,in_TABLE_NAME          
,in_ROW_DATE             
,in_Row_data              
,v_address_usa_row         
);

end;
            
a3755 2
-------------  Business Rules go here 

a3757 3
/* 
*/
begin
d3759 6
a3764 20
/*******************************************************************************
	ADMINISTRATION_ROWTYPE_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER    
,in_TABLE_NAME  
,in_ROW_DATE    
,in_Row_data    
,v_administration_row   
); 
end;
a3819 22
/* 
*/


-------------  Business Rules go here                           
--	begin
dbms_output.put_line('before call to br');														
		ccn_business_rules_pkg.MERCHANT_ID_SP( in_MERCHANT_ID,
												in_COST_CENTER);
dbms_output.put_line('after call to br');												
--	exception
	
--		when others then
--dbms_output.put_line('after others is called' || substr(SQLERRM,1,200));													
--		      v_code  := SQLCODE;
--		      v_errm  := substr(SQLERRM,1,200);
--		      errpkg.raise_err(v_code
--		      	, 'BANK_CARD_U_SP' || 'in_TABLE_NAME' || in_TABLE_NAME
--    	        , v_errm);
--    end;

begin
d3821 9
a3829 27
/*******************************************************************************
	BANK_CARD_ROWTYPE_SP

	This procedure is intended to Insert new BANK CARD records

	CostCenter          - Cost Center that changed
  Polling_Status_Code - Polling Status of the Cost Center
  Merchant I.D.       - Merchant I.D. of the Cost Center 
  Effective Date      - Effective Date of BANK_CARD table that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
*******************************************************************************/
 in_COST_CENTER         
,in_POLLING_STATUS_CODE   
,in_MERCHANT_ID          
,in_EFFECTIVE_DATE        
,in_TABLE_NAME  
,in_ROW_DATE   
,in_Row_data    
,v_bank_card_row   
); 

end;
a4211 4
 begin
   COST_CENTER_ROWTYPE_SP (
/*******************************************************************************
	COST_CENTER_ROWTYPE_SP
d4213 7
a4219 7
	This procedure is intended to insert new cost center records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
a4220 11
created : 09/21/2012 blr CCN Project....
revised:
*******************************************************************************/
 in_COST_CENTER  
,in_TABLE_NAME  
,in_ROW_DATE     
,in_Row_data    
,v_cost_center_row   
);

 end;
a4221 21
      /*
                        BUSINESS RULES HERE
    CLOSED_COST_CENTER
      if (STATUS.status.code  in  ("X","5","9"))    or
         (COST_CENTER.close_date is not null)            then
          CCN_BUSINESS_RULES_PKG.close_ccnt_sp
               (STATUS,
                COST_CENTER,
                TERRITORY)
      END IF;
      
    REOPEN CLOSED COST CENTER
      if (STATUS.status_code  not in ("X", "5", "9"))  OR
         (COST_CENTER.close_date  is )                    then
           CCN_BUSINESS_RULES_PKG.close_ccnt_sp
               (STATUS,
                COST_CENTER,
                TERRITORY,
                TYPE)
      END IF;
      */
a4396 1
  begin
d4398 7
a4404 11
/*******************************************************************************
	MARKETING_ROWTYPE_SP

	This procedure is intended to insert new MARKETING records

	CostCenter     -  Cost Center      that changed
        MarketingType  -  Marketing Type   that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted
a4405 13
created : 09/21/2012 blr CCN Project....
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/
 in_cost_center           
,in_marketing_type      
,in_TABLE_NAME           
,in_ROW_DATE              
,in_Row_data              
,v_marketing_row

);

 end;    
d4461 6
a4466 23
/*******************************************************************************
	OTHER_ROWTYPE_SP

	This procedure is intended to insert new OTHER records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....
revised : 
*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER          
, v_OTHER_row  
,in_TABLE_NAME            
,in_ROW_DATE             
,in_Row_data              
 
);
d4523 1
a4523 1
begin
d4526 7
a4532 2
/*******************************************************************************
	PHONE_ROWTYPE_SP
a4533 1
	This procedure is intended to insert new PHONE records
a4534 22
	CostCenter       -  Cost Center        that changed
  PhoneNumberType  -  Phone Number Type  that changed
  
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 09/21/2012 blr CCN Project....

*******************************************************************************/
/***  below are the Primary Key Fields followed by fileds TABLE_NAME, ROW_DATE, Row_data  ***/

 in_COST_CENTER         
,in_phone_number_type    
, v_phone_row         
,in_TABLE_NAME           
,in_ROW_DATE             
,in_Row_data             
);

end;
a5673 4
/*

*/
-------------BUSINESS RULES HERE
a5676 2
/* 
*/
a5774 4
/*

*/
-------------BUSINESS RULES HERE
a5777 2
/* 
*/
a5831 2
--PROCEDURES FOR CALLING INSERT & UPDATE ROWTYPES
--       AS OF  10/04/2012
d6969 2
a6970 1
end CCN_TABLE_IU_PKG;@


1.1
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1126 1
d1143 3
a1145 3
in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
d1153 1
a1154 14
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_can_row ADDRESS_CAN%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
d1165 1
a1165 1
      for table_fields_rec in table_fields_cur loop
d1167 3
a1169 2
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1171 2
a1172 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1174 10
a1183 11
		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 
a1184 15
	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d1187 1
a1187 3
      else
        null ;
      end if;
a1188 2
      end loop ;
      
d1191 1
a1191 1
      commit;
d1200 2
a1201 2
end ADDRESS_CAN_I_SP;

d1203 1
a1203 1
 /******************************************************************************
d1217 1
d1219 3
a1221 3
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
d1229 2
a1231 14
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row ADDRESS_MEX%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
d1242 6
a1247 1
      for table_fields_rec in table_fields_cur loop
d1249 1
a1249 2
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1251 7
a1257 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1259 2
a1260 10
		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
d1262 10
a1272 23
	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
d1275 1
a1275 1
      commit;
d1313 1
a1313 1
cursor table_fields_cur is
d1315 7
a1321 7
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
d1324 3
a1326 2
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d1337 4
d1342 1
a1342 1
      for table_fields_rec in table_fields_cur loop
d1344 7
a1350 2
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1352 10
a1361 1
   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1363 2
a1364 36
		   if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE := v_row_value;
      when 'COUNTRY'           then  v_address_other_row.COUNTRY := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


  else
      null ;
  end if;

  end loop ;
d1393 1
d1406 1
a1406 1
cursor table_fields_cur is
d1408 7
a1414 7
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
d1416 1
d1418 3
a1420 2
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
d1431 16
d1448 8
a1455 1
      for table_fields_rec in table_fields_cur loop
d1457 4
d1462 1
d1464 50
a1513 111
		      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
		
				    if (table_fields_rec.data_type <> 'DATE') then
				
				        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                    ,table_fields_rec.column_size); 
				
				    else
				       
				         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
				                                              ,8); 
				    end if;
		    
		    
		/***  below is a list of all the fields in the table  ***/
		/*
		            COST_CENTER_CODE
		            ADDRESS_TYPE
		            EFFECTIVE_DATE
		            EXPIRATION_DATE
		            ADDRESS_LINE_1
		            ADDRESS_LINE_2
		            ADDRESS_LINE_3
		            CITY
		            STATE_CODE
		            ZIP_CODE
		            ZIP_CODE_4
		            COUNTY
		            FIPS_CODE
		            DESTINATION_POINT
		            CHECK_DIGIT
		            VALID_ADDRESS
		*/
		
				  	case table_fields_rec.column_name
		                        when 'COST_CENTER_CODE' then v_ADDRESS_USA_row.COST_CENTER_CODE     :=  v_row_value;
		                        when 'ADDRESS_TYPE' then v_ADDRESS_USA_row.ADDRESS_TYPE     :=  v_row_value;
		                        when 'EFFECTIVE_DATE' then v_ADDRESS_USA_row.EFFECTIVE_DATE     :=  v_row_value;
		                        when 'EXPIRATION_DATE' then v_ADDRESS_USA_row.EXPIRATION_DATE     :=  v_row_value;
		                        when 'ADDRESS_LINE_1' then v_ADDRESS_USA_row.ADDRESS_LINE_1     :=  v_row_value;
		                        when 'ADDRESS_LINE_2' then v_ADDRESS_USA_row.ADDRESS_LINE_2     :=  v_row_value;
		                        when 'ADDRESS_LINE_3' then v_ADDRESS_USA_row.ADDRESS_LINE_3     :=  v_row_value;
		                        when 'CITY' then v_ADDRESS_USA_row.CITY     :=  v_row_value;
		                        when 'STATE_CODE' then v_ADDRESS_USA_row.STATE_CODE     :=  v_row_value;
		                        when 'ZIP_CODE' then v_ADDRESS_USA_row.ZIP_CODE     :=  v_row_value;
		                        when 'ZIP_CODE_4' then v_ADDRESS_USA_row.ZIP_CODE_4     :=  v_row_value;
		                        when 'COUNTY' then v_ADDRESS_USA_row.COUNTY     :=  v_row_value;
		                        when 'FIPS_CODE' then v_ADDRESS_USA_row.FIPS_CODE     :=  v_row_value;
		                        when 'DESTINATION_POINT' then v_ADDRESS_USA_row.DESTINATION_POINT     :=  v_row_value;
		                        when 'CHECK_DIGIT' then v_ADDRESS_USA_row.CHECK_DIGIT     :=  v_row_value;
		                        when 'VALID_ADDRESS' then v_ADDRESS_USA_row.VALID_ADDRESS     :=  v_row_value;
		
					ELSE
						null;		
					END CASE;	   	
		
		
		      end if;

      end loop ;
      
      insert into ADDRESS_USA values v_ADDRESS_USA_row;
      
      commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADDRESS_USA_I_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME, v_errm);
        
	
end ADDRESS_USA_I_SP;
 
 procedure ADMINISTRATION_I_SP (
/*******************************************************************************
	ADMINISTRATION_I_SP

	This procedure is intended to Insert new ADMINISTRATION records

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
        current date - 
        xml file - the data being inserted

created : 05/01/2012 mdh CCN Project....
*******************************************************************************/
 in_COST_CENTER    IN ADMINISTRATION.COST_CENTER_CODE%TYPE,
 in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data   IN varchar2 --sys.xmltype
)
 is 
 v_code number;
 v_errm varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);

cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
d1524 5
d1530 1
a1530 1
      for table_fields_rec in table_fields_cur loop
d1532 5
a1536 2
      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1538 8
a1545 28
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;
d1547 1
a1547 1
  end loop ;
d1561 2
a1562 1
end ADMINISTRATION_I_SP;
d1580 1
d1582 4
a1585 5
in_COST_CENTER          IN BANK_CARD.COST_CENTER_CODE%TYPE,
in_POLLING_STATUS_CODE  IN BANK_CARD.POLLING_STATUS_CODE%type,
in_MERCHANT_ID          IN BANK_CARD.MERCHANT_ID%TYPE,
in_EFFECTIVE_DATE       IN BANK_CARD.EFFECTIVE_DATE%type

d1595 1
a1595 1
cursor table_fields_cur is
d1597 7
a1603 7
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
d1605 1
d1607 2
a1608 1
v_row_value 	varchar2(500);
d1637 4
a1640 1
      for table_fields_rec in table_fields_cur loop
d1642 1
a1642 2
      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d1644 8
a1651 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d1653 12
a1664 35
    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
	  ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

 end loop ;
d1679 2
a1680 2
end BANK_CARD_I_SP;

d2019 1
d2027 1
a2027 1
cursor table_fields_cur is
d2029 7
a2035 7
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
d2037 1
d2039 4
a2042 2
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d2053 4
d2058 1
a2058 1
      for table_fields_rec in table_fields_cur loop
d2060 5
a2064 2
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d2066 9
a2074 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2076 5
a2080 2
--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 
d2082 1
a2082 1
		if (table_fields_rec.data_type <> 'DATE') then
d2084 1
a2084 49
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.PRI_LOGO_GROUP_IND := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
      
      insert into cost_center values v_cost_center_row;
      
      commit;

end COST_CENTER_I_SP;

PROCEDURE EMP_DATA_I_SP (
d2218 1
a2231 1
cursor table_fields_cur is
d2233 1
a2233 8
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
d2235 2
a2236 3
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d2247 4
a2250 1
      for table_fields_rec in table_fields_cur loop
d2252 1
a2252 2
      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d2254 6
a2259 33
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_MARKETING_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_MARKETING_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                      := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type                := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date                := v_row_value;
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date               := v_row_value;
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                     := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                   := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size          := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size            := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting       := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d2261 10
d2272 1
a2272 3
      else
        null ;
      end if;
d2274 1
a2274 1
      end loop ;
d2304 1
a2316 1
cursor table_fields_cur is
d2318 1
a2318 8
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
d2320 2
a2321 3
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d2332 5
a2336 1
      for table_fields_rec in table_fields_cur loop
d2338 1
a2338 2
      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d2340 5
a2344 26
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	
d2346 4
d2351 6
a2356 3
      else
        null ;
      end if;
d2358 1
a2358 1
      end loop ;
d2372 2
a2373 1
end OTHER_I_SP;
d2384 1
a2384 1
	OracleTableName -Table name for row -varible 
d2390 1
a2403 1
cursor table_fields_cur is
d2405 1
a2405 8
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
d2407 2
a2408 3
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d2419 1
a2419 1
      for table_fields_rec in table_fields_cur loop
d2421 3
a2423 2
      --dbms_output.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d2425 1
a2425 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d2427 7
a2433 1
    if (table_fields_rec.data_type <> 'DATE') then
d2435 3
a2437 24
        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code              := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type             := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code               := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number                  := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension               := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d2439 7
d2447 1
a2447 5
      else
        null ;
      end if;

      end loop ;
d3746 3
a3748 3
in_COST_CENTER    IN ADDRESS_CAN.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_CAN.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_CAN.EFFECTIVE_DATE%TYPE
a3756 1
cursor table_fields_cur is
a3757 8
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
d3759 1
a3759 2
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d3771 4
a3774 1
      for table_fields_rec in table_fields_cur loop
d3776 2
a3777 2
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3779 10
a3788 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
a3789 1
		if (table_fields_rec.data_type <> 'DATE') then
a3790 9
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 
d3792 2
a3793 22
	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_can_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_can_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_can_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_can_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_can_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_can_row.ADDRESS_LINE_2 := v_row_value;
		  when 'ADDRESS_LINE_3'    then  v_address_can_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_can_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_can_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_can_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_can_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
d3827 3
a3829 3
in_COST_CENTER    IN ADDRESS_MEX.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_MEX.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_MEX.EFFECTIVE_DATE%TYPE
d3837 2
a3839 13
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_mex_row ADDRESS_MEX%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
d3851 4
a3854 1
      for table_fields_rec in table_fields_cur loop
d3856 1
a3856 2
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d3858 7
a3864 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d3866 11
a3876 32
		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_mex_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_mex_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_mex_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_mex_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_mex_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_mex_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_mex_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_mex_row.CITY := v_row_value;
			when 'PROVINCE_CODE'     then  v_address_mex_row.PROVINCE_CODE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_mex_row.POSTAL_CODE := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_mex_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;
d3878 1
a3878 1
      end loop ;
d3911 1
d3913 3
a3915 3
in_COST_CENTER    IN ADDRESS_OTHER.COST_CENTER_CODE%TYPE,
in_ADDRESS_TYPE   IN ADDRESS_OTHER.ADDRESS_TYPE%TYPE,
in_EFFECTIVE_DATE IN ADDRESS_OTHER.EFFECTIVE_DATE%TYPE
d3923 1
a3924 14
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_other_row ADDRESS_OTHER%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
d3935 4
a3938 1
      for table_fields_rec in table_fields_cur loop
d3940 1
a3940 34
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

   if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

		   if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
        
        dbms_output.put_line('row value is ' || v_row_value);
 

	 	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_other_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_other_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_other_row.EFFECTIVE_DATE := TO_DATE(RTRIM(v_row_value),'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_other_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_other_row.ADDRESS_LINE_1 := v_row_value;
	   	when 'ADDRESS_LINE_2'    then  v_address_other_row.ADDRESS_LINE_2 := v_row_value;
	    when 'ADDRESS_LINE_3'    then  v_address_other_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_other_row.CITY := v_row_value;
			when 'PROVINCE'          then  v_address_other_row.PROVINCE := v_row_value;
      when 'STATE'             then  v_address_other_row.STATE := v_row_value;
			when 'POSTAL_CODE'       then  v_address_other_row.POSTAL_CODE := v_row_value;
      when 'COUNTRY'           then  v_address_other_row.COUNTRY := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_other_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d3942 7
d3950 10
a3959 3
  else
      null ;
  end if;
d3961 1
a3961 1
  end loop ;
d3994 2
d4008 1
a4008 1
cursor table_fields_cur is
a4009 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_address_usa_row address_usa%rowtype;
v_row_value 	varchar2(500);
v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
d4019 4
d4024 1
a4024 1
      for table_fields_rec in table_fields_cur loop
d4026 6
a4031 2
      --dbms_output.put_line(in_Row_data.extract('/ADDRESS_USA/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4033 2
a4034 36
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'  then  v_address_usa_row.COST_CENTER_CODE := v_row_value;
			when 'ADDRESS_TYPE'      then  v_address_usa_row.ADDRESS_TYPE := v_row_value;
			when 'EFFECTIVE_DATE'    then  v_address_usa_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'   then  v_address_usa_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'ADDRESS_LINE_1'    then  v_address_usa_row.ADDRESS_LINE_1 := v_row_value;
      when 'ADDRESS_LINE_2'    then  v_address_usa_row.ADDRESS_LINE_2 := v_row_value;
      when 'ADDRESS_LINE_3'    then  v_address_usa_row.ADDRESS_LINE_3 := v_row_value;
			when 'CITY'              then  v_address_usa_row.CITY := v_row_value;
			when 'STATE_CODE'        then  v_address_usa_row.STATE_CODE := v_row_value;
			when 'ZIP_CODE'          then  v_address_usa_row.ZIP_CODE := v_row_value;
			when 'ZIP_CODE_4'        then  v_address_usa_row.ZIP_CODE_4 := v_row_value;
			when 'COUNTY'            then  v_address_usa_row.COUNTY := v_row_value;
			when 'FIPS_CODE'         then  v_address_usa_row.FIPS_CODE := v_row_value;
			when 'DESTINATION_POINT' then  v_address_usa_row.DESTINATION_POINT := v_row_value;
			when 'CHECK_DIGIT'       then  v_address_usa_row.CHECK_DIGIT := v_row_value;
			when 'VALID_ADDRESS'     then  v_address_usa_row.VALID_ADDRESS := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d4036 8
d4045 2
a4046 6
      else
        null ;
      end if;

      end loop ;
      
d4086 1
a4087 12
cursor table_fields_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_administration_row administration%rowtype;
v_row_value 	varchar2(500);
d4098 4
d4103 1
a4103 1
      for table_fields_rec in table_fields_cur loop
d4105 5
a4109 2
      --dbms_output.put_line(in_Row_data.extract('/ADMINISTRATION/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4111 29
a4139 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4141 1
a4141 48
    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'      then  v_administration_row.COST_CENTER_CODE := v_row_value;
			when 'CATEGORY'              then  v_administration_row.CATEGORY := v_row_value;
			when 'INTERNAL_MAIL_NUMBER'  then  v_administration_row.INTERNAL_MAIL_NUMBER := v_row_value;
     	when 'ADMIN_COST_CNTR_TYPE'  then  v_administration_row.ADMIN_COST_CNTR_TYPE := v_row_value;
		ELSE
			null;		
		END CASE;	   	

  else
     null ;
  end if;

  end loop ;
      
      UPDATE ADMINISTRATION set row = v_administration_row
         where cost_center_code = in_Cost_Center;
         
       commit;
      
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'ADMINISTRATION_U_SP' ||
             'in_TABLE_NAME' || in_TABLE_NAME);
        
end ADMINISTRATION_U_SP;				 
				
 procedure BANK_CARD_U_SP (
/*******************************************************************************
	BANK_CARD_U_SP

	This procedure is intended to update BANK CARD records
a4157 1

d4166 1
a4167 1
cursor table_fields_cur is
a4168 11
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_bank_card_row bank_card%rowtype;
v_row_value 	varchar2(500);
--
d4196 4
a4199 1
      for table_fields_rec in table_fields_cur loop
d4201 1
a4201 2
      --dbms_output.put_line(in_Row_data.extract('/BANK_CARD/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4203 8
a4210 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4212 11
a4222 29
    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,10); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE'     then  v_bank_card_row.COST_CENTER_CODE := v_row_value;
			when 'POLLING_STATUS_CODE'  then  v_bank_card_row.polling_status_code := v_row_value;
     	when 'MERCHANT_ID'          then  v_bank_card_row.MERCHANT_ID := v_row_value; 
			when 'EFFECTIVE_DATE'       then  v_bank_card_row.EFFECTIVE_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
			when 'EXPIRATION_DATE'      then  v_bank_card_row.EXPIRATION_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_CHANGE_DATE'     then  v_bank_card_row.LAST_MAINT_DATE := TO_DATE(v_row_value,'MM-DD-YYYY');
      when 'LAST_MAINT_UI'        then  v_bank_card_row.LAST_MAINT_METHOD_ID := v_row_value;
      when 'LAST_MAINT_USER_ID'   then  v_bank_card_row.LAST_MAINT_USER_ID := v_row_value;
      when 'QUALITY_CODE'         then  v_bank_card_row.QUALITY_CODE := v_row_value;
			when 'AMEX_SE_ID'           then  v_bank_card_row.amex_se_id := v_row_value;
			when 'DISCOVER_ID'          then  v_bank_card_row.DISCOVER_ID := v_row_value;
	  ELSE
			null;		
		END CASE;	   	
d4224 1
a4224 5
  else
     null ;
  end if;

 end loop ;
a4589 1
cursor table_fields_cur is
d4591 1
a4591 8
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;                                   
d4595 3
a4597 3
 v_row_value 	varchar2(500);
 v_Row_data		sys.xmltype := xmltype(in_Row_data);
--
d4607 4
d4612 1
a4612 1
      for table_fields_rec in table_fields_cur loop
d4614 5
a4618 44
      --dbms_output.put_line(in_Row_data.extract('/COST_CENTER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);

      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

--        v_row_value := rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
--                    ,table_fields_rec.column_size); 

		if (table_fields_rec.data_type <> 'DATE') then

	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,table_fields_rec.column_size); 
        else          
	        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
		                    ,10); 
        end if;
 

	  	CASE table_fields_rec.column_name
			when 'COST_CENTER_CODE' then  v_cost_center_row.COST_CENTER_CODE := v_row_value;
			when 'COST_CENTER_NAME' then  v_cost_center_row.COST_CENTER_NAME := v_row_value;
			when 'CATEGORY' then  v_cost_center_row.CATEGORY := v_row_value;
			when 'ENTITY_TYPE' then  v_cost_center_row.ENTITY_TYPE := v_row_value;
			when 'STATEMENT_TYPE' then  v_cost_center_row.STATEMENT_TYPE := v_row_value;
			when 'COUNTRY_CODE' then  v_cost_center_row.COUNTRY_CODE := v_row_value;
			when 'TRANSPORT_TYPE' then  v_cost_center_row.TRANSPORT_TYPE := v_row_value;
			when 'BEGIN_DATE' then  v_cost_center_row.BEGIN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'OPEN_DATE' then  v_cost_center_row.OPEN_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'MOVE_DATE' then  v_cost_center_row.MOVE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'CLOSE_DATE' then  v_cost_center_row.CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'FINANCIAL_CLOSE_DATE' then  v_cost_center_row.FINANCIAL_CLOSE_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'POS_PROG_VER_EFF_DATE' then  v_cost_center_row.POS_PROG_VER_EFF_DATE := to_date(v_row_value,'MM-DD-YYYY');
			when 'UPS_ZONE_CODE' then  v_cost_center_row.UPS_ZONE_CODE := v_row_value;
			when 'RPS_ZONE_CODE' then  v_cost_center_row.RPS_ZONE_CODE := v_row_value;
			when 'CURRENCY_CODE' then  v_cost_center_row.CURRENCY_CODE := v_row_value;
			when 'POS_PROG_VER_NBR' then  v_cost_center_row.POS_PROG_VER_NBR := v_row_value;
			when 'LEASE_OWN_CODE' then  v_cost_center_row.LEASE_OWN_CODE := v_row_value;
			when 'MISSION_TYPE_CODE' then  v_cost_center_row.MISSION_TYPE_CODE := v_row_value;
			when 'DUNS_NUMBER' then  v_cost_center_row.DUNS_NUMBER := v_row_value;
			when 'PRI_LOGO_GROUP_IND' then  v_cost_center_row.pri_logo_group_ind := v_row_value;
			when 'SCD_LOGO_GROUP_IND' then  v_cost_center_row.SCD_LOGO_GROUP_IND := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d4620 9
d4630 1
a4630 3
      else
        null ;
      end if;
a4631 1
      end loop ;
d4815 1
a4816 1
cursor table_fields_cur is
a4817 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_MARKETING_row MARKETING%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d4828 4
a4831 1
      for table_fields_rec in table_fields_cur loop
d4833 1
a4833 2
      --dbms_output.put_line(in_Row_data.extract('/MARKETING/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4835 6
a4840 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d4842 9
a4850 29
    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_marketing_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_marketing_row.category                      := v_row_value;
			when 'MARKETING_TYPE'                   then  v_marketing_row.marketing_type                := v_row_value;
			when 'EFFECTIVE_DATE'                   then  v_marketing_row.effective_date                := v_row_value;
			when 'EXPIRATION_DATE'                  then  v_marketing_row.expiration_date               := v_row_value;
			when 'MKT_BRAND'                        then  v_marketing_row.mkt_brand                     := v_row_value;
			when 'MKT_MISSION'                      then  v_marketing_row.mkt_mission                   := v_row_value;
			when 'MKT_SALES_FLOOR_SIZE'             then  v_MARKETING_row.mkt_sales_floor_size          := v_row_value;
			when 'MKT_WAREHOUSE_SIZE'               then  v_marketing_row.mkt_warehouse_size            := v_row_value;
			when 'MKT_REAL_ESTATE_SETTING'          then  v_MARKETING_row.mkt_real_estate_setting       := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d4852 1
d4854 1
a4854 5
      else
        null ;
      end if;

      end loop ;
d4896 1
a4897 1
cursor table_fields_cur is
a4898 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_OTHER_row OTHER%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d4908 4
d4913 1
a4913 1
      for table_fields_rec in table_fields_cur loop
d4915 5
a4919 2
      --dbms_output.put_line(in_Row_data.extract('/OTHER/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4921 4
a4924 6
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 
d4926 5
a4930 7
    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
d4932 1
a4932 3
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
d4934 2
a4935 14
	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_other_row.cost_center_code              := v_row_value;
			when 'CATEGORY'                         then  v_other_row.category                      := v_row_value;
      
		ELSE
			null;		
		END CASE;	   	


      else
        null ;
      end if;

      end loop ;
d4964 1
d4977 1
a4978 1
cursor table_fields_cur is
a4979 12
    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc
      	;
--;
v_PHONE_row PHONE%rowtype;
v_row_value     varchar2(500);
v_Row_data      sys.xmltype := xmltype(in_Row_data);
--
d4989 1
d4991 3
a4993 1
      for table_fields_rec in table_fields_cur loop
d4995 1
a4995 2
      --dbms_output.put_line(in_Row_data.extract('/PHONE/COST_CENTER_CODE/text()').getStringVal());
      dbms_output.put_line('the field is ' || table_fields_rec.column_name);
d4997 7
a5003 1
      if (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
d5005 1
a5005 26
    if (table_fields_rec.data_type <> 'DATE') then

        v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                    ,table_fields_rec.column_size); 

    else
       
         v_row_value := rpad(v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ,8); 
    end if;
    
    dbms_output.put_line('row value is ' || v_row_value);
 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_PHONE_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_PHONE_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/

	  	case table_fields_rec.column_name
			when 'COST_CENTER_CODE'                 then  v_PHONE_row.cost_center_code              := v_row_value;
			when 'PHONE_NUMBER_TYPE'                then  v_phone_row.phone_number_type             := v_row_value;
			when 'PHONE_AREA_CODE'                  then  v_phone_row.phone_area_code               := v_row_value;
			when 'PHONE_NUMBER'                     then  v_phone_row.phone_number                  := v_row_value;
			when 'PHONE_EXTENSION'                  then  v_PHONE_row.PHONE_extension               := v_row_value;
		ELSE
			null;		
		END CASE;	   	
d5007 2
d5010 7
a5016 3
      else
        null ;
      end if;
d5018 1
a5018 1
      end loop ;
d6327 1107
@

