create or replace PACKAGE BODY CCN_EPM_FEED_PKG
AS
/****************************************************************************** 
This package is intended to create EPM hierarchy file as an pipe delimited file

Created : 1/3/2017 sxg151 -- CCN coding project
Changed :
******************************************************************************/

PROCEDURE GET_COST_CENTER_DETAILS(
/****************************************************************************** 
This PROCEDURE gets all the cost center details.

Created : 1/23/2018 sxg151 -- CCN Project Team...
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE       IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    OUT_CCN_ACCOUNTING_REC       OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_COST_CENTER_DETAILS_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT COST_CENTER_CODE,
               COST_CENTER_NAME,
               CATEGORY,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('CATEGORY','COD',CATEGORY) CATEGORY_DESC,
               ACQUISITION_CODE,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('ACQUISITION_CODE','COD',ACQUISITION_CODE) ACQUISITION_CODE_DESC,
               STATEMENT_TYPE,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('STATEMENT_TYPE','COD',STATEMENT_TYPE) STATEMENT_TYPE_DESC,
               MISSION_TYPE_CODE,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('MISSION_TYPE_CODE','COD',MISSION_TYPE_CODE) MISSION_TYPE_CODE_DESC,
               OPEN_DATE,
               CLOSE_DATE,
               CURRENCY_CODE,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('CURRENCY_CODE','COD',CURRENCY_CODE) CURRENCY_CODE_DESC
          FROM COST_CENTER
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    V_COST_CENTER_REC       GET_COST_CENTER_DETAILS_CUR%ROWTYPE;
BEGIN
    OPEN GET_COST_CENTER_DETAILS_CUR(IN_COST_CENTER_CODE);
    FETCH GET_COST_CENTER_DETAILS_CUR INTO V_COST_CENTER_REC;
    CLOSE GET_COST_CENTER_DETAILS_CUR;

    OUT_CCN_ACCOUNTING_REC := NULL;
    OUT_CCN_ACCOUNTING_REC.COST_CENTER_CODE        := V_COST_CENTER_REC.COST_CENTER_CODE;
    OUT_CCN_ACCOUNTING_REC.COST_CENTER_NAME        := V_COST_CENTER_REC.COST_CENTER_NAME;
    OUT_CCN_ACCOUNTING_REC.CATEGORY                := V_COST_CENTER_REC.CATEGORY;
    OUT_CCN_ACCOUNTING_REC.CATEGORY_DESC           := V_COST_CENTER_REC.CATEGORY_DESC;
    OUT_CCN_ACCOUNTING_REC.ACQUISITION_CODE        := V_COST_CENTER_REC.ACQUISITION_CODE;
    OUT_CCN_ACCOUNTING_REC.ACQUISITION_CODE_DESC   := V_COST_CENTER_REC.ACQUISITION_CODE_DESC;
    OUT_CCN_ACCOUNTING_REC.STATEMENT_TYPE          := V_COST_CENTER_REC.STATEMENT_TYPE;
    OUT_CCN_ACCOUNTING_REC.STATEMENT_TYPE_DESC     := V_COST_CENTER_REC.STATEMENT_TYPE_DESC;
    OUT_CCN_ACCOUNTING_REC.MISSION_TYPE_CODE       := V_COST_CENTER_REC.MISSION_TYPE_CODE;
    OUT_CCN_ACCOUNTING_REC.MISSION_TYPE_CODE_DESC  := V_COST_CENTER_REC.MISSION_TYPE_CODE_DESC;
    OUT_CCN_ACCOUNTING_REC.OPEN_DATE               := V_COST_CENTER_REC.OPEN_DATE;
    OUT_CCN_ACCOUNTING_REC.CLOSE_DATE              := V_COST_CENTER_REC.CLOSE_DATE;
    OUT_CCN_ACCOUNTING_REC.CURRENCY_CODE           := V_COST_CENTER_REC.CURRENCY_CODE;
    OUT_CCN_ACCOUNTING_REC.CURRENCY_CODE_DESC      := V_COST_CENTER_REC.CURRENCY_CODE_DESC;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_COST_CENTER_DETAILS' , SQLERRM, SQLCODE);
        RAISE;
END GET_COST_CENTER_DETAILS;

PROCEDURE GET_MARKETING_DETAILS(
/****************************************************************************** 
This PROCEDURE gets all Marketing details.

Created : 11/30/2017 sxg151 -- CCN Project Team...
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE        IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IO_CCN_ACCOUNTING_REC      IN OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_MARKETING_DETAILS_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT MKT_MISSION,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('MKT_MISSION','COD',MKT_MISSION) MKT_MISSION_DESC
           FROM MARKETING
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    V_MARKETING_REC       GET_MARKETING_DETAILS_CUR%ROWTYPE;
BEGIN
    OPEN GET_MARKETING_DETAILS_CUR(IN_COST_CENTER_CODE);
    FETCH GET_MARKETING_DETAILS_CUR INTO V_MARKETING_REC;
    CLOSE GET_MARKETING_DETAILS_CUR;

    IO_CCN_ACCOUNTING_REC.MKT_MISSION       := V_MARKETING_REC.MKT_MISSION;
    IO_CCN_ACCOUNTING_REC.MKT_MISSION_DESC  := V_MARKETING_REC.MKT_MISSION_DESC;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_MARKETING_DETAILS' , SQLERRM, SQLCODE);
        RAISE;
END GET_MARKETING_DETAILS;

PROCEDURE GET_HIERARCHY_DETAILS(
/******************************************************************************
This PROCEDURE gets all HIERARCHY details

Created : 11/30/2017 sxg151 -- CCN Project Team
Changed
******************************************************************************/
    IN_COST_CENTER_CODE    IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IO_CCN_ACCOUNTING_REC  IN OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_HIERARCHY_DETAILS_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT GLOBAL_DIVISION "DIVISION",
               GLOBAL_DIVISION_NAME "DIVISION_NAME",
               GLOBAL_AREA "AREA",
               GLOBAL_AREA_NAME "AREA_NAME",
               GLOBAL_DISTRICT "DISTRICT",
               GLOBAL_DISTRICT_NAME "DISTRICT_NAME",
               GLOBAL_CITY_SALES_MGR "CITY_SALES_MGR",
               GLOBAL_CITY_SALES_MGR_NAME "CITY_SALES_MGR_NAME",
               COA_DIVISION,
               COA_DIVISION_NAME
          FROM GLBL_FACTS_LEGACY_VIEW
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    V_HIERARCHY_REC       GET_HIERARCHY_DETAILS_CUR%ROWTYPE;
BEGIN
    OPEN GET_HIERARCHY_DETAILS_CUR(IN_COST_CENTER_CODE);
    FETCH GET_HIERARCHY_DETAILS_CUR INTO V_HIERARCHY_REC;
    CLOSE GET_HIERARCHY_DETAILS_CUR;

    IO_CCN_ACCOUNTING_REC.DIVISION            := V_HIERARCHY_REC.DIVISION;
    IO_CCN_ACCOUNTING_REC.DIVISION_NAME       := V_HIERARCHY_REC.DIVISION_NAME;
    IO_CCN_ACCOUNTING_REC.AREA                := V_HIERARCHY_REC.AREA;
    IO_CCN_ACCOUNTING_REC.AREA_NAME           := V_HIERARCHY_REC.AREA_NAME;
    IO_CCN_ACCOUNTING_REC.DISTRICT            := V_HIERARCHY_REC.DISTRICT;
    IO_CCN_ACCOUNTING_REC.DISTRICT_NAME       := V_HIERARCHY_REC.DISTRICT_NAME;
    IO_CCN_ACCOUNTING_REC.CITY_SALES_MGR      := V_HIERARCHY_REC.CITY_SALES_MGR;
    IO_CCN_ACCOUNTING_REC.CITY_SALES_MGR_NAME := V_HIERARCHY_REC.CITY_SALES_MGR_NAME;
    IO_CCN_ACCOUNTING_REC.COA_DIVISION        := V_HIERARCHY_REC.COA_DIVISION;
    IO_CCN_ACCOUNTING_REC.COA_DIVISION_NAME   := V_HIERARCHY_REC.COA_DIVISION_NAME;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_HIERARCHY_DETAILS' , SQLERRM, SQLCODE);
        RAISE;
END GET_HIERARCHY_DETAILS;

PROCEDURE GET_MGR_DETAILS(
/****************************************************************************** 
This PROCEDURE gets all Manager details.

Created : 11/30/2017 sxg151 -- CCN Project Team...
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE       IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IN_CATEGORY               IN     COST_CENTER.CATEGORY%TYPE,
    IO_CCN_ACCOUNTING_REC     IN OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_MGR_DETAILS_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT DIV_MGR_NAME,
               AREA_MGR_NAME,
               DISTRICT_MGR_NAME,
               CITY_MGR_NAME CITY_SALES_MANAGER_NAME,
               CCN_HIERARCHY.GET_MGR_NAME_FNC(COST_CENTER_CODE) CC_MGR_NAME
          FROM GLOBAL_HIERARCHY_ATTRBT_VW
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    V_MGR_REC       GET_MGR_DETAILS_CUR%ROWTYPE; 
BEGIN
    OPEN GET_MGR_DETAILS_CUR(IN_COST_CENTER_CODE);
    FETCH GET_MGR_DETAILS_CUR INTO V_MGR_REC;
    CLOSE GET_MGR_DETAILS_CUR;

    IO_CCN_ACCOUNTING_REC.DIV_MGR_NAME              := V_MGR_REC.DIV_MGR_NAME;
    IO_CCN_ACCOUNTING_REC.AREA_MGR_NAME             := V_MGR_REC.AREA_MGR_NAME;
    IO_CCN_ACCOUNTING_REC.DISTRICT_MGR_NAME         := V_MGR_REC.DISTRICT_MGR_NAME;
    IO_CCN_ACCOUNTING_REC.CITY_SALES_MANAGER_NAME   := V_MGR_REC.CITY_SALES_MANAGER_NAME;
    IO_CCN_ACCOUNTING_REC.CC_MGR_NAME               := V_MGR_REC.CC_MGR_NAME;

    -- Load Territory Rep as city_sales_manager_name, for cost centers whose category is 'T'
    IF IN_CATEGORY = 'T' THEN
      IO_CCN_ACCOUNTING_REC.TERRITORY_REP         := V_MGR_REC.CITY_SALES_MANAGER_NAME;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_MGR_DETAILS' , SQLERRM, SQLCODE);
        RAISE;
END GET_MGR_DETAILS;

PROCEDURE GET_STATE_CODE(
/****************************************************************************** 
This PROCEDURE gets STATE AND PROVINCE CODE details.

Created : 11/30/2017 sxg151 -- CCN Project Team...
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE        IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IO_CCN_ACCOUNTING_REC      IN OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_STATE_CODE_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT STATE_CODE,
               STATE_CODE_DESCRIPTION,
               PROVINCE_CODE,
               PROVINCE_CODE_DESCRIPTION
          FROM ADDRESS_VW
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND ADDRESS_TYPE = 'M'
           AND EXPIRATION_DATE IS NULL;
BEGIN
    FOR REC IN GET_STATE_CODE_CUR(IN_COST_CENTER_CODE) LOOP
        BEGIN
            IO_CCN_ACCOUNTING_REC.STATE_CODE           := REC.STATE_CODE;
            IO_CCN_ACCOUNTING_REC.STATE_DESCRIPTION    := REC.STATE_CODE_DESCRIPTION;
            IO_CCN_ACCOUNTING_REC.PROVINCE_CODE        := REC.PROVINCE_CODE;
            IO_CCN_ACCOUNTING_REC.PROVINCE_DESCRIPTION := REC.PROVINCE_CODE_DESCRIPTION;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    END LOOP;
EXCEPTION 
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_STATE_CODE' , SQLERRM, SQLCODE);
        RAISE;
END GET_STATE_CODE;

PROCEDURE GET_STATUS_CODE(
/****************************************************************************** 
This PROCEDURE gets STATUS CODE details.

Created : 11/30/2017 sxg151 -- CCN Project Team...
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE        IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IO_CCN_ACCOUNTING_REC      IN OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_STATUS_CODE_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT STATUS_CODE,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('STATUS_CODE','COD',STATUS_CODE) STATUS_CODE_DESC
          FROM STATUS
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND EXPIRATION_DATE IS NULL;

    V_STATUS_REC       GET_STATUS_CODE_CUR%ROWTYPE; 
BEGIN
    OPEN GET_STATUS_CODE_CUR(IN_COST_CENTER_CODE);
    FETCH GET_STATUS_CODE_CUR INTO V_STATUS_REC;
    CLOSE GET_STATUS_CODE_CUR;

    IO_CCN_ACCOUNTING_REC.STATUS_CODE      := V_STATUS_REC.STATUS_CODE;
    IO_CCN_ACCOUNTING_REC.STATUS_CODE_DESC := V_STATUS_REC.STATUS_CODE_DESC;
EXCEPTION 
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_STATUS_CODE' , SQLERRM, SQLCODE);
        RAISE;
END GET_STATUS_CODE;

PROCEDURE GET_TERR_BUSN_CODE(
/****************************************************************************** 
This PROCEDURE gets TERRITORY  BUISINESS CODE details.

Created : 11/30/2017 sxg151 -- CCN Project Team...
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE       IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IO_CCN_ACCOUNTING_REC     IN OUT CCN_ACCOUNTING_TBL%ROWTYPE)
IS
    CURSOR GET_TERR_BUSN_CODE_CUR(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT TERRITORY_TYPE_BUSN_CODE TERRITORY_BUSN_CODE,
               CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('TERRITORY_TYPE_BUSN_CODE','COD',TERRITORY_TYPE_BUSN_CODE) TERRITORY_BUSN_CODE_DESC
          FROM TERRITORY
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    V_TERR_REC       GET_TERR_BUSN_CODE_CUR%ROWTYPE; 
BEGIN
    OPEN GET_TERR_BUSN_CODE_CUR(IN_COST_CENTER_CODE);
    FETCH GET_TERR_BUSN_CODE_CUR INTO V_TERR_REC;
    CLOSE GET_TERR_BUSN_CODE_CUR;

    IO_CCN_ACCOUNTING_REC.TERRITORY_BUSN_CODE      := V_TERR_REC.TERRITORY_BUSN_CODE;
    IO_CCN_ACCOUNTING_REC.TERRITORY_BUSN_CODE_DESC := V_TERR_REC.TERRITORY_BUSN_CODE_DESC;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_TERR_BUSN_CODE' , SQLERRM, SQLCODE);
        RAISE;
END GET_TERR_BUSN_CODE;

PROCEDURE GET_ACCOUNT_DETAILS(
/****************************************************************************** 
This PROCEDURE gets account details

Created : 12/15/2017 sxg151 -- CCN Project Team
Changed :
******************************************************************************/
    IN_COST_CENTER_CODE         IN     COST_CENTER.COST_CENTER_CODE%TYPE,
    IN_CATEGORY                 IN     COST_CENTER.CATEGORY%TYPE,
    OUT_CCN_ACCOUNTING_ROWTYPE     OUT CCN_ACCOUNTING_TBL%ROWTYPE )
IS 
    V_CCN_ACCOUNTING_ROWTYPE CCN_ACCOUNTING_TBL%ROWTYPE;
    V_COUNT                   NUMBER := 0;

BEGIN
    GET_COST_CENTER_DETAILS(IN_COST_CENTER_CODE, V_CCN_ACCOUNTING_ROWTYPE );
    GET_MARKETING_DETAILS(IN_COST_CENTER_CODE, V_CCN_ACCOUNTING_ROWTYPE );
    GET_HIERARCHY_DETAILS(IN_COST_CENTER_CODE, V_CCN_ACCOUNTING_ROWTYPE );
    GET_MGR_DETAILS(IN_COST_CENTER_CODE,IN_CATEGORY,V_CCN_ACCOUNTING_ROWTYPE );
    GET_STATE_CODE(IN_COST_CENTER_CODE, V_CCN_ACCOUNTING_ROWTYPE );
    GET_STATUS_CODE(IN_COST_CENTER_CODE, V_CCN_ACCOUNTING_ROWTYPE );
    GET_TERR_BUSN_CODE(IN_COST_CENTER_CODE, V_CCN_ACCOUNTING_ROWTYPE );

    OUT_CCN_ACCOUNTING_ROWTYPE :=  V_CCN_ACCOUNTING_ROWTYPE;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GET_ACCOUNT_DETAILS', SQLERRM, SQLCODE);
        RAISE;
END GET_ACCOUNT_DETAILS;

PROCEDURE GENERATE_CLOB(
/****************************************************************************** 
This package is intended to create store and reps hierarchy file as an csv

Created : 12/13/2017 sxg151 -- CCN coding project
Changed :
******************************************************************************/
    IN_REC             IN        CC_HIER_REC,
    IN_PREV_REC        IN        CC_HIER_REC,
    IN_STORE_REP       IN        VARCHAR2,
    OUT_CLOB              OUT    CLOB)
IS
    V_DLMTR                      VARCHAR2(1) := '|';
    V_CCN_ACCOUNTING_ROWTYPE     CCN_ACCOUNTING_TBL%ROWTYPE;

BEGIN
    --Check if the Legacy Division changed
    --If so we need to start a new listing of that particular Legacy Division
    IF IN_PREV_REC.LEGACY_DIVISION <> IN_REC.LEGACY_DIVISION THEN
        OUT_CLOB := OUT_CLOB || 
                    IN_REC.LEGACY_DIVISION || '_Selling' ||  V_DLMTR ||
                    IN_REC.LEGACY_DIVISION || '_' || IN_STORE_REP ||  V_DLMTR ||
                    IN_REC.LEGACY_DIVISION || '_' || UPPER(IN_STORE_REP) || '_' || UPPER(IN_REC.LEGACY_DIVISION_NAME) ||  CHR(13);
    END IF;

    --Check if the Division/Area changed
    --If so we need to start a new listing of that particular Division
    IF IN_PREV_REC.DIVISION <> IN_REC.DIVISION OR IN_PREV_REC.AREA <> IN_REC.AREA THEN
        OUT_CLOB := OUT_CLOB ||
                   IN_REC.LEGACY_DIVISION || '_' || IN_STORE_REP ||  V_DLMTR ||
                   IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || '_' || IN_STORE_REP ||  V_DLMTR || 
                   IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || '_' || UPPER(IN_STORE_REP) || '_' ||
                   UPPER(IN_REC.AREA_NAME) || CHR(13);
    END IF;


    --Check if the District changed
    --If so we need to start a new listing of that particular District
    IF IN_PREV_REC.DIVISION || IN_PREV_REC.DISTRICT <> IN_REC.DIVISION || IN_REC.DISTRICT THEN
        OUT_CLOB := OUT_CLOB ||
                   IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || '_' || IN_STORE_REP ||  V_DLMTR ||
                   IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || IN_REC.DISTRICT || '_' || IN_STORE_REP || V_DLMTR ||
                   IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || IN_REC.DISTRICT || '_' || UPPER(IN_STORE_REP)|| '_' ||
                   UPPER(IN_REC.DISTRICT_NAME)  || CHR(13);
    END IF;

    --Check if the City changed
    --If so we need to start a new listing of that particular City
    IF IN_PREV_REC.DIVISION || IN_PREV_REC.DISTRICT || IN_PREV_REC.CITY_SALES_MANAGER <> IN_REC.DIVISION || IN_REC.DISTRICT || IN_REC.CITY_SALES_MANAGER THEN
        OUT_CLOB := OUT_CLOB ||
            IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || IN_REC.DISTRICT || '_' || IN_STORE_REP ||  V_DLMTR ||
            IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || IN_REC.DISTRICT || '_' ||IN_REC.CITY_SALES_MANAGER || '_' || IN_STORE_REP || V_DLMTR ||
            IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || IN_REC.DISTRICT || '_' ||IN_REC.CITY_SALES_MANAGER || '_' || UPPER(IN_STORE_REP)||'_' ||
            UPPER(IN_REC.CITY_SALES_MANAGER_NAME) ||  CHR(13);
    END IF;

    GET_ACCOUNT_DETAILS(IN_REC.COST_CENTER_CODE,IN_REC."CATEGORY",V_CCN_ACCOUNTING_ROWTYPE ) ;

    --List all the cost centers under that City
    OUT_CLOB := OUT_CLOB ||
                IN_REC.LEGACY_DIVISION || '_' || IN_REC.DIVISION || IN_REC.AREA || IN_REC.DISTRICT ||'_' || IN_REC.CITY_SALES_MANAGER || '_' || IN_STORE_REP ||  V_DLMTR ||
                IN_REC.COST_CENTER_CODE                               ||  V_DLMTR ||
                IN_REC.COST_CENTER_NAME                               ||  V_DLMTR || V_DLMTR || -- extra delimiter as we do not have data for admin manager
                V_CCN_ACCOUNTING_ROWTYPE."CATEGORY"                   ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CATEGORY_DESC                ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.ACQUISITION_CODE             ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.ACQUISITION_CODE_DESC        ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.STATEMENT_TYPE               ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.STATEMENT_TYPE_DESC          ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.MISSION_TYPE_CODE            ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.MISSION_TYPE_CODE_DESC       ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.OPEN_DATE                    ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CLOSE_DATE                   ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CURRENCY_CODE                ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CURRENCY_CODE_DESC           ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.MKT_MISSION                  ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.MKT_MISSION_DESC             ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.STATE_CODE                   ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.STATE_DESCRIPTION            ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.PROVINCE_CODE                ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.PROVINCE_DESCRIPTION         ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.DIVISION                     ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.DIVISION_NAME                ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.AREA                         ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.AREA_NAME                    ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.DISTRICT                     ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.DISTRICT_NAME                ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CITY_SALES_MGR               ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CITY_SALES_MGR_NAME          ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.COA_DIVISION                 ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.COA_DIVISION_NAME            ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.DIV_MGR_NAME                 ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.AREA_MGR_NAME                ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.DISTRICT_MGR_NAME            ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CITY_SALES_MANAGER_NAME      ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.CC_MGR_NAME                  ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.STATUS_CODE                  ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.STATUS_CODE_DESC             ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.TERRITORY_BUSN_CODE          ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.TERRITORY_BUSN_CODE_DESC     ||  V_DLMTR ||
                V_CCN_ACCOUNTING_ROWTYPE.TERRITORY_REP                ||  V_DLMTR || CHR(13);
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_REC.COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GENERATE_CLOB', SQLERRM, SQLCODE);
        RAISE;
END GENERATE_CLOB;

PROCEDURE GENERATE_ADMIN_CLOB(
/****************************************************************************** 
This package is intended to create store and reps hierarchy file as an csv

Created : 12/13/2017 sxg151 -- CCN coding project
Changed :
******************************************************************************/
    IN_REC             IN     CC_HIER_REC,
    IN_PREV_REC        IN     CC_HIER_REC,
    IN_STORE_REP       IN     VARCHAR2,
    OUT_CLOB              OUT CLOB)
IS
    V_DLMTR                      VARCHAR2(1) := '|';
    V_CCN_ACCOUNTING_ROWTYPE     CCN_ACCOUNTING_TBL%ROWTYPE;
    V_LAST_CODE                  VARCHAR2(250):= NULL;
    V_PRE_STRING                 CHAR(1):='S';
BEGIN
    --Check if the Legacy Division changed
    --If so we need to start a new listing of that particular Legacy Division
    IF (IN_REC.LEGACY_DIVISION IS NOT NULL) AND NVL(IN_PREV_REC.LEGACY_DIVISION,'XX') <> IN_REC.LEGACY_DIVISION THEN
        OUT_CLOB := OUT_CLOB ||
                    IN_REC.LEGACY_DIVISION || V_DLMTR ||
                    IN_REC.LEGACY_DIVISION || '_' || IN_STORE_REP ||  V_DLMTR ||
                    IN_REC.LEGACY_DIVISION || '_' || UPPER(IN_STORE_REP) ||  CHR(13);
    END IF;
    
    IF (IN_REC.DOMAIN IS NOT NULL) AND ( NVL(IN_PREV_REC.DOMAIN,'XX') <> IN_REC.DOMAIN) THEN
        OUT_CLOB := OUT_CLOB ||
                    IN_REC.LEGACY_DIVISION || '_' || IN_STORE_REP ||  V_DLMTR ||
                    V_PRE_STRING || IN_REC.DOMAIN||  V_DLMTR || 
                    V_PRE_STRING || IN_REC.DOMAIN || '_' || UPPER(IN_REC.DOMAIN_NAME) || CHR(13);
    END IF;

    IF (IN_REC."GROUP" IS NOT NULL) AND ( NVL(IN_PREV_REC."GROUP",'XX') <> IN_REC."GROUP") THEN
        OUT_CLOB := OUT_CLOB ||
                    V_PRE_STRING || IN_REC.DOMAIN ||  V_DLMTR ||
                    V_PRE_STRING || IN_REC."GROUP"||  V_DLMTR || 
                    V_PRE_STRING || IN_REC."GROUP" || '_' || UPPER(IN_REC.GROUP_NAME) || CHR(13);
    END IF;

    --Check if the Division changed
    IF (IN_REC.DIVISION IS NOT NULL) AND ( NVL(IN_PREV_REC.DIVISION,'XX') <> IN_REC.DIVISION) THEN
        OUT_CLOB := OUT_CLOB ||
                   V_PRE_STRING || IN_REC."GROUP" ||  V_DLMTR ||
                   V_PRE_STRING || IN_REC.DIVISION ||  V_DLMTR || 
                   V_PRE_STRING || IN_REC.DIVISION || '_' || UPPER(IN_REC.DIVISION_NAME) || CHR(13);
    END IF;

    IF  (IN_REC.AREA IS NOT NULL ) AND (NVL(IN_PREV_REC.AREA,'XX') <> IN_REC.AREA) THEN
        OUT_CLOB := OUT_CLOB ||
                    V_PRE_STRING || IN_REC.DIVISION ||  V_DLMTR ||
                    V_PRE_STRING || IN_REC.AREA  ||  V_DLMTR || 
                    V_PRE_STRING || IN_REC.AREA || '_'  || UPPER(IN_REC.AREA_NAME) || CHR(13);
    END IF;

    --Check if the District changed
    --If so we need to start a new listing of that particular District
    IF (IN_REC.DISTRICT IS NOT NULL ) AND  (IN_PREV_REC.DIVISION || NVL(IN_PREV_REC.DISTRICT,'XX') <> IN_REC.DIVISION || IN_REC.DISTRICT) THEN
        OUT_CLOB := OUT_CLOB ||
                    V_PRE_STRING || IN_REC.AREA ||  V_DLMTR ||
                    V_PRE_STRING || IN_REC.DISTRICT || V_DLMTR ||
                    V_PRE_STRING || IN_REC.DISTRICT || '_' || UPPER(IN_REC.DISTRICT_NAME)  || CHR(13);

    END IF;

    --Check if the City changed
    --If so we need to start a new listing of that particular City
    IF (IN_REC.CITY_SALES_MANAGER IS NOT NULL) AND (IN_PREV_REC.DIVISION || IN_PREV_REC.DISTRICT || NVL(IN_PREV_REC.CITY_SALES_MANAGER,'XX') <> IN_REC.DIVISION || IN_REC.DISTRICT || IN_REC.CITY_SALES_MANAGER) THEN
        OUT_CLOB := OUT_CLOB ||
                    V_PRE_STRING || IN_REC.DISTRICT ||  V_DLMTR ||
                    V_PRE_STRING || IN_REC.CITY_SALES_MANAGER || V_DLMTR ||                  
                    V_PRE_STRING || IN_REC.CITY_SALES_MANAGER || '_' ||UPPER(IN_REC.CITY_SALES_MANAGER_NAME) ||  CHR(13);
    END IF;
    
    
    IF (IN_REC."ZONE" IS NOT NULL) AND (IN_PREV_REC.DIVISION || IN_PREV_REC.DISTRICT || IN_PREV_REC.CITY_SALES_MANAGER  || NVL(IN_REC."ZONE",'XX') <> IN_REC.DIVISION || IN_REC.DISTRICT || IN_REC.CITY_SALES_MANAGER || IN_REC."ZONE") THEN
        OUT_CLOB := OUT_CLOB ||
                    V_PRE_STRING || IN_REC.CITY_SALES_MANAGER ||  V_DLMTR ||
                    V_PRE_STRING || IN_REC."ZONE"             || V_DLMTR ||
                    V_PRE_STRING || IN_REC."ZONE"             || '_' ||UPPER(IN_REC.ZONE_NAME) ||  CHR(13);
    END IF;

    IF (IN_REC.DOMAIN IS NOT NULL) THEN
        V_LAST_CODE := TO_CHAR(IN_REC."DOMAIN");
    END IF;
    IF (IN_REC."GROUP" IS NOT NULL) THEN
        V_LAST_CODE := TO_CHAR(IN_REC."GROUP");
    END IF;
    IF (IN_REC.DIVISION IS NOT NULL) THEN
        V_LAST_CODE := TO_CHAR(IN_REC.DIVISION);
    END IF;
    IF (IN_REC.AREA IS NOT NULL ) THEN
        V_LAST_CODE := TO_CHAR(IN_REC.AREA);
    END IF;
    IF (IN_REC.DISTRICT IS NOT NULL ) THEN
      V_LAST_CODE := TO_CHAR(IN_REC.DISTRICT);
    END IF;
    IF (IN_REC.CITY_SALES_MANAGER IS NOT NULL ) THEN
      V_LAST_CODE := TO_CHAR(IN_REC.CITY_SALES_MANAGER);
    END IF;
    IF (IN_REC."ZONE" IS NOT NULL ) THEN
      V_LAST_CODE := TO_CHAR(IN_REC."ZONE");
    END IF;

    --List all the cost centers under that City
    OUT_CLOB := OUT_CLOB ||
                V_PRE_STRING || V_LAST_CODE                             ||  V_DLMTR ||
                IN_REC.COST_CENTER_CODE                                 ||  V_DLMTR ||
                IN_REC.COST_CENTER_NAME                                 ||  V_DLMTR ||
                CCN_HIERARCHY.GET_MGR_NAME_FNC(IN_REC.COST_CENTER_CODE) ||  V_DLMTR ||  CHR(13);
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_REC.COST_CENTER_CODE, 'CCN_EPM_FEED_PKG.GENERATE_ADMIN_CLOB', SQLERRM, SQLCODE);
        RAISE;
END GENERATE_ADMIN_CLOB;

PROCEDURE GENERATE_FILE
/****************************************************************************** 
This PROCEDURE generates the EPM hierarchy file as an pipe delimited file

Created : 12/12/2017 sxg151 -- CCN coding project
Changed :
******************************************************************************/
IS
    CURSOR legacy_gl_divisions IS
        SELECT DISTINCT LEGACY_DIVISION
          FROM HIERARCHY_DETAIL_VIEW
         WHERE HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION'
          AND LEGACY_DIVISION IN ('L01', 'L02', 'L03', 'L04', 'L06', 'F08')
        ORDER BY 1 DESC;

    CURSOR selling_store_cur(IN_LEGACY_DIVISION    VARCHAR2) IS
        SELECT B.LEGACY_DIVISION,
               B.LEGACY_DIVISION_NAME,
               A.DOMAIN AS DOMAIN,
               A.DOMAIN_NAME AS DOMAIN_NAME,
               A."GROUP",
               A.GROUP_NAME,
               A.DIVISION,
               A.DIVISION_NAME,
               A.AREA,
               A.AREA_NAME,
               A.DISTRICT,
               A.DISTRICT_NAME,
               A.CITY_SALES_MANAGER,
               A.CITY_SALES_MANAGER_NAME,
               A."ZONE" AS "ZONE",
               A.ZONE_NAME AS ZONE_NAME,
               A.COST_CENTER_CODE,
               A.COST_CENTER_NAME,
               CC."CATEGORY"
          FROM (SELECT * FROM HIERARCHY_DETAIL_VIEW WHERE HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY') A,
               (SELECT * FROM HIERARCHY_DETAIL_VIEW WHERE HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION') B,
               COST_CENTER CC
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE
           AND A.COST_CENTER_CODE = CC.COST_CENTER_CODE
           AND B.LEGACY_DIVISION  = IN_LEGACY_DIVISION
           AND CC.CATEGORY IN ('D','O','S')
           AND NOT EXISTS (SELECT 1
                             FROM CC_DELETION_GUIDS CD 
                            WHERE CD.COST_CENTER_CODE = A.COST_CENTER_CODE)
           AND A.COST_CENTER_CODE NOT LIKE 'O%'
         ORDER BY B.LEGACY_DIVISION, A.DIVISION, A.AREA, A.DISTRICT, A.CITY_SALES_MANAGER, A.COST_CENTER_CODE;

    CURSOR reps_cur(IN_LEGACY_DIVISION    VARCHAR2) IS
        SELECT B.LEGACY_DIVISION,
               B.LEGACY_DIVISION_NAME,
               A.DOMAIN AS DOMAIN,
               A.DOMAIN_NAME AS DOMAIN_NAME,
               A."GROUP",
               A.GROUP_NAME,
               A.DIVISION,
               A.DIVISION_NAME,
               A.AREA,
               A.AREA_NAME,
               A.DISTRICT,
               A.DISTRICT_NAME,
               A.CITY_SALES_MANAGER,
               A.CITY_SALES_MANAGER_NAME,
               A."ZONE" AS "ZONE",
               A.ZONE_NAME AS ZONE_NAME,
               A.COST_CENTER_CODE,
               A.COST_CENTER_NAME,
               CC."CATEGORY"
          FROM (SELECT * FROM HIERARCHY_DETAIL_VIEW WHERE HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY') A,
               (SELECT * FROM HIERARCHY_DETAIL_VIEW WHERE HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION') B,
               COST_CENTER CC
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE
           AND A.COST_CENTER_CODE = CC.COST_CENTER_CODE
           AND B.LEGACY_DIVISION  = IN_LEGACY_DIVISION
           AND REGEXP_LIKE(A.CITY_SALES_MANAGER,NVL('[A-Z]+$','*')) 
           AND NOT EXISTS (SELECT 1
                           FROM CC_DELETION_GUIDS CD
                          WHERE CD.COST_CENTER_CODE = A.COST_CENTER_CODE)
           AND A.COST_CENTER_CODE NOT LIKE 'O%'
         ORDER BY B.LEGACY_DIVISION, A.DIVISION, A.AREA, A.DISTRICT, A.CITY_SALES_MANAGER, A.COST_CENTER_CODE;

    CURSOR admin_cur(IN_LEGACY_DIVISION    VARCHAR2) IS
        SELECT  B.LEGACY_DIVISION AS LEGACY_DIVISION,
                B.LEGACY_DIVISION_NAME AS LEGACY_DIVISION_NAME,
                H.DOMAIN_VAL AS DOMAIN,
                H.DOMAIN_VAL_NAME AS DOMAIN_NAME,
                H.GROUP_VAL AS   "GROUP",
                H.GROUP_VAL_NAME AS GROUP_NAME,
                H.DIVISION_VAL AS DIVISION,
                H.DIVISION_VAL_NAME AS DIVISION_NAME,
                H.AREA_VAL AS AREA,
                H.AREA_VAL_NAME AS AREA_NAME,
                H.DISTRICT_VAL  AS DISTRICT,
                H.DISTRICT_VAL_NAME AS DISTRICT_NAME,
                H.CITY_SALES_MANAGER_VAL AS CITY_SALES_MANAGER,
                H.CITY_SALES_MANAGER_VAL_NAME AS CITY_SALES_MANAGER_NAME,
                H.ZONE_VAL AS "ZONE",
                H.ZONE_VAL_NAME AS ZONE_NAME,
                CC.COST_CENTER_CODE,
                CC.COST_CENTER_NAME,
                CC."CATEGORY"
           FROM COST_CENTER CC,
               (SELECT * FROM HIERARCHY_DETAIL_VIEW WHERE HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION') B ,
                --inner sub query "T" gives all the hierarchy details with all the levels
                --present in the CCN system by joining the header, description and detail tables
               (WITH T AS (SELECT HDESC.HRCHY_HDR_LVL_DESC DESCRIPTION,
                                  HD.HRCHY_DTL_CURR_ROW_VAL COST_CENTER_CODE,
                                  HD.HRCHY_HDR_NAME,
                                  HD.HRCHY_DTL_EFF_DATE,
                                  HD.HRCHY_DTL_EXP_DATE,
                                  HD.HRCHY_DTL_CURR_LVL_VAL,
                                  -- 1 + sum of level values till that level - level value for that level = starting point for this level
                                  -- Curr level value length - Already substringed = Remaining length
                                  -- Cost Center is identified using Remaining length = 6
                                  SUBSTR(HD.HRCHY_DTL_CURR_LVL_VAL, 1 + HDESC.SUM_VAL - HDESC.LVL_VALUE_SIZE, CASE WHEN floor(LENGTH(HD.HRCHY_DTL_CURR_LVL_VAL)/4) < HRCHY_HDR_LVL_NBR+1  THEN 0 ELSE HDESC.LVL_VALUE_SIZE END) VAL,
                                  (SELECT HRCHY_DTL_DESC
                                     FROM HIERARCHY_DETAIL
                                    WHERE HRCHY_DTL_CURR_LVL_VAL = SUBSTR(HD.HRCHY_DTL_CURR_LVL_VAL, 1, HDESC.SUM_VAL)
                                      AND HRCHY_DTL_LEVEL <  floor(LENGTH(HD.HRCHY_DTL_CURR_LVL_VAL)/4)
                                      AND HRCHY_DTL_LEVEL = (HDESC.HRCHY_HDR_LVL_NBR)  
                                      AND HRCHY_HDR_NAME  = 'ADMINORG_HIERARCHY'
                                      AND ROWNUM < 2)  VAL_NAME
                             FROM HIERARCHY_DETAIL HD,
                                  HIERARCHY_HEADER HH,
                                  (SELECT HRCHY_HDR_NAME,
                                          HRCHY_HDR_LVL_NBR,
                                          HRCHY_HDR_LVL_DESC,
                                          LVL_VALUE_SIZE,
                                          SUM(LVL_VALUE_SIZE) OVER (PARTITION BY HRCHY_HDR_NAME ORDER BY HRCHY_HDR_LVL_NBR) SUM_VAL
                                     FROM HIERARCHY_DESCRIPTION) HDESC
                            WHERE HD.HRCHY_HDR_NAME  = HDESC.HRCHY_HDR_NAME
                              AND HD.HRCHY_HDR_NAME  = HH.HRCHY_HDR_NAME
                              AND HD.HRCHY_HDR_NAME  = 'ADMINORG_HIERARCHY'
                              AND NVL(HD.HRCHY_DTL_NEXT_LVL_VAL, '~~~') = '~~~')
                 SELECT *
                   FROM T
                        --PIVOT function convers this entire result set into a transpose (level of rows to level of columns)
                        --so that we get one record for each hierarchy with all level values as its columns
                        PIVOT 
                        (MAX(VAL) AS VAL,
                         MAX(VAL_NAME) AS VAL_NAME FOR (DESCRIPTION) IN ('Domain' AS DOMAIN,
                                                                         'Group' AS "GROUP",
                                                                         'Division' AS DIVISION,
                                                                         'Area' AS AREA,
                                                                         'District' AS DISTRICT,
                                                                         'City/Sales Manager' AS CITY_SALES_MANAGER,
                                                                         'Zone' AS "ZONE"))) H
        WHERE CC.COST_CENTER_CODE = H.COST_CENTER_CODE
          AND CC.COST_CENTER_CODE = B.COST_CENTER_CODE
          AND B.LEGACY_DIVISION   = IN_LEGACY_DIVISION
          AND NOT EXISTS (SELECT 1 FROM CC_DELETION_GUIDS CD WHERE CD.COST_CENTER_CODE = B.COST_CENTER_CODE)
          AND B.COST_CENTER_CODE NOT LIKE 'O%'
        ORDER BY B.LEGACY_DIVISION,H.GROUP_VAL NULLS LAST, H.DIVISION_VAL NULLS LAST, H.AREA_VAL NULLS LAST, H.DISTRICT_VAL NULLS LAST, H.CITY_SALES_MANAGER_VAL NULLS LAST, CC.COST_CENTER_CODE ;

    V_PREV_REC           CC_HIER_REC;
    V_DEF_REC            CC_HIER_REC;
    V_DLMTR              VARCHAR2(1) := '|';
    V_CLOB               CLOB;
    V_OUT_CLOB           CLOB;

    PATH                  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME              VARCHAR2(50) := 'SELLING_STORE_HRCHY_FORMAT_' || TO_CHAR(SYSDATE,'MMDDRR') || '.dat'; --File Name
    OUTPUT_FILE           UTL_FILE.FILE_TYPE;
BEGIN
    --Open the file to write the data
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH, FILENAME, 'W' ,32767);

    --Write header information (column headings)
    V_CLOB :=   'PARENT'                            || V_DLMTR ||
                'CHILD'                             || V_DLMTR ||
                'DESCRIPTION'                       || V_DLMTR ||
                'ADMIN_CC_MANAGER'                  || V_DLMTR ||
                'CATEGORY'                          || V_DLMTR ||
                'CATEGORY_DESC'                     || V_DLMTR ||
                'ACQUISITION_CODE'                  || V_DLMTR ||
                'ACQUISITION_CODE_DESC'             || V_DLMTR ||
                'STATEMENT_TYPE'                    || V_DLMTR ||
                'STATEMENT_TYPE_DESC'               || V_DLMTR ||
                'MISSION_TYPE_CODE'                 || V_DLMTR ||
                'MISSION_TYPE_CODE_DESC'            || V_DLMTR ||
                'OPEN_DATE'                         || V_DLMTR ||
                'CLOSE_DATE'                        || V_DLMTR ||
                'CURRENCY_CODE'                     || V_DLMTR ||
                'CURRENCY_CODE_DESC'                || V_DLMTR ||
                'MKT_MISSION'                       || V_DLMTR ||
                'MKT_MISSION_DESC'                  || V_DLMTR ||
                'STATE_CODE'                        || V_DLMTR ||
                'STATE_DESCRIPTION'                 || V_DLMTR ||
                'PROVINCE_CODE'                     || V_DLMTR ||
                'PROVINCE_DESCRIPTION'              || V_DLMTR ||
                'DIVISION'                          || V_DLMTR ||
                'DIVISION_NAME'                     || V_DLMTR ||
                'AREA'                              || V_DLMTR ||
                'AREA_NAME'                         || V_DLMTR ||
                'DISTRICT'                          || V_DLMTR ||
                'DISTRICT_NAME'                     || V_DLMTR ||
                'CITY_SALES_MGR'                    || V_DLMTR ||
                'CITY_SALES_MGR_NAME'               || V_DLMTR ||
                'COA_DIVISION'                      || V_DLMTR ||
                'COA_DIVISION_NAME'                 || V_DLMTR ||
                'DIV_MGR_NAME'                      || V_DLMTR ||
                'AREA_MGR_NAME'                     || V_DLMTR ||
                'DISTRICT_MGR_NAME'                 || V_DLMTR ||
                'CITY/SALES_MANAGER_NAME'           || V_DLMTR ||
                'CC_MGR_NAME'                       || V_DLMTR ||
                'STATUS_CODE'                       || V_DLMTR ||
                'STATUS_CODE_DESC'                  || V_DLMTR ||
                'TERRITORY_BUSN_CODE'               || V_DLMTR ||
                'TERRITORY_BUSN_CODE_DESC'          || V_DLMTR ||
                'TERRITORY_REP';

    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    V_CLOB := NULL;
    DBMS_OUTPUT.PUT_LINE('1');
    --Loop through the cursor to write the details
    FOR rec IN legacy_gl_divisions LOOP
        V_CLOB :=   'PSG' ||  V_DLMTR ||  REC.LEGACY_DIVISION ||  CHR(13);
        V_CLOB :=   V_CLOB || 
                    REC.LEGACY_DIVISION ||  V_DLMTR ||
                    REC.LEGACY_DIVISION || '_Selling' || CHR(13);

        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
        V_CLOB := NULL; 
        FOR rec1 IN selling_store_cur(rec.LEGACY_DIVISION) LOOP
            GENERATE_CLOB(REC1, V_PREV_REC, 'Stores', V_CLOB);
            --Writ the data to the file
            IF V_CLOB <> EMPTY_CLOB() THEN
                UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
            END IF;
            V_PREV_REC := REC1;
        END LOOP;

        V_PREV_REC:= V_DEF_REC;
        V_CLOB := NULL;
        FOR rec1 IN reps_cur(rec.LEGACY_DIVISION) LOOP
            GENERATE_CLOB(REC1, V_PREV_REC, 'Reps', V_CLOB);
            --Writ the data to the file
            IF V_CLOB <> EMPTY_CLOB() THEN
                UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
            END IF;
           V_PREV_REC := REC1;
        END LOOP;
        V_PREV_REC:= V_DEF_REC;
        V_CLOB := NULL;

        FOR REC1 IN admin_cur(rec.LEGACY_DIVISION) LOOP
            GENERATE_ADMIN_CLOB(REC1, V_PREV_REC, 'Admin', V_OUT_CLOB);
            --Writ the data to the file
            IF V_OUT_CLOB <> EMPTY_CLOB() THEN
                UTL_FILE.PUT_LINE(OUTPUT_FILE, V_OUT_CLOB, TRUE);
            END IF;
            V_PREV_REC := REC1;
            V_OUT_CLOB := NULL;
        END LOOP;
        V_PREV_REC:= V_DEF_REC;
        V_CLOB := NULL;
    END LOOP;

    --Close the file once the data write is complete
    UTL_FILE.FCLOSE(OUTPUT_FILE);
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'CCN_EPM_FEED_PKG.GENERATE_FILE', SQLERRM, SQLCODE);
        IF UTL_FILE.IS_OPEN(OUTPUT_FILE) THEN
            UTL_FILE.FCLOSE(OUTPUT_FILE);
        END IF;
        RAISE;
END GENERATE_FILE;

END CCN_EPM_FEED_PKG;