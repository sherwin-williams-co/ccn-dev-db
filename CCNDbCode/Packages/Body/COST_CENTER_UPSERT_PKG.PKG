create or replace PACKAGE  BODY COST_CENTER_UPSERT_PKG
    AS 
 
PROCEDURE CC_UPSERT_PROCESS ( 
 /******************************************************************************
	CC_UPSERT_PROCESS   --    Cost Center Update delete Procedure

	This procedure is intended to update the database for the following tables used in
        Cost Center UI.
	Tables: 
              COST_CENTER
           ,  ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
            , STATUS
            , TYPE
            , MARKETING
            , PHONE
            , TAXWARE
            , ADDRESS tables.  
            
Revised : 05/06/2014 SXT410 CCN Project...
           Calling COMPARE_ZIPCODE_SP to Compare Taxware Zip Code with Address Zip Code.
changed : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB and removed unwanted address code later
        : 01/23/2017 MXK766 CCN Project.....
          Added changes related to file generation for pos downloads.
		: rxv940 CCN Project Team.....
		: Removed call to RETURN_COST_CENTER_CODE to retrieve the cost_center_code
		 Parsing the XML to retrieve the cost_center_code and conditionally
		 calling the POS_MASTER_SP sub-program
*******************************************************************************/

 in_row_data  in varchar2) --sys.xmltype
 
 IS

--cursor to get table names....

 cursor TABLES_CUR is
 
 SELECT table_name
 FROM insertorder
 ORDER BY table_order
 ;

v_Row_data xmltype := sys.xmltype(in_Row_data);

in_table_name varchar2(25);

v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);

--
v_xml_cost_center_frag clob;
v_xml_phone_frag clob;
v_xml_addr_usa_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
v_xml_addr_mex_frag clob;
v_xml_addr_brb_frag clob;
v_xml_type_frag clob;
v_xml_status_frag clob;
v_xml_taxware_frag clob;
v_xml_marketing_frag clob;
v_xml_administration_frag clob;
v_xml_store_frag clob;
v_xml_other_frag clob;
v_xml_real_estate_frag clob;
v_xml_territory_frag clob;
--

V_COST_CENTER_ROWTYPE      COST_CENTER%rowtype;
V_PHONE_ROWTYPE                  PHONE%rowtype;
V_ADDRUSA_ROWTYPE              ADDRESS_USA%rowtype;
V_ADDRCAN_ROWTYPE              ADDRESS_CAN%rowtype;
V_ADDRMEX_ROWTYPE              ADDRESS_MEX%rowtype;
V_ADDROTHER_ROWTYPE          ADDRESS_OTHER%rowtype;
V_ADDRBRB_ROWTYPE          ADDRESS_BRB%rowtype;
V_TYPE_ROWTYPE                     TYPE%rowtype;
V_STATUS_ROWTYPE                  STATUS%rowtype;
V_TAXWARE_ROWTYPE              TAXWARE%rowtype;
V_MARKETING_ROWTYPE           MARKETING%rowtype;
V_TERRITORY_ROWTYPE            TERRITORY%rowtype;
V_STORE_ROWTYPE                   STORE%rowtype;
V_OTHER_ROWTYPE                   OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE    ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE        REAL_ESTATE%rowtype;

--
v_count integer := 1;

v_cost_center_code  COST_CENTER.COST_CENTER_CODE%TYPE;
begin

--
--    Removing fragments to send to individual procedures.
--

--Validating Business Rules
CCN_UI_INTERFACE_APP_PKG.VALIDATE_BUSINESS_RULES('COST_CENTER',in_row_data);

 for tables_rec in tables_cur loop 

    if (v_Row_data.existsNode('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) then
    
       v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();

       if tables_rec.table_name in ('ADDRESS_USA', 'ADDRESS_CAN', 'ADDRESS_MEX', 'ADDRESS_OTHER', 'ADDRESS_BRB') then  
    --      EXECUTE CC_ADDRESS_TABLES_UI; 
              CCN_TABLE_IU_PKG.CC_ADDRESS_TABLES_UI_SP (
              tables_rec.table_name                      
             ,in_Row_data);         
       end if;

	end if;
   
    if (v_Row_data.existsNode('/COST_CENTER_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| tables_rec.table_name).getCLOBVal();
     
        case tables_rec.table_name
            when 'COST_CENTER' 	then v_xml_cost_center_frag := v_xml_frag;
            when 'STATUS' 		  then v_xml_status_frag := v_xml_frag;
            when 'TYPE'		      then v_xml_type_frag := v_xml_frag;
            when 'TAXWARE'	  	then v_xml_taxware_frag := v_xml_frag;
            when 'MARKETING'		then v_xml_marketing_frag := v_xml_frag;
            when 'ADMINISTRATION' 	then v_xml_administration_frag := v_xml_frag;
            when 'STORE' 	     	then v_xml_store_frag := v_xml_frag;
            when 'OTHER'		    then v_xml_other_frag := v_xml_frag;
            when 'REAL_ESTATE'	then v_xml_real_estate_frag := v_xml_frag;
            when 'TERRITORY'		then v_xml_territory_frag := v_xml_frag;
        else
            null;
        end case;

        in_table_name := tables_rec.table_name;  		
 
 
        if tables_rec.table_name in ('ADMINISTRATION', 'STORE', 'OTHER', 'REAL_ESTATE', 'TERRITORY') then  
    --      EXECUTE CC_ADDTL_TABLES_UI; 
    
            CCN_TABLE_IU_PKG.CC_ADDTL_TABLES_UI_SP (
             in_table_name                      
            ,in_Row_data
            );

        end if;
            
 --  COST_CENTER insert/update process 
       begin
        
          if v_xml_cost_center_frag  is not null  
          	and tables_rec.table_name = 'COST_CENTER' then
			
				IF (XMLTYPE(v_xml_cost_center_frag).existsnode('/COST_CENTER/COST_CENTER_CODE') = 1) THEN
					v_cost_center_code := TO_CHAR(XMLTYPE(v_xml_cost_center_frag).extract('/COST_CENTER/COST_CENTER_CODE/text()').getstringVal());
				END IF;
				
                CCN_TABLE_IU_PKG.COST_CENTER_I_SP (
                  null   
                , 'COST_CENTER' 
                , null
                , v_xml_cost_center_frag);    
                 --   , v_cost_center_rowtype );
           end if; 
          
       EXCEPTION
          when dup_val_on_index  then 
            begin
              CCN_TABLE_IU_PKG.COST_CENTER_U_SP (                 
                 null   
                , 'COST_CENTER' 
                , null
                , v_xml_cost_center_frag);        
	
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' Cost Center Update Error ' );
            end;
       end;

 --  STATUS insert/update process 
 
       begin
       
          if v_xml_status_frag  is not null 
          and tables_rec.table_name = 'STATUS' then
          
              CCN_TABLE_IU_PKG.STATUS_I_SP (
                'STATUS'             
                , v_xml_status_frag                
                , V_STATUS_ROWTYPE );
            end if;
      EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.STATUS_U_SP (
                'STATUS'
                , v_xml_status_frag                 
                , v_status_rowtype );

            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' Status Update Error ' );
            end;
      end;

 --  TYPE insert/update process 

      begin
        
          if v_xml_type_frag  is not null 
          and tables_rec.table_name = 'TYPE' then
              CCN_TABLE_IU_PKG.TYPE_I_SP (
                 'TYPE'                
                , v_xml_type_frag                
                , V_TYPE_ROWTYPE );
          end if;
      EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TYPE_U_SP (
                  'TYPE'             
                , v_xml_type_frag                
                , v_type_rowtype );
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' Type Update Error ' );
           end;
      end;


--  MARKETING insert/update process 

       begin
        
          if v_xml_marketing_frag  is not null 
          and tables_rec.table_name = 'MARKETING' then
              CCN_TABLE_IU_PKG.MARKETING_I_SP (                            
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag);                 
             
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.MARKETING_U_SP (                  
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag); 

                                          
                     
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' MARKETING Update Error ' );
           end;
        end;

--  TAXWARE insert/update process 

       begin
                
          if v_xml_taxware_frag  is not null 
          and tables_rec.table_name = 'TAXWARE' then
          
              CCN_TABLE_IU_PKG.TAXWARE_I_SP (                            
                 'TAXWARE' 
                , v_xml_taxware_frag
                , V_TAXWARE_ROWTYPE);    
          end if;                             
          
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TAXWARE_U_SP (                  
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);  
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' TAXWARE Update Error ' );
           end;
        end;

       CCN_BUSINESS_RULES_PKG.COMPARE_ZIPCODE_SP( v_taxware_rowtype.cost_center_code );
  end if;   

 -- 
      if (v_Row_data.existsNode('/COST_CENTER_UI/PHONE_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1) then
 --/COST_CENTER_UI/PHONE_TABLE/PHONE[1] 
        
              WHILE V_ROW_DATA.EXISTSNODE('/COST_CENTER_UI/PHONE_TABLE/' || TABLES_REC.TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP
                 v_xml_phone_frag := v_Row_data.extract('/COST_CENTER_UI/PHONE_TABLE/'|| tables_rec.table_name || '[' || v_count || ']').getCLOBVal();
 
                
    
 --  PHONE_TABLE insert/update process 
              begin
              
                if v_xml_phone_frag  is not null  then
                   CCN_TABLE_IU_PKG.PHONE_I_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);                    
                  
                end if;
          
              EXCEPTION
                 when dup_val_on_index  then
                   begin
                     CCN_TABLE_IU_PKG.PHONE_U_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);


                     
              EXCEPTION 
                 WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                   v_errm ||
                   ' Phone Update Error ' );
             end;
           end;

              v_count := v_count + 1;
              
              END LOOP; --phone loop
      end if;    



   end loop; --tables_cur

    POS_DATA_GENERATION.POS_MASTER_SP(v_cost_center_code);


    EXCEPTION
    when others then
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
          v_errm ||
          ' Errors' );
 END CC_UPSERT_PROCESS;

END COST_CENTER_UPSERT_PKG;