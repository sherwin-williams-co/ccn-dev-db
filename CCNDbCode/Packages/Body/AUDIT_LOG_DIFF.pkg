PACKAGE BODY AUDIT_LOG_DIFF as 
/*********************************************************** 
This package has procedures and functions related to the audit_log table
created : 02/29/2012 tal CCN project
revisions: 
************************************************************/

FUNCTION XML_EXTRACT_NO_EXCEPTION
/**********************************************************
This function returns null if XPATH does not exist within xmltype, 
oracle throws an exception if not handled this way
**********************************************************/
( p_xml IN XMLTYPE
, p_xpath IN VARCHAR2
) RETURN VARCHAR2 

IS

BEGIN
    RETURN CASE WHEN P_XML.EXTRACT(P_XPATH) IS NOT NULL THEN
      p_xml.extract(p_xpath || '/text()').getstringval()
    ELSE 
       NULL
END;

END XML_EXTRACT_NO_EXCEPTION;


PROCEDURE PARSE_DIFFERENCE_XML
/*******************************************************
Procedure to Parse xmls from the audit_log table and 
create an output xml with the differences

Author   : OXD

versions : 02/22/2012
*******************************************************/
( IN_TABLE_NAME IN VARCHAR2
,  IN_KEY        IN VARCHAR2
, OUT_DIFF OUT XMLTYPE
)
IS
ROW_CURR	AUDIT_LOG.TABLE_ROW_DATA%TYPE;
ROW_PREV	AUDIT_LOG.TABLE_ROW_DATA%TYPE;
V_CONTEXT	VARCHAR2(200);

COMP_CURR VARCHAR2(1000);
COMP_PREV	VARCHAR2(1000);

XMLSTRING	VARCHAR2(30000):='';

SQ		INTEGER;
SE		VARCHAR2(1000);

CURSOR GET_COLS (IN_TABLE IN VARCHAR2)
IS
    	SELECT COLUMN_NAME
      	FROM ALL_TAB_COLUMNS
      	WHERE TABLE_NAME = IN_Table
      	ORDER BY COLUMN_NAME;

BEGIN

	V_CONTEXT := 'Selecting Previous Row from Audit_Log';
	
	SELECT TABLE_ROW_DATA INTO ROW_PREV
	FROM   AUDIT_LOG AL, BATCH_JOB	 BATCH
	WHERE  AL.TABLE_NAME		= IN_TABLE_NAME
	AND    BATCH.BATCH_JOB_NAME	= 'BACKFEED_AUDIT_LOG'
	AND    BATCH.BATCH_JOB_LAST_RUN_DATE		= AL.AUDIT_REC_EFF_DATE
	AND    AL.AUDIT_REC_FLAG	= 'R'	
	AND    AL.AUDIT_REC_EFF_DATE IN
				(SELECT MAX(AL1.AUDIT_REC_EFF_DATE)
				 FROM	AUDIT_LOG AL1
				 WHERE  AL1.TABLE_NAME = AL.TABLE_NAME
				 AND    AL1.AUDIT_REC_FLAG	= 'R'
				 );
	
	
	
	V_CONTEXT := 'Selecting Current Row from Audit_Log';
	
	SELECT TABLE_ROW_DATA INTO ROW_CURR
	FROM   AUDIT_LOG AL	 
	WHERE  TABLE_NAME=IN_TABLE_NAME
	AND    AL.TRANSACTION_DATE IN
				(SELECT MAX(AL1.TRANSACTION_DATE)
				 FROM	AUDIT_LOG AL1
				 WHERE  AL1.TABLE_NAME = AL.TABLE_NAME
				 );
	
	
	V_CONTEXT := 'Parsing the XMLType';
	
	--Start building the XML string
  
	XMLSTRING := '<' || IN_Table_name || ' xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';
	
	
	FOR GET_COLS_REC IN GET_COLS(IN_TABLE_NAME) LOOP
    
    /*The function XML_EXTRACT_NO_EXCEPTION is used, it uses the extract function on the xmltype like given below
    p_xml.extract(p_xpath || '/text()').getstringval() */
    
    COMP_CURR := XML_EXTRACT_NO_EXCEPTION(ROW_CURR,'//' || GET_COLS_REC.COLUMN_NAME);
        
		COMP_PREV := XML_EXTRACT_NO_EXCEPTION(ROW_PREV,'//' || GET_COLS_REC.COLUMN_NAME);
    
    --If the elements have changed, append them to the XML string
		
		IF NVL(COMP_CURR,'A') <> NVL(COMP_PREV,'A') THEN
		    
			XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
				
		END IF;
		
		
	END LOOP;
	
	
	V_CONTEXT := 'Final value being set';
		
	XMLSTRING := XMLSTRING || '</' || IN_Table_name || '>';
		
	V_CONTEXT := 'Converting to XMLType';
	
  --Convert the final XML String to XMLType and set it to the OUT parameter
  
	OUT_DIFF  := XMLType(XMLSTRING);
	
	
	
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  
                     --errnums.EN_XMLCOMP_ERR -20003
	ERRPKG.RAISE_ERR(errnums.EN_XMLCOMP_ERR,'PARSE_DIFFERENCE_XML',V_CONTEXT);
	
	
END PARSE_DIFFERENCE_XML;

END AUDIT_LOG_DIFF;
/

