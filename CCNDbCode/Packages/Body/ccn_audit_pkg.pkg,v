head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2013.06.24.21.01.27;	author sw\kdp465;	state Exp;
branches;
next	1.7;
deltatype	text;
kopt	kv;
permissions	666;
commitid	23d851c8b3a67576;
filename	ccn_audit_pkg.pkg;

1.7
date	2013.06.21.15.09.23;	author sw\sxh487;	state Exp;
branches;
next	1.6;
deltatype	text;
kopt	kv;
permissions	666;
commitid	273851c46ca27d9a;
filename	ccn_audit_pkg.pkg;

1.6
date	2013.06.20.14.35.14;	author sw\sxh487;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	ad851c313211555;
filename	ccn_audit_pkg.pkg;

1.5
date	2013.06.18.21.17.52;	author sw\kdp465;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	26a851c0ce7f2d3a;
filename	ccn_audit_pkg.pkg;

1.4
date	2013.05.21.14.36.26;	author sw\sxh487;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	26b0519b86696e42;
filename	ccn_audit_pkg.pkg;

1.3
date	2013.05.15.12.36.31;	author sw\sxh487;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
permissions	666;
commitid	22545193814e3dae;
filename	ccn_audit_pkg.pkg;

1.2
date	2013.04.18.20.17.16;	author sw\sxh487;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2b04517054ca60b9;
filename	ccn_audit_pkg.pkg;

1.1
date	2012.10.02.21.08.21;	author sw\kdp465;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1524506b57c3197d;
filename	ccn_audit_pkg.pkg;


desc
@@


1.8
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@PACKAGE BODY CCN_AUDIT_PKG as 
/*********************************************************** 
This package has procedures and functions related to the audit_log table
created : 02/29/2012 tal CCN project
revisions: 
************************************************************/

FUNCTION XML_TO_STRING

/*******************************************************
Function to Return pipe delimited string (key value 
concatenated) based on the input key XML 

created : 06/07/2012
*******************************************************/

( 
  IN_Table_Name 	IN 	VARCHAR2
, IN_XML_KEY 		IN 	XMLTYPE
)
  RETURN VARCHAR2

IS

CURSOR KEY_COL IS
	SELECT COL.COLUMN_NAME
	FROM ALL_CONS_COLUMNS COL, ALL_CONSTRAINTS CON
	WHERE COL.TABLE_NAME = CON.TABLE_NAME
	AND CON.CONSTRAINT_TYPE = 'P' 
	AND COL.CONSTRAINT_NAME = CON.CONSTRAINT_NAME
	AND COL.TABLE_NAME = IN_Table_Name
	ORDER BY COL.POSITION;

	V_CONCAT_STR	VARCHAR2(1000):='|';
	V_CONTEXT	VARCHAR2(200);
	SQ NUMBER;
	SE VARCHAR2(100);
        

BEGIN
	V_CONTEXT := 'Looping through input key XML';
	
	FOR KEY_COLS_REC IN KEY_COL LOOP
            V_CONCAT_STR := V_CONCAT_STR ||  XML_EXTRACT_NO_EXCEPTION(IN_XML_KEY,'//' || KEY_COLS_REC.COLUMN_NAME) || '|';
	END LOOP;
	
	V_CONTEXT := 'Returning string';
	
	RETURN V_CONCAT_STR;

EXCEPTION WHEN OTHERS THEN
	SQ := SQLCODE;
	SE := SQLERRM;
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 

	ERRPKG.RAISE_ERR(-20003,'XML_TO_STRING',V_CONTEXT);

END XML_TO_STRING;
	

FUNCTION XML_EXTRACT_NO_EXCEPTION
/**********************************************************
This function returns null if XPATH does not exist within xmltype, 
oracle throws an exception if not handled this way
**********************************************************/
( p_xml IN XMLTYPE
, p_xpath IN VARCHAR2
) RETURN VARCHAR2 

IS

BEGIN

    RETURN 
	    CASE WHEN P_XML.EXTRACT(P_XPATH) IS NOT NULL THEN
	      p_xml.extract(p_xpath || '/text()').getstringval()
	    ELSE 
	       NULL
	    END;

END XML_EXTRACT_NO_EXCEPTION;

PROCEDURE SELECT_AUDIT_LOG
/**********************************************************
Selects all rows from audit_log that have changed from
the last run of the backfeed process

created : 06/07/2012
**********************************************************/

IS

/*CURSOR SEL_AUDIT_LOG IS
SELECT 'COST_CENTER' AS TABLE_NAME --AL.TABLE_NAME
,'12345678'AS TRANSACTION_ID       --,AL.TRANSACTION_ID
FROM DUAL;
*/

CURSOR SEL_AUDIT_LOG IS
SELECT DISTINCT AL.TABLE_NAME,AL.TRANSACTION_ID
  FROM AUDIT_LOG AL,
       BATCH_JOB BATCH
WHERE  BATCH.BATCH_JOB_NAME = 'BACKFEED_AUDIT_LOG'
AND    AL.TRANSACTION_DATE  >= BATCH.BATCH_JOB_LAST_RUN_DATE
--and    TABLE_NAME IN ('COST_CENTER','TAXWARE') -- for testing only, remove after testing
AND    BATCH.BATCH_JOB_LAST_RUN_DATE 
       IN
       (
        SELECT MAX(B1.BATCH_JOB_LAST_RUN_DATE)
          FROM BATCH_JOB B1
         WHERE B1.BATCH_JOB_NAME= 'BACKFEED_AUDIT_LOG'
       )
and AL.AUDIT_REC_FLAG IS NULL
	;

V_CONTEXT	VARCHAR2(200);
SQ		INTEGER;
SE		VARCHAR2(1000);

DIFF_XML            XMLTYPE;
v_code              NUMBER;
v_errm              varchar2(500);  
V_CC_CODE           COST_CENTER.COST_CENTER_CODE%TYPE;
V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_BATCH_JOB_STATUS  BATCH_JOB.BATCH_JOB_STATUS%TYPE := 'PROCESSING';
v_change_type       varchar2(1) := 'A';
       
BEGIN

V_CONTEXT:='Inserting a record in the Batch_Job table with Status as PROCESSING';
CCN_BATCH_PKG.INSERT_BATCH_JOB('BACKFEED_AUDIT_LOG', V_BATCH_NUMBER);

FOR SEL_AUDIT_REC IN SEL_AUDIT_LOG LOOP
    BEGIN
          SAVEPOINT NEXT_AUDIT_REC;
                 
                  V_CONTEXT:='Call procedure PARSE_DIFFERENCE_XML for every combination of table_name,transaction_id';
                  PARSE_DIFFERENCE_XML( SEL_AUDIT_REC.TABLE_NAME
                                       ,SEL_AUDIT_REC.TRANSACTION_ID
                                       ,V_CC_CODE
  				       ,V_CHANGE_TYPE
                                       ,DIFF_XML);

                  V_CONTEXT:='Call procedure Build_File_SP';
                  DBMS_OUTPUT.PUT_LINE('DIFF XML ' || DIFF_XML.getCLOBVal());
                  BUILD_FILE_SP 
                        (	 V_CC_CODE
                                ,SEL_AUDIT_REC.TABLE_NAME	--in_TABLE_NAME IN VARCHAR2
                                ,SYSDATE			--in_ROW_DATE   IN DATE
                                ,DIFF_XML			--in_Row_data   IN sys.xmltype
                                ,V_CHANGE_TYPE
                        );
      EXCEPTION
           WHEN OTHERS THEN
             ROLLBACK TO NEXT_AUDIT_REC;
             V_TRANS_STATUS := 'ERROR';
             v_code  := SQLCODE;
             v_errm  := substr(SQLERRM,1,500);
             --write to error log
             errpkg.INSERT_ERROR_LOG_SP(v_code, 'SELECT_AUDIT_LOG', v_errm, V_CC_CODE); 
      END;
     
END LOOP;  
      
      V_CONTEXT:='Updating the Status in batch_job table';
      CCN_BATCH_PKG.UPDATE_BATCH_JOB('BACKFEED_AUDIT_LOG', V_BATCH_NUMBER, V_TRANS_STATUS); 
      
EXCEPTION WHEN OTHERS THEN
         
	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
 
	ERRPKG.RAISE_ERR(-20003,'SELECT_AUDIT_LOG',V_CONTEXT);
 
END SELECT_AUDIT_LOG;

PROCEDURE PARSE_DIFFERENCE_XML

/*******************************************************
Procedure to Parse xmls from the audit_log table and 
create an output xml with the differences

Author   : 

versions : 02/22/2012
*******************************************************/

( IN_TABLE_NAME IN VARCHAR2
, IN_KEY        IN VARCHAR2
, OUT_CC_CODE 	OUT VARCHAR2
, OUT_CHANGE_TYPE OUT VARCHAR2
, OUT_DIFF OUT XMLTYPE
)

IS

ROW_CURR	 AUDIT_LOG.TABLE_ROW_DATA%TYPE;
V_LOG_ID_CURR    AUDIT_LOG.LOG_ID%TYPE;
ROW_PREV	 AUDIT_LOG.TABLE_ROW_DATA%TYPE;
V_LOG_ID_PREV    AUDIT_LOG.LOG_ID%TYPE;
V_CONTEXT	 VARCHAR2(200);
V_COSTCENTERCODE COST_CENTER.COST_CENTER_CODE%TYPE;
v_change_type    VARCHAR2(1);

COMP_CURR       VARCHAR2(1000);
COMP_PREV	VARCHAR2(1000);

XMLSTRING	VARCHAR2(30000):='';

SQ		INTEGER; 
SE		VARCHAR2(1000);

CURSOR GET_COLS (IN_TABLE IN VARCHAR2)
IS
    	SELECT COLUMN_NAME
          FROM ALL_TAB_COLUMNS
      	 WHERE TABLE_NAME = IN_TABLE
         ORDER BY COLUMN_NAME;

BEGIN

	V_CONTEXT := 'Selecting Previous Row from Audit_Log';

	BEGIN

		SELECT TABLE_ROW_DATA, LOG_ID INTO ROW_PREV, V_LOG_ID_PREV
		FROM   AUDIT_LOG AL, BATCH_JOB BATCH
		WHERE  AL.TABLE_NAME = IN_TABLE_NAME
		AND    BATCH.BATCH_JOB_NAME = 'BACKFEED_AUDIT_LOG'
		AND    TRUNC(BATCH.BATCH_JOB_LAST_RUN_DATE) = TRUNC(AL.AUDIT_REC_EFF_DATE)
		AND    AL.AUDIT_REC_FLAG = 'R'	
	  	AND    AL.TRANSACTION_ID = IN_KEY
		AND    AL.AUDIT_REC_EFF_DATE IN
					(SELECT MAX(AL1.AUDIT_REC_EFF_DATE)
					   FROM	AUDIT_LOG AL1
					  WHERE AL1.TABLE_NAME = AL.TABLE_NAME
                                            AND AL1.TRANSACTION_ID = IN_KEY
					    AND AL1.AUDIT_REC_FLAG = 'R'
					 )
  		AND BATCH.BATCH_JOB_LAST_RUN_DATE 
     	  IN
     	  (
     	   SELECT MAX(B1.BATCH_JOB_LAST_RUN_DATE)
     	     FROM BATCH_JOB B1
     	    WHERE B1.BATCH_JOB_NAME= 'BACKFEED_AUDIT_LOG'
     	  );
     	  
              V_CHANGE_TYPE := 'C';
       
	EXCEPTION

		WHEN NO_DATA_FOUND THEN
                     v_change_type := 'A';
	    --NULL;
	END;
	
	V_CONTEXT := 'Selecting Current Row from Audit_Log';
	
       SELECT TABLE_ROW_DATA, LOG_ID INTO ROW_CURR, V_LOG_ID_CURR
	 FROM AUDIT_LOG AL	 
	WHERE TABLE_NAME=IN_TABLE_NAME
          AND AL.TRANSACTION_ID = IN_KEY
	  AND AL.TRANSACTION_DATE IN
				(SELECT MAX(AL1.TRANSACTION_DATE)
				   FROM	AUDIT_LOG AL1
				  WHERE AL1.TABLE_NAME = AL.TABLE_NAME
                                    AND AL1.TRANSACTION_ID = IN_KEY
				 );
        --dbms_output.put_line('The change type ' || v_change_type);	
	V_CONTEXT := 'Parsing the XMLType';
	
	--Start building the XML string
  
	XMLSTRING := '<' || IN_Table_name || ' xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';
	
	
	FOR GET_COLS_REC IN GET_COLS(IN_TABLE_NAME) LOOP
    
            /*The function XML_EXTRACT_NO_EXCEPTION is used, it uses the extract function on the xmltype like given below
            p_xml.extract(p_xpath || '/text()').getstringval() */
                
               IF V_CHANGE_TYPE = 'C' THEN
                  COMP_PREV := XML_EXTRACT_NO_EXCEPTION(ROW_PREV,'//' || GET_COLS_REC.COLUMN_NAME);
               END IF; 
        
               COMP_CURR := XML_EXTRACT_NO_EXCEPTION(ROW_CURR,'//' || GET_COLS_REC.COLUMN_NAME);
                        
               IF (COMP_CURR IS NULL) THEN
                   COMP_CURR := '~';
               end if; 



                        
               IF GET_COLS_REC.COLUMN_NAME = 'COST_CENTER_CODE' THEN
                  v_CostCenterCode := COMP_CURR;
               end if;
             
                    --If the elements have changed OR new row, append them to the XML string
                    IF v_change_type = 'A' THEN
                       XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
                    ELSE
                        IF NVL(COMP_CURR,'A') <> NVL(COMP_PREV,'A') THEN
                           XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
                        END IF;
                    END IF;
                    
	END LOOP;
--dbms_output.put_line('Cost Center ' || v_CostCenterCode);

           V_CONTEXT := 'Updating the PREV AUDIT_REC_FLAG to C';
            UPDATE AUDIT_LOG
               SET AUDIT_REC_FLAG = 'C',
                   AUDIT_REC_EFF_DATE = SYSDATE
             WHERE TABLE_NAME = IN_TABLE_NAME
               AND LOG_ID = V_LOG_ID_PREV
               AND TRANSACTION_ID = IN_KEY
               AND AUDIT_REC_FLAG = 'R';
        
            V_CONTEXT := 'Updating the CURR AUDIT_REC_FLAG to R';
            UPDATE AUDIT_LOG
               SET AUDIT_REC_FLAG = 'R'
             WHERE TABLE_NAME = IN_TABLE_NAME
               AND LOG_ID = V_LOG_ID_CURR
               AND TRANSACTION_ID = IN_KEY
               AND AUDIT_REC_FLAG IS NULL;
               
	V_CONTEXT := 'Final value being set';
		
	XMLSTRING := XMLSTRING || '</' || IN_Table_name || '>';
		
	V_CONTEXT := 'Converting to XMLType';
	
  --Convert the final XML String to XMLType and set it to the OUT parameter
  
	OUT_DIFF  := XMLType(XMLSTRING);
	OUT_CC_CODE := v_CostCenterCode;
	OUT_CHANGE_TYPE := v_change_type;
	
	
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
 
 	ERRPKG.RAISE_ERR(-20003,'PARSE_DIFFERENCE_XML for ' || IN_TABLE_NAME || ' ' || IN_KEY || 'at ', V_CONTEXT);
	
END PARSE_DIFFERENCE_XML; 

PROCEDURE Build_File_SP (
/**********************************************************
	Build_File_SP

	This procedure is intended to build a file based on the table layout
	in order to be consumed by the Mainframe to backfill Legacy MainFrame

	CostCenter - Cost Center that changed
	OracleTableName -Table name for row
	varible (based on the table that was updated)


created : 02/21/2012 kdp CCN Project....
**********************************************************/
IN_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
,in_TABLE_NAME IN VARCHAR2
,in_ROW_DATE   IN DATE
,in_Row_data    IN sys.XMLTYPE           
,in_CHANGE_TYPE in VARCHAR2
)
 is 
cursor table_fields_cur is

    	SELECT COLUMN_NAME
              ,decode(DATA_TYPE, 'DATE', 8
              	, DATA_LENGTH) COLUMN_SIZE
              ,DATA_TYPE
      	 FROM all_tab_columns
      	WHERE TABLE_NAME = in_table_name
        order by column_id asc;
--;
--

  PATH        	        VARCHAR2(50) := 'CCN_DATAFILES'; -- directory created in Oracle database UNTIL NEW ONE CREATED
  filename  	        varchar2(50) := in_TABLE_NAME || '_backfeed' ;
  stamp       		varchar2(50) := to_char(sysdate,'HH:MI:SS'); -- used to create timestamp for data file 
  output_file 		utl_file.file_type;

-------------
  l_out_file  UTL_FILE.file_type;
  l_buffer    RAW(32767);
  l_amount    BINARY_INTEGER := 32767;
  l_pos       INTEGER := 1;
  L_BLOB_LEN  INTEGER;
  v_out_clob  clob;

begin

-- working just remove for debbuging un comment for writing file
    dbms_output.put_line('start');
    output_file := utl_file.fopen (path
                                   ,filename|| stamp
                                   , 'w' --binary
                                   , 32767);
--*/
    --adding header information for the backload file
    --DBMS_OUTPUT.PUT_LINE('start v_out_clob');
     v_out_clob := to_char (trunc(sysdate),'YYYYMMDDHH24MISS') || in_cost_center || rpad(in_table_name,25) || to_char (trunc(sysdate),'YYYYMMDDHH24MISS') ||
     in_CHANGE_TYPE ;

/*
*/

      for table_fields_rec in table_fields_cur loop

	      if (in_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) then
	        if (table_fields_rec.data_type <> 'DATE') then

         		if ((in_table_name||' - '|| table_fields_rec.column_name = 'COST_CENTER - POS_PROG_VER_NBR' )) then
	        		v_out_clob := v_out_clob || UPPER(
	        				lpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
	        	            ,table_fields_rec.column_size,'0')
	        	            );	        	
	        	else
	        		v_out_clob := v_out_clob || UPPER(
	        				rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
	        	            ,table_fields_rec.column_size)
	        	            );
	        	end if;             
	        	            

	        else
				v_out_clob := v_out_clob || UPPER(
							rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
	        	            ,8)
	        	            );	        
	        end if;	            
	      else
	        v_out_clob := v_out_clob || rpad(' ',table_fields_rec.column_size);
	      end if;

      end loop ;
      
 --/* working just remove for debbuging un comment for writing file
     UTL_FILE.put_line(output_file, v_out_clob, TRUE);

     utl_file.fclose(output_file);
 --*/
 --dbms_output.put_line(v_out_clob);
end Build_File_SP;

END CCN_AUDIT_PKG;

@


1.7
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d131 1
a131 2
--'Inserting a record in the Batch_Job table with Status as PROCESSING';
V_CONTEXT:='Inserting in the Batch_Job table';
d294 3
d422 14
a435 2
	        	v_out_clob := v_out_clob || rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
	        	            ,table_fields_rec.column_size);
d437 4
a440 2
				v_out_clob := v_out_clob || rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
	        	            ,8);	        
d456 2
a457 1
END CCN_AUDIT_PKG;@


1.6
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d132 2
a133 1
V_CONTEXT:='Inserting a record in the Batch_Job table with Status as PROCESSING';
a164 2
      
       V_CONTEXT:='Updating the Status in batch_job table';
d167 2
d350 1
a350 1
 	ERRPKG.RAISE_ERR(-20003,'PARSE_DIFFERENCE_XML',V_CONTEXT);
@


1.5
log
@date formats
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
d166 1
a166 2
       CCN_BATCH_PKG.UPDATE_BATCH_JOB('BACKFEED_AUDIT_LOG', V_BATCH_NUMBER, V_TRANS_STATUS); 
       
d168 2
a169 1

d377 2
a378 1
              ,DATA_LENGTH COLUMN_SIZE
d440 1
a440 2
END CCN_AUDIT_PKG;

@


1.4
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d377 1
d411 2
d417 7
a423 3
	
	        v_out_clob := v_out_clob || rpad(in_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal()
	                    ,table_fields_rec.column_size);
d438 2
a439 1
END CCN_AUDIT_PKG;@


1.3
log
@Audit procs added
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d273 1
a273 1
        dbms_output.put_line('The change type ' || v_change_type);	
d310 1
a310 1
dbms_output.put_line('Cost Center ' || v_CostCenterCode);
@


1.2
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d106 1
d113 3
a115 1
       );
d252 2
a253 1
     	  v_change_type := 'C';
d255 1
a255 1
	
d257 1
a257 2
		
		v_change_type := 'A';
a258 1
	    
d273 1
a273 1
	
d283 6
a288 2
    /*The function XML_EXTRACT_NO_EXCEPTION is used, it uses the extract function on the xmltype like given below
    p_xml.extract(p_xpath || '/text()').getstringval() */
d290 19
a308 24
		IF V_CHANGE_TYPE = 'C' THEN
		   COMP_PREV := XML_EXTRACT_NO_EXCEPTION(ROW_PREV,'//' || GET_COLS_REC.COLUMN_NAME);
  		END IF; 

    	COMP_CURR := XML_EXTRACT_NO_EXCEPTION(ROW_CURR,'//' || GET_COLS_REC.COLUMN_NAME);
  		
  		IF (COMP_CURR IS NULL) THEN
                    COMP_CURR := '~';
  		end if; 
  		
    	IF GET_COLS_REC.COLUMN_NAME = 'COST_CENTER_CODE' THEN
           v_CostCenterCode := COMP_CURR;
        end if;
     
    	--If the elements have changed OR new row, append them to the XML string
    	
            IF v_change_type = 'A' THEN
	       XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
	    ELSE
	    	IF NVL(COMP_CURR,'A') <> NVL(COMP_PREV,'A') THEN
        	   XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
		END IF;
	    END IF;
		
d310 2
a311 1
	
d407 1
a407 1
DBMS_OUTPUT.PUT_LINE('start v_out_clob');
d429 1
a429 1
 dbms_output.put_line(v_out_clob);
@


1.1
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1 1
a1 1
CREATE OR REPLACE
d29 2
a30 2
	WHERE COL.TABLE_NAME=CON.TABLE_NAME
	AND CON.CONSTRAINT_TYPE='P'
d32 1
a32 1
	AND COL.TABLE_NAME=IN_Table_Name
d39 1
d45 1
a45 1
		V_CONCAT_STR := V_CONCAT_STR ||  XML_EXTRACT_NO_EXCEPTION(IN_XML_KEY,'//' || KEY_COLS_REC.COLUMN_NAME) || '|';
d80 1
a80 1
		END;
d94 6
d113 1
a113 1
       
d118 8
a125 3
DIFF_XML  XMLTYPE;
V_CC_CODE COST_CENTER.COST_CENTER_CODE%TYPE;
v_change_type varchar2(1);
d129 2
a130 1
V_CONTEXT:='Call procedure PARSE_DIFFERENCE_XML for every combination of table_name,transaction_id';
d133 32
a164 15

  PARSE_DIFFERENCE_XML(SEL_AUDIT_REC.TABLE_NAME
  						,SEL_AUDIT_REC.TRANSACTION_ID
  						,V_CC_CODE
  						,v_change_type
  						,DIFF_XML);
  						
  Build_File_SP 
  (		V_CC_CODE					--in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
		,SEL_AUDIT_REC.TABLE_NAME	--in_TABLE_NAME IN VARCHAR2
		,SYSDATE					--in_ROW_DATE   IN DATE
		,DIFF_XML					--in_Row_data    IN sys.xmltype
		,v_change_type
        );
  
d168 1
a168 1

d173 1
a173 2
  

d175 1
a175 2
    

a177 2


d198 7
a204 5
ROW_CURR	AUDIT_LOG.TABLE_ROW_DATA%TYPE;
ROW_PREV	AUDIT_LOG.TABLE_ROW_DATA%TYPE;
V_CONTEXT	VARCHAR2(200);
v_CostCenterCode COST_CENTER.COST_CENTER_CODE%TYPE;
v_change_type VARCHAR2(1);
d206 1
a206 1
COMP_CURR VARCHAR2(1000);
d211 1
a211 1
SQ		INTEGER;
d217 3
a219 6
      	FROM ALL_TAB_COLUMNS
      	WHERE TABLE_NAME = IN_Table
      	ORDER BY COLUMN_NAME;
        
        

d226 2
a227 2
	
		SELECT TABLE_ROW_DATA INTO ROW_PREV
d229 4
a232 4
		WHERE  AL.TABLE_NAME		= IN_TABLE_NAME
		AND    BATCH.BATCH_JOB_NAME	= 'BACKFEED_AUDIT_LOG'
		AND    TRUNC(BATCH.BATCH_JOB_LAST_RUN_DATE)		= TRUNC(AL.AUDIT_REC_EFF_DATE)
		AND    AL.AUDIT_REC_FLAG	= 'R'	
d236 4
a239 4
					 FROM	AUDIT_LOG AL1
					 WHERE  AL1.TABLE_NAME = AL.TABLE_NAME
			         AND    AL.TRANSACTION_ID = IN_KEY
					 AND    AL1.AUDIT_REC_FLAG	= 'R'
d241 1
a241 1
  		AND    BATCH.BATCH_JOB_LAST_RUN_DATE 
d247 1
a247 1
     	  )       ;
d261 5
a265 5
	SELECT TABLE_ROW_DATA INTO ROW_CURR
	FROM   AUDIT_LOG AL	 
	WHERE  TABLE_NAME=IN_TABLE_NAME
  AND    AL.TRANSACTION_ID = IN_KEY
	AND    AL.TRANSACTION_DATE IN
d267 3
a269 3
				 FROM	AUDIT_LOG AL1
				 WHERE  AL1.TABLE_NAME = AL.TABLE_NAME
         AND    AL.TRANSACTION_ID = IN_KEY
a271 1
	
a282 3
    
    	

d284 2
a285 2
		IF v_change_type = 'C' then
			COMP_PREV := XML_EXTRACT_NO_EXCEPTION(ROW_PREV,'//' || GET_COLS_REC.COLUMN_NAME);
d290 2
a291 2
  		if (COMP_CURR IS NULL) then
  			COMP_CURR := '~';
d294 3
a296 5
    	if GET_COLS_REC.COLUMN_NAME = 'COST_CENTER_CODE' THEN
    	       
    		v_CostCenterCode := COMP_CURR;
    	
    	end if;
d300 2
a301 4
		IF v_change_type = 'A' THEN
		
			XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
		    	   
d304 1
a304 4
		    
			XMLSTRING := XMLSTRING || '<' || GET_COLS_REC.COLUMN_NAME || '>' || COMP_CURR || '</' || GET_COLS_REC.COLUMN_NAME || '>';
				
			END IF;
d306 1
d310 17
a326 1
	
d346 2
a347 4
  

	ERRPKG.RAISE_ERR(-20003,'PARSE_DIFFERENCE_XML',V_CONTEXT);
	
d365 1
a365 1
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
d368 1
a368 1
,in_Row_data    IN sys.xmltype           
d374 3
a376 3
    	SELECT column_name
          ,data_length column_size
      	FROM all_tab_columns
d378 1
a378 2
        order by column_id asc
      	;
d382 4
a385 4
  path        	        varchar2(50) := 'CCN_LOAD_FILES'; -- directory created in Oracle database UNTIL NEW ONE CREATED
  filename  			      varchar2(50) := in_TABLE_NAME || '_backfeed';
  stamp       			    varchar2(50) := to_char(sysdate,'HH:MI:SS'); -- used to create timestamp for data file /app/cpr/fldpayroll
  output_file 			utl_file.file_type;
d392 2
a393 2
  l_blob_len  INTEGER;
  v_out_clob clob;
d398 1
d400 1
a400 1
                                   ,filename || stamp
d405 1
d409 1
d421 1
d427 1
a427 1
 --dbms_output.put_line(v_out_clob);
d430 1
a430 4

END CCN_AUDIT_PKG;

/@

