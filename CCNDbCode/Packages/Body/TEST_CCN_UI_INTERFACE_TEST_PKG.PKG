package body TEST_CCN_UI_INTERFACE_TEST_PKG
    as
-- PACKAGE BODY
/****************************************************************************** 
This package is intended will return data for the cost_center table

created : 09/18/2012 TAL -- CCN coding project
changed : 
******************************************************************************/

--TESTING FOR JAVACODE WITH MULTIPLE CURSORS......REMOVE

	PROCEDURE TEST_COST_CENTER_S_SP(
/******************************************************************************
	TEST_COST_CENTER_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the cost center table.  

created : 
*******************************************************************************/
 in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE
, out_COST_CENTER_REF_CUR OUT REF_CURSOR
, out_STORE_REF_CUR OUT REF_CURSOR)
        is                  

	BEGIN

		  OPEN out_COST_CENTER_REF_CUR FOR
			  SELECT * 
			  FROM cost_center 
			  where cost_center_code = in_COST_CENTER;
			  
		  OPEN out_STORE_REF_CUR FOR
			  SELECT * 
			  FROM store 
			  where cost_center_code = in_COST_CENTER;			  
	  
	END TEST_COST_CENTER_S_SP;

--REMOVE TESTING


PROCEDURE ADDRESS_UI_SP ( inCost_center                   in COST_CENTER.cost_center_code%type
                         ,inCountry_code                  in COST_CENTER.country_code%type
                         ,inAddressType					          in ADDRESS_USA.address_type%type DEFAULT NULL                                                 
                         ,out_ADDRESS_REF_CUR             out sys_refcursor)
/*******************************************************************************
	ADDRESS_UI_SP

	This procedure is intended to return an address ref cursor with data to be
	used for java  ADDRESS screen. 
     
created : 09/05/2012 BLR CCN UI Project....
revised :
*******************************************************************************/
        is                  
 v_code number;
 v_errm varchar2(500);
 v_in_costctr varchar2(6);  
 
 v_cost_center_row         COST_CENTER%ROWTYPE;
 v_home_store              TERRITORY.home_store%TYPE;
 
 invalid_country_code_err    EXCEPTION;
-- invalid_cost_center_err     EXCEPTION;

  BEGIN 
         
/*  
 1.0  For VALIDATION OF COUNTRY_CODE INPUT 
*/		
      if  not common_tools.code_detail_valid ('COUNTRY_CODE',inCountry_code) then  -- value not found in table 
              raise invalid_country_code_err; 
      end if; 
  
 /*  
 2.0  Get Cost Center Table for Category code validation
*/	
      
      select * into v_cost_center_row
              from COST_CENTER
              where cost_center_code =   inCost_center;
 
/*  
 3.0  when category code equal 'T' use home_store cost center
*/  
   
      if v_cost_center_row.category = 'T'  then    
         select home_store 
           into v_home_store
           from TERRITORY
           where cost_center_code =   inCost_center;	         
         else
           v_home_store := inCost_center;      
      end if;
 /*  
4.0  Validate which Country code column is being processed to extract correct
      address table such as:
      - ADDRESS_USA;
      - ADDRESS_CAN;
      - ADDRESS_MEX;
      - ADDRESS_OTHER
      ADDRESS_OTHER TABLE HOUSES ALL COUNTRIES EXCEPT USA, CANADA, PUERTO RICO, OR MEXICO
*/   
       
	    CASE ( inCountry_code ) 
        when 'USA' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );     
         
         when 'PRI' then
           CCN_TABLE_IU_PKG.ADDRESS_USA_S_SP (  
            v_home_store  
           ,inAddressType
           ,out_ADDRESS_REF_CUR );    
            
         when 'CAN' then
            CCN_TABLE_IU_PKG.ADDRESS_CAN_S_SP (                
             v_home_store 
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
                
         when 'MEX' then
            CCN_TABLE_IU_PKG.ADDRESS_MEX_S_SP (            
              v_home_store
             ,inAddressType
             ,out_ADDRESS_REF_CUR );
         else 
            CCN_TABLE_IU_PKG.ADDRESS_OTHER_S_SP (           
             v_home_store
            ,inAddressType
            ,out_ADDRESS_REF_CUR );
      
  END CASE; 
         
     
  EXCEPTION
       
   when invalid_country_code_err then  
        v_code := errnums.en_invalid_code_detail_err;
        errpkg.raise_err(v_code, 'ADDRESS_UI_SP.invalid_country_code_err ',    
        'Entered Country_Code was "' || InCountry_code || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Country code must be found on "CODE_DETAIL TABLE ". '); 
  
  
    when OTHERS then
       v_code := sqlcode;
	     v_errm := substr(sqlerrm,1, 500);
       errpkg.raise_err(v_code, v_errm ||
        'CCN_TABLE_IU_PKG '  || 'No errors found');
       
 END ADDRESS_UI_SP;
 

PROCEDURE COST_CENTER_UI_SP ( 
 /******************************************************************************
	COST_CENTER_UI_SP   --    Cost Center User Interface Procedure

	This procedure is intended to return a ref cursor with data from 
	from the COST_CENTER, ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
  STATUS, TYPE, MARKETING, PHONE, TAXWARE, and ADDRESS tables.  

created : 09/06/2012 MDH CCN Project....
*******************************************************************************/
            IN_COST_CENTER          IN  COST_CENTER.COST_CENTER_CODE%TYPE
 --          
					, OUT_COST_CENTER_REF_CUR       OUT SYS_REFCURSOR
 					, OUT_CC_CATEGORY_REF_CUR       OUT SYS_REFCURSOR    
          , OUT_STATUS_REF_CUR            OUT SYS_REFCURSOR     
    			, OUT_TYPE_REF_CUR              OUT SYS_REFCURSOR   
     			, OUT_MARKETING_REF_CUR         OUT SYS_REFCURSOR   
  				, OUT_TAXWARE_REF_CUR           OUT SYS_REFCURSOR    
      		, OUT_PHONE_REF_CUR             OUT SYS_REFCURSOR     
      		, OUT_ADDRESS_REF_CUR           OUT SYS_REFCURSOR  )

       IS   

v_code                 number;
v_errm                 VARCHAR(500);
v_address_type         VARCHAR2(1)  := 'M';
v_cost_center_rowtype  COST_CENTER%rowtype;
v_break                VARCHAR(100);

invalid_cost_center_err     EXCEPTION;

BEGIN --  COST_CENTER_UI_SP
--
  BEGIN -- Get Cost Center
  v_break  := ('Entered the Cost_Center_UI_SP ' 
                || ' in_cost_center = ' || in_cost_center ); 
--
/**  Call COST_CENTER to get Category Code  ***/
      select * into v_cost_center_rowtype
            from COST_CENTER          
            where cost_center_code = in_COST_CENTER; 
            
  EXCEPTION
     WHEN NO_DATA_FOUND then
           raise invalid_cost_center_err;
                  
  END; -- get Cost Center
--
--
/**  Call COST_CENTER Reference Cursor  ***/

      CCN_TABLE_IU_PKG.COST_CENTER_S_SP(
            in_cost_center          
 					, out_cost_center_ref_cur);      
--
--
/******************************************************************************
	Use the Category code of the COST_CENTER table to determine the type of 
	processing to be done as follows:
  
	  S  -->  Store, Marketing, and Taxware data
	  A  -->  Administration data
	  R  -->  Real_Estate data
	  T  -->  Territory data
    O  -->  Other, Marketing, and Taxware data    
*******************************************************************************/
--
v_break  :=  ('Entered the Category Routine ' 
              || ' in_cost_center = ' || in_cost_center 
              || ' category <' || v_cost_center_rowtype.category || '>');
--
      CASE ( v_cost_center_rowtype.category) 
        when 'S' then
 --         STORE Table
          v_break  :=  ('Entered the STORE Category Routine ' );
          CCN_TABLE_IU_PKG.STORE_S_SP(
            in_cost_center          
					, out_cc_category_ref_cur);  
 --         MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            in_cost_center
          , null
					, out_marketing_ref_cur);    
 --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            in_cost_center
					, out_taxware_ref_cur);             
          
        when 'A' then
 --         ADMINISTRATION Table
          v_break  :=  ('Entered the ADMINISTRATION Category Routine ' );
          CCN_TABLE_IU_PKG.ADMINISTRATION_S_SP(
            in_cost_center          
					, out_cc_category_ref_cur);  
          
        when 'R' then
 --         REAL_ESTATE Table
          v_break  :=  ('Entered the REAL ESTATE Category Routine ' );
          CCN_TABLE_IU_PKG.REAL_ESTATE_S_SP(
            in_cost_center          
					, out_cc_category_ref_cur);    
          
        when 'T' then
 --         TERRITORY Table
          v_break  :=  ('Entered the TERRITORY Category Routine ' );
          CCN_TABLE_IU_PKG.TERRITORY_S_SP(
            null   
           ,in_cost_center
					, out_cc_category_ref_cur);    
  
        when 'O' then
 --         OTHER Table
          v_break  :=  ('Entered the OTHER Category Routine ' );
          CCN_TABLE_IU_PKG.OTHER_S_SP(
            in_cost_center  
					, out_cc_category_ref_cur);  
 --          MARKETING Table
          CCN_TABLE_IU_PKG.MARKETING_S_SP(
            in_cost_center
          , null
					, out_marketing_ref_cur);
           --         TAXWARE Table
          CCN_TABLE_IU_PKG.TAXWARE_S_SP(
            in_cost_center
					, out_taxware_ref_cur);             
          
     END CASE;         
--
--
/**  Call STATUS Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || in_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '>');
--
      CCN_TABLE_IU_PKG.STATUS_S_SP(
            in_cost_center          
 					, null
 					, out_status_ref_cur);
--
--
/**  Call TYPE Reference Cursor  ***/
--
v_break  := ('Entered the STATUS Routine ' 
             || ' in_cost_center = ' || in_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '>');
--
      CCN_TABLE_IU_PKG.TYPE_S_SP(
            in_cost_center          
 					, null
          , out_type_ref_cur);
--
--
/**  Call PHONE Reference Cursor  ***/
--
v_break  := ('Entered the PHONE Routine ' 
             || ' in_cost_center = ' || in_cost_center 
             || ' category <' || v_cost_center_rowtype.category || '>');
--
      CCN_TABLE_IU_PKG.PHONE_S_SP(
            in_cost_center          
 					, out_phone_ref_cur);
--
--
/******************************************************************************
	Call the ADDRESS_UI_SP procedure to obtain the "Mailing" address only for 
	the cost center being processed.
  
 v_address_type is set to 'M' 
*******************************************************************************/	
--	
v_break  :=  ('Entered the ADDRESS Routine ' 
               || ' in_cost_center = ' || in_cost_center 
               || ' category <' || v_cost_center_rowtype.category || '>'
               || ' address type <' || v_address_type || '>'
               || ' country <' || v_cost_center_rowtype.country_code || '>' );
--
/**  Call ADDRESS Reference Cursor  based on country_code ***/  
--
--      CCN_TABLE_IU_PKG.ADDRESS_UI_SP(
      ADDRESS_UI_SP(
            in_cost_center
          , v_cost_center_rowtype.country_code
          , v_address_type
 					, out_address_ref_cur);
--
   v_break  := ('Ended call to COST_CENTER_UI_SP ' );
--   
--
 EXCEPTION
       
       when invalid_cost_center_err then  
        v_code := errnums.en_invalid_code_detail_err;
        errpkg.raise_err(v_code, 'COST_CENTER_UI_SP.invalid_cost_center_err '
        || v_break,    
        'Entered Cost_Center_Code was "' || In_Cost_Center || '". ' || 
        'CCN_TABLE_IU_PKG ' || 'Cost Center is not found - Would you like to Add? '
        ); 
        
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm 
                    || v_break
                    || 'COST_CENTER_UI_SP Error '
                    );   
 
       
       null;
  
end COST_CENTER_UI_SP;


PROCEDURE POLLING_UI_SP (
/******************************************************************************
	POLLING_UI_SP   --    Polling User Interface Stored Procedure

	This procedure is intended to return a ref cursor with data from 
	from the POLLING, BANK_CARD, and TERMINAL tables.  

created : 09/05/2012 TAL CCN Project....
********************************************************************************/
            in_cost_center            in  polling.cost_center_code%type
 					, in_polling_status_code    in  polling.polling_status_code%type
          , in_merchant_id_code       in  bank_card.merchant_id%type
          , in_terminal_number        in  terminal.terminal_number%type
          , in_effective_date         in  bank_card.effective_date%type   
					, out_polling_refcur        out sys_refcursor
 					, out_bank_card_refcur      out sys_refcursor
			    , OUT_TERMINAL_REFCUR       OUT SYS_REFCURSOR
          )
       is

v_code                 number;
v_errm                 varchar(500);
v_break                VARCHAR(100);
       
BEGIN --  POLLING_UI_SP

/**  Call POLLING Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.POLLING_S_SP ';

      CCN_TABLE_IU_PKG.POLLING_S_SP(
            in_cost_center          
 					, in_polling_status_code        
					, OUT_POLLING_REFCUR);  
          
      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.POLLING_S_SP ';      
      
/**  Call BANK_CARD Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';

      CCN_TABLE_IU_PKG.BANK_CARD_S_SP(
            in_cost_center          
 					, in_polling_status_code
          , in_merchant_id_code
					, OUT_BANK_CARD_REFCUR);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.BANK_CARD_S_SP ';
      
/**  Call TERMINAL Reference Cursor  ***/

      v_break   :=    'Begin call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';
      
      CCN_TABLE_IU_PKG.TERMINAL_S_SP(
            in_cost_center          
 					, in_polling_status_code
          , in_terminal_number
					, out_terminal_refcur);

      v_break   :=    'Ended call to CCN_TABLE_IU_PKG.TERMINAL_S_SP ';

 EXCEPTION
        
       when OTHERS then
                    v_code := sqlcode;
                    v_errm := substr(sqlerrm,1, 500);
                    errpkg.raise_err(v_code, v_errm ||
             		'COST_CENTER_UI_SP Error ' || 
                'Last Break Point was '    || v_break );   
 
       null;
 
END POLLING_UI_SP;

end TEST_CCN_UI_INTERFACE_TEST_PKG;
/

