CREATE OR REPLACE PACKAGE body CODE_HEADER_tapi
IS
  -- insert
PROCEDURE ins(
    IN_CODE_HEADER_EXPIRE_EFF_DATE IN CODE_HEADER.CODE_HEADER_EXPIRE_EFF_DATE%type DEFAULT NULL ,
    IN_CODE_HEADER_NAME            IN CODE_HEADER.CODE_HEADER_NAME%type ,
    IN_CODE_HEADER_EXPIRE_USER     IN CODE_HEADER.CODE_HEADER_EXPIRE_USER%type DEFAULT NULL ,
    IN_CODE_HEADER_EXPIRE_FLAG     IN CODE_HEADER.CODE_HEADER_EXPIRE_FLAG%type DEFAULT NULL ,
    IN_CODE_HEADER_TYPE            IN CODE_HEADER.CODE_HEADER_TYPE%type ,
    IN_CODE_HEADER_DTL_VAL_DEFAULT IN CODE_HEADER.CODE_HEADER_DTL_VAL_DEFAULT%type DEFAULT NULL ,
    IN_CODE_HEADER_DESCRIPTION     IN CODE_HEADER.CODE_HEADER_DESCRIPTION%type DEFAULT NULL ,
    IN_CODE_HEADER_DTL_VAL_SIZE    IN CODE_HEADER.CODE_HEADER_DTL_VAL_SIZE%type DEFAULT NULL )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  INSERT
  INTO CODE_HEADER
    (
      CODE_HEADER_EXPIRE_EFF_DATE ,
      CODE_HEADER_NAME ,
      CODE_HEADER_EXPIRE_USER ,
      CODE_HEADER_EXPIRE_FLAG ,
      CODE_HEADER_TYPE ,
      CODE_HEADER_DTL_VAL_DEFAULT ,
      CODE_HEADER_DESCRIPTION ,
      CODE_HEADER_DTL_VAL_SIZE
    )
    VALUES
    (
      IN_CODE_HEADER_EXPIRE_EFF_DATE ,
      IN_CODE_HEADER_NAME ,
      IN_CODE_HEADER_EXPIRE_USER ,
      IN_CODE_HEADER_EXPIRE_FLAG ,
      IN_CODE_HEADER_TYPE ,
      IN_CODE_HEADER_DTL_VAL_DEFAULT ,
      IN_CODE_HEADER_DESCRIPTION ,
      IN_CODE_HEADER_DTL_VAL_SIZE
    );

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'CODE_HEADER Insert');

END;

-- update
PROCEDURE upd
  (
    IN_CODE_HEADER_EXPIRE_EFF_DATE IN CODE_HEADER.CODE_HEADER_EXPIRE_EFF_DATE%type DEFAULT NULL ,
    IN_CODE_HEADER_NAME            IN CODE_HEADER.CODE_HEADER_NAME%type ,
    IN_CODE_HEADER_EXPIRE_USER     IN CODE_HEADER.CODE_HEADER_EXPIRE_USER%type DEFAULT NULL ,
    IN_CODE_HEADER_EXPIRE_FLAG     IN CODE_HEADER.CODE_HEADER_EXPIRE_FLAG%type DEFAULT NULL ,
    IN_CODE_HEADER_TYPE            IN CODE_HEADER.CODE_HEADER_TYPE%type ,
    IN_CODE_HEADER_DTL_VAL_DEFAULT IN CODE_HEADER.CODE_HEADER_DTL_VAL_DEFAULT%type DEFAULT NULL ,
    IN_CODE_HEADER_DESCRIPTION     IN CODE_HEADER.CODE_HEADER_DESCRIPTION%type DEFAULT NULL ,
    IN_CODE_HEADER_DTL_VAL_SIZE    IN CODE_HEADER.CODE_HEADER_DTL_VAL_SIZE%type DEFAULT NULL
  )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  UPDATE CODE_HEADER
  SET CODE_HEADER_EXPIRE_EFF_DATE = IN_CODE_HEADER_EXPIRE_EFF_DATE ,
    CODE_HEADER_EXPIRE_USER       = IN_CODE_HEADER_EXPIRE_USER ,
    CODE_HEADER_EXPIRE_FLAG       = IN_CODE_HEADER_EXPIRE_FLAG ,
    CODE_HEADER_DTL_VAL_DEFAULT   = IN_CODE_HEADER_DTL_VAL_DEFAULT ,
    CODE_HEADER_DESCRIPTION       = IN_CODE_HEADER_DESCRIPTION ,
    CODE_HEADER_DTL_VAL_SIZE      = IN_CODE_HEADER_DTL_VAL_SIZE
  WHERE CODE_HEADER_NAME          = IN_CODE_HEADER_NAME
  AND CODE_HEADER_TYPE            = IN_CODE_HEADER_TYPE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'CODE_HEADER Update');

END;

-- del
PROCEDURE del(
    IN_CODE_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%type ,
    IN_CODE_HEADER_TYPE IN CODE_HEADER.CODE_HEADER_TYPE%type )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  DELETE
  FROM CODE_HEADER
  WHERE CODE_HEADER_NAME = IN_CODE_HEADER_NAME
  AND CODE_HEADER_TYPE   = IN_CODE_HEADER_TYPE;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'CODE_HEADER Delete');

END;

END CODE_HEADER_tapi;

