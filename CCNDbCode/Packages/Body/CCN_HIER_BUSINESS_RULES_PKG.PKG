create or replace PACKAGE BODY          CCN_HIER_BUSINESS_RULES_PKG AS
/******************************************************************************
	CCN_HIER_BUSINESS_RULES_PKG

	This Package is intended to validate business rules for
	all the Hierarchies

created :SH 5/17/2013 

*******************************************************************************/

FUNCTION GET_HDR_LVL_NBR_SP(
/*******************************************************************************
 GET_HDR_LVL_NBR_SP

  This procedure will return the Level number of a HIERARCHY for the
  corresponding Description of the level

created : SH 05/17/2013
********************************************************************************/
in_HRCHY_HDR_NAME     IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE,
IN_HRCHY_HDR_LVL_DESC IN HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE
) return varchar2

IS

v_hrchy_hdr_lvl_nbr HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;

BEGIN
    SELECT HRCHY_HDR_LVL_NBR 
           INTO V_HRCHY_HDR_LVL_NBR
           from HIERARCHY_DESCRIPTION
          WHERE upper(HRCHY_HDR_NAME)     = upper(in_HRCHY_HDR_NAME)
            AND upper(HRCHY_HDR_LVL_DESC) = upper(in_hrchy_hdr_lvl_desc);

    return v_hrchy_hdr_lvl_nbr;

EXCEPTION
   WHEN OTHERS THEN
       --RETURN  ('Invalid HRCHY_HDR_LVL_DESC ');
       RETURN  ('-1');
END GET_HDR_LVL_NBR_SP;  

FUNCTION GET_HDR_LVL_DESC_SP(
/*******************************************************************************
 GET_HDR_LVL_DESC_SP

  This procedure will return the Level description of a HIERARCHY for the
  corresponding Dtl level

created : SH 07/03/2013
********************************************************************************/
in_HRCHY_HDR_NAME      IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE,
in_HRCHY_HDR_LVL_NBR   IN HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
) return varchar2

IS

V_HRCHY_HDR_LVL_DESC HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE;

BEGIN
    SELECT HRCHY_HDR_LVL_DESC 
           INTO V_HRCHY_HDR_LVL_DESC
           from HIERARCHY_DESCRIPTION
          WHERE upper(HRCHY_HDR_NAME)    = upper(in_HRCHY_HDR_NAME)
            AND upper(HRCHY_HDR_LVL_NBR) = upper(in_HRCHY_HDR_LVL_NBR);
            
    return v_hrchy_hdr_lvl_desc;

exception
  when OTHERS then

       RETURN ('Invalid HRCHY_HDR_LVL_NBR ');
END GET_HDR_LVL_DESC_SP;

FUNCTION GET_CURR_LVL_VAL(
/***********************************************************
      GET_CURR_LVL_VAL
      This Procedure will get the extract the value from
      the composite key passed based and the header description
      and hierarchy name

Created : SXHCCN 03/20/2014 CCN Project
************************************************************/
    IN_HRCHY_DTL_CURR_LVL_VAL    IN     HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE,
    IN_HEADER_NAME               IN     VARCHAR2,
    IN_LVL_DESCRIPTION           IN     VARCHAR2)
RETURN VARCHAR2

IS
    V_CURR_LVL_VALUE  VARCHAR2(100);
BEGIN

    SELECT SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,1 + (SELECT NVL(SUM(LVL_VALUE_SIZE),0)
                                                   FROM HIERARCHY_DESCRIPTION
                                                  WHERE HRCHY_HDR_LVL_NBR < HDESC.HRCHY_HDR_LVL_NBR
                                                    AND HRCHY_HDR_NAME = HDESC.HRCHY_HDR_NAME),HDESC.LVL_VALUE_SIZE)
      INTO V_CURR_LVL_VALUE
      FROM HIERARCHY_DESCRIPTION HDESC
     WHERE UPPER(HDESC.HRCHY_HDR_NAME)     = UPPER(IN_HEADER_NAME)
       AND UPPER(HDESC.HRCHY_HDR_LVL_DESC) = UPPER(IN_LVL_DESCRIPTION);

    RETURN V_CURR_LVL_VALUE;

EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_CURR_LVL_VAL;

PROCEDURE Header_Lvl_Validation_sp (
/*******************************************************************************
 Header_Lvl_Validation_sp

  This procedure will validate the business rules for any Hierarchy
  i.e, it checks if the order of the levels added for a new hierarchy
  is correct based on Global Hierarchy

created : SH 05/17/2013

  <HIERARCHY_DESCRIPTION>
  <row_data>
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>ABC STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>03</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>AREA</HRCHY_HDR_LVL_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>ABC STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>04</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>DIST</HRCHY_HDR_LVL_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  </row_data>
</HIERARCHY_DESCRIPTION>
******************************************************************************/	
    in_row_data                CLOB
 )
 IS
 
   invalid_order_wrn       EXCEPTION;
   invalid_levels_err      EXCEPTION;
   V_CONTEXT               VARCHAR2(100);
   v_code                  NUMBER;
   v_prev_lvl              HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;
   V_HRCHY_HDR_NAME        HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE;
   V_HRCHY_HDR_LVL_NBR     HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;
   V_HRCHY_HDR_LVL_DESC    HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE;
   V_COUNT                 NUMBER := 1;
   v_WarningText           VARCHAR2(500);

   V_XML XMLTYPE := sys.xmltype(in_row_data);

BEGIN
  
    WHILE V_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']') = 1 LOOP 
       V_HRCHY_HDR_NAME     := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
       V_HRCHY_HDR_LVL_DESC := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_DESC/text()').GETSTRINGVAL();        

       --compare V_HRCHY_GLOBAL_LVL_NBR with the pre-defined levels  
       IF V_HRCHY_HDR_LVL_DESC = 'Legacy Division' THEN
          V_HRCHY_HDR_LVL_DESC := 'Division';
       END IF;
       
       V_HRCHY_HDR_LVL_NBR := GET_HDR_LVL_NBR_SP('GLOBAL_HIERARCHY', V_HRCHY_HDR_LVL_DESC);

       --check if the levels eneterd are greater than that of global             
       IF TO_NUMBER(V_HRCHY_HDR_LVL_NBR) NOT BETWEEN 1 AND 9 THEN
          v_WarningText := 'The number of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is not in range of GLOBAL_HIERARCHY';
          RAISE invalid_levels_err;
       END IF;

       IF V_HRCHY_HDR_LVL_NBR < NVL(v_prev_lvl, V_HRCHY_HDR_LVL_NBR) THEN
          v_WarningText := 'The Order of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is incorrect';
          RAISE invalid_order_wrn;
       END IF;
       v_prev_lvl := V_HRCHY_HDR_LVL_NBR; --assigning old val to compare
       V_COUNT := V_COUNT + 1;
    END LOOP;

EXCEPTION
    WHEN invalid_levels_err THEN    
            v_code := errnums.en_invalid_levels_err;
            ERRPKG.RAISE_ERR(v_code, v_WarningText); 

    WHEN invalid_order_wrn THEN
           v_code := errnums.en_invalid_order_wrn;
            ERRPKG.RAISE_ERR(v_code, v_WarningText);

END Header_Lvl_Validation_sp;

PROCEDURE cost_center_change_Rules(
/*******************************************************************************
 cost_center_change_Rules  
   
  This procedure will validate the business rules for any Hierarchy   
  i.e, If a Global Hierarchy is changed for a Cost Center, other hierarchies 
  such as the Alternate D-A-D, SGL Division, or COA Division must be checked for 
  possible changes for the same cost center. This will be a Warning message to 
  check or verify other hierarchies for the same cost center.
  
  Also if a cost cente is null then give a message that it cannot be NULL(wildcard)

created : SH 05/30/2013

  <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME  HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE,
in_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE)

IS

    chk_hier_wrn  EXCEPTION;
    v_code        NUMBER;
    v_WarningText VARCHAR2(500);
    
BEGIN

      IF in_HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' and in_HRCHY_DTL_LEVEL = '9' THEN
           V_WARNINGTEXT := 'Please Check the ALTERNATE_DAD, COA Division and SGL Division for possible changes.';
           --RAISE chk_hier_wrn;
      END IF;

EXCEPTION
    WHEN chk_hier_wrn THEN
            v_code := errnums.en_chk_hier_wrn;
            errpkg.raise_err(v_code, V_WARNINGTEXT);
                
end cost_center_change_Rules;

procedure Stmnt_Type_Validation_Rules(
/*******************************************************************************
 Stmnt_Type_Validation_Rules  
   
  This procedure will validate the business rules for Statement Type   
  i.e, When a higher node's Statement_Type changes, all lower nodes will be checked 
  to make sure that they adhere to business rules. The only exception is the NULL
  which allows any value for the lower levels and thus, does not need validation

created : SH 05/31/2013

 <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)

IS

    Stmnt_Type_wrn    EXCEPTION;
    invalid_cc_wrn    EXCEPTION;
    v_code            NUMBER;

    V_DETAIL_STMNT_TYPE      VARCHAR2(50);
    V_CC_DETAIL_STMNT_TYPE   VARCHAR2(50);
    V_STATEMENT_TYPE         VARCHAR2(50);
    V_WARNINGTEXT            VARCHAR2(500);
    V_LEVEL                  NUMBER;
    V_HRCHY_DTL_CURR_LVL_VAL VARCHAR2(100);
    V_STMNT_TYPE_VALIDATION_IND VARCHAR2(1);
    V_UPPER_LVL_VER_VALUE       HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
    
cursor hier_detail_cur(p_HRCHY_HDR_NAME         IN hierarchy_description.hrchy_hdr_name%TYPE,
                       p_HRCHY_DTL_LEVEL        IN hierarchy_detail.hrchy_dtl_level%type,
                       p_HRCHY_DTL_CURR_LVL_VAL IN VARCHAR2) is
  select UPPER_LVL_VER_VALUE
    from hierarchy_detail
   where HRCHY_HDR_NAME         = p_HRCHY_HDR_NAME
     and HRCHY_DTL_LEVEL        = p_HRCHY_DTL_LEVEL
     and HRCHY_DTL_CURR_LVL_VAL = p_HRCHY_DTL_CURR_LVL_VAL;
    
BEGIN
      CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(IN_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE,
                                              'STATEMENT_TYPE',
                                              V_CC_DETAIL_STMNT_TYPE);
                          
      IF V_CC_DETAIL_STMNT_TYPE IS NULL THEN
         V_WARNINGTEXT := 'Cost Center cannot be Null. Please check.';
         RAISE invalid_cc_wrn;
      END IF;
      
      SELECT STMNT_TYPE_VALIDATION_IND 
        INTO V_STMNT_TYPE_VALIDATION_IND
        FROM HIERARCHY_HEADER
       WHERE HRCHY_HDR_NAME = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;
      
      IF V_STMNT_TYPE_VALIDATION_IND = 'Y' THEN
         V_LEVEL                  := NVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1, 0);
         V_HRCHY_DTL_CURR_LVL_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL;
         WHILE V_LEVEL > 0 LOOP
            FOR  each_rec IN hier_detail_cur(IN_HIERARCHY_DETAIL_ROW.hrchy_hdr_name,
                                             V_LEVEL,
                                             V_HRCHY_DTL_CURR_LVL_VAL) LOOP
               CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(each_rec.UPPER_LVL_VER_VALUE,
                                                       'STATEMENT_TYPE',
                                                       V_STATEMENT_TYPE);
               --check if the Statement Type matches the new one for the level higher
               IF NVL(V_STATEMENT_TYPE,'**') = '**' THEN
                  V_DETAIL_STMNT_TYPE := V_CC_DETAIL_STMNT_TYPE;
               ELSE
                  V_DETAIL_STMNT_TYPE := V_STATEMENT_TYPE;
               END IF;
               IF V_CC_DETAIL_STMNT_TYPE <> V_DETAIL_STMNT_TYPE THEN
                  v_warningtext := 'The Hierarchy ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' has a Different Statement Type';
                  RAISE Stmnt_Type_wrn;
               END IF;
            END LOOP;
            select HRCHY_DTL_PREV_LVL_VAL INTO V_HRCHY_DTL_CURR_LVL_VAL
              from hierarchy_detail
             where HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.hrchy_hdr_name
               and HRCHY_DTL_LEVEL        = V_LEVEL
               and HRCHY_DTL_CURR_LVL_VAL = V_HRCHY_DTL_CURR_LVL_VAL
               and rownum < 2;
            V_LEVEL := V_LEVEL - 1;
         END LOOP;
      END IF;
  
EXCEPTION
    WHEN INVALID_CC_WRN THEN
            v_code := errnums.en_invalid_cc_wrn;
            ERRPKG.RAISE_ERR(V_CODE, V_WARNINGTEXT);     
 
    WHEN STMNT_TYPE_WRN THEN 
           v_code := errnums.en_Stmnt_Type_wrn;
            errpkg.raise_err(v_code, v_warningtext);  
        
END Stmnt_Type_Validation_Rules;

procedure Lower_Level_Exp_Rules(
/*******************************************************************************
 Lower_Level_Exp_Rules  
   
  This procedure will validate the business rules that before allowing the expiration 
  of any level (i.e. division or area) all lower nodes (area, district, cost center)
  must have been expired previously!

created : SH 06/04/2013

 <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
 
 revised : sxh487 03/14/2016 Changed in_HRCHY_DTL_EXP_DATE IS NULL to each_rec.HRCHY_DTL_EXP_DATE IS NULL
********************************************************************************/
in_HRCHY_HDR_NAME     hierarchy_detail.hrchy_hdr_name%TYPE, 
in_HRCHY_DTL_LEVEL    hierarchy_detail.hrchy_dtl_level%TYPE, 
in_HRCHY_DTL_EXP_DATE hierarchy_detail.hrchy_dtl_exp_date%TYPE
)

IS
    
    exp_date_wrn EXCEPTION;
    v_code       NUMBER;
    
    V_DETAIL_STMNT_TYPE      VARCHAR2(50);
    V_WARNINGTEXT            VARCHAR2(500);
    
cursor sub_hier_cur is
  select distinct hrchy_hdr_name 
    from hierarchy_description
   where hrchy_global_lvl_nbr is not null;

CURSOR HIER_DETAIL_CUR(P_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE, P_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE) IS
  select distinct HRCHY_DTL_EXP_DATE from hierarchy_detail 
   where hrchy_hdr_name = p_hrchy_hdr_name
     and HRCHY_DTL_LEVEL < p_HRCHY_DTL_LEVEL;
    
BEGIN
      FOR each_hier in sub_hier_cur LOOP
         FOR each_rec in hier_detail_cur(each_hier.hrchy_hdr_name, in_HRCHY_DTL_LEVEL) LOOP
            --check if the all the lower levels are expired
            IF each_rec.HRCHY_DTL_EXP_DATE IS NULL THEN
               v_warningtext := 'The Hierarchy ' || in_HRCHY_HDR_NAME || ' does not have all the lower levels Expired yet.';
               RAISE exp_date_wrn;
            END IF;
         END LOOP;
      END LOOP;
EXCEPTION
    WHEN exp_date_wrn THEN
            v_code := errnums.en_exp_date_wrn;
            errpkg.raise_err(v_code, v_WarningText);

END Lower_Level_Exp_Rules;

procedure HIERARCHY_EXPIRATION_RULES(
/*******************************************************************************
 HIERARCHY_EXPIRATION_RULES  
   
  This procedure will validate the business rules for the new hierarchies
  not attached with the global hierarchy 
  Before allowing the expiration of any level (i.e. division or area) all lower nodes 
  (area, district, cost center) must have been expired previously!

created : sxh487 02/24/2016
********************************************************************************/
in_HRCHY_HDR_NAME     hierarchy_detail.hrchy_hdr_name%TYPE, 
in_HRCHY_DTL_LEVEL    hierarchy_detail.hrchy_dtl_level%TYPE, 
in_HRCHY_DTL_EXP_DATE hierarchy_detail.hrchy_dtl_exp_date%TYPE
)

IS
    exp_date_wrn EXCEPTION;
    v_code       NUMBER;
    
    V_COUNT           INTEGER := 0;
    V_WARNINGTEXT     VARCHAR2(500);

BEGIN
  SELECT COUNT(*)
    INTO V_COUNT
    FROM hierarchy_detail 
   WHERE hrchy_hdr_name = in_HRCHY_HDR_NAME
     AND HRCHY_DTL_LEVEL < in_HRCHY_DTL_LEVEL
     AND HRCHY_DTL_EXP_DATE IS NULL;

         IF V_COUNT > 0 THEN
            v_warningtext := 'The Hierarchy ' || in_HRCHY_HDR_NAME || ' does not have all the lower levels Expired yet.';
            RAISE exp_date_wrn;
         END IF;
EXCEPTION
    WHEN exp_date_wrn THEN
            v_code := errnums.en_exp_date_wrn;
            errpkg.raise_err(v_code, v_WarningText);

END HIERARCHY_EXPIRATION_RULES;

procedure District_Duplication_Rules(
/*******************************************************************************
 District_Duplication_Rules  
   
  This procedure will validate the business rules for Reporting_DAD, City DAD, 
  or Alternate DAD that - duplication of a district number across all divisions 
  and Areas is not allowed

created : SH 05/31/2013

<HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME          hierarchy_detail.hrchy_hdr_name%TYPE,
in_HRCHY_DTL_LEVEL         hierarchy_detail.hrchy_dtl_level%TYPE,
in_HRCHY_DTL_CURR_ROW_VAL  hierarchy_detail.hrchy_dtl_curr_row_val%TYPE)

IS

    dist_exists_wrn EXCEPTION;
    v_code          NUMBER;
  
    V_WARNINGTEXT               VARCHAR2(500);
 
cursor hier_detail_cur(p_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.hrchy_hdr_name%TYPE, p_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%type) is
  SELECT distinct HRCHY_DTL_CURR_ROW_VAL FROM HIERARCHY_DETAIL
    WHERE HRCHY_HDR_NAME = P_HRCHY_HDR_NAME
      and HRCHY_DTL_LEVEL = p_HRCHY_DTL_LEVEL;
   
BEGIN
   FOR EACH_REC IN HIER_DETAIL_CUR(in_HRCHY_HDR_NAME, in_HRCHY_DTL_LEVEL) LOOP
      --check if the district is already existing
      IF in_HRCHY_DTL_CURR_ROW_VAL = EACH_REC.HRCHY_DTL_CURR_ROW_VAL THEN
         V_WARNINGTEXT := 'The District ' || in_HRCHY_DTL_CURR_ROW_VAL || ' already exists in ' || in_HRCHY_HDR_NAME;  
         RAISE dist_exists_wrn;
      END IF;
   END LOOP;
EXCEPTION
    WHEN dist_exists_wrn THEN
            v_code := errnums.en_dist_exists_wrn;
            errpkg.raise_err(v_code, v_WarningText); 
        
END District_Duplication_Rules;

procedure CC_Duplication_Rules(
/*******************************************************************************
 CC_Duplication_Rules  
   
  This procedure will validate the business rules for Reporting_DAD or City DAD, 
  where duplication of a Cost Center across areas or divisions is not allowed

created : SH 06/03/2013

  <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME          hierarchy_detail.hrchy_hdr_name%TYPE,
in_HRCHY_DTL_LEVEL         hierarchy_detail.hrchy_dtl_level%TYPE,
in_HRCHY_DTL_CURR_ROW_VAL  hierarchy_detail.hrchy_dtl_curr_row_val%TYPE)

IS

    CC_EXISTS_WRN  EXCEPTION;
    V_CODE         NUMBER;
    V_ERRTEXT      VARCHAR2(500);
 
cursor hier_detail_cur(p_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.hrchy_hdr_name%TYPE, p_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%type) is
  SELECT DISTINCT HRCHY_DTL_CURR_ROW_VAL FROM HIERARCHY_DETAIL
    WHERE HRCHY_HDR_NAME = P_HRCHY_HDR_NAME
      and HRCHY_DTL_LEVEL = p_HRCHY_DTL_LEVEL;
   
begin
    
         FOR EACH_REC IN HIER_DETAIL_CUR(in_HRCHY_HDR_NAME, in_HRCHY_DTL_LEVEL) LOOP
                --check if the Cost_Center is already existing
                IF in_HRCHY_DTL_CURR_ROW_VAL = EACH_REC.HRCHY_DTL_CURR_ROW_VAL THEN
                   V_ERRTEXT := 'The Cost Center ' || in_HRCHY_DTL_CURR_ROW_VAL || ' already exists in ' || in_HRCHY_HDR_NAME;
                   RAISE CC_EXISTS_WRN;
                END IF;
         END LOOP;
       
exception      
    when CC_EXISTS_WRN then
            V_CODE := errnums.en_CC_EXISTS_WRN;
            errpkg.raise_err(V_CODE, V_ERRTEXT); 
        
END CC_Duplication_Rules;

procedure DUPLICATE_LEVEL_VALIDATION(
/*******************************************************************************
 DUPLICATE_LEVEL_VALIDATION  
   
  This procedure will validate the business rules same Hierarchy, 
  where duplication of a Cost Center in the same hierarchy is not allowed

created : SH 06/27/2013

  <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>

created : 06/27/2013 SH CCN
********************************************************************************/
IN_HIERARCHY_DETAIL_REC             HIERARCHY_DETAIL%ROWTYPE)

IS

   V_COUNT NUMBER := 0;
   V_CC_EXISTS_ERR EXCEPTION;
   V_LAST_LEVEL_FLAG VARCHAR2(1);
BEGIN
   
    SELECT DECODE(HRCHY_HDR_LEVELS,IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL,'Y','N')
      INTO V_LAST_LEVEL_FLAG
      FROM HIERARCHY_HEADER
     WHERE HRCHY_HDR_NAME = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME;

    IF V_LAST_LEVEL_FLAG = 'Y' THEN
        SELECT COUNT(*) 
          INTO V_COUNT
          FROM HIERARCHY_DETAIL
         WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME
           AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_ROW_VAL = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_CURR_ROW_VAL;
    ELSE
        SELECT COUNT(*) 
          INTO V_COUNT
          FROM HIERARCHY_DETAIL
         WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME
           AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_CURR_LVL_VAL;
    END IF;

    IF V_COUNT > 0 THEN
        RAISE V_CC_EXISTS_ERR;
    END IF;

END DUPLICATE_LEVEL_VALIDATION;

PROCEDURE SGL_DIVISION_VALIDATION(
/*******************************************************************************
 SGL_DIVISION_VALIDATION  
   
  This procedure will validate the business rule that when a cost center is assigned to the 
  SGL Division - the division that the cost center is being assigned to should
	match the division the cost center is assigned to in Global Hierarchy
  
created : SXH 03/20/2014
********************************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS

    V_CODE         NUMBER;
    V_ERRTEXT      VARCHAR2(500);
    invalid_GL_div EXCEPTION;
    
    V_CURR_VAL                 HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
    V_DIVISION                 HIERARCHY_DETAIL_VIEW.DIVISION%TYPE;

BEGIN

   IF IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION' THEN 

      --get the division the cost center belongs to in GLOBAL HIERARCHY
      BEGIN
         SELECT CCN_HIER_BUSINESS_RULES_PKG.GET_CURR_LVL_VAL(HRCHY_DTL_CURR_LVL_VAL, 'GLOBAL_HIERARCHY', 'Division')
           INTO V_CURR_VAL
           FROM HIERARCHY_DETAIL
          WHERE HRCHY_HDR_NAME         = 'GLOBAL_HIERARCHY'
            AND HRCHY_DTL_CURR_ROW_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
      EXCEPTION
         WHEN OTHERS THEN
            V_CURR_VAL := NULL;
      END;
   
      --get the division the FOR LEGACY_GL_DIVISION
      V_DIVISION := GET_CURR_LVL_VAL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL, IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME, 'Division');
  
      --Error should be thrown if the cost center is not found in GLOBAL or if the division does not match the one in GLOBAL
      IF NVL(V_DIVISION,'XX') <> NVL(V_CURR_VAL,'YY') THEN
          RAISE invalid_GL_div;
      END IF;
   
  END IF;

EXCEPTION
    WHEN invalid_GL_div THEN
       v_code := errnums.en_invalid_GL_div;
       errpkg.raise_err(v_code, 'The Division does not match the one in Global Hierarchy');
       
END SGL_DIVISION_VALIDATION;

FUNCTION VALIDATE_HIERARCHY(
/*******************************************************************************
 VALIDATE_HIERARCHY  
   
  This procedure will validate the hierarchy from bottom to top and raise 
  corresponding error if particular level value doesn't exist

created : JXC517 11/14/2013
revised : kdp 11/21/2013 Changed to return y/n
          MXK766 8/23/2016 Added logic to validate ADMINORG Hierarchy.
        : 02/06/2017 gxg192 Changed Return datatype from varchar to varchar2
********************************************************************************/
    IN_HRCHY_HDR_NAME         VARCHAR2,
    IN_HRCHY_DTL_CURR_LVL_VAL VARCHAR2) RETURN VARCHAR2
IS
    V_HRCHY_DTL_CURR_ROW_VAL    VARCHAR2(100);
    V_START_POSITION            NUMBER := 1;
    V_HIERARCHY_DETAIL_REC      HIERARCHY_DETAIL%ROWTYPE;

    CC_HIERARCHY_MISSING  EXCEPTION;
    V_CODE                NUMBER;
    V_ERRTEXT             VARCHAR2(500);
    V_CHK                 PLS_INTEGER;

    V_LVL_SIZE       NUMBER;
    V_END_COUNTER    NUMBER;
    V_LVL_VALUE      VARCHAR2(32767);
BEGIN
   --Loop through all the levels for the passed hierarchy header name excluding cost center level
   IF IN_HRCHY_HDR_NAME ='ADMINORG_HIERARCHY' THEN
     V_LVL_SIZE    := CCN_HIERARCHY.RETURN_LVL_VALUE_SIZE('ADMINORG_HIERARCHY','N');
     V_END_COUNTER :=  FLOOR(LENGTH(IN_HRCHY_DTL_CURR_LVL_VAL)/V_LVL_SIZE);

     FOR REC_COUNTER IN 1 .. V_END_COUNTER LOOP

        IF REC_COUNTER = V_END_COUNTER THEN
           V_LVL_SIZE := V_LVL_SIZE+2;
        END IF;
        --split logic
        V_LVL_VALUE := SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,V_START_POSITION,V_LVL_SIZE);
        IF LENGTH(V_LVL_VALUE)<>6 THEN
           BEGIN
            SELECT 1 INTO V_CHK
             FROM HIERARCHY_DETAIL
            WHERE HRCHY_DTL_CURR_ROW_VAL = V_LVL_VALUE
              AND HRCHY_HDR_NAME         = IN_HRCHY_HDR_NAME
              AND HRCHY_DTL_LEVEL        = REC_COUNTER
              AND ROWNUM < 2;
           EXCEPTION
           WHEN NO_DATA_FOUND THEN
                V_ERRTEXT := 'The hierarchy Data '''  ||
                             ''' with value of '''    || V_LVL_VALUE ||
                             ''' doesn''t exists in ' || IN_HRCHY_HDR_NAME ||
                             ' Structure at level '   || REC_COUNTER;
                RAISE CC_HIERARCHY_MISSING;
           END;
        END IF;
        --increment the start position
        V_START_POSITION := V_START_POSITION + V_LVL_SIZE;
     END LOOP;
   ELSE
    FOR rec IN (SELECT *
                  FROM HIERARCHY_DESCRIPTION
                 WHERE HRCHY_HDR_NAME = IN_HRCHY_HDR_NAME
                   AND HRCHY_HDR_LVL_DESC <> 'Cost Center'
                 ORDER BY HRCHY_HDR_LVL_NBR) LOOP

        --Calculate the current row value based on the level and details from the description
        V_HRCHY_DTL_CURR_ROW_VAL := SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,
                                           V_START_POSITION,
                                           rec.LVL_VALUE_SIZE);

        --check if the record exists with the current row value and level in given hierarchy
        --if record doesn't exists, meaning the hierarchy is broken at that level
        --corresponding error description is build here, if fails
        BEGIN
            SELECT * INTO V_HIERARCHY_DETAIL_REC
              FROM HIERARCHY_DETAIL
             WHERE HRCHY_DTL_CURR_ROW_VAL = V_HRCHY_DTL_CURR_ROW_VAL
               AND HRCHY_HDR_NAME         = IN_HRCHY_HDR_NAME
               AND HRCHY_DTL_LEVEL        = rec.HRCHY_HDR_LVL_NBR
               AND ROWNUM < 2;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                V_ERRTEXT := 'The hierarchy Level ''' || rec.HRCHY_HDR_LVL_DESC ||
                             ''' with value of '''    || V_HRCHY_DTL_CURR_ROW_VAL ||
                             ''' doesn''t exists in ' || IN_HRCHY_HDR_NAME ||
                             ' Structure at level '   || rec.HRCHY_HDR_LVL_NBR;
                RAISE CC_HIERARCHY_MISSING;
        END;
        --This starting position will be the one that is used in next iteration to calculate the current row value
        V_START_POSITION := V_START_POSITION + rec.LVL_VALUE_SIZE;
    END LOOP;

    END IF;

    RETURN ('Y');
EXCEPTION
    WHEN CC_HIERARCHY_MISSING THEN
        V_CODE := errnums.en_hierarachy_not_exists;
        errpkg.raise_err(V_CODE, V_ERRTEXT);
END VALIDATE_HIERARCHY;

PROCEDURE VALIDATE_CC_SALES_MANAGER_LVL(
/*******************************************************************************
 VALIDATE_CC_SALES_MANAGER_LVL
  This procedure will validate if the sales manager level is valid or not for
  the cost center that is being attached

created : JXC517 09/18/2014
revised :
********************************************************************************/
    IN_HRCHY_DTL_CURR_LVL_VAL VARCHAR2,
    IN_HRCHY_DTL_CURR_ROW_VAL VARCHAR2)
IS
    en_cc_sales_manager_lvl EXCEPTION;
    V_CATEGORY              VARCHAR2(1);
    V_MESSAGE               VARCHAR2(500);
BEGIN
    BEGIN
        SELECT CATEGORY
          INTO V_CATEGORY
          FROM COST_CENTER
         WHERE COST_CENTER_CODE = IN_HRCHY_DTL_CURR_ROW_VAL;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    --For territory cost centers this value should be double alpha characters
    IF V_CATEGORY = 'T' THEN
        --Check if both the characters are capital alphabets
        IF REGEXP_LIKE(SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,11,2),'[A-Z]+$') THEN
            --check if they are double alpha characters meaning AA, BB, CC ....
            --for 6th level its 11th and 12th character we need to validate and both should be same
            IF SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,11,1) <> SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,12,1) THEN
                V_MESSAGE := 'Territory Cost center should have sales manager level code as alphabets';
                RAISE en_cc_sales_manager_lvl;
            END IF;
        ELSE
            V_MESSAGE := 'Territory Cost center should have sales manager level code as alphabets';
            RAISE en_cc_sales_manager_lvl;
        END IF;
    --For non territory cost centers this should be numeric
    ELSE
        --Check if both the characters are numeric
        IF NOT REGEXP_LIKE(SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,11,2),'[0-9]+$') THEN
            V_MESSAGE := 'Non-Territory Cost center should have sales manager level code as numeric';
            RAISE en_cc_sales_manager_lvl;
        END IF;
    END IF;
EXCEPTION 
    WHEN en_cc_sales_manager_lvl THEN
        errpkg.raise_err(errnums.en_cc_sales_manager_lvl_err, V_MESSAGE);
END VALIDATE_CC_SALES_MANAGER_LVL;

PROCEDURE VALIDATE_SALES_MANAGER_LVL(
/*******************************************************************************
 VALIDATE_SALES_MANAGER_LVL  
   
  This procedure will validate if the sales manager level is valid or not

created : JXC517 09/18/2014
revised :
********************************************************************************/
    IN_HRCHY_DTL_CURR_ROW_VAL VARCHAR2)
IS
    sales_manager_lvl_err   EXCEPTION;
    V_MESSAGE               VARCHAR2(500);
BEGIN
    --Check if both the characters are capital alphabets or both are numeric
    IF NOT (REGEXP_LIKE(IN_HRCHY_DTL_CURR_ROW_VAL,'[A-Z]+$')
            OR
            REGEXP_LIKE(IN_HRCHY_DTL_CURR_ROW_VAL,'[0-9]+$')) THEN
        V_MESSAGE := 'Sales manager level code should be alphabets or numeric';
        RAISE sales_manager_lvl_err;
    END IF;
EXCEPTION 
    WHEN sales_manager_lvl_err THEN
        errpkg.raise_err(errnums.en_sales_manager_lvl_err, V_MESSAGE);
END VALIDATE_SALES_MANAGER_LVL;

PROCEDURE HIER_BUSINESS_RULES_MAIN(
/*******************************************************************************
 HIER_BUSINESS_RULES_MAIN  
  
  This procedure is intended to be the "main" Business Rules procedure.  This
  routine will be excuted both by Batch and our UI Screens.
  
  Its purposes is to execute each of the individual Business Rules as defined
  in the Technical Document

<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD Structure</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>01</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
      <HRCHY_LEVEL3>10</HRCHY_LEVEL3>
      <HRCHY_DTL_DESC>Ohio</HRCHY_DTL_DESC>
      <HRCHY_DTL_EFF_DATE>01-10-2013</HRCHY_DTL_EFF_DATE>
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
         <Name>statement_type</Name> 
         <Description>pkListValue</Description> 
         <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
  </row_data>
</HIERARCHY_DETAIL>
 
created : 06/27/2013 SH CCN
Modified: 06/12/2017 jxc517 CCN Project Team....
          Statement type validations are not applicable for PRICE_DISTRICT hierarchy
********************************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)

IS

     v_HRCHY_HDR_LVL_DESC HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE;
     V_HRCHY_HDR_NAME     HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
     V_HRCHY_DTL_LEVEL    HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
     V_HRCHY_DTL_EXP_DATE HIERARCHY_DETAIL.HRCHY_DTL_EXP_DATE%TYPE;
     V_HRCHY_DTL_DESC     HIERARCHY_DETAIL.HRCHY_DTL_DESC%TYPE;
     v_HRCHY_DTL_CURR_ROW_VAL HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE;
     V_CONTEXT            VARCHAR2(100);
  
BEGIN
       V_HRCHY_HDR_NAME := IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;
       V_HRCHY_DTL_LEVEL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
       V_HRCHY_HDR_LVL_DESC := ccn_hier_business_rules_pkg.GET_HDR_LVL_DESC_SP(V_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL);

       V_CONTEXT := 'Calling the Stmnt_Type_Validation_Rules'; 
       IF V_HRCHY_HDR_NAME <> 'PRICE_DISTRICT' THEN
           CCN_HIER_BUSINESS_RULES_PKG.Stmnt_Type_Validation_Rules(IN_HIERARCHY_DETAIL_ROW);
       END IF;
       
       IF UPPER(V_HRCHY_HDR_NAME) = 'GLOBAL_HIERARCHY' then
           IF v_hrchy_dtl_level = '9' THEN
               V_CONTEXT := 'Calling the cost_center_change_Rules';
               CCN_HIER_BUSINESS_RULES_PKG.cost_center_change_Rules(V_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL);
               V_CONTEXT := 'Calling the VALIDATE_CC_SALES_MANAGER_LVL';
               CCN_HIER_BUSINESS_RULES_PKG.VALIDATE_CC_SALES_MANAGER_LVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL,
                                                                         IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL);
           ELSIF v_hrchy_dtl_level = '6' THEN
               V_CONTEXT := 'Calling the VALIDATE_SALES_MANAGER_LVL';
               CCN_HIER_BUSINESS_RULES_PKG.VALIDATE_SALES_MANAGER_LVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL);
           END IF;
       END IF;

       V_HRCHY_DTL_EXP_DATE := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE;
       IF V_HRCHY_DTL_EXP_DATE IS NOT NULL THEN
          V_CONTEXT := 'Calling the Lower_Level_Exp_Rules';
          CCN_HIER_BUSINESS_RULES_PKG.Lower_Level_Exp_Rules(V_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL, V_HRCHY_DTL_EXP_DATE);
       END IF;

       IF UPPER(V_HRCHY_HDR_NAME) IN ('REPORTING_DAD', 'CITY_MANAGER_DAD') THEN
          V_CONTEXT := 'Calling the CC_Duplication_Rules';
          v_HRCHY_DTL_CURR_ROW_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
          CCN_HIER_BUSINESS_RULES_PKG.CC_Duplication_Rules(v_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL, v_HRCHY_DTL_CURR_ROW_VAL);
       END IF;

       IF UPPER(V_HRCHY_HDR_LVL_DESC) = 'DISTRICT' THEN
          v_HRCHY_DTL_CURR_ROW_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
          IF UPPER(V_HRCHY_HDR_NAME) IN ( 'REPORTING_DAD', 'CITY_MANAGER_DAD', 'ALTERNATE_DAD') THEN
             V_CONTEXT := 'Calling the District_Duplication_Rules';
             CCN_HIER_BUSINESS_RULES_PKG.District_Duplication_Rules(v_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL, v_HRCHY_DTL_CURR_ROW_VAL);
          END IF;
       END IF;

END HIER_BUSINESS_RULES_MAIN;

FUNCTION IS_HIERARCHY_FUTURE_ALLOWED(
/***********************************************************
This function will check if the passed record is valid to have
future based on the hierarchy name
      
Created : 04/07/2016 jxc517 CCN Project Team....
Modified: 
************************************************************/
    IN_HIERARCHY_DETAIL_REC     IN     HIERARCHY_DETAIL_FUTURE%ROWTYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(1) := 'Y';
BEGIN
    IF IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_EFF_DATE > TRUNC(SYSDATE)
       AND IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME NOT IN ('PRICE_DISTRICT', 'CREDIT_HIERARCHY', 'ADMINORG_HIERARCHY') THEN
        V_RETURN_VALUE := 'N';
    END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_HIERARCHY_FUTURE_ALLOWED;

FUNCTION IS_FTR_HRCHY_DTL_EXSTS(
/***********************************************************
This function will check if the passed record has a future
already existing or not
      
Created : 04/04/2016 jxc517 CCN Project Team....
Modified: 
************************************************************/
    IN_HIERARCHY_DETAIL_REC     IN     HIERARCHY_DETAIL_FUTURE%ROWTYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(1) := 'N';
BEGIN
    IF IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME = 'ADMINORG_HIERARCHY' THEN
        SELECT DECODE(COUNT(*), 0, 'N', 'Y')
          INTO V_RETURN_VALUE
          FROM HIERARCHY_DETAIL_FUTURE
         WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME
           AND HRCHY_DTL_CURR_ROW_VAL = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_CURR_ROW_VAL
           AND HRCHY_DTL_EFF_DATE     > TRUNC(SYSDATE);
    ELSE
        SELECT DECODE(COUNT(*), 0, 'N', 'Y')
          INTO V_RETURN_VALUE
          FROM HIERARCHY_DETAIL_FUTURE
         WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME
           AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_ROW_VAL = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_CURR_ROW_VAL
           AND HRCHY_DTL_EFF_DATE     > TRUNC(SYSDATE);
    END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_FTR_HRCHY_DTL_EXSTS;

PROCEDURE DUP_ADMINORG_LVL_VALIDATION(
/*******************************************************************************
  This procedure will validate the business rules for adminorg Hierarchy,
  where duplication of a Cost Center in the same hierarchy is not allowed

created : 09/01/2016 MXK766 CCN Project....
modified: 05/15/2018 nxk927 CCN Project....
          Business rule changed to check the levels.
          Once the level is present, the same level can not come again at any
          other level for admin org
********************************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
   V_COUNT         PLS_INTEGER := 0;
   V_CC_EXISTS_ERR EXCEPTION;
BEGIN
   SELECT COUNT(1)
     INTO V_COUNT
     FROM HIERARCHY_DETAIL
    WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_CURR_ROW_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;

   IF V_COUNT > 0 THEN
      RAISE V_CC_EXISTS_ERR;
   END IF;
END DUP_ADMINORG_LVL_VALIDATION;

FUNCTION IS_HRCHY_TO_EQUAL_HRCHY_FROM(
/***********************************************************
This function will check if Destination hierarchy ("TO")
is equal to the Source hierarchy ("FROM").

Created : 02/02/2017 gxg192 CCN Project Team....
Modified:
************************************************************/
    IN_HIERARCHY_FROM_REC   IN     HIERARCHY_DETAIL_FUTURE%ROWTYPE,
    IN_HIERARCHY_TO_REC     IN     HIERARCHY_DETAIL_FUTURE%ROWTYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(1) := 'N';
BEGIN

    IF IN_HIERARCHY_TO_REC.HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_FROM_REC.HRCHY_DTL_CURR_LVL_VAL
    THEN
        V_RETURN_VALUE := 'Y';
    END IF;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_HRCHY_TO_EQUAL_HRCHY_FROM;

FUNCTION IS_HRCHY_EFFCTV_EXP_PAST(
/***********************************************************
This function will check 

  * If the Effective/Expiration dates passed are in the past or not
    for PRICE_DISTRICT Hierarchy

Created : 04/21/2017 sxh487 CCN Project Team....
Modified: 08/08/2017 sxh487 Added a batch flag to relax the 
          Past Effective/Expiration dates rule if running a batch
************************************************************/
    IN_HIERARCHY_DETAIL_REC     IN     HIERARCHY_DETAIL%ROWTYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(1) := 'N';
BEGIN
    --For PRICE_DISTRICT hierarchy, If the effective/expiration Date is in the Past we need to throw an error 
    IF CCN_HIERARCHY_FUT_TO_CURR_PKG.G_BATCH_FLAG = 'N'
       AND
       IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME = 'PRICE_DISTRICT'
       AND
       (IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_EFF_DATE <= TRUNC(SYSDATE)
        OR
        IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_EXP_DATE <= TRUNC(SYSDATE)) THEN
       V_RETURN_VALUE := 'Y';
    END IF;
    
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_HRCHY_EFFCTV_EXP_PAST;

PROCEDURE VLDT_RLS_FOR_LATIN_AMRIC_DIV(
/*******************************************************************************
This procedure will validate the business rules for global hierarchies under doamin 02
which will be holding latin america division cost centers

created : jxc517 08/20/2018 CCN Project Team....
changed :
********************************************************************************/
    IN_HIERARCHY_DETAIL_ROW IN     HIERARCHY_DETAIL%ROWTYPE,
    IN_FLAG                 IN     VARCHAR2)
IS
    V_CONTEXT                     VARCHAR2(3000);
    V_LAST_LEVEL_FLAG             VARCHAR2(1);
    V_LVL_VALUE_SIZE              HIERARCHY_DESCRIPTION.LVL_VALUE_SIZE%TYPE;
    V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
    BUSSINESS_RULES_ERR_CODE      INTEGER;
    BUSSINESS_RULES_ERR_DESC      VARCHAR2(2000);
    BUSINESS_RULES_EXCEPTION      EXCEPTION;
BEGIN
    --DUPLICATE_LEVEL_VALIDATION
    --This procedure will validate the business rules same Hierarchy, 
    --where duplication of a Cost Center in the same hierarchy is not allowed
    IF IN_FLAG = 'INSERT' THEN
        BEGIN
             V_CONTEXT := 'Calling the DUPLICATE_COST_CENTER';
             CCN_HIER_BUSINESS_RULES_PKG.DUPLICATE_LEVEL_VALIDATION(IN_HIERARCHY_DETAIL_ROW);
        EXCEPTION
            WHEN OTHERS THEN
                BUSSINESS_RULES_ERR_CODE := ERRNUMS.EN_CC_EXISTS_ERR; 
                BUSSINESS_RULES_ERR_DESC := 'At Level-'|| IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||' the Value ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL
                                              || ' already exists in Hierarchy ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;
            RAISE BUSINESS_RULES_EXCEPTION;
        END;
        V_CONTEXT := 'Validating LVL_VALUE_SIZE for the passed HRCHY_DTL_CURR_ROW_VAL';
        BEGIN
            SELECT NVL(LVL_VALUE_SIZE,0)
              INTO V_LVL_VALUE_SIZE
              FROM HIERARCHY_DESCRIPTION
             WHERE HRCHY_HDR_NAME    = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
               AND HRCHY_HDR_LVL_NBR = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
        EXCEPTION
            WHEN OTHERS THEN
                V_LVL_VALUE_SIZE := 0;
        END;
        IF LENGTH(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL) <> V_LVL_VALUE_SIZE THEN
            BUSSINESS_RULES_ERR_CODE := ERRNUMS.EN_LVL_VAL_SIZE_ERR;
            BUSSINESS_RULES_ERR_DESC := 'The size of level ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL 
                   || ' in ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME 
                   || ' hierarchy should be ' || V_LVL_VALUE_SIZE || ' characters';
            RAISE BUSINESS_RULES_EXCEPTION;
        END IF;
    END IF;

     SELECT DECODE(HRCHY_HDR_LEVELS,IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL,'Y','N')
       INTO V_LAST_LEVEL_FLAG
       FROM HIERARCHY_HEADER
      WHERE HRCHY_HDR_NAME = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;

     --Below condition makes sure that the validations for cost center level and previous levels are properly seperated
     IF V_LAST_LEVEL_FLAG = 'Y' THEN
         V_CONTEXT := 'Calling the Business Rules pkg';
         BEGIN
             --So once the business rule is violated BUSSINESS_RULES_ERR_CODE is set to corresponding warning #
             --No further validation of rules is needed at other levels as this warning is generic
             IF BUSSINESS_RULES_ERR_CODE IS NULL THEN
                 IF IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE IS NOT NULL THEN
                     V_CONTEXT := 'Calling the HIERARCHY_EXPIRATION_RULES';
                     CCN_HIER_BUSINESS_RULES_PKG.HIERARCHY_EXPIRATION_RULES(IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME,
                                                                            IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL,
                                                                            IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE);
                 END IF;
             END IF;
         EXCEPTION
             --Allow the process to continue, as these are just warnings
             WHEN OTHERS THEN
                 BUSSINESS_RULES_ERR_CODE   := SQLCODE;
                 BUSSINESS_RULES_ERR_DESC   := SQLERRM;
                 RAISE BUSINESS_RULES_EXCEPTION;
         END;

         --Validate if the header name matches with the number of levels passed
         --This validation should be done only once, that too for the last level OR first iteration
         --We don't need these validations on FROM side of the transfer
         V_CONTEXT := 'Validating Header levels';
         IF NOT CCN_HIERARCHY.IS_VALID_HEADER_LVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME,
                                                  IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL) THEN
             BUSSINESS_RULES_ERR_CODE   := errnums.en_invalid_levels_err;
             BUSSINESS_RULES_ERR_DESC   := 'The number of levels for the Hierarchy ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' is not in range';
             RAISE BUSINESS_RULES_EXCEPTION;
         END IF;

         V_CONTEXT := 'Validating previous level exists or not';
         --Get the previous level record, if one exists
         CCN_HIERARCHY.GET_PREVIOUS_LVL(NULL,
                                        IN_HIERARCHY_DETAIL_ROW,
                                        V_HIERARCHY_DETAIL_ROW_PREV);
         IF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_CURR_LVL_VAL IS NULL THEN
             -- We should no longer recursively insert previous levels as it is the responsibility of UI and Send files
             -- to have all the previous levels sent properly. If not sent, an erorr will be logged stating the same
             BUSSINESS_RULES_ERR_CODE   := errnums.en_previous_level_missing_err;
             BUSSINESS_RULES_ERR_DESC   := 'Level ' || (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1') || ' is missing in ' ||
                                           IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' hierarchy';
             RAISE BUSINESS_RULES_EXCEPTION;
         END IF;
    END IF;
EXCEPTION
    WHEN BUSINESS_RULES_EXCEPTION THEN
        ERRPKG.RAISE_ERR(BUSSINESS_RULES_ERR_CODE,BUSSINESS_RULES_ERR_DESC);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(-20004,'VLDT_RLS_FOR_LATIN_AMRIC_DIV ',V_CONTEXT || ' ' || SQLCODE || ' ' || SQLERRM);
END VLDT_RLS_FOR_LATIN_AMRIC_DIV;

FUNCTION IS_VALID_HIERARCHY_LEVEL(
/***********************************************************
This function will return "Y" if the Hierarchy Level exist in HIERARCHY_DESCRIPTION
Created : 02/08/2019, mxs216, CCN Project ASP-1169
************************************************************/
    IN_HRCHY_ATTR_DETAILS_REC      IN temp_hierarchy_bulk_attr_upd%ROWTYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE         VARCHAR2(1) := 'N';
    V_COUNT                NUMBER := NULL;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM HIERARCHY_DESCRIPTION
     WHERE HRCHY_HDR_NAME = IN_HRCHY_ATTR_DETAILS_REC.HRCHY_HDR_NAME
       AND HRCHY_HDR_LVL_NBR = IN_HRCHY_ATTR_DETAILS_REC.HRCHY_DTL_LEVEL;

    IF V_COUNT > 0 THEN
        V_RETURN_VALUE := 'Y';
    END IF;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_VALID_HIERARCHY_LEVEL;

FUNCTION IS_VALID_HIERARCHY_LEVEL_VALUE(
/***********************************************************
This function will return "Y" if the Hierarchy Cur Level Value exist in HIERARCHY_DETAILS
Created : 02/08/2019, mxs216, CCN Project ASP-1169
************************************************************/
    IN_HRCHY_ATTR_DETAILS_REC      IN temp_hierarchy_bulk_attr_upd%ROWTYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE         VARCHAR2(1) := 'N';
    V_COUNT                NUMBER := NULL;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM HIERARCHY_DETAIL
     WHERE HRCHY_HDR_NAME = IN_HRCHY_ATTR_DETAILS_REC.HRCHY_HDR_NAME
       AND HRCHY_DTL_LEVEL = IN_HRCHY_ATTR_DETAILS_REC.HRCHY_DTL_LEVEL
       AND HRCHY_DTL_CURR_LVL_VAL = IN_HRCHY_ATTR_DETAILS_REC.HRCHY_DTL_CURR_LVL_VAL;

    IF V_COUNT > 0 THEN
        V_RETURN_VALUE := 'Y';
    END IF;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_VALID_HIERARCHY_LEVEL_VALUE;

FUNCTION IS_VALID_HIERARCHY_NAME(
/***********************************************************
This function will return "Y" if the Hierarchy name is exist in HIERARCHY_HEADER
Created : 12/17/2018, mxs216, CCN Project ASP-1169
************************************************************/
    IN_HRCHY_HDR_NAME     IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE)
RETURN VARCHAR2
IS
    V_RETURN_VALUE         VARCHAR2(1) := 'N';
    V_COUNT                NUMBER := NULL;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM HIERARCHY_HEADER
     WHERE HRCHY_HDR_NAME = IN_HRCHY_HDR_NAME;

    IF V_COUNT > 0 THEN
        V_RETURN_VALUE := 'Y';
    END IF;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_VALID_HIERARCHY_NAME;

FUNCTION IS_VALID_ATTRIBUTE_NAME(
/***********************************************************
This function will return "Y" if the attribute name is exist in HIERARCHY_DESCRIPTION
Created : 12/17/2018, mxs216, CCN Project ASP-1169
************************************************************/
    IN_HRCHY_HDR_NAME     IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE,
    IN_HRCHY_HDR_LVL_NBR  IN HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE,
    IN_ATTRIBUTE_NAME     IN VARCHAR2)
RETURN VARCHAR2
IS
    V_RETURN_VALUE         VARCHAR2(1) := 'N';
    V_COUNT                NUMBER := 1;
    V_UPPER_LVL_VER_VALUE  HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
    V_ATTRIBUTE_NAME       VARCHAR2(150);
BEGIN
    SELECT UPPER_LVL_VER_VALUE
      INTO V_UPPER_LVL_VER_VALUE
      FROM hierarchy_description
     WHERE hrchy_hdr_name           = IN_HRCHY_HDR_NAME
       AND hrchy_hdr_lvl_nbr        = IN_HRCHY_HDR_LVL_NBR;

    WHILE V_UPPER_LVL_VER_VALUE.EXISTSNODE('//attributes/upper_lvl_ver_desc[' || V_COUNT || ']') = 1 LOOP
        IF V_UPPER_LVL_VER_VALUE.EXISTSNODE('/attributes/upper_lvl_ver_desc' || '[' || V_COUNT || ']' || '/Name/text()') = 1 THEN
            V_ATTRIBUTE_NAME := UPPER(REPLACE(V_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc' || '[' || V_COUNT || ']/Name/text()').GETSTRINGVAL(),' ','_'));
            -- Comparing attribute name
            IF V_ATTRIBUTE_NAME = IN_ATTRIBUTE_NAME THEN
                V_RETURN_VALUE := 'Y';
                EXIT;
            END IF;
        END IF;
        V_COUNT := V_COUNT + 1;
    END LOOP;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_VALID_ATTRIBUTE_NAME;

FUNCTION IS_VALID_ATTRIBUTE_VALUE(
/***********************************************************
This function will return "Y" if the attribute value is exist in CODE_DETAIL
Created : 12/17/2018, mxs216, CCN Project ASP-1169
************************************************************/
    IN_ATTRIBUTE_NAME     IN VARCHAR2,
    IN_ATTRIBUTE_VALUE    IN VARCHAR2)
RETURN VARCHAR2
IS
    V_RETURN_VALUE         VARCHAR2(1) := 'N';
    V_COUNT                NUMBER := 0;
BEGIN
    SELECT COUNT(*)
       INTO V_COUNT
       FROM code_detail
      WHERE CODE_HEADER_NAME = IN_ATTRIBUTE_NAME;
    IF V_COUNT>0 THEN
        IF COMMON_TOOLS.CODE_DETAIL_VALID(IN_ATTRIBUTE_NAME,
                                          IN_ATTRIBUTE_VALUE) THEN
            V_RETURN_VALUE := 'Y';
        END IF;
    ELSE
        V_RETURN_VALUE := 'Y';
    END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_VALID_ATTRIBUTE_VALUE;

FUNCTION IS_VALID_HRCHY_ATTR_DETAILS(
/***********************************************************
This function is validating the data reading from flat file
and validating HIERARCHY_NAME, ATTRIBUTE_NAME and ATTRIBUTE_VALUE
Created : 12/18/2018, mxs216, CCN Project ASP-1169
************************************************************/
    IN_HRCHY_ATTR_DETAILS_REC      IN temp_hierarchy_bulk_attr_upd%ROWTYPE)
RETURN VARCHAR2
IS
    INVALID_HIERARCHY_NAME         EXCEPTION;
    INVALID_HIERARCHY_LEVEL        EXCEPTION;
    INVALID_HIERARCHY_LEVEL_VALUE  EXCEPTION;
    INVALID_ATTRIBUTE_NAME         EXCEPTION;
    INVALID_ATTRIBUTE_VALUE        EXCEPTION;
    V_RETURN_VALUE                 VARCHAR2(1) := 'N';
    V_ATTR_VALUE                   TEMP_HIERARCHY_BULK_ATTR_UPD.ATTR_VALUE%TYPE;
    V_IS_DUP_GEMS_ID               VARCHAR2(200);
    V_EMPLOYEE_REC                 EMPLOYEE_DETAILS%ROWTYPE;
    V_INVALID_ATTRIBUTE_VALUE      VARCHAR2(200);
    V_EMPLOYEE_NAME                EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;
BEGIN

    -- Validating Hierarchy name
    IF IS_VALID_HIERARCHY_NAME(IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name) <> 'Y' THEN
        RAISE INVALID_HIERARCHY_NAME;
    ELSE
        -- Validating Hierarchy Level
        IF IS_VALID_HIERARCHY_LEVEL(IN_HRCHY_ATTR_DETAILS_REC) <> 'Y' THEN
            RAISE INVALID_HIERARCHY_LEVEL;
        ELSE
            -- Validating Hierarchy Cur Level Value
            IF IS_VALID_HIERARCHY_LEVEL_VALUE(IN_HRCHY_ATTR_DETAILS_REC) <> 'Y' THEN
                RAISE INVALID_HIERARCHY_LEVEL_VALUE;
            ELSE
                -- Validating Attribute name
                IF IS_VALID_ATTRIBUTE_NAME(IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name,
                                           IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_level,
                                           IN_HRCHY_ATTR_DETAILS_REC.attr_name)<>'Y' THEN
                    RAISE INVALID_ATTRIBUTE_NAME;
                ELSE
                   -- Validating ATTRIBUTE VALUE
                   V_ATTR_VALUE := IN_HRCHY_ATTR_DETAILS_REC.attr_value;
                   V_INVALID_ATTRIBUTE_VALUE := 'Attribute value provided is not valid';
                   ------------------------------------------------------------------------
                   -- Validating GEMS_ID
                   IF IN_HRCHY_ATTR_DETAILS_REC.ATTR_NAME = 'GEMS_ID' THEN
                       CCN_EMPLOYEE_DETAILS_PKG.GET_EMPLOYEE_RECORD(IN_HRCHY_ATTR_DETAILS_REC.ATTR_VALUE,
                                                                    NULL,
                                                                    V_EMPLOYEE_REC,
                                                                    V_IS_DUP_GEMS_ID);
                       V_EMPLOYEE_NAME := V_EMPLOYEE_REC.EMPLOYEE_NAME;
                       IF V_EMPLOYEE_NAME IS NULL THEN
                           RAISE INVALID_ATTRIBUTE_VALUE;
                       END IF;
                   END IF;
                   ------------------------------------------------------------------------
                   -- Validating MANAGERNAME
                   IF UPPER(IN_HRCHY_ATTR_DETAILS_REC.attr_name) = 'MANAGERNAME' THEN
                       -- Value is eclosing by double quote, if there are any comma in the value it doesn't split in to separate column (error file)
                       -- Example: "Brown,Eugene R"
                       V_ATTR_VALUE := '"'||IN_HRCHY_ATTR_DETAILS_REC.attr_value||'"';
                       CCN_EMPLOYEE_DETAILS_PKG.GET_EMPLOYEE_RECORD(NULL,
                                                                    IN_HRCHY_ATTR_DETAILS_REC.attr_value,
                                                                    V_EMPLOYEE_REC,
                                                                    V_IS_DUP_GEMS_ID);
                       IF V_EMPLOYEE_REC.EMPLOYEE_NUMBER IS NULL OR V_IS_DUP_GEMS_ID = 'MUL_GEMS_ID' THEN
                           -- Customizing the error msg when passed MANAGERNAME return more than one GEMS_ID
                           IF V_IS_DUP_GEMS_ID = 'Y' THEN
                               V_INVALID_ATTRIBUTE_VALUE := '"Unable to uniquely identify the manager based on the name provided. Please enter last name, first name and middle name as in GEMS"';
                           END IF;
                           RAISE INVALID_ATTRIBUTE_VALUE;
                       END IF;
                   END IF;
                   ------------------------------------------------------------------------
                    -- Validating all Attribute Values other than GEMS_ID and MANAGERNAME
                    IF IS_VALID_ATTRIBUTE_VALUE(IN_HRCHY_ATTR_DETAILS_REC.attr_name,
                                                IN_HRCHY_ATTR_DETAILS_REC.attr_value) <>'Y' THEN
                        RAISE INVALID_ATTRIBUTE_VALUE;
                    ELSE
                        V_RETURN_VALUE := 'Y';
                    END IF;
                END IF;
            END IF;
        END IF;
    END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN INVALID_HIERARCHY_NAME THEN
        COMMON_TOOLS.LOG_ERROR(IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name,
                               'CCN_HIER_BUSINESS_RULES_PKG.IS_VALID_HRCHY_ATTR_DETAILS',
                               IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name || ','|| IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name|| ','
                               ||'Hierarchy name provided is not valid'||
                               ',It is required to correct the above hierarchy name and rerun the update process for this record.',
                               ERRNUMS.en_invalid_hrchy_name_err);
        RETURN V_RETURN_VALUE;
    WHEN INVALID_HIERARCHY_LEVEL THEN
        COMMON_TOOLS.LOG_ERROR(IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_level,
                               'CCN_HIER_BUSINESS_RULES_PKG.IS_VALID_HRCHY_ATTR_DETAILS',
                               IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name || ','||IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_level|| ','
                               ||'Hierarchy level provided is not valid'||
                               ',It is required to correct the above hierarchy level and rerun the update process for this record.',
                               ERRNUMS.en_invalid_hrchy_level_err);
        RETURN V_RETURN_VALUE;
    WHEN INVALID_HIERARCHY_LEVEL_VALUE THEN
        COMMON_TOOLS.LOG_ERROR(IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_curr_lvl_val,
                               'CCN_HIER_BUSINESS_RULES_PKG.IS_VALID_HRCHY_ATTR_DETAILS',
                               IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name || ','|| IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_curr_lvl_val|| ','
                               ||'Current level value provided is not valid'||
                               ',It is required to correct the above current level value and rerun the update process for this record.',
                               ERRNUMS.en_invalid_hrchy_lvl_value_err);
        RETURN V_RETURN_VALUE;
    WHEN INVALID_ATTRIBUTE_NAME THEN
        COMMON_TOOLS.LOG_ERROR(IN_HRCHY_ATTR_DETAILS_REC.attr_name,
                               'CCN_HIER_BUSINESS_RULES_PKG.IS_VALID_HRCHY_ATTR_DETAILS',
                               IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name || ','|| IN_HRCHY_ATTR_DETAILS_REC.attr_name|| ','
                               ||'Attribute name provided is not valid'||
                               ',It is required to correct the above Attribute name and rerun the update process for the record set of '||
                               'Hierarchy= '||IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name ||' Level= '||IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_level||
                               ' and Current Level Value= '||IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_curr_lvl_val,
                               ERRNUMS.en_invalid_attr_name_err);
        RETURN V_RETURN_VALUE;
    WHEN INVALID_ATTRIBUTE_VALUE THEN
        COMMON_TOOLS.LOG_ERROR(IN_HRCHY_ATTR_DETAILS_REC.attr_name||'-'||IN_HRCHY_ATTR_DETAILS_REC.attr_value,
                               'CCN_HIER_BUSINESS_RULES_PKG.IS_VALID_HRCHY_ATTR_DETAILS',
                               IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name || ','|| V_ATTR_VALUE|| ','
                               ||V_INVALID_ATTRIBUTE_VALUE||
                               ',It is required to correct the above attribute value and rerun the update process for the record set of '||
                               'Hierarchy= '||IN_HRCHY_ATTR_DETAILS_REC.hrchy_hdr_name ||' Level= '||IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_level||
                               ' and Current Level Value= '||IN_HRCHY_ATTR_DETAILS_REC.hrchy_dtl_curr_lvl_val,
                               ERRNUMS.en_invalid_attr_value_err);
        RETURN V_RETURN_VALUE;
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'CCN_HIER_BUSINESS_RULES_PKG.IS_VALID_HRCHY_ATTR_DETAILS', SQLERRM, SQLCODE);
        RETURN V_RETURN_VALUE;
END IS_VALID_HRCHY_ATTR_DETAILS;

END CCN_HIER_BUSINESS_RULES_PKG;