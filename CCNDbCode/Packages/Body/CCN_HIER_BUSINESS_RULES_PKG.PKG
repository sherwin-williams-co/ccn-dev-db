create or replace PACKAGE BODY CCN_HIER_BUSINESS_RULES_PKG AS
/******************************************************************************
	CCN_HIER_BUSINESS_RULES_PKG

	This Package is intended to validate business rules for
	all the Hierarchies

created :SH 5/17/2013 

*******************************************************************************/

FUNCTION GET_HDR_LVL_NBR_SP(
/*******************************************************************************
 GET_HDR_LVL_NBR_SP  
   
  This procedure will return the Level number of a HIERARCHY for the 
  corresponding Description of the level

created : SH 05/17/2013
********************************************************************************/
in_HRCHY_HDR_NAME     IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE,
IN_HRCHY_HDR_LVL_DESC IN HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE
) return varchar2

IS

v_hrchy_hdr_lvl_nbr HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;

BEGIN
    SELECT HRCHY_HDR_LVL_NBR 
           INTO V_HRCHY_HDR_LVL_NBR
           from HIERARCHY_DESCRIPTION
          WHERE upper(HRCHY_HDR_NAME)     = upper(in_HRCHY_HDR_NAME)
            AND upper(HRCHY_HDR_LVL_DESC) = upper(in_hrchy_hdr_lvl_desc);
            
    return v_hrchy_hdr_lvl_nbr;

EXCEPTION
   WHEN OTHERS THEN
       --RETURN  ('Invalid HRCHY_HDR_LVL_DESC ');
       RETURN  ('-1');
END GET_HDR_LVL_NBR_SP;  

FUNCTION GET_HDR_LVL_DESC_SP(
/*******************************************************************************
 GET_HDR_LVL_DESC_SP  
   
  This procedure will return the Level description of a HIERARCHY for the 
  corresponding Dtl level

created : SH 07/03/2013
********************************************************************************/
in_HRCHY_HDR_NAME      IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE,
in_HRCHY_HDR_LVL_NBR   IN HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE
) return varchar2

IS

V_HRCHY_HDR_LVL_DESC HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE;

BEGIN
    SELECT HRCHY_HDR_LVL_DESC 
           INTO V_HRCHY_HDR_LVL_DESC
           from HIERARCHY_DESCRIPTION
          WHERE upper(HRCHY_HDR_NAME)    = upper(in_HRCHY_HDR_NAME)
            AND upper(HRCHY_HDR_LVL_NBR) = upper(in_HRCHY_HDR_LVL_NBR);
            
    return v_hrchy_hdr_lvl_desc;

exception
  when OTHERS then
       dbms_output.put_line('Invalid HRCHY_HDR_LVL_NBR '|| in_HRCHY_HDR_LVL_NBR);
       RETURN ('Invalid HRCHY_HDR_LVL_NBR ');
END GET_HDR_LVL_DESC_SP;

PROCEDURE Header_Lvl_Validation_sp (
/*******************************************************************************
 Header_Lvl_Validation_sp  
   
  This procedure will validate the business rules for any Hierarchy   
  i.e, it checks if the order of the levels added for a new hierarchy 
  is correct based on Global Hierarchy

created : SH 05/17/2013

  <HIERARCHY_DESCRIPTION>
  <row_data>
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>ABC STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>03</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>AREA</HRCHY_HDR_LVL_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>ABC STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>04</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>DIST</HRCHY_HDR_LVL_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  </row_data>
</HIERARCHY_DESCRIPTION>
******************************************************************************/	
    in_row_data                VARCHAR2
 )
 IS
 
   invalid_order_wrn       EXCEPTION;
   invalid_levels_err      EXCEPTION;
   V_CONTEXT               VARCHAR2(100);
   v_code                  NUMBER;
   v_prev_lvl              HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;
   V_HRCHY_HDR_NAME        HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE;
   V_HRCHY_HDR_LVL_NBR     HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;
   V_HRCHY_HDR_LVL_DESC    HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE;
   V_COUNT                 NUMBER := 1;
   v_WarningText           VARCHAR2(500);

   V_XML XMLTYPE := sys.xmltype(in_row_data);

BEGIN
  
    WHILE V_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']') = 1 LOOP 
       V_HRCHY_HDR_NAME     := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
       V_HRCHY_HDR_LVL_DESC := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_DESC/text()').GETSTRINGVAL();        

       --compare V_HRCHY_GLOBAL_LVL_NBR with the pre-defined levels   
       V_HRCHY_HDR_LVL_NBR := GET_HDR_LVL_NBR_SP('GLOBAL_HIERARCHY', V_HRCHY_HDR_LVL_DESC);

       --check if the levels eneterd are greater than that of global             
       IF TO_NUMBER(V_HRCHY_HDR_LVL_NBR) NOT BETWEEN 1 AND 9 THEN
          v_WarningText := 'The number of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is not in range of GLOBAL_HIERARCHY';
          RAISE invalid_levels_err;
       END IF;

       IF V_HRCHY_HDR_LVL_NBR < NVL(v_prev_lvl, V_HRCHY_HDR_LVL_NBR) THEN
          v_WarningText := 'The Order of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is incorrect';
          RAISE invalid_order_wrn;
       END IF;
       v_prev_lvl := V_HRCHY_HDR_LVL_NBR; --assigning old val to compare
       V_COUNT := V_COUNT + 1;
    END LOOP;

EXCEPTION
    WHEN invalid_levels_err THEN    
            v_code := errnums.en_invalid_levels_err;
            ERRPKG.RAISE_ERR(v_code, v_WarningText); 

    WHEN invalid_order_wrn THEN
           v_code := errnums.en_invalid_order_wrn;
            ERRPKG.RAISE_ERR(v_code, v_WarningText);

END Header_Lvl_Validation_sp;

PROCEDURE cost_center_change_Rules(
/*******************************************************************************
 cost_center_change_Rules  
   
  This procedure will validate the business rules for any Hierarchy   
  i.e, If a Global Hierarchy is changed for a Cost Center, other hierarchies 
  such as the Alternate D-A-D, SGL Division, or COA Division must be checked for 
  possible changes for the same cost center. This will be a Warning message to 
  check or verify other hierarchies for the same cost center.
  
  Also if a cost cente is null then give a message that it cannot be NULL(wildcard)

created : SH 05/30/2013

  <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME  HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE,
in_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE)

IS

    chk_hier_wrn  EXCEPTION;
    v_code        NUMBER;
    v_WarningText VARCHAR2(500);
    
BEGIN

      IF in_HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' and in_HRCHY_DTL_LEVEL = '9' THEN
           V_WARNINGTEXT := 'Please Check the ALTERNATE_DAD, COA Division and SGL Division for possible changes.';
           --RAISE chk_hier_wrn;
      END IF;

EXCEPTION
    WHEN chk_hier_wrn THEN
            v_code := errnums.en_chk_hier_wrn;
            errpkg.raise_err(v_code, V_WARNINGTEXT);
                
end cost_center_change_Rules;

procedure Stmnt_Type_Validation_Rules(
/*******************************************************************************
 Stmnt_Type_Validation_Rules  
   
  This procedure will validate the business rules for Statement Type   
  i.e, When a higher node's Statement_Type changes, all lower nodes will be checked 
  to make sure that they adhere to business rules. The only exception is the NULL
  which allows any value for the lower levels and thus, does not need validation

created : SH 05/31/2013

 <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)

IS

    Stmnt_Type_wrn    EXCEPTION;
    invalid_cc_wrn    EXCEPTION;
    v_code            NUMBER;

    V_DETAIL_STMNT_TYPE      VARCHAR2(50);
    V_CC_DETAIL_STMNT_TYPE   VARCHAR2(50);
    V_STATEMENT_TYPE         VARCHAR2(50);
    V_WARNINGTEXT            VARCHAR2(500);
    V_LEVEL                  NUMBER;
    V_HRCHY_DTL_CURR_LVL_VAL VARCHAR2(100);
    V_STMNT_TYPE_VALIDATION_IND VARCHAR2(1);
    V_UPPER_LVL_VER_VALUE       HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
    
cursor hier_detail_cur(p_HRCHY_HDR_NAME         IN hierarchy_description.hrchy_hdr_name%TYPE,
                       p_HRCHY_DTL_LEVEL        IN hierarchy_detail.hrchy_dtl_level%type,
                       p_HRCHY_DTL_CURR_LVL_VAL IN VARCHAR2) is
  select UPPER_LVL_VER_VALUE
    from hierarchy_detail
   where HRCHY_HDR_NAME         = p_HRCHY_HDR_NAME
     and HRCHY_DTL_LEVEL        = p_HRCHY_DTL_LEVEL
     and HRCHY_DTL_CURR_LVL_VAL = p_HRCHY_DTL_CURR_LVL_VAL;
    
BEGIN

      CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(IN_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE,
                                              'STATEMENT_TYPE',
                                              V_CC_DETAIL_STMNT_TYPE);

      IF V_CC_DETAIL_STMNT_TYPE IS NULL THEN
         V_WARNINGTEXT := 'Cost Center cannot be Null. Please check.';
         RAISE invalid_cc_wrn;
      END IF;
      
      SELECT STMNT_TYPE_VALIDATION_IND 
        INTO V_STMNT_TYPE_VALIDATION_IND
        FROM HIERARCHY_HEADER
       WHERE HRCHY_HDR_NAME = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;
      
      IF V_STMNT_TYPE_VALIDATION_IND = 'Y' THEN
         V_LEVEL                  := NVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1, 0);
         V_HRCHY_DTL_CURR_LVL_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL;
         WHILE V_LEVEL > 0 LOOP
            FOR  each_rec IN hier_detail_cur(IN_HIERARCHY_DETAIL_ROW.hrchy_hdr_name,
                                             V_LEVEL,
                                             V_HRCHY_DTL_CURR_LVL_VAL) LOOP
               CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(each_rec.UPPER_LVL_VER_VALUE,
                                                       'STATEMENT_TYPE',
                                                       V_STATEMENT_TYPE);
               --check if the Statement Type matches the new one for the level higher
               IF NVL(V_STATEMENT_TYPE,'**') = '**' THEN
                  V_DETAIL_STMNT_TYPE := V_CC_DETAIL_STMNT_TYPE;
               ELSE
                  V_DETAIL_STMNT_TYPE := V_STATEMENT_TYPE;
               END IF;
               IF V_CC_DETAIL_STMNT_TYPE <> V_DETAIL_STMNT_TYPE THEN
                  v_warningtext := 'The Hierarchy ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' has a Different Statement Type';
                  RAISE Stmnt_Type_wrn;
               END IF;
            END LOOP;
            select HRCHY_DTL_PREV_LVL_VAL INTO V_HRCHY_DTL_CURR_LVL_VAL
              from hierarchy_detail
             where HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.hrchy_hdr_name
               and HRCHY_DTL_LEVEL        = V_LEVEL
               and HRCHY_DTL_CURR_LVL_VAL = V_HRCHY_DTL_CURR_LVL_VAL
               and rownum < 2;
            V_LEVEL := V_LEVEL - 1;
         END LOOP;
      END IF;
  
EXCEPTION
    WHEN INVALID_CC_WRN THEN
            v_code := errnums.en_invalid_cc_wrn;
            ERRPKG.RAISE_ERR(V_CODE, V_WARNINGTEXT);     
 
    WHEN STMNT_TYPE_WRN THEN 
           v_code := errnums.en_Stmnt_Type_wrn;
            errpkg.raise_err(v_code, v_warningtext);  
        
END Stmnt_Type_Validation_Rules;

procedure Lower_Level_Exp_Rules(
/*******************************************************************************
 Lower_Level_Exp_Rules  
   
  This procedure will validate the business rules that before allowing the expiration 
  of any level (i.e. division or area) all lower nodes (area, district, cost center)
  must have been expired previously!

created : SH 06/04/2013

 <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME     hierarchy_detail.hrchy_hdr_name%TYPE, 
in_HRCHY_DTL_LEVEL    hierarchy_detail.hrchy_dtl_level%TYPE, 
in_HRCHY_DTL_EXP_DATE hierarchy_detail.hrchy_dtl_exp_date%TYPE
)

IS
    
    exp_date_wrn EXCEPTION;
    v_code       NUMBER;
    
    V_DETAIL_STMNT_TYPE      VARCHAR2(50);
    V_WARNINGTEXT            VARCHAR2(500);
    
cursor sub_hier_cur is
  select distinct hrchy_hdr_name 
    from hierarchy_description
   where hrchy_global_lvl_nbr is not null;

CURSOR HIER_DETAIL_CUR(P_HRCHY_HDR_NAME IN HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%TYPE, P_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE) IS
  select distinct HRCHY_DTL_EXP_DATE from hierarchy_detail 
   where hrchy_hdr_name = p_hrchy_hdr_name
     and HRCHY_DTL_LEVEL < p_HRCHY_DTL_LEVEL;
    
BEGIN
      FOR each_hier in sub_hier_cur LOOP
         FOR each_rec in hier_detail_cur(each_hier.hrchy_hdr_name, in_HRCHY_DTL_LEVEL) LOOP
            --check if the all the lower levels are expired
            IF in_HRCHY_DTL_EXP_DATE IS NULL THEN
               v_warningtext := 'The Hierarchy ' || in_HRCHY_HDR_NAME || ' does not have all the lower levels Expired yet.';
               RAISE exp_date_wrn;
            END IF;
         END LOOP;
      END LOOP;
EXCEPTION
    WHEN exp_date_wrn THEN
            v_code := errnums.en_exp_date_wrn;
            errpkg.raise_err(v_code, v_WarningText);

END Lower_Level_Exp_Rules;

procedure District_Duplication_Rules(
/*******************************************************************************
 District_Duplication_Rules  
   
  This procedure will validate the business rules for Reporting_DAD, City DAD, 
  or Alternate DAD that - duplication of a district number across all divisions 
  and Areas is not allowed

created : SH 05/31/2013

<HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME          hierarchy_detail.hrchy_hdr_name%TYPE,
in_HRCHY_DTL_LEVEL         hierarchy_detail.hrchy_dtl_level%TYPE,
in_HRCHY_DTL_CURR_ROW_VAL  hierarchy_detail.hrchy_dtl_curr_row_val%TYPE)

IS

    dist_exists_wrn EXCEPTION;
    v_code          NUMBER;
  
    V_WARNINGTEXT               VARCHAR2(500);
 
cursor hier_detail_cur(p_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.hrchy_hdr_name%TYPE, p_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%type) is
  SELECT distinct HRCHY_DTL_CURR_ROW_VAL FROM HIERARCHY_DETAIL
    WHERE HRCHY_HDR_NAME = P_HRCHY_HDR_NAME
      and HRCHY_DTL_LEVEL = p_HRCHY_DTL_LEVEL;
   
BEGIN
   FOR EACH_REC IN HIER_DETAIL_CUR(in_HRCHY_HDR_NAME, in_HRCHY_DTL_LEVEL) LOOP
      --check if the district is already existing
      IF in_HRCHY_DTL_CURR_ROW_VAL = EACH_REC.HRCHY_DTL_CURR_ROW_VAL THEN
         V_WARNINGTEXT := 'The District ' || in_HRCHY_DTL_CURR_ROW_VAL || ' already exists in ' || in_HRCHY_HDR_NAME;  
         RAISE dist_exists_wrn;
      END IF;
   END LOOP;
EXCEPTION
    WHEN dist_exists_wrn THEN
            v_code := errnums.en_dist_exists_wrn;
            errpkg.raise_err(v_code, v_WarningText); 
        
END District_Duplication_Rules;

procedure CC_Duplication_Rules(
/*******************************************************************************
 CC_Duplication_Rules  
   
  This procedure will validate the business rules for Reporting_DAD or City DAD, 
  where duplication of a Cost Center across areas or divisions is not allowed

created : SH 06/03/2013

  <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>
********************************************************************************/
in_HRCHY_HDR_NAME          hierarchy_detail.hrchy_hdr_name%TYPE,
in_HRCHY_DTL_LEVEL         hierarchy_detail.hrchy_dtl_level%TYPE,
in_HRCHY_DTL_CURR_ROW_VAL  hierarchy_detail.hrchy_dtl_curr_row_val%TYPE)

IS

    CC_EXISTS_WRN  EXCEPTION;
    V_CODE         NUMBER;
    V_ERRTEXT      VARCHAR2(500);
 
cursor hier_detail_cur(p_HRCHY_HDR_NAME IN HIERARCHY_DETAIL.hrchy_hdr_name%TYPE, p_HRCHY_DTL_LEVEL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%type) is
  SELECT DISTINCT HRCHY_DTL_CURR_ROW_VAL FROM HIERARCHY_DETAIL
    WHERE HRCHY_HDR_NAME = P_HRCHY_HDR_NAME
      and HRCHY_DTL_LEVEL = p_HRCHY_DTL_LEVEL;
   
begin
    
         FOR EACH_REC IN HIER_DETAIL_CUR(in_HRCHY_HDR_NAME, in_HRCHY_DTL_LEVEL) LOOP
                --check if the Cost_Center is already existing
                IF in_HRCHY_DTL_CURR_ROW_VAL = EACH_REC.HRCHY_DTL_CURR_ROW_VAL THEN
                   V_ERRTEXT := 'The Cost Center ' || in_HRCHY_DTL_CURR_ROW_VAL || ' already exists in ' || in_HRCHY_HDR_NAME;
                   RAISE CC_EXISTS_WRN;
                END IF;
         END LOOP;
       
exception      
    when CC_EXISTS_WRN then
            V_CODE := errnums.en_CC_EXISTS_WRN;
            errpkg.raise_err(V_CODE, V_ERRTEXT); 
        
END CC_Duplication_Rules;

procedure DUPLICATE_LEVEL_VALIDATION(
/*******************************************************************************
 DUPLICATE_LEVEL_VALIDATION  
   
  This procedure will validate the business rules same Hierarchy, 
  where duplication of a Cost Center in the same hierarchy is not allowed

created : SH 06/27/2013

  <HIERARCHY_DETAIL>
   <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>03</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>09</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>99</HRCHY_LEVEL3> 
      <HRCHY_DTL_DESC>S/E DIVISION</HRCHY_DTL_DESC> 
      <HRCHY_DTL_EFF_DATE>06-27-2013</HRCHY_DTL_EFF_DATE> 
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
            <Name>statement_type</Name> 
            <Description>pkListValue</Description> 
            <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
   </row_data>
 </HIERARCHY_DETAIL>

created : 06/27/2013 SH CCN
********************************************************************************/
IN_HIERARCHY_DETAIL_REC             HIERARCHY_DETAIL%ROWTYPE)

IS

   V_COUNT NUMBER := 0;
   V_CC_EXISTS_ERR EXCEPTION;
   V_LAST_LEVEL_FLAG VARCHAR2(1);
BEGIN
   
    SELECT DECODE(HRCHY_HDR_LEVELS,IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL,'Y','N')
      INTO V_LAST_LEVEL_FLAG
      FROM HIERARCHY_HEADER
     WHERE HRCHY_HDR_NAME = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME;

    IF V_LAST_LEVEL_FLAG = 'Y' THEN
        SELECT COUNT(*) 
          INTO V_COUNT
          FROM HIERARCHY_DETAIL
         WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME
           AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_ROW_VAL = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_CURR_ROW_VAL;
    ELSE
        SELECT COUNT(*) 
          INTO V_COUNT
          FROM HIERARCHY_DETAIL
         WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_REC.HRCHY_HDR_NAME
           AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_REC.HRCHY_DTL_CURR_LVL_VAL;
    END IF;

    IF V_COUNT > 0 THEN
        RAISE V_CC_EXISTS_ERR;
    END IF;

END DUPLICATE_LEVEL_VALIDATION;

FUNCTION VALIDATE_HIERARCHY(
/*******************************************************************************
 VALIDATE_HIERARCHY  
   
  This procedure will validate the hierarchy from bottom to top and raise 
  corresponding error if particular level value doesn't exist

created : JXC517 11/14/2013
revised : kdp 11/21/2013 Changed to return y/n
********************************************************************************/
    IN_HRCHY_HDR_NAME         VARCHAR2,
    IN_HRCHY_DTL_CURR_LVL_VAL VARCHAR2) RETURN VARCHAR
IS
    V_HRCHY_DTL_CURR_ROW_VAL    VARCHAR2(100);
    V_START_POSITION            NUMBER := 1;
    V_HIERARCHY_DETAIL_REC      HIERARCHY_DETAIL%ROWTYPE;

    CC_HIERARCHY_MISSING  EXCEPTION;
    V_CODE                NUMBER;
    V_ERRTEXT             VARCHAR2(500);
BEGIN
    --Loop through all the levels for the passed hierarchy header name excluding cost center level
    FOR rec IN (SELECT * 
                  FROM HIERARCHY_DESCRIPTION
                 WHERE HRCHY_HDR_NAME = IN_HRCHY_HDR_NAME
                   AND HRCHY_HDR_LVL_DESC <> 'Cost Center'
                 ORDER BY HRCHY_HDR_LVL_NBR) LOOP
        
        --Calculate the current row value based on the level and details from the description
        V_HRCHY_DTL_CURR_ROW_VAL := SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,
                                           V_START_POSITION,
                                           rec.LVL_VALUE_SIZE);
        
        --check if the record exists with the current row value and level in given hierarchy
        --if record doesn't exists, meaning the hierarchy is broken at that level
        --corresponding error description is build here, if fails
        BEGIN
            SELECT * INTO V_HIERARCHY_DETAIL_REC
              FROM HIERARCHY_DETAIL
             WHERE HRCHY_DTL_CURR_ROW_VAL = V_HRCHY_DTL_CURR_ROW_VAL
               AND HRCHY_HDR_NAME         = IN_HRCHY_HDR_NAME
               AND HRCHY_DTL_LEVEL        = rec.HRCHY_HDR_LVL_NBR
               AND ROWNUM < 2;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                V_ERRTEXT := 'The hierarchy Level ''' || rec.HRCHY_HDR_LVL_DESC || 
                             ''' with value of '''    || V_HRCHY_DTL_CURR_ROW_VAL || 
                             ''' doesn''t exists in ' || IN_HRCHY_HDR_NAME || 
                             ' Structure at level '   || rec.HRCHY_HDR_LVL_NBR;
                RAISE CC_HIERARCHY_MISSING;
        END;
        
        --This starting position will be the one that is used in next iteration to calculate the current row value
        V_START_POSITION := V_START_POSITION + rec.LVL_VALUE_SIZE;
    END LOOP;
    RETURN ('Y');
EXCEPTION 
    WHEN CC_HIERARCHY_MISSING THEN
        V_CODE := errnums.en_hierarachy_not_exists;
        errpkg.raise_err(V_CODE, V_ERRTEXT);
END VALIDATE_HIERARCHY;

PROCEDURE HIER_BUSINESS_RULES_MAIN(
/*******************************************************************************
 HIER_BUSINESS_RULES_MAIN  
  
  This procedure is intended to be the "main" Business Rules procedure.  This
  routine will be excuted both by Batch and our UI Screens.
  
  Its purposes is to execute each of the individual Business Rules as defined
  in the Technical Document

<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD Structure</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>01</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
      <HRCHY_LEVEL3>10</HRCHY_LEVEL3>
      <HRCHY_DTL_DESC>Ohio</HRCHY_DTL_DESC>
      <HRCHY_DTL_EFF_DATE>01-10-2013</HRCHY_DTL_EFF_DATE>
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
         <Name>statement_type</Name> 
         <Description>pkListValue</Description> 
         <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
  </row_data>
</HIERARCHY_DETAIL>
 
created : 06/27/2013 SH CCN
********************************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)

IS

     v_HRCHY_HDR_LVL_DESC HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%TYPE;
     V_HRCHY_HDR_NAME     HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
     V_HRCHY_DTL_LEVEL    HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
     V_HRCHY_DTL_EXP_DATE HIERARCHY_DETAIL.HRCHY_DTL_EXP_DATE%TYPE;
     V_HRCHY_DTL_DESC     HIERARCHY_DETAIL.HRCHY_DTL_DESC%TYPE;
     v_HRCHY_DTL_CURR_ROW_VAL HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE;
     V_CONTEXT            VARCHAR2(100);
  
BEGIN

       V_HRCHY_HDR_NAME := IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;
       V_HRCHY_DTL_LEVEL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
       V_HRCHY_HDR_LVL_DESC := ccn_hier_business_rules_pkg.GET_HDR_LVL_DESC_SP(V_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL);

       V_CONTEXT := 'Calling the Stmnt_Type_Validation_Rules';       
       CCN_HIER_BUSINESS_RULES_PKG.Stmnt_Type_Validation_Rules(IN_HIERARCHY_DETAIL_ROW);

       IF UPPER(V_HRCHY_HDR_NAME) = 'GLOBAL_HIERARCHY' and v_hrchy_dtl_level = '9' then
          V_CONTEXT := 'Calling the cost_center_change_Rules';
          CCN_HIER_BUSINESS_RULES_PKG.cost_center_change_Rules(V_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL);
       END IF;

       V_HRCHY_DTL_EXP_DATE := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE;
       IF V_HRCHY_DTL_EXP_DATE IS NOT NULL THEN
          V_CONTEXT := 'Calling the Lower_Level_Exp_Rules';
          CCN_HIER_BUSINESS_RULES_PKG.Lower_Level_Exp_Rules(V_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL, V_HRCHY_DTL_EXP_DATE);
       END IF;

       IF UPPER(V_HRCHY_HDR_NAME) IN ('REPORTING_DAD', 'CITY_MANAGER_DAD') THEN
          V_CONTEXT := 'Calling the CC_Duplication_Rules';
          v_HRCHY_DTL_CURR_ROW_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
          CCN_HIER_BUSINESS_RULES_PKG.CC_Duplication_Rules(v_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL, v_HRCHY_DTL_CURR_ROW_VAL);
       END IF;

       IF UPPER(V_HRCHY_HDR_LVL_DESC) = 'DISTRICT' THEN
          v_HRCHY_DTL_CURR_ROW_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
          IF UPPER(V_HRCHY_HDR_NAME) IN ( 'REPORTING_DAD', 'CITY_MANAGER_DAD', 'ALTERNATE_DAD') THEN
             V_CONTEXT := 'Calling the District_Duplication_Rules';
             CCN_HIER_BUSINESS_RULES_PKG.District_Duplication_Rules(v_HRCHY_HDR_NAME, V_HRCHY_DTL_LEVEL, v_HRCHY_DTL_CURR_ROW_VAL);
          END IF;
       END IF;

END HIER_BUSINESS_RULES_MAIN;

END CCN_HIER_BUSINESS_RULES_PKG;

