create or replace PACKAGE BODY          COMMON_TOOLS AS 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

-	DATE_BLANK(in_date)
created : 08/24/2010 kdp 
revised : 05/30/2013 mdh EXPIRE_DATA_SP changes.
************************************************************/

PROCEDURE ALTER_ALL_TRIGGERS ( 
/******************************************************************************
	ALTER_ALL_TRIGGERS   --    Alter all table(s) triggers

	This procedure will enable and/or disable all table(s) triggers based on an
  input "status" parameter.  
	  
created : 11/14/2012 MDH CCN Project....
*******************************************************************************/
IN_STATUS  IN VARCHAR2 )
IS
CURSOR c_tr IS (SELECT 'ALTER TRIGGER ' || 
                        trigger_name AS stmnt FROM USER_TRIGGERS);
--
--
v_code number;
v_errm varchar2(500);
--
BEGIN
--
IF IN_STATUS NOT IN ('ENABLE', 'enable', 'DISABLE', 'disable') THEN 
   DBMS_OUTPUT.PUT_LINE('COMMON_TOOLS.ALTER_ALL_TRIGGERS ' ||
                        'Status: <' || IN_STATUS  || '>' ||
                        ' IS Invalid, only ' || 'ENABLE or DISABLE' ||
                        ' are accepted as valid parameters');
   RAISE VALUE_ERROR;
END IF;
--
FOR tr IN c_tr LOOP
      EXECUTE IMMEDIATE tr.stmnt || ' ' || IN_STATUS;
END LOOP;
--
  EXCEPTION
--
        WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COMMONT_TOOLS.ALTER_ALL_TRIGGERS' ||
                 v_errm ||
                 'Polling Update Error' );
--
END alter_all_triggers;

FUNCTION CODE_DETAIL_VALID
/**********************************************************
	CODE_DETAIL_VALID(in_field_name, in_value_code)
		code_detail_valid function will be used to verify if a value is valid for a field.
    The field name and the field value must be passed.  
    This function will return a TRUE or FALSE condition. 

created : 08/15/2012 tal Cost Center Nucleus project.....
**********************************************************/
  ( in_field_name  IN  varchar2
  , in_value_code  IN  varchar2
  ) RETURN BOOLEAN AS 

   v_count  number;

BEGIN

    SELECT  count(1)  INTO  v_count
     FROM     code_detail
    WHERE CODE_DETAIL.CODE_HEADER_NAME   =  IN_FIELD_NAME
     AND  CODE_DETAIL.CODE_DETAIL_VALUE  =  IN_VALUE_CODE;

    IF  v_count > 0  THEN  --  entry was found in the CODE_DETAIL table
        RETURN TRUE;
    ELSE                   --  entry not found in the CODE_DETAIL table
        RETURN FALSE;
    END IF;
    
END code_detail_valid;

FUNCTION COMPUTE_EXPIRATION_DATE
/******************************************************************************
	COMPUTE_EXPIRATOIN_DATE (in_date)
  
		This function will be used to read in a date and subtract one day
    from that date (effective) and return a new date (expiration) which
    is one day prior.
    
    The an input date must be passed.  
    This function will return a new (expiration) date. 

created : 12/04/2012 mdh Cost Center Nucleus project.....
revised:
******************************************************************************/
  ( in_date  IN  date 
   ) RETURN date 
   IS 
BEGIN
	RETURN CCN_COMMON_TOOLS.COMPUTE_EXPIRATION_DATE(in_date);
END COMPUTE_EXPIRATION_DATE;


PROCEDURE COUNTY_NAMES_S_SP (
/*******************************************************************************
	COUNTY_NAMES_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the COUNTY_NAME table. For a State_code entered a Ref_Cursor will be 
  returned pointing to a table of all the County_Names for that State_Code

created : 06/07/2013 tal CCN Project....
changed : 
*******************************************************************************/
     in_STATE_CODE  IN  COUNTY_NAMES.STATE_CODE%TYPE
		,out_REF_CUR    OUT sys_refcursor   )
        IS
        
v_code number;
v_errm varchar2(500);

	BEGIN

		  OPEN out_REF_CUR FOR
			  
			  SELECT * 
			  FROM COUNTY_NAMES
			  WHERE state_code = in_STATE_CODE;
	  
  EXCEPTION
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'COUNTY_NAMES_S_SP, ' || ' ' ||
             ' STATE_CODE is ' || in_STATE_CODE || '; ' || v_errm);
                     
END COUNTY_NAMES_S_SP;


FUNCTION DATE_BLANK
/**********************************************************
	DATE_BLANK(in_date)
		blank Date function to fill in default date to an oracle NULL for insert into tables
		this is created since oracle cannot handle blank strings being converted to 
		date fields

created : 08/24/2010 kdp Payroll reporting project.....
**********************************************************/
    (in_date IN varchar2)
    RETURN varchar2
IS 
BEGIN
	RETURN CCN_COMMON_TOOLS.DATE_BLANK(in_date);
END DATE_BLANK;

PROCEDURE EMPLOYEE_DATA_S_SP   
/*******************************************************************************
	EMPLOYEE_DATA_S_SP

	This procedure is intended to return a ref cursor with data from 
	from the EMP_DATA table.  Specifically, this procedure is intended to 
  return the Social Security Number (national Identifier), given the 
  GEMS Employee ID necessary for the Feed-Back Process into the IDMS
  System.

created : 10/22/2012 MDH CCN Project....
changed : 
*******************************************************************************/
 ( IN_GEMS_EMPLOYEE_ID   IN  EMP_DATA.EMPLOYEE_NUMBER%TYPE
                          , OUT_EMP_DATA_ROWTYPE OUT EMP_DATA%ROWTYPE)
        IS         
--
emp_data_not_act_exp              EXCEPTION;
no_emp_data_exp                   EXCEPTION;
-- 
v_code number;
v_errm varchar2(500);
v_curr_date date := sysdate;
v_break                varchar(100);

	BEGIN

/*******************************************************************************
  The GEMS Emplyee I.D. must be numeric.  
*******************************************************************************/
--
--
BEGIN			  
v_break  := ('Select Employee_Data Table ' );  

			  SELECT *  INTO OUT_EMP_DATA_ROWTYPE
			  FROM emp_data
			  WHERE employee_number = in_gems_employee_id;
        
v_break  := ('GOOD Select Employee_Data Table ' );  
--        
--       if OUT_EMPLOYEE_DATA_ROWTYPE.emp_payroll_status not in ('A')  then
--           raise emp_data_not_act_exp;
--       end if;
EXCEPTION
  WHEN no_data_found THEN
     RAISE no_emp_data_exp;
--  See First Error A
END;
--
	  
  EXCEPTION
 
-- First Error A    
               WHEN no_emp_data_exp THEN
                    v_code := errnums.en_no_emp_data_err;     
                    errpkg.raise_err(v_code, 'EMPLOYEE_DATA_S_SP.no_emp_data_exp '  ,
                   'GEMS I.D. "' || in_gems_employee_id || 
                   '" not found in GEMS Master File "' );  
-- Second Error B    
--               when emp_data_not_act_exp then
--                    v_code := errnums.en_no_emp_data_err;   
--                    errpkg.raise_err(v_code, 'EMPLOYEE_DATA_S_SP.sls_emp_data_not_act_exp '  ,
--                   'GEMS I.D. "' || ingems_employee_id || 
--                   '" does not have an active status on GEMS "' );    
--                   
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'EMPLOYEE_DATA_S_SP' ||
             'GEMS_EMPLOYEE_ID' || in_gems_employee_id ||
              v_errm ||
              v_break);
                     

END EMPLOYEE_DATA_S_SP;


PROCEDURE EXPIRE_DATA_SP (
/******************************************************************************
	EXPIRE_DATA_SP   --    Expire selected Table Rows Procedure

	This procedure is intended to expire specific row row(s) of data based on 
       table_name, Cost_Center, Address_Type(Addresses only), and Effective_Date. 
       
  This procedure is intended to be used for the follownig tables: 
  
            ADDRESS_CAN, ADDRESS_USA, ADDRESS_MEX, ADDRESS_OTHER,ADDRESS_BRB
          , BANK_CARD
          , MARKETING
          , STATUS
          , TYPE
  
created : 12/04/2012 MDH CCN Project.....
revised : 05/23/2014 MDH Add Address_Type Parm for Address Records only.
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
changed : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
*******************************************************************************/
--
  in_ROW_TABLE            IN  varchar2
, in_COST_CENTER          IN  COST_CENTER.COST_CENTER_CODE%TYPE
, in_EFFECTIVE_DATE       IN  date 
, in_ADDRESS_TYPE         IN  ADDRESS_USA.ADDRESS_TYPE%TYPE DEFAULT NULL)

IS
 v_code            number;
 v_errm            varchar2(500);
 v_expiration_Date date;
 v_date            date;
 v_row_id          rowid;
 v_count           integer := 0;
 sql_stmt          varchar2(400);
 v_break           varchar(100);
--
 parameter_null_exp	      EXCEPTION;
 multiple_expire_exp	    EXCEPTION;
 no_unexpire_exp	        EXCEPTION;
 record_update_exp	      EXCEPTION;
--
--
BEGIN
-- verify that the input parameters are not null
v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP ' ); 
  IF in_ROW_TABLE IS NULL   OR
     in_COST_CENTER IS NULL  OR
     (in_ROW_TABLE IN ('ADDRESS_CAN','ADDRESS_MEX','ADDRESS_OTHER','ADDRESS_USA','ADDRESS_BRB')
        AND  in_ADDRESS_TYPE  IS NULL)  OR
     in_EFFECTIVE_DATE IS NULL THEN
       RAISE parameter_null_exp;
  END IF;
--
--******************************************************************************
-- select the table (in_row_table) for the cost_center 
-- verify that only one row for the cost center has null expiration date.
-- 05/23/2013 MDH for Address records add the ADDRESS_TYPE parameter
--******************************************************************************
  BEGIN
--   
   v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Count unexpire recs)' ); 
--
    IF in_ROW_TABLE IN ('ADDRESS_CAN','ADDRESS_MEX','ADDRESS_OTHER','ADDRESS_USA','ADDRESS_BRB') THEN
      sql_stmt := ('select COUNT(1) from ' ||
                    in_ROW_TABLE || 
                    ' where UPPER(COST_CENTER_CODE)  =  UPPER(:in_COST_CENTER) ' || 
                    ' and ADDRESS_TYPE  =  :in_ADDRESS_TYPE ' ||
                    ' and  EXPIRATION_DATE is null');
      EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER, in_ADDRESS_TYPE;              
    ELSE
       sql_stmt := ('select COUNT(1) from ' ||
                    in_ROW_TABLE || 
                    ' where UPPER(COST_CENTER_CODE)  =  UPPER(:in_COST_CENTER) ' || 
                    ' and  EXPIRATION_DATE is null');
       EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER;               
    END IF;
--                  
--      EXECUTE IMMEDIATE sql_stmt INTO v_count USING in_COST_CENTER, in_ADDRESS_TYPE;
                   
      IF v_count  >  1  THEN
          RAISE multiple_expire_exp;
      END IF;
  END;
--
--*****************************************************************************
-- select the table (in_row_table) for the cost_center
-- 05/23/2013 MDH for Address records add the ADDRESS_TYPE parameter
-- 05/30/2013 MDH only finish this procedure if v_count >0 otherwise let it
--                drop out as there are no records to expire.
--*****************************************************************************
IF v_count  >  0  THEN
  BEGIN
    v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Found unexpire recd)' ); 
--
    IF in_ROW_TABLE IN ('ADDRESS_CAN','ADDRESS_MEX','ADDRESS_OTHER','ADDRESS_USA','ADDRESS_BRB') THEN
        sql_stmt := ('select EXPIRATION_DATE, ROWID from ' ||
                  in_ROW_TABLE || 
                  ' where UPPER(COST_CENTER_CODE) =  UPPER(:in_COST_CENTER) ' ||
                  ' and ADDRESS_TYPE  =  :in_ADDRESS_TYPE ' || 
                  ' and EXPIRATION_DATE is null');
         EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER, in_ADDRESS_TYPE;          
    ELSE
        sql_stmt := ('select EXPIRATION_DATE, ROWID from ' ||
                  in_ROW_TABLE || 
                  ' where UPPER(COST_CENTER_CODE) =  UPPER(:in_COST_CENTER) ' || 
                  ' and EXPIRATION_DATE is null');
        EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER;          
    END IF;                 
--
--      EXECUTE IMMEDIATE sql_stmt INTO v_expiration_date, v_row_id USING in_COST_CENTER, in_ADDRESS_TYPE;
--               
  EXCEPTION
     WHEN others THEN
        RAISE no_unexpire_exp;
  
  END;
--
--************************************************************************************
-- if found, compute the expiration date using the COMPUTE_EXPIRATION_DATE function
--  in_ROW_TABLE.expiration_date := COMPUTE_EXPIRATION_DATE ( in_EFFECTIVE_DATE);
--************************************************************************************
--
    --v_date := COMPUTE_EXPIRATION_DATE (sysdate);--in_EFFECTIVE_DATE); --in_EFFECTIVE_DATE - 1   
    --Future dated effective dates are not possible
    --If past dated effective date => expiration date = effective date - 1
    --If current dated effective date => expiration date = system date - 1
    v_date := COMPUTE_EXPIRATION_DATE (in_EFFECTIVE_DATE);
--
--    
--*****************************************************************************
--  update the table/row for IN_ROW_TABLE
--*****************************************************************************
  BEGIN
       v_break  :=  ('Entered the COMMON_TOOLS.Expire_Data_SP (Update expire date)' ); 
       v_expiration_date := v_date;
       sql_stmt := ('UPDATE ' || in_ROW_TABLE ||
                       ' SET EXPIRATION_DATE =  :v_expiration_date ' ||
                       ' WHERE  rowid = :v_row_id ');
       
       EXECUTE IMMEDIATE sql_stmt USING v_expiration_date, v_row_id;
       dbms_output.put_line('ran update??' || 'v_expiration_date '  || v_expiration_date || 'with table ' || in_ROW_TABLE);
-- 
--   
            EXCEPTION 
             WHEN OTHERS THEN 
                 RAISE record_update_exp;
--
  END;
END IF;

EXCEPTION

   WHEN parameter_null_exp THEN  
        v_code := errnums.en_parameter_null_err;
		      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.parameter_null_exp ' 
             		,'One or more input parameteres is null ');  
                
   WHEN multiple_expire_exp THEN  
		   		v_code := errnums.en_multipl_expire_err;
			      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.multipl_expire_exp ' 
             		,'More than 1 unexpired rows found for table: ' ||
                    in_ROW_TABLE ||   ' ccntr: ' ||
                  in_COST_CENTER );     
               
   WHEN no_unexpire_exp THEN  
		   		v_code := errnums.en_no_unexpire_err;
			      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.no_unexpire_exp ' 
             		,'No unexpired rows found for table: ' ||
                    in_ROW_TABLE ||   ' ccntr: ' ||
                  in_COST_CENTER );     
              
   WHEN record_update_exp THEN  
 		   		v_code := errnums.en_record_update_err;
			      errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP.record_update_exp ' 
            		,'Record Update Error for table: ' ||
                    in_ROW_TABLE ||   ' ccntr: ' ||
                  in_COST_CENTER  ||
                  ' ROW ID: ' || V_ROW_ID);
                   
    WHEN others THEN
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,500);
        errpkg.raise_err(v_code, 'COMMON_TOOLS.EXPIRE_DATA_SP Error' ||
                         v_errm || 
                        v_break );

END EXPIRE_DATA_SP;

-------------------

FUNCTION cost_center_look_up_fnc( 
/**********************************************************
This function will return 6 digit COST_CENTER_CODE
when the 4-digit code is passed

parameters: in

created : 04/19/2013 SH CCN Project
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
          04/07/2016 axd783 Modified the logic to list the cost centers having same last 4 characters 
**********************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE 
)
RETURN varchar2
IS

  v_COST_CENTER_CODE          VARCHAR2(30);  
  invalid_cost_center_err     EXCEPTION;
  multi_costcntr_error        EXCEPTION;
  v_cost_center_str           VARCHAR2(30);
    
--
BEGIN

    SELECT LISTAGG(COST_CENTER_CODE, ',') 
           WITHIN GROUP (ORDER BY COST_CENTER_CODE)
           INTO v_cost_center_str
      FROM COST_CENTER
     WHERE UPPER(DECODE(LENGTH(in_COST_CENTER)
                       ,6,COST_CENTER_CODE
                       ,4,SUBSTR(COST_CENTER_CODE,3)
                       ,NULL)) = UPPER(in_COST_CENTER);
   
    IF v_cost_center_str IS NOT NULL THEN
       IF INSTR(v_cost_center_str, ',') > 0 THEN
           RAISE multi_costcntr_error;
       END IF;
    ELSE
       RAISE invalid_cost_center_err;
    END IF;
   
    --It comes here only if there is only one cost center for the input passed    
    v_COST_CENTER_CODE := v_cost_center_str ;  
   
    RETURN v_COST_CENTER_CODE;
  
EXCEPTION
 
    WHEN invalid_cost_center_err THEN  
         errpkg.raise_err(errnums.en_invalid_cost_center_err
                         ,'COMMON_TOOLS.cost_center_look_up_fnc' ||'Entered Cost_Center_Code was "' ||  in_COST_CENTER || '". ' 
                           ||'CCN_TABLE_IU_PKG ' || 'Cost Center is not found - Would you like to Add? ' ); 
 
    WHEN multi_costcntr_error THEN
         errpkg.raise_err(errnums.en_dup_mainframe_costcntr_err
                         ,'COMMON_TOOLS.cost_center_look_up_fnc'
                         ,'Two or more Cost Centers ''' ||v_cost_center_str|| '''exists with same last four characters in the Mainframe');
   
    WHEN OTHERS THEN
         v_COST_CENTER_CODE := in_COST_CENTER;
         errpkg.raise_err(SQLCODE
                         ,'cost center not found COMMON_TOOLS.cost_center_look_up_fnc Error');    

END cost_center_look_up_fnc;
                            
FUNCTION country_look_up_fnc( 
/**********************************************************
This function will return COUNTRY_CODE


parameters: in

created : 05/17/2013 kdp CCN Project
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
**********************************************************/
in_COST_CENTER IN COST_CENTER.COST_CENTER_CODE%TYPE 
)
RETURN varchar2
IS

	v_COUNTRY_CODE COST_CENTER.COUNTRY_CODE%TYPE;
	v_COST_CENTER_CODE COST_CENTER.COST_CENTER_CODE%TYPE :=	COMMON_TOOLS.cost_center_look_up_fnc(in_COST_CENTER);
--
BEGIN

    SELECT COUNTRY_CODE
      INTO v_COUNTRY_CODE
      FROM COST_CENTER
     WHERE UPPER(cost_center_code) = UPPER(v_COST_CENTER_CODE);
  
     RETURN v_COUNTRY_CODE;
     
 EXCEPTION
  WHEN OTHERS THEN
     v_COST_CENTER_CODE := in_COST_CENTER;

END country_look_up_fnc;

FUNCTION ADDRESS_LOOK_UP_FNC( 
/**********************************************************
This function will return ADDRESS TABLE name where the cost center is located

created : 08/18/2015 nxk927 CCN Project...
modified: 08/26/2015 jxc517 CCN Project....
          Added PRI under ADDRESS_USA as it should not go into ADDRESS_OTHER
changed : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
**********************************************************/
IN_COST_CENTER  IN VARCHAR2
)
RETURN VARCHAR2
IS
  V_TABLE_NAME   VARCHAR2(20);
BEGIN
    SELECT DECODE(COUNTRY_CODE, 'USA', 'ADDRESS_USA',
                                'PRI', 'ADDRESS_USA',
                                'CAN', 'ADDRESS_CAN',
                                'MEX', 'ADDRESS_MEX',
                                'BRB', 'ADDRESS_BRB',
                                'ADDRESS_OTHER')
      INTO V_TABLE_NAME
      FROM ADDRESS_VW
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER)
       AND EXPIRATION_DATE IS NULL
       AND ROWNUM = 1;
     RETURN V_TABLE_NAME;
     --If there is no unexipired record, we need to handle at the place where this function is being called
EXCEPTION
  WHEN OTHERS THEN
      RETURN NULL;
END ADDRESS_LOOK_UP_FNC;

FUNCTION ELIMINATE_SPECIAL_CHRCTRS(
/**********************************************************
This function will replace special characters from input text


parameters:

IO_TEXT_STRING  IN OUT

created : 08/08/2013 CCN Project
**********************************************************/
IO_TEXT_STRING    IN    VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_TEXT_STRING);
END ELIMINATE_SPECIAL_CHRCTRS;

FUNCTION IS_AUTHORIZED_USER(
/**********************************************************
This function will authorize the user based on SECURITY_MATRIX table


parameters:

IN  IN_USER_ID
OUT OUT_REF_CURSOR

created : 09/04/2013 CCN Project
modified: 08/27/2014 jxc517 CCN Project
**********************************************************/
IN_USER_ID      IN     VARCHAR2,
OUT_REF_CURSOR     OUT CCN_COMMON_TOOLS.REF_CURSOR) RETURN VARCHAR2
IS
BEGIN
    IF CCN_COMMON_TOOLS.IS_AUTHORIZED_USER(IN_USER_ID, 'CCN', OUT_REF_CURSOR) THEN
        RETURN 'Y';
    ELSE
        RETURN 'N';
    END IF;
END IS_AUTHORIZED_USER;

PROCEDURE CHECK_DUP_COST_CENTER(
/**********************************************************
	CHECK_DUP_COST_CENTER

	This procedure logs error if a cost center has a dup based on the last four digits

in_COST_CENTER_CODE - Input Cost Center to validate for duplication
in_CATEGORY_CODE    - Input category code

created : 09/11/2013 jxc517 CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
          04/07/2016 axd783 Changed Logic to look for 6 character compare
**********************************************************/
   in_COST_CENTER_CODE    IN VARCHAR2,
   in_CATEGORY_CODE       IN VARCHAR2) 
IS
   V_COUNT                     NUMBER := 0;
   dup_mainframe_costcntr_err  EXCEPTION;
   first_two_digit_err         EXCEPTION;
   
BEGIN
   --Last 4 digit dup value validation is not needed for territory category
   IF NVL(in_CATEGORY_CODE,'X') <> 'T' THEN
      --Cost center usually is of 6 characters, in which last 4 characters need to be validated
      --Thats implies from 3rd position till 6th position
      --Example : 781234 - last 4 characters implies "1234"
      SELECT COUNT(*) INTO V_COUNT
        FROM COST_CENTER
       WHERE UPPER(COST_CENTER_CODE) = UPPER(in_COST_CENTER_CODE)
         AND UPPER(COST_CENTER_CODE) <> UPPER(IN_COST_CENTER_CODE);

      IF V_COUNT > 0 THEN
         RAISE dup_mainframe_costcntr_err;
      END IF;
   END IF;
   --Cost center usually is of 6 characters, in which first 2 characters need to be validated
   --Thats implies from 1st position till 2nd position
   --Example : 781234 - first 2 characters implies "78"
   SELECT COUNT(*) INTO V_COUNT
     FROM CODE_DETAIL
    WHERE UPPER(CODE_DETAIL_VALUE) = UPPER(SUBSTR(IN_COST_CENTER_CODE,1,2))
      AND CODE_HEADER_NAME  = 'COST_CENTER_PREFIX'
      AND CODE_HEADER_TYPE  = 'COD';

   IF V_COUNT = 0 THEN
      RAISE first_two_digit_err;
   END IF;
   
EXCEPTION
   WHEN dup_mainframe_costcntr_err THEN
        errpkg.raise_err(errnums.en_dup_mainframe_costcntr_err
                        ,'COMMON_TOOLS.CHECK_DUP_COST_CENTER '
                        ,'COMMON_TOOLS ' || 'Cost Center with last four characters as ''' || SUBSTR(in_COST_CENTER_CODE,3) || ''' already exists in the Mainframe');
                         
   WHEN first_two_digit_err THEN
        errpkg.raise_err(errnums.en_first_two_digit_err
			            ,'COMMON_TOOLS.CHECK_DUP_COST_CENTER '
			            ,'COMMON_TOOLS ' || 'Cost Center with first two digit as ''' || SUBSTR(IN_COST_CENTER_CODE,1,2) || ''' is not allowed in Mainframe');

END CHECK_DUP_COST_CENTER;

PROCEDURE REPLACE_COST_CENTER(
/**********************************************************
	REPLACE_COST_CENTER

	This procedure will repalce the OLD cost center with NEW cost center

IN_OLD_CC - Input Cost Center to be removed
IN_NEW_CC - Input Cost Center to be created

created : 03/24/2015 jxc517 CCN Project....
modified:
**********************************************************/
          IN_OLD_CC IN VARCHAR2,
          IN_NEW_CC IN VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   VAR                VARCHAR2(30000);
   V_CC_NAME          VARCHAR2(100);
   FROM_CC            VARCHAR2(6) := IN_OLD_CC;
   TO_CC              VARCHAR2(6) := IN_NEW_CC;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
   
   V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
   V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('REPLACE_COST_CENTER', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   --Loop through all the tables which holds cost center details
   --Below tabels are not needed as they are not associated with cost_center
   --'SALES_REP','TERRITORY_SALES_MGR','TERRITORY','TERRITORY_ASSIGNMENT','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL'
   FOR REC IN (SELECT * FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','TERRITORY_ASSIGNMENT','TERRITORY_SALES_MGR','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY 2) LOOP

      --Build the column list from the data dictionary and store in variable VAR
      VAR := NULL;
      SELECT * BULK COLLECT INTO COL_TABLE
        FROM USER_TAB_COLUMNS
       WHERE TABLE_NAME = REC.TABLE_NAME
       ORDER BY COLUMN_ID;
      
      FOR i IN 1..COL_TABLE.LAST LOOP
         /*IF COL_TABLE(i).DATA_TYPE = 'DATE' THEN
            VAR := VAR || ',TO_CHAR(' || COL_TABLE(i).COLUMN_NAME || ',''DD-MON-YYYY HH24:MI:SS'')';
         ELSE
            VAR := VAR || ',' || COL_TABLE(i).COLUMN_NAME;
         END IF;*/
         VAR := VAR || ',' || COL_TABLE(i).COLUMN_NAME;
      END LOOP;
      
      --Data in VAR for COST_CENTER_TABLE will be ,COST_CENTER_CODE,COST_CENTER_NAME,CATEGORY,ENTITY_TYPE,STATEMENT_TYPE,COUNTRY_CODE,TRANSPORT_TYPE,BEGIN_DATE,OPEN_DATE,MOVE_DATE,CLOSE_DATE,FINANCIAL_CLOSE_DATE,POS_PROG_VER_EFF_DATE,UPS_ZONE_CODE,RPS_ZONE_CODE,CURRENCY_CODE,POS_PROG_VER_NBR,LEASE_OWN_CODE,MISSION_TYPE_CODE,DUNS_NUMBER,PRI_LOGO_GROUP_IND,SCD_LOGO_GROUP_IND,BANKING_TYPE,DEPOSIT_BAG_REORDER,DEPOSIT_TICKET_REORDER,POP_KIT_CODE,GLOBAL_HIERARCHY_IND
      --Take the column names excluding COST_CENTER_CODE whcih will be from 19th character till the end
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ' || REC.TABLE_NAME || 
                                                              ' SELECT '''|| TO_CC ||''','|| SUBSTR(VAR,19) || 
                                                              ' FROM ' || REC.TABLE_NAME || 
                                                              ' WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(FROM_CC) ||'''';
   END LOOP;
   
   --SQL Statement to insert NEW cost center records from OLD cost center Hierarchy_Detail records
   --Pre-final level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,HRCHY_DTL_CURR_LVL_VAL,'||
                                              'REPLACE(HRCHY_DTL_NEXT_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_NEXT_LVL_VAL,'||
                                              'HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_NEXT_LVL_VAL LIKE ''%' || FROM_CC || '%''';
   --Last level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,' ||
                                              'REPLACE(HRCHY_DTL_CURR_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_CURR_LVL_VAL,'||
                                              'HRCHY_DTL_NEXT_LVL_VAL,HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,'||
                                              ''''||TO_CC||''' HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%' || FROM_CC || '%''';

   --Delete all inserted Audit_Log records as we need to copy those from OLD cost center
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM AUDIT_LOG '||
                                                           ' WHERE TRANSACTION_ID LIKE ''%'|| TO_CC ||'%''';

   --SQL Statement to insert NEW cost center records from OLD cost center Audit_Log records
   FOR REC IN (SELECT * FROM AUDIT_LOG WHERE TRANSACTION_ID LIKE '%'||FROM_CC||'%') LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO AUDIT_LOG VALUES ('||
                                         '(SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),'||''''||
                                         REPLACE(REC.TRANSACTION_ID,FROM_CC,TO_CC)||''','||
                                         --Date should be stored with timestamp for audit to pick the records correctly
                                         'TO_DATE('''||TO_CHAR(REC.TRANSACTION_DATE,'DD-MON-YYYY HH24:MI:SS')||''',''DD-MON-YYYY HH24:MI:SS'')'||','''||
                                         REC.TABLE_NAME||''','''||
                                         REPLACE(REC.TABLE_ROW_DATA.GETSTRINGVAL(),FROM_CC,TO_CC)||''','''||
                                         REC.CHANGE_BY||''','''||
                                         REPLACE(REC.TABLE_PK_VALUE.GETSTRINGVAL(),FROM_CC,TO_CC)||''','''||
                                         REC.AUDIT_REC_FLAG||''','||
                                         'NULL,'||
                                         'NULL)';
   END LOOP;
   
   --SQL Statement to delete the OLD cost center records from all cost center related Tables
   FOR REC IN (SELECT 'DELETE FROM '||TABLE_NAME||' WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(FROM_CC) ||'''' AS VALUE 
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','TERRITORY_ASSIGNMENT','TERRITORY_SALES_MGR','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY TABLE_ORDER DESC) LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := REC.VALUE;
   END LOOP;
   
   --SQL Statement to delete the OLD cost center records from Hierarchy_Detail Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM HIERARCHY_DETAIL '||
                                                           ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| FROM_CC ||'%'' '||
                                                           '    OR HRCHY_DTL_NEXT_LVL_VAL LIKE ''%'|| FROM_CC ||'%''';

   --SQL Statement to delete the OLD cost center records from Audit_Log Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM AUDIT_LOG '||
                                                           ' WHERE TRANSACTION_ID  LIKE ''%'|| FROM_CC ||'%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
   
   --Commit all the changes in the database
   COMMIT;
   
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('REPLACE_COST_CENTER', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'COMMON_TOOLS.REPLACE_COST_CENTER', SQLERRM, SQLCODE);
      RAISE;
END REPLACE_COST_CENTER;

FUNCTION IS_PASSED_COL_IN_TAB(
/**********************************************************
This function will return true if passed column is field in the table passed

parameters:
IN  IN_TABLE_NAME

created : 03/24/2015 jxc517 CCN Project
modified: 
**********************************************************/
IN_TABLE_NAME      IN     VARCHAR2,
IN_COLUMN_NAME     IN     VARCHAR2) RETURN VARCHAR2
IS
    V_COUNT NUMBER := 0;
BEGIN
    BEGIN
        SELECT COUNT(*)
          INTO V_COUNT
          FROM USER_TAB_COLUMNS
         WHERE TABLE_NAME = IN_TABLE_NAME
           AND COLUMN_NAME = IN_COLUMN_NAME;
    EXCEPTION
        WHEN OTHERS THEN
            V_COUNT := 0;
    END;
    IF V_COUNT > 0 THEN
        RETURN 'Y';
    ELSE
        RETURN 'N';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'N';
END IS_PASSED_COL_IN_TAB;

PROCEDURE COPY_COST_CENTER(
/**********************************************************
	COPY_COST_CENTER

	This procedure will copy the OLD cost center into NEW cost center

IN_OLD_CC - Input Cost Center to be copied from
IN_NEW_CC - Input Cost Center to be created

created : 09/11/2013 jxc517 CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
modified: 02/24/2015 jxc517 CCN Project Team...
          Territory sales manager code has been removes as sales manager columns
          are no more applicable individually, they went into Hierarchy_Detail table
modified: 03/24/2015 jxc517 CCN Project Team...
          Removed code for deleting the existing cost center from copy process
          Removed code for deleting audit for new cost center   the same from old cost center
modified: 10/10/2017 rxv940 CCN Project Team...
          Added code to call Polling process 
modified: 11/07/2017 bxa919 CCN Project Team...
          Removed call for POS_MASTER_SP		  
**********************************************************/
          IN_OLD_CC IN VARCHAR2,
          IN_NEW_CC IN VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   VAR                VARCHAR2(30000);
   V_CC_NAME          VARCHAR2(100);
   FROM_CC            VARCHAR2(6) := IN_OLD_CC;
   TO_CC              VARCHAR2(6) := IN_NEW_CC;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
   
   V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
   V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('COPY_COST_CENTER', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   --Loop through all the tables which holds cost center details
   --Below tabels are not needed as they are not associated with cost_center
   --'SALES_REP','TERRITORY_SALES_MGR','TERRITORY','TERRITORY_ASSIGNMENT','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL'
   FOR REC IN (SELECT * FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY 2) LOOP

      --Build the column list from the data dictionary and store in variable VAR
      VAR := NULL;
      SELECT * BULK COLLECT INTO COL_TABLE
        FROM USER_TAB_COLUMNS
       WHERE TABLE_NAME = REC.TABLE_NAME
       ORDER BY COLUMN_ID;
      
      FOR i IN 1..COL_TABLE.LAST LOOP
         VAR := VAR || ',' || COL_TABLE(i).COLUMN_NAME;
      END LOOP;
      
      --Data in VAR for COST_CENTER_TABLE will be ,COST_CENTER_CODE,COST_CENTER_NAME,CATEGORY,ENTITY_TYPE,STATEMENT_TYPE,COUNTRY_CODE,TRANSPORT_TYPE,BEGIN_DATE,OPEN_DATE,MOVE_DATE,CLOSE_DATE,FINANCIAL_CLOSE_DATE,POS_PROG_VER_EFF_DATE,UPS_ZONE_CODE,RPS_ZONE_CODE,CURRENCY_CODE,POS_PROG_VER_NBR,LEASE_OWN_CODE,MISSION_TYPE_CODE,DUNS_NUMBER,PRI_LOGO_GROUP_IND,SCD_LOGO_GROUP_IND,BANKING_TYPE,DEPOSIT_BAG_REORDER,DEPOSIT_TICKET_REORDER,POP_KIT_CODE,GLOBAL_HIERARCHY_IND
      --Take the column names excluding COST_CENTER_CODE whcih will be from 19th character till the end
      IF IS_PASSED_COL_IN_TAB(REC.TABLE_NAME, 'EXPIRATION_DATE') = 'N' THEN
         SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ' || REC.TABLE_NAME || 
                                                                 ' SELECT '''|| TO_CC ||''','|| SUBSTR(VAR,19) || 
                                                                 '   FROM ' || REC.TABLE_NAME || 
                                                                 '  WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(FROM_CC) ||'''';
      ELSE
         SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ' || REC.TABLE_NAME || 
                                                                 ' SELECT '''|| TO_CC ||''','|| SUBSTR(VAR,19) || 
                                                                 '   FROM ' || REC.TABLE_NAME || 
                                                                 '  WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(FROM_CC) ||''''||
                                                                 '    AND EXPIRATION_DATE IS NULL';
      END IF;
   END LOOP;
   
   --SQL Statement to insert NEW cost center records from OLD cost center Hierarchy_Detail records
   --Pre-final level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,HRCHY_DTL_CURR_LVL_VAL,'||
                                              'REPLACE(HRCHY_DTL_NEXT_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_NEXT_LVL_VAL,'||
                                              'HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_NEXT_LVL_VAL LIKE ''%' || FROM_CC || '%''';
   --Last level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,' ||
                                              'REPLACE(HRCHY_DTL_CURR_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_CURR_LVL_VAL,'||
                                              'HRCHY_DTL_NEXT_LVL_VAL,HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,'||
                                              ''''||TO_CC||''' HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%' || FROM_CC || '%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
   -- Call to polling process
  /* Removed POS_MASTER_SP() call as a part of polling Changes*/ 
   --Commit all the changes in the database
   COMMIT;
   
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('COPY_COST_CENTER', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

EXCEPTION
   WHEN OTHERS THEN
      --DBMS_OUTPUT.PUT_LINE('Error in COMMON_TOOLS.COPY_COST_CENTER : ' || SQLCODE ||' - ' ||SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COMMON_TOOLS.COPY_COST_CENTER', SQLERRM, SQLCODE);
      RAISE;
END COPY_COST_CENTER;

PROCEDURE BULK_COPY_COST_CENTER
/**********************************************************
	BULK_COPY_COST_CENTER

	This procedure will copy the OLD cost center into NEW cost center in batch as bulk

created : 02/21/2014 jxc517 CCN Project....
**********************************************************/
IS
BEGIN

    FOR rec IN (SELECT * FROM COST_CENTER_COPY) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_COPY_LOAD;
         COPY_COST_CENTER(rec.COST_CENTER_CODE_OLD,rec.COST_CENTER_CODE_NEW);
      EXCEPTION
         WHEN OTHERS THEN
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE_OLD, 'COMMON_TOOLS.BULK_COPY_COST_CENTER', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_COPY_LOAD;
      END;
    END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'COMMON_TOOLS.BULK_COPY_COST_CENTER', SQLERRM, SQLCODE);      
      ROLLBACK TO COST_CENTER_COPY_LOAD;
      RAISE;
END BULK_COPY_COST_CENTER;

PROCEDURE BULK_COPY_COST_CENTER_PROCESS(
/******************************************************************************
BULK_COPY_COST_CENTER_PROCESS

This procedure is the core process for the cost center copying/correcting through UI
that invokes bulk load for copying cost centers from one another

IN_BLOB          - blob value delimited by , and termianted by new line character

Created by jxc517 02/24/2014
Modified : 09/29/2017 axt754 Rename file on server for history
******************************************************************************/
IN_BLOB            IN       BLOB
)
IS
    -- Define output file directory
    V_OUTPUT_FILE     UTL_FILE.FILE_TYPE;
    V_LENGTH          NUMBER := DBMS_LOB.GETLENGTH(IN_BLOB);
    V_START           NUMBER := 1;
    V_BYTE_LENGHT     NUMBER := 32000;
    V_TEMP_LENGTH     NUMBER;
    V_TEMP_BLOB       RAW(32000);
    V_CONTEXT   VARCHAR2(3000);
    SQ          INTEGER;
    SE          VARCHAR2(1000);
    V_FILE_NM     VARCHAR2(100)     := 'COST_CENTER_COPY.csv';
    V_ARC_FILE_NM VARCHAR2(100)     := 'COST_CENTER_COPY_'||TO_CHAR(SYSDATE,'RRRRMMDDHHMISS')||'.csv';
BEGIN
       
    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB,V_FILE_NM);

    BULK_COPY_COST_CENTER();
 
    -- Rename File on server for History
    CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);

EXCEPTION

    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;
       -- Rename File on server for History
       CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
       V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
       ERRPKG.RAISE_ERR(-20004,'BULK_COPY_COST_CENTER_PROCESS ',V_CONTEXT); 
 
END BULK_COPY_COST_CENTER_PROCESS;

PROCEDURE DELETE_COST_CENTER(
/**********************************************************
	DELETE_COST_CENTER

	This procedure will delete the passed cost center

IN_COST_CENTER - Input Cost Center to be removed

created : 01/29/2013 jxc517 CCN Project....
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
        : 04/28/2016 nxk927 CCN Project Team...
		      adding back delete procedure for cost center prefix fix
modified: 05/05/2016 jxc517 CCN Project Team....
          The calling procedure will be a batch, not this one
          So removed the batch status table handling here
modified: 03/31/2016 jxc517 CCN Project Team....
          If the old store got future hierarchy records those should be 
          deleted as well
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN
   --SQL Statement to delete the cost center records from all cost center related Tables
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM POLLING_HST WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''';
   FOR REC IN (SELECT 'DELETE FROM '||TABLE_NAME||' WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''' AS VALUE 
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY TABLE_ORDER DESC) LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := REC.VALUE;
   END LOOP;
   
   --SQL Statement to delete the cost center records from Hierarchy_Detail Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM HIERARCHY_DETAIL '||
                                                           ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%'' '||
                                                           '    OR HRCHY_DTL_NEXT_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%''';

   --SQL Statement to delete the cost center records from Audit_Log Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM AUDIT_LOG '||
                                                           ' WHERE TRANSACTION_ID  LIKE ''%'|| IN_COST_CENTER ||'%''';

   --Delete all inserted Hierarchy_Detai_Future records as we need to copy those from OLD cost center
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM HIERARCHY_DETAIL_FUTURE '||
                                                           ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%''';


   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;   
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'COMMON_TOOLS.DELETE_COST_CENTER', SQLERRM, SQLCODE);
      RAISE;
END DELETE_COST_CENTER;

FUNCTION BUILD_TAG(
/******************************************************************************
BUILD_TAG

This function will build the tag based on passed input parameters

******************************************************************************/
                      IN_VALUE     IN VARCHAR2,
                      IN_TAG_NAME  IN VARCHAR2,
                      IN_DATE_FLAG IN VARCHAR2 DEFAULT 'N')
   RETURN VARCHAR2 IS
BEGIN
      RETURN CCN_COMMON_TOOLS.BUILD_TAG(IN_VALUE,IN_TAG_NAME,IN_DATE_FLAG);
END BUILD_TAG;
   
PROCEDURE LOG_ERROR(
/******************************************************************************
LOG_ERROR

This procedure is an autonomous transaction that logs the errors and proceeds 
with the execution of rest of the cost centers

******************************************************************************/
                    IN_CC      IN VARCHAR2,
                    IN_MODULE  IN VARCHAR2,
                    IN_SQLERRM IN VARCHAR2,
                    IN_SQLCODE IN NUMBER) IS PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
      INSERT INTO ERROR_LOG VALUES(ERROR_LOG_SEQ.NEXTVAL,
                                   SUBSTR(IN_CC,1,6),
                                   SYSDATE,
                                   SUBSTR(IN_MODULE,1,65),
                                   SUBSTR(IN_SQLERRM,1,500),
                                   NULL, 
                                   SUBSTR(IN_SQLCODE,1,9));
      COMMIT;
EXCEPTION
      WHEN OTHERS THEN
         RAISE;
END LOG_ERROR;

FUNCTION CONVERT_SPECIAL_CHRCTRS(
/**********************************************************
This function will build special characters from input text

parameters:

IO_TEXT_STRING  IN

created : 03/04/2014 CCN Project
**********************************************************/
IO_TEXT_STRING    IN    VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN CCN_COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(IO_TEXT_STRING);
END CONVERT_SPECIAL_CHRCTRS;

FUNCTION EXECUTE_UNIX_COMMAND(
/**********************************************************
This function will build special characters from input text

parameters:

IN_UNIX_COMMAND  IN - Command to be executed

created : 03/13/2014 CCN Project
**********************************************************/
IN_UNIX_COMMAND VARCHAR2) RETURN BOOLEAN
IS
BEGIN
    RETURN CCN_COMMON_TOOLS.EXECUTE_UNIX_COMMAND(IN_UNIX_COMMAND);
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END EXECUTE_UNIX_COMMAND;

FUNCTION convert_to_clob(
/**********************************************************
This function will convert blob to clob

parameters:

IN_BLOB  IN - BLOB that needs to be converted into CLOB

created : 03/28/2014 CCN Project
**********************************************************/
IN_BLOB IN BLOB) RETURN CLOB IS
BEGIN
   RETURN CCN_COMMON_TOOLS.CONVERT_TO_CLOB(IN_BLOB);
END convert_to_clob;

FUNCTION convert_to_blob(
/**********************************************************
This function will convert blob to clob

parameters:

IN_CLOB  IN - CLOB that needs to be converted into BLOB

created : 03/28/2014 CCN Project
**********************************************************/
IN_CLOB IN CLOB) RETURN BLOB IS
BEGIN
   RETURN CCN_COMMON_TOOLS.CONVERT_TO_BLOB(IN_CLOB);
END convert_to_blob;

FUNCTION GET_PHONE_NUMBER(
/***********************************************
Function to get Pri, Scd, Fax phone_number using 
COST_CENTER_CODE and PHONE_NUMBER as Parameters

created : 04/10/2014  CCN Project
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
***********************************************/
IN_COST_CNTR_CD IN COST_CENTER.COST_CENTER_CODE%TYPE,
IN_PHONE_NO_TYP IN PHONE.PHONE_NUMBER_TYPE%TYPE)
RETURN VARCHAR2  
IS
    V_PHONE_NUMBER  VARCHAR2(11);
BEGIN

    SELECT P.PHONE_AREA_CODE || P.PHONE_NUMBER
      INTO V_PHONE_NUMBER
      FROM COSTCNTR.PHONE P
     WHERE UPPER(P.COST_CENTER_CODE)  = UPPER(IN_COST_CNTR_CD)                                       
       AND P.PHONE_NUMBER_TYPE        = IN_PHONE_NO_TYP;

    RETURN V_PHONE_NUMBER;
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_PHONE_NUMBER;

FUNCTION GET_CURR_LEV_VAL(
/***********************************************************
      GET_CURR_LEV_VAL 
      This Function will extract the value for
      current level from the passed HRCHY_HDR_NAME, 
      Level Name and the Cost Center Code/ HRCHY_DTL_CURR_ROW_VAL

Created : 02/04/2015 NXK927 CCN Project
************************************************************/
    IN_HRCHY_HDR_NAME             IN     VARCHAR2,
    IN_LEVEL_NAME                 IN     VARCHAR2,
    IN_HRCHY_DTL_CURR_ROW_VAL     IN     VARCHAR2)
RETURN VARCHAR2
IS
    V_VAL  VARCHAR2(10);
BEGIN

     SELECT SUBSTR(HD.HRCHY_DTL_CURR_LVL_VAL, 1 + (SELECT NVL(SUM(LVL_VALUE_SIZE), 0)
                                                      FROM HIERARCHY_DESCRIPTION
                                                     WHERE HRCHY_HDR_LVL_NBR < HDESC.HRCHY_HDR_LVL_NBR
                                                       AND HRCHY_HDR_NAME = HD.HRCHY_HDR_NAME), HDESC.LVL_VALUE_SIZE) VAL
       INTO V_VAL
       FROM HIERARCHY_DETAIL HD,
            HIERARCHY_HEADER HH,
            HIERARCHY_DESCRIPTION HDESC
      WHERE HD.HRCHY_HDR_NAME = HDESC.HRCHY_HDR_NAME
        AND HD.HRCHY_HDR_NAME = HH.HRCHY_HDR_NAME
        AND HD.HRCHY_DTL_LEVEL = HH.HRCHY_HDR_LEVELS
        AND NVL(HD.HRCHY_DTL_NEXT_LVL_VAL, '~~~') = '~~~'
        AND HD.HRCHY_HDR_NAME = IN_HRCHY_HDR_NAME
        AND UPPER(HRCHY_HDR_LVL_DESC) = UPPER(IN_LEVEL_NAME)
        AND HRCHY_DTL_CURR_ROW_VAL = IN_HRCHY_DTL_CURR_ROW_VAL;
  

    RETURN V_VAL;

EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_CURR_LEV_VAL;

PROCEDURE BULK_TERR_TYP_BUSN_CD_UPD_PRCS(
/******************************************************************************
This procedure is the core process for updating the TERRITORY_TYPE_BUSN_CODE
column of TERRITORY table

IN_BLOB          - blob value delimited by , and termianted by new line character

Created by jxc517 02/19/2015
Modified : 09/29/2017 axt754 Rename file on server for history
Modified : 10/10/2017 rxv940 Added a call to Polling on successful update
Modified: 11/07/2017 bxa919 CCN Project Team...
          Removed call for POS_MASTER_SP
Modified: 02/12/2018 rxv940 CCN Project Team....
          Added Set and re-set calls to stop DMLs producing polling records
        :  02/23/2018 sxg151 Calling MAIL_PKG.SEND_MAIL to send an email if Bulk Load process Fails.
        :  02/23/2018 sxg151 Calling ERRPKG.ERROR_DETAILS to fetch the error records from Error_log table
******************************************************************************/
IN_BLOB            IN       BLOB)
IS
    V_CONTEXT   VARCHAR2(3000);
  	SQ          INTEGER;
  	SE          VARCHAR2(1000);
    V_COUNT     NUMBER;
    V_FILE_NM     VARCHAR2(100)     := 'TERRITORY_TYPE_BUSN_CODE_UPD.csv';
    V_ARC_FILE_NM VARCHAR2(100)     := 'TERRITORY_TYPE_BUSN_CODE_UPD_'||TO_CHAR(SYSDATE,'RRRRMMDDHHMISS')||'.csv';
    V_EXCEPTION EXCEPTION;
    V_BULK_LOAD_LKUP_ID NUMBER;
    V_START_TIME        DATE := SYSDATE;
    V_CLOB_FOR_EMAIL    CLOB;
BEGIN
    POS_DATA_GENERATION.SET_FLAG_POLLING_BULK_LOADS('BULK_TERR_TYP_BUSN_CD_UPD', V_BULK_LOAD_LKUP_ID);
    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB, V_FILE_NM);
    FOR rec IN (SELECT * FROM TERRITORY_TYPE_BUSN_CODE_UPD) LOOP
        BEGIN
            SAVEPOINT TERR_TYP_BUSN_CD_UPD_SP;
            BEGIN
                SELECT COUNT(*)
                  INTO V_COUNT
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND CATEGORY = 'T';
            EXCEPTION
                WHEN OTHERS THEN
                    V_COUNT := 0;
            END;
            IF V_COUNT <> 1 THEN
                SQ := errnums.en_territory_typ_business_rule;
                SE := 'Territory Type Of Business is applicable only for territory cost center';
                RAISE V_EXCEPTION;
            END IF;
            IF NOT COMMON_TOOLS.CODE_DETAIL_VALID('TERRITORY_TYPE_BUSN_CODE',
                                                  rec.TERRITORY_TYPE_BUSN_CODE)  THEN
                SQ := errnums.en_invalid_code_detail_err;
                SE := 'Territory Type Of Business "' || rec.TERRITORY_TYPE_BUSN_CODE || '" is not found in Code table';
                RAISE V_EXCEPTION;
            END IF;
            UPDATE TERRITORY
               SET TERRITORY_TYPE_BUSN_CODE = rec.TERRITORY_TYPE_BUSN_CODE
             WHERE COST_CENTER_CODE                    = rec.COST_CENTER_CODE
               AND NVL(TERRITORY_TYPE_BUSN_CODE, 'XX') <> rec.TERRITORY_TYPE_BUSN_CODE;
            -- call to polling
            /* Removed POS_MASTER_SP() call as a part of polling Changes*/
            COMMIT;
        EXCEPTION
           WHEN V_EXCEPTION THEN
              COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE,
                                     'COMMON_TOOLS.BULK_TERR_TYP_BUSN_CD_UPD_PRCS',
                                     SE,
                                     SQ);
              ROLLBACK TO TERR_TYP_BUSN_CD_UPD_SP;
           WHEN OTHERS THEN
              COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE,
                                     'COMMON_TOOLS.BULK_TERR_TYP_BUSN_CD_UPD_PRCS',
                                     SQLERRM,
                                     SQLCODE);
              ROLLBACK TO TERR_TYP_BUSN_CD_UPD_SP;
        END;
    END LOOP;

    --Call the errpkg.error_details package to fetch the data from error_log table to send an email.--ASP-975
    ERRPKG.ERROR_DETAILS(V_START_TIME, SYSDATE, V_CLOB_FOR_EMAIL);
    IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
        MAIL_PKG.SEND_MAIL('UI_BULK_TERR_TYP_LOAD_PRCS_FAIL',NULL, NULL, V_CLOB_FOR_EMAIL);
    END IF;

    --Rename File on server for History
   CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
   POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
EXCEPTION
    WHEN OTHERS THEN
        --Call the errpkg.error_details package to fetch the data from error_log table to send an email.
        ERRPKG.ERROR_DETAILS(V_START_TIME, SYSDATE, V_CLOB_FOR_EMAIL);
        IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
            MAIL_PKG.SEND_MAIL('UI_BULK_TERR_TYP_LOAD_PRCS_FAIL',NULL, NULL, V_CLOB_FOR_EMAIL);
        END IF;
       -- The below call to reset the flag should always be the first line of the exception block
       -- If re-set doesn't happen, polling process will be turned off for that duration. By putting
       -- this call in the first line of exception block we make sure no other errors blocks the reset process
       POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
       V_CONTEXT := V_CONTEXT || ' ' || SQLCODE || ' ' || SQLERRM; 
       --Rename File on server for History
       CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
       ERRPKG.RAISE_ERR(-20004,'BULK_TERR_TYP_BUSN_CD_UPD_PRCS ',V_CONTEXT); 
END BULK_TERR_TYP_BUSN_CD_UPD_PRCS;

FUNCTION GET_UPPER_LVL_VER_VALUE
(
/*******************************************************************************
                   GET_UPPER_LVL_VER_VALUE

    This function will return Attributes for given Hierarchy Information

Created : 11/12/2015 SXT410 CCN Project...
Modified:
*******************************************************************************/
IN_HRCHY_HDR_NAME HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE,
IN_CURR_LVL_VAL   HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE,
IN_NEXT_LVL_VAL   HIERARCHY_DETAIL.HRCHY_DTL_NEXT_LVL_VAL%TYPE,
IN_PREV_LVL_VAL   HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
)
RETURN XMLTYPE
IS
    V_UPPER_LVL_VER_VALUE HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
BEGIN
    SELECT UPPER_LVL_VER_VALUE 
      INTO V_UPPER_LVL_VER_VALUE
      FROM HIERARCHY_DETAIL 
     WHERE HRCHY_HDR_NAME         = IN_HRCHY_HDR_NAME
       AND HRCHY_DTL_CURR_LVL_VAL = IN_CURR_LVL_VAL
       AND HRCHY_DTL_NEXT_LVL_VAL = IN_NEXT_LVL_VAL
       AND HRCHY_DTL_PREV_LVL_VAL = IN_PREV_LVL_VAL
       AND ROWNUM <2;

RETURN V_UPPER_LVL_VER_VALUE;

EXCEPTION
    WHEN OTHERS THEN
        RETURN V_UPPER_LVL_VER_VALUE;
END GET_UPPER_LVL_VER_VALUE;

FUNCTION GET_FIPS_CODE(
/*******************************************************************************
    This function will get the FIPS code based on state 

Created : 09/07/2016 jxc517 CCN Project Team....
modified :09/21/2017 sxh487
          1) Get the FIPS code based on the zip code and state code passed
          2) Get the STATE_CD based on State Description passed
          3) Get the COUNTY_CD based on County Description passed
             If nothing found the FIPS code will just be State FIPS Code, Else it will be State FIPS Code concatenated with County FIPS Code
          4) Get the City Code based on City Description passed 
             If nothing found the FIPS code will just be State FIPS Code concatenated with Country FIPS Code,Else it will be State FIPS Code 
             concatenated with County FIPS Code concatenated with City FIPS Code.
          5) If we get multiple records based on above conditions we go with the NULL ZIP Code record.
*******************************************************************************/
    IN_STATE_CODE      IN    VARCHAR2,
    IN_COUNTY          IN    VARCHAR2,
    IN_CITY            IN    VARCHAR2,
    IN_ZIP_CODE        IN    VARCHAR2)
RETURN VARCHAR2
IS
    V_FIPS_CODE            VARCHAR2(50);
    V_STATE_CD             VARCHAR2(50);
    V_COUNTY_CD            VARCHAR2(50);
    V_CITY_CD              VARCHAR2(50);
BEGIN
     --Get the FIPS Code based on ZIP CODE passed
     BEGIN
         SELECT DISTINCT FIPS_CD
           INTO V_FIPS_CODE
           FROM FIPS_CODE_DETAILS
          WHERE STATE_DESC            = IN_STATE_CODE
            AND NVL(ZIP_CODE, 'XXX')  = NVL(IN_ZIP_CODE,'YYY')
            AND ROWNUM < 2;
     EXCEPTION
        WHEN OTHERS THEN
            NULL;
     END;
     
     IF V_FIPS_CODE IS NULL THEN
         --Get the State Code based on State Description passed
         SELECT DISTINCT STATE_CD
           INTO V_STATE_CD
           FROM FIPS_CODE_DETAILS
          WHERE STATE_DESC = IN_STATE_CODE
            AND ROWNUM < 2;
         V_FIPS_CODE := V_STATE_CD;

         --Get the COUNTY_CD based on County Description passed
         SELECT DISTINCT COUNTY_CD
           INTO V_COUNTY_CD
           FROM FIPS_CODE_DETAILS
          WHERE STATE_CD = V_STATE_CD
            AND UPPER(regexp_replace(COUNTY_DESC, '[^a-zA-Z]')) = UPPER(regexp_replace(IN_COUNTY, '[^a-zA-Z]'))
            AND ROWNUM < 2;
         V_FIPS_CODE := V_STATE_CD || V_COUNTY_CD;

         --Get the City Code based on City Description passed
         BEGIN
           SELECT DISTINCT CITY_CD
             INTO V_CITY_CD
             FROM FIPS_CODE_DETAILS
            WHERE STATE_CD = V_STATE_CD
              AND COUNTY_CD = V_COUNTY_CD
              AND UPPER(regexp_replace(CITY_DESC, '[^a-zA-Z]')) = UPPER(regexp_replace(IN_CITY, '[^a-zA-Z]'));
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 NULL;
             WHEN OTHERS THEN
                 SELECT DISTINCT FIPS_CD
                   INTO V_FIPS_CODE
                   FROM FIPS_CODE_DETAILS
                  WHERE STATE_CD  = V_STATE_CD
                    AND COUNTY_CD = V_COUNTY_CD
                    AND UPPER(regexp_replace(CITY_DESC, '[^a-zA-Z]')) = UPPER(regexp_replace(IN_CITY, '[^a-zA-Z]'))
                    AND ZIP_CODE IS NULL
                    AND ROWNUM < 2;
         END;
         V_FIPS_CODE := V_STATE_CD || V_COUNTY_CD || V_CITY_CD;
     END IF;        
     
    RETURN V_FIPS_CODE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_FIPS_CODE;
END GET_FIPS_CODE;

FUNCTION IS_CC_SELLING_STORE(
/**********************************************************
This function will return true if passed cost center is a 
selling store

parameters:
IN  IN_COST_CENTER

created : 10/31/2016 sxh487 CCN Project
modified: 
**********************************************************/
IN_COST_CENTER_CODE   IN  COST_CENTER.COST_CENTER_CODE%TYPE) 
RETURN VARCHAR2
IS
  V_SELLING_STORE_FLAG      STORE.SELLING_STORE_FLAG%TYPE;
BEGIN
    SELECT SELLING_STORE_FLAG
      INTO V_SELLING_STORE_FLAG
      FROM STORE
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    RETURN V_SELLING_STORE_FLAG;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END IS_CC_SELLING_STORE;

FUNCTION GET_FORMATTED_PHONE_NUMBER(
/***********************************************
Function to get formatted (###)###-#### Pri, Scd, Fax phone_number using 
COST_CENTER_CODE and PHONE_NUMBER as Parameters

created : 05/31/2017  rxa457 CCN Project..
Modified: 02/02/2018  bxa919 changed the substr position to '4' 
          as 'number' in phone and fax numbers is repeated twice.
***********************************************/
IN_COST_CNTR_CD IN COST_CENTER.COST_CENTER_CODE%TYPE,
IN_PHONE_NO_TYP IN PHONE.PHONE_NUMBER_TYPE%TYPE)
RETURN VARCHAR2  
IS
  V_NUMBER           VARCHAR2(14);
    
  CURSOR C_PHONE IS
    SELECT P.PHONE_AREA_CODE,
           P.PHONE_NUMBER
      FROM COSTCNTR.PHONE P
     WHERE P.COST_CENTER_CODE  = IN_COST_CNTR_CD
       AND P.PHONE_NUMBER_TYPE = IN_PHONE_NO_TYP;
BEGIN
  FOR rec IN C_PHONE LOOP
     IF rec.PHONE_AREA_CODE IS NOT NULL AND rec.PHONE_NUMBER IS NOT NULL THEN
       V_NUMBER := '('||rec.PHONE_AREA_CODE||')'||SUBSTR(rec.PHONE_NUMBER,1,3)||'-'||SUBSTR(rec.PHONE_NUMBER,4);
     END IF;
  END LOOP;
  RETURN V_NUMBER;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_NUMBER;
END GET_FORMATTED_PHONE_NUMBER;

FUNCTION GET_HOMESTORE(
/***********************************************
Function to get Homestore Information for the cost center 
based on the cost center's Category

created : 08/30/2017  rxa457 CCN Project..
***********************************************/
IN_COST_CNTR_CD   IN COST_CENTER.COST_CENTER_CODE%TYPE,
IN_COST_CNTR_CATG IN COST_CENTER.CATEGORY%TYPE)
RETURN VARCHAR2
IS
    V_HOME_STORE                TERRITORY.HOME_STORE%TYPE;	
BEGIN
    IF IN_COST_CNTR_CATG ='D' THEN
        BEGIN
           SELECT HOME_STORE
             INTO V_HOME_STORE
             FROM DISPATCH_TERMINAL 
            WHERE COST_CENTER_CODE =  IN_COST_CNTR_CD;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 NULL;
        END;
    ELSIF IN_COST_CNTR_CATG ='T' THEN
        BEGIN
           SELECT HOME_STORE
             INTO V_HOME_STORE
             FROM TERRITORY 
            WHERE COST_CENTER_CODE =  IN_COST_CNTR_CD;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 NULL;
        END;
    END IF;
    RETURN V_HOME_STORE;
END GET_HOMESTORE;

FUNCTION GET_TIMEZONE(
/***********************************************
Fucntion to get Timezone Information for the cost center 
based on the cost center's Polling information.

1. Refer Polling Table Timezone field based on the cost center's home store
   for category D and T or based on Cost center code itself

created : 08/28/2017  rxa457 CCN Project..
***********************************************/
IN_COST_CNTR_CD   IN COST_CENTER.COST_CENTER_CODE%TYPE,
IN_COST_CNTR_CATG IN COST_CENTER.CATEGORY%TYPE)
RETURN VARCHAR2
IS
  V_TIMEZONE_CODE             CODE_DETAIL.CODE_DETAIL_VALUE%TYPE;
  V_TIMEZONE_DESC             CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
  V_HOME_STORE                TERRITORY.HOME_STORE%TYPE;
BEGIN
    V_HOME_STORE := GET_HOMESTORE(IN_COST_CNTR_CD, IN_COST_CNTR_CATG);

    BEGIN
        SELECT TIME_ZONE
          INTO V_TIMEZONE_CODE
          FROM POLLING
         WHERE COST_CENTER_CODE = NVL(V_HOME_STORE, IN_COST_CNTR_CD)
           AND CURRENT_FLAG     = 'Y';
    EXCEPTION
        WHEN OTHERS THEN
             NULL;
    END;
        
    --Look up Timezone description based on timezone code value
    V_TIMEZONE_DESC := NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('TIME_ZONE',
                                                                           'COD',
                                                                           V_TIMEZONE_CODE),
                           'N/A'
                           );
    RETURN V_TIMEZONE_DESC;
    
END GET_TIMEZONE;

FUNCTION GET_ACTIVE_STATUS(
/***********************************************
Function to get Active status record for a cost center

created : 09/25/2017  axt754 CCN Project..
***********************************************/
IN_COST_CENTER   IN COST_CENTER.COST_CENTER_CODE%TYPE)
RETURN STATUS%ROWTYPE IS

    V_STATUS_REC   STATUS%ROWTYPE;
BEGIN
    -- Select active record from status, for a cost center code
    SELECT *
      INTO V_STATUS_REC
      FROM STATUS
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER)
       AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE >= TRUNC(SYSDATE));

    RETURN V_STATUS_REC;

END GET_ACTIVE_STATUS;

FUNCTION IS_CC_HAVING_CSTMR_ACCNTS_FNC(
/**********************************************************
This function will check the cost center present in CUSTOMER_TAXID_VW_COSTCNTR table.
If the cost centers is having active customer accoutns in CPR this function should
return "Y" else "N"

created : 11/13/2017 bxa919 CCN Project Team...
**********************************************************/
    IN_COST_CENTER_CODE  IN  COST_CENTER.COST_CENTER_CODE%TYPE)
RETURN VARCHAR2 AS
    V_COUNT        NUMBER := 0 ;
    V_RETURN_VALUE VARCHAR2(1) := 'N';
BEGIN
    --Before closing the cost center check the count in CUSTOMER_TAXID_VW table.
    SELECT  COUNT(*)
      INTO  V_COUNT
      FROM  CUSTOMER_TAXID_VW_COSTCNTR
     WHERE  ORA_COSTCTR   =  IN_COST_CENTER_CODE ;
     
    IF  V_COUNT > 0  THEN  --  entry was found in the CUSTOMER_TAXID_VW table
        V_RETURN_VALUE := 'Y';
    END IF;
    RETURN V_RETURN_VALUE;    
END IS_CC_HAVING_CSTMR_ACCNTS_FNC;

FUNCTION GET_COST_CENTER_GEO_LATD_LNGTD(
/**********************************************************
This Function is intended to return Latitude,longitude from CCN_ADDRESS_GEO_DETAILS

Created : 03/14/2018 rxv940 CCN Project.... ASP-976
Modified:
**********************************************************/
    IN_COST_CENTER    IN     COST_CENTER_DSC_CODES.COST_CENTER_CODE%TYPE,
    IN_GEO_TYPE       IN     VARCHAR2
    ) RETURN  VARCHAR2
IS
    V_RECORD           CCN_ADDRESS_GEO_DETAILS%ROWTYPE;
    V_RETURN_VAL       VARCHAR2(11);    
BEGIN
    SELECT *
      INTO V_RECORD
      FROM CCN_ADDRESS_GEO_DETAILS 
     WHERE COST_CENTER_CODE = IN_COST_CENTER
       AND EXPIRATION_DATE IS NULL;
    
    IF IN_GEO_TYPE = 'LON' THEN   
        V_RETURN_VAL := V_RECORD.LONGITUDE;
    ELSIF IN_GEO_TYPE = 'LAT' THEN
        V_RETURN_VAL := V_RECORD.LATITUDE;
    END IF;    
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;    
        
END GET_COST_CENTER_GEO_LATD_LNGTD;

END COMMON_TOOLS;