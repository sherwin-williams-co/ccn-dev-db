CREATE OR REPLACE PACKAGE body ADMINISTRATION_tapi
IS


  -- insert
PROCEDURE ins(
    IN_CATEGORY             IN ADMINISTRATION.CATEGORY%type ,
    IN_COST_CENTER_CODE     IN ADMINISTRATION.COST_CENTER_CODE%type ,
    IN_INTERNAL_MAIL_NUMBER IN ADMINISTRATION.INTERNAL_MAIL_NUMBER%type ,
    IN_ADMIN_COST_CNTR_TYPE IN ADMINISTRATION.ADMIN_COST_CNTR_TYPE%type DEFAULT NULL )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  INSERT
  INTO ADMINISTRATION
    (
      CATEGORY ,
      COST_CENTER_CODE ,
      INTERNAL_MAIL_NUMBER,
      ADMIN_COST_CNTR_TYPE
    )
    VALUES
    (
      IN_CATEGORY ,
      IN_COST_CENTER_CODE ,
      IN_INTERNAL_MAIL_NUMBER,
      IN_ADMIN_COST_CNTR_TYPE
    );

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'ADMINISTRATION Insert');

END;

-- update
PROCEDURE upd
  (
    IN_CATEGORY             IN ADMINISTRATION.CATEGORY%type ,
    IN_COST_CENTER_CODE     IN ADMINISTRATION.COST_CENTER_CODE%type ,
    IN_INTERNAL_MAIL_NUMBER IN ADMINISTRATION.INTERNAL_MAIL_NUMBER%type ,
    IN_ADMIN_COST_CNTR_TYPE IN ADMINISTRATION.ADMIN_COST_CNTR_TYPE%type DEFAULT NULL 
  )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  UPDATE ADMINISTRATION
  SET INTERNAL_MAIL_NUMBER = IN_INTERNAL_MAIL_NUMBER,
      CATEGORY             = IN_CATEGORY,
      ADMIN_COST_CNTR_TYPE = IN_ADMIN_COST_CNTR_TYPE
  WHERE COST_CENTER_CODE   = IN_COST_CENTER_CODE;
--  AND CATEGORY             = IN_CATEGORY;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'ADMINISTRATION Update');

END;

-- del
PROCEDURE del(
    IN_COST_CENTER_CODE IN ADMINISTRATION.COST_CENTER_CODE%type ,
    IN_CATEGORY         IN ADMINISTRATION.CATEGORY%type )
IS

--declare
/**************************************************
	variables used in error handling
**************************************************/
	v_code number;

BEGIN
  DELETE
  FROM ADMINISTRATION
  WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
--  AND CATEGORY           = IN_CATEGORY;

EXCEPTION

/************************************************************
	on any error 
	   send the sql error code and the procedure name
	   to the error processor
************************************************************/

	WHEN others then 
	     v_code := SQLCODE;
	     errpkg.raise_err(v_code,'ADMINISTRATION Delete');

END;

END ADMINISTRATION_tapi;

