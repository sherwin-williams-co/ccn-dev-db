create or replace PACKAGE BODY COST_CENTER_UPLOAD
    AS

PROCEDURE BUILD_STORE_CLOB(
/******************************************************************************
BUILD_STORE_CLOB

This procedure will build the xml as clob for Store cost center category

modified : 05/24/2016 jxc517 CCN Project Team....
           Added the new fields for Barbados County



Changed  : 10/18/2016 jxc517 CCN Project Team....
           Added the newly added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER fields
           to the bulk load excels
         : 06/27/2018 sxg151 CCN Project Team....
           Added POTENTIAL_OPEN_DATE field to bulk load excels
******************************************************************************/
                REC             IN     COST_CENTER_STORE%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(rec.COST_CENTER_NAME), 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      /*
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.BEGIN_DATE,'MM-DD-RRRR'), 'BEGIN_DATE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.OPEN_DATE,'MM-DD-RRRR'), 'OPEN_DATE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.MOVE_DATE, 'MM-DD-RRRR'),'MOVE_DATE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.CLOSE_DATE, 'MM-DD-RRRR'),'CLOSE_DATE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.FINANCIAL_CLOSE_DATE, 'MM-DD-RRRR'),'FINANCIAL_CLOSE_DATE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.POS_PROG_VER_EFF_DATE, 'MM-DD-RRRR'),'POS_PROG_VER_EFF_DATE');
      */
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STD_COST_IDENTIFIER, 'STD_COST_IDENTIFIER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRIM_COST_IDENTIFIER, 'PRIM_COST_IDENTIFIER');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      /*
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.STATUS_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.STATUS_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  --diff
      */
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      /*
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.TYPE_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.TYPE_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  --diff
      */
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<STORE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STORE_CATEGORY, 'CATEGORY'); --diff
      --V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.PERP_INV_START_DATE, 'MM-DD-RRRR'),'PERP_INV_START_DATE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PERP_INV_START_DATE, 'PERP_INV_START_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLASSIFICATION_CODE, 'CLASSIFICATION_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.INVENTORY_INDICATOR, 'INVENTORY_INDICATOR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RURAL_METRO_ZONE_CODE, 'RURAL_METRO_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SELLING_STORE_FLAG, 'SELLING_STORE_FLAG');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POTENTIAL_OPEN_DATE, 'POTENTIAL_OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || '</STORE>';

      IF rec.MARKETING_CATEGORY IS NOT NULL THEN
         V_CLOB := V_CLOB || '<MARKETING>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MARKETING_CATEGORY, 'CATEGORY'); --diff
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MARKETING_TYPE, 'MARKETING_TYPE');
         /*
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.MKT_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); --DIFF
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.MKT_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  --diff 
         */
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_BRAND, 'MKT_BRAND');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_MISSION, 'MKT_MISSION');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_SALES_FLOOR_SIZE, 'MKT_SALES_FLOOR_SIZE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_WAREHOUSE_SIZE, 'MKT_WAREHOUSE_SIZE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_REAL_ESTATE_SETTING, 'MKT_REAL_ESTATE_SETTING');
         V_CLOB := V_CLOB || '</MARKETING>';
      END IF;

      IF rec.TWJ_STATE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<TAXWARE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_STATE, 'TWJ_STATE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COALESCE(rec.USA_ZIP_CODE,
                                                             rec.CAN_POSTAL_CODE,
                                                             rec.MEX_POSTAL_CODE,
                                                             rec.OTHER_POSTAL_CODE,
                                                             rec.TWJ_ZIP), 'TWJ_ZIP');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_GEO, 'TWJ_GEO');
         --V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.TWJ_MAINTENANCE_DATE, 'MM-DD-RRRR'),'TWJ_MAINTENANCE_DATE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_MAINTENANCE_DATE, 'TWJ_MAINTENANCE_DATE', 'Y');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_COUNTRY, 'TWJ_COUNTRY');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_COMPANY, 'TWJ_COMPANY');
         --V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.LAST_MAINT_DATE, 'MM-DD-RRRR'),'LAST_MAINT_DATE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LAST_MAINT_DATE, 'LAST_MAINT_DATE', 'Y');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LAST_MAINT_METHOD_ID, 'LAST_MAINT_METHOD_ID');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LAST_MAINT_USER_ID, 'LAST_MAINT_USER_ID');
         V_CLOB := V_CLOB || '</TAXWARE>';
      END IF;
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.USA_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.USA_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.CAN_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.CAN_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.MEX_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.MEX_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           WHEN rec.OTHER_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.OTHER_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(TO_CHAR(rec.OTHER_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
           WHEN rec.BRB_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_BRB>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PREMISES, 'PREMISES');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_AVENUE_LANE, 'AVENUE_LANE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_DISTRICT, 'DISTRICT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PARISH, 'PARISH');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_BRB>';

          ELSE
              NULL;
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';

      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_STORE_CLOB;

PROCEDURE BUILD_TERRITORY_CLOB(
/******************************************************************************
BUILD_TERRITORY_CLOB

This procedure will build the xml as clob for Territory cost center category

Changed  : 10/18/2016 jxc517 CCN Project Team....
           Added the newly added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER fields
           to the bulk load excels
******************************************************************************/
                REC             IN     COST_CENTER_TERRITORY%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(rec.COST_CENTER_NAME), 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STD_COST_IDENTIFIER, 'STD_COST_IDENTIFIER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRIM_COST_IDENTIFIER, 'PRIM_COST_IDENTIFIER');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<TERRITORY>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TERRITORY_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_CAR_INDICATOR, 'LEASE_CAR_INDICATOR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TERRITORY_TYPE_BUSN_CODE, 'TERRITORY_TYPE_BUSN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.HOME_STORE, 'HOME_STORE');
      V_CLOB := V_CLOB || '</TERRITORY>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';

      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_TERRITORY_CLOB;

PROCEDURE BUILD_ADMINISTRATION_CLOB(
/******************************************************************************
BUILD_ADMINISTRATION_CLOB

This procedure will build the xml as clob for Administration cost center category

modified : 05/24/2016 jxc517 CCN Project Team....
           Added the new fields for Barbados County

Changed  : 10/18/2016 jxc517 CCN Project Team....
           Added the newly added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER fields
           to the bulk load excels
         : 12/27/2017 axt754 CCN Project Team....
           Added ALLOCATION_CC, and DIVISION_OFFSET fields.
******************************************************************************/
                REC             IN     COST_CENTER_ADMINISTRATION%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(rec.COST_CENTER_NAME), 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STD_COST_IDENTIFIER, 'STD_COST_IDENTIFIER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRIM_COST_IDENTIFIER, 'PRIM_COST_IDENTIFIER');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<ADMINISTRATION>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(NVL(rec.ADMINISTRATION_CATEGORY,rec.CATEGORY), 'CATEGORY'); --diff
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.INTERNAL_MAIL_NUMBER, 'INTERNAL_MAIL_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ADMIN_COST_CNTR_TYPE, 'ADMIN_COST_CNTR_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ALLOCATION_CC, 'ALLOCATION_CC');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DIVISION_OFFSET, 'DIVISION_OFFSET');
      V_CLOB := V_CLOB || '</ADMINISTRATION>';
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           WHEN rec.OTHER_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
           WHEN rec.BRB_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_BRB>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PREMISES, 'PREMISES');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_AVENUE_LANE, 'AVENUE_LANE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_DISTRICT, 'DISTRICT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PARISH, 'PARISH');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_BRB>';

          ELSE
              NULL;
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';

      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_ADMINISTRATION_CLOB;

PROCEDURE BUILD_REAL_ESTATE_CLOB(
/******************************************************************************
BUILD_REAL_ESTATE_CLOB

This procedure will build the xml as clob for Real Estate cost center category
modified : 
Changed  : 10/18/2016 jxc517 CCN Project Team....
           Added the newly added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER fields
           to the bulk load excels
******************************************************************************/
                REC             IN     COST_CENTER_REAL_ESTATE%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(rec.COST_CENTER_NAME), 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STD_COST_IDENTIFIER, 'STD_COST_IDENTIFIER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRIM_COST_IDENTIFIER, 'PRIM_COST_IDENTIFIER');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<REAL_ESTATE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.REAL_ESTATE_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || '</REAL_ESTATE>';
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           WHEN rec.OTHER_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
           WHEN rec.BRB_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_BRB>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PREMISES, 'PREMISES');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_AVENUE_LANE, 'AVENUE_LANE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_DISTRICT, 'DISTRICT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PARISH, 'PARISH');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_BRB>';

          ELSE
              NULL;
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';

      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_REAL_ESTATE_CLOB;

PROCEDURE BUILD_OTHER_CLOB(
/******************************************************************************
BUILD_OTHER_CLOB

This procedure will build the xml as clob for Other cost center category
modified : 
Changed  : 10/18/2016 jxc517 CCN Project Team....
           Added the newly added STD_COST_IDENTIFIER and PRIM_COST_IDENTIFIER fields
           to the bulk load excels
******************************************************************************/
                REC             IN     COST_CENTER_OTHER%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(rec.COST_CENTER_NAME), 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STD_COST_IDENTIFIER, 'STD_COST_IDENTIFIER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRIM_COST_IDENTIFIER, 'PRIM_COST_IDENTIFIER');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<OTHER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || '</OTHER>';
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           WHEN rec.OTHER_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
           WHEN rec.BRB_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_BRB>';
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PREMISES, 'PREMISES');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_AVENUE_LANE, 'AVENUE_LANE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_DISTRICT, 'DISTRICT');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_PARISH, 'PARISH');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BRB_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_BRB>';

          ELSE
              NULL;
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';

      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_OTHER_CLOB;

PROCEDURE BUILD_DISPATCH_TERMINAL_CLOB(
/******************************************************************************
BUILD_DISPATCH_TERMINAL_CLOB

This procedure will build the xml as clob for Dispatch Terminal cost center category

Created : 06/23/2017 rxa457 CCN Project Team....
******************************************************************************/
                REC             IN     COST_CENTER_DISPATCH_TERMINAL%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COMMON_TOOLS.CONVERT_SPECIAL_CHRCTRS(rec.COST_CENTER_NAME), 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STD_COST_IDENTIFIER, 'STD_COST_IDENTIFIER');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRIM_COST_IDENTIFIER, 'PRIM_COST_IDENTIFIER');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<DISPATCH_TERMINAL>';
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.DISPATCH_TERMINAL_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.HOME_STORE, 'HOME_STORE');      
      V_CLOB := V_CLOB || '</DISPATCH_TERMINAL>';

      IF rec.MARKETING_CATEGORY IS NOT NULL THEN
         V_CLOB := V_CLOB || '<MARKETING>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MARKETING_CATEGORY, 'CATEGORY'); --diff
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MARKETING_TYPE, 'MARKETING_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_BRAND, 'MKT_BRAND');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_MISSION, 'MKT_MISSION');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_SALES_FLOOR_SIZE, 'MKT_SALES_FLOOR_SIZE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_WAREHOUSE_SIZE, 'MKT_WAREHOUSE_SIZE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.MKT_REAL_ESTATE_SETTING, 'MKT_REAL_ESTATE_SETTING');
         V_CLOB := V_CLOB || '</MARKETING>';
      END IF;

      IF rec.TWJ_STATE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<TAXWARE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_STATE, 'TWJ_STATE');
         /*V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(COALESCE(rec.USA_ZIP_CODE,
                                                             rec.CAN_POSTAL_CODE,
                                                             rec.MEX_POSTAL_CODE,
                                                             rec.OTHER_POSTAL_CODE,
                                                             rec.TWJ_ZIP), 'TWJ_ZIP');*/
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_GEO, 'TWJ_GEO');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_MAINTENANCE_DATE, 'TWJ_MAINTENANCE_DATE', 'Y');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_COUNTRY, 'TWJ_COUNTRY');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.TWJ_COMPANY, 'TWJ_COMPANY');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LAST_MAINT_DATE, 'LAST_MAINT_DATE', 'Y');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LAST_MAINT_METHOD_ID, 'LAST_MAINT_METHOD_ID');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.LAST_MAINT_USER_ID, 'LAST_MAINT_USER_ID');
         V_CLOB := V_CLOB || '</TAXWARE>';
      END IF;

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || COMMON_TOOLS.BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';

      OUT_XML_AS_CLOB := V_CLOB;

END BUILD_DISPATCH_TERMINAL_CLOB;

FUNCTION add_leading_zeros(IN_VALUE VARCHAR2)
   RETURN VARCHAR2
/******************************************************************************
ADD_LEADING_ZEROS

This function to append leading zeros to the input data.

Modified: 05/09/2017 gxg192 CCN Project....
******************************************************************************/
IS
   V_RETURN_VAL VARCHAR2(2);
BEGIN
   V_RETURN_VAL := LPAD(IN_VALUE,2,'0');
   RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
       COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.ADD_LEADING_ZEROS', IN_VALUE||'-'||SQLERRM, SQLCODE);
       V_RETURN_VAL := '';
       RETURN V_RETURN_VAL;
END add_leading_zeros;

PROCEDURE STORE_LOAD_PROCESS
/******************************************************************************
STORE_LOAD_PROCESS

This procedure is the core process for loading Store category cost centers in bulk

Modified: 05/05/2016 jxc517 CCN Project....
          Changes due to signature change
          05/09/2017 gxg192 The data for std_cost_identifier and prim_cost_identifier
          should be either "01" or "08". So changes are done to append leading zero
          in case user enters 1 or 8.
          05/09/2017 gxg192 Changes to use a function for padding leading zeros.
Modified: 02/12/2018 rxv940 CCN Project Team....          
          Added Set and re-set calls to stop DMLs producing polling records 		  
******************************************************************************/
AS
   V_CLOB              CLOB;
   V_BULK_LOAD_LKUP_ID NUMBER;
BEGIN
   POS_DATA_GENERATION.SET_FLAG_POLLING_BULK_LOADS('BULK_COST_CENTER_LOAD', V_BULK_LOAD_LKUP_ID);
   --Store bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_STORE) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         rec.STD_COST_IDENTIFIER := add_leading_zeros(rec.STD_COST_IDENTIFIER);
         rec.PRIM_COST_IDENTIFIER := add_leading_zeros(rec.PRIM_COST_IDENTIFIER);
         BUILD_STORE_CLOB(REC, V_CLOB);
         COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(V_CLOB);
         IF rec.GLOBAL_HIERARCHY IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'GLOBAL_HIERARCHY',rec.GLOBAL_HIERARCHY,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_AREA IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_AREA',rec.ADMIN_TO_SALES_AREA,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DISTRICT IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DISTRICT',rec.ADMIN_TO_SALES_DISTRICT,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DIVISION',rec.ADMIN_TO_SALES_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ALTERNATE_DAD IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ALTERNATE_DAD',rec.ALTERNATE_DAD,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.FACTS_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'FACTS_DIVISION',rec.FACTS_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.LEGACY_GL_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'LEGACY_GL_DIVISION',rec.LEGACY_GL_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;

         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            -- The below call to reset the flag should always be the first line of the exception block
            -- If re-set doesn't happen, polling process will be turned off for that duration. By putting
            -- this call in the first line of exception block we make sure no other errors blocks the reset process	  
            POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID); 
            --Log the Cost Center # that failed to load
            --DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'COST_CENTER_UPLOAD.STORE_LOAD_PROCESS', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
   POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
EXCEPTION
   WHEN OTHERS THEN
      --Log the Cost Center # that failed to load
      --DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.STORE_LOAD_PROCESS', SQLERRM, SQLCODE);      
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END STORE_LOAD_PROCESS;

PROCEDURE TERRITORY_LOAD_PROCESS
/******************************************************************************
TERRITORY_LOAD_PROCESS

This procedure is the core process for loading Territory category cost centers in bulk

Modified: 05/05/2016 jxc517 CCN Project....
          Changes due to signature change
          05/09/2017 gxg192 The data for std_cost_identifier and prim_cost_identifier
          should be either "01" or "08". So changes are done to append leading zero
          in case user enters 1 or 8.
          05/09/2017 gxg192 Changes to use a function for padding leading zeros.
Modified: 02/12/2018 rxv940 CCN Project Team....          
          Added Set and re-set calls to stop DMLs producing polling records  		  
******************************************************************************/
AS
   V_CLOB              CLOB;
   V_BULK_LOAD_LKUP_ID NUMBER;
BEGIN
   POS_DATA_GENERATION.SET_FLAG_POLLING_BULK_LOADS('BULK_TERRITORY_LOAD', V_BULK_LOAD_LKUP_ID);
   --Territory bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_TERRITORY) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         rec.STD_COST_IDENTIFIER := add_leading_zeros(rec.STD_COST_IDENTIFIER);
         rec.PRIM_COST_IDENTIFIER := add_leading_zeros(rec.PRIM_COST_IDENTIFIER);
         BUILD_TERRITORY_CLOB(rec, V_CLOB);
         COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(V_CLOB);
         IF rec.GLOBAL_HIERARCHY IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'GLOBAL_HIERARCHY',rec.GLOBAL_HIERARCHY,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_AREA IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_AREA',rec.ADMIN_TO_SALES_AREA,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DISTRICT IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DISTRICT',rec.ADMIN_TO_SALES_DISTRICT,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DIVISION',rec.ADMIN_TO_SALES_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ALTERNATE_DAD IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ALTERNATE_DAD',rec.ALTERNATE_DAD,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.FACTS_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'FACTS_DIVISION',rec.FACTS_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.LEGACY_GL_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'LEGACY_GL_DIVISION',rec.LEGACY_GL_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            --DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'COST_CENTER_UPLOAD.TERRITORY_LOAD_PROCESS', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
   POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID); 
EXCEPTION
   WHEN OTHERS THEN
      -- The below call to reset the flag should always be the first line of the exception block
      -- If re-set doesn't happen, polling process will be turned off for that duration. By putting
      -- this call in the first line of exception block we make sure no other errors blocks the reset process	  
      POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
      --Log the Cost Center # that failed to load
      --DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.TERRITORY_LOAD_PROCESS', SQLERRM, SQLCODE);      
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END TERRITORY_LOAD_PROCESS;

PROCEDURE ADMINISTRATION_LOAD_PROCESS
/******************************************************************************
ADMINISTRATION_LOAD_PROCESS

This procedure is the core process for loading Administration category cost centers in bulk

Modified: 05/05/2016 jxc517 CCN Project....
          Changes due to signature change
          05/09/2017 gxg192 The data for std_cost_identifier and prim_cost_identifier
          should be either "01" or "08". So changes are done to append leading zero
          in case user enters 1 or 8.
          05/09/2017 gxg192 Changes to use a function for padding leading zeros.
******************************************************************************/
AS
   V_CLOB              CLOB;
BEGIN
   --Administration bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_ADMINISTRATION) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         rec.STD_COST_IDENTIFIER := add_leading_zeros(rec.STD_COST_IDENTIFIER);
         rec.PRIM_COST_IDENTIFIER := add_leading_zeros(rec.PRIM_COST_IDENTIFIER);
         BUILD_ADMINISTRATION_CLOB(rec, V_CLOB);
         COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(V_CLOB);
         IF rec.GLOBAL_HIERARCHY IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'GLOBAL_HIERARCHY',rec.GLOBAL_HIERARCHY,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_AREA IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_AREA',rec.ADMIN_TO_SALES_AREA,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DISTRICT IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DISTRICT',rec.ADMIN_TO_SALES_DISTRICT,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DIVISION',rec.ADMIN_TO_SALES_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ALTERNATE_DAD IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ALTERNATE_DAD',rec.ALTERNATE_DAD,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.FACTS_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'FACTS_DIVISION',rec.FACTS_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.LEGACY_GL_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'LEGACY_GL_DIVISION',rec.LEGACY_GL_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            --DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'COST_CENTER_UPLOAD.ADMINISTRATION_LOAD_PROCESS', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      --Log the Cost Center # that failed to load
      --DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.ADMINISTRATION_LOAD_PROCESS', SQLERRM, SQLCODE);      
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END ADMINISTRATION_LOAD_PROCESS;

PROCEDURE REAL_ESTATE_LOAD_PROCESS
/******************************************************************************
REAL_ESTATE_LOAD_PROCESS

This procedure is the core process for loading Real Estate category cost centers in bulk

Modified: 05/05/2016 jxc517 CCN Project....
          Changes due to signature change
          05/09/2017 gxg192 The data for std_cost_identifier and prim_cost_identifier
          should be either "01" or "08". So changes are done to append leading zero
          in case user enters 1 or 8.
          05/09/2017 gxg192 Changes to use a function for padding leading zeros.
******************************************************************************/
AS
   V_CLOB              CLOB;
BEGIN
   --Real Estate bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_REAL_ESTATE) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         rec.STD_COST_IDENTIFIER := add_leading_zeros(rec.STD_COST_IDENTIFIER);
         rec.PRIM_COST_IDENTIFIER := add_leading_zeros(rec.PRIM_COST_IDENTIFIER);
         BUILD_REAL_ESTATE_CLOB(rec, V_CLOB);
         COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(V_CLOB);
         IF rec.GLOBAL_HIERARCHY IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'GLOBAL_HIERARCHY',rec.GLOBAL_HIERARCHY,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_AREA IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_AREA',rec.ADMIN_TO_SALES_AREA,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DISTRICT IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DISTRICT',rec.ADMIN_TO_SALES_DISTRICT,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DIVISION',rec.ADMIN_TO_SALES_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ALTERNATE_DAD IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ALTERNATE_DAD',rec.ALTERNATE_DAD,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.FACTS_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'FACTS_DIVISION',rec.FACTS_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.LEGACY_GL_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'LEGACY_GL_DIVISION',rec.LEGACY_GL_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            --DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'COST_CENTER_UPLOAD.REAL_ESTATE_LOAD_PROCESS', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      --Log the Cost Center # that failed to load
      --DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.REAL_ESTATE_LOAD_PROCESS', SQLERRM, SQLCODE);
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END REAL_ESTATE_LOAD_PROCESS;

PROCEDURE OTHER_LOAD_PROCESS
/******************************************************************************
OTHER_LOAD_PROCESS

This procedure is the core process for loading Other category cost centers in bulk

Modified: 05/05/2016 jxc517 CCN Project....
          Changes due to signature change
          05/09/2017 gxg192 The data for std_cost_identifier and prim_cost_identifier
          should be either "01" or "08". So changes are done to append leading zero
          in case user enters 1 or 8.
          05/09/2017 gxg192 Changes to use a function for padding leading zeros.
******************************************************************************/
AS
   V_CLOB              CLOB;
BEGIN
   --Other bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_OTHER) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         rec.STD_COST_IDENTIFIER := add_leading_zeros(rec.STD_COST_IDENTIFIER);
         rec.PRIM_COST_IDENTIFIER := add_leading_zeros(rec.PRIM_COST_IDENTIFIER);
         BUILD_OTHER_CLOB(rec, V_CLOB);
         COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(V_CLOB);
         IF rec.GLOBAL_HIERARCHY IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'GLOBAL_HIERARCHY',rec.GLOBAL_HIERARCHY,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_AREA IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_AREA',rec.ADMIN_TO_SALES_AREA,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DISTRICT IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DISTRICT',rec.ADMIN_TO_SALES_DISTRICT,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DIVISION',rec.ADMIN_TO_SALES_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ALTERNATE_DAD IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ALTERNATE_DAD',rec.ALTERNATE_DAD,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.FACTS_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'FACTS_DIVISION',rec.FACTS_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.LEGACY_GL_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'LEGACY_GL_DIVISION',rec.LEGACY_GL_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            --DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'COST_CENTER_UPLOAD.OTHER_LOAD_PROCESS', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      --Log the Cost Center # that failed to load
      --DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.OTHER_LOAD_PROCESS', SQLERRM, SQLCODE);
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END OTHER_LOAD_PROCESS;

PROCEDURE DISPATCH_TERMINAL_LOAD_PROCESS
/******************************************************************************
DISPATCH_TERMINAL_LOAD_PROCESS

This procedure is the core process for loading Dispatch Terminal category cost centers in bulk

Created: 06/23/2017 rxa457 CCN Project....
******************************************************************************/
AS
   V_CLOB              CLOB;
BEGIN
   --Dispatch Terminal bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_DISPATCH_TERMINAL) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         rec.STD_COST_IDENTIFIER := add_leading_zeros(rec.STD_COST_IDENTIFIER);
         rec.PRIM_COST_IDENTIFIER := add_leading_zeros(rec.PRIM_COST_IDENTIFIER);
         BUILD_DISPATCH_TERMINAL_CLOB(REC, V_CLOB);
         COST_CENTER_UPSERT_PKG.CC_UPSERT_PROCESS(V_CLOB);
         IF rec.GLOBAL_HIERARCHY IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'GLOBAL_HIERARCHY',rec.GLOBAL_HIERARCHY,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_AREA IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_AREA',rec.ADMIN_TO_SALES_AREA,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DISTRICT IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DISTRICT',rec.ADMIN_TO_SALES_DISTRICT,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ADMIN_TO_SALES_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ADMIN_TO_SALES_DIVISION',rec.ADMIN_TO_SALES_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.ALTERNATE_DAD IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'ALTERNATE_DAD',rec.ALTERNATE_DAD,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.FACTS_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'FACTS_DIVISION',rec.FACTS_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;
         IF rec.LEGACY_GL_DIVISION IS NOT NULL THEN
             CCN_HIERARCHY_UPLOAD.BUILD_HIERARCHY_INSERT_CLOB(rec.COST_CENTER_CODE,rec.MANAGER_ID,'LEGACY_GL_DIVISION',rec.LEGACY_GL_DIVISION,TRUNC(SYSDATE),V_CLOB);
             CCN_HIERARCHY.HIERARCHY_DETAIL_INSERT(V_CLOB);
         END IF;

         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            --DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'COST_CENTER_UPLOAD.DISPATCH_TERMINAL_LOAD_PROCESS', SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      --Log the Cost Center # that failed to load
      --DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      COMMON_TOOLS.LOG_ERROR('000000', 'COST_CENTER_UPLOAD.DISPATCH_TERMINAL_LOAD_PROCESS', SQLERRM, SQLCODE);      
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END DISPATCH_TERMINAL_LOAD_PROCESS;

PROCEDURE BATCH_LOAD_PROCESS
/******************************************************************************
BATCH_LOAD_PROCESS

This procedure is the core process for the cost center bulk upload batch
that invokes all the 5 categories of cost center creations
Territory, Store, Administration, Real Estate and Other

Modified:  06/23/2017 rxa457 CCN Project Team..
               Code Added to handle Bulk Load process of DISAPATCH_TERMINAL cost centers
******************************************************************************/
AS
   V_CLOB              CLOB;
   V_CONTEXT	         VARCHAR2(200);
   V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
   V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   V_CONTEXT:='Inserting a record in the Batch_Job table with Status as PROCESSING';
   CCN_BATCH_PKG.INSERT_BATCH_JOB('CC_BULK_LOAD_PROCESS', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   --Store bulk load   
   STORE_LOAD_PROCESS();

   --Territory bulk load
   TERRITORY_LOAD_PROCESS();

   --Administration bulk load
   ADMINISTRATION_LOAD_PROCESS();

   --Real Estate bulk load 
   REAL_ESTATE_LOAD_PROCESS();

   --Other bulk load   
   OTHER_LOAD_PROCESS();   

   --Dispatch_Terminal Load Process
     DISPATCH_TERMINAL_LOAD_PROCESS();

   V_CONTEXT:='Updating the Status in batch_job table';
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('CC_BULK_LOAD_PROCESS', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 

END BATCH_LOAD_PROCESS;

PROCEDURE UI_LOAD_PROCESS(
/******************************************************************************
UI_LOAD_PROCESS

This procedure is the core process for the cost center bulk upload through UI
that invokes one of the 5 categories of cost center creations
Territory, Store, Administration, Real Estate and Other based on the parameters passed

IN_BLOB          - blob value delimited by , and termianted by new line character
IN_CATEGORY_CODE - A ADMINISTRATIVE, M    MANUFACTURING, O    OTHER, R    REAL ESTATE, S    STORE, T    TERRITORY

Modified:  06/23/2017 rxa457 CCN Project Team..
               Code Added to handle Bulk Load process of DISAPATCH_TERMINAL cost centers
        :  09/29/2017 axt754 Rename file on server for history
        :  02/09/2018 sxg151 Calling MAIL_PKG.SEND_MAIL to send an email if Bulk Load process Fails.--ASP-975
        :  02/13/2018 sxg151 Calling ERRPKG.ERROR_DETAILS to fetch the error records from Error_log table--ASP-975
******************************************************************************/
IN_BLOB            IN       BLOB,
IN_CATEGORY_CODE   IN       COST_CENTER.CATEGORY%TYPE)
IS
    V_CATEGORY        CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
    V_FILE_NM         VARCHAR2(100);
    V_ARC_FILE_NM     VARCHAR2(100);
    V_START_TIME      DATE := SYSDATE;
    V_CLOB_FOR_EMAIL  CLOB;
BEGIN
    --Get the Category Description from Code_Detail table
    SELECT DECODE(CODE_DETAIL_DESCRIPTION,'ADMINISTRATIVE','ADMINISTRATION',REPLACE(CODE_DETAIL_DESCRIPTION,' ','_'))
      INTO V_CATEGORY
      FROM CODE_DETAIL 
     WHERE CODE_HEADER_NAME = 'CATEGORY'
       AND CODE_DETAIL_VALUE = IN_CATEGORY_CODE;

    V_FILE_NM     := 'COST_CENTER_'||V_CATEGORY||'.csv';
    V_ARC_FILE_NM := 'COST_CENTER_'||V_CATEGORY||'_'||TO_CHAR(SYSDATE,'RRRRMMDDHHMISS')||'.csv';


    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB,V_FILE_NM);
    CASE WHEN V_CATEGORY = 'STORE' THEN
             STORE_LOAD_PROCESS();
         WHEN V_CATEGORY = 'TERRITORY' THEN
             TERRITORY_LOAD_PROCESS();
         WHEN V_CATEGORY = 'ADMINISTRATION' THEN
             ADMINISTRATION_LOAD_PROCESS();
         WHEN V_CATEGORY = 'REAL_ESTATE' THEN
             REAL_ESTATE_LOAD_PROCESS();
         WHEN V_CATEGORY = 'OTHER' THEN
             OTHER_LOAD_PROCESS();
         WHEN V_CATEGORY = 'DISPATCH_TERMINAL' THEN
             DISPATCH_TERMINAL_LOAD_PROCESS();
         WHEN V_CATEGORY = 'MANUFACTURING' THEN
             NULL; --to be coded later
    ELSE
        NULL;
    END CASE;

    --Call ERRPKG.ERROR_DETAILS package here incase above any load process handles  errors.
    ERRPKG.ERROR_DETAILS(V_START_TIME, SYSDATE, V_CLOB_FOR_EMAIL);
    IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
        MAIL_PKG.SEND_MAIL('CC_UI_BULK_LOAD_PROCESS_FAIL',NULL, NULL, V_CLOB_FOR_EMAIL);
    END IF;
    --Rename file on server for history
    CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM,V_ARC_FILE_NM);
EXCEPTION
    WHEN OTHERS THEN
        --Call the errpkg.error_details package to fetch the data from error_log table to send an email.
        ERRPKG.ERROR_DETAILS(V_START_TIME, SYSDATE, V_CLOB_FOR_EMAIL);
        IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
            MAIL_PKG.SEND_MAIL('CC_UI_BULK_LOAD_PROCESS_FAIL',NULL, NULL, V_CLOB_FOR_EMAIL);
        END IF;
        -- Rename file on server for history
        CCN_BATCH_PKG.FILE_RENAME(V_FILE_NM, V_ARC_FILE_NM);
        ERRPKG.RAISE_ERR(SQLCODE, 'COST_CENTER_UPLOAD.UI_LOAD_PROCESS' || SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
END UI_LOAD_PROCESS;

END COST_CENTER_UPLOAD;