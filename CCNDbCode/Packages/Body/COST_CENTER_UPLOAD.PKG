create or replace 
PACKAGE  BODY COST_CENTER_UPLOAD
    AS 
PROCEDURE COST_CENTER_UPSERT ( 
 /******************************************************************************
	COST_CENTER_UPSERT   --    Cost Center Update delete Procedure

	This procedure is intended to update the database for the following tables used in
        Cost Center UI.
	Tables: 
              COST_CENTER
           ,  ADMINISTRATION, STORE, OTHER, REAL_ESTATE, TERRITORY,
            , STATUS
            , TYPE
            , MARKETING
            , PHONE
            , TAXWARE
            , ADDRESS tables.  

*******************************************************************************/

 in_row_data  in varchar2) --sys.xmltype
 
 IS

--cursor to get table names....

 cursor TABLES_CUR is
 
 SELECT table_name
 FROM insertorder
 ORDER BY table_order
 ;

v_Row_data xmltype := sys.xmltype(in_Row_data);

in_table_name varchar2(25);

v_row_value varchar2(500);
v_row_xml_frag sys.xmltype;
v_row_xml_clob_frag clob;
v_xml_frag clob;
--
v_code number;
v_errm varchar2(500);

--
v_xml_cost_center_frag clob;
v_xml_phone_frag clob;
v_xml_addr_usa_frag clob;
v_xml_addr_can_frag clob;
v_xml_addr_oth_frag clob;
v_xml_addr_mex_frag clob;
v_xml_type_frag clob;
v_xml_status_frag clob;
v_xml_taxware_frag clob;
v_xml_marketing_frag clob;
v_xml_administration_frag clob;
v_xml_store_frag clob;
v_xml_other_frag clob;
v_xml_real_estate_frag clob;
v_xml_territory_frag clob;
--

V_COST_CENTER_ROWTYPE      COST_CENTER%rowtype;
V_PHONE_ROWTYPE                  PHONE%rowtype;
V_ADDRUSA_ROWTYPE              ADDRESS_USA%rowtype;
V_ADDRCAN_ROWTYPE              ADDRESS_CAN%rowtype;
V_ADDRMEX_ROWTYPE              ADDRESS_MEX%rowtype;
V_ADDROTHER_ROWTYPE          ADDRESS_OTHER%rowtype;
V_TYPE_ROWTYPE                     TYPE%rowtype;
V_STATUS_ROWTYPE                  STATUS%rowtype;
V_TAXWARE_ROWTYPE              TAXWARE%rowtype;
V_MARKETING_ROWTYPE           MARKETING%rowtype;
V_TERRITORY_ROWTYPE            TERRITORY%rowtype;
V_STORE_ROWTYPE                   STORE%rowtype;
V_OTHER_ROWTYPE                   OTHER%rowtype;
V_ADMINISTRATION_ROWTYPE    ADMINISTRATION%rowtype;
V_REAL_ESTATE_ROWTYPE        REAL_ESTATE%rowtype;

--
v_count integer := 1;
begin

--
--    Removing fragments to send to individual procedures.
--

--Validating Business Rules
CCN_UI_INTERFACE_APP_PKG.VALIDATE_BUSINESS_RULES('COST_CENTER',in_row_data);

 for tables_rec in tables_cur loop 

    if (v_Row_data.existsNode('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name) = 1) then
    
       v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/ADDRESS_UI_UPSERT2/ADDRESS_UI_UPSERT/'|| tables_rec.table_name).getCLOBVal();

       if tables_rec.table_name in ('ADDRESS_USA', 'ADDRESS_CAN', 'ADDRESS_MEX', 'ADDRESS_OTHER') then  
    --      EXECUTE CC_ADDRESS_TABLES_UI; 
              CCN_TABLE_IU_PKG.CC_ADDRESS_TABLES_UI_SP (
              tables_rec.table_name                      
             ,in_Row_data);         
       end if;

	end if;
   
    if (v_Row_data.existsNode('/COST_CENTER_UI/'|| tables_rec.table_name) = 1) then
     
        v_xml_frag := v_Row_data.extract('/COST_CENTER_UI/'|| tables_rec.table_name).getCLOBVal();
     
        case tables_rec.table_name
            when 'COST_CENTER' 	then v_xml_cost_center_frag := v_xml_frag;
            when 'STATUS' 		  then v_xml_status_frag := v_xml_frag;
            when 'TYPE'		      then v_xml_type_frag := v_xml_frag;
            when 'TAXWARE'	  	then v_xml_taxware_frag := v_xml_frag;
            when 'MARKETING'		then v_xml_marketing_frag := v_xml_frag;
            when 'ADMINISTRATION' 	then v_xml_administration_frag := v_xml_frag;
            when 'STORE' 	     	then v_xml_store_frag := v_xml_frag;
            when 'OTHER'		    then v_xml_other_frag := v_xml_frag;
            when 'REAL_ESTATE'	then v_xml_real_estate_frag := v_xml_frag;
            when 'TERRITORY'		then v_xml_territory_frag := v_xml_frag;		
--            when 'ADDRESS_USA' 	then v_xml_addr_usa_frag := v_xml_frag;
--            when 'ADDRESS_CAN' 	then v_xml_addr_can_frag := v_xml_frag;
--            when 'ADDRESS_MEX' 	then v_xml_addr_mex_frag := v_xml_frag;
            when 'ADDRESS_OTHER'	then v_xml_addr_oth_frag := v_xml_frag;           
        else
            null;
        end case;

        in_table_name := tables_rec.table_name;  		
 
 
        if tables_rec.table_name in ('ADMINISTRATION', 'STORE', 'OTHER', 'REAL_ESTATE', 'TERRITORY') then  
    --      EXECUTE CC_ADDTL_TABLES_UI; 
    
            CCN_TABLE_IU_PKG.CC_ADDTL_TABLES_UI_SP (
             in_table_name                      
            ,in_Row_data
            );
                             
        end if;
            
 --  COST_CENTER insert/update process 
       begin
        
          if v_xml_cost_center_frag  is not null  
          	and tables_rec.table_name = 'COST_CENTER' then
                CCN_TABLE_IU_PKG.COST_CENTER_I_SP (
                  null   
                , 'COST_CENTER' 
                , null
                , v_xml_cost_center_frag);    
                 --   , v_cost_center_rowtype );
           end if; 
          
       EXCEPTION
          when dup_val_on_index  then 
            begin
              CCN_TABLE_IU_PKG.COST_CENTER_U_SP (                 
                 null   
                , 'COST_CENTER' 
                , null
                , v_xml_cost_center_frag);        
	
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' Cost Center Update Error ' );
            end;
       end;

 --  STATUS insert/update process 
 
       begin
       
          if v_xml_status_frag  is not null 
          and tables_rec.table_name = 'STATUS' then
          
              CCN_TABLE_IU_PKG.STATUS_I_SP (
                'STATUS'             
                , v_xml_status_frag                
                , V_STATUS_ROWTYPE );
            end if;
      EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.STATUS_U_SP (
                'STATUS'
                , v_xml_status_frag                 
                , v_status_rowtype );
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' Status Update Error ' );
            end;
      end;

 --  TYPE insert/update process 

      begin
        
          if v_xml_type_frag  is not null 
          and tables_rec.table_name = 'TYPE' then
              CCN_TABLE_IU_PKG.TYPE_I_SP (
                 'TYPE'                
                , v_xml_type_frag                
                , V_TYPE_ROWTYPE );
          end if;
      EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TYPE_U_SP (
                  'TYPE'             
                , v_xml_type_frag                
                , v_type_rowtype );
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' Type Update Error ' );
           end;
      end;


--  MARKETING insert/update process 

       begin
        
          if v_xml_marketing_frag  is not null 
          and tables_rec.table_name = 'MARKETING' then
              CCN_TABLE_IU_PKG.MARKETING_I_SP (                            
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag);                 
             
          end if;
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.MARKETING_U_SP (                  
                       null
                     , null                     
                     , 'MARKETING'   
                     , null
                     , v_xml_marketing_frag); 

                                          
                     
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' MARKETING Update Error ' );
           end;
        end;

--  TAXWARE insert/update process 

       begin
                
          if v_xml_taxware_frag  is not null 
          and tables_rec.table_name = 'TAXWARE' then
          
              CCN_TABLE_IU_PKG.TAXWARE_I_SP (                            
                 'TAXWARE' 
                , v_xml_taxware_frag
                , V_TAXWARE_ROWTYPE);    
          end if;                             
          
       EXCEPTION
          when dup_val_on_index  then
            begin
              CCN_TABLE_IU_PKG.TAXWARE_U_SP (                  
                 'TAXWARE' 
                , v_xml_taxware_frag
                , v_taxware_rowtype);  
                
            EXCEPTION 
             WHEN OTHERS THEN 
                 v_code  := SQLCODE;
                 v_errm  := substr(SQLERRM,1,200);
                 errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                 v_errm ||
                 ' TAXWARE Update Error ' );
           end;
        end;

  end if;   

 -- 
      if (v_Row_data.existsNode('/COST_CENTER_UI/PHONE_TABLE/' || tables_rec.table_name || '[' || v_count || ']') = 1) then
 --/COST_CENTER_UI/PHONE_TABLE/PHONE[1] 
        
              WHILE V_ROW_DATA.EXISTSNODE('/COST_CENTER_UI/PHONE_TABLE/' || TABLES_REC.TABLE_NAME || '[' || V_COUNT || ']') = 1 LOOP
                 v_xml_phone_frag := v_Row_data.extract('/COST_CENTER_UI/PHONE_TABLE/'|| tables_rec.table_name || '[' || v_count || ']').getCLOBVal();
 
                
    
 --  PHONE_TABLE insert/update process 
              begin
              
                if v_xml_phone_frag  is not null  then
                   CCN_TABLE_IU_PKG.PHONE_I_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);                    
                  
                end if;
          
              EXCEPTION
                 when dup_val_on_index  then
                   begin
                     CCN_TABLE_IU_PKG.PHONE_U_SP (
                       null
                     , null                     
                     , 'PHONE'   
                     , null
                     , v_xml_phone_frag);


                     
              EXCEPTION 
                 WHEN OTHERS THEN 
                   v_code  := SQLCODE;
                   v_errm  := substr(SQLERRM,1,200);
                   errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
                   v_errm ||
                   ' Phone Update Error ' );
             end;
           end;
              v_count := v_count + 1;
              
              END LOOP; --phone loop
      end if;    



   end loop; --tables_cur
    EXCEPTION
    when others then
         v_code  := SQLCODE;
         v_errm  := substr(SQLERRM,1,200);
         errpkg.raise_err(v_code, 'COST_CENTER_UPSERT ' ||
          v_errm ||
          ' Errors' );
 END COST_CENTER_UPSERT;
 
FUNCTION BUILD_TAG(
/******************************************************************************
BUILD_TAG

This function will build the tag based on passed input parameters

******************************************************************************/
                      IN_VALUE     IN VARCHAR2,
                      IN_TAG_NAME  IN VARCHAR2,
                      IN_DATE_FLAG IN VARCHAR2 DEFAULT 'N')
   RETURN VARCHAR2 IS
   V_VALUE VARCHAR2(10000);
BEGIN
      IF IN_VALUE IS NULL THEN
         RETURN '<' || IN_TAG_NAME || '/>';
      END IF;
      IF IN_DATE_FLAG = 'N' THEN
         RETURN '<' || IN_TAG_NAME || '>' || IN_VALUE || '</' || IN_TAG_NAME || '>';
      ELSE
         RETURN '<' || IN_TAG_NAME || '>' || TO_CHAR(TO_DATE(IN_VALUE,'RRRRMMDD'),'MM-DD-RRRR') || '</' || IN_TAG_NAME || '>';
      END IF;
END BUILD_TAG;
   
PROCEDURE LOG_ERROR(
/******************************************************************************
LOG_ERROR

This procedure is an autonomous transaction that logs the errors and proceeds 
with the execution of rest of the cost centers

******************************************************************************/
                    IN_CC      IN VARCHAR2,
                    IN_SQLERRM IN VARCHAR2,
                    IN_SQLCODE IN NUMBER) IS PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
      INSERT INTO ERROR_LOG VALUES(ERROR_LOG_SEQ.NEXTVAL, IN_CC, SYSDATE, 'COST_CENTER_BULK_UPLOAD', IN_SQLERRM, NULL, IN_SQLCODE);
      COMMIT;
EXCEPTION
      WHEN OTHERS THEN
         RAISE;
END LOG_ERROR;

PROCEDURE BUILD_STORE_CLOB(
/******************************************************************************
BUILD_STORE_CLOB

This procedure will build the xml as clob for Store cost center category

******************************************************************************/
                REC             IN     COST_CENTER_STORE%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_NAME, 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      /*
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.BEGIN_DATE,'MM-DD-RRRR'), 'BEGIN_DATE');
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.OPEN_DATE,'MM-DD-RRRR'), 'OPEN_DATE');
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.MOVE_DATE, 'MM-DD-RRRR'),'MOVE_DATE');
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.CLOSE_DATE, 'MM-DD-RRRR'),'CLOSE_DATE');
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.FINANCIAL_CLOSE_DATE, 'MM-DD-RRRR'),'FINANCIAL_CLOSE_DATE');
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.POS_PROG_VER_EFF_DATE, 'MM-DD-RRRR'),'POS_PROG_VER_EFF_DATE');
      */
      V_CLOB := V_CLOB || BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      /*
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.STATUS_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.STATUS_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  --diff
      */
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      /*
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.TYPE_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.TYPE_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  --diff 	      
      */
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<STORE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STORE_CATEGORY, 'CATEGORY'); --diff
      --V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.PERP_INV_START_DATE, 'MM-DD-RRRR'),'PERP_INV_START_DATE');  	   
      V_CLOB := V_CLOB || BUILD_TAG(rec.PERP_INV_START_DATE, 'PERP_INV_START_DATE', 'Y');  	   
      V_CLOB := V_CLOB || BUILD_TAG(rec.CLASSIFICATION_CODE, 'CLASSIFICATION_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.INVENTORY_INDICATOR, 'INVENTORY_INDICATOR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.RURAL_METRO_ZONE_CODE, 'RURAL_METRO_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.SELLING_STORE_FLAG, 'SELLING_STORE_FLAG');      
      V_CLOB := V_CLOB || '</STORE>';

      IF rec.MARKETING_CATEGORY IS NOT NULL THEN
         V_CLOB := V_CLOB || '<MARKETING>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.MARKETING_CATEGORY, 'CATEGORY'); --diff
         V_CLOB := V_CLOB || BUILD_TAG(rec.MARKETING_TYPE, 'MARKETING_TYPE');
         /*
         V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.MKT_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); --DIFF
         V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.MKT_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  --diff 
         */
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_BRAND, 'MKT_BRAND');
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_MISSION, 'MKT_MISSION');
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_SALES_FLOOR_SIZE, 'MKT_SALES_FLOOR_SIZE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_WAREHOUSE_SIZE, 'MKT_WAREHOUSE_SIZE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.MKT_REAL_ESTATE_SETTING, 'MKT_REAL_ESTATE_SETTING');
         V_CLOB := V_CLOB || '</MARKETING>';
      END IF;

      IF rec.TWJ_STATE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<TAXWARE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.TWJ_STATE, 'TWJ_STATE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.TWJ_ZIP, 'TWJ_ZIP');
         V_CLOB := V_CLOB || BUILD_TAG(rec.TWJ_GEO, 'TWJ_GEO');
         --V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.TWJ_MAINTENANCE_DATE, 'MM-DD-RRRR'),'TWJ_MAINTENANCE_DATE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.TWJ_MAINTENANCE_DATE, 'TWJ_MAINTENANCE_DATE', 'Y');
         V_CLOB := V_CLOB || BUILD_TAG(rec.TWJ_COUNTRY, 'TWJ_COUNTRY');
         V_CLOB := V_CLOB || BUILD_TAG(rec.TWJ_COMPANY, 'TWJ_COMPANY');
         --V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.LAST_MAINT_DATE, 'MM-DD-RRRR'),'LAST_MAINT_DATE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.LAST_MAINT_DATE, 'LAST_MAINT_DATE', 'Y');
         V_CLOB := V_CLOB || BUILD_TAG(rec.LAST_MAINT_METHOD_ID, 'LAST_MAINT_METHOD_ID');
         V_CLOB := V_CLOB || BUILD_TAG(rec.LAST_MAINT_USER_ID, 'LAST_MAINT_USER_ID');
         V_CLOB := V_CLOB || '</TAXWARE>';
      END IF;
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.USA_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.USA_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.CAN_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.CAN_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.MEX_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.MEX_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           ELSE
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              /*
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.OTHER_EFFECTIVE_DATE, 'MM-DD-RRRR'),'EFFECTIVE_DATE'); 
              V_CLOB := V_CLOB || BUILD_TAG(TO_CHAR(rec.OTHER_EXPIRATION_DATE, 'MM-DD-RRRR'),'EXPIRATION_DATE');  
              */
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';
      
      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_STORE_CLOB;

PROCEDURE BUILD_TERRITORY_CLOB(
/******************************************************************************
BUILD_TERRITORY_CLOB

This procedure will build the xml as clob for Territory cost center category

******************************************************************************/
                REC             IN     COST_CENTER_TERRITORY%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_NAME, 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<TERRITORY>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.TERRITORY_SLS_MGR_CODE, 'TERRITORY_SLS_MGR_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TERRITORY_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || BUILD_TAG(rec.LEASE_CAR_INDICATOR, 'LEASE_CAR_INDICATOR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TERRITORY_TYPE_BUSN_CODE, 'TERRITORY_TYPE_BUSN_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.HOME_STORE, 'HOME_STORE');
      V_CLOB := V_CLOB || '</TERRITORY>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';
      
      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_TERRITORY_CLOB;

PROCEDURE BUILD_ADMINISTRATION_CLOB(
/******************************************************************************
BUILD_ADMINISTRATION_CLOB

This procedure will build the xml as clob for Administration cost center category

******************************************************************************/
                REC             IN     COST_CENTER_ADMINISTRATION%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_NAME, 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<ADMINISTRATION>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ADMINISTRATION_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || BUILD_TAG(rec.INTERNAL_MAIL_NUMBER, 'INTERNAL_MAIL_NUMBER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ADMIN_COST_CNTR_TYPE, 'ADMIN_COST_CNTR_TYPE');
      V_CLOB := V_CLOB || '</ADMINISTRATION>';
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           ELSE
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';
      
      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_ADMINISTRATION_CLOB;

PROCEDURE BUILD_REAL_ESTATE_CLOB(
/******************************************************************************
BUILD_REAL_ESTATE_CLOB

This procedure will build the xml as clob for Real Estate cost center category

******************************************************************************/
                REC             IN     COST_CENTER_REAL_ESTATE%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_NAME, 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<REAL_ESTATE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.REAL_ESTATE_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || '</REAL_ESTATE>';
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           ELSE
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';
      
      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_REAL_ESTATE_CLOB;

PROCEDURE BUILD_OTHER_CLOB(
/******************************************************************************
BUILD_OTHER_CLOB

This procedure will build the xml as clob for Other cost center category

******************************************************************************/
                REC             IN     COST_CENTER_OTHER%ROWTYPE,
                OUT_XML_AS_CLOB OUT    CLOB)
AS
      V_CLOB CLOB;
BEGIN
      V_CLOB := '<COST_CENTER_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">';

      V_CLOB := V_CLOB || '<COST_CENTER>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_NAME, 'COST_CENTER_NAME');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CATEGORY, 'CATEGORY');
      V_CLOB := V_CLOB || BUILD_TAG(rec.ENTITY_TYPE, 'ENTITY_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATEMENT_TYPE, 'STATEMENT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.COUNTRY_CODE, 'COUNTRY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TRANSPORT_TYPE, 'TRANSPORT_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BEGIN_DATE, 'BEGIN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.OPEN_DATE, 'OPEN_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MOVE_DATE, 'MOVE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CLOSE_DATE, 'CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.FINANCIAL_CLOSE_DATE,'FINANCIAL_CLOSE_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_EFF_DATE,'POS_PROG_VER_EFF_DATE', 'Y');
      V_CLOB := V_CLOB || BUILD_TAG(rec.UPS_ZONE_CODE, 'UPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.RPS_ZONE_CODE, 'RPS_ZONE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.CURRENCY_CODE, 'CURRENCY_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POS_PROG_VER_NBR, 'POS_PROG_VER_NBR');
      V_CLOB := V_CLOB || BUILD_TAG(rec.LEASE_OWN_CODE, 'LEASE_OWN_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.MISSION_TYPE_CODE, 'MISSION_TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DUNS_NUMBER, 'DUNS_NUMBER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_LOGO_GROUP_IND, 'PRI_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_LOGO_GROUP_IND, 'SCD_LOGO_GROUP_IND');
      V_CLOB := V_CLOB || BUILD_TAG(rec.BANKING_TYPE, 'BANKING_TYPE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_BAG_REORDER, 'DEPOSIT_BAG_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.DEPOSIT_TICKET_REORDER, 'DEPOSIT_TICKET_REORDER');
      V_CLOB := V_CLOB || BUILD_TAG(rec.POP_KIT_CODE, 'POP_KIT_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.GLOBAL_HIERARCHY_IND, 'GLOBAL_HIERARCHY_IND');
      V_CLOB := V_CLOB || '</COST_CENTER>';

      V_CLOB := V_CLOB || '<STATUS>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_CODE, 'STATUS_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.STATUS_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff
      V_CLOB := V_CLOB || '</STATUS>';

      V_CLOB := V_CLOB || '<TYPE>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_CODE, 'TYPE_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); --DIFF
      V_CLOB := V_CLOB || BUILD_TAG(rec.TYPE_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  --diff 	      
      V_CLOB := V_CLOB || '</TYPE>';

      V_CLOB := V_CLOB || '<OTHER>';
      V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
      V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_CATEGORY, 'CATEGORY'); --diff
      V_CLOB := V_CLOB || '</OTHER>';
--all diff
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT2>';
      V_CLOB := V_CLOB || '<ADDRESS_UI_UPSERT>';
      CASE WHEN rec.USA_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_USA>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE, 'ZIP_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_ZIP_CODE_4, 'ZIP_CODE_4');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTY, 'COUNTY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_FIPS_CODE, 'FIPS_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_DESTINATION_POINT, 'DESTINATION_POINT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_CHECK_DIGIT, 'CHECK_DIGIT');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.USA_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_USA>';
           WHEN rec.CAN_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_CAN>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.CAN_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_CAN>';
           WHEN rec.MEX_COUNTRY_CODE IS NOT NULL THEN
              V_CLOB := V_CLOB || '<ADDRESS_MEX>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.MEX_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_MEX>';
           ELSE
              V_CLOB := V_CLOB || '<ADDRESS_OTHER>';
              V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_TYPE, 'ADDRESS_TYPE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EFFECTIVE_DATE, 'EFFECTIVE_DATE', 'Y'); 
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_EXPIRATION_DATE, 'EXPIRATION_DATE', 'Y');  
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_1, 'ADDRESS_LINE_1');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_2, 'ADDRESS_LINE_2');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_ADDRESS_LINE_3, 'ADDRESS_LINE_3');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_CITY, 'CITY');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_PROVINCE_CODE, 'PROVINCE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_STATE_CODE, 'STATE_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_POSTAL_CODE, 'POSTAL_CODE');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_VALID_ADDRESS, 'VALID_ADDRESS');
              V_CLOB := V_CLOB || BUILD_TAG(rec.OTHER_COUNTRY_CODE, 'COUNTRY_CODE');
              V_CLOB := V_CLOB || '</ADDRESS_OTHER>';
      END CASE;
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT>';
      V_CLOB := V_CLOB || '</ADDRESS_UI_UPSERT2>';

      V_CLOB := V_CLOB || '<PHONE_TABLE>';
      IF rec.PRI_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.PRI_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.SCD_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(REC.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(REC.SCD_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.SCD_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      IF rec.FAX_PHONE_NUMBER_TYPE IS NOT NULL THEN
         V_CLOB := V_CLOB || '<PHONE>';
         V_CLOB := V_CLOB || BUILD_TAG(rec.COST_CENTER_CODE, 'COST_CENTER_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER_TYPE, 'PHONE_NUMBER_TYPE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_AREA_CODE, 'PHONE_AREA_CODE');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_NUMBER, 'PHONE_NUMBER');
         V_CLOB := V_CLOB || BUILD_TAG(rec.FAX_PHONE_EXTENSION, 'PHONE_EXTENSION');
         V_CLOB := V_CLOB || '</PHONE>';
      END IF;
      V_CLOB := V_CLOB || '</PHONE_TABLE>';
      V_CLOB := V_CLOB || '</COST_CENTER_UI>';
      
      OUT_XML_AS_CLOB := V_CLOB;
END BUILD_OTHER_CLOB;

PROCEDURE BATCH_LOAD_PROCESS
/******************************************************************************
BATCH_LOAD_PROCESS

This procedure is the core process for the cost center bulk upload batch
that invokes all the 5 categories of cost center creations
Territory, Store, Administration, Real Estate and Other

******************************************************************************/
AS
   V_CLOB CLOB;
BEGIN
   --Store bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_STORE) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         BUILD_STORE_CLOB(rec, V_CLOB);
         COST_CENTER_UPLOAD.COST_CENTER_UPSERT(V_CLOB);
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            --LOG_ERROR(rec.COST_CENTER_CODE, SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
   --Territory bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_TERRITORY) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         BUILD_TERRITORY_CLOB(rec, V_CLOB);
         --proc_iex(V_CLOB);
         COST_CENTER_UPLOAD.COST_CENTER_UPSERT(V_CLOB);
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            --LOG_ERROR(rec.COST_CENTER_CODE, SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
   --Administration bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_ADMINISTRATION) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         BUILD_ADMINISTRATION_CLOB(rec, V_CLOB);
         COST_CENTER_UPLOAD.COST_CENTER_UPSERT(V_CLOB);
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            --LOG_ERROR(rec.COST_CENTER_CODE, SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
   --Real Estate bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_REAL_ESTATE) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         BUILD_REAL_ESTATE_CLOB(rec, V_CLOB);
         COST_CENTER_UPLOAD.COST_CENTER_UPSERT(V_CLOB);
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            --LOG_ERROR(rec.COST_CENTER_CODE, SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
   --Other bulk load
   FOR rec IN (SELECT * FROM COST_CENTER_OTHER) LOOP
      BEGIN
         SAVEPOINT COST_CENTER_LOAD;
         BUILD_OTHER_CLOB(rec, V_CLOB);
         COST_CENTER_UPLOAD.COST_CENTER_UPSERT(V_CLOB);
         COMMIT;
      EXCEPTION
         WHEN OTHERS THEN
            --Log the Cost Center # that failed to load
            DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
            --LOG_ERROR(rec.COST_CENTER_CODE, SQLERRM, SQLCODE);
            ROLLBACK TO COST_CENTER_LOAD;
      END;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      --Log the Cost Center # that failed to load
      DBMS_OUTPUT.PUT_LINE('Failed to load due to ' || SQLCODE || ' - ' || SQLERRM);
      --LOG_ERROR('000000', SQLERRM, SQLCODE);      
      ROLLBACK TO COST_CENTER_LOAD;
      RAISE;
END BATCH_LOAD_PROCESS;

END COST_CENTER_UPLOAD;
/

