create or replace PACKAGE BODY          CCN_HIERARCHY
    AS

/*********************************************************** 
This package is will return data from the hierarchy_detail table

created : 03/22/2012 OD CCN coding project
************************************************************/

PROCEDURE ELIMINATE_SPECIAL_CHRS(
/**********************************************************
	ELIMINATE_SPECIAL_CHRS

	This procedure will elminate special characters
        

created : 06/23/2013 CCN Project....
**********************************************************/
IO_HIERARCHY_DETAIL_ROW IN OUT HIERARCHY_DETAIL%ROWTYPE)
IS
BEGIN
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME);
  END IF;
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL);
  END IF;
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL);
  END IF;
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL);
  END IF;
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL);
  END IF;
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC);
  END IF;
  IF IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL IS NOT NULL THEN
     IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IO_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL);
  END IF;
END ELIMINATE_SPECIAL_CHRS;

PROCEDURE update_cc_global_hrchy_ind(
/***********************************************************
      update_cc_global_hrchy_ind 
      This Procedure will update COST_CENTER.GLOBAL_HIERARCHY_IND 
      based on passed input cost center
      
Created : 09/12/2013 CCN Project
************************************************************/
in_COST_CENTER_CODE   IN   VARCHAR2) IS
  V_COUNT                 NUMBER := 0;
  V_VALUE                 VARCHAR2(1);
  V_CONTEXT   VARCHAR2(1000);
  SQ          INTEGER;
  SE          VARCHAR2(300);
BEGIN
       --If no records were found, update won't happen, but no exception is raised
       v_context := 'Querying the data for the cost center '|| in_COST_CENTER_CODE || ' global validation';
       SELECT COUNT(DISTINCT HD.HRCHY_HDR_NAME) INTO V_COUNT
         FROM HIERARCHY_DETAIL HD,
              HIERARCHY_HEADER HH
        WHERE HD.HRCHY_HDR_NAME         IN ('GLOBAL_HIERARCHY','FACTS_DIVISION','LEGACY_GL_DIVISION')
          AND HH.HRCHY_HDR_NAME         = HD.HRCHY_HDR_NAME 
          AND HH.HRCHY_HDR_LEVELS       = HD.HRCHY_DTL_LEVEL
          AND HD.HRCHY_DTL_CURR_ROW_VAL = in_COST_CENTER_CODE
          AND EXISTS (SELECT 1
                        FROM COST_CENTER CC
                       WHERE CC.COST_CENTER_CODE = HD.HRCHY_DTL_CURR_ROW_VAL);
       
       IF V_COUNT = 3 THEN
          V_VALUE := 'Y';
       ELSE
          V_VALUE := 'N';
       END IF;
       
       --Update only if the value is changed
       v_context := 'Updating the GLOBAL_HIERARCHY_IND indicator of cost center : '||in_COST_CENTER_CODE;
       UPDATE COST_CENTER
          SET GLOBAL_HIERARCHY_IND = V_VALUE
        WHERE COST_CENTER_CODE     = in_COST_CENTER_CODE
          AND GLOBAL_HIERARCHY_IND <> V_VALUE;
  EXCEPTION 
        WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            v_context := v_context || ' ' || sq || ' ' || se; 

            ERRPKG.RAISE_ERR(-20004, 'CCN_HIERARCHY.update_cc_global_hrchy_ind -', V_CONTEXT); 
END update_cc_global_hrchy_ind;

PROCEDURE hierarchy_insert_wrapper( 
/***********************************************************
      hierarchy_insert_wrapper 
      This Procedure will insert into HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST 
      
Created : 02/27/2013 SH CCN Project
************************************************************/
  in_ind IN varchar2,
  in_hierarchy_detail_row IN hierarchy_detail%ROWTYPE)
IS
  --Insert Detail Process, overloaded function
  --accepts a rowtype

  v_hierarchy_detail_row  HIERARCHY_DETAIL%ROWTYPE;
  V_CONTEXT   VARCHAR2(1000);
  SQ          INTEGER;
  SE          VARCHAR2(300);

BEGIN
    v_hierarchy_detail_row := in_hierarchy_detail_row;
    ELIMINATE_SPECIAL_CHRS(v_hierarchy_detail_row);
    
    IF in_ind = 'H' THEN
       V_CONTEXT := 'Inserting into hierarchy_detail_hst ';
       INSERT INTO hierarchy_detail_hst VALUES v_hierarchy_detail_row;
    ELSE
       V_CONTEXT := 'Inserting into hierarchy_detail ';
       INSERT INTO hierarchy_detail VALUES v_hierarchy_detail_row; 
       --After inserting, if the cost center is part of global/facts/legacy, update GLOBAL_HIERARCHY_IND to 'Y' from 'N'
       update_cc_global_hrchy_ind(v_hierarchy_detail_row.HRCHY_DTL_CURR_ROW_VAL);
    END IF;
    
  EXCEPTION 
        WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            v_context := v_context || ' ' || sq || ' ' || se; 
            dbms_output.put_line( 'CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER - '|| v_context); 
            ERRPKG.RAISE_ERR(-20004, 'CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER -', V_CONTEXT);  
END hierarchy_insert_wrapper;

PROCEDURE HIERARCHY_DELETE_WRAPPER(
/***********************************************************
      HIERARCHY_DELETE_WRAPPER 
      This Procedure will delete from HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST based on the in_flag
      level. 

      IN_FLAG                  IN  VARCHAR2,

input param : in_HRCHY_DTL_CURR_LVL_VAL
Created : 08/02/2013 CCN Project
************************************************************/
IN_FLAG                 IN VARCHAR2,
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      DELETE FROM HIERARCHY_DETAIL_HST
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL;
   ELSE
      DELETE FROM HIERARCHY_DETAIL
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL;
       --After deleting, if the cost center is NOT part of global/facts/legacy, update GLOBAL_HIERARCHY_IND to 'N' from 'Y'
       update_cc_global_hrchy_ind(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL);
   END IF;
END HIERARCHY_DELETE_WRAPPER;

PROCEDURE HIERARCHY_UPDATE_WRAPPER(
/***********************************************************
      HIERARCHY_UPDATE_WRAPPER 
      This Procedure will update from HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST based on the in_flag
      level. 
      
      IN_FLAG                  IN  VARCHAR2,
  
input param : in_HRCHY_DTL_CURR_LVL_VAL
Created : 08/02/2013 CCN Project
************************************************************/
IN_FLAG                 IN VARCHAR2,
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      UPDATE HIERARCHY_DETAIL_HST
         SET HRCHY_DTL_NEXT_LVL_VAL = COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL)
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
   ELSE
      UPDATE HIERARCHY_DETAIL
         SET HRCHY_DTL_NEXT_LVL_VAL = COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL)
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
   END IF;
END HIERARCHY_UPDATE_WRAPPER;

PROCEDURE RETURN_HIERARCHY (	
/**********************************************************
	RETURN_HIERARCHY

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail table based on header name, current value , traverse ( UP or DOWN DEFAULT is UP)
	and level
	ex. CCN_HIERARCHY.RETURN_HIERARCHY('DAD Structure','703252','DOWN',OUT_DEFINED_REF_CURSOR)

created : 03/22/2012 OD CCN Project....
revised : 02/14/2014 kdp CCN Phase 1.1 adding code to use composite key for IN_CURR_ROW_VAL
**********************************************************/

				IN_HEADER_NAME 				IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    , 	IN_CURR_ROW_VAL			IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
			    ,	IN_LEVEL				IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_TRAVERSE				IN VARCHAR2 DEFAULT 'UP'
			    ,   OUT_HIERARCHY_REF_CUR 	IN OUT REF_CURSOR
			   )
                                                                                               
	
	
        IS                 
        
        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN
	
    V_CONTEXT := 'START';

		IF IN_TRAVERSE = 'UP' THEN

    V_CONTEXT := 'Traverse Up Query';
 --Concatenation is needed because We need level and value to get the hierarchy as sometimes the value accross levels could be the same
 
 			OPEN  OUT_HIERARCHY_REF_CUR FOR

		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_LVL_VAL ) lev,  --02/14/2104 kdp
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		hr.HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		--xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                extract(hr.UPPER_LVL_VER_VALUE,'/attributes').getStringVal() UPPER_LVL_VER_VALUE
                --COST_CENTER_STATEMENT_TYPE(hr.UPPER_LVL_VER_VALUE,hr.HRCHY_DTL_CURR_ROW_VAL) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
           AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.pa =  AR.Ch
        		ORDER BY AR.lev;

        	ELSE
          
        V_CONTEXT := 'Traverse Down Query';  

	OPEN  OUT_HIERARCHY_REF_CUR FOR
		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_LVL_VAL ) lev, --02/14/2104 kdp
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		hr.HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		--xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                extract(hr.UPPER_LVL_VER_VALUE,'/attributes').getStringVal() UPPER_LVL_VER_VALUE
                --COST_CENTER_STATEMENT_TYPE(hr.UPPER_LVL_VER_VALUE,hr.HRCHY_DTL_CURR_ROW_VAL) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
           AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.CH =  AR.PA
        		ORDER BY AR.lev;

		END IF;
    
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY',V_CONTEXT);    
        			

		--Error handling to be put  
	END RETURN_HIERARCHY;
  
FUNCTION COST_CENTER_DESCRIPTION(
/***********************************************************
COST_CENTER_DESCRIPTION
      This function will return the COST_CENTER_NAME 
      from COST_CENTER into HRCHY_DTL_DESC
Created : 08/23/2013 CCN Project
************************************************************/
IN_COST_CENTER_CODE IN VARCHAR2)
RETURN VARCHAR2
IS
  V_COST_CENTER_DESCRIPTION VARCHAR2(100);
BEGIN
   SELECT COST_CENTER_NAME
     INTO V_COST_CENTER_DESCRIPTION
     FROM COST_CENTER 
    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
   
   RETURN V_COST_CENTER_DESCRIPTION;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
       RETURN NULL;
END COST_CENTER_DESCRIPTION;

FUNCTION COST_CENTER_STATEMENT_TYPE(
/***********************************************************
COST_CENTER_STATEMENT_TYPE
      This function will return the upper_lvl_ver_value
      with STATEMENT_TYPE replaced with the cost center STATEMENT_TYPE
Created : 09/18/2013 CCN Project
************************************************************/
       IN_UPPER_LVL_VER_VALUE  IN HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE,
       IN_COST_CENTER_CODE     IN VARCHAR2)
RETURN VARCHAR2 IS
   V_RETURN_VALUE          VARCHAR2(32000);
   V_COST_CENTER_STMNT_TYP COST_CENTER.STATEMENT_TYPE%TYPE;
   V_COUNT                 NUMBER := 1;
   V_STMNT_TYPE_ATTR_POS   NUMBER := NULL;
   V_ATTRIBUTE_NAME        VARCHAR2(100);
BEGIN
   SELECT STATEMENT_TYPE
     INTO V_COST_CENTER_STMNT_TYP
     FROM COST_CENTER 
    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

   IF V_COST_CENTER_STMNT_TYP IS NOT NULL THEN

       WHILE IN_UPPER_LVL_VER_VALUE.EXISTSNODE('//attributes/upper_lvl_ver_desc[' || V_COUNT || ']') = 1 LOOP
           V_ATTRIBUTE_NAME := UPPER(REPLACE(IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc' || '[' || V_COUNT || ']/Name/text()').GETSTRINGVAL(),' ','_'));
           IF V_ATTRIBUTE_NAME = 'STATEMENT_TYPE' THEN
               V_STMNT_TYPE_ATTR_POS := V_COUNT;
               EXIT;
           END IF;
           V_COUNT := V_COUNT + 1;
       END LOOP;

      IF V_STMNT_TYPE_ATTR_POS IS NOT NULL THEN
          SELECT UPDATEXML(IN_UPPER_LVL_VER_VALUE,
                           '/attributes/upper_lvl_ver_desc['||V_STMNT_TYPE_ATTR_POS||']/Value/text()',
                           V_COST_CENTER_STMNT_TYP).GETSTRINGVAL()
            INTO V_RETURN_VALUE
            FROM DUAL;
      END IF;

   END IF;

   RETURN NVL(V_RETURN_VALUE,IN_UPPER_LVL_VER_VALUE.GETSTRINGVAL());
EXCEPTION
   WHEN OTHERS THEN
       RETURN IN_UPPER_LVL_VER_VALUE.GETSTRINGVAL();
END COST_CENTER_STATEMENT_TYPE;

FUNCTION GET_COST_CENTER_STMNT_TYP_FNC(
/***********************************************************
GET_COST_CENTER_STMNT_TYP_FNC
      This function will return the statement type for the cost center passed in

Created : 10/28/2013 CCN Project
************************************************************/
       IN_COST_CENTER_CODE     IN VARCHAR2)
RETURN VARCHAR2 IS
   V_COST_CENTER_STMNT_TYP COST_CENTER.STATEMENT_TYPE%TYPE;
BEGIN
   BEGIN
       SELECT STATEMENT_TYPE
         INTO V_COST_CENTER_STMNT_TYP
         FROM COST_CENTER 
        WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
   EXCEPTION 
       WHEN OTHERS THEN
           NULL;   
   END;
   RETURN V_COST_CENTER_STMNT_TYP;
EXCEPTION
   WHEN OTHERS THEN
       RETURN V_COST_CENTER_STMNT_TYP;
END GET_COST_CENTER_STMNT_TYP_FNC;

FUNCTION GET_MGR_NAME_FNC(
/*------------------------------------------------------------------------------
                               GET_MGR_NAME_FNC                
Project     : CCN
Author      : SXT410
Created on  : 10/06/2014
Purpose     : Function to return Manager Name for given Cost Center Code as an input
--------------------------------------------------------------------------------
Modification History
--------------------
Modifed Date         Modified By         Description
29/10/2014           jxc517              Logic unnecessary, corrected
--------------------------------------------------------------------------------
------------------------------------------------------------------------------*/
IN_COST_CENTER_CODE     IN EMPLOYEE_DETAILS.COST_CENTER_CODE%TYPE )RETURN VARCHAR2
IS 
    V_MGR_NAME EMPLOYEE_DETAILS.EMPLOYEE_NAME%TYPE;
    COUNT_REC  NUMBER;
BEGIN
   BEGIN
       SELECT ED.EMPLOYEE_NAME
         INTO V_MGR_NAME
         FROM EMPLOYEE_DETAILS ED
        WHERE UPPER(ED.JOB_TITLE) IN ('MGR','SALES REP')
          AND ED.COST_CENTER_CODE = IN_COST_CENTER_CODE
          AND ROWNUM < 2;
   EXCEPTION 
       WHEN OTHERS THEN
           NULL;   
   END;
   RETURN V_MGR_NAME;    
EXCEPTION    
    WHEN OTHERS THEN
         RETURN V_MGR_NAME;
END GET_MGR_NAME_FNC;

FUNCTION GET_TYPE_FNC(
/*------------------------------------------------------------------------------
 GET_TYPE_FNC                
Project     : CCN
Author      : SXT410
Created on  : 10/06/2014
Purpose     : Function to return Type for given Cost Center Code as an input
--------------------------------------------------------------------------------
Modification History
--------------------
Modifed Date         Modified By         Description
--------------------------------------------------------------------------------
------------------------------------------------------------------------------*/
IN_COST_CENTER_CODE IN VARCHAR2) 
RETURN VARCHAR2
IS 
    V_TYPE_CODE TYPE.TYPE_CODE%TYPE;
BEGIN
    SELECT TYPE_CODE
      INTO V_TYPE_CODE
      FROM TYPE
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND EXPIRATION_DATE IS NULL;

    RETURN V_TYPE_CODE;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN(SQLERRM);
END GET_TYPE_FNC;

FUNCTION GET_CATEGORY_FNC(
/*------------------------------------------------------------------------------
GET_CATEGORY_FNC                
Project     : CCN
Author      : SXT410
Created on  : 10/06/2014
Purpose     : Function to return Category value for given Cost Center Code
              as an input
--------------------------------------------------------------------------------
Modification History
--------------------
Modifed Date         Modified By         Description
--------------------------------------------------------------------------------
------------------------------------------------------------------------------*/
IN_COST_CENTER_CODE IN VARCHAR2) 
RETURN VARCHAR2
IS
    V_CATEGORY COST_CENTER.CATEGORY%TYPE;
BEGIN
    SELECT CATEGORY
      INTO V_CATEGORY
      FROM COST_CENTER
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    
    RETURN V_CATEGORY;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN(SQLERRM);
END GET_CATEGORY_FNC;
                         
PROCEDURE RETURN_HIERARCHY_LAST_LVL (	
/**********************************************************
	RETURN_HIERARCHY_LAST_LVL

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail lowest level table based on header name, current value , t
	

created : 06/22/2012 kdp CCN Project....
**********************************************************/

				IN_HEADER_NAME 			IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    ,	IN_LEVEL			IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_COMPOSITE_KEY	IN HIERARCHY_DETAIL.HRCHY_DTL_PREV_LVL_VAL%TYPE
			    ,   OUT_HIERARCHY_REF_CUR IN OUT REF_CURSOR
       --  ,   OUT_HIERARCHY_REF_CUR IN OUT SYS_REFCURSOR
			   )
                                                                                               
	
	
        IS                 
        
        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN

    V_CONTEXT := 'START';

    V_CONTEXT := 'Traverse Down Query';  

	OPEN  OUT_HIERARCHY_REF_CUR FOR
		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE,
                AR.STATEMENT_TYPE,
                AR.MGR_NAME,
                AR.TYPE,
                AR.CATEGORY
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		--hr.HRCHY_DTL_DESC,
                CCN_HIERARCHY.COST_CENTER_DESCRIPTION(hr.HRCHY_DTL_CURR_ROW_VAL) HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		--xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                COST_CENTER_STATEMENT_TYPE(hr.UPPER_LVL_VER_VALUE,hr.HRCHY_DTL_CURR_ROW_VAL) UPPER_LVL_VER_VALUE,
                CCN_HIERARCHY.GET_COST_CENTER_STMNT_TYP_FNC(hr.HRCHY_DTL_CURR_ROW_VAL) STATEMENT_TYPE,
                CCN_HIERARCHY.GET_MGR_NAME_FNC(hr.HRCHY_DTL_CURR_ROW_VAL) MGR_NAME,
                CCN_HIERARCHY.GET_TYPE_FNC(hr.HRCHY_DTL_CURR_ROW_VAL) TYPE,
                CCN_HIERARCHY.GET_CATEGORY_FNC(hr.HRCHY_DTL_CURR_ROW_VAL) CATEGORY
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				)  AR
				WHERE HRCHY_DTL_LEVEL = IN_LEVEL
				AND HRCHY_DTL_PREV_LVL_VAL = IN_COMPOSITE_KEY
				--CONNECT BY  PRIOR AR.CH =  AR.PA
        		ORDER BY AR.lev;

  
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_LAST_LVL',V_CONTEXT);    
        			

		--Error handling to be put  
	END RETURN_HIERARCHY_LAST_LVL;	

PROCEDURE RETURN_HIERARCHY_DETAIL_CC_LVL (	
/**********************************************************
	RETURN_HIERARCHY_DETAIL_CC_LVL

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail lowest level table based on header name, current value , t


created : 02/20/2012 kdp CCN Project....Phase 1.1
**********************************************************/

				IN_HEADER_NAME 				IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    ,	IN_LEVEL				IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_COST_CENTER_CODE		IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
			    ,   OUT_HIERARCHY_REF_CUR 	IN OUT REF_CURSOR
			   )



        IS                 

        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN

    V_CONTEXT := 'START';

    V_CONTEXT := 'Traverse Down Query';  

	OPEN  OUT_HIERARCHY_REF_CUR FOR
		SELECT DISTINCT
        AR.LEV,
        AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
            		--hr.HRCHY_DTL_DESC,
                COST_CENTER_DESCRIPTION(hr.HRCHY_DTL_CURR_ROW_VAL) HRCHY_DTL_DESC,
            		hr.HRCHY_DTL_CURR_ROW_VAL,
            		--xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                COST_CENTER_STATEMENT_TYPE(hr.UPPER_LVL_VER_VALUE,hr.HRCHY_DTL_CURR_ROW_VAL) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				)  AR
				WHERE HRCHY_DTL_LEVEL = IN_LEVEL
				AND HRCHY_DTL_CURR_ROW_VAL = IN_COST_CENTER_CODE
				--CONNECT BY  PRIOR AR.CH =  AR.PA
        		ORDER BY AR.lev;


EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;

	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 


	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_DETAIL_CC_LVL',V_CONTEXT);    


		--Error handling to be put  
	END RETURN_HIERARCHY_DETAIL_CC_LVL;
	
PROCEDURE RETURN_HIERARCHY_HIST (
/**********************************************************
	RETURN_HIERARCHY_HIST

	This procedure will return a ref cursor with data from 
	from the hierarchy_detail_hst table based on header name, current value , traverse ( UP or DOWN DEFAULT is UP), level
	and structure as of history date 
	ex. CCN_HIERARCHY.RETURN_HIERARCHY('DAD Structure','703252','DOWN',TO_DATE(03/24/2011','MM/DD/YYYY'),OUT_DEFINED_REF_CURSOR)

created : 03/22/2012 OD CCN Project....
**********************************************************/
				IN_HEADER_NAME 	IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
			    ,   IN_CURR_ROW_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
			    ,	IN_LEVEL	IN HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
			    ,	IN_TRAVERSE	IN VARCHAR2 DEFAULT 'UP'
			    ,	IN_HIST_DATE	IN HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE DEFAULT NULL
			    ,   OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
			   )

        IS                 
        
        EFF_DATE DATE;
        SQ INTEGER;
        SE VARCHAR2(100);
        V_CONTEXT VARCHAR2(100);

	BEGIN
	
/* Selecting the Maximum date that is less than or equal to the effective date passed in So as to get the structure as of that date */
		   
       V_CONTEXT := 'Select maximum date that is less than or equal to the effective date passed';
       
			SELECT MAX(HRCHY_DTL_EFF_DATE) INTO EFF_DATE
			  FROM HIERARCHY_DETAIL_HST
			 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME 
			   AND HRCHY_DTL_EFF_DATE <= IN_HIST_DATE;	
	
	
		IF IN_TRAVERSE = 'UP' THEN

 --Concatenation is needed because We need level and value to get the hierarchy as sometimes the value accross levels could be the same
 
      V_CONTEXT := 'Traverse Up History Query';
 
 			OPEN  OUT_HIERARCHY_REF_CUR FOR
                               SELECT DISTINCT
                                AR.LEV,
                                AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                                AR.HRCHY_DTL_CURR_ROW_VAL,
                                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
                                hr.HRCHY_DTL_DESC,
                                hr.HRCHY_DTL_CURR_ROW_VAL,
                                --xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                                COST_CENTER_STATEMENT_TYPE(hr.UPPER_LVL_VER_VALUE,hr.HRCHY_DTL_CURR_ROW_VAL) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL_HST hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
                                   AND HRCHY_DTL_EFF_DATE = NVL(EFF_DATE, HRCHY_DTL_EFF_DATE)
                                   AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.PA =  AR.CH
        		ORDER BY AR.lev; 

        			
        	ELSE
          
          V_CONTEXT := 'Traverse Down History Query';
        	
        		OPEN  OUT_HIERARCHY_REF_CUR FOR
                                SELECT DISTINCT
                                AR.LEV,
                                AR.HRCHY_HDR_NAME,
				AR.HRCHY_DTL_LEVEL,
				AR.HRCHY_DTL_PREV_LVL_VAL,
				AR.HRCHY_DTL_CURR_LVL_VAL,
				AR.HRCHY_DTL_NEXT_LVL_VAL,
				AR.HRCHY_DTL_EFF_DATE,
				AR.HRCHY_DTL_EXP_DATE,
				AR.HRCHY_DTL_DESC,
                                AR.HRCHY_DTL_CURR_ROW_VAL,
                                AR.UPPER_LVL_VER_VALUE
				FROM
				(
				SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
						(HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
						(HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
     				hr.HRCHY_HDR_NAME,
    				hr.HRCHY_DTL_LEVEL,
    				hr.HRCHY_DTL_PREV_LVL_VAL,
    				hr.HRCHY_DTL_CURR_LVL_VAL,
      				hr.HRCHY_DTL_NEXT_LVL_VAL,
        			hr.HRCHY_DTL_EFF_DATE,
          			hr.HRCHY_DTL_EXP_DATE,
                                hr.HRCHY_DTL_DESC,
                                hr.HRCHY_DTL_CURR_ROW_VAL,
                                --xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                                COST_CENTER_STATEMENT_TYPE(hr.UPPER_LVL_VER_VALUE,hr.HRCHY_DTL_CURR_ROW_VAL) UPPER_LVL_VER_VALUE
				  FROM HIERARCHY_DETAIL_HST hr
				 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
				   AND HRCHY_DTL_EFF_DATE = EFF_DATE
           AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL
				)  AR
				START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
				CONNECT BY  PRIOR AR.CH =  AR.PA
        		ORDER BY AR.lev;

		END IF;
    
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_HIST',V_CONTEXT);    
        			    

END RETURN_HIERARCHY_HIST;

PROCEDURE RETURN_HIERARCHY_UP (
/**********************************************************
	RETURN_DAD

	This procedure will return a ref cursor with DAD data from 
	from the hierarchy_detail table based on just the 
  header name, cost center or last level value

created : 07/22/2012 OD CCN Project....
**********************************************************/
						IN_HEADER_NAME 	IN HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
					    , 	IN_ROW_VAL	IN HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
					    ,   OUT_HIERARCHY_REF_CUR IN OUT REF_CURSOR
					   )
             
IS

SQ INTEGER;
SE VARCHAR2(100);
V_CONTEXT VARCHAR2(100);
V_FULL_VAL HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
V_LVL HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;


BEGIN

V_CONTEXT := 'Begin Selecting DAD value';

SELECT HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_ROW_VAL, HRCHY_DTL_LEVEL INTO V_FULL_VAL,V_LVL
  FROM HIERARCHY_DETAIL 
 WHERE HRCHY_HDR_NAME =  IN_HEADER_NAME
   AND HRCHY_DTL_CURR_ROW_VAL = IN_ROW_VAL;

V_CONTEXT := 'Call hierarchy package traverse UP to get DAD';

RETURN_HIERARCHY(IN_HEADER_NAME,V_FULL_VAL,V_LVL,'UP',OUT_HIERARCHY_REF_CUR);

EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_UP',V_CONTEXT);    
        			    

END RETURN_HIERARCHY_UP;

PROCEDURE HIERARCHY_PICKLIST(	
/**********************************************************
	HIERARCHY_PICKLIST

	This procedure will return data in ref_cursor 
        from HIERARCHY_DETAIL depending on the input params
        Ex - If all the Areas need to be returned for a Given 
        Division then the XML from the UI will have Hierarchy Name
        and Hierarchy Detail level '2' and current division ='04'
        
<HIERARCHY_DETAIL>
  <row_data>
      <USER_ID>xxxxxx</USER_ID> 
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>35</HRCHY_LEVEL3>
      <HRCHY_LEVEL4>708113</HRCHY_LEVEL4>
  </row_data>
</HIERARCHY_DETAIL>

created : 02/13/2013 SH CCN Project....
modified: 09/25/2014 jxc517 CCN Project.....passing user_id to restrict users with only territory access
**********************************************************/
  in_XML                VARCHAR2,--XMLTYPE,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR)
 
IS
    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_XML XMLTYPE := sys.XMLTYPE(in_XML);
    
    V_CONTEXT           VARCHAR2(100);
    V_COUNT             INTEGER := 1;
    V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_DTL_LEVEL   HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
    V_CURR_VAL          HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
    V_LEVEL_RESTRICTED_VAL VARCHAR2(100);
    V_USER_ID           VARCHAR2(10);
  
   BEGIN

         IF (v_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
                         
             V_CONTEXT := 'Extracting HRCHY_DTL_LEVEL';
             V_HRCHY_DTL_LEVEL := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
             
             V_CONTEXT := 'Extracting HRCHY LEVELS';
             /* for each level, extract elements to form the composite key */
              WHILE V_COUNT < V_HRCHY_DTL_LEVEL LOOP
                 V_CURR_VAL := V_CURR_VAL || v_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || V_COUNT ||'/text()').GETSTRINGVAL();
                 V_COUNT := V_COUNT + 1;
              END LOOP;
         END IF;
               
        V_HRCHY_HDR_NAME  := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
        V_HRCHY_DTL_LEVEL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_DTL_LEVEL);
        V_CURR_VAL        := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_CURR_VAL);

        BEGIN
            IF V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data/USER_ID/text()') = 1 THEN
                V_USER_ID   := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/USER_ID/text()').GETSTRINGVAL();
            END IF;

            SELECT x.value
              INTO V_LEVEL_RESTRICTED_VAL
              FROM ROLE_DETAILS RD,
                   SECURITY_MATRIX SM,
                   XMLTABLE ('/USER_RULES_DESCRIPTION/HIERARCHY_WINDOW/LEVEL_RESTRICTED_VAL/*'
                             PASSING RD.USER_RULES_DESCRIPTION
                             COLUMNS Value VARCHAR2(30) PATH 'text()') x
             WHERE SM.USER_ID   = NVL(V_USER_ID,'XXXXXX')
               AND SM.ROLE_CODE = RD.ROLE_CODE;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        V_CONTEXT := 'Selecting for Ref Cursor';
        OPEN OUT_HIERARCHY_REF_CUR FOR
          SELECT DISTINCT HRCHY_DTL_CURR_ROW_VAL, HRCHY_DTL_DESC
          --, hrchy_dtl_eff_date
          --, HRCHY_DTL_EXP_DATE
          --, xmltype.getStringVal(UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
            FROM hierarchy_detail
         WHERE hrchy_hdr_name = upper(v_hrchy_hdr_name)
           AND hrchy_dtl_level = v_hrchy_dtl_level
           AND hrchy_dtl_prev_lvl_val = decode( v_hrchy_dtl_level, 1, hrchy_dtl_prev_lvl_val, v_curr_val)
           AND (hrchy_dtl_level <> '6' OR 
                (hrchy_dtl_level = '6' AND REGEXP_LIKE(SUBSTR(HRCHY_DTL_CURR_LVL_VAL,11,2),NVL(V_LEVEL_RESTRICTED_VAL,'*'))))
           AND HRCHY_DTL_EXP_DATE IS NULL
         ORDER BY HRCHY_DTL_CURR_ROW_VAL;
      
   EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_PICKLIST',V_CONTEXT);   
          
END HIERARCHY_PICKLIST;

PROCEDURE HIERARCHY_STMNT_TYPE_PICKLIST(	
/**********************************************************
	HIERARCHY_STMNT_TYPE_PICKLIST

	This procedure will return data in ref_cursor 
        for statement type from HIERARCHY_DETAIL depending 
        on the input params
        Ex - If all the Areas need to be returned for a Given 
        Division then the XML from the UI will have Hierarchy Name
        and Hierarchy Detail level '2' and current division ='04'
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2>
      <HRCHY_LEVEL3>35</HRCHY_LEVEL3>
      <HRCHY_LEVEL4>708113</HRCHY_LEVEL4>
  </row_data>
</HIERARCHY_DETAIL>

created : 06/20/2013 SH CCN Project....
**********************************************************/
  in_XML                VARCHAR2,--XMLTYPE,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR)
 
IS
    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_XML XMLTYPE := sys.XMLTYPE(in_XML);
    
    V_CONTEXT           VARCHAR2(100);
    V_COUNT             INTEGER := 1;
    V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_DTL_LEVEL   HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
    V_CURR_VAL          HIERARCHY_DETAIL.HRCHY_DTL_CURR_LVL_VAL%TYPE;
  
   BEGIN
         IF (v_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();


                        
             V_CONTEXT := 'Extracting HRCHY_DTL_LEVEL';
             V_HRCHY_DTL_LEVEL := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();


                         
             V_CONTEXT := 'Extracting HRCHY LEVELS';
             /* for each level, extract elements to form the composite key */
              WHILE V_COUNT = V_HRCHY_DTL_LEVEL LOOP
                    V_CURR_VAL := V_CURR_VAL || v_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || V_COUNT ||'/text()').GETSTRINGVAL();
                    V_COUNT := V_COUNT + 1;
              END LOOP;
         END IF;


                 
        V_HRCHY_HDR_NAME  := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
        V_HRCHY_DTL_LEVEL := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_DTL_LEVEL);
        V_CURR_VAL        := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_CURR_VAL);
        
        OPEN OUT_HIERARCHY_REF_CUR FOR
          SELECT XMLTYPE.getStringVal(UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
            FROM HIERARCHY_DETAIL 
         WHERE UPPER(HRCHY_HDR_NAME) = UPPER(V_HRCHY_HDR_NAME)
           AND HRCHY_DTL_LEVEL = V_HRCHY_DTL_LEVEL
           AND HRCHY_DTL_CURR_LVL_VAL = V_CURR_VAL;
      
   EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_PICKLIST',V_CONTEXT);   
          
END HIERARCHY_STMNT_TYPE_PICKLIST;

PROCEDURE HIERARCHY_HDR_DESC_PICKLIST(	
/**********************************************************
	HIERARCHY_HDR_DESC_PICKLIST

	This procedure will return the data in ref cursor
        from HIERARCHY_HEADER and HIERARCHY_DESCRIPTION
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
  </row_data>
</HIERARCHY_DETAIL>
created : 02/13/2013 SH CCN Project....
**********************************************************/
  in_XML                VARCHAR2,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
  )
 
IS
    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_XML XMLTYPE := sys.XMLTYPE(in_XML);
    
    V_CONTEXT           VARCHAR2(100);
    V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
  
   BEGIN
        IF (V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
            V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
            V_HRCHY_HDR_NAME := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();

            
        END IF;
        
        V_HRCHY_HDR_NAME  := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
        
          OPEN OUT_HIERARCHY_REF_CUR FOR
        SELECT DISTINCT HH.HRCHY_HDR_LEVELS,HD.HRCHY_HDR_LVL_DESC, HD.HRCHY_HDR_LVL_NBR, HD.LVL_VALUE_SIZE
          FROM hierarchy_header hh, hierarchy_description hd
         WHERE UPPER(HH.HRCHY_HDR_NAME) = UPPER(HD.HRCHY_HDR_NAME)
           AND UPPER(HH.HRCHY_HDR_NAME) = UPPER(V_HRCHY_HDR_NAME)
           ORDER BY HD.HRCHY_HDR_LVL_NBR ASC;
         
  EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HDR_DESC_PICKLIST',V_CONTEXT);  
END HIERARCHY_HDR_DESC_PICKLIST;
    
PROCEDURE HIERARCHY_HEADER_INSERT(
/**********************************************************
	HIERARCHY_HEADER_INSERT

	This procedure will insert into the table HIERARCHY_HEADER
        
<HIERARCHY_HEADER>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LEVELS>04</HRCHY_HDR_LEVELS> 
      <HRCHY_HDR_DESC>Div Area Dist Structure</HRCHY_HDR_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
  </row_data>
</HIERARCHY_HEADER>

created : 02/13/2013 SH CCN Project....
modified: 02/24/2014 jxc517 CCN Project. . . 
**********************************************************/
    in_XML                VARCHAR2)
IS

    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_xml XMLTYPE := sys.XMLTYPE(in_xml);
    V_XML_FRAG           CLOB;
     
    V_CONTEXT               VARCHAR2(100);
    V_HRCHY_HDR_NAME        HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_HDR_LEVELS      HIERARCHY_HEADER.HRCHY_HDR_LEVELS%TYPE;
    V_HRCHY_HDR_DESC        HIERARCHY_HEADER.HRCHY_HDR_DESC%TYPE;
    V_ALL_APPLICABLE_ATTRIBUTES   HIERARCHY_HEADER.ALL_APPLICABLE_ATTRIBUTES%TYPE;
    v_ErrText               VARCHAR2(500);
    v_code                  NUMBER;
  
   BEGIN
         IF (v_XML.EXISTSNODE('/HIERARCHY_HEADER/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_HEADER/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();


          
             V_CONTEXT := 'Extracting HRCHY_HDR_LEVELS';
             V_HRCHY_HDR_LEVELS := v_XML.EXTRACT('/HIERARCHY_HEADER/row_data/HRCHY_HDR_LEVELS/text()').GETSTRINGVAL();


            
             V_CONTEXT := 'Extracting HRCHY_HDR_DESC';
             V_HRCHY_HDR_DESC := v_XML.EXTRACT('/HIERARCHY_HEADER/row_data/HRCHY_HDR_DESC/text()').GETSTRINGVAL();

             V_CONTEXT := 'Extracting ALL_APPLICABLE_ATTRIBUTES';
             IF (v_XML.EXISTSNODE('/HIERARCHY_HEADER/row_data/attributes') = 1) THEN
                 V_XML_FRAG := v_XML.extract('/HIERARCHY_HEADER/row_data/attributes').GETCLOBVAL();
                 V_ALL_APPLICABLE_ATTRIBUTES := sys.XMLTYPE.createXML(V_XML_FRAG);
             END IF;
            
             V_HRCHY_HDR_NAME   := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
             V_HRCHY_HDR_LEVELS := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_LEVELS);
             V_HRCHY_HDR_DESC   := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_DESC);

             V_CONTEXT := 'Inserting into HIERARCHY_HEADER';
             INSERT INTO HIERARCHY_HEADER  ( HRCHY_HDR_NAME,
                                             HRCHY_HDR_LEVELS,
                                             HRCHY_HDR_DESC,
                                             ALL_APPLICABLE_ATTRIBUTES
                                           )
                                     VALUES( UPPER(V_HRCHY_HDR_NAME),
                                             v_hrchy_hdr_levels,
                                             V_HRCHY_HDR_DESC,
                                             V_ALL_APPLICABLE_ATTRIBUTES
                                           );
         END IF;
  
  EXCEPTION 
    WHEN OTHERS THEN
            SQ := SQLCODE;
            SE := SQLERRM;
            
            V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
            ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HEADER_INSERT',V_CONTEXT); 
          
END HIERARCHY_HEADER_INSERT;

PROCEDURE HIERARCHY_HEADER_ATTR_UPDATE(
/**********************************************************
	HIERARCHY_HEADER_ATTR_UPDATE

	This procedure will update the attributes in the table HIERARCHY_HEADER 
        
<HIERARCHY_HEADER>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LEVELS>04</HRCHY_HDR_LEVELS> 
      <HRCHY_HDR_DESC>Div Area Dist Structure</HRCHY_HDR_DESC> 
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
  </row_data>
</HIERARCHY_HEADER>

created : 02/24/2014 jxc517 CCN Project. . . 
**********************************************************/
    in_XML                CLOB)
IS

    SQ INTEGER;
    SE VARCHAR2(100);
    
    v_xml XMLTYPE := sys.XMLTYPE(in_xml);
    V_XML_FRAG           CLOB;
     
    V_CONTEXT               VARCHAR2(100);
    V_HRCHY_HDR_NAME        HIERARCHY_HEADER.HRCHY_HDR_NAME%TYPE;
    V_HRCHY_HDR_LEVELS      HIERARCHY_HEADER.HRCHY_HDR_LEVELS%TYPE;
    V_HRCHY_HDR_DESC        HIERARCHY_HEADER.HRCHY_HDR_DESC%TYPE;
    V_ALL_APPLICABLE_ATTRIBUTES   HIERARCHY_HEADER.ALL_APPLICABLE_ATTRIBUTES%TYPE;
    v_ErrText               VARCHAR2(500);
    v_code                  NUMBER;
  
   BEGIN
         IF (v_XML.EXISTSNODE('/HIERARCHY_HEADER/row_data') = 1) THEN
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_HEADER/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
          
             V_CONTEXT := 'Extracting HRCHY_HDR_LEVELS';
             V_HRCHY_HDR_LEVELS := v_XML.EXTRACT('/HIERARCHY_HEADER/row_data/HRCHY_HDR_LEVELS/text()').GETSTRINGVAL();
            
             V_CONTEXT := 'Extracting HRCHY_HDR_DESC';
             V_HRCHY_HDR_DESC := v_XML.EXTRACT('/HIERARCHY_HEADER/row_data/HRCHY_HDR_DESC/text()').GETSTRINGVAL();

             V_CONTEXT := 'Extracting ALL_APPLICABLE_ATTRIBUTES';
             IF (v_XML.EXISTSNODE('/HIERARCHY_HEADER/row_data/attributes') = 1) THEN
                 V_XML_FRAG := v_XML.extract('/HIERARCHY_HEADER/row_data/attributes').GETCLOBVAL();
                 V_ALL_APPLICABLE_ATTRIBUTES := sys.XMLTYPE.createXML(V_XML_FRAG);
             END IF;
            
             V_HRCHY_HDR_NAME   := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
             V_HRCHY_HDR_LEVELS := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_LEVELS);
             V_HRCHY_HDR_DESC   := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_DESC);

             V_CONTEXT := 'Updating HIERARCHY_HEADER';
             UPDATE HIERARCHY_HEADER 
                SET HRCHY_HDR_LEVELS          = v_hrchy_hdr_levels,
                    HRCHY_HDR_DESC            = V_HRCHY_HDR_DESC,
                    ALL_APPLICABLE_ATTRIBUTES = V_ALL_APPLICABLE_ATTRIBUTES
              WHERE HRCHY_HDR_NAME       = UPPER(V_HRCHY_HDR_NAME);
         END IF;

  EXCEPTION 
      WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HEADER_ATTR_UPDATE',V_CONTEXT); 
          
END HIERARCHY_HEADER_ATTR_UPDATE;

PROCEDURE HIERARCHY_DESCRIPTION_INSERT(
/**********************************************************
	HIERARCHY_DESCRIPTION_INSERT

	This procedure will insert into the table HIERARCHY_DESCRIPTION 
        
<HIERARCHY_DESCRIPTION>
  <row_data>
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>03</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>AREA</HRCHY_HDR_LVL_DESC>
      <HRCHY_GLOBAL_LVL_NBR>9</HRCHY_GLOBAL_LVL_NBR>
      <LVL_VALUE_SIZE>2</LVL_VALUE_SIZE>
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  	<HRCHY_LEVELS>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>04</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>DIST</HRCHY_HDR_LVL_DESC> 
      <HRCHY_GLOBAL_LVL_NBR>9</HRCHY_GLOBAL_LVL_NBR>
      <LVL_VALUE_SIZE>2</LVL_VALUE_SIZE>
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  </row_data>
</HIERARCHY_DESCRIPTION>

created : 02/13/2013 SH CCN Project....
modified : 02/03/2014 JXC517 CCN Project....
**********************************************************/
    in_XML                CLOB)
IS

    SQ INTEGER;
    SE VARCHAR2(100);
    invalid_order_wrn EXCEPTION;
    invalid_last_lvl EXCEPTION;
    
    V_XML XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_XML_FRAG           CLOB;
    v_code               NUMBER;
    
    V_COUNT 		    INTEGER := 1;
    V_CONTEXT               varchar2(100);
    V_HRCHY_HDR_NAME        HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%type;
    V_HRCHY_HDR_LVL_NBR     HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%type;
    V_HRCHY_HDR_LVL_DESC    HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%type;
    V_UPPER_LVL_VER_VALUE   HIERARCHY_DESCRIPTION.UPPER_LVL_VER_VALUE%TYPE;
    V_HRCHY_GLOBAL_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_GLOBAL_LVL_NBR%TYPE;
    V_LVL_VALUE_SIZE        HIERARCHY_DESCRIPTION.LVL_VALUE_SIZE%TYPE;
   
   BEGIN
        WHILE v_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']') = 1 LOOP
         
             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
                         
             V_CONTEXT := 'Extracting HRCHY_HDR_LVL_NBR';
             V_HRCHY_HDR_LVL_NBR := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_NBR/text()').GETSTRINGVAL();
                         
             V_CONTEXT := 'Extracting HRCHY_HDR_LVL_DESC';
             V_HRCHY_HDR_LVL_DESC := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_DESC/text()').GETSTRINGVAL();
                          
             V_CONTEXT := 'Extracting HRCHY_GLOBAL_LVL_NBR';
             V_HRCHY_GLOBAL_LVL_NBR := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_GLOBAL_LVL_NBR/text()').GETSTRINGVAL();

             V_CONTEXT := 'Extracting LVL_VALUE_SIZE';
             V_LVL_VALUE_SIZE := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/LVL_VALUE_SIZE/text()').GETSTRINGVAL();

             --check the order of levels entered
             BEGIN
                ccn_hier_business_rules_pkg.Header_Lvl_Validation_sp(in_XML);
                
             EXCEPTION 
                WHEN OTHERS THEN
                        RAISE invalid_order_wrn;
             END;
             
             V_CONTEXT := 'Extracting UPPER_LVL_VER_VALUE';
             IF (v_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/attributes') = 1) THEN
                 V_XML_FRAG := v_XML.extract('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/attributes').GETCLOBVAL();
                 V_UPPER_LVL_VER_VALUE := sys.XMLTYPE.createXML(V_XML_FRAG);
             END IF;
             
             V_HRCHY_HDR_NAME      := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
             V_HRCHY_HDR_LVL_NBR   := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_LVL_NBR);
             V_HRCHY_HDR_LVL_DESC  := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_LVL_DESC);
             
             V_CONTEXT := 'Inserting into HIERARCHY_DESCRIPTION';
             INSERT INTO HIERARCHY_DESCRIPTION ( HRCHY_HDR_NAME,
                                                 HRCHY_HDR_LVL_NBR,
                                                 HRCHY_HDR_LVL_DESC,
                                                 UPPER_LVL_VER_VALUE,
                                                 HRCHY_GLOBAL_LVL_NBR,
                                                 LVL_VALUE_SIZE
                                                )
                                          VALUES( UPPER(V_HRCHY_HDR_NAME),
                                                  V_HRCHY_HDR_LVL_NBR,
                                                  V_HRCHY_HDR_LVL_DESC,
                                                  V_UPPER_LVL_VER_VALUE,
                                                  V_HRCHY_GLOBAL_LVL_NBR,
                                                  V_LVL_VALUE_SIZE
                                                 );
             --Below call will insert the attributes into CCN_ADDITIONAL_AUDIT_FIELDS table
             --These records will be used by the AUDIT BATCH job to build the file acccordingly
             CCN_AUDIT_PKG.AUDIT_FIELDS_IU(UPPER(V_HRCHY_HDR_NAME), V_UPPER_LVL_VER_VALUE);
          V_COUNT := V_COUNT + 1;
 
     END LOOP;

       --If the last level is not cost center an exception is raised
       IF V_HRCHY_GLOBAL_LVL_NBR <> '9'
       THEN
           RAISE invalid_last_lvl;
      END IF;
     
  EXCEPTION 
      WHEN invalid_last_lvl THEN
           v_code := errnums.en_invalid_last_lvl;
           errpkg.raise_err(v_code, 'The Last Level for the Hierarchy ' || V_HRCHY_HDR_NAME || ' should be Cost Center');
      WHEN invalid_order_wrn THEN
           v_code := errnums.en_invalid_order_wrn;
           errpkg.raise_err(v_code, 'The Order of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is incorrect');
             
      WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DESCRIPTION_INSERT',V_CONTEXT); 
          
END HIERARCHY_DESCRIPTION_INSERT;

PROCEDURE HIERARCHY_DSCRPTN_ATTR_UPDATE(
/**********************************************************
	HIERARCHY_DSCRPTN_ATTR_UPDATE

	This procedure will update the attributes in the table HIERARCHY_DESCRIPTION 
        
<HIERARCHY_DESCRIPTION>
  <row_data>
    <HRCHY_LEVELS>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>03</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>AREA</HRCHY_HDR_LVL_DESC>
      <HRCHY_GLOBAL_LVL_NBR>9</HRCHY_GLOBAL_LVL_NBR>
      <LVL_VALUE_SIZE>2</LVL_VALUE_SIZE>
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  	<HRCHY_LEVELS>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_HDR_LVL_NBR>04</HRCHY_HDR_LVL_NBR> 
      <HRCHY_HDR_LVL_DESC>DIST</HRCHY_HDR_LVL_DESC> 
      <HRCHY_GLOBAL_LVL_NBR>9</HRCHY_GLOBAL_LVL_NBR>
      <LVL_VALUE_SIZE>2</LVL_VALUE_SIZE>
      <attributes>
	   <upper_lvl_ver_desc> 
	      <Name>statement_type</Name>
	      <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	      <Name>ManagerName</Name>
              <Description>CC Mgr Name</Description>
	   </upper_lvl_ver_desc>
           <upper_lvl_ver_desc> 
	       <Name>state_code</Name>
	       <Description>pkListValue</Description>
	   </upper_lvl_ver_desc>
      </attributes>
    </HRCHY_LEVELS> 
  </row_data>
</HIERARCHY_DESCRIPTION>

created : 02/03/2014 JXC517 CCN Project....
**********************************************************/
    in_XML                CLOB)
IS

    SQ INTEGER;
    SE VARCHAR2(100);
    invalid_order_wrn EXCEPTION;
    
    V_XML XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_XML_FRAG           CLOB;
    v_code               NUMBER;
    
    V_COUNT 		    INTEGER := 1;
    V_CONTEXT               varchar2(100);
    V_HRCHY_HDR_NAME        HIERARCHY_DESCRIPTION.HRCHY_HDR_NAME%type;
    V_HRCHY_HDR_LVL_NBR     HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%type;
    V_HRCHY_HDR_LVL_DESC    HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_DESC%type;
    V_UPPER_LVL_VER_VALUE   HIERARCHY_DESCRIPTION.UPPER_LVL_VER_VALUE%TYPE;
    V_HRCHY_GLOBAL_LVL_NBR  HIERARCHY_DESCRIPTION.HRCHY_GLOBAL_LVL_NBR%TYPE;
    V_LVL_VALUE_SIZE        HIERARCHY_DESCRIPTION.LVL_VALUE_SIZE%TYPE;
  
   BEGIN
         WHILE v_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']') = 1 LOOP

             V_CONTEXT := 'Extracting HRCHY_HDR_NAME';
             V_HRCHY_HDR_NAME := v_XML.extract('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
                         
             V_CONTEXT := 'Extracting HRCHY_HDR_LVL_NBR';
             V_HRCHY_HDR_LVL_NBR := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_NBR/text()').GETSTRINGVAL();
                         
             V_CONTEXT := 'Extracting HRCHY_HDR_LVL_DESC';
             V_HRCHY_HDR_LVL_DESC := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_HDR_LVL_DESC/text()').GETSTRINGVAL();
                          
             V_CONTEXT := 'Extracting HRCHY_GLOBAL_LVL_NBR';
             V_HRCHY_GLOBAL_LVL_NBR := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/HRCHY_GLOBAL_LVL_NBR/text()').GETSTRINGVAL();

             V_CONTEXT := 'Extracting LVL_VALUE_SIZE';
             V_LVL_VALUE_SIZE := v_XML.EXTRACT('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/LVL_VALUE_SIZE/text()').GETSTRINGVAL();

             --check the order of levels entered
             BEGIN
                ccn_hier_business_rules_pkg.Header_Lvl_Validation_sp(in_XML);
                
             EXCEPTION 
                WHEN OTHERS THEN
                        RAISE invalid_order_wrn;
             END;

             V_CONTEXT := 'Extracting UPPER_LVL_VER_VALUE';
             IF (v_XML.EXISTSNODE('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/attributes') = 1) THEN
                 V_XML_FRAG := v_XML.extract('/HIERARCHY_DESCRIPTION/row_data/HRCHY_LEVELS' || '[' || V_COUNT || ']' || '/attributes').GETCLOBVAL();
                 V_UPPER_LVL_VER_VALUE := sys.XMLTYPE.createXML(V_XML_FRAG);
             END IF;

             V_HRCHY_HDR_NAME      := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_NAME);
             V_HRCHY_HDR_LVL_NBR   := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_LVL_NBR);
             V_HRCHY_HDR_LVL_DESC  := COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_HRCHY_HDR_LVL_DESC);
             
             V_CONTEXT := 'Updating HIERARCHY_DESCRIPTION';
             UPDATE HIERARCHY_DESCRIPTION 
                SET HRCHY_HDR_LVL_DESC   = V_HRCHY_HDR_LVL_DESC,
                    UPPER_LVL_VER_VALUE  = V_UPPER_LVL_VER_VALUE,
                    HRCHY_GLOBAL_LVL_NBR = V_HRCHY_GLOBAL_LVL_NBR--,LVL_VALUE_SIZE       = V_LVL_VALUE_SIZE
              WHERE HRCHY_HDR_NAME       = UPPER(V_HRCHY_HDR_NAME)
                AND HRCHY_HDR_LVL_NBR    = V_HRCHY_HDR_LVL_NBR;

             --Below call will insert the attributes into CCN_ADDITIONAL_AUDIT_FIELDS table
             --These records will be used by the AUDIT BATCH job to build the file acccordingly
             CCN_AUDIT_PKG.AUDIT_FIELDS_IU(UPPER(V_HRCHY_HDR_NAME),V_UPPER_LVL_VER_VALUE);

          V_COUNT := V_COUNT + 1;
          
         END LOOP;
  
  EXCEPTION 
      WHEN invalid_order_wrn THEN
           v_code := errnums.en_invalid_order_wrn;
           errpkg.raise_err(v_code, 'The Order of levels for the Hierarchy ' || V_HRCHY_HDR_NAME || ' is incorrect');
             
      WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DSCRPTN_ATTR_UPDATE',V_CONTEXT);
          
END HIERARCHY_DSCRPTN_ATTR_UPDATE;

FUNCTION CURRENT_LVL_EXISTS (
/***********************************************************
      CURRENT_LVL_EXISTS 
      This Procedure will check for the current record 
      before the insert for Duplicates

      IN_FLAG          'H' for History table and NULL for Detail table
      
Created : 07/25/2013 CCN Project
************************************************************/
IN_FLAG                  IN  VARCHAR2,
IN_HIERARCHY_DETAIL_ROW  IN  HIERARCHY_DETAIL%ROWTYPE)
RETURN VARCHAR2
IS
  V_RETURN_VALUE    VARCHAR2(1) := 'N';
  V_COUNT           NUMBER;
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      SELECT COUNT(*) INTO V_COUNT
        FROM HIERARCHY_DETAIL_HST
       WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL;
   ELSE
      SELECT COUNT(*) INTO V_COUNT
        FROM HIERARCHY_DETAIL
       WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL;
   END IF;
  
   --This implies that current record already exists in the table
   IF V_COUNT > 0 THEN
      V_RETURN_VALUE := 'Y';
   END IF;
   
   RETURN V_RETURN_VALUE;
END CURRENT_LVL_EXISTS;

PROCEDURE GET_PREVIOUS_LVL(
/***********************************************************
      GET_PREVIOUS_LVL 
      This Procedure get the previous record 

      IN_FLAG          'H' for History table and NULL for Detail table

Created : 07/25/2013 CCN Project
************************************************************/
  IN_FLAG                  IN  VARCHAR2,
  IN_HIERARCHY_DETAIL_ROW  IN  HIERARCHY_DETAIL%ROWTYPE,
  OUT_HIERARCHY_DETAIL_ROW OUT HIERARCHY_DETAIL%ROWTYPE)
IS
  V_COUNT                NUMBER;
  V_HIERARCHY_DETAIL_ROW HIERARCHY_DETAIL%ROWTYPE;
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      BEGIN
         --Check if previous level exists already in History table. If so return that as output
         SELECT * INTO V_HIERARCHY_DETAIL_ROW
           FROM HIERARCHY_DETAIL_HST
          WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
            AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
            AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1')
            AND ROWNUM < 2;
      EXCEPTION
         --This exception is to proceed even if no records found
         WHEN NO_DATA_FOUND THEN
            NULL;
      END;
      --If not return the already existing previous level History record as ouptut
      IF V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL IS NULL THEN
         BEGIN
            SELECT * INTO V_HIERARCHY_DETAIL_ROW
              FROM HIERARCHY_DETAIL_HST
             WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
               AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
               AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1')
               AND ROWNUM < 2;
         EXCEPTION
            --This exception is to proceed even if no records found
            WHEN NO_DATA_FOUND THEN
               NULL;
         END;  
      END IF;
   ELSE
      BEGIN
         --Check if previous level exists already in Detail table. If so return that as output
         SELECT * INTO V_HIERARCHY_DETAIL_ROW
           FROM HIERARCHY_DETAIL
          WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
            AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
            AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1')
            AND ROWNUM < 2;
      EXCEPTION
         --This exception is to proceed even if no records found
         WHEN NO_DATA_FOUND THEN
            NULL;
      END;             
      
      IF V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL IS NULL THEN
         BEGIN
            --If not return the already existing previous level Detail record as ouptut
            SELECT * INTO V_HIERARCHY_DETAIL_ROW
              FROM HIERARCHY_DETAIL
             WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
               AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
               AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1')
               AND ROWNUM < 2;
         EXCEPTION
            --This exception is to proceed even if no records found
            WHEN NO_DATA_FOUND THEN
               NULL;
         END;  
      END IF;
   
   END IF;
   --If the output of this procedure is NULL, meaning previous level doesn't exists at all
   --In that case we should insert previous level also in a recursive style [Handled in INSERT_PROCESS]
   OUT_HIERARCHY_DETAIL_ROW := V_HIERARCHY_DETAIL_ROW;

EXCEPTION
   WHEN OTHERS THEN 
      OUT_HIERARCHY_DETAIL_ROW := NULL;
END GET_PREVIOUS_LVL;

FUNCTION HIERARCHY_DESC_RETURN (
/***********************************************************
      HIERARCHY_DESC_RETURN 
      This Procedure will return the Hierarchy level DESC 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. This is used for the insert into hist for Transfer 
      process.
input param : IN_HIERARCHY_DETAIL_ROW
Created : 03/19/2013 SH CCN Project
revised : 05/02/2013 kdp ccn Header Name to query 
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN VARCHAR2
IS
  V_HRCHY_DTL_DESC HIERARCHY_DETAIL.HRCHY_DTL_DESC%TYPE;
BEGIN
   SELECT DISTINCT HRCHY_DTL_DESC INTO V_HRCHY_DTL_DESC
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
   
   RETURN V_HRCHY_DTL_DESC;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_DESC_RETURN;

FUNCTION HIERARCHY_ATTRIBUTE_RETURN (
/***********************************************************
      HIERARCHY_ATTRIBUTE_RETURN 
      This Procedure will return the Hierarchy level Attributes 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. 

input param : IN_HIERARCHY_DETAIL_ROW
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN XMLTYPE
IS
  V_UPPER_LVL_VER_VALUE HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
BEGIN
   SELECT UPPER_LVL_VER_VALUE INTO V_UPPER_LVL_VER_VALUE
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
      AND ROWNUM < 2;

RETURN V_UPPER_LVL_VER_VALUE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_ATTRIBUTE_RETURN;

FUNCTION HIERARCHY_EFF_DATE_RETURN (
/***********************************************************
      HIERARCHY_EFF_DATE_RETURN 
      This Procedure will return the Hierarchy level Effective Date 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. 

input param : IN_HIERARCHY_DETAIL_ROW
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN DATE
IS
  V_EFF_DATE_VALUE HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE;
BEGIN

   SELECT HRCHY_DTL_EFF_DATE INTO V_EFF_DATE_VALUE
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
      AND ROWNUM < 2;

RETURN V_EFF_DATE_VALUE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      dbms_output.put_line(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL || ' '|| IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' ' ||IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL);
      RETURN NULL;
END HIERARCHY_EFF_DATE_RETURN;

FUNCTION HIERARCHY_EXP_DATE_RETURN (
/***********************************************************
      HIERARCHY_EXP_DATE_RETURN 
      This Procedure will return the Hierarchy level Expiration Date 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. 

input param : IN_HIERARCHY_DETAIL_ROW
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN DATE
IS
  V_EXP_DATE_VALUE HIERARCHY_DETAIL.HRCHY_DTL_EXP_DATE%TYPE;
BEGIN
   SELECT HRCHY_DTL_EXP_DATE INTO V_EXP_DATE_VALUE
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
      AND ROWNUM < 2;

RETURN V_EXP_DATE_VALUE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_EXP_DATE_RETURN;

FUNCTION IS_VALID_HEADER_LVL (
/***********************************************************
      IS_VALID_HEADER_LVL 
      This Procedure will return true if the hierarchy header 
      matches with the hierarchy level passed in the xml. 

input param : IN_HRCHY_HDR_NAME
              IN_HRCHY_DTL_LEVEL
Created : 09/04/2013 CCN Project
************************************************************/
                         IN_HRCHY_HDR_NAME       IN VARCHAR2,
                         IN_HRCHY_DTL_LEVEL      IN VARCHAR2)
RETURN BOOLEAN
IS
  V_HRCHY_HDR_LVL_NBR    HIERARCHY_DESCRIPTION.HRCHY_HDR_LVL_NBR%TYPE;
BEGIN

   SELECT MAX(HRCHY_HDR_LVL_NBR) INTO V_HRCHY_HDR_LVL_NBR
     FROM HIERARCHY_DESCRIPTION
    WHERE UPPER(HRCHY_HDR_NAME) = UPPER(IN_HRCHY_HDR_NAME);

   IF UPPER(V_HRCHY_HDR_LVL_NBR) = UPPER(IN_HRCHY_DTL_LEVEL) THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to return false if no records found
      RETURN FALSE;
END IS_VALID_HEADER_LVL;

FUNCTION IS_STATEMENT_TYPE_VALID (
/***********************************************************
      IS_STATEMENT_TYPE_VALID 
      This Procedure will return true if the statment type
      at level 5 [District] of global hierarchy matches with that of cost centers. 

Created : 09/25/2013 CCN Project
************************************************************/
            IN_COST_CENTER           IN     VARCHAR2,
            IN_FLAG                  IN     VARCHAR2,
            IN_XML                   IN     CLOB,
            IN_HRCHY_HDR_NAME        IN     VARCHAR2,
            IN_HRCHY_DTL_LEVEL       IN     VARCHAR2,
            IN_COUNT                 IN     NUMBER)
RETURN BOOLEAN
IS
   V_ROW_DATA     XMLTYPE := SYS.XMLTYPE(IN_XML); 
   V_RETURN_VALUE              BOOLEAN                          := FALSE;
   V_COST_CENTER_STMNT_TYP     COST_CENTER.STATEMENT_TYPE%TYPE;
   V_UPPER_LVL_VER_VALUE       HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
   V_STATEMENT_TYPE            VARCHAR2(10);
   V_LEVEL                     NUMBER;
   V_PREV_VALUE                VARCHAR2(100);
   V_CURR_VALUE                VARCHAR2(100);
   V_NEXT_VALUE                VARCHAR2(100);
BEGIN

   IF IN_HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' THEN
      --Get the Cost Center Statement Type from COST_CENTER table
      BEGIN
         SELECT STATEMENT_TYPE
           INTO V_COST_CENTER_STMNT_TYP
           FROM COST_CENTER 
          WHERE COST_CENTER_CODE = IN_COST_CENTER;
      EXCEPTION
         WHEN OTHERS THEN
            V_COST_CENTER_STMNT_TYP := NULL;
      END;
      --Get the District Global_Hierarchy level from HIERARCHY_DESCRIPTION table
      BEGIN
         SELECT TO_NUMBER(HRCHY_HDR_LVL_NBR)
           INTO V_LEVEL
           FROM HIERARCHY_DESCRIPTION 
          WHERE HRCHY_HDR_NAME     = IN_HRCHY_HDR_NAME
            AND HRCHY_HDR_LVL_DESC = 'District';
      EXCEPTION
         WHEN OTHERS THEN
            V_LEVEL := NULL;
      END;
      
      --Loop one time more to get the next level value as well
      FOR i IN 1..(V_LEVEL + 1) LOOP
         --Next level value as obtained as below
         CASE WHEN IN_FLAG = 'FROM' THEN
            V_NEXT_VALUE :=  V_NEXT_VALUE || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
         WHEN IN_FLAG = 'TO' THEN
            V_NEXT_VALUE  :=  V_NEXT_VALUE || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
         WHEN IN_FLAG = 'INSERT' THEN
            V_NEXT_VALUE  :=  V_NEXT_VALUE || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
         ELSE
            NULL;
         END CASE;
         --Previous level value will be 2 levels less than next level value
         IF i = V_LEVEL - 1 THEN
            V_PREV_VALUE := V_NEXT_VALUE;
         END IF;
         --Current level value will be 1 level less than next level value
         IF i = V_LEVEL THEN
            V_CURR_VALUE := V_NEXT_VALUE;
         END IF;
      END LOOP;
      --Get the statement type from HIERARCHY_DETAIL table using above obtained values
      BEGIN
         SELECT UPPER_LVL_VER_VALUE
           INTO V_UPPER_LVL_VER_VALUE
           FROM HIERARCHY_DETAIL 
          WHERE HRCHY_DTL_PREV_LVL_VAL = V_PREV_VALUE
            AND HRCHY_DTL_CURR_LVL_VAL = V_CURR_VALUE
            AND HRCHY_DTL_NEXT_LVL_VAL = V_NEXT_VALUE
            AND HRCHY_HDR_NAME         = IN_HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = V_LEVEL;
          CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(V_UPPER_LVL_VER_VALUE,
                                                  'STATEMENT_TYPE',
                                                  V_STATEMENT_TYPE);
      EXCEPTION
         WHEN OTHERS THEN
            V_STATEMENT_TYPE := NULL;
      END;
      --NOTE: Error should not be thrown if the 5th level is a wild card replaced character of '**'
      IF V_STATEMENT_TYPE = V_COST_CENTER_STMNT_TYP OR V_STATEMENT_TYPE = '**' THEN
         V_RETURN_VALUE := TRUE;
      END IF;
   ELSE
      V_RETURN_VALUE := TRUE;
   END IF;
   
   RETURN V_RETURN_VALUE;
   
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to return false if no records found
      RETURN V_RETURN_VALUE;
END IS_STATEMENT_TYPE_VALID;

FUNCTION IS_CURR_STMNNT_TYPE_MATCH_PREV (
/***********************************************************
      IS_STATEMENT_TYPE_VALID 
      This overloaded procedure will compare previous  

Created : 03/06/2014 jxc517 CCN Project
************************************************************/
            IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN BOOLEAN
IS
   V_CURR_LVL_STATEMENT_TYPE   VARCHAR2(10);
   V_PREV_LVL_STATEMENT_TYPE   VARCHAR2(10);
   V_RETURN_VALUE              BOOLEAN                          := FALSE;
   V_UPPER_LVL_VER_VALUE       HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
BEGIN

   IF IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' THEN
      --Get the previous level statement type from HIERARCHY_DETAIL table
      BEGIN
         SELECT UPPER_LVL_VER_VALUE
           INTO V_UPPER_LVL_VER_VALUE
           FROM HIERARCHY_DETAIL 
          WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
            AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1)
            AND ROWNUM < 2;
            
          CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(V_UPPER_LVL_VER_VALUE,
                                                  'STATEMENT_TYPE',
                                                  V_PREV_LVL_STATEMENT_TYPE);
      EXCEPTION
         WHEN OTHERS THEN
            V_PREV_LVL_STATEMENT_TYPE := NULL;
      END;

      --Get the current level statement type from IN_HIERARCHY_DETAIL_ROW parameter itself
      --as it might have been udpated and sent back
      CCN_HIERARCHY.GET_RQSTD_ATTRIBUTE_VALUE(IN_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE,
                                              'STATEMENT_TYPE',
                                              V_CURR_LVL_STATEMENT_TYPE);

      --NOTE: Error should not be thrown if the previous level is a wild card replaced character of '**'
      --For first level we will never have a previous level statement type, so always return TRUE in this scenario
      IF V_PREV_LVL_STATEMENT_TYPE = V_CURR_LVL_STATEMENT_TYPE 
         OR V_PREV_LVL_STATEMENT_TYPE = '**' 
         OR IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = '1' THEN
         V_RETURN_VALUE := TRUE;
      END IF;
   ELSE
      V_RETURN_VALUE := TRUE;
   END IF;
   
   RETURN V_RETURN_VALUE;
   
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to return false if no records found
      RETURN V_RETURN_VALUE;
END IS_CURR_STMNNT_TYPE_MATCH_PREV;

FUNCTION IS_BELOW_LEVEL_EXISTS (
/***********************************************************
      IS_BELOW_LEVEL_EXISTS 
      This procedure will check if lower/below levels are deleted 
      completely or not , before expiring the current record

Created : 03/12/2014 jxc517 CCN Project
************************************************************/
            IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN BOOLEAN
IS
   V_RETURN_VALUE BOOLEAN := TRUE;
   V_COUNT        NUMBER := 0;
BEGIN

   IF IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE IS NOT NULL THEN
      SELECT COUNT(*)
        INTO V_COUNT
        FROM HIERARCHY_DETAIL 
       WHERE HRCHY_DTL_PREV_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + 1);

      IF V_COUNT = 0 THEN
         V_RETURN_VALUE := FALSE;
      END IF;
   END IF;
   
   RETURN V_RETURN_VALUE;
   
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to return false if no records found
      RETURN V_RETURN_VALUE;
END IS_BELOW_LEVEL_EXISTS;

PROCEDURE IS_COMPLETE_COST_CENTER (
/***********************************************************
      IS_COMPLETE_COST_CENTER 
      This Procedure will see if the cost_center is mapped under all 3 hierarchies
      'GLOBAL_HIERARCHY','FACTS_DIVISION','LEGACY_GL_DIVISION'

input param : IN_HRCHY_HDR_NAME
              IN_COST_CENTER_CODE
              OUT_MISSING_HIERARCHY_NAMES
Created : 10/08/2013 CCN Project
************************************************************/
                         IN_HRCHY_HDR_NAME           IN     VARCHAR2,
                         IN_COST_CENTER_CODE         IN VARCHAR2,
                         OUT_MISSING_HIERARCHY_NAMES OUT VARCHAR2)
IS
   V_COUNT NUMBER := 0;
BEGIN

   IF IN_HRCHY_HDR_NAME <> 'GLOBAL_HIERARCHY' THEN
       SELECT COUNT(*) INTO V_COUNT
         FROM HIERARCHY_DETAIL HD,
              HIERARCHY_HEADER HH
        WHERE HD.HRCHY_HDR_NAME         = 'GLOBAL_HIERARCHY'
          AND HH.HRCHY_HDR_NAME         = HD.HRCHY_HDR_NAME 
          AND HH.HRCHY_HDR_LEVELS       = HD.HRCHY_DTL_LEVEL
          AND HD.HRCHY_DTL_CURR_ROW_VAL = IN_COST_CENTER_CODE
          AND EXISTS (SELECT 1
                        FROM COST_CENTER CC
                       WHERE CC.COST_CENTER_CODE = HD.HRCHY_DTL_CURR_ROW_VAL);
      IF V_COUNT = 0 THEN
         IF OUT_MISSING_HIERARCHY_NAMES IS NULL THEN
            OUT_MISSING_HIERARCHY_NAMES :=  'GLOBAL_HIERARCHY';
         ELSE
            OUT_MISSING_HIERARCHY_NAMES :=  OUT_MISSING_HIERARCHY_NAMES || ',GLOBAL_HIERARCHY';
         END IF;
      END IF;
   END IF;
   
   IF IN_HRCHY_HDR_NAME <> 'FACTS_DIVISION' THEN
       SELECT COUNT(*) INTO V_COUNT
         FROM HIERARCHY_DETAIL HD,
              HIERARCHY_HEADER HH
        WHERE HD.HRCHY_HDR_NAME         = 'FACTS_DIVISION'
          AND HH.HRCHY_HDR_NAME         = HD.HRCHY_HDR_NAME 
          AND HH.HRCHY_HDR_LEVELS       = HD.HRCHY_DTL_LEVEL
          AND HD.HRCHY_DTL_CURR_ROW_VAL = IN_COST_CENTER_CODE
          AND EXISTS (SELECT 1
                        FROM COST_CENTER CC
                       WHERE CC.COST_CENTER_CODE = HD.HRCHY_DTL_CURR_ROW_VAL);
      IF V_COUNT = 0 THEN
         IF OUT_MISSING_HIERARCHY_NAMES IS NULL THEN
            OUT_MISSING_HIERARCHY_NAMES :=  'FACTS_DIVISION';
         ELSE
            OUT_MISSING_HIERARCHY_NAMES :=  OUT_MISSING_HIERARCHY_NAMES || ',FACTS_DIVISION';
         END IF;
      END IF;
   END IF;
   
   IF IN_HRCHY_HDR_NAME <> 'LEGACY_GL_DIVISION' THEN
       SELECT COUNT(*) INTO V_COUNT
         FROM HIERARCHY_DETAIL HD,
              HIERARCHY_HEADER HH
        WHERE HD.HRCHY_HDR_NAME         = 'LEGACY_GL_DIVISION'
          AND HH.HRCHY_HDR_NAME         = HD.HRCHY_HDR_NAME 
          AND HH.HRCHY_HDR_LEVELS       = HD.HRCHY_DTL_LEVEL
          AND HD.HRCHY_DTL_CURR_ROW_VAL = IN_COST_CENTER_CODE
          AND EXISTS (SELECT 1
                        FROM COST_CENTER CC
                       WHERE CC.COST_CENTER_CODE = HD.HRCHY_DTL_CURR_ROW_VAL);
      IF V_COUNT = 0 THEN
         IF OUT_MISSING_HIERARCHY_NAMES IS NULL THEN
            OUT_MISSING_HIERARCHY_NAMES :=  'LEGACY_GL_DIVISION';
         ELSE
            OUT_MISSING_HIERARCHY_NAMES :=  OUT_MISSING_HIERARCHY_NAMES || ',LEGACY_GL_DIVISION';
         END IF;
      END IF;
   END IF;


EXCEPTION
   WHEN NO_DATA_FOUND THEN
      NULL;
END IS_COMPLETE_COST_CENTER;

PROCEDURE HIERARCHY_HDR_PICKLIST(	
/**********************************************************
	HIERARCHY_HDR_DESC_PICKLIST

	This procedure will return the data in ref cursor
        from HIERARCHY_HEADER and HIERARCHY_DESCRIPTION
        

created : 04/25/2013 kdp CCN Project....
modified: 08/27/2014 jxc517 CCN Project
**********************************************************/
  IN_USER_ID         IN     VARCHAR2,
  OUT_HIERARCHY_REF_CUR OUT REF_CURSOR
  )
 
IS
	  SQ          INTEGER;
	  SE          VARCHAR2(100);
    
	  V_CONTEXT           VARCHAR2(100);
	  V_HRCHY_HDR_NAME    HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
  
   BEGIN
       OPEN OUT_HIERARCHY_REF_CUR FOR
          SELECT DISTINCT HRCHY_HDR_NAME
            FROM HIERARCHY_DESCRIPTION HD
           WHERE EXISTS (SELECT x.*
                           FROM ROLE_DETAILS RD,
                                SECURITY_MATRIX SM,
                                XMLTABLE ('/USER_RULES_DESCRIPTION/HIERARCHY_WINDOW/HIERARCHY_NAME/*'
                                          PASSING RD.USER_RULES_DESCRIPTION
                                          COLUMNS Value VARCHAR2(30) PATH 'text()') x
                          WHERE SM.USER_ID   = IN_USER_ID
                            AND SM.ROLE_CODE = RD.ROLE_CODE
                            AND x.value      = HD.HRCHY_HDR_NAME);
         
  EXCEPTION WHEN OTHERS THEN
          SQ := SQLCODE;
          SE := SQLERRM;
          
          V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
          ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HDR_DESC_PICKLIST',V_CONTEXT);  
END HIERARCHY_HDR_PICKLIST;

FUNCTION VALIDATE_HIERARCHY(
/*******************************************************************************
 VALIDATE_HIERARCHY  
   
  This procedure will validate the hierarchy from bottom to top and raise 
  corresponding error if particular level value doesn't exist

created : JXC517 11/14/2013
revised : kdp 11/21/2013 Changed to return y/n
********************************************************************************/
    IN_HRCHY_HDR_NAME         VARCHAR2,
    IN_HRCHY_DTL_CURR_LVL_VAL VARCHAR2) RETURN VARCHAR
IS
BEGIN
    RETURN CCN_HIER_BUSINESS_RULES_PKG.VALIDATE_HIERARCHY(IN_HRCHY_HDR_NAME,
                                                          IN_HRCHY_DTL_CURR_LVL_VAL);
EXCEPTION WHEN OTHERS THEN
          errpkg.raise_err(SQLCODE, SQLERRM);
END VALIDATE_HIERARCHY;

PROCEDURE TRANSFER_LOAD_PROCESS(
/******************************************************************************
TRANSFER_LOAD_PROCESS

This procedure is the core process for the cost center transfer through UI
that invokes bulk load for transfer

IN_BLOB          - blob value delimited by , and termianted by new line character

Created by Kdp 01/22/2014
******************************************************************************/
IN_BLOB            IN       BLOB
)
IS
  	SQ          INTEGER;
  	SE          VARCHAR2(1000);    
BEGIN

    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB,
                              'COST_CENTER_HIERARCHY_TRNSFR.csv');

    CCN_HIERARCHY_UPLOAD.HIERARCHY_BULK_TRNSFR_PROCESS();
 
EXCEPTION

    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;

       ERRPKG.RAISE_ERR(-20004,'TRANSFER_LOAD_PROCESS ', SQ || ' ' || SE); 
 
END TRANSFER_LOAD_PROCESS;

PROCEDURE INSERT_LOAD_PROCESS(
/******************************************************************************
INSERT_LOAD_PROCESS

This procedure is the core process for the cost center insert through UI
that invokes bulk load for insert

IN_BLOB          - blob value delimited by , and termianted by new line character

Created by jxc 03/11/2014
******************************************************************************/
IN_BLOB            IN       BLOB
)
IS
  	SQ          INTEGER;
  	SE          VARCHAR2(1000);    
BEGIN

    CCN_BATCH_PKG.FILE_UPLOAD(IN_BLOB,
                              'COST_CENTER_HIERARCHY.csv');

    CCN_HIERARCHY_UPLOAD.HIERARCHY_BULK_LOAD_PROCESS();
 
EXCEPTION

    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;

       ERRPKG.RAISE_ERR(-20004,'INSERT_LOAD_PROCESS ', SQ || ' ' || SE); 
 
END INSERT_LOAD_PROCESS;

PROCEDURE VALIDATE_HIER_BUSINESS_RULES(
/***********************************************************
      VALIDATE_HIER_BUSINESS_RULES 
      This Procedure will validate business rules while inserting new records
      into hierarchy_detail table

Input :-
IN_HIERARCHY_DETAIL_ROW
IN_XML
IN_FLAG
IN_COUNT

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
            IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE,
            IN_XML                  IN CLOB,
            IN_FLAG                 IN VARCHAR2,
            IN_COUNT                IN NUMBER)
IS
  V_CONTEXT                     VARCHAR2(3000);
  MISSING_HIERARCHY_NAMES       VARCHAR2(1000);  
  V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
  V_LAST_LEVEL_FLAG             VARCHAR2(1);
  V_LVL_VALUE_SIZE              HIERARCHY_DESCRIPTION.LVL_VALUE_SIZE%TYPE;

	BUSSINESS_RULES_ERR_CODE    INTEGER;
 	BUSSINESS_RULES_ERR_DESC    VARCHAR2(2000);
  BUSINESS_RULES_EXCEPTION    EXCEPTION;

  SQ             INTEGER;
  SE             VARCHAR2(1000);

BEGIN

    --This validation is not needed for Transfer
    IF IN_FLAG = 'INSERT' THEN
        BEGIN
            V_CONTEXT := 'Calling the DUPLICATE_COST_CENTER';
            CCN_HIER_BUSINESS_RULES_PKG.DUPLICATE_LEVEL_VALIDATION(IN_HIERARCHY_DETAIL_ROW);
        EXCEPTION
            WHEN OTHERS THEN
                BUSSINESS_RULES_ERR_CODE := ERRNUMS.EN_CC_EXISTS_ERR; 
                BUSSINESS_RULES_ERR_DESC := 'At Level-'|| IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||' the Value ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL
                                                || ' already exists in Hierarchy ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;
                RAISE BUSINESS_RULES_EXCEPTION;
        END;

        V_CONTEXT := 'Validating LVL_VALUE_SIZE for the passed HRCHY_DTL_CURR_ROW_VAL';
        BEGIN
            SELECT NVL(LVL_VALUE_SIZE,0)
              INTO V_LVL_VALUE_SIZE
              FROM HIERARCHY_DESCRIPTION
             WHERE HRCHY_HDR_NAME    = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
               AND HRCHY_HDR_LVL_NBR = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
        EXCEPTION WHEN OTHERS THEN
            V_LVL_VALUE_SIZE := 0;
        END;
        IF LENGTH(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL) <> V_LVL_VALUE_SIZE THEN
            BUSSINESS_RULES_ERR_CODE := ERRNUMS.EN_LVL_VAL_SIZE_ERR;
            BUSSINESS_RULES_ERR_DESC := 'The size of level ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL 
                   || ' in ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME 
                   || ' hierarchy should be ' || V_LVL_VALUE_SIZE || ' characters';
            RAISE BUSINESS_RULES_EXCEPTION;
        END IF;
    END IF;

    SELECT DECODE(HRCHY_HDR_LEVELS,IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL,'Y','N')
      INTO V_LAST_LEVEL_FLAG
      FROM HIERARCHY_HEADER
     WHERE HRCHY_HDR_NAME = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME;

    --Below condition makes sure that the validations for cost center level and previous levels are properly seperated
    IF V_LAST_LEVEL_FLAG = 'Y' THEN
        V_CONTEXT := 'Calling the Business Rules pkg';
        BEGIN
            --So once the business rule is violated BUSSINESS_RULES_ERR_CODE is set to corresponding warning #
            --No further validation of rules is needed at other levels as this warning is generic
            IF BUSSINESS_RULES_ERR_CODE IS NULL THEN
                CCN_HIER_BUSINESS_RULES_PKG.HIER_BUSINESS_RULES_MAIN(IN_HIERARCHY_DETAIL_ROW);  
            END IF;
        EXCEPTION
            --Allow the process to continue, as these are just warnings
            WHEN OTHERS THEN
                BUSSINESS_RULES_ERR_CODE   := SQLCODE;
                BUSSINESS_RULES_ERR_DESC   := SQLERRM;
                RAISE BUSINESS_RULES_EXCEPTION;
        END;

        --Validate if the header name matches with the number of levels passed
        --This validation should be done only once, that too for the last level OR first iteration
        --We don't need these validations on FROM side of the transfer
        V_CONTEXT := 'Validating Header levels';
        IF NOT IS_VALID_HEADER_LVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME,
                                  IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL) THEN
            BUSSINESS_RULES_ERR_CODE   := errnums.en_invalid_levels_err;
            BUSSINESS_RULES_ERR_DESC   := 'The number of levels for the Hierarchy ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' is not in range';
            RAISE BUSINESS_RULES_EXCEPTION;
        END IF;

        --Validate if the passed statement type matches with the once in the cost center
        --This validation should be done only once, that too for the last level OR first iteration
        --We don't need these validations on FROM side of the transfer
        V_CONTEXT := 'Validating Statement Type';
        IF NOT IS_STATEMENT_TYPE_VALID(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL,
                                       IN_FLAG, --'INSERT'/'TO'
                                       IN_XML,
                                       IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME,
                                       IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL,
                                       IN_COUNT) THEN
            BUSSINESS_RULES_ERR_CODE   := errnums.en_invalid_stmnt_type_err;
            BUSSINESS_RULES_ERR_DESC   := 'The passed statement type for the Hierarchy doesn''t match with that of cost center';
            RAISE BUSINESS_RULES_EXCEPTION;
        END IF;

        --Check if cost center belongs to all 3 : 'GLOBAL_HIERARCHY','FACTS_DIVISION','LEGACY_GL_DIVISION'
        V_CONTEXT := 'Validating incomplete cost centers';
        IS_COMPLETE_COST_CENTER(IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME,
                                IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL,
                                MISSING_HIERARCHY_NAMES);
        IF MISSING_HIERARCHY_NAMES IS NOT NULL THEN
            --BUSSINESS_RULES_ERR_CODE   := errnums.en_incomplete_cc_err;
            --BUSSINESS_RULES_ERR_DESC   := 'Incomplete Cost Center. Missing hierarchies - ' || MISSING_HIERARCHY_NAMES;
            NULL;
        END IF;

        V_CONTEXT := 'Validating previous level exists or not';
        --Get the previous level record, if one exists
        GET_PREVIOUS_LVL(NULL,
                         IN_HIERARCHY_DETAIL_ROW,
                         V_HIERARCHY_DETAIL_ROW_PREV);
        IF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_CURR_LVL_VAL IS NULL THEN
            -- We should no longer recursively insert previous levels as it is the responsibility of UI and Send files
            -- to have all the previous levels sent properly. If not sent, an erorr will be logged stating the same
            BUSSINESS_RULES_ERR_CODE   := errnums.en_previous_level_missing_err;
            BUSSINESS_RULES_ERR_DESC   := 'Level ' || (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1') || ' is missing in '
                                                   || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' hierarchy';
            RAISE BUSINESS_RULES_EXCEPTION;
        END IF;
        
        BEGIN
            V_CONTEXT := 'Calling the SGL_DIVISION_VALIDATION';
            CCN_HIER_BUSINESS_RULES_PKG.SGL_DIVISION_VALIDATION(IN_HIERARCHY_DETAIL_ROW);
        EXCEPTION
            WHEN OTHERS THEN
                BUSSINESS_RULES_ERR_CODE := ERRNUMS.EN_INVALID_GL_DIV; 
                BUSSINESS_RULES_ERR_DESC := 'The Division in ' || IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME || ' does not match the one in Global Hierarchy';
                RAISE BUSINESS_RULES_EXCEPTION;
        END;
                
    ELSE
        IF NOT IS_CURR_STMNNT_TYPE_MATCH_PREV(IN_HIERARCHY_DETAIL_ROW) THEN
            BUSSINESS_RULES_ERR_CODE   := errnums.en_invalid_stmnt_type_err;
            BUSSINESS_RULES_ERR_DESC   := 'Current level statement type does not match with Previous levels statement type';
            RAISE BUSINESS_RULES_EXCEPTION;
        END IF;
    END IF;

EXCEPTION
     WHEN BUSINESS_RULES_EXCEPTION THEN
           ERRPKG.RAISE_ERR(BUSSINESS_RULES_ERR_CODE,BUSSINESS_RULES_ERR_DESC);
     WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'VALIDATE_HIER_BUSINESS_RULES ',V_CONTEXT);
END VALIDATE_HIER_BUSINESS_RULES;

PROCEDURE INSERT_DETAIL_PROCESS(
/***********************************************************
      INSERT_DETAIL_PROCESS 
      This Procedure will perform the core insert process 
      for hierarchy_detail table 
      
Input :-
IN_HIERARCHY_DETAIL_ROW
IN_XML
IN_FLAG
IN_COUNT

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
            IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE,
            IN_XML                  IN CLOB,
            IN_FLAG                 IN VARCHAR2,
            IN_COUNT                IN NUMBER)
IS
   V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
   V_ROW_DATA                    XMLTYPE := SYS.XMLTYPE(IN_XML);
   MISSING_HIERARCHY_NAMES       VARCHAR2(1000);
BEGIN

    --Validating the hierarchy busniess rules
    VALIDATE_HIER_BUSINESS_RULES(IN_HIERARCHY_DETAIL_ROW,
                                 IN_XML,
                                 IN_FLAG,
                                 IN_COUNT);

    --Get the previous level record, if one exists
    GET_PREVIOUS_LVL(NULL,
                     IN_HIERARCHY_DETAIL_ROW,
                     V_HIERARCHY_DETAIL_ROW_PREV);

    IF NVL(V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL,'~~~') = '~~~' THEN
       --If previous level's Next Value is ~~~, we need to update that with current level value
       V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
       CCN_HIERARCHY.HIERARCHY_UPDATE_WRAPPER(NULL, V_HIERARCHY_DETAIL_ROW_PREV);
    ELSIF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL <> IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL THEN
       --If previous level's Next Value is NOT ~~~ and NOT current level value, insert one
       V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
       V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_EFF_DATE     := NVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE, SYSDATE);
       CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER(NULL, V_HIERARCHY_DETAIL_ROW_PREV);
    END IF;

    IF CURRENT_LVL_EXISTS(NULL, IN_HIERARCHY_DETAIL_ROW) = 'N' THEN
       --Always insert the record if it doesn't exists
       CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER(NULL, IN_HIERARCHY_DETAIL_ROW);
    END IF;

END INSERT_DETAIL_PROCESS;

PROCEDURE INSERT_DETAIL_HIST_PROCESS(
/***********************************************************
      INSERT_DETAIL_HIST_PROCESS 
      This Procedure will perform the hierarchy_detail_hst insert process
      
Input :-
IN_HIERARCHY_DETAIL_ROW

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
                         IN_HIERARCHY_DETAIL_ROW IN     HIERARCHY_DETAIL%ROWTYPE,
                         OUT_PREV_LVL_EXISTS        OUT BOOLEAN)
IS
   V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
   V_PREV_LVL_EXISTS             BOOLEAN := TRUE;
BEGIN
  
   --Get the previous level record, if one exists
   GET_PREVIOUS_LVL('H',
                    IN_HIERARCHY_DETAIL_ROW,
                    V_HIERARCHY_DETAIL_ROW_PREV);

   IF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_CURR_LVL_VAL IS NOT NULL THEN
      IF NVL(V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL,'~~~') = '~~~' THEN
         --If previous level's Next Value is ~~~, we need to update that with current level value
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
         CCN_HIERARCHY.HIERARCHY_UPDATE_WRAPPER('H', V_HIERARCHY_DETAIL_ROW_PREV);
      ELSIF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL <> IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL THEN
         --If previous level's Next Value is NOT ~~~ and NOT current level value, insert one
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_EFF_DATE     := NVL(IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE, SYSDATE);
         CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER('H', V_HIERARCHY_DETAIL_ROW_PREV);
      END IF;
   ELSE
       --Previous Level Doesn't exists, recursively insert all previous levels
       --Also iteration should not lead to infinite loop, so add below condition to iterate back only till 1st level
       IF (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1') > 0 THEN
          V_PREV_LVL_EXISTS := FALSE;
       END IF;
   END IF;
   
   IF CURRENT_LVL_EXISTS('H', IN_HIERARCHY_DETAIL_ROW) = 'N' THEN
      --Always insert the record if it doesn't exists
      CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER('H', IN_HIERARCHY_DETAIL_ROW);
   END IF;
   
   OUT_PREV_LVL_EXISTS := V_PREV_LVL_EXISTS;

END INSERT_DETAIL_HIST_PROCESS;

PROCEDURE DELETE_DETAIL_PROCESS(
/***********************************************************
      DELETE_PROCESS 
      This Procedure will perform the following checks
      and then calls the wrapper for UPDATE or DELETE
      based on the in_flag
     
      a) if CURRENT_LVL_EXISTS
      b) delete the record
      c) get the Previous level record
      d) get the count to see if it is the last record or has more children
      d) if it is the last level, UPDATE  else DELETE
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIST_FLAG            IN VARCHAR2,
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
   V_LAST_CHILD                  VARCHAR2(1);
   V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
BEGIN
   --Before deleting, check if the record exists using below condition
   IF CURRENT_LVL_EXISTS(IN_HIST_FLAG, IN_HIERARCHY_DETAIL_ROW) = 'Y' THEN
      --Delete the existing record
      HIERARCHY_DELETE_WRAPPER(IN_HIST_FLAG, IN_HIERARCHY_DETAIL_ROW);
      
      --Get previous record for update/delete, if one exists
      GET_PREVIOUS_LVL(IN_HIST_FLAG,
                      IN_HIERARCHY_DETAIL_ROW,
                      V_HIERARCHY_DETAIL_ROW_PREV);
      
      BEGIN
         --Check if this is the last record being deleted at parent level
         SELECT DECODE(COUNT(*),1,'Y','N') INTO V_LAST_CHILD
           FROM HIERARCHY_DETAIL
          WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL -'1')
            AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            V_LAST_CHILD := 'N';
      END;
      IF V_LAST_CHILD = 'Y' THEN
         --This is the last record at parent level. So update previous[parent] records next level value as ~~~
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
         HIERARCHY_UPDATE_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW_PREV);
      ELSE
         --This is the NOT the last record at parent level. So we can delete this at parent level
         HIERARCHY_DELETE_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW_PREV);
      END IF;
   
   END IF;
END DELETE_DETAIL_PROCESS;

PROCEDURE BUILD_INSERT_COMPOSITE_KEYS(
/***********************************************************
      BUILD_INSERT_COMPOSITE_KEYS 
      This Procedure will build composite keys for INSERT Procedures

Input :-
IN_XML
OUT_HIERARCHY_DETAIL_ROW

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
            IN_XML                   IN     CLOB,
            OUT_HIERARCHY_DETAIL_ROW OUT HIERARCHY_DETAIL%ROWTYPE)
IS
  V_CONTEXT      VARCHAR2(3000);
  V_NEXT_ROW_VAL VARCHAR2(100);

  V_ROW_DATA     XMLTYPE := SYS.XMLTYPE(IN_XML); 
  SQ             INTEGER;
  SE             VARCHAR2(1000);

BEGIN

   V_CONTEXT := 'Extracting Hierarchy Header and Level Details';
   IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
   END IF;

    V_CONTEXT := 'Extracting INSERT Hierarchy Details';
    FOR i IN 1..OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1 LOOP
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL  :=  OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
    END LOOP;

    --Extract all available values from 'INSERT' XML
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC           := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_DESC/text()').GETSTRINGVAL(); 
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL   := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE       := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EFF_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY'); 
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()') = 1) THEN
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE   := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY'); 
    END IF;
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/attributes') = 1) THEN
      OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE     := SYS.XMLTYPE.CREATEXML(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/attributes').GETCLOBVAL());
    END IF;
    --Next value should be extracted using 'INSERT' XML with current iteration + 1, if one exists
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || (OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
       V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || (OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
    END IF;

    --Current Level Value should extract values of all levels as well as current level
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;

   IF V_NEXT_ROW_VAL IS NULL THEN
      --HRCHY_DTL_NEXT_LVL_VAL is '~~~' for next val of last level
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
   ELSE
     OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL || V_NEXT_ROW_VAL;
   END IF;

    --Assign Previous Level value for 1st Level as ~~~
    IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = 1 THEN
       OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL := '~~~';
    END IF;

EXCEPTION
     WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'BUILD_INSERT_COMPOSITE_KEYS ',V_CONTEXT);
END BUILD_INSERT_COMPOSITE_KEYS;

PROCEDURE BUILD_FROM_COMPOSITE_KEYS(
/***********************************************************
      BUILD_FROM_COMPOSITE_KEYS 
      This Procedure will build composite keys from part
      of tranfer process

Input :-
IN_XML
IN_COUNT
IN_OUT_HIERARCHY_DETAIL_ROW

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
            IN_XML                      IN     CLOB,
            IN_COUNT                    IN     NUMBER,
            IN_OUT_HIERARCHY_DETAIL_ROW IN OUT HIERARCHY_DETAIL%ROWTYPE)
IS
  V_CONTEXT      VARCHAR2(3000);
  V_NEXT_ROW_VAL VARCHAR2(100);

  V_ROW_DATA     XMLTYPE := SYS.XMLTYPE(IN_XML); 
  SQ             INTEGER;
  SE             VARCHAR2(1000);

BEGIN

    V_CONTEXT := 'Extracting Hierarchy Header and Level Details';
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL := NVL(IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL,
                                                          V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL());
    END IF;

    V_CONTEXT := 'Extracting FROM Hierarchy Details';
    FOR i IN 1..IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1 LOOP
        --Previous Level Value should extract values of all levels except current level
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL :=  IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
    END LOOP; 
 
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL() THEN
        --Building composite 'FROM' keys for last record using 'TO' XML, as we won't be having last level details in 'FROM' XML
        --Current Row Value should extract value as the current level alone
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
        --Expiration Date of last level should be obtained from 'TO' level XML Effective Date
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE     := IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE;
        --Current Level Value should extract values of all levels as well as current level
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
        --HRCHY_DTL_NEXT_LVL_VAL is '~~~' for next val of last level
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
    ELSE
        --Building composite 'FROM' keys for other records using 'FROM' XML
        --Current Row Value should extract value as the current level alone
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
        --Next value should be extracted using 'FROM' XML with current iteration + 1, if one exists
        --If not exists then get that from 'TO' XML - this will happen only for last level - 1 iteration in 'FROM' XML
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || (IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
           V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || (IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
        ELSE
           V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || (IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL(); 
        END IF;
        --Current Level Value should extract values of all levels as well as current level
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL || V_NEXT_ROW_VAL;
        --Expiration Date of other levels should be obtained from existing current level records from Detail table
    END IF;

    --Assign Previous Level value for 1st Level as ~~~
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = 1 THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL := '~~~';
    END IF;

    --Getting descriptions for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC := HIERARCHY_DESC_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);
    END IF;

    ---Getting attribute value for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE := HIERARCHY_ATTRIBUTE_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);  
    END IF;

    ---Getting Effective Date value for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE := HIERARCHY_EFF_DATE_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);  
    END IF;

    ---Getting Expiration Date value for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE := HIERARCHY_EXP_DATE_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);  
    END IF;

EXCEPTION
    WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'BUILD_FROM_COMPOSITE_KEYS ',V_CONTEXT);
END BUILD_FROM_COMPOSITE_KEYS;

PROCEDURE BUILD_TO_COMPOSITE_KEYS(
/***********************************************************
      BUILD_TO_COMPOSITE_KEYS 
      This Procedure will build composite keys to part
      of tranfer process

Input :-
IN_XML
IN_COUNT
OUT_HIERARCHY_DETAIL_ROW

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
            IN_XML                   IN     CLOB,
            IN_COUNT                 IN     NUMBER,
            OUT_HIERARCHY_DETAIL_ROW OUT HIERARCHY_DETAIL%ROWTYPE)
IS
  V_CONTEXT      VARCHAR2(3000);
  V_NEXT_ROW_VAL VARCHAR2(100);

  V_ROW_DATA     XMLTYPE := SYS.XMLTYPE(IN_XML); 
  SQ             INTEGER;
  SE             VARCHAR2(1000);

BEGIN

    V_CONTEXT := 'Extracting Hierarchy Header and Level Details';
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
       OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
       OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
    END IF;

    V_CONTEXT := 'Extracting TO Hierarchy Details';
    --Building composite 'TO' keys using 'TO' XML
    FOR i IN 1..OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1 LOOP
        --Previous Level Value should extract values of all levels except current level
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL  :=  OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
    END LOOP;

    --Extract all available values from 'TO' XML
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC          := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_DTL_DESC/text()').GETSTRINGVAL();
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE      := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_DTL_EFF_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'|| '/HRCHY_DTL_EXP_DATE/text()') =1) THEN
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');    
    END IF;
    
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/attributes') = 1) THEN
       OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE     := SYS.XMLTYPE.CREATEXML(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/attributes').GETCLOBVAL());
    END IF;
    --Next value should be extracted using 'TO' XML with current iteration + 1, if one exists
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || (OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
       V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || (OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
    END IF;

    --Current Level Value should extract values of all levels as well as current level
    OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;

   IF V_NEXT_ROW_VAL IS NULL THEN
      --HRCHY_DTL_NEXT_LVL_VAL is '~~~' for next val of last level
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
   ELSE
     OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL || V_NEXT_ROW_VAL;
   END IF;

    --Assign Previous Level value for 1st Level as ~~~
    IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = 1 THEN
       OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL := '~~~';
    END IF;

EXCEPTION
     WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'BUILD_TO_COMPOSITE_KEYS ',V_CONTEXT);
END BUILD_TO_COMPOSITE_KEYS;

PROCEDURE BUILD_DELETE_COMPOSITE_KEYS(
/***********************************************************
      BUILD_DELETE_COMPOSITE_KEYS 
      This Procedure will build composite keys for DELETE Procedures

Input :-
IN_XML
IN_OUT_HIERARCHY_DETAIL_ROW

Created : 01/17/2014 JXC517 CCN Project
************************************************************/
            IN_XML                   IN     CLOB,
            IN_OUT_HIERARCHY_DETAIL_ROW IN OUT HIERARCHY_DETAIL%ROWTYPE)
IS
  V_CONTEXT      VARCHAR2(3000);
  V_NEXT_ROW_VAL VARCHAR2(100);

  V_ROW_DATA     XMLTYPE := SYS.XMLTYPE(IN_XML); 
  SQ             INTEGER;
  SE             VARCHAR2(1000);

BEGIN

   V_CONTEXT := 'Extracting Hierarchy Header and Level Details';
   IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
      IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
      IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL := NVL(IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL,
                                                      V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL());
   END IF;

    V_CONTEXT := 'Extracting DELETE Hierarchy Details';
    --Building composite 'DELETE' keys using 'DELETE' XML
    FOR i IN 1..IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - 1 LOOP
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL  :=  IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
    END LOOP;

    --Extract all available values from 'DELETE' XML
    IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC           := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_DESC/text()').GETSTRINGVAL(); 
    IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL   := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
    IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE      := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EFF_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()') = 1) THEN
        IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE   := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY'); 
    END IF;
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/attributes') = 1) THEN
      IN_OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE     := SYS.XMLTYPE.CREATEXML(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/attributes').GETCLOBVAL());
    END IF;
    --Next value should be extracted using 'DELETE' XML with current iteration + 1, if one exists
    IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || (IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
       V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || (IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
    END IF;

    --Current Level Value should extract values of all levels as well as current level
    IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;

    IF V_NEXT_ROW_VAL IS NULL THEN
       --HRCHY_DTL_NEXT_LVL_VAL is '~~~' for next val of last level
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
    ELSE
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL || V_NEXT_ROW_VAL;
    END IF;

    --Assign Previous Level value for 1st Level as ~~~
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = 1 THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL := '~~~';
    END IF;

    --Getting descriptions for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC := HIERARCHY_DESC_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);
    END IF;

    ---Getting attribute value for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE := HIERARCHY_ATTRIBUTE_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);  
    END IF;

    ---Getting Effective Date value for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE := HIERARCHY_EFF_DATE_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);  
    END IF;

    ---Getting Expiration Date value for the corresponding level, if not present
    IF IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE IS NULL THEN
       IN_OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE := HIERARCHY_EXP_DATE_RETURN(IN_OUT_HIERARCHY_DETAIL_ROW);  
    END IF;

EXCEPTION
     WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'BUILD_DELETE_COMPOSITE_KEYS ',V_CONTEXT);
END BUILD_DELETE_COMPOSITE_KEYS;

PROCEDURE HIERARCHY_DETAIL_INSERT(
/**********************************************************
	HIERARCHY_DETAIL_INSERT

	This procedure will be called from UI to insert particular hierarchy

Inputs:
IN_XML - XML that contains the details of the hierarchy to be inserted

Example Input:
<?xml version="1.0" encoding="UTF-8"?>
<HIERARCHY_DETAIL>
    <userId>pxp301</userId>
    <row_data>
        <HRCHY_HDR_NAME>GLOBAL_HIERARCHY</HRCHY_HDR_NAME>
        <HRCHY_DTL_LEVEL>9</HRCHY_DTL_LEVEL>
        <HRCHY_LEVEL1>01</HRCHY_LEVEL1>
        <HRCHY_LEVEL2>01</HRCHY_LEVEL2>
        <HRCHY_LEVEL3>01</HRCHY_LEVEL3>
        <HRCHY_LEVEL4>01</HRCHY_LEVEL4>
        <HRCHY_LEVEL5>01</HRCHY_LEVEL5>
        <HRCHY_LEVEL6>01</HRCHY_LEVEL6>
        <HRCHY_LEVEL7>01</HRCHY_LEVEL7>
        <HRCHY_LEVEL8>01</HRCHY_LEVEL8>
        <HRCHY_LEVEL9>70DDDD</HRCHY_LEVEL9>
        <HRCHY_DTL_DESC>Cuyahoga</HRCHY_DTL_DESC>
        <HRCHY_DTL_EFF_DATE>01-24-2014</HRCHY_DTL_EFF_DATE>
        <HRCHY_DTL_EXP_DATE>01-31-2014</HRCHY_DTL_EXP_DATE>
        <attributes>
            <upper_lvl_ver_desc>
                <Name>Statement Type</Name>
                <Description>Picklist Value</Description>
                <Value>US</Value>
            </upper_lvl_ver_desc>
        </attributes>
    </row_data>
</HIERARCHY_DETAIL>

Created : 01/17/2014 JXC517

**********************************************************/
    IN_XML                CLOB)
IS
  V_HIERARCHY_DETAIL_ROW           HIERARCHY_DETAIL%ROWTYPE;
  
  V_CONTEXT   VARCHAR2(3000);
  SQ          INTEGER;
  SE          VARCHAR2(1000);

BEGIN

   V_CONTEXT := 'Calling BUILD_INSERT_COMPOSITE_KEYS';
   BUILD_INSERT_COMPOSITE_KEYS(IN_XML,
                               V_HIERARCHY_DETAIL_ROW);

   V_CONTEXT := 'Calling INSERT_PROCESS';
   INSERT_DETAIL_PROCESS(V_HIERARCHY_DETAIL_ROW,
                         IN_XML,
                         'INSERT',
                         NULL);

EXCEPTION
    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;

       V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
       ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DETAIL_INSERT ',V_CONTEXT);

END HIERARCHY_DETAIL_INSERT;

PROCEDURE HIERARCHY_TRANSFER_PROCESS(
/***********************************************************
      HIERARCHY_TRANSFER_PROCESS 

	This procedure will be called from UI to transfer particular cost center
  from one hierarchy to another

Inputs:
IN_XML - XML that contains the details of the cost center to be transfered
         and the from and hierarchies
Example Input:
<?xml version="1.0" encoding="UTF-8"?>
<HIERARCHY_DETAIL>
    <row_data>
        <HRCHY_HDR_NAME>ADMIN_TO_SALES_AREA</HRCHY_HDR_NAME>
        <HRCHY_DTL_LEVEL>5</HRCHY_DTL_LEVEL>
        <FROM_HIERARCHY>
            <HRCHY_LEVEL1>01</HRCHY_LEVEL1>
            <HRCHY_LEVEL2>01</HRCHY_LEVEL2>
            <HRCHY_LEVEL3>01</HRCHY_LEVEL3>
            <HRCHY_LEVEL4>01</HRCHY_LEVEL4>
        </FROM_HIERARCHY>
        <TRANSFER_TO>
            <TO_HIERARCHY>
                <HRCHY_LEVEL1>01</HRCHY_LEVEL1>
                <HRCHY_LEVEL2>01</HRCHY_LEVEL2>
                <HRCHY_LEVEL3>01</HRCHY_LEVEL3>
                <HRCHY_LEVEL4>06</HRCHY_LEVEL4>
                <HRCHY_LEVEL5>800411</HRCHY_LEVEL5>
                <HRCHY_DTL_EFF_DATE>07-29-2013</HRCHY_DTL_EFF_DATE>
                <HRCHY_DTL_EXP_DATE></HRCHY_DTL_EXP_DATE>
                <HRCHY_DTL_DESC>WAREHOUSING-25</HRCHY_DTL_DESC>
                <attributes>
                    <upper_lvl_ver_desc>
                        <Name>statement_type</Name>
                        <Description>pkListValue</Description>
                        <Value>JM</Value>
                    </upper_lvl_ver_desc>
                </attributes>
            </TO_HIERARCHY>
            <TO_HIERARCHY>
                <HRCHY_LEVEL1>01</HRCHY_LEVEL1>
                <HRCHY_LEVEL2>01</HRCHY_LEVEL2>
                <HRCHY_LEVEL3>01</HRCHY_LEVEL3>
                <HRCHY_LEVEL4>06</HRCHY_LEVEL4>
                <HRCHY_LEVEL5>800412</HRCHY_LEVEL5>
                <HRCHY_DTL_EFF_DATE>07-29-2013</HRCHY_DTL_EFF_DATE>
                <HRCHY_DTL_EXP_DATE></HRCHY_DTL_EXP_DATE>
                <HRCHY_DTL_DESC>WAREHOUSING-26</HRCHY_DTL_DESC>
                <attributes>
                    <upper_lvl_ver_desc>
                        <Name>statement_type</Name>
                        <Description>pkListValue</Description>
                        <Value>JM</Value>
                    </upper_lvl_ver_desc>
                </attributes>
            </TO_HIERARCHY>
        </TRANSFER_TO>
    </row_data>
</HIERARCHY_DETAIL>

Created : 01/17/2014 JXC517
update  : 09/18/2014 NXK927  -- Hier territory cost center tranfer(mail) 

************************************************************/
IN_XML IN CLOB) IS
 
  V_HIERARCHY_DETAIL_ROW_TO        HIERARCHY_DETAIL%ROWTYPE;
  V_HIERARCHY_DETAIL_ROW_FROM      HIERARCHY_DETAIL%ROWTYPE;
  V_HIERARCHY_DETAIL_TEMP          HIERARCHY_DETAIL%ROWTYPE;
  V_COUNT                          NUMBER  := 1;
  V_ROW_DATA                       XMLTYPE := SYS.XMLTYPE(IN_XML);
  V_PREV_LVL_EXISTS                BOOLEAN := FALSE;
  V_CLOB                           CLOB;
  V_DAD_CHANGE_CLOB                CLOB;

  V_CONTEXT   VARCHAR2(3000);
  SQ          INTEGER;
  SE          VARCHAR2(1000);

BEGIN

   --Extracting the TO_HIERARCHY
   WHILE V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' || '[' || V_COUNT || ']') = 1 LOOP
      V_HIERARCHY_DETAIL_TEMP := NULL;
      V_PREV_LVL_EXISTS       := FALSE;
      WHILE NOT V_PREV_LVL_EXISTS LOOP
          V_HIERARCHY_DETAIL_ROW_FROM := V_HIERARCHY_DETAIL_TEMP;
          V_CONTEXT := 'Calling BUILD_FROM_COMPOSITE_KEYS';
          BUILD_FROM_COMPOSITE_KEYS(IN_XML,
                                    V_COUNT,
                                    V_HIERARCHY_DETAIL_ROW_FROM);
          V_CONTEXT := 'Calling INSERT_DETAIL_HIST_PROCESS';
          INSERT_DETAIL_HIST_PROCESS(V_HIERARCHY_DETAIL_ROW_FROM,
                                     V_PREV_LVL_EXISTS);
          V_HIERARCHY_DETAIL_TEMP.HRCHY_DTL_LEVEL := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_LEVEL - '1';
      END LOOP;
      
      V_CONTEXT := 'Calling BUILD_TO_COMPOSITE_KEYS';
      BUILD_TO_COMPOSITE_KEYS(IN_XML,
                              V_COUNT,
                              V_HIERARCHY_DETAIL_ROW_TO);

      V_CONTEXT := 'Calling INSERT_DETAIL_PROCESS';
      INSERT_DETAIL_PROCESS(V_HIERARCHY_DETAIL_ROW_TO,
                            IN_XML,
                            'TO',
                            V_COUNT);
                            
      --cost center that is being transferred
      V_HIERARCHY_DETAIL_TEMP.HRCHY_DTL_CURR_ROW_VAL := V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_ROW_VAL;
                   
      V_HIERARCHY_DETAIL_ROW_FROM := NULL;
      V_CONTEXT := 'Calling BUILD_FROM_COMPOSITE_KEYS';
      BUILD_FROM_COMPOSITE_KEYS(IN_XML,
                                V_COUNT,
                                V_HIERARCHY_DETAIL_ROW_FROM);

      V_CONTEXT := 'Calling DELETE_PROCESS';
      DELETE_DETAIL_PROCESS(NULL, V_HIERARCHY_DETAIL_ROW_FROM);

      V_COUNT := V_COUNT + 1;
      --looking for territory cost center when there is hierarchy transfer
      FOR rec IN (SELECT *
                    FROM COST_CENTER
                   WHERE COST_CENTER_CODE = V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_ROW_VAL
                     AND CATEGORY = 'T') LOOP
         --using v_clob to store the list of  cost centers and Hierarchy 'To' and 'From' from the cursor
         V_CLOB := V_CLOB || V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL ||','||
                             V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_PREV_LVL_VAL ||','||
                             V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_ROW_VAL || CHR(10);
         IF V_HIERARCHY_DETAIL_ROW_TO.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY'
            AND SUBSTR(V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_CURR_LVL_VAL,5,6) <> SUBSTR(V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_LVL_VAL,5,6) THEN
             V_DAD_CHANGE_CLOB := V_DAD_CHANGE_CLOB || V_HIERARCHY_DETAIL_ROW_FROM.HRCHY_DTL_PREV_LVL_VAL ||','||
                                                       V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_PREV_LVL_VAL ||','||
                                                       V_HIERARCHY_DETAIL_ROW_TO.HRCHY_DTL_CURR_ROW_VAL || CHR(10);
         END IF;
      END LOOP;
   END LOOP;

   --Sending mail for the category 'HIER_TRNSFR_TERRITORY'
   IF V_CLOB <> EMPTY_CLOB() THEN
       MAIL_PKG.SEND_MAIL('HIER_TRNSFR_TERRITORY', NULL, NULL, V_CLOB);
   ELSE 
      NULL;
   END IF;
   --Sending mail for the change of DAD on territory cost centers
   IF V_DAD_CHANGE_CLOB <> EMPTY_CLOB() THEN
       MAIL_PKG.SEND_MAIL('HIER_TRNSFR_DAD_CHNG_TERRITORY', NULL, NULL, V_DAD_CHANGE_CLOB);
   ELSE 
      NULL;
   END IF;

EXCEPTION
    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;

       V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
       ERRPKG.RAISE_ERR(-20004,'HIERARCHY_TRANSFER_PROCESS ',V_CONTEXT);

END HIERARCHY_TRANSFER_PROCESS;

PROCEDURE HIERARCHY_DETAIL_DELETE(
/**********************************************************
	HIERARCHY_DETAIL_DELETE

	This procedure will be called from UI to delete particular hierarchy

Inputs:
IN_XML - XML that contains the details of the hierarchy to be deleted

Example Input:
<?xml version="1.0" encoding="UTF-8"?>
<HIERARCHY_DETAIL>
    <userId>pxp301</userId>
    <row_data>
        <HRCHY_HDR_NAME>GLOBAL_HIERARCHY</HRCHY_HDR_NAME>
        <HRCHY_DTL_LEVEL>9</HRCHY_DTL_LEVEL>
        <HRCHY_LEVEL1>01</HRCHY_LEVEL1>
        <HRCHY_LEVEL2>01</HRCHY_LEVEL2>
        <HRCHY_LEVEL3>01</HRCHY_LEVEL3>
        <HRCHY_LEVEL4>01</HRCHY_LEVEL4>
        <HRCHY_LEVEL5>01</HRCHY_LEVEL5>
        <HRCHY_LEVEL6>01</HRCHY_LEVEL6>
        <HRCHY_LEVEL7>01</HRCHY_LEVEL7>
        <HRCHY_LEVEL8>01</HRCHY_LEVEL8>
        <HRCHY_LEVEL9>70DDDD</HRCHY_LEVEL9>
        <HRCHY_DTL_DESC>Cuyahoga</HRCHY_DTL_DESC>
        <HRCHY_DTL_EFF_DATE>01-24-2014</HRCHY_DTL_EFF_DATE>
        <HRCHY_DTL_EXP_DATE>01-31-2014</HRCHY_DTL_EXP_DATE>
        <attributes>
            <upper_lvl_ver_desc>
                <Name>Statement Type</Name>
                <Description>Picklist Value</Description>
                <Value>US</Value>
            </upper_lvl_ver_desc>
        </attributes>
    </row_data>
</HIERARCHY_DETAIL>

Created : 01/17/2014 JXC517
**********************************************************/
    IN_XML                CLOB)
IS
  V_XML_FRAG                       CLOB;
  V_ROW_DATA                       XMLTYPE := SYS.XMLTYPE(IN_XML);
  V_PREV_LVL_EXISTS                BOOLEAN := FALSE;
  V_HIERARCHY_DETAIL_ROW           HIERARCHY_DETAIL%ROWTYPE;
  V_HIERARCHY_DETAIL_TEMP          HIERARCHY_DETAIL%ROWTYPE;

  V_CONTEXT   VARCHAR2(3000);
  SQ          INTEGER;
  SE          VARCHAR2(1000);

BEGIN

      WHILE NOT V_PREV_LVL_EXISTS LOOP
          V_HIERARCHY_DETAIL_ROW := V_HIERARCHY_DETAIL_TEMP;
          V_CONTEXT := 'Calling BUILD_DELETE_COMPOSITE_KEYS';
          BUILD_DELETE_COMPOSITE_KEYS(IN_XML,
                                      V_HIERARCHY_DETAIL_ROW);

          V_CONTEXT := 'Calling INSERT_DETAIL_HIST_PROCESS';
          INSERT_DETAIL_HIST_PROCESS(V_HIERARCHY_DETAIL_ROW,
                                     V_PREV_LVL_EXISTS);
          V_HIERARCHY_DETAIL_TEMP.HRCHY_DTL_LEVEL := V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1';
      END LOOP;

      V_HIERARCHY_DETAIL_ROW := NULL;
      V_CONTEXT := 'Calling BUILD_DELETE_COMPOSITE_KEYS';
      BUILD_DELETE_COMPOSITE_KEYS(IN_XML,
                                  V_HIERARCHY_DETAIL_ROW);

      V_CONTEXT := 'Calling DELETE_PROCESS';
      DELETE_DETAIL_PROCESS(NULL, V_HIERARCHY_DETAIL_ROW);

EXCEPTION
    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;

       V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
       ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DETAIL_DELETE ',V_CONTEXT);
END HIERARCHY_DETAIL_DELETE;

PROCEDURE HIERARCHY_DETAIL_UPDATE(
/**********************************************************
	HIERARCHY_DETAIL_UPDATE

	This procedure will be called from UI to update particular hierarchy record

Inputs:
IN_XML - XML that contains the details of the hierarchy to be updated

Example Input:
<?xml version="1.0" encoding="UTF-8"?>
<HIERARCHY_DETAIL>
    <userId>pxp301</userId>
    <row_data>
        <HRCHY_HDR_NAME>GLOBAL_HIERARCHY</HRCHY_HDR_NAME>
        <HRCHY_DTL_LEVEL>9</HRCHY_DTL_LEVEL>
        <HRCHY_LEVEL1>01</HRCHY_LEVEL1>
        <HRCHY_LEVEL2>01</HRCHY_LEVEL2>
        <HRCHY_LEVEL3>01</HRCHY_LEVEL3>
        <HRCHY_LEVEL4>01</HRCHY_LEVEL4>
        <HRCHY_LEVEL5>01</HRCHY_LEVEL5>
        <HRCHY_LEVEL6>01</HRCHY_LEVEL6>
        <HRCHY_LEVEL7>01</HRCHY_LEVEL7>
        <HRCHY_LEVEL8>01</HRCHY_LEVEL8>
        <HRCHY_LEVEL9>70DDDD</HRCHY_LEVEL9>
        <HRCHY_DTL_DESC>Cuyahoga</HRCHY_DTL_DESC>
        <HRCHY_DTL_EFF_DATE>01-24-2014</HRCHY_DTL_EFF_DATE>
        <HRCHY_DTL_EXP_DATE>01-31-2014</HRCHY_DTL_EXP_DATE>
        <attributes>
            <upper_lvl_ver_desc>
                <Name>Statement Type</Name>
                <Description>Picklist Value</Description>
                <Value>US</Value>
            </upper_lvl_ver_desc>
        </attributes>
    </row_data>
</HIERARCHY_DETAIL>

Created : 01/17/2014 JXC517

**********************************************************/
    IN_XML                CLOB)
IS
  V_HIERARCHY_DETAIL_ROW           HIERARCHY_DETAIL%ROWTYPE;
  
  V_CONTEXT   VARCHAR2(3000);
  SQ          INTEGER;
  SE          VARCHAR2(1000);

BEGIN

   V_CONTEXT := 'Calling BUILD_INSERT_COMPOSITE_KEYS';
   BUILD_INSERT_COMPOSITE_KEYS(IN_XML,
                               V_HIERARCHY_DETAIL_ROW);

   ELIMINATE_SPECIAL_CHRS(V_HIERARCHY_DETAIL_ROW);

   V_CONTEXT := 'Calling IS_CURR_STMNNT_TYPE_MATCH_PREV';
      --If expiration date is passed as NULL we need to update the existing HIERARCHY_DETAIL record
      --If expiration date is passed as NOT NULL we need delete the existing HIERARCHY_DETAIL record
   IF V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE IS NOT NULL THEN
      IF IS_BELOW_LEVEL_EXISTS(V_HIERARCHY_DETAIL_ROW) THEN
         ERRPKG.RAISE_ERR(errnums.EN_BELOW_LEVELS_NOT_EXPIRED,'HIERARCHY_DETAIL_UPDATE '||
                  'Current level can not be expired with out expiring next/below levels');
      ELSE
         UPDATE HIERARCHY_DETAIL
            SET HRCHY_DTL_EXP_DATE  = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE,
                HRCHY_DTL_EFF_DATE  = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE,
                UPPER_LVL_VER_VALUE = V_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE,
                HRCHY_DTL_DESC      = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC
          WHERE HRCHY_HDR_NAME         = V_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
            AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
         DELETE_DETAIL_PROCESS(NULL, V_HIERARCHY_DETAIL_ROW);
      END IF;
   ELSE
      IF IS_CURR_STMNNT_TYPE_MATCH_PREV(V_HIERARCHY_DETAIL_ROW) THEN
         UPDATE HIERARCHY_DETAIL
            SET HRCHY_DTL_EFF_DATE  = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE,
                UPPER_LVL_VER_VALUE = V_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE,
                HRCHY_DTL_DESC      = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC
          WHERE HRCHY_HDR_NAME         = V_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
            AND HRCHY_DTL_CURR_LVL_VAL = V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
      ELSE
         ERRPKG.RAISE_ERR(errnums.en_invalid_stmnt_type_err,'HIERARCHY_DETAIL_UPDATE '||
                     'Current level statement type does not match with Previous levels statement type');
      END IF;
   END IF;

EXCEPTION
    WHEN OTHERS THEN
       SQ := SQLCODE;
       SE := SQLERRM;

       V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
       ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DETAIL_UPDATE ',V_CONTEXT);

END HIERARCHY_DETAIL_UPDATE;

PROCEDURE GET_RQSTD_ATTRIBUTE_VALUE(
/***********************************************************
      GET_RQSTD_ATTRIBUTE_VALUE 
      This Procedure will get the requested attribute value for from
      the passed UPPER_LVL_VER_DESC XML
      
Created : 30/14/2014 jxc517 CCN Project
************************************************************/
    IN_UPPER_LVL_VER_VALUE  IN     HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE,
    IN_ATTRIBUTE_NAME       IN     VARCHAR2,
    OUT_ATTRIBUTE_VALUE        OUT VARCHAR2)
IS
    V_COUNT           NUMBER        := 1;
    V_ATTRIBUTE_NAME  VARCHAR2(100);
BEGIN
    WHILE IN_UPPER_LVL_VER_VALUE.EXISTSNODE('//attributes/upper_lvl_ver_desc[' || V_COUNT || ']') = 1 LOOP
        V_ATTRIBUTE_NAME := UPPER(REPLACE(IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc' || '[' || V_COUNT || ']/Name/text()').GETSTRINGVAL(),' ','_'));
        IF V_ATTRIBUTE_NAME = UPPER(REPLACE(IN_ATTRIBUTE_NAME,' ','_'))
           AND (IN_UPPER_LVL_VER_VALUE.EXISTSNODE('/attributes/upper_lvl_ver_desc[' || V_COUNT || ']/Value/text()') = 1) THEN
            OUT_ATTRIBUTE_VALUE := IN_UPPER_LVL_VER_VALUE.EXTRACT('/attributes/upper_lvl_ver_desc[' || V_COUNT || ']/Value/text()').GETSTRINGVAL();
        END IF;
        V_COUNT := V_COUNT + 1;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        OUT_ATTRIBUTE_VALUE := NULL;
END GET_RQSTD_ATTRIBUTE_VALUE;

END CCN_HIERARCHY;

