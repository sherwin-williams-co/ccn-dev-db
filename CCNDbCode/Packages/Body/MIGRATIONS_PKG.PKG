CREATE OR REPLACE PACKAGE BODY MIGRATIONS_PKG as 
/*********************************************************** 
This package BODY has procedures and functions related to the MIGRATIONS table

created  : 02/12/2013 kdp CCN project
revisions: 02/12/2013 MDH Added Migrations_I_SP procedure 

************************************************************/

PROCEDURE MIGRATION_S_SP   (
  in_MIGRATION_ID        in  MIGRATIONS_DETAIL.MIGRATION_ID%type
, in_ENVIRONMENT         in  MIGRATIONS_DETAIL.ENVIRONMENT%type
, out_MIGRATIONS_HEADER_REF_CUR OUT sys_refcursor
, out_MIGRATIONS_DETAIL_REF_CUR OUT sys_refcursor
/**********************************************************
	MIGRATION_S_SP

	This procedure is intended to return a ref cursor with data from -
	from the MIGRATIONS_HEADER and MIGRATIONS_DETAIL tables.  

created : 02/06/2013 TAL CCN Project....
updated : 99/99/9999
**********************************************************/
  )
   is

v_code number;
v_errm  varchar2(500);
  
BEGIN
                    
  BEGIN   -- MIGRATION_HEADER_REF_CUR
              
    OPEN out_MIGRATIONS_HEADER_REF_CUR FOR
			  
    SELECT * 
      FROM  MIGRATIONS_HEADER
      where MIGRATION_ID    = in_MIGRATION_ID
       and  ENVIRONMENT     = in_ENVIRONMENT ;
              
    EXCEPTION 
      WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code,  
              ' MIGRATIONS_S_SP - MIGRATIONS_HEADER Error ' ||
              ' MIGRATION_ID = '  || in_MIGRATION_ID  ||
              ' ENVIRONMENT = '   || in_ENVIRONMENT   );
              
  END;    -- MIGRATION_HEADER_REF_CUR


  BEGIN   -- MIGRATION_DETAIL_REF_CUR

    OPEN out_MIGRATIONS_DETAIL_REF_CUR FOR
			  
    SELECT * 
      FROM  MIGRATIONS_DETAIL
      where MIGRATION_ID    = in_MIGRATION_ID
       and  ENVIRONMENT     = in_ENVIRONMENT
       ;
	  
    EXCEPTION 
      WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := substr(SQLERRM,1,200);
        errpkg.raise_err(v_code,  
              ' MIGRATIONS_S_SP - MIGRATIONS_DETAIL ' || 
              ' MIGRATION_ID = '  || in_MIGRATION_ID  ||
              ' ENVIRONMENT = '   || in_ENVIRONMENT   );
              
  END;    -- MIGRATION_DETAIL_REF_CUR

END MIGRATION_S_SP;


PROCEDURE MIGRATION_D_SP (
/*****************************************************************************
	MIGRATION_D_SP

	This procedure will Delete specified MIGRATION records

	MIGRATION_ID - ID of Migration Record to Delete
	ENVIRONMENT  - DEV, TEST, QA, PROD
	OBJECT_NAME	 - Name of Specific Object to Delete, If left as NULLs then
                  all Detail that match on ID and Environment will be Deleted.
  SELECT_CODE - Records to Delete "D" = Detail, "H" = Header, "B" = Both

created: 02/08/2012 TAL CCN Project....
changed:
*******************************************************************************/
/***  below are the fields required for the MIGRATION Delete ***/
	 in_MIGRATION_ID    in  varchar2
	,IN_ENVIRONMENT     in  varchar2
	,in_OBJECT_NAME     in  varchar2
  ,in_SELECT_CODE     in  varchar2
)

 is 
 v_code number;
 v_errm varchar2(500);
 v_count number;
    
-- Error #01
   migrations_select_exp          exception;
-- Error #02
   migrations_header_exp          exception;
-- Error #02
   migrations_detail_exp          exception;
    
BEGIN   --  Procedure

        IF  in_SELECT_CODE  not in  ('H', 'D', 'B' ) Then  -- Header, Detail, or Both
            raise migrations_select_exp;
--      See Error #01.
        End if;   --  Test for valid selection code

    BEGIN   -- Test for Delete Migartions_Detail

        IF  in_SELECT_CODE  =   'D'  
        or  in_SELECT_CODE  =   'B'   Then
        
            select  count(*)
              into v_count
              from MIGRATIONS_DETAIL
            where  MIGRATION_ID = in_MIGRATION_ID
             and   ENVIRONMENT  = in_ENVIRONMENT
--                 if in_Object_Name is NULL, then set in_Object_Name to Object_name              
             and   OBJECT_NAME  = NVL(in_OBJECT_NAME, MIGRATIONS_DETAIL.OBJECT_NAME); 
             
            If  v_count =  '0'   Then
                raise migrations_detail_exp;
--          See Error #02.
            Else
                DELETE  from  MIGRATIONS_DETAIL
                 where  MIGRATION_ID = in_MIGRATION_ID
                  and   ENVIRONMENT  = in_ENVIRONMENT
--                      if in_Object_Name is NULL, then set in_Object_Name to Object_name              
                  and   OBJECT_NAME  = NVL(in_OBJECT_NAME, MIGRATIONS_DETAIL.OBJECT_NAME); 
              
            End if;   --  Test for number of records = 0
             
        END IF;   --  Test for in_SELECT_CODE  =  'D'  or  'B'

    END;    -- Test for Delete Migartions_Detail

    BEGIN   -- Test for Delete Migartions_Header

        IF  in_SELECT_CODE  =   'H'  
        or  in_SELECT_CODE  =   'B'   Then
        
            select  count(*)
              into v_count
              from MIGRATIONS_HEADER
            where  MIGRATION_ID = in_MIGRATION_ID
             and   ENVIRONMENT  = in_ENVIRONMENT; 
             
            If  v_count =  '0'   Then
                raise migrations_header_exp;
--          See Error #03.
            Else            	
                DELETE  from  MIGRATIONS_HEADER
                 where  MIGRATION_ID = in_MIGRATION_ID
                  and   ENVIRONMENT  = in_ENVIRONMENT;
                 
            End if;   --  Test for number of records = 0
             
        END IF;   --  Test for in_SELECT_CODE  =  'H'  or  'B'

    END;    -- Test for Delete Migartions_Header
    
/*******************************************************************************
	  EXCEPTION ERRORS AREA
*******************************************************************************/	  
	
        EXCEPTION
          
-- Error #01
        when migrations_select_exp     then
            v_code := errnums.en_selection_code_err; 
            errpkg.raise_err(v_code, 'MIGRATION_D_SP.migrations_select_exp -' ||
            ' Selection code was entered as "' || in_SELECT_CODE || '".' ||
            ' Valid Values Are: "H" for Header, "D" for Detail, or "B" for Both.' );   

 -- Error #02
        when migrations_detail_exp     then
            v_code := errnums.en_migration_update_err; 
            errpkg.raise_err(v_code, 'MIGRATION_D_SP.migrations_detail_exp -' ||
            ' NO Migrations_Detail Records Found'       ||
            ' For: Migration_ID = ' || in_MIGRATION_ID  || ',' ||
            ' Environment = '       || in_ENVIRONMENT   || '.' );   

 -- Error #03
        when migrations_header_exp     then
            v_code := errnums.en_no_migrations_detail_err; 
            errpkg.raise_err(v_code, 'MIGRATION_D_SP.migrations_header_exp -' ||
            ' NO Migrations_Header Records Found'       ||
            ' For: Migration_ID = ' || in_MIGRATION_ID  || ',' ||
            ' Environment = '       || in_ENVIRONMENT   || '.' );  

 -- Error Others            
        when OTHERS then 
            v_code  := SQLCODE;
            v_errm  := substr(sqlerrm,1,200);
            errpkg.raise_err(v_code, 'MIGRATION_D_SP' ||    
             ' TABLE IS MIGRATIONS_HEADER/DETAIL');
 
end MIGRATION_D_SP;


 procedure MIGRATIONS_I_SP (
/*********************************************************************************
	MIGRATION_I_SP

	This procedure is intended to insert new MIGRATIONS_HEADER and MIGRATIONS_DETAIL
  Table rows

	OracleTableName -Table name for row -varible 
            (based on the table that was updated)
  XMLDATA   -  The data being inserted 
  
created: 02/07/2013 MDH CCN Project....
*********************************************************************************/
/***  below are the fields required for the ROWTYPE call: Table_name, Row_Data, Table_Rowtype ***/
 in_row_data              in  varchar2 --sys.xmltype
)
 is 
 v_code          number;
 v_errm          varchar2(500);
 v_row_value     varchar2(500);
 v_Row_data      sys.xmltype := xmltype(in_Row_data);
 v_migrations_hdr_rowtype  MIGRATIONS_HEADER%rowtype;
 v_migrations_dtl_rowtype  MIGRATIONS_DETAIL%rowtype; 
--
  no_migrations_detail_err    EXCEPTION;
--
--
--
cursor table_fields_hdr_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = 'MIGRATIONS_HEADER'
        order by column_id asc
      	;
--       
cursor table_fields_dtl_cur is

    	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = 'MIGRATIONS_DETAIL'
        order by column_id asc
      	;
        
begin
-- *************************************************************************
--               Convert MIGRATIONS_HEADER  XML to ROWTYPE                --
-- *************************************************************************
 for table_fields_rec in table_fields_hdr_cur loop
     
  if (v_Row_data.existsNode('/MIGRATIONS_UI/MIGRATIONS_HEADER/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then
        v_row_value := v_Row_data.extract('/MIGRATIONS_UI/MIGRATIONS_HEADER/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ; 
    else
          v_row_value := v_Row_data.extract('/MIGRATIONS_UI/MIGRATIONS_HEADER/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                              ; 
    end if;
    
 
/***  below is a list of all the fields in the table  ***/

	  CASE table_fields_rec.column_name
			when 'MIGRATION_ID'              then  v_migrations_hdr_rowtype.MIGRATION_ID            := v_row_value;
			when 'ENVIRONMENT'               then  v_migrations_hdr_rowtype.ENVIRONMENT             := v_row_value;
			when 'NAME'                      then  v_migrations_hdr_rowtype.NAME                    := v_row_value;
			when 'DESCRIPTION'               then  v_migrations_hdr_rowtype.DESCRIPTION             := v_row_value;
			when 'MIGRATION_DATE'            then  v_migrations_hdr_rowtype.MIGRATION_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
 			when 'MIGRATION_TIMESTAMP'       then  v_migrations_hdr_rowtype.MIGRATION_TIMESTAMP     := v_row_value;
			when 'STATUS'                    then  v_migrations_hdr_rowtype.STATUS                  := v_row_value;
			when 'UPDT_USER'                 then  v_migrations_hdr_rowtype.UPDT_USER               := v_row_value;
 			when 'UPDT_TIMESTAMP'            then  v_migrations_hdr_rowtype.UPDT_TIMESTAMP          := v_row_value;
     ELSE
			null;		
		END CASE;	   	

 ELSE
    null ;
 end if;
 
end loop ;
--
--
-- *************************************************************************
--                Convert MIGRATIONS_DETAIL  XML to ROWTYPE               --
-- *************************************************************************
--

 for table_fields_rec in table_fields_dtl_cur loop

  if (v_Row_data.existsNode('/MIGRATIONS_UI/MIGRATIONS_DETAIL/' || table_fields_rec.column_name ||'/text()') = 1) then

    if (table_fields_rec.data_type <> 'DATE') then
        v_row_value := rpad(v_Row_data.extract('/MIGRATIONS_UI/MIGRATIONS_DETAIL/' || table_fields_rec.column_name ||'/text()').getStringVal()
             ,table_fields_rec.column_size); 
    else
        v_row_value := rpad(v_Row_data.extract('/MIGRATIONS_UI/MIGRATIONS_DETAIL/' || table_fields_rec.column_name ||'/text()').getStringVal()
                                       ,10); 
    end if;
 
/***  below is a list of all the fields in the table  ***/

	  CASE table_fields_rec.column_name
			when 'MIGRATION_ID'              then  v_migrations_dtl_rowtype.MIGRATION_ID            := v_row_value;
			when 'ENVIRONMENT'               then  v_migrations_dtl_rowtype.ENVIRONMENT             := v_row_value;
			when 'OBJECT_NAME'               then  v_migrations_dtl_rowtype.OBJECT_NAME             := v_row_value;
			when 'OBJECT_PATH'               then  v_migrations_dtl_rowtype.OBJECT_PATH             := v_row_value;
			when 'OBJECT_TYPE'               then  v_migrations_dtl_rowtype.OBJECT_TYPE             := v_row_value;
 			when 'VERSION'                   then  v_migrations_dtl_rowtype.VERSION                 := v_row_value;
			when 'UPDT_USER'                 then  v_migrations_dtl_rowtype.UPDT_USER               := v_row_value;
 			when 'UPDT_TIMESTAMP'            then  v_migrations_dtl_rowtype.UPDT_TIMESTAMP          := v_row_value;
     ELSE
			null;		
		END CASE;	   	

 ELSE
    null ;
 end if;

end loop ;
--
--
--  Make sure there is a MIGRATIONS_DETAIL record to be stored when header is stored.
if v_migrations_dtl_rowtype.ENVIRONMENT    is null  or
   v_migrations_dtl_rowtype.OBJECT_NAME    is null  or 
   v_migrations_dtl_rowtype.OBJECT_PATH    is null  or 
   v_migrations_dtl_rowtype.OBJECT_TYPE    is null  or 
   v_migrations_dtl_rowtype.VERSION        is null  or 
   v_migrations_dtl_rowtype.UPDT_TIMESTAMP is null  then 
      raise no_migrations_detail_err;
 end if;
--
--
   v_migrations_hdr_rowtype.MIGRATION_ID   := MIGRATION_ID_SEQ.nextval;
   v_migrations_hdr_rowtype.UPDT_TIMESTAMP := CURRENT_TIMESTAMP;
   v_migrations_dtl_rowtype.MIGRATION_ID   := v_migrations_hdr_rowtype.MIGRATION_ID;
   v_migrations_dtl_rowtype.UPDT_TIMESTAMP := CURRENT_TIMESTAMP;   
--   OUT_MIGRATIONS_HEADER   :=  v_migrations_hdr_rowtype;
--
--  insert into MIGRATIONS_HEADER Table
--                  
      insert into MIGRATIONS_HEADER values v_migrations_hdr_rowtype;
--
--
--  insert into MIGRATIONS_DETAIL Table
--                  
      insert into MIGRATIONS_DETAIL values v_migrations_dtl_rowtype;      
      
      commit;
      
  EXCEPTION
         
   when no_migrations_detail_err then  
        v_code := errnums.en_no_migrations_detail_err;
        errpkg.raise_err(v_code, 'MIGRATIONS_I_SP.no_migrations_detail_err ',    
        'Migration ID "' || v_migrations_hdr_rowtype.MIGRATION_ID || '". ' || 
        'Environment "' || v_migrations_hdr_rowtype.ENVIRONMENT || '". ' ||         
        'CCN_MIGRATIONS_UI_PKG ' || 'No MIGRATIONS_DETAIL row was sent for processing. '); 
        
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
--      errpkg.raise_err(v_code, 'All_TABLE_COL_I_SP' ||
      errpkg.raise_err(v_code, 'MIGRATION_I_SP' ||      
             ' TABLE IS MIGRATIONS_HEADER/DETAIL');
 
end MIGRATIONS_I_SP;


PROCEDURE MIGRATION_U_SP (
/*******************************************************************************
	MIGRATION_U_SP

	This procedure is intended to Update MIGRATION tables for header null
  records.


created : 02/06/2012 blr CCN Project....
revised :  

*******************************************************************************/
 in_row_data             in  varchar2 --sys.xmltype
)  

 IS
  
 v_code                 number;
 v_errm                 varchar2(500);
 
--Select Header for Migration table 

CURSOR table_fields_hdr_cur is
     
       	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = 'MIGRATIONS_HEADER'
        order by column_id asc
      	;
--/* 
--Select Detail for Migration table


CURSOR table_fields_dtl_cur is
     
        	SELECT column_name
          ,data_length column_size
          ,data_type
      	FROM all_tab_columns
      	WHERE TABLE_NAME = 'MIGRATIONS_DETAIL'
        order by column_id asc
      	;        
--*/ 

 v_row_value              varchar2(1000); 
 v_Row_data               sys.xmltype := xmltype(in_Row_data); 
 v_migrate_hdr_rowtype    MIGRATIONS_HEADER%rowtype;
 v_migrate_dtl_rowtype    MIGRATIONS_DETAIL%rowtype; 
 v_migrate_hdr_rowtype2    MIGRATIONS_HEADER%rowtype;
 v_migrate_dtl_rowtype2    MIGRATIONS_DETAIL%rowtype; 
 v_table_name             varchar2(20)  :=  '                '; 
 migrations_update_err    EXCEPTION;
 
 V_HDR_NAME          VARCHAR2(30); 
 V_HDR_DESCRIPTION   VARCHAR2(20);   
 V_HDR_STATUS        VARCHAR2(07);  
 V_HDR_UPDT_USER     VARCHAR2(20); 
 V_HDR_UPDT_TIMESTAMP VARCHAR2(35);   
 
 V_DTL_OBJECT_PATH    VARCHAR2(200);
 V_DTL_OBJECT_TYPE    VARCHAR2(50);
 V_DTL_VERSION        VARCHAR2(50);  
 V_DTL_UPDT_USER      VARCHAR2(20);  
 V_DTL_UPDT_TIMESTAMP VARCHAR2(35);
              
--
--Mainline logic for setting up the Migration Header and Detail tables for updating a Migration.

BEGIN 
     
      
FOR TABLE_FIELDS_REC IN TABLE_FIELDS_HDR_CUR LOOP   
            
 if (v_Row_data.existsNode('/'|| 'MIGRATIONS_UI/MIGRATIONS_HEADER/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then
           v_row_value :=  
               v_Row_data.extract('/'|| 'MIGRATIONS_UI/MIGRATIONS_HEADER/' || table_fields_rec.column_name ||'/text()').getStringVal();                  
  
         else
       
           v_row_value := rpad(v_Row_data.extract('/'|| 'MIGRATIONS_UI/MIGRATIONS_HEADER/' ||  table_fields_rec.column_name ||'/text()').getStringVal()
                   ,10); 
                       
         end if;
    
     
/***  below is a list of all the fields in the table  ***/
--when 'MIGRATION_ID' 	then v_xml_migration_header_frag := v_xml_frag;

	  	case table_fields_rec.column_name
 			when 'MIGRATION_ID'              then  v_migrate_hdr_rowtype.MIGRATION_ID            := TO_NUMBER(v_row_value);
 			when 'ENVIRONMENT'               then  v_migrate_hdr_rowtype.ENVIRONMENT             := v_row_value;
			when 'NAME'                      then  v_migrate_hdr_rowtype.NAME                    := v_row_value;
			when 'DESCRIPTION'               then  v_migrate_hdr_rowtype.DESCRIPTION             := v_row_value;
			when 'MIGRATION_DATE'            then  v_migrate_hdr_rowtype.MIGRATION_DATE          := TO_DATE(v_row_value,'MM-DD-YYYY');
 			when 'MIGRATION_TIMESTAMP'       then  v_migrate_hdr_rowtype.MIGRATION_TIMESTAMP     := v_row_value;
			when 'STATUS'                    then  v_migrate_hdr_rowtype.STATUS                  := v_row_value;
			when 'UPDT_USER'                 then  v_migrate_hdr_rowtype.UPDT_USER               := v_row_value;
 			when 'UPDT_TIMESTAMP'            then  v_migrate_hdr_rowtype.UPDT_TIMESTAMP          := v_row_value;
  	ELSE
			     null;		
		  END CASE;	   	

 ELSE
    null ;
 end if;

end loop ; 

/*
dbms_output.put_line('HEADER OUTPUT ' );
dbms_output.put_line('migration_id= '          || v_migrate_hdr_rowtype.migration_id );
dbms_output.put_line('migration_environment= ' || v_migrate_hdr_rowtype.environment );
dbms_output.put_line('migration_name= '        || v_migrate_hdr_rowtype.name );
dbms_output.put_line('migration_description= ' || v_migrate_hdr_rowtype.description );
dbms_output.put_line('migration_status= '      || v_migrate_hdr_rowtype.status );
dbms_output.put_line('migration_updt_user= '   || v_migrate_hdr_rowtype.updt_user );
--
--
*/ 


--Align Detail for Migration table 

--/*

 

 for table_fields_rec in table_fields_dtl_cur loop
       

      
      if (v_Row_data.existsNode('/'|| 'MIGRATIONS_UI/MIGRATIONS_DETAIL/' || table_fields_rec.column_name ||'/text()') = 1) then

         if (table_fields_rec.data_type <> 'DATE') then          
             v_row_value :=  
                  v_Row_data.extract('/'|| 'MIGRATIONS_UI/MIGRATIONS_DETAIL/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
                   
          else
       
          v_row_value := rpad(v_Row_data.extract('/'|| 'MIGRATIONS_UI/MIGRATIONS_DETAIL/' || table_fields_rec.column_name ||'/text()').getStringVal()
                  ,10); 
                                               
        end if;
    
    
--*/ 
/***  below is a list of all the fields in the table  ***/
/***  not used		when 'EFFECTIVE_DATE'		then  v_OTHER_row.EFFECTIVE_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
/***  not used		when 'EXPIRATION_DATE'		then  v_OTHER_row.EXPIRATION_DATE		:= TO_DATE(v_row_value,'YYYYMMDD');   ***/
 
	  	case table_fields_rec.column_name
      when 'MIGRATION_ID'              then  v_migrate_dtl_rowtype.MIGRATION_ID            := TO_NUMBER(v_row_value);
 		  when 'ENVIRONMENT'               then  v_migrate_dtl_rowtype.ENVIRONMENT             := v_row_value;
  		when 'OBJECT_NAME'               then  v_migrate_dtl_rowtype.OBJECT_NAME             := v_row_value;
			when 'OBJECT_PATH'               then  v_migrate_dtl_rowtype.OBJECT_PATH             := v_row_value;
			when 'OBJECT_TYPE'               then  v_migrate_dtl_rowtype.OBJECT_TYPE             := v_row_value;
 			when 'VERSION'                   then  v_migrate_dtl_rowtype.VERSION                 := v_row_value;
			when 'UPDT_USER'                 then  v_migrate_dtl_rowtype.UPDT_USER               := v_row_value;
 			when 'UPDT_TIMESTAMP'            then  v_migrate_dtl_rowtype.UPDT_TIMESTAMP          := v_row_value;
  ELSE
			null;		
	  	END CASE;	   	

 ELSE
    null;
 end if;

end loop;

/* dbms_output.put_line('DETAIL OUTPUT ' );
 dbms_output.put_line('migration_id= '          || v_migrate_dtl_rowtype.migration_id );
 dbms_output.put_line('migration_environment= ' || v_migrate_dtl_rowtype.environment );
 dbms_output.put_line('migration_obj_name= '    || v_migrate_dtl_rowtype.object_name );
 dbms_output.put_line('migration_object_path= ' || v_migrate_dtl_rowtype.object_path );
 dbms_output.put_line('migration_object_type= ' || v_migrate_dtl_rowtype.object_type );
 dbms_output.put_line('migration_version= '     || v_migrate_dtl_rowtype.version );
 dbms_output.put_line('migration_updt_user= '   || v_migrate_dtl_rowtype.updt_user );
*/
--
--
 
 
  IF ((v_migrate_hdr_rowtype.MIGRATION_ID =  v_migrate_dtl_rowtype.MIGRATION_ID) and           
      (v_migrate_hdr_rowtype.ENVIRONMENT  = v_migrate_dtl_rowtype.ENVIRONMENT)  ) THEN  
     
--UPDATE MIGRATIONS_HEADER;  

-- IF v_migrate_hdr_rowtype.MIGRATION_DATE  is not null then
    v_migrate_hdr_rowtype.MIGRATION_DATE  := CURRENT_DATE;
    v_migrate_hdr_rowtype.MIGRATION_TIMESTAMP := CURRENT_TIMESTAMP;
-- END IF;    
 
    v_migrate_hdr_rowtype.UPDT_TIMESTAMP := CURRENT_TIMESTAMP;
/* 


  dbms_output.put_line('HEADER UPDATE ');    
 
 dbms_output.put_line('HEADER OUTPUT ' );
 dbms_output.put_line('migration_id= '          || v_migrate_hdr_rowtype.migration_id );
 dbms_output.put_line('migration_environment= ' || v_migrate_hdr_rowtype.environment );
 dbms_output.put_line('migration_name= '        || v_migrate_hdr_rowtype.name );
 dbms_output.put_line('migration_description= ' || v_migrate_hdr_rowtype.description );
 dbms_output.put_line('migration_status= '      || v_migrate_hdr_rowtype.status );
 dbms_output.put_line('migration_updt_user= '   || v_migrate_hdr_rowtype.updt_user );
  

     SELECT MIGRATION_ID, ENVIRONMENT INTO V_MIGRATE_HDR_ROWTYPE2.migration_id, V_MIGRATE_HDR_ROWTYPE2.environment
        from MIGRATIONS_HEADER
         WHERE MIGRATION_ID   = v_migrate_hdr_rowtype.MIGRATION_ID   
              and ENVIRONMENT   = v_migrate_hdr_rowtype.ENVIRONMENT;  
 */               
         UPDATE MIGRATIONS_HEADER 
         SET   NAME             = v_migrate_hdr_rowtype.name, 
               DESCRIPTION      = v_migrate_hdr_rowtype.description, 
               MIGRATION_DATE   = v_migrate_hdr_rowtype.migration_date, 
               MIGRATION_TIMESTAMP   = v_migrate_hdr_rowtype.migration_timestamp, 
               STATUS           = v_migrate_hdr_rowtype.status,                
               UPDT_USER        = v_migrate_hdr_rowtype.updt_user, 
               UPDT_TIMESTAMP   = v_migrate_hdr_rowtype.updt_timestamp 
           WHERE MIGRATION_ID   = v_migrate_hdr_rowtype.MIGRATION_ID   
              and ENVIRONMENT   = v_migrate_hdr_rowtype.ENVIRONMENT;     
         
              
           COMMIT;   
       
--/*

 --UPDATE MIGRATIONS_DETAIL;
   
  v_migrate_dtl_rowtype.UPDT_TIMESTAMP := CURRENT_TIMESTAMP;  
  v_table_name := 'migrations_detail'; 
 

  v_table_name := 'MIGRATIONS_DETAIL';
  
 /*  SELECT MIGRATION_ID, ENVIRONMENT , OBJECT_NAME
   INTO V_MIGRATE_DTL_ROWTYPE2.migration_id, V_MIGRATE_DTL_ROWTYPE2.environment, V_MIGRATE_DTL_ROWTYPE2.OBJECT_NAME 
        from MIGRATIONS_DETAIL
         WHERE MIGRATION_ID   = v_migrate_hdr_rowtype.MIGRATION_ID   
              and ENVIRONMENT   = v_migrate_hdr_rowtype.ENVIRONMENT 
              and OBJECT_NAME  = v_migrate_dtl_rowtype.OBJECT_NAME; 
*/             
        UPDATE MIGRATIONS_DETAIL  
          SET OBJECT_PATH     = v_migrate_dtl_rowtype.object_path ,
              OBJECT_TYPE     = v_migrate_dtl_rowtype.object_type,
              VERSION         = v_migrate_dtl_rowtype.version,  
              UPDT_USER       = v_migrate_dtl_rowtype.updt_user,  
              UPDT_TIMESTAMP  = v_migrate_dtl_rowtype.UPDT_TIMESTAMP
          Where MIGRATION_ID  = v_migrate_dtl_rowtype.MIGRATION_ID   
             and ENVIRONMENT  = v_migrate_dtl_rowtype.ENVIRONMENT
             and OBJECT_NAME  = v_migrate_dtl_rowtype.OBJECT_NAME;
             
  
          COMMIT;  
           
   ELSE  
 
                 RAISE  migrations_update_err;
      
      
     
          
END IF;    
       
--*/        
          

--EXCEPTION ROUTINE FOR ERRORS  ----

 EXCEPTION
  
    when  migrations_update_err then  
	    v_code := errnums.en_migration_update_err ;
	    errpkg.raise_err(v_code, 'MIGRATION_U_SP.migrations_update_err  ' ,
        'MIGRATION_UI_PKG ' || 
        'Selected Migration_Id for Header was "' || v_migrate_hdr_rowtype.migration_id || ', ' || 
        'Selected ENVIRONMENT for Header was "' || v_migrate_hdr_rowtype.environment || ', ' || 
        'Selected Migration_Id for Detail was "' || v_migrate_dtl_rowtype.migration_id || ', ' ||         
        'Selected ENVIRONMENT for Detail was "' || v_migrate_dtl_rowtype.environment || ', ' ||
        'Problem: DETAIL & HEADER keys do not match cannot update. '); 
         
	  WHEN OTHERS THEN 
      v_code  := SQLCODE;
      v_errm  := substr(SQLERRM,1,200);
      errpkg.raise_err(v_code, 'MIGRATION_U_SP' ||
             'TABLE_NAME' || V_TABLE_NAME);
             
END MIGRATION_U_SP;

END MIGRATIONS_PKG;

