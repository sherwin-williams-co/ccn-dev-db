create or replace package body CCN_MARKETING_SQ_FT_LOAD AS 
/****************************************************************************** 
This package is intended update the data in Marketing table 

Created : 12/05/2017 axt754 -- CCN Project Team...
Changed : 
******************************************************************************/

PROCEDURE UPDATE_PROCESS(
/****************************************************************************** 
This procedures takes care of following things 
  # Updates the Marketing table with TOTAL_SQ_FT,SALES_SQ_FT and WAREHOUSE_SQ_FT
  # This will update all rows in marketing for a given COST_CENTER_CODE irrespective
    of EFFECTIVE_DATE

Created : 12/05/2017 axt754 -- CCN Project Team
Changes :
******************************************************************************/
    IN_COST_CENTER_CODE   IN     VARCHAR2,
    IN_LEASE_OR_OWNED     IN     VARCHAR2,
    IN_TOTAL_SQ_FT        IN     VARCHAR2,
    IN_SALES_SQ_FT        IN     VARCHAR2)    
IS
BEGIN
    UPDATE COST_CENTER
       SET LEASE_OWN_CODE   = IN_LEASE_OR_OWNED
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND NVL(LEASE_OWN_CODE,'X') <> NVL(IN_LEASE_OR_OWNED, 'X');

    UPDATE MARKETING
       SET TOTAL_SQ_FT     = IN_TOTAL_SQ_FT,
           SALES_SQ_FT     = IN_SALES_SQ_FT,
           WAREHOUSE_SQ_FT = IN_TOTAL_SQ_FT - IN_SALES_SQ_FT
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
       AND (NVL(SALES_SQ_FT,-1) <> NVL(IN_SALES_SQ_FT,-1) OR NVL(TOTAL_SQ_FT,-1) <> NVL(IN_TOTAL_SQ_FT,-1));
EXCEPTION
    WHEN OTHERS THEN
      ERRPKG.RAISE_ERR(SQLCODE, 'UPDATE_MARKETING ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END UPDATE_PROCESS;

PROCEDURE UI_PROCESS_SQ_FT_LD
/****************************************************************************** 
This procedures takes care of following things as part of batch load process from UI
  # Get the data from UI
  # Upload the file on DB SERVER
  # call the batch process

Created : 12/05/2017 axt754 -- CCN Project Team
Changes : 04/03/2018 sxh487 Added exception block in the select 
           Added logging for cost centers that does not have marketing information 
           Added polling flags reset to suppress pos downloads triggers
        : 04/13/2018 sxh487 Moved the Update_Process outside the IF condition
******************************************************************************/
IS
    V_CC_CLOB           CLOB;
    V_BULK_LOAD_LKUP_ID NUMBER;
BEGIN
    POS_DATA_GENERATION.SET_FLAG_POLLING_BULK_LOADS('UI_SQ_FT_LOAD', V_BULK_LOAD_LKUP_ID);
    -- Start Batch Process
    FOR rec IN (SELECT A.*, CC.COST_CENTER_CODE CC_CODE, M.COST_CENTER_CODE MRKT_CC_CODE
                  FROM TEMP_MARKETING_SQ_FT_UPD A,
                       COST_CENTER CC,
                       MARKETING M
                 --Get al records from external table even if they are not present in CCN
                 WHERE A.COST_CENTER_CODE = CC.COST_CENTER_CODE(+)
                   AND A.COST_CENTER_CODE = M.COST_CENTER_CODE(+)
                   --null lease own codes are for offices as per Sachin's team, so ignore those
                   AND A.LEASE_OWN_CODE IS NOT NULL
                 --Consider only the records that needs to be updated
                 --This avoids unnecessary looping of data every day
                   AND (NVL(A.LEASE_OWN_CODE,'X') <> NVL(CC.LEASE_OWN_CODE, 'X')
                        OR
                        NVL(A.SALES_SQ_FT,-1) <> NVL(M.SALES_SQ_FT,-1)
                        OR
                        NVL(A.TOTAL_SQ_FT,-1) <> NVL(M.TOTAL_SQ_FT,-1))) LOOP
        IF rec.CC_CODE IS NULL THEN
           V_CC_CLOB := rec.COST_CENTER_CODE || ','|| ' Cost Center not present in CCN to update Lease Owned Code ' || CHR(10)|| V_CC_CLOB;
        ELSE
            IF rec.MRKT_CC_CODE IS NULL THEN
                V_CC_CLOB := V_CC_CLOB || REC.COST_CENTER_CODE ||  ','|| ' Marketing information is not present in CCN to update Sq Footage details'||CHR(10); 
            END IF;
            UPDATE_PROCESS(rec.COST_CENTER_CODE,
                           rec.LEASE_OWN_CODE,
                           rec.TOTAL_SQ_FT,
                           rec.SALES_SQ_FT);
        END IF;
    END LOOP;

    IF V_CC_CLOB <> EMPTY_CLOB() THEN
        V_CC_CLOB := 'COST_CENTER_CODE, '|| 'COMMENTS'  ||CHR(10)||V_CC_CLOB;
        MAIL_PKG.SEND_MAIL('SQ_FT_CC_NOT_EXISTS_IN_CCN', NULL, NULL,V_CC_CLOB);
    END IF;
    -- Commit The transactions 
    COMMIT;
    POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
EXCEPTION
    WHEN OTHERS THEN
        -- The below call to reset the flag should always be the first line of the exception block
        -- If re-set doesn't happen, polling process will be turned off for that duration. By putting
        -- this call in the first line of exception block we make sure no other errors blocks the reset process
        POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESS_SQ_FT_LD ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END UI_PROCESS_SQ_FT_LD;

PROCEDURE BATCH_PROCESS_SQ_FT_LD
/****************************************************************************** 
This procedures takes care of following things as part of batch load process
  # Get the data from SWC_PN_SQFT_INT_V
  # Compares the data
  # updates the data if there are any changes

Created : 02/09/2018 axt754 -- CCN Project Team
Changes : 04/13/2018 sxh487 Moved the Update_Process outside the IF condition
******************************************************************************/
IS 
    V_CC_CLOB           CLOB;
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
    V_BULK_LOAD_LKUP_ID NUMBER;
BEGIN
    POS_DATA_GENERATION.SET_FLAG_POLLING_BULK_LOADS('BATCH_SQ_FT_LOAD', V_BULK_LOAD_LKUP_ID);
    CCN_BATCH_PKG.INSERT_BATCH_JOB('SQ_FT_BATCH', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    -- Start Batch Process
    BEGIN    
        FOR REC IN (SELECT A.*, CC.COST_CENTER_CODE CC_CODE, M.COST_CENTER_CODE MRKT_CC_CODE
                      FROM SWC_PN_SQFT_INT_V A,
                           COST_CENTER CC,
                           MARKETING M
                     --Get al records from external table even if they are not present in CCN
                     WHERE A.COST_CENTER = CC.COST_CENTER_CODE(+)
                       AND A.COST_CENTER = M.COST_CENTER_CODE(+)
                       --null lease own codes are for offices as per Sachin's team, so ignore those
                       AND A.LEASE_OR_OWNED IS NOT NULL
                     --Consider only the records that needs to be updated
                     --This avoids unnecessary looping of data every day
                       AND (NVL(A.LEASE_OR_OWNED,'X') <> NVL(CC.LEASE_OWN_CODE, 'X')
                            OR
                            NVL(A.SALES_AREA,-1) <> NVL(M.SALES_SQ_FT,-1)
                            OR
                            NVL(A.PREMISES_SQ_FT,-1) <> NVL(M.TOTAL_SQ_FT,-1))) LOOP
            IF rec.CC_CODE IS NULL THEN
                V_CC_CLOB := rec.COST_CENTER || ','|| ' Cost Center not present in CCN to update Lease Owned Code ' || CHR(10)|| V_CC_CLOB;
            ELSE
                IF rec.MRKT_CC_CODE IS NULL THEN
                    V_CC_CLOB := V_CC_CLOB || REC.COST_CENTER ||  ','|| ' Marketing information is not present in CCN to update Sq Footage details'||CHR(10); 
                END IF;
                UPDATE_PROCESS(rec.COST_CENTER,
                               rec.LEASE_OR_OWNED,
                               rec.PREMISES_SQ_FT,
                               rec.SALES_AREA);
            END IF;
        END LOOP;
        IF V_CC_CLOB <> EMPTY_CLOB() THEN
            V_CC_CLOB := 'COST_CENTER_CODE, '|| 'COMMENTS'  ||CHR(10)||V_CC_CLOB;
            MAIL_PKG.SEND_MAIL('SQ_FT_CC_NOT_EXISTS_IN_CCN', NULL, NULL,V_CC_CLOB);
        END IF;
        -- Commit The transactions 
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('SQ_FT_BATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
EXCEPTION
    WHEN OTHERS THEN
        -- The below call to reset the flag should always be the first line of the exception block
        -- If re-set doesn't happen, polling process will be turned off for that duration. By putting
        -- this call in the first line of exception block we make sure no other errors blocks the reset process
        POS_DATA_GENERATION.RESET_FLAG_POLLING_BULK_LOADS(V_BULK_LOAD_LKUP_ID);
        ERRPKG.RAISE_ERR(SQLCODE, 'BATCH_PROCESS_SQ_FT_LD ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BATCH_PROCESS_SQ_FT_LD;

PROCEDURE LOAD_SWC_PN_SQFT_INT
/******************************************************************************
This procedures takes care of following things as part of batch load process
  # Get the data from SWC_PN_SQFT_INT_V and load to CCN_SWC_PN_SQFT_INT table

Created : 07/10/2018 kxm302 -- CCN Project Team
*******************************************************************************/
IS
     CURSOR SWC_PN_SQFT_INT_V_CUR_NEW_RECS IS
     SELECT *
          FROM SWC_PN_SQFT_INT_V A
         --get all the records that are not present in CCN_SWC_PN_SQFT_INT  table
         WHERE NOT EXISTS (SELECT 1
                             FROM CCN_SWC_PN_SQFT_INT
                            WHERE A.COST_CENTER = COST_CENTER); 
 
     CURSOR SWC_PN_SQFT_INT_V_EXTNG_RECS IS
        SELECT *
          FROM SWC_PN_SQFT_INT_V A
         --get all the records that are present in SWC_PN_SQFT_INT_V but any of the values changed
         WHERE EXISTS (SELECT 1
                         FROM CCN_SWC_PN_SQFT_INT B
                        WHERE A.COST_CENTER = COST_CENTER
                          AND (A.SALES_AREA <> B.Leasing_Sales_Sq_Ft OR
                               A.PREMISES_SQ_FT <> B.Leasing_Total_Sq_Ft OR
                               A.LEASE_OR_OWNED   <> B.LEASE_OR_OWNED   OR
                               A.DIVISION <> B.DIVISION));

    V_BATCH_NUMBER                    BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS                    BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('LD_SWC_SQFT_BATCH', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;    

    FOR rec IN SWC_PN_SQFT_INT_V_CUR_NEW_RECS LOOP --Loop through new records and insert into CCN
        BEGIN
            INSERT INTO CCN_SWC_PN_SQFT_INT(DIVISION,COST_CENTER,Leasing_Sales_Sq_Ft,Leasing_Total_Sq_Ft,LEASE_OR_OWNED) 
                VALUES (rec.DIVISION, rec.COST_CENTER, rec.SALES_AREA, rec.PREMISES_SQ_FT, rec.LEASE_OR_OWNED);
        EXCEPTION
            WHEN OTHERS THEN 
                V_TRANS_STATUS := 'ERROR';
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LD_SWC_SQFT_BATCH', SUBSTR(SQLERRM,1,500), rec.COST_CENTER);
        END;
    END LOOP;

    FOR rec IN SWC_PN_SQFT_INT_V_EXTNG_RECS LOOP --Loop through existing records,backup and update in CCN
        BEGIN
            UPDATE CCN_SWC_PN_SQFT_INT
               SET Leasing_Sales_Sq_Ft    = rec.SALES_AREA,
                   Leasing_Total_Sq_Ft    = rec.PREMISES_SQ_FT,
                   LEASE_OR_OWNED         = rec.LEASE_OR_OWNED,
                   DIVISION               = rec.DIVISION
             WHERE COST_CENTER            = rec.COST_CENTER;
            -- insert into History table 
            INSERT INTO CCN_SWC_PN_SQFT_INT_HIST(DIVISION,COST_CENTER,Leasing_Sales_Sq_Ft,Leasing_Total_Sq_Ft,LEASE_OR_OWNED,LOAD_DATE) 
                VALUES (rec.DIVISION, rec.COST_CENTER, rec.SALES_AREA, rec.PREMISES_SQ_FT, rec.LEASE_OR_OWNED,SYSDATE);
        EXCEPTION
            WHEN OTHERS THEN                 
                V_TRANS_STATUS := 'ERROR';
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LD_SWC_SQFT_BATCH', SUBSTR(SQLERRM,1,500), rec.COST_CENTER);
        END;
    END LOOP;

    COMMIT;

    CCN_BATCH_PKG.UPDATE_BATCH_JOB('LD_SWC_SQFT_BATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    MAIL_PKG.SEND_MAIL('LOAD_SWC_PN_SQFT_INT', NULL, NULL, NULL);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||'LOAD_SWC_PN_SQFT_INT'  || ' errors found');
END LOAD_SWC_PN_SQFT_INT;

END CCN_MARKETING_SQ_FT_LOAD;