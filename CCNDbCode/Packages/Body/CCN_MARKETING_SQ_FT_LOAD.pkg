create or replace package body CCN_MARKETING_SQ_FT_LOAD AS 
/****************************************************************************** 
This package is intended update the data in Marketing table 

Created : 12/05/2017 axt754 -- CCN Project Team...
Changed : 
******************************************************************************/

PROCEDURE UPDATE_PROCESS(
/****************************************************************************** 
This procedures takes care of following things 
  # Updates the Marketing table with TOTAL_SQ_FT,SALES_SQ_FT and WAREHOUSE_SQ_FT
  # This will update all rows in marketing for a given COST_CENTER_CODE irrespective
    of EFFECTIVE_DATE

Created : 12/05/2017 axt754 -- CCN Project Team
Changes :
******************************************************************************/
    IN_COST_CENTER_CODE   IN     VARCHAR2,
    IN_LEASE_OR_OWNED     IN     VARCHAR2,
    IN_TOTAL_SQ_FT        IN     VARCHAR2,
    IN_SALES_SQ_FT        IN     VARCHAR2)    
IS
BEGIN
    UPDATE COST_CENTER
       SET LEASE_OWN_CODE   = IN_LEASE_OR_OWNED
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND NVL(LEASE_OWN_CODE,'X') <> NVL(IN_LEASE_OR_OWNED, 'X');

    UPDATE MARKETING
       SET TOTAL_SQ_FT     = IN_TOTAL_SQ_FT,
           SALES_SQ_FT     = IN_SALES_SQ_FT,
           WAREHOUSE_SQ_FT = IN_TOTAL_SQ_FT - IN_SALES_SQ_FT
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
       AND (NVL(SALES_SQ_FT,-1) <> NVL(IN_SALES_SQ_FT,-1) OR NVL(TOTAL_SQ_FT,-1) <> NVL(IN_TOTAL_SQ_FT,-1));
EXCEPTION
    WHEN OTHERS THEN
      ERRPKG.RAISE_ERR(SQLCODE, 'UPDATE_MARKETING ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END UPDATE_PROCESS;

PROCEDURE UI_PROCESS_SQ_FT_LD
/****************************************************************************** 
This procedures takes care of following things as part of batch load process from UI
  # Get the data from UI
  # Upload the file on DB SERVER
  # call the batch process

Created : 12/05/2017 axt754 -- CCN Project Team
Changes :
******************************************************************************/
IS
    V_COST_CENTER_REC COST_CENTER%ROWTYPE;
    V_CC_CLOB         CLOB;
BEGIN
    -- Start Batch Process
    FOR REC IN (SELECT *
                  FROM TEMP_MARKETING_SQ_FT_UPD) LOOP
        V_COST_CENTER_REC := NULL;
        BEGIN
            SELECT *
              INTO V_COST_CENTER_REC
              FROM COST_CENTER
             WHERE COST_CENTER_CODE = REC.COST_CENTER_CODE;

            IF V_COST_CENTER_REC.COST_CENTER_CODE IS NULL THEN
                V_CC_CLOB := REC.COST_CENTER_CODE ||CHR(10)|| V_CC_CLOB;
            ELSE
                UPDATE_PROCESS(V_COST_CENTER_REC.COST_CENTER_CODE,
                               REC.LEASE_OWN_CODE,
                               REC.TOTAL_SQ_FT,
                               REC.SALES_SQ_FT);
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                V_CC_CLOB := REC.COST_CENTER_CODE ||CHR(10)|| V_CC_CLOB;
        END;
    END LOOP;

    IF V_CC_CLOB <> EMPTY_CLOB() THEN
        V_CC_CLOB := 'COST_CENTER_CODE'||CHR(10)||V_CC_CLOB;
        MAIL_PKG.SEND_MAIL('SQ_FT_CC_NOT_EXISTS_IN_CCN', NULL, NULL,V_CC_CLOB);
    END IF;
    -- Commit The transactions 
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PROCESS_SQ_FT_LD ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END UI_PROCESS_SQ_FT_LD;

PROCEDURE BATCH_PROCESS_SQ_FT_LD
/****************************************************************************** 
This procedures takes care of following things as part of batch load process
  # Get the data from SWC_PN_SQFT_INT_V
  # Compares the data
  # updates the data if there are any changes

Created : 02/09/2018 axt754 -- CCN Project Team
Changes :
******************************************************************************/
IS 
    
    V_COST_CENTER_REC COST_CENTER%ROWTYPE;
    V_CC_CLOB         CLOB;
    V_BATCH_NUMBER    BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS    BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    BEGIN
        CCN_BATCH_PKG.INSERT_BATCH_JOB('SQ_FT_BATCH', V_BATCH_NUMBER);
        CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
        -- Start Batch Process
        FOR REC IN (SELECT *
                      FROM SWC_PN_SQFT_INT_V) LOOP
            V_COST_CENTER_REC := NULL;
            BEGIN
                SELECT *
                  INTO V_COST_CENTER_REC
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = REC.COST_CENTER;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            IF V_COST_CENTER_REC.COST_CENTER_CODE IS NULL THEN
                V_CC_CLOB := REC.COST_CENTER ||CHR(10)|| V_CC_CLOB;
            ELSE
               UPDATE_PROCESS(V_COST_CENTER_REC.COST_CENTER_CODE,
                              REC.LEASE_OR_OWNED,
                              REC.PREMISES_SQ_FT,
                              REC.SALES_AREA);
            END IF;
        END LOOP;
        
        IF V_CC_CLOB <> EMPTY_CLOB() THEN
            V_CC_CLOB := 'COST_CENTER_CODE'||CHR(10)||V_CC_CLOB;
            MAIL_PKG.SEND_MAIL('SQ_FT_CC_NOT_EXISTS_IN_CCN', NULL, NULL,V_CC_CLOB);
        END IF;
        -- Commit The transactions 
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('SQ_FT_BATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BATCH_PROCESS_SQ_FT_LD ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BATCH_PROCESS_SQ_FT_LD;

END CCN_MARKETING_SQ_FT_LOAD;