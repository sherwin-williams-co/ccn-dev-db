create or replace PACKAGE BODY COST_CENTER_DELETE_PKG AS
/**********************************************************
This Package contains all the procedures used to deal with
removing/archiving a cost center from CCN database

Created : 03/16/2016 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE STORE_CC_DELETE_GUID(
/**********************************************************
	This procedure will recursively check and insert the guid for
  cost center being remvoed

IN_COST_CENTER - Input Cost Center to be removed

created : 05/03/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_COST_CENTER IN VARCHAR2)
IS
    V_RANDOM_NUMBER       VARCHAR2(16);
BEGIN
    SELECT DBMS_RANDOM.STRING('A', 16) INTO V_RANDOM_NUMBER FROM DUAL;

    INSERT INTO CC_DELETION_GUIDS VALUES (V_RANDOM_NUMBER, IN_COST_CENTER, SYSDATE);

    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STORE_CC_DELETE_GUID(IN_COST_CENTER);
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER, 'STORE_CC_DELETE_GUID', SQLERRM, SQLCODE);
        RAISE;
END STORE_CC_DELETE_GUID;

PROCEDURE ARCHIVE_COST_CENTER_DTLS(
/**********************************************************
	This procedure will archive all the tables for the passed cost center

IN_COST_CENTER - Input Cost Center to be removed

created : 03/15/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN

   --SQL Statement to archive the cost center records from all cost center related Tables
   FOR REC IN (SELECT 'INSERT INTO ARC_' || TABLE_NAME || ' SELECT A.*, SYSDATE FROM '||TABLE_NAME||' A WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''' AS VALUE 
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY TABLE_ORDER DESC) LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := REC.VALUE;
   END LOOP;
   
   --SQL Statement to archive the cost center records from Hierarchy_Detail Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ARC_HIERARCHY_DETAIL SELECT A.*, SYSDATE FROM HIERARCHY_DETAIL A '||
                                                           ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%'' '||
                                                           '    OR HRCHY_DTL_NEXT_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%''';

   --SQL Statement to archive the cost center records from Audit_Log Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ARC_AUDIT_LOG SELECT A.*, SYSDATE FROM AUDIT_LOG A '||
                                                           ' WHERE TRANSACTION_ID  LIKE ''%'|| IN_COST_CENTER ||'%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
   
   --Commit all the changes in the database
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER, 'ARCHIVE_COST_CENTER_DTLS', SQLERRM, SQLCODE);
      RAISE;
END ARCHIVE_COST_CENTER_DTLS;

PROCEDURE DELETE_COST_CENTER_DTLS(
/**********************************************************
	This procedure will delete the passed cost center

IN_COST_CENTER - Input Cost Center to be removed

created : 03/15/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN

   --SQL Statement to delete the cost center records from all cost center related Tables
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM POLLING_HST WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''';
   FOR REC IN (SELECT 'DELETE FROM '||TABLE_NAME||' WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''' AS VALUE 
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY TABLE_ORDER DESC) LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := REC.VALUE;
   END LOOP;
   
   --SQL Statement to delete the cost center records from Hierarchy_Detail Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM HIERARCHY_DETAIL '||
                                                           ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%'' '||
                                                           '    OR HRCHY_DTL_NEXT_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%''';

   --SQL Statement to delete the cost center records from Audit_Log Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'DELETE FROM AUDIT_LOG '||
                                                           ' WHERE TRANSACTION_ID  LIKE ''%'|| IN_COST_CENTER ||'%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
   
   --Commit all the changes in the database
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER, 'DELETE_COST_CENTER_DTLS', SQLERRM, SQLCODE);
      RAISE;
END DELETE_COST_CENTER_DTLS;

PROCEDURE DELETE_COST_CENTER
/**********************************************************
	This procedure is the core procedure that gets invoked
	for bulk cost center deletions from CCN application

created : 03/15/2016 jxc517 CCN Project Team...
modified: 
**********************************************************/
IS
BEGIN

   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   FOR rec IN (SELECT * FROM TEMP_COST_CENTER_DELETE) LOOP
       SAVEPOINT CC_DELETE;
       BEGIN
           ARCHIVE_COST_CENTER_DTLS(rec.COST_CENTER_CODE);
           DELETE_COST_CENTER_DTLS(rec.COST_CENTER_CODE);
           STORE_CC_DELETE_GUID(rec.COST_CENTER_CODE);
       EXCEPTION
           WHEN OTHERS THEN
               COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'DELETE_COST_CENTER', SQLERRM, SQLCODE);
               ROLLBACK TO CC_DELETE;
       END;
   END LOOP;
   
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'DELETE_COST_CENTER', SQLERRM, SQLCODE);
      RAISE;
END DELETE_COST_CENTER;

END COST_CENTER_DELETE_PKG;