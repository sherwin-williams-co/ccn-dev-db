create or replace PACKAGE body errpkg
/*********************************************************** 
This package will hold all procedures/functions used to process business
and system errors throughout the entire CCN applications

created : 12/02/11 blr CCN project
revisions: 

************************************************************/
IS

PROCEDURE raise_err (
/*********************************************************** 
This procedure will raise errors to the calling procedure/application
depending on the error number input data. 


created : 12/02/11 blr CCN project
revisions: 

************************************************************/
err_in IN INTEGER, 
err_proc_in IN VARCHAR2
,err_text_in IN VARCHAR2 := NULL) 
IS
BEGIN
/*
   All calls to raise errors will be sent errtext to get correct text to return
   	using errtext();
	genral Layout: 
		if application error: -20000 to -29999
			..any special processing  for specific numbers
			then will raise applicaiton error
			
		if system error....
		..any special processing  for specific numbers		
		raise to calling object.....
*/

  --this is just an example of how procedure can be used
  IF err_in BETWEEN -20998 AND -20000 THEN
    RAISE_APPLICATION_ERROR (err_in, errtext(err_in, err_proc_in, err_text_in));
   
  ELSIF err_in IN (100, -1403) THEN
    RAISE NO_DATA_FOUND;
  ELSIF err_in = -20999 THEN
    RAISE_APPLICATION_ERROR (err_in, errtext(err_in, err_proc_in, err_text_in));
  ELSE
  /*********************************************************** 
  This is an example of how to raise an unknown error...doesn't need to be used.....
  
  created : 12/02/11 blr CCN project
  revisions: 
  ***********************************************************/ 
    EXECUTE IMMEDIATE(
    'DECLARE myexc EXCEPTION; ' ||
    ' PRAGMA EXCEPTION_INIT (myexc, ' ||
    TO_CHAR (err_in) || ');' ||
    'BEGIN RAISE myexc; END;'
    );
    
    
  END IF;
END;

FUNCTION errtext 
/*********************************************************** 
This function will determine correct message to be returned
depending on the error number input data. 

created : 12/02/11 blr CCN project
revisions: 

************************************************************/
(err_in IN INTEGER
,err_proc_in IN VARCHAR2
,err_text_in IN VARCHAR2 := NULL) 
  RETURN VARCHAR2 is
v_return_str varchar2(32000) := 'no message';
BEGIN

/*separated into application and system errors...
define the messages we want returnend.

This list should mainly be used for application errors

created: 12/08/2011 blr    CCN Project
*/
--example for coding ......  

  
--  if err_text_in is not null then
  	v_return_str := err_proc_in || ' ' ||err_text_in; 
--  end if;	
	
  if err_in = -20000 then
    v_return_str := ' IN PROCEDURE ' || err_proc_in || ' ' || err_text_in ||
     				' This error is not in the scope of defined numeric error';
  end if; 
  
  if err_in = -20999 then
    v_return_str := ' IN PROCEDURE ' || err_proc_in || ' ' || err_text_in ||
    				' Error has occured which is undefined in error handling package';
  end if;   
  
  return(v_return_str);
 END errtext;

PROCEDURE insert_error_log_sp  (
/*******************************************************************************
  This Procedure logs Processing Errors to the ERROR_LOG Table
  
Created: 04/15/2013 SH
*******************************************************************************/
    in_code         IN   VARCHAR2
   ,in_proc         IN   VARCHAR2
   ,in_errm         IN   VARCHAR2  
   ,in_cost_center  IN   VARCHAR2
   )

IS
   pragma autonomous_transaction;
   
BEGIN

   insert into error_log (
          error_id
        , cost_center
        , error_date
        , module
        , error_text
        , notes
        , error_code
        )
        
        values (
                error_log_seq.nextval
              , in_cost_center
              , sysdate
              , substr(in_proc,1,20)
              , in_errm
              , null
              , in_code
              );

   commit;
   
   exception
   
      when others then
        dbms_output.put_line(' INSERT_ERROR_LOG_SP Failed '|| substr(sqlerrm, 1, 200));
      
      
END insert_error_log_sp;

PROCEDURE STORE_WARNINGS(
/*******************************************************************************
  This Procedure logs Processing Warnings into the Memory Table
  
Created: 10/24/2013 SH
*******************************************************************************/
   err_Code IN VARCHAR2,
   err_Msg  IN VARCHAR2)
IS
   V_INDEX NUMBER;
BEGIN
   --Below two statements will store the passed inputs into the memory ERROR_WARNINGS_TABLE
   --this should be stored on top of the 
   V_INDEX := NVL(ERROR_WARNINGS_TABLE.LAST,0)+1;
   ERRPKG.ERROR_WARNINGS_TABLE(V_INDEX).ERR_CODE := err_Code;
   ERRPKG.ERROR_WARNINGS_TABLE(V_INDEX).ERR_MSG := err_Msg;
EXCEPTION
   WHEN OTHERS THEN
      dbms_output.put_line(' STORE_WARNINGS Failed '|| substr(sqlerrm, 1, 200));
END STORE_WARNINGS;

PROCEDURE RAISE_WARNINGS
/*******************************************************************************
  This Procedure raises first of the stored Warnings from the Memory Table
  
Created: 10/24/2013 SH
*******************************************************************************/
IS
   v_err_Code VARCHAR2(100);
   v_err_Msg  VARCHAR2(500);
BEGIN
   FOR i IN 1..ERROR_WARNINGS_TABLE.COUNT LOOP
      v_err_Code := ERROR_WARNINGS_TABLE(i).ERR_CODE;
      v_err_Msg  := ERROR_WARNINGS_TABLE(i).ERR_MSG;
      --clear off all the warnings for the next process to use it
      ERROR_WARNINGS_TABLE.DELETE;
      --This explicit commit is to make sure all the DML's done so far gets committed to the database
      COMMIT;
      --raise the first of the stored warning message
      errpkg.raise_err(v_err_Code, v_err_Msg);
      EXIT;
   END LOOP;
--Please NOTE that exception is not needed as we need to throw it to the calling procedure as it is
END RAISE_WARNINGS;

PROCEDURE ERROR_DETAILS(
/******************************************************************************
   This Procedure will fetch the records from Error_log table.
   Created : 12/05/2017 SXG151 CCN Project.

*******************************************************************************/
    V_START_TIME      IN DATE,
    V_END_TIME        IN DATE,
    V_CLOB_FOR_EMAIL  OUT CLOB)
IS
BEGIN
    FOR rec IN (SELECT * FROM ERROR_LOG WHERE ERROR_DATE BETWEEN V_START_TIME AND V_END_TIME) LOOP
        IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
            V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || rec.COST_CENTER || ',' || SQLERRM;
        ELSE
            V_CLOB_FOR_EMAIL := rec.COST_CENTER || ',' || SQLERRM;
        END IF;
    END LOOP;
    V_CLOB_FOR_EMAIL:=V_CLOB_FOR_EMAIL;
END ERROR_DETAILS;

END errpkg;

