head	1.14;
access;
symbols;
locks; strict;
comment	@# @;


1.14
date	2013.06.14.18.51.48;	author sw\mdh01r;	state Exp;
branches;
next	1.13;
deltatype	text;
kopt	kv;
permissions	666;
commitid	a4451bb664204e3;
filename	INITLOAD.pkg;

1.13
date	2013.06.13.21.15.03;	author sw\kdp465;	state Exp;
branches;
next	1.12;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1e4051ba36562468;
filename	INITLOAD.pkg;

1.12
date	2013.06.06.17.25.14;	author sw\tal946;	state Exp;
branches;
next	1.11;
deltatype	text;
kopt	kv;
permissions	666;
commitid	26d851b0c5f95195;
filename	INITLOAD.pkg;

1.11
date	2013.05.21.17.46.31;	author sw\sxh487;	state Exp;
branches;
next	1.10;
deltatype	text;
kopt	kv;
permissions	666;
commitid	410519bb2f57fbb;
filename	INITLOAD.pkg;

1.10
date	2013.05.10.12.29.53;	author sw\BLRA2R;	state Exp;
branches;
next	1.9;
deltatype	text;
kopt	kv;
permissions	666;
commitid	24d4518ce84031f0;
filename	INITLOAD.pkg;

1.9
date	2013.05.08.15.36.33;	author sw\sxh487;	state Exp;
branches;
next	1.8;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2550518a70ff2488;
filename	INITLOAD.pkg;

1.8
date	2013.04.29.12.30.53;	author sw\BLRA2R;	state Exp;
branches;
next	1.7;
deltatype	text;
kopt	kv;
permissions	666;
commitid	106c517e67fc573e;
filename	INITLOAD.pkg;

1.7
date	2013.04.29.12.28.02;	author sw\BLRA2R;	state Exp;
branches;
next	1.6;
deltatype	text;
kopt	kv;
permissions	666;
commitid	870517e6751550f;
filename	INITLOAD.pkg;

1.6
date	2013.04.26.20.53.48;	author sw\tal946;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	2530517ae95b6dc3;
filename	INITLOAD.pkg;

1.5
date	2013.01.08.18.22.29;	author sw\mdh01r;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	5b850ec63e40396;
filename	INITLOAD.pkg;

1.4
date	2012.11.20.14.58.12;	author sw\mdh01r;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1f6450ab9a8372b7;
filename	INITLOAD.pkg;

1.3
date	2012.10.25.20.00.00;	author sw\kdp465;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
permissions	666;
commitid	233450899a3f6a3f;
filename	INITLOAD.pkg;

1.2
date	2012.09.11.18.28.15;	author sw\mdh01r;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	18a8504f82be362c;
filename	INITLOAD.pkg;

1.1
date	2012.08.30.18.53.14;	author sw\mdh01r;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	123c503fb6981faf;
filename	INITLOAD.pkg;


desc
@@


1.14
log
@Added POP_KIT_COUNT, SELLING_STORE_FLAG, & ADMIN_COST_CNTR_CODE to the STORE, ADMINISTRATION, REAL_ESTATE, OTHER, and TERRITORY  input files since the same file is used to create all five tables.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@PACKAGE body initLoad
/****************************************************************************** 
This package BODY will load:

  DELETE_CCN_TABLES           -  11/23/2011
  LOAD_COST_CENTER_TABLE      -  09/29/2011 CHG 09/10/2012 MDH 
  LOAD_STORE_TABLE            -  09/29/2011 CHG 09/10/2012 MDH
  LOAD_ADMINISTATION_TABLE    -  10/25/2011
  LOAD_REAL_ESTATE_TABLE      -  10/25/2011
  LOAD_OTHER_TABLE            -  10/25/2011
  LOAD_PHONE_TABLE            -  09/19/2011
  LOAD_STATUS_TABLE           -  09/19/2011
  LOAD_TYPE_TABLE             -  09/19/2011
  LOAD_ADDRESS_USA_TABLE      -  10/05/2011
  LOAD_ADDRESS_CAN_TABLE      -  10/05/2011
  LOAD_ADDRESS_MEX_TABLE      -  10/10/2011
  LOAD_ADDRESS_OTH_TABLE      -  10/10/2011
  LOAD_SALES_MANAGER_TABLE    -  10/17/2011
  LOAD_TERRITORY_TABLE        -  10/17/2011
  LOAD_SALES_REP_TABLE        -  10/17/2011
  LOAD_TERR_ASSIGNMENT_TABLE  -  10/17/2011
  LOAD_TERRITORY_CCNTR_TABLE  -  11/03/2011  
  LOAD_POLLING_TABLE          -  10/15/2011
  LOAD_TERMINAL_TABLE         -  10/15/2011
  LOAD_BANK_CARD_TABLE        -  10/15/2011
  LOAD_POLLING_DWLS_HIST_TABLE   08/23/2012 - tal
  LOAD_TAXWARE_TABLE          -  08/23/2012 - tal
  
created : 11/21/2011 mdh CCN coding projecet
******************************************************************************/
AS


PROCEDURE DELETE_CCN_TABLES
/*****************************************************************************
	DELETE_CCN_TABLES

	This function will delete all data loaded to the new CCN   
	Oracle Database before reloading data from files created off
  of the legacy idms database.  


created : 11/23/2011 mdh CCN Project....
*****************************************************************************/
is
begin

     delete TAXWARE ;
     delete POLLING_DWLD_RSN_HIST ;
     delete TERMINAL ;
     delete BANK_CARD ;
     delete POLLING_DWLD_RSN_HIST;
     delete POLLING ;
     delete TERRITORY_ASSIGNMENT ; 
     delete SALES_REP ;
     delete TERRITORY ; 
     delete TERRITORY_SALES_MGR ;
     delete MARKETING ; 
     delete ADDRESS_OTHER ;
     delete ADDRESS_MEX ;
     delete ADDRESS_CAN ;
     delete ADDRESS_USA ; 
     delete TYPE ;
     delete STATUS ;
     delete PHONE ;
     delete TAXWARE;
     delete OTHER ; 
     delete REAL_ESTATE ;
     delete ADMINISTRATION ;
     delete STORE ;
     delete cost_center ;
     delete audit_log;

exception

      when others then
          dbms_output.put_line('Delete_CCN_Tables - CCN Deletion Errors '
                || sqlerrm );
end DELETE_CCN_TABLES;





PROCEDURE LOAD_COST_CENTER_TABLE
/*****************************************************************************
	LOAD_COST_CENTER_TABLE

	This function will load the COST_CENTER table from data  
	file from legacy idms database.  

created : 09/29/2011 mdh CCN Project....
******************************************************************************/
is   
   cursor ccntemp_cur is
      select COST_CENTER_CODE,
             COST_CENTER_NAME,
             CATEGORY_CODE,
             ENTITY_TYPE,
             STATEMENT_TYPE,
             COUNTRY_CODE,
	           BEGIN_DATE,
             OPEN_DATE,
	           MOVE_DATE,
             CLOSE_DATE,
             FINANCIAL_CLOSE_DATE, 
             PROGRAM_VERSION,
             PROG_VER_EFF_DATE,  
             UPS_ZONE_CODE,
             RPS_ZONE_CODE,
             DUNS_NUMBER,
             CURRENCY_CODE,
             PRIME_LOGO_IND,
             SECND_LOGO_IND,
             LEASE_OWN_CODE,
             MISSION_TYPE,
             DEP_TKT_REORDER_SW,
             DEP_BAG_REORDER_SW,
             BANK_TYPE,
             POP_KIT_CODE FROM TEMP_COST_CENTER;
   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row COST_CENTER%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.cost_center_name        := ccntemp_rec.cost_center_name;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.entity_type             := ccntemp_rec.entity_type;
 --     v_ccntemp_row.statement_type       := ccntemp_rec.statement_type;
      v_ccntemp_row.country_code            := substr(ccntemp_rec.country_code,1,3);
      v_ccntemp_row.transport_type          := null;
--      v_ccntemp_row.tax_jurisdiction     := null;  
      v_ccntemp_row.pos_prog_ver_nbr        := ccntemp_rec.program_version;  
      v_ccntemp_row.ups_zone_code           := ccntemp_rec.ups_zone_code;
      v_ccntemp_row.currency_code           := ccntemp_rec.currency_code;
      v_ccntemp_row.pri_logo_group_ind      := ccntemp_rec.prime_logo_ind;
      v_ccntemp_row.scd_logo_group_ind      := ccntemp_rec.secnd_logo_ind;
      v_ccntemp_row.duns_number             := ccntemp_rec.duns_number;
      v_ccntemp_row.lease_own_code          := ccntemp_rec.lease_own_code;
      v_ccntemp_row.mission_type_code       := ccntemp_rec.mission_type;
      v_ccntemp_row.deposit_bag_reorder     := ccntemp_rec.dep_bag_reorder_sw;
      v_ccntemp_row.deposit_ticket_reorder  := ccntemp_rec.dep_tkt_reorder_sw;
      v_ccntemp_row.banking_type            := ccntemp_rec.bank_type;
      v_ccntemp_row.pop_kit_code            := ccntemp_rec.pop_kit_code;
      
      if ccntemp_rec.statement_type  <> '**'  then
         v_ccntemp_row.statement_type  := ccntemp_rec.statement_type;
      else
         v_ccntemp_row.statement_type  :=  null;
      end if; 

      if ccntemp_rec.begin_date <> '00000000' then
         v_ccntemp_row.begin_date := to_date(ccntemp_rec.begin_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.open_date <> '00000000' then
         v_ccntemp_row.open_date := to_date(ccntemp_rec.open_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.move_date <> '00000000' then
         v_ccntemp_row.move_date := to_date(ccntemp_rec.move_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.close_date <> '00000000' then
         v_ccntemp_row.close_date := to_date(ccntemp_rec.close_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.financial_close_date <> '00000000' then
         v_ccntemp_row.financial_close_date := to_date(ccntemp_rec.financial_close_date, 'YYYYMMDD');
      end if;   

      if ccntemp_rec.prog_ver_eff_date <> '00000000' then
         v_ccntemp_row.pos_prog_ver_eff_date := to_date(ccntemp_rec.prog_ver_eff_date, 'YYYYMMDD');
      end if;   

      if ccntemp_rec.rps_zone_code <> '0' then
         v_ccntemp_row.rps_zone_code := ccntemp_rec.rps_zone_code;
      end if;   

   
      
      insert into COST_CENTER values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Cost_Center_Table - Invalid Load Cost Center ' 
            || ccntemp_rec.cost_center_code 
            || '-' 
            || ccntemp_rec.cost_center_name 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Cost_Center_Table - Total Loaded Cost Centers '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Cost_Center_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_COST_CENTER_TABLE;


PROCEDURE LOAD_STORE_TABLE
/******************************************************************************
	LOAD_STORE_TABLE

	This procedure will load the STORE table from data  
	file from legacy idms database.  

created : 09/29/2011 mdh CCN Project....
revised : 06/14/2013 mdh Added Pop_Kit, Selling_Store_Flag, & Admin_Type
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE,
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE,
       POP_KIT_COUNT,
       SELLING_STORE_FLAG,
       ADMIN_COST_CNTR_TYPE FROM TEMP_STORE;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row STORE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.inventory_indicator     := ccntemp_rec.perp_inv_ind;
     

      if ccntemp_rec.perp_inv_start_date <> '00000000' then
         v_ccntemp_row.perp_inv_start_date := to_date(ccntemp_rec.perp_inv_start_date, 'YYYYMMDD');
      end if;   

      v_ccntemp_row.rural_metro_zone_code   := ccntemp_rec.rural_metro_zone_code;
      v_ccntemp_row.classification_code     := ccntemp_rec.class_code;
--      v_ccntemp_row.deposit_bag_reorder     := ccntemp_rec.dep_bag_reorder_sw;
--      v_ccntemp_row.deposit_ticket_reorder  := ccntemp_rec.dep_tkt_reorder_sw;
--      v_ccntemp_row.banking_type            := ccntemp_rec.bank_type;
 --     v_ccntemp_row.duns_number             := ccntemp_rec.duns_nbr;
 --     v_ccntemp_row.pri_logo_group_ind      := ccntemp_rec.primary_logo_ind;
 --     v_ccntemp_row.sec_logo_group_ind      := ccntemp_rec.secondary_logo_ind;
 --     v_ccntemp_row.lease_own_code          := ccntemp_rec.lease_own_code;
 --     v_ccntemp_row.mission_type_code       := ccntemp_rec.mission_type;
 --     v_ccntemp_row.selling_store_Flag      := null;
        v_ccntemp_row.selling_store_flag      := ccntemp_rec.selling_store_flag;   
      
      insert into STORE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Store_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Store_Table - Total Loaded Stores '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Store_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
      
end LOAD_STORE_TABLE;


PROCEDURE LOAD_ADMINISTRATION_TABLE
/******************************************************************************
	LOAD_ADMINISTRATION_TABLE

	This procedure will load the ADMINISTRATION table from data  
	file from legacy idms database.  

created : 10/25/2011 mdh CCN Project....
revised : 06/14/2013 mdh Add Pop_Kit, Selling_Store_Flag, & Admin_Type
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE, 
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE,
       POP_KIT_COUNT,
       SELLING_STORE_FLAG,
       ADMIN_COST_CNTR_TYPE FROM TEMP_ADMINISTRATION;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADMINISTRATION%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.admin_cost_cntr_type    := ccntemp_rec.admin_cost_cntr_type;
 --     v_ccntemp_row.admin_cost_cntr_type    := null;
             

      if ccntemp_rec.internal_mail_nbr <> '000' then
         v_ccntemp_row.internal_mail_number := ccntemp_rec.internal_mail_nbr;
      end if;   

     
      insert into ADMINISTRATION values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Administration_Table - Invalid Load Admin CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Administration_Table - Total Loaded Admin CCNTRS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Administration_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
      
end LOAD_ADMINISTRATION_TABLE;


PROCEDURE LOAD_REAL_ESTATE_TABLE
/******************************************************************************
	LOAD_REAL_ESTATE_TABLE

	This procedure will load the REAL_ESTATE table from data  
	file from legacy idms database.  

created : 10/25/2011 mdh CCN Project....
revised : 06/14/2013 mdh added pop_kit, selling_store_flat, admin_type
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE,
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE,
       POP_KIT_COUNT,
       SELLING_STORE_FLAG,
       ADMIN_COST_CNTR_TYPE FROM TEMP_REAL_ESTATE;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row REAL_ESTATE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code       := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category               := ccntemp_rec.category_code;
--      v_ccntemp_row.gnrc_country           := ccntemp_rec.gnrc_group_ind;
--      v_ccntemp_row.lease_own_code         := substr(ccntemp_rec.lease_own_code,1,1);
           
     
      insert into REAL_ESTATE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Real_Estate_Table - Invalid Load Real Estate CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Real_Estate_Table - Total Loaded Real Estate CCNTRS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Real_Estate_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_REAL_ESTATE_TABLE;


PROCEDURE LOAD_OTHER_TABLE
/*******************************************************************************
	LOAD_OTHER_TABLE

	This procedure will load the OTHER table from data  
	file from legacy idms database.  

created : 10/25/2011 mdh CCN Project....
revised : 06/14/2013 mdh Added pop_kit, Selling_Store_Flag, & Admin_TYpe
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE,
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE,
       POP_KIT_COUNT,
       SELLING_STORE_FLAG,
       ADMIN_COST_CNTR_TYPE FROM TEMP_OTHER;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row OTHER%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code       := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category               := ccntemp_rec.category_code;
--      v_ccntemp_row.lease_own_code         := ccntemp_rec.lease_own_code;
--      v_ccntemp_row.mission_type_code      := ccntemp_rec.mission_type;
           
         
      insert into OTHER values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Other_Table - Invalid Load Other CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Other_Table - Total Loaded Other CCNTRS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Other_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_OTHER_TABLE;


PROCEDURE LOAD_PHONE_TABLE
/******************************************************************************
	LOAD_PHONE_TABLE

	This procedure will load the PHONE table from data  
	file from legacy idms database.  

created : 09/19/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       PHONE_TYPE,
	     phone_area_code,	
	     PHONE_NUMBER,
	     phone_extension 
       FROM TEMP_PHONE;

   cursor ccninfo_cur is
      select    COST_CENTER_CODE, 
		EFFECTIVE_DATE, 
		EXPIRATION_DATE, 
		NETACC_PHONE_1, 
		netacc_phone_2  	
    
		FROM "COSTCNTR"."TEMP_BANK_CARD";

   v_input_cnt   integer := 0;
   v_bypass_cnt  integer := 0;
   v_loaded_cnt  integer := 0;

   v_ccphone_row phone%rowtype;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row PHONE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.phone_number_type       := ccntemp_rec.phone_type;
      v_ccntemp_row.phone_area_code         := ccntemp_rec.phone_area_code;
      v_ccntemp_row.phone_number            := ccntemp_rec.phone_number;
      v_ccntemp_row.phone_extension         := ccntemp_rec.phone_extension;
      

      insert into PHONE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Phone_Table - Invalid Load Cost Center ' 
            || ccntemp_rec.cost_center_code
            || '-'
            || ccntemp_rec.phone_type
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Phone_Table - Total Loaded Cost Center Phone Numbers '
      || v_count);

-- EXCEPTION

--    when others then
--       dbms_output.put_line('Load_Phone_Table - Table Not Loaded Stopped on Record - ' 
--       || v_count);


/**************************************************************
   BANK_PHONE Load  - Commented out DO NOt Load BAnk Phone#'s
   as of 4/25/13 via MDH
***************************************************************/


--   for ccninfo_rec in ccninfo_cur loop

--   BEGIN
 
     
/*************************************************************************
      Now Build the Phone Table Entries  --
      Commented out DO NOt Load Bank Phone#'s as of 4/25/13 via MDH
**************************************************************************/

/***************************************************************************
   
    	v_input_cnt  := v_input_cnt  + 1;
  
      if  ccninfo_rec.expiration_date  !=  '00000000'   then
	        v_bypass_cnt  := v_bypass_cnt  + 1;
      end if;
  
      if  ccninfo_rec.expiration_date  =  '00000000'
      and ccninfo_rec.netacc_phone_1  !=  '99999999999'
      and ccninfo_rec.netacc_phone_1  is not  null         then
	        v_ccphone_row.cost_center_code     := ccninfo_rec.cost_center_code; 
          v_ccphone_row.phone_number_type    := 'BC1';
 
          v_ccphone_row.phone_area_code      := '' ;
          if  substr(ccninfo_rec.netacc_phone_1,2,3)   !=  '   ' then
              v_ccphone_row.phone_area_code      := substr(ccninfo_rec.netacc_phone_1,2,3);
          end if;
	          
          v_ccphone_row.phone_number         := substr(ccninfo_rec.netacc_phone_1,5,7); 
          
          v_ccphone_row.phone_extension      := '';
          if  substr(ccninfo_rec.netacc_phone_1,12,4)   !=  '    ' then
              v_ccphone_row.phone_extension  := substr(ccninfo_rec.netacc_phone_1,12,4);
          end if;
   
   insert into phone values v_ccphone_row;
	 
   v_loaded_cnt  := v_loaded_cnt  + 1;
   
      end if;
       
      if  ccninfo_rec.expiration_date  =  '00000000'
      and ccninfo_rec.netacc_phone_2  !=  '99999999999'
      and ccninfo_rec.netacc_phone_2  is not  null         then
	        v_ccphone_row.cost_center_code     := ccninfo_rec.cost_center_code; 
          v_ccphone_row.phone_number_type    := 'BC2';
          
          v_ccphone_row.phone_area_code      := '' ;
          if  substr(ccninfo_rec.netacc_phone_2,2,3)   !=  '   ' then
              v_ccphone_row.phone_area_code      := substr(ccninfo_rec.netacc_phone_2,2,3);
          end if;
	          
          v_ccphone_row.phone_number         := substr(ccninfo_rec.netacc_phone_2,5,7);  
          
          v_ccphone_row.phone_extension      := '';
          if  substr(ccninfo_rec.netacc_phone_2,12,4)   !=  '    ' then
              v_ccphone_row.phone_extension  := substr(ccninfo_rec.netacc_phone_2,12,4);
          end if;
   
   insert into phone values v_ccphone_row;
	 
   v_loaded_cnt  := v_loaded_cnt  + 1;
   
      end if;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load Error ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || '-'
            || ccninfo_rec.EFFECTIVE_DATE 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Bank_Card Temp Rows Read '
      || v_input_cnt);

   dbms_output.put_line('Bank_Card Rows Bypassed   '
      || v_bypass_cnt);

   dbms_output.put_line('Phone Rows Loaded         '
      || v_loaded_cnt);

EXCEPTION

   when others then
      dbms_output.put_line('Table Not Loaded Stopped on Record - ' 
      || v_input_cnt);
*************************************************************************/

end LOAD_PHONE_TABLE;


PROCEDURE LOAD_STATUS_TABLE
/*******************************************************************************
	LOAD_STATUS_TABLE

	This procedure will load the STATUS table from data  
	file from legacy idms database.  

created : 09/19/2011 mdh CCN Project....
*******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       STATUS_CODE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE FROM TEMP_STATUS;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row STATUS%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.status_code             := ccntemp_rec.status_code;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;
              
     
      insert into STATUS values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Status_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.status_code
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Status_Table - Total Loaded Store Status Records '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Status_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);


end LOAD_STATUS_TABLE;


PROCEDURE LOAD_TYPE_TABLE
/******************************************************************************
	LOAD_TYPE_TABLE

	This procedure will load the TYPE table from data  
	file from legacy idms database.  

created : 09/19/2011 mdh CCN Project....
*******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       TYPE_CODE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE FROM TEMP_TYPE;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row TYPE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.type_code               := ccntemp_rec.type_code;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;
              
     
      insert into TYPE values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Type_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.type_code
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Type_Table - Total Loaded Store Type Records '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Type_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);


end LOAD_TYPE_TABLE;


PROCEDURE LOAD_ADDRESS_USA_TABLE
/******************************************************************************
	LOAD_ADDRESS_USA_TABLE

	This procedure will load the ADDRESS_USA table from data  
	file from legacy idms database.  

created : 10/05/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_USA;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_USA%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.state_code           := ccntemp_rec.state_code;
      v_ccntemp_row.zip_code             := substr(ccntemp_rec.zip_prefix,1,5);
      v_ccntemp_row.zip_code_4           := ccntemp_rec.zip_suffix;
      v_ccntemp_row.destination_point    := ccntemp_rec.destination_point;
      v_ccntemp_row.check_digit          := ccntemp_rec.check_digit;
      v_ccntemp_row.county               := ccntemp_rec.county_name;
   -- v_ccntemp_row.country_code         := ccntemp_rec.country_code;
      v_ccntemp_row.fips_code            := ccntemp_rec.fips_code;
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_USA values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_USA_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_USA_Table - Total Loaded Store Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_USA_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_ADDRESS_USA_TABLE;


PROCEDURE LOAD_ADDRESS_CAN_TABLE
/******************************************************************************
	LOAD_ADDRESS_CAN_TABLE

	This procedure will load the ADDRESS_CAN table from data  
	file from legacy idms database.  

created : 10/05/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_CAN;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_CAN%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN
  
      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.province_code        := ccntemp_rec.state_code;

      if ccntemp_rec.state_code  = 'QU'  then
          v_ccntemp_row.province_code  := 'QC';
      end if;
 
      if ccntemp_rec.state_code  =  'AL'  then
          v_ccntemp_row.province_code  := 'AB';
      end if;

      v_ccntemp_row.postal_code          := ccntemp_rec.zip_prefix;
   -- v_ccntemp_row.country_code         := ccntemp_rec.country_code;
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_CAN values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_CAN_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_CAN_Table - Total Loaded Canada Store Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_CAN_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_ADDRESS_CAN_TABLE;


PROCEDURE LOAD_ADDRESS_MEX_TABLE
/******************************************************************************
	LOAD_ADDRESS_MEX_TABLE

	This procedure will load the ADDRESS_MEX table from data  
	file from legacy idms database.  

created : 10/10/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_MEX;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_MEX%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.province_code        := ccntemp_rec.state_code;
      v_ccntemp_row.postal_code          := substr(ccntemp_rec.zip_prefix,1,5);
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_MEX values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_MEX_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_MEX_Table - Total Loaded Other Mexico Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_MEX_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_ADDRESS_MEX_TABLE;


PROCEDURE LOAD_ADDRESS_OTH_TABLE
/******************************************************************************
	LOAD_ADDRESS_OTH_TABLE

	This procedure will load the ADDRESS_OTH table from data  
	file from legacy idms database.  

created : 10/05/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_OTHER;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_OTHER%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.province_code        := null;
      v_ccntemp_row.state_code           := ccntemp_rec.state_code;
      v_ccntemp_row.postal_code          := ccntemp_rec.zip_prefix 
                                         || ccntemp_rec.zip_suffix;
      v_ccntemp_row.country_code         := ccntemp_rec.country_code;
  --                                     Eventually the above field will be country name
  --
  --    if ccntemp_rec.country_code  = 'JAM' then
  --        v_ccntemp_row.country_code  := 'JAMAICA';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'ANT' then
  --        v_ccntemp_row.country_code  := 'NETHERLANDS ANTILLES';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'TTO' then
  --        v_ccntemp_row.country_code  := 'TRINIDAD AND TOBAGO';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'ABW' then
  --        v_ccntemp_row.country_code  := 'ARUBA';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'CUW' then
  --        v_ccntemp_row.country_code  := 'CURACAO';
  --    end if;

  
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_OTHER values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_OTH_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_OTH_Table - Total Loaded Other Store Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_OTH_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);


end LOAD_ADDRESS_OTH_TABLE;


PROCEDURE LOAD_MARKETING_TABLE
/******************************************************************************
	LOAD_MARKETING_TABLE

	This procedure will load the MARKETING table from data  
	file from legacy idms database.  

created : 10/21/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
             CATEGORY_CODE,
             MARKETING_TYPE,
	           EFFECTIVE_DATE,
	           EXPIRATION_DATE,
             MARKET_BRAND,
             MARKET_MISSION,
             SALES_FLOOR_SIZE,
             STOCK_ROOM_SIZE,
             REAL_ESTATE_SETTING  FROM TEMP_MARKETING;

   v_count  integer    := 0;
   v_commit integer    := 0;
   v_mkt_count integer := 0;
   v_ccntemp_row MARKETING%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.marketing_type          := ccntemp_rec.marketing_type;
           

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

/*
verify market brand, mission, sales and stock room floor szie, and real estate setting codes
*/
    
        v_mkt_count := 0;
	select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_BRAND'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.market_brand);

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_MISSION'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.market_mission);   

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_SLS_SQ_FT'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.sales_floor_size); 

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_WHS_SQ_FT'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.stock_room_size); 

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_RE_SET'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.real_estate_setting); 

     

     v_ccntemp_row.mkt_brand               := ccntemp_rec.market_brand;
     v_ccntemp_row.mkt_mission             := ccntemp_rec.market_mission;
     v_ccntemp_row.mkt_sales_floor_size    := ccntemp_rec.sales_floor_size;
     v_ccntemp_row.mkt_warehouse_size      := ccntemp_rec.stock_room_size;
     v_ccntemp_row.mkt_real_estate_setting := ccntemp_rec.real_estate_setting;
         
     
      insert into MARKETING values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

       when no_data_found then
          dbms_output.put_line('Load_Marketing_Table - '
            || 'Invalid Market (Brand, Mission, SLS SQ FT, WHS SQ FT, RE Setting) for Store ' 
            || ccntemp_rec.cost_center_code 
            || '-'
            || ccntemp_rec.market_brand
            || '-'
            || ccntemp_rec.market_mission
            || '-'
            || ccntemp_rec.sales_floor_size
            || '-'
            || ccntemp_rec.stock_room_size
            || '-' 
            || ccntemp_rec.real_estate_setting 
            || '  *****');
  

     WHEN others then
         dbms_output.put_line('Load_Marketing_Table - Invalid Market Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Marketing_Table - Total Loaded Store Marketing Records '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Marketing_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_MARKETING_TABLE;


PROCEDURE LOAD_SALES_MANAGER_TABLE
/*******************************************************************************
	LOAD_SALES_MANAGER_TABLE

	This procedure will load the TERRITORY_SALES_MANAGER table from data  
	file from legacy idms database.  

created : 11/17/2011 mdh CCN Project....
******************************************************************************/
is   

   cursor CCNSMGR_CUR is
      select TERRITORY_SLS_MGR_CODE,             
             GEMS_EMPLOYEE_ID,
	           TERRITORY_SLS_MGR_DAD,
       	     EFFECTIVE_DATE,	
	           EXPIRATION_DATE,
	           SALES_MANAGER_LAST_NAME,
             SALES_MANAGER_FIRST_NAME,
             SALES_MANAGER_MIDDLE_NAME,
	            TERRITORY_SLS_MGR_TYPE FROM TEMP_TERRITORY_SALES_MANAGER;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccnsmgr_row TERRITORY_SALES_MGR%rowtype;

Begin

   for ccnsmgr_rec in ccnsmgr_cur loop

   Begin

      v_ccnsmgr_row.territory_sls_mgr_code := ccnsmgr_rec.territory_sls_mgr_code;
      v_ccnsmgr_row.gems_employee_id   := ccnsmgr_rec.gems_employee_id;
      v_ccnsmgr_row.territory_sls_mgr_dad := ccnsmgr_rec.territory_sls_mgr_dad;
      
      if ccnsmgr_rec.effective_date <> '00000000' then
         v_ccnsmgr_row.effective_date := to_date(ccnsmgr_rec.effective_date, 'yyyymmdd');
      end if;
      
      if ccnsmgr_rec.expiration_date <> '00000000' then
         v_ccnsmgr_row.expiration_date := to_date(ccnsmgr_rec.expiration_date, 'yyyymmdd');
      end if;
      
     
      v_ccnsmgr_row.first_name                   := ccnsmgr_rec.sales_manager_first_name;
      v_ccnsmgr_row.last_name                    := ccnsmgr_rec.sales_manager_last_name;
      v_ccnsmgr_row.middle_initial               := substr(ccnsmgr_rec.sales_manager_middle_name,1,1);
      v_ccnsmgr_row.territory_sls_mgr_type       := ccnsmgr_rec.territory_sls_mgr_type;
      

      insert into TERRITORY_SALES_MGR values v_ccnsmgr_row;

      v_ccnsmgr_row := null;

      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Sales_MGR_Table - Invalid Load SALES MANAGER ' 
            || ccnsmgr_rec.TERRITORY_SLS_MGR_CODE 
            || '-' 
            || ccnsmgr_rec.SALES_MANAGER_LAST_NAME
            || ccnsmgr_rec.SALES_MANAGER_FIRST_NAME
            || ccnsmgr_rec.SALES_MANAGER_MIDDLE_NAME
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Sales_MGR_Table - Total Loaded SALES MANAGERS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Sales_Mgr_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_SALES_MANAGER_TABLE;


PROCEDURE LOAD_TERRITORY_TABLE
/******************************************************************************
	LOAD_TERRITORY_TABLE

	This procedure will load the TERRITORY Table from a data  
	file from legacy idms database.  

created : 11/21/2011 mdh CCN Project....
******************************************************************************/
is 

   cursor CCNTERR_CUR is
     select  COST_CENTER_CODE,	         
	           CATEGORY_CD, 
             TERRITORY_SLS_MGR_CODE,
	           LEASE_CAR_INDICATOR,		     
	           TERRITORY_TYPE_BUSN_CODE,
             HOME_STORE FROM TEMP_TERRITORY;

   v_count integer := 0;
   v_commit integer := 0;
   v_ccnterr_row TERRITORY%rowtype;

Begin

   for ccnterr_rec in CCNTERR_CUR loop

   Begin

      v_ccnterr_row.cost_center_code := ccnterr_rec.cost_center_code;
      v_ccnterr_row.home_store := ccnterr_rec.home_store;
      v_ccnterr_row.territory_sls_mgr_code := ccnterr_rec.territory_sls_mgr_code;
      v_ccnterr_row.category := ccnterr_rec.category_cd;
      v_ccnterr_row.lease_car_indicator := ccnterr_rec.lease_car_indicator;
      v_ccnterr_row.territory_type_busn_code := ccnterr_rec.territory_type_busn_code;
      
      
--      if ccnterr_rec.last_year_final_sales <> '00000000000' then	
--        	v_ccnterr_row.last_year_final_sales := ccnterr_rec.last_year_final_sales;
--      end if;

      insert into TERRITORY values v_ccnterr_row;

      v_ccnterr_row := null;

      v_count := v_count + 1;

      v_commit := v_commit + 1;

      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Territory_Table - Invalid Load Territory  ' 
            || ccnterr_rec.cost_center_code  
	    || ' '	            
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Territory_Table - Total LOADED TERRITORIES '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Territory_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_TERRITORY_TABLE;


PROCEDURE LOAD_SALES_REP_TABLE
/******************************************************************************
	LOAD_SALES_REP_TABLE

	This procedure will load the SALES_REP Table from a data
	file from legacy idms database.  

created : 11/21/2011 mdh CCN Project....
*****************************************************************************/
is 

   cursor CCNSREP_CUR is
      select GEMS_EMPLOYEE_ID,             
             SOCIAL_SECURITY_NUMBER,
      	     EFFECTIVE_DATE,	
	           EXPIRATION_DATE,
      	     FIRST_NAME,
	           MIDDLE_INITIAL,
	           LAST_NAME,
	           EMPLOYEE_STATUS_CODE
	          FROM TEMP_SALES_REP;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccnsrep_row SALES_REP%rowtype;

Begin

   for ccnsrep_rec in CCNSREP_CUR loop

   Begin

/*
getting and setting the gems employee id
*/
     Begin
	select emp.employee_number 
	into v_ccnsrep_row.gems_employee_id
          from emp_data emp 
	    where emp.national_identifier = ccnsrep_rec.social_security_number;
  
     exception

       when no_data_found then
          v_ccnsrep_row.gems_employee_id  := null ;
--        v_ccnsrep_row.gems_employee_id  := '1111111';

     End;

--      	v_ccnsrep_row.gems_employee_id   := ccnsrep_rec.gems_employee_id;

	v_ccnsrep_row.social_security_number := ccnsrep_rec.social_security_number;
      
        if ccnsrep_rec.effective_date <> '00000000' then
            v_ccnsrep_row.effective_date := to_date(ccnsrep_rec.effective_date, 'yyyymmdd');
        end if;
      
        if ccnsrep_rec.expiration_date <> '00000000' then
            v_ccnsrep_row.expiration_date := to_date(ccnsrep_rec.expiration_date, 'yyyymmdd');
        end if;
    
       	v_ccnsrep_row.first_name              := ccnsrep_rec.first_name;
	v_ccnsrep_row.middle_initial          := ccnsrep_rec.middle_initial;
       	v_ccnsrep_row.last_name               := ccnsrep_rec.last_name;	
       	v_ccnsrep_row.employee_code           := ccnsrep_rec.employee_status_code;
	


      insert into SALES_REP values v_ccnsrep_row;
	v_ccnsrep_row := null;

      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Sales_Rep_Table - Invalid Load SALES REP ' 
            || ccnsrep_rec.social_security_number
            || '-' 
            || ccnsrep_rec.gems_employee_id
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Sales_Rep_Table - Total Loaded SALES REP '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Sales_Rep_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_SALES_REP_TABLE;


PROCEDURE LOAD_TERRITORY_ASSIGN_TABLE
/******************************************************************************
	LOAD_TERRITORY_ASSIGN_TABLE

	This procedure will load the TERRITORY_ASSIGNMENT Table from a data  
	file from legacy idms database.  

created : 11/21/2011 mdh CCN Project....
******************************************************************************/
is 

   cursor CCNASGN_CUR is
      select TERRITORY_SLS_MGR_CODE,
             COST_CENTER_CODE,
      	     CATEGORY_CD,      
             SOCIAL_SECURITY_NBR,       
             GEMS_EMPLOYEE_ID,
	           EFFECTIVE_DATE,	
	           EXPIRATION_DATE FROM TEMP_TERRITORY_ASSIGNMENT;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccnasgn_row TERRITORY_ASSIGNMENT%rowtype;

Begin

   for ccnasgn_rec in CCNASGN_CUR loop

   Begin

/*
getting and setting the gems employee id from emp_data table
*/
     
      select slsrep.gems_employee_id
          into v_ccnasgn_row.gems_employee_id
             from SALES_REP slsrep
                where slsrep.social_security_number = ccnasgn_rec.social_security_nbr;
  
  
      v_ccnasgn_row.territory_sls_mgr_code       := ccnasgn_rec.territory_sls_mgr_code;
      v_ccnasgn_row.cost_center_code             := ccnasgn_rec.cost_center_code;
      v_ccnasgn_row.category		         := ccnasgn_rec.category_cd;
  --  v_ccnasgn_row.gems_employee_id             := ccnasgn_rec.gems_employee_id;
  --  v_ccnasgn_row.social_security_number       := ccnasgn_rec.social_security_nbr;
      
      if ccnasgn_rec.effective_date <> '00000000' then
         v_ccnasgn_row.effective_date := to_date(ccnasgn_rec.effective_date, 'yyyymmdd');
      end if;
      
      if ccnasgn_rec.expiration_date <> '00000000' then
         v_ccnasgn_row.expiration_date := to_date(ccnasgn_rec.expiration_date, 'yyyymmdd');
      end if;
      
      
      insert into TERRITORY_ASSIGNMENT values v_ccnasgn_row;

	v_ccnasgn_row := null;
	 
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

       WHEN no_data_found then
               dbms_output.put_line('*** Invalid Load Territory Assignment ' 
                || ccnasgn_rec.cost_center_code 
                || '-' 
                || ccnasgn_rec.social_security_nbr
                || '  no Sales Rep. found  ***') ;
  

      WHEN others then
         dbms_output.put_line('Load_Territory_ASGN_Table - Invalid Load Territory Assignment ' 
            || ccnasgn_rec.cost_center_code 
            || '-' 
            || ccnasgn_rec.social_security_nbr
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Territory_ASGN_Table - Total Loaded Assignments '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Territory_ASGN_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_TERRITORY_ASSIGN_TABLE;


PROCEDURE UPDT_TERRITORY_TABLE
/******************************************************************************
	UPDT_TERRITORY_TABLE

	This procedure will update the TERRITORY Table from a data  
	file from legacy IDMS database.  This procedure will update
  all territories added by Beniat in Territory to make sure they
  aslign to the CCN Database.

created : 11/21/2011 mdh CCN Project....
revised : 06/14/2013 mdh Addeded Pop_Kit, Selling_Store_Flag, & Admin_Type
*******************************************************************************/
is 

   cursor ccntemp_cur is
      select TTC.COST_CENTER_CODE,
             TTC.CATEGORY_CODE,
             TER.COST_CENTER_CODE TCCNTR,
      	     LAST_MAINT_DATE,
	           OPEN_TIME,
	           CLOSE_TIME,
	           SUNDAY_OPEN_IND,
      	     PERP_INV_START_DATE,
	           ACT_FT_EMP_CNT,
	           BGT_FT_EMP_CNT,
	           ACT_PT_EMP_CNT,
	           BGT_PT_EMP_CNT,
	           CLASS_CODE,	
	           GNRC_GROUP_IND,		
             CONTROL_CLERK_CODE,
	           PERP_INV_IND,
	           SCHEDULE_CODE,
      	     RURAL_METRO_ZONE_CODE,
	           UPS_ZONE_CODE,
	           RPS_ZONE,
	           INTERNAL_MAIL_NBR,
	           REMERCHANDISE_CODE,
	           PLANOGRAM_TYPE_CODE,
	           SHELF_LABEL_CODE,
	           SHELF_LABEL_COUNT,
	           DUNS_NBR,
	           PRIMARY_LOGO_IND,
	           SECONDARY_LOGO_IND,
	           PART_TIME_SCHEDULE,
             PROGRAM_TYPE_CODE,
             PROGRAM_VERSION_NBR, 
             LEASE_OWN_CODE,
             ttc.HOME_STORE,
             MISSION_TYPE,
             POP_KIT_COUNT,
             SELLING_STORE_FLAG,
             ADMIN_COST_CNTR_TYPE
         FROM TEMP_TERRITORY_CCNTR ttc LEFT OUTER JOIN TERRITORY ter
           ON (TTC.cost_center_code  =  TER.cost_center_code);

   v_count       integer := 0;
   v_count_chg   integer := 0;
   v_commit      integer := 0;
   v_terr_count  integer := 0;
   v_ccntemp_row TERRITORY%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      IF CCNTEMP_REC.TCCNTR  is NOT NULL then
      --  v_ccntemp_row.category                  := ccntemp_rec.category_code;
      --  v_ccntemp_row.home_store                := ccntemp_rec.home_store;
      --  v_ccntemp_row.gnrc_country              := ccntemp_rec.gnrc_group_ind;

          update TERRITORY 
            set category   = ccntemp_rec.category_code,
                home_store = ccntemp_rec.home_store
            where cost_center_code = ccntemp_rec.TCCNTR;
          v_ccntemp_row   := null;
          v_count_chg    := v_count_chg  +  1;
      ELSE
          v_ccntemp_row.territory_sls_mgr_code    := '@@@@@@@@@@@@';
          v_ccntemp_row.cost_center_code          := ccntemp_rec.cost_center_code;
          v_ccntemp_row.category                  := ccntemp_rec.category_code;
          v_ccntemp_row.home_store                := ccntemp_rec.home_store;
       -- v_ccntemp_row.gnrc_country              := ccntemp_rec.gnrc_group_ind;
          v_ccntemp_row.lease_car_indicator       := 'n';
          v_ccntemp_row.territory_type_busn_code  := null;
   
          insert into TERRITORY values v_ccntemp_row;
          v_ccntemp_row   := null;
          v_count         := v_count  +  1;
          dbms_output.put_line('UPDT_Territory_Table - *** Territory CCNTR added: ' 
            || ccntemp_rec.cost_center_code 
            || '-'
            || ccntemp_rec.category_code
            || ' ***');
      END IF;


      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('UPDT_Territory_Table - Invalid Load Territory CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('UPDT_Territory_Table - Total Loaded Territory CCNTRS '
      || 'Adds: ' 
      || v_count
      || 'Changes: '
      || v_count_chg);

EXCEPTION

   when others then
      dbms_output.put_line('UPDT_Territory_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end UPDT_TERRITORY_TABLE;


PROCEDURE LOAD_POLLING_TABLE
/*******************************************************************************
	LOAD_POLLING_TABLE

	This procedure will update the POLLING Table from a data  
	file from legacy IDMS database.  

created : 10/15/2011 mdh CCN Project....
******************************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE         ,
		POLLING_STATUS_CODE      ,
		MULTICAST_IND            ,
		TIME_ZONES               ,
		LAST_UPLOAD_STATUS       ,
		LAST_UPLOAD_DATE         ,
		LAST_DOWNLOAD_STATUS     ,
		LAST_DOWNLOAD_DATE       ,
		SPECIAL_RUN_INDICATOR    ,
		OVER_VOLUME_INDICATOR    ,
		POLLING_INDICATOR        ,
		POLLING_PRIORITY         ,
		POLLING_SCHEDULE         ,
		POLLING_STATUS_MAINT_DATE,
		NEXT_DOWNLOAD_BLOCK_COUNT  
             	             	
		FROM "COSTCNTR"."TEMP_POLLING";

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccninfo_row polling%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code      := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code   := ccninfo_rec.polling_status_code;   

	 v_ccninfo_row.polling_status_code   := nvl(ccninfo_rec.polling_status_code, 'I');

	 v_ccninfo_row.multicast_ind         := ccninfo_rec.multicast_ind; 
	 v_ccninfo_row.time_zone             := ccninfo_rec.time_zones;          
	 V_CCNINFO_ROW.POLLING_IND           := CCNINFO_REC.POLLING_INDICATOR;     
	-- V_CCNINFO_ROW.POLLING_PRIORITY      := CCNINFO_REC.POLLING_PRIORITY;     
	-- V_CCNINFO_ROW.POLLING_SCHEDULE_CODE := CCNINFO_REC.POLLING_SCHEDULE; 

	 V_CCNINFO_ROW.NEXT_DOWNLOAD_BLOCK_COUNT := CCNINFO_REC.NEXT_DOWNLOAD_BLOCK_COUNT; 
	 V_CCNINFO_ROW.CURRENT_FLAG				:= 'Y';  

      insert into POLLING values v_ccninfo_row;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Polling_Table - Load Failed - Cost-Center/Status = ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || '-'
            || ccninfo_rec.POLLING_STATUS_CODE 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Polling_Table - Total Polling Rows Loaded '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Polling_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_POLLING_TABLE;


PROCEDURE LOAD_BANK_CARD_TABLE
/*******************************************************************************
	LOAD_BANK_CARD_TABLE

	This procedure will update the BANK_CARD Table from a data  
	file from legacy IDMS database.  

created : 10/15/2011 tal CCN Project....
*******************************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE, 
		POLLING_STATUS_CODE,	
		MERCHANT_ID, 
		EFFECTIVE_DATE, 
		EXPIRATION_DATE, 
		LAST_CHANGE_DATE, 
		LAST_MAINTENANCE_AUTH_ID, 
		LAST_MAINTENANCE_USER_ID, 
    DISCOVER_ID,
		QUALITY_CODE, 
		NETACC_PHONE_1, 
		NETACC_PHONE_2, 
		AMEX_SE_ID 
             	             	
		FROM "COSTCNTR"."TEMP_BANK_CARD";

   v_input_cnt   integer := 0;
   v_bypass_cnt  integer := 0;
   v_loaded_cnt  integer := 0;

   v_commit integer := 0;
   v_ccninfo_row bank_card%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code     := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code  := ccninfo_rec.polling_status_code;    
	 v_ccninfo_row.merchant_id          := ccninfo_rec.MERCHANT_ID;   

         v_ccninfo_row.EFFECTIVE_DATE     := '' ;
      if ccninfo_rec.EFFECTIVE_DATE <> '00000000' then
         v_ccninfo_row.EFFECTIVE_DATE     := to_date(ccninfo_rec.EFFECTIVE_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.EXPIRATION_DATE     := '' ;
      if ccninfo_rec.EXPIRATION_DATE <> '00000000' then
         v_ccninfo_row.EXPIRATION_DATE     := to_date(ccninfo_rec.EXPIRATION_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.LAST_MAINT_DATE     := '' ;
      if ccninfo_rec.LAST_CHANGE_DATE <> '00000000' then
         v_ccninfo_row.LAST_MAINT_DATE     := to_date(ccninfo_rec.LAST_CHANGE_DATE, 'YYYYMMDD');
      end if;
	
	 V_CCNINFO_ROW.LAST_MAINT_METHOD_ID := CCNINFO_REC.LAST_MAINTENANCE_AUTH_ID;
	 v_ccninfo_row.LAST_MAINT_USER_ID   := ccninfo_rec.last_maintenance_user_id;
   V_CCNINFO_ROW.DISCOVER_ID          := CCNINFO_REC.DISCOVER_ID;
	 V_CCNINFO_ROW.QUALITY_CODE         := CCNINFO_REC.QUALITY_CODE;     
	 V_CCNINFO_ROW.AMEX_SE_ID           := CCNINFO_REC.AMEX_SE_ID;     

 	v_input_cnt  := v_input_cnt  + 1;

      if ccninfo_rec.EFFECTIVE_DATE   =  ccninfo_rec.EXPIRATION_DATE then
	v_bypass_cnt  := v_bypass_cnt  + 1;
      end if; 

      if ccninfo_rec.EFFECTIVE_DATE  !=  ccninfo_rec.EXPIRATION_DATE then
	insert into BANK_CARD values v_ccninfo_row;
	v_loaded_cnt  := v_loaded_cnt  + 1;
      end if;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Bank_Card_Table - Load Error ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || '-'
            || ccninfo_rec.MERCHANT_ID 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Bank_Card_Table - Bank_Card Temp Rows Read '
      || v_input_cnt);

   dbms_output.put_line('Load_Bank_Card_Table - Bank_Card Rows Bypassed   '
      || v_bypass_cnt);

   dbms_output.put_line('Load_Bank_Card_Table - Bank_Card Rows Loaded     '
      || v_loaded_cnt);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Bank_Card_Table - Table Not Loaded Stopped on Record - ' 
      || v_input_cnt);

end LOAD_BANK_CARD_TABLE;


PROCEDURE LOAD_TERMINAL_TABLE
/******************************************************************************
	LOAD_TERMINAL_TABLE

	This procedure will update the TERMINAL Table from a data  
	file from legacy IDMS database.  

created : 10/15/2011 tal CCN Project....
******************************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE	,
		POLLING_STATUS_CODE	,
		TERMINAL_NUMBER        ,
		EFFECTIVE_DATE         ,
		EXPIRATION_DATE        ,
		POS_LAST_TRAN_DATE     ,
		POS_LAST_TRAN_NUMBER  
             	             	
		FROM "COSTCNTR"."TEMP_TERMINAL";

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccninfo_row TERMINAL%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code        := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code     := ccninfo_rec.polling_status_code;   

	 v_ccninfo_row.polling_status_code     := nvl(ccninfo_rec.polling_status_code, 'I');


	 v_ccninfo_row.TERMINAL_NUMBER         := ccninfo_rec.TERMINAL_NUMBER;    

         v_ccninfo_row.EFFECTIVE_DATE          := '' ;
      if ccninfo_rec.EFFECTIVE_DATE <> '00000000' then
         v_ccninfo_row.EFFECTIVE_DATE          := to_date(ccninfo_rec.EFFECTIVE_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.EXPIRATION_DATE         := '' ;
      if ccninfo_rec.EXPIRATION_DATE <> '00000000' then
         v_ccninfo_row.EXPIRATION_DATE         := to_date(ccninfo_rec.EXPIRATION_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.POS_LAST_TRAN_DATE     := '' ;
      if ccninfo_rec.POS_LAST_TRAN_DATE <> '00000000' then
         v_ccninfo_row.POS_LAST_TRAN_DATE     := to_date(ccninfo_rec.POS_LAST_TRAN_DATE, 'YYYYMMDD');
      end if;
   
	 v_ccninfo_row.POS_LAST_TRAN_NUMBER   := ccninfo_rec.POS_LAST_TRAN_NUMBER;   
 
--      if ccninfo_rec.EFFECTIVE_DATE  !=  ccninfo_rec.EXPIRATION_DATE then
      	insert into TERMINAL values v_ccninfo_row;
      	v_count  := v_count  + 1;
--      end if;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Terminal_Table - Load Failed - CCTR/Sta/Term = ' 
            || v_ccninfo_row.COST_CENTER_CODE 
            || '-'
            || v_ccninfo_row.POLLING_STATUS_CODE 
            || '-'
            || v_ccninfo_row.TERMINAL_NUMBER 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Termina_Table - Terminal Rows Loaded '
      || v_count);
   dbms_output.put_line('Too Many Timinals, Taminals, Tominals... ');
   dbms_output.put_line('Ah Phooey - Have Another Drink ');

EXCEPTION

   when others then
      dbms_output.put_line('Load_Termina_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

   dbms_output.put_line('Too Many Timinals, Taminals, Tominals... ');
   dbms_output.put_line('Ah Phooey - Have Another Drink ');

end LOAD_TERMINAL_TABLE;


PROCEDURE LOAD_POLLING_DWLD_RSN_TABLE
/******************************************************************************
	LOAD_POLLING_DWLD_RSN_TABLE

	This procedure will update the POLLING_DWLD_RSN_HIST Table from a data  
	file from legacy IDMS database.  

created : 08/23/2012 tal CCN Project....
*******************************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE, 
		POLLING_STATUS_CODE,
		EFFECTIVE_DATE, 
		DOWNLOAD_DATE, 
		DOWNLOAD_REASON
             	             	
		from "COSTCNTR"."TEMP_POLLING_DWLD_RSN"
    
    order by cost_center_code, effective_date ;

   v_input_cnt   integer := 0;
   v_bypass_cnt  integer := 0;
   v_loaded_cnt  integer := 0;
   v_errors_cnt  integer := 0;
   
   v_save_cost_center      varchar2(06) := '      ';
   v_save_effective_date   varchar2(08) := '        ';
--	 v_save_download_date    varchar2(08) := '        ';
--	 v_save_download_reason  varchar2(04) := '    ';
   

   v_commit integer := 0;
   v_ccninfo_row POLLING_DWLD_RSN_HIST%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code     := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code  := ccninfo_rec.polling_status_code;    

         v_ccninfo_row.EFFECTIVE_DATE     := '' ;
      if ccninfo_rec.EFFECTIVE_DATE <> '00000000' then
         v_ccninfo_row.EFFECTIVE_DATE     := to_date(ccninfo_rec.EFFECTIVE_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.DOWNLOAD_DATE     := '' ;
      if ccninfo_rec.DOWNLOAD_DATE <> '00000000' then
         v_ccninfo_row.DOWNLOAD_DATE     := to_date(ccninfo_rec.DOWNLOAD_DATE, 'YYYYMMDD');
      end if;
	
	 V_CCNINFO_ROW.POS_DOWNLOAD_REASON                    := CCNINFO_REC.DOWNLOAD_REASON;     

 	v_input_cnt  := v_input_cnt  + 1;

--      if v_save_cost_center      =   v_ccninfo_row.cost_center_code then
--        	v_bypass_cnt  := v_bypass_cnt  + 1;
--     end if; 

    if   v_save_cost_center      <>  ccninfo_rec.cost_center_code    
    or
       ( v_save_cost_center      =   ccninfo_rec.cost_center_code
    and  v_save_effective_date   <>  ccninfo_rec.effective_date )     
    
	--  or  v_save_download_date    <>  ccninfo_row.download_date       
	--  or  v_save_download_reason  <>  ccninfo_row.pos_download_reason 
    then
    
    	insert into polling_dwld_rsn_hist values v_ccninfo_row;
 	    v_loaded_cnt  := v_loaded_cnt  + 1;
      
    else
    
      v_bypass_cnt  := v_bypass_cnt  + 1;
      
    end if;
   
   v_save_cost_center      :=  ccninfo_rec.cost_center_code    ;
   v_save_effective_date   :=  ccninfo_rec.effective_date      ;
--	 v_save_download_date    :=  ccninfo_rec.download_date       ;
--	 v_save_download_reason  :=  ccninfo_rec.pos_download_reason ;
      
      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
 --        dbms_output.put_line('500 More Records' ) ;
      end if;   

   EXCEPTION



      when others then
      
      v_errors_cnt  := v_errors_cnt  + 1;
      
         dbms_output.put_line('Load Error ' 
            || 'CCTR=' || ccninfo_rec.COST_CENTER_CODE 
            || ' '
            || 'STA='  || ccninfo_rec.polling_status_code 
            || ' '
            || 'EFF='  || ccninfo_rec.effective_date 
            || ' '
            || 'DNL='  || ccninfo_rec.download_date
            || ' '
            || 'RSN='  || ccninfo_rec.download_reason 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Temp Rows Read  '
      || v_input_cnt);

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Rows Loaded     '
      || v_loaded_cnt);

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Rows Bypassed   '
      || v_bypass_cnt);

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Rows Errored    '
      || v_errors_cnt);

EXCEPTION

   when others then
      dbms_output.put_line('Table Not Loaded Stopped on Record - ' 
      || v_input_cnt);

END LOAD_POLLING_DWLD_RSN_TABLE;


PROCEDURE LOAD_TAXWARE_TABLE
/*******************************************************************************
	LOAD_TAXWARE_TABLE

	This procedure will update the TAXWARE Table from a data  
	file from legacy IDMS database.  

created : 08/23/2012 tal CCN Project....
*******************************************************************************/
is 

   cursor ccninfo_cur is
      select  cost_center_code     ,
              twj_state            ,
              twj_zip              ,
              twj_geo              ,
              twj_maintenance_date ,
              twj_country          ,
              twj_company 
             	              	
		FROM "COSTCNTR"."TEMP_TAXWARE";

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccninfo_row taxware%rowtype;
 
BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	  v_ccninfo_row.cost_center_code    := ccninfo_rec.cost_center_code; 
	  v_ccninfo_row.twj_state           := ccninfo_rec.twj_state;  
	  v_ccninfo_row.twj_zip             := ccninfo_rec.twj_zip ;   
	  v_ccninfo_row.twj_geo             := ccninfo_rec.twj_geo; 

    v_ccninfo_row.twj_maintenance_date          := '' ;
      if ccninfo_rec.twj_maintenance_date <> '00000000' then
         v_ccninfo_row.twj_maintenance_date          := to_date(ccninfo_rec.twj_maintenance_date, 'YYYYMMDD');
      end if;
      
	 v_ccninfo_row.twj_country         := ccninfo_rec.twj_country;      
   v_ccninfo_row.twj_company         := ccninfo_rec.twj_company; 
 
      insert into TAXWARE values v_ccninfo_row;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      when others then
         dbms_output.put_line(
               'Load Failed - Cost_Center_Code = ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Total TAXWARE Rows Loaded '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Table Not Loaded Stopped on Record - ' 
      || v_count);

END LOAD_TAXWARE_TABLE;


PROCEDURE ADDRESS_CAN_INITLOAD_SP (
/*******************************************************************************
	ADDRESS_CAN_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for ADDRESS_CAN Records

created : 04/18/2012 TAL CCN Project....
*******************************************************************************/

    inADDRESS_CAN_rowtype  IN  ADDRESS_CAN%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_ADDRESS_CAN_row ADDRESS_CAN%ROWTYPE := inADDRESS_CAN_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_CAN",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_ADDRESS_CAN_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_CAN_row.ADDRESS_TYPE       ADDRESS_TYPE
				,to_char(v_address_can_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
				,to_char(v_address_can_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
				,v_ADDRESS_CAN_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_ADDRESS_CAN_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_ADDRESS_CAN_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_ADDRESS_CAN_row.CITY               CITY
				,v_ADDRESS_CAN_row.PROVINCE_CODE      PROVINCE_CODE
        ,v_ADDRESS_CAN_row.POSTAL_CODE        POSTAL_CODE
				,v_ADDRESS_CAN_row.VALID_ADDRESS      VALID_ADDRESS
				,v_ADDRESS_CAN_row.COUNTRY_CODE       COUNTRY_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_ADDRESS_CAN_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_CAN_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_ADDRESS_CAN_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_ADDRESS_CAN_row.COST_CENTER_CODE || 
        '|' || v_ADDRESS_CAN_row.ADDRESS_TYPE     || 
        '|' || v_ADDRESS_CAN_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_CAN'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  ADDRESS_CAN_INITLOAD_SP;


PROCEDURE ADDRESS_MEX_INITLOAD_SP (
/*******************************************************************************
	ADDRESS_MEX_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for ADDRESS_MEX Records

created : 04/18/2012 TAL CCN Project....
*******************************************************************************/

    inADDRESS_MEX_rowtype  IN  ADDRESS_MEX%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_ADDRESS_MEX_row ADDRESS_MEX%ROWTYPE := inADDRESS_MEX_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_MEX",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_ADDRESS_MEX_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_MEX_row.ADDRESS_TYPE       ADDRESS_TYPE
				,to_char(v_address_mex_row.EFFECTIVE_DATE, 'yyyymmdd')  EFFECTIVE_DATE
				,to_char(v_address_mex_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
				,v_ADDRESS_MEX_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_ADDRESS_MEX_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_ADDRESS_MEX_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_ADDRESS_MEX_row.CITY               CITY
				,v_ADDRESS_MEX_row.PROVINCE_CODE      PROVINCE_CODE
        ,v_ADDRESS_MEX_row.POSTAL_CODE        POSTAL_CODE
				,v_ADDRESS_MEX_row.VALID_ADDRESS      VALID_ADDRESS
				,v_ADDRESS_MEX_row.COUNTRY_CODE       COUNTRY_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_ADDRESS_MEX_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_MEX_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_ADDRESS_MEX_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_ADDRESS_MEX_row.COST_CENTER_CODE || 
        '|' || v_ADDRESS_MEX_row.ADDRESS_TYPE     || 
        '|' || v_ADDRESS_MEX_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_MEX'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  ADDRESS_MEX_INITLOAD_SP;


PROCEDURE ADDRESS_OTHER_INITLOAD_SP (
/*******************************************************************************
	ADDRESS_OTHER_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for ADDRESS_OTHER Records

created : 04/18/2012 TAL CCN Project....
*******************************************************************************/

    inADDRESS_OTHER_rowtype  IN  ADDRESS_OTHER%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_address_OTHER_row ADDRESS_OTHER%ROWTYPE := inADDRESS_OTHER_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_OTHER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_address_OTHER_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_OTHER_row.ADDRESS_TYPE       ADDRESS_TYPE
				,to_char(v_address_other_row.EFFECTIVE_DATE, 'yyyymmdd')  EFFECTIVE_DATE
				,to_char(v_address_other_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
				,v_address_OTHER_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_address_OTHER_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_address_OTHER_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_address_OTHER_row.CITY               CITY
				,v_address_OTHER_row.PROVINCE_CODE      PROVINCE_CODE
				,v_address_OTHER_row.POSTAL_CODE        POSTAL_CODE
				,v_address_OTHER_row.VALID_ADDRESS      VALID_ADDRESS
        ,v_address_OTHER_row.COUNTRY_CODE       COUNTRY_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_address_OTHER_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_OTHER_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_address_OTHER_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_address_OTHER_row.COST_CENTER_CODE || 
        '|' || v_address_OTHER_row.ADDRESS_TYPE     || 
        '|' || v_address_OTHER_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_OTHER'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  ADDRESS_OTHER_INITLOAD_SP;


PROCEDURE ADDRESS_USA_INITLOAD_SP (
/*******************************************************************************
	ADDRESS_USA_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for ADDRESS_USA Records

created : 04/18/2012 TAL CCN Project....
*******************************************************************************/

    inADDRESS_USA_rowtype  IN  ADDRESS_USA%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_address_USA_row ADDRESS_USA%ROWTYPE := inADDRESS_USA_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_USA",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_address_usa_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_usa_row.ADDRESS_TYPE       ADDRESS_TYPE
        ,to_char(v_address_usa_row.EFFECTIVE_DATE, 'yyyymmdd')  EFFECTIVE_DATE
        ,to_char(v_address_usa_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
				,v_address_usa_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_address_usa_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_address_usa_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_address_usa_row.CITY               CITY
				,v_address_usa_row.STATE_CODE         STATE_CODE
        ,v_address_usa_row.ZIP_CODE           ZIP_CODE
				,v_address_usa_row.ZIP_CODE_4         ZIP_CODE_4
        ,v_address_usa_row.COUNTY             COUNTY
        ,v_address_usa_row.FIPS_CODE          FIPS_CODE
        ,v_address_usa_row.DESTINATION_POINT  DESTINATION_POINT
        ,v_address_usa_row.CHECK_DIGIT        CHECK_DEIGIT
				,v_address_usa_row.VALID_ADDRESS      VALID_ADDRESS
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_address_usa_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_usa_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_address_usa_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_address_usa_row.COST_CENTER_CODE || 
        '|' || v_address_usa_row.ADDRESS_TYPE     || 
        '|' || v_address_usa_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_USA'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  ADDRESS_USA_INITLOAD_SP;


PROCEDURE ADMINISTRATION_INITLOAD_SP (
/*******************************************************************************
	ADMINISTRATION_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for ADMINISTRATION Records

created : 04/18/2012 TAL CCN Project....
*******************************************************************************/

    inADMINISTRATION_rowtype  IN  ADMINISTRATION%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_ADMINISTRATION_row ADMINISTRATION%ROWTYPE := inADMINISTRATION_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADMINISTRATION",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_ADMINISTRATION_row.COST_CENTER_CODE      COST_CENTER_CODE
				,v_ADMINISTRATION_row.CATEGORY              CATEGORY
				,v_ADMINISTRATION_row.INTERNAL_MAIL_NUMBER  INTERNAL_MAIL_NUMBER
				,v_ADMINISTRATION_row.ADMIN_COST_CNTR_TYPE  ADMIN_COST_CNTR_TYPE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_ADMINISTRATION_row.COST_CENTER_CODE   COST_CENTER_CODE
			)) AS "primaryKey"
			,('|' || v_ADMINISTRATION_row.COST_CENTER_CODE || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADMINISTRATION'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  ADMINISTRATION_INITLOAD_SP;


PROCEDURE BANK_CARD_INITLOAD_SP (
/*******************************************************************************
	BANK_CARD_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for BANK_CARD Records

created : 04/22/2013 kdp CCN Project....
*******************************************************************************/

    inBANK_CARD_rowtype  IN  BANK_CARD%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_BANK_CARD_row BANK_CARD%ROWTYPE := inBANK_CARD_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "BANK_CARD",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_BANK_CARD_row.COST_CENTER_CODE      COST_CENTER_CODE
				,v_BANK_CARD_row.POLLING_STATUS_CODE   POLLING_STATUS_CODE
				,v_BANK_CARD_row.MERCHANT_ID           MERCHANT_ID
        		,to_char(v_bank_card_row.EFFECTIVE_DATE, 'yyyymmdd')  EFFECTIVE_DATE
        		,to_char(v_bank_card_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
        		,to_char(v_bank_card_row.LAST_MAINT_DATE, 'yyyymmdd')  LAST_MAINT_DATE
				,v_BANK_CARD_row.LAST_MAINT_METHOD_ID  LAST_MAINT_METHOD_ID
				,v_BANK_CARD_row.LAST_MAINT_USER_ID    LAST_MAINT_USER_ID
				,v_BANK_CARD_row.QUALITY_CODE          QUALITY_CODE
				,v_BANK_CARD_row.AMEX_SE_ID            AMEX_SE_ID
				,v_BANK_CARD_row.DISCOVER_ID           DISCOVER_ID
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_BANK_CARD_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_BANK_CARD_row.POLLING_STATUS_CODE   POLLING_STATUS_CODE
				,v_BANK_CARD_row.MERCHANT_ID   MERCHANT_ID
				,v_BANK_CARD_row.EFFECTIVE_DATE   EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_BANK_CARD_row.COST_CENTER_CODE     || 
        '|' || v_BANK_CARD_row.POLLING_STATUS_CODE  ||
        '|' || v_BANK_CARD_row.MERCHANT_ID          || 
        '|' || v_BANK_CARD_row.EFFECTIVE_DATE       ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'BANK_CARD'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  BANK_CARD_INITLOAD_SP;


PROCEDURE COST_CENTER_INITLOAD_SP (
/*******************************************************************************
	COST_CENTER_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for COST_CENTER Records

created : 04/22/2013 TAL CCN Project....
*******************************************************************************/

    inCOST_CENTER_rowtype  IN  COST_CENTER%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_COST_CENTER_row COST_CENTER%ROWTYPE := inCOST_CENTER_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "COST_CENTER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_COST_CENTER_row.COST_CENTER_CODE       COST_CENTER_CODE
				,v_COST_CENTER_row.COST_CENTER_NAME       COST_CENTER_NAME
				,v_COST_CENTER_row.CATEGORY               CATEGORY
				,v_COST_CENTER_row.ENTITY_TYPE            ENTITY_TYPE
				,v_COST_CENTER_row.STATEMENT_TYPE         STATEMENT_TYPE
				,v_COST_CENTER_row.COUNTRY_CODE           COUNTRY_CODE
				,v_COST_CENTER_row.TRANSPORT_TYPE         TRANSPORT_TYPE
				,to_char(v_cost_center_row.BEGIN_DATE, 'yyyymmdd')  BEGIN_DATE
				,to_char(v_cost_center_row.OPEN_DATE, 'yyyymmdd')   OPEN_DATE
				,to_char(v_cost_center_row.MOVE_DATE, 'yyyymmdd')   MOVE_DATE
				,to_char(v_cost_center_row.CLOSE_DATE, 'yyyymmdd')  CLOSE_DATE
				,to_char(v_cost_center_row.FINANCIAL_CLOSE_DATE, 'yyyymmdd')   FINANCIAL_CLOSE_DATE
				,to_char(v_cost_center_row.POS_PROG_VER_EFF_DATE, 'yyyymmdd')  POS_PROG_VER_EFF_DATE
				,v_COST_CENTER_row.UPS_ZONE_CODE          UPS_ZONE_CODE
				,v_COST_CENTER_row.RPS_ZONE_CODE          RPS_ZONE_CODE
				,v_COST_CENTER_row.CURRENCY_CODE          CURRENCY_CODE
				,v_COST_CENTER_row.POS_PROG_VER_NBR       POS_PROG_VER_NBR
				,v_COST_CENTER_row.LEASE_OWN_CODE         LEASE_OWN_CODE
				,v_COST_CENTER_row.MISSION_TYPE_CODE      MISSION_TYPE_CODE
				,v_COST_CENTER_row.DUNS_NUMBER            DUNS_NUMBER
				,v_COST_CENTER_row.PRI_LOGO_GROUP_IND     PRI_LOGO_GROUP_IND
				,v_COST_CENTER_row.SCD_LOGO_GROUP_IND     SCD_LOGO_GROUP_IND
				,v_COST_CENTER_row.BANKING_TYPE           BANKING_TYPE
				,v_COST_CENTER_row.DEPOSIT_BAG_REORDER    DEPOSIT_BAG_REORDER
				,v_COST_CENTER_row.DEPOSIT_TICKET_REORDER DEPOSIT_TICKET_REORDER
				,v_COST_CENTER_row.POP_KIT_CODE           POP_KIT_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_COST_CENTER_row.COST_CENTER_CODE   COST_CENTER_CODE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
			,('|' || v_COST_CENTER_row.COST_CENTER_CODE     ||
                          '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'COST_CENTER'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  COST_CENTER_INITLOAD_SP;


PROCEDURE EMP_DATA_INITLOAD_SP (
/*******************************************************************************
	EMP_DATA_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for EMP_DATA Records

created : 04/22/2013 TAL CCN Project....
*******************************************************************************/

    inEMP_DATA_rowtype  IN  EMP_DATA%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_EMP_DATA_row EMP_DATA%ROWTYPE := inEMP_DATA_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "EMP_DATA",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_EMP_DATA_row.NATIONAL_IDENTIFIER     NATIONAL_IDENTIFIER
				,v_EMP_DATA_row.RECORD_TYPE             RECORD_TYPE
				,v_EMP_DATA_row.COMPANY_CODE            COMPANY_CODE
				,v_EMP_DATA_row.FILE_NUMBER             FILE_NUMBER
				,v_EMP_DATA_row.EMPLOYEE_NAME           EMPLOYEE_NAME
				,v_EMP_DATA_row.LAST_NAME               LAST_NAME
				,v_EMP_DATA_row.FIRST_NAME              FIRST_NAME
				,v_EMP_DATA_row.MIDDLE_INITIAL          MIDDLE_INITIAL
				,v_EMP_DATA_row.HOME_ADDRESS_LINE1      HOME_ADDRESS_LINE1
				,v_EMP_DATA_row.HOME_ADDRESS_LINE2      HOME_ADDRESS_LINE2
				,v_EMP_DATA_row.HOME_CITY_STATE         HOME_CITY_STATE
				,v_EMP_DATA_row.HOME_CITY               HOME_CITY
				,v_EMP_DATA_row.HOME_STATE              HOME_STATE
				,v_EMP_DATA_row.HOME_POSTAL_CODE        HOME_POSTAL_CODE
				,v_EMP_DATA_row.HOME_PHONE              HOME_PHONE
				,v_EMP_DATA_row.SEX                     SEX
				,v_EMP_DATA_row.EMP_PAYROLL_STATUS      EMP_PAYROLL_STATUS
				,v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS   EMP_ASSIGNMENT_STATUS
				,v_EMP_DATA_row.EMP_DIVISION            EMP_DIVISION
				,v_EMP_DATA_row.ACCOUNT_NUMBER          ACCOUNT_NUMBER
				,v_EMP_DATA_row.FLSA_CODE               FLSA_CODE
				,v_EMP_DATA_row.EMPLOYEE_NUMBER         EMPLOYEE_NUMBER
				,v_EMP_DATA_row.PAYROLL_EMP_RPT_SEQ_ID  PAYROLL_EMP_RPT_SEQ_ID
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_EMP_DATA_row.NATIONAL_IDENTIFIER     NATIONAL_IDENTIFIER
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
			,('|' || v_EMP_DATA_row.NATIONAL_IDENTIFIER     ||
                          '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'EMP_DATA'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  EMP_DATA_INITLOAD_SP;


PROCEDURE HIER_DESC_INITLOAD_SP (
/*******************************************************************************
	HIER_DESC_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for HIERARCXHY_DESCRIPTION Records

created : 04/23/2013 TAL CCN Project....
*******************************************************************************/

    inHIER_DESC_rowtype  IN  HIERARCHY_DESCRIPTION%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_HIER_DESC_row HIERARCHY_DESCRIPTION%ROWTYPE := inHIER_DESC_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "HIERARCHY_DESCRIPTION",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_HIER_DESC_row.HRCHY_HDR_NAME       HRCHY_HDR_NAME
				,v_HIER_DESC_row.HRCHY_HDR_LVL_NBR    HRCHY_HDR_LVL_NBR
				,v_HIER_DESC_row.HRCHY_HDR_LVL_DESC   HRCHY_HDR_LVL_DESC
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_HIER_DESC_row.HRCHY_HDR_NAME       HRCHY_HDR_NAME
				,v_HIER_DESC_row.HRCHY_HDR_LVL_NBR    HRCHY_HDR_LVL_NBR
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
			,('|' || v_HIER_DESC_row.HRCHY_HDR_NAME     ||
        '|' || v_HIER_DESC_row.HRCHY_HDR_LVL_NBR  ||
                          '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'HIERARCHY_DESCRIPTION'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  HIER_DESC_INITLOAD_SP;


PROCEDURE HIER_DETAIL_INITLOAD_SP (
/*******************************************************************************
	HIER_DETAIL_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for HIERARCHY_DETAIL Records

created : 04/23/2013 TAL CCN Project....
*******************************************************************************/

    inHIER_DETAIL_rowtype  IN  HIERARCHY_DETAIL%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_HIER_DETAIL_row HIERARCHY_DETAIL%ROWTYPE := inHIER_DETAIL_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "HIERARCHY_DETAIL",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_HIER_DETAIL_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
				,v_HIER_DETAIL_row.HRCHY_DTL_LEVEL          HRCHY_DTL_LEVEL
				,v_HIER_DETAIL_row.HRCHY_DTL_PREV_LVL_VAL   HRCHY_DTL_PREV_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_CURR_LVL_VAL   HRCHY_DTL_CURR_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_NEXT_LVL_VAL   HRCHY_DTL_NEXT_LVL_VAL
        ,to_char(v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE, 'yyyymmdd')  HRCHY_DTL_EFF_DATE
        ,to_char(v_HIER_DETAIL_row.HRCHY_DTL_EXP_DATE, 'yyyymmdd')  HRCHY_DTL_EXP_DATE
				,v_HIER_DETAIL_row.HRCHY_DTL_DESC           HRCHY_DTL_DESC
				,v_HIER_DETAIL_row.HRCHY_DTL_CURR_ROW_VAL   HRCHY_DTL_CURR_ROW_VAL
				,v_HIER_DETAIL_row.UPPER_LVL_VER_VALUE      UPPER_LVL_VER_VALUE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_HIER_DETAIL_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
				,v_HIER_DETAIL_row.HRCHY_DTL_LEVEL          HRCHY_DTL_LEVEL
				,v_HIER_DETAIL_row.HRCHY_DTL_PREV_LVL_VAL   HRCHY_DTL_PREV_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_CURR_LVL_VAL   HRCHY_DTL_CURR_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_NEXT_LVL_VAL   HRCHY_DTL_NEXT_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE       HRCHY_DTL_EFF_DATE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_HIER_DETAIL_row.HRCHY_HDR_NAME     ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_LEVEL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_PREV_LVL_VAL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_CURR_LVL_VAL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_NEXT_LVL_VAL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE        ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'HIERARCHY_DETAIL'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  HIER_DETAIL_INITLOAD_SP;


PROCEDURE HIER_HEADER_INITLOAD_SP (
/*******************************************************************************
	HIER_HEADER_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for HIERARCHY_HEADER Records

created : 04/24/2013 TAL CCN Project....
*******************************************************************************/

    inHIER_HEADER_rowtype  IN  HIERARCHY_HEADER%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_HIER_HEADER_row HIERARCHY_HEADER%ROWTYPE := inHIER_HEADER_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "HIERARCHY_HEADER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_HIER_HEADER_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
				,v_HIER_HEADER_row.HRCHY_HDR_LEVELS         HRCHY_HDR_LEVELS
				,v_HIER_HEADER_row.HRCHY_HDR_DESC           HRCHY_HDR_DESC
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_HIER_HEADER_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_HIER_HEADER_row.HRCHY_HDR_NAME     ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'HIERARCHY_HEADER'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  HIER_HEADER_INITLOAD_SP;


PROCEDURE MARKETING_INITLOAD_SP (
/*******************************************************************************
	MARKETING_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for MARKETING Records

created : 04/24/2013 TAL CCN Project....
*******************************************************************************/

    inMARKETING_rowtype  IN  MARKETING%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_MARKETING_row MARKETING%ROWTYPE := inMARKETING_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "MARKETING",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_MARKETING_row.COST_CENTER_CODE         COST_CENTER_CODE
				,v_MARKETING_row.CATEGORY                 CATEGORY
				,v_MARKETING_row.MARKETING_TYPE           MARKETING_TYPE
        ,to_char(v_MARKETING_row.EFFECTIVE_DATE, 'yyyymmdd')  EFFECTIVE_DATE
        ,to_char(v_MARKETING_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
				,v_MARKETING_row.MKT_BRAND                MKT_BRAND
				,v_MARKETING_row.MKT_MISSION              MKT_MISSION
				,v_MARKETING_row.MKT_SALES_FLOOR_SIZE     MKT_SALES_FLOOR_SIZE
				,v_MARKETING_row.MKT_WAREHOUSE_SIZE       MKT_WAREHOUSE_SIZE
				,v_MARKETING_row.MKT_REAL_ESTATE_SETTING  MKT_REAL_ESTATE_SETTING
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_MARKETING_row.COST_CENTER_CODE         COST_CENTER_CODE
				,v_MARKETING_row.MARKETING_TYPE           MARKETING_TYPE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_MARKETING_row.COST_CENTER_CODE     || 
        '|' || v_MARKETING_row.MARKETING_TYPE       ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'MARKETING'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  MARKETING_INITLOAD_SP;


PROCEDURE OTHER_INITLOAD_SP (
/*******************************************************************************
	OTHER_INITLOAD_SP

	This procedure is intended to build an AUDIT_LOG entry for OTHER Records

created : 04/26/2013 TAL CCN Project....
*******************************************************************************/

    inOTHER_rowtype  IN  OTHER%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_OTHER_row OTHER%ROWTYPE := inOTHER_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "OTHER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_OTHER_row.COST_CENTER_CODE         COST_CENTER_CODE
				,v_OTHER_row.CATEGORY                 CATEGORY
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_OTHER_row.COST_CENTER_CODE         COST_CENTER_CODE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_OTHER_row.COST_CENTER_CODE     ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'OTHER'
                , v_primaryKey
                , v_rowdata
                , 'INITLOAD'
		, 'R');
     --END IF;      
     
end  OTHER_INITLOAD_SP;


PROCEDURE PHONE_INITLOAD_SP(
/*******************************************************************************
	PHONE_INITLOAD_SP 

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  PHONE Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
inPhone_rowtype IN PHONE%ROWTYPE
)
                  is  
 v_transaction_id varchar2(500);
 v_rowdata sys.xmltype;
 v_primarykey sys.xmltype;
 v_phone_row PHONE%rowtype  := inphone_rowtype;
 
BEGIN
--dbms_output.put_line('Just Entered PHONE_INITLOAD_SP');

 
	SELECT XMLELEMENT ( "PHONE",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		xmlforest(
				v_phone_row.cost_center_code cost_center_code
				,v_phone_row.phone_number_type phone_number_type
				,v_phone_row.phone_number phone_number
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				v_phone_row.cost_center_code cost_center_code
				,v_phone_row.phone_number_type phone_number_type
				,V_PHONE_ROW.PHONE_NUMBER PHONE_NUMBER
			)) AS "primaryKey",
      ('|' || v_phone_row.cost_center_code || '|' || v_phone_row.phone_number_type || '|' || V_PHONE_ROW.PHONE_NUMBER) v_tran
			INTO v_rowdata
			,V_PRIMARYKEY
      ,V_TRANSACTION_ID
			FROM DUAL;	
     
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'PHONE'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
                
--    dbms_output.put_line('insert completed ' );
--    dbms_output.put_line( v_phone_row.cost_center_code || '|' || v_phone_row.phone_number_type || '|' || V_PHONE_ROW.PHONE_NUMBER);
    
     --END IF;      
      
END  PHONE_INITLOAD_SP;


PROCEDURE POLL_DWLD_RSN_HIST_INITLOAD_SP (
/*******************************************************************************
	POLL_DWLD_RSN_HIST_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  POLLING_DWLD_RSN_HIST Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inPOLLING_DWLD_RSN_HIST_row POLLING_DWLD_RSN_HIST%rowtype
  ) 
  IS

	v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_polling_dwld_rsn_hist_row polling_dwld_rsn_hist%rowtype := inPOLLING_DWLD_RSN_HIST_row; 
    
BEGIN

--dbms_output.put_line('Just Entered POLL_DWLD_RSN_HIST_INITLOAD_SP');

	SELECT XMLELEMENT ( "POLLING_DWLD_RSN_HIST",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_polling_dwld_rsn_hist_row.cost_center_code      cost_center_code
				,v_polling_dwld_rsn_hist_row.polling_status_code   polling_status_code
				,to_char(v_polling_dwld_rsn_hist_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
				,to_char(v_polling_dwld_rsn_hist_row.DOWNLOAD_DATE, 'yyyymmdd')    DOWNLOAD_DATE
		    ,v_polling_dwld_rsn_hist_row.pos_download_reason   pos_download_reason
        
						)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(        
				 v_polling_dwld_rsn_hist_row.cost_center_code           cost_center_code
        ,v_polling_dwld_rsn_hist_row.polling_status_code        polling_status_code
        ,v_polling_dwld_rsn_hist_row.effective_date             effective_date
        
			)) AS "primaryKey",
      ('|' || V_POLLING_DWLD_RSN_HIST_ROW.COST_CENTER_CODE || '|' || V_POLLING_DWLD_RSN_HIST_ROW.POLLING_STATUS_CODE || '|' ||
      v_polling_dwld_rsn_hist_row.effective_date || '|' || v_polling_dwld_rsn_hist_row.download_date || '|' || v_polling_dwld_rsn_hist_row.pos_download_reason || '|') tran_id
			INTO v_rowdata
			,V_PRIMARYKEY
      ,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'POLLING_DWLD_RSN_HIST'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
--  dbms_output.put_line('insert completed ' );
--    dbms_output.put_line(v_polling_dwld_rsn_hist_row.cost_center_code || '|' || v_polling_dwld_rsn_hist_row.polling_status_code
--    || '|' || v_polling_dwld_rsn_hist_row.download_date 
--    || '|' || v_polling_dwld_rsn_hist_row.pos_download_reason
--    );               
                
                
     --END IF;      
      
END POLL_DWLD_RSN_HIST_INITLOAD_SP;


PROCEDURE POLLING_INITLOAD_SP (
/*******************************************************************************
	POLLING_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  POLLING Records

created : 04/23/2013 BLR CCN Project.... 
revised: 06/11/2013 kdp added current_flag
*******************************************************************************/
  inPOLLING_row IN POLLING%rowtype
  ) 
  IS

	v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_polling_row polling%rowtype  := inPOLLING_row; 
    
BEGIN
--dbms_output.put_line('Just Entered Polling_INITLOAD_SP');

	SELECT XMLELEMENT ( "POLLING",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				v_polling_row.cost_center_code           cost_center_code
        ,v_polling_row.polling_status_code        polling_status_code
        ,v_polling_row.multicast_ind              multicast_ind
        ,v_polling_row.time_zone                  time_zone
        ,v_polling_row.polling_ind                polling_ind
        ,v_polling_row.next_download_block_count  next_download_block_count
        ,v_polling_row.current_flag               current_flag
        
						)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(
				v_polling_row.cost_center_code cost_center_code
				,v_polling_row.polling_status_code polling_status_code
        
			)) AS "primaryKey",
      ('|' || v_polling_row.cost_center_code || '|' || v_polling_row.polling_status_code || '|') tran_id
			INTO V_ROWDATA
			,v_primarykey,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
             , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'POLLING'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
                
-- dbms_output.put_line('insert completed ' );
-- dbms_output.put_line( v_polling_row.cost_center_code || '|' || v_polling_row.polling_status_code || '|' || V_polling_ROW.polling_ind);               
     --END IF;      
      
END POLLING_INITLOAD_SP;


PROCEDURE REAL_ESTATE_INITLOAD_SP (
/*******************************************************************************
	REAL_ESTATE_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for
  REAL_ESTATE Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inREAL_ESTATE_rowtype IN REAL_ESTATE%rowtype
  ) 
  IS

	v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_real_estate_row real_estate%rowtype   := inREAL_ESTATE_rowtype; 
    
begin
--	dbms_output.put_line('Just entered REAL_ESTATE_INITLOAD_SP ' );
	
	SELECT XMLELEMENT ( "REAL_ESTATE",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				v_real_estate_row.cost_center_code       cost_center_code
		   ,v_real_estate_row.category               category
        
						)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(
				v_real_estate_row.cost_center_code       cost_center_code
        
			)) as "primaryKey",
      ('|' || v_real_estate_row.cost_center_code || '|') tran_id
			INTO v_rowdata
			,v_primarykey,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
              , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'REAL_ESTATE'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
-- dbms_output.put_line('insert completed ' );
-- dbms_output.put_line( v_real_estate_row.cost_center_code || '|' || v_real_estate_row.category  );                              
     --END IF;      
      
END REAL_ESTATE_INITLOAD_SP;


PROCEDURE SALES_REP_INITLOAD_SP (
/*******************************************************************************
	SALES_REP_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for
  SALES_REP Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inSALES_REP_rowtype IN SALES_REP%rowtype
  ) 
  IS
  
  v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_sales_rep_row sales_rep%rowtype  := inSALES_REP_rowtype; 
    
BEGIN
--dbms_output.put_line('Just Entered SALES_REP_INITLOAD_SP');
	
	SELECT XMLELEMENT ( "SALES_REP",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		xmlforest(
				 v_sales_rep_row.gems_employee_id           gems_employee_id
        ,v_sales_rep_row.social_security_number     social_security_number
				,to_char(v_sales_rep_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
				,to_char(v_sales_rep_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
        ,v_sales_rep_row.first_name                 first_name
        ,v_sales_rep_row.middle_initial             middle_initial
        ,v_sales_rep_row.last_name                  last_name
        ,v_sales_rep_row.employee_code              employee_code
        
						)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(
				 v_sales_rep_row.gems_employee_id           gems_employee_id
        
			)) AS "primaryKey",
      ('|'|| v_sales_rep_row.gems_employee_id || '|') tran_id
			INTO V_ROWDATA
			,v_primarykey,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
              , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'SALES_REP'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
/*  dbms_output.put_line('insert completed ' );
    dbms_output.put_line( v_sales_rep_row.gems_employee_id || '|' || v_sales_rep_row.social_security_number || '|' || v_sales_rep_row.effective_date
  || '|' || v_sales_rep_row.first_name  || '|' || v_sales_rep_row.last_name  );               
*/
--END IF;      
      
END SALES_REP_INITLOAD_SP;


PROCEDURE STATUS_INITLOAD_SP (
/*******************************************************************************
	STATUS_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  STATUS Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inSTATUS_rowtype IN STATUS%rowtype
  ) 
  IS

  v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_status_row status%rowtype  := inSTATUS_rowtype; 
    
BEGIN
--dbms_output.put_line('Just Entered STATUS_INITLOAD_SP');
	
	SELECT XMLELEMENT ( "STATUS",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		xmlforest(
				 v_status_row.cost_center_code           cost_center_code
        ,v_status_row.status_code                status_code
				,to_char(v_status_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
				,to_char(v_status_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
        
						)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(
				 v_status_row.cost_center_code           cost_center_code
        ,v_status_row.status_code                status_code
        ,v_status_row.effective_date             effective_date  
        
			)) AS "primaryKey",
      ('|' || v_status_row.cost_center_code || '|' || v_status_row.status_code || '|' || v_status_row.effective_date || '|') tran_id
			INTO V_ROWDATA
			,v_primarykey,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
                 , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'STATUS'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
 /*               
 dbms_output.put_line('insert completed ' );
 dbms_output.put_line( v_status_row.cost_center_code || '|' || v_status_row.status_code || '|' || v_status_row.effective_date
  || '|' || v_status_row.effective_date);  
 */ 
     --END IF;     
END STATUS_INITLOAD_SP;


PROCEDURE STORE_INITLOAD_SP (
/*******************************************************************************
	STORE_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  STORE Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inSTORE_rowtype IN STORE%rowtype
  ) 
  IS

	v_transaction_id varchar(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_store_row store%rowtype := inSTORE_rowtype; 
    
begin
--dbms_output.put_line('Just Entered STORE_INITLOAD_SP');
	 
	SELECT XMLELEMENT ( "STORE",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		xmlforest(
				 v_store_row.cost_center_code            cost_center_code
        ,v_store_row.category                    category
				,to_char(v_store_row.perp_inv_start_date, 'yyyymmdd')   perp_inv_start_date
        ,v_store_row.classification_code         classification_code
        ,v_store_row.inventory_indicator         inventory_indicator
        ,v_store_row.rural_metro_zone_code       rural_metro_zone_code
        ,v_store_row.selling_store_flag          selling_store_flag
         
						)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(
				 v_store_row.cost_center_code            cost_center_code
        			)) AS "primaryKey"
			,('|' || v_store_row.COST_CENTER_CODE ||
			  '|' ) transaction_id					
       			
			INTO v_rowdata
			,v_primarykey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
             , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'STORE'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
 /*
  dbms_output.put_line('insert completed ' );
    dbms_output.put_line( v_store_row.cost_center_code  || '|' || v_store_row.category || '|' || v_store_row.perp_inv_start_date
    || '|' || v_store_row.classification_code || '|' || v_store_row.inventory_indicator || '|' || v_store_row.rural_metro_zone_code  
   || '|' || v_store_row.selling_store_flag  );               
 */   
   --END IF; 
END STORE_INITLOAD_SP ;


PROCEDURE TAXWARE_INITLOAD_SP (
/*******************************************************************************
	TAXWARE_INITLOAD_SP 

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for
  TAXWARE Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inTAXWARE_rowtype IN TAXWARE%rowtype
  ) 
  IS
	  v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primarykey sys.xmltype;
    v_taxware_row taxware%rowtype := inTAXWARE_rowtype; 
    
BEGIN
--dbms_output.put_line('Just Entered inTAXWARE_rowtype ');

	SELECT XMLELEMENT ( "TAXWARE",
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		xmlforest(
				 v_taxware_row.cost_center_code       cost_center_code
        ,v_taxware_row.twj_state              state
        ,v_taxware_row.twj_zip                zip_code
        ,v_taxware_row.twj_geo                geo
				,to_char(v_taxware_row.twj_maintenance_date, 'yyyymmdd')  twj_maintenance_date
        ,v_taxware_row.twj_country            country
        ,v_taxware_row.twj_company            company
				,to_char(v_taxware_row.LAST_MAINT_DATE, 'yyyymmdd')       LAST_MAINT_DATE
        ,v_taxware_row.LAST_MAINT_METHOD_ID   LAST_MAINT_METHOD_ID
        ,v_taxware_row.LAST_MAINT_USER_ID     LAST_MAINT_USER_ID
						)) AS "result"
            
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       xmlforest(
				 v_taxware_row.cost_center_code           cost_center_code                
			)) AS "primaryKey",
      
      ('|' || v_taxware_row.cost_center_code || '|') tran_id
			INTO V_ROWDATA
			,v_primarykey,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
                   , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'TAXWARE'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
/*
    dbms_output.put_line('insert completed ' );
    dbms_output.put_line( v_taxware_row.cost_center_code || '|' || v_taxware_row.twj_state || '|' || v_taxware_row.twj_zip
    || '|' || v_taxware_row.twj_geo || '|' || v_taxware_row.twj_maintenance_date
    || '|' || v_taxware_row.twj_country  || '|' || v_taxware_row.twj_company);   
*/    
     --END IF;      
      
END TAXWARE_INITLOAD_SP;


PROCEDURE TERMINAL_INITLOAD_SP (
/*******************************************************************************
	TERMINAL_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  TERMINAL Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inTERMINAL_rowtype IN TERMINAL%rowtype
  ) 
  IS


	v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_terminal_row TERMINAL%ROWTYPE := inTERMINAL_rowtype;
     
    
BEGIN
--dbms_output.put_line('Just Entered TERMINAL_INITLOAD_SP');
		
	SELECT XMLELEMENT ( "TERMINAL",               
		  XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                  'http://www.oracle.com/Employee.xsd' AS
                         "xsi:nonamespaceSchemaLocation" ),
	       XMLFOREST(
			 v_terminal_row.COST_CENTER_CODE COST_CENTER_CODE
			,v_terminal_row.POLLING_STATUS_CODE POLLING_STATUS_CODE
      ,v_terminal_row.TERMINAL_NUMBER TERMINAL_NUMBER 
			,to_char(v_terminal_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
			,to_char(v_terminal_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
			,to_char(v_terminal_row.POS_LAST_TRAN_DATE, 'yyyymmdd')  POS_LAST_TRAN_DATE
      ,v_terminal_row.POS_LAST_TRAN_NUMBER POS_LAST_TRAN_NUMBER			
			)) AS "result" 
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				V_TERMINAL_ROW.COST_CENTER_CODE COST_CENTER_CODE
			)) AS "primaryKey"		,
      ('|' || V_TERMINAL_ROW.COST_CENTER_CODE || '|') tran_id
	INTO V_ROWDATA
		,v_primaryKey,v_transaction_id
	FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
                , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'TERMINAL'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
/*                
   dbms_output.put_line('insert completed ' );
    dbms_output.put_line( v_terminal_row.COST_CENTER_CODE || '|' || v_terminal_row.POLLING_STATUS_CODE || '|' || v_terminal_row.TERMINAL_NUMBER
    || '|' || v_terminal_row.EFFECTIVE_DATE || '|' || v_terminal_row.TERMINAL_NUMBER
     || '|' || v_terminal_row.POS_LAST_TRAN_DATE || '|' || v_terminal_row.POS_LAST_TRAN_NUMBER);    
*/     
     --END IF;      
      
END TERMINAL_INITLOAD_SP;


PROCEDURE TERR_ASSIGNMENT_INITLOAD_SP (
/*******************************************************************************
	TERR_ASSIGNMENT_INITLOAD_SP 

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for
  TERRITORY_ASSIGNMENT Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inTERRITORY_ASSIGNMENT_rowtype IN TERRITORY_ASSIGNMENT%rowtype
  ) 
  IS

	v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_terr_assignment_row TERRITORY_ASSIGNMENT%ROWTYPE := inTERRITORY_ASSIGNMENT_rowtype ;
     
    
BEGIN
--dbms_output.put_line('Just Entered TERR_ASSIGNMENT_INITLOAD_SP');

	SELECT XMLELEMENT ( "TERRITORY_ASSIGNMENT",               
		  XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                  'http://www.oracle.com/Employee.xsd' AS
                         "xsi:nonamespaceSchemaLocation" ),
	       XMLForest(					
		v_terr_assignment_row.TERRITORY_SLS_MGR_CODE TERRITORY_SLS_MGR_CODE  
                          ,v_terr_assignment_row.COST_CENTER_CODE cOST_CENTER_CODE  
                          ,v_terr_assignment_row.CATEGORY CATEGORY
                          ,v_terr_assignment_row.GEMS_EMPLOYEE_ID GEMS_EMPLOYEE_ID
				,to_char(v_terr_assignment_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
				,to_char(v_terr_assignment_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE 
			)) AS "result" 
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				v_terr_assignment_row.TERRITORY_SLS_MGR_CODE TERRITORY_SLS_MGR_CODE
				,v_terr_assignment_row.COST_CENTER_CODE COST_CENTER_CODE
				,v_terr_assignment_row.CATEGORY CATEGORY
				,v_terr_assignment_row.GEMS_EMPLOYEE_ID GEMS_EMPLOYEE_ID
				,v_terr_assignment_row.EFFECTIVE_DATE EFFECTIVE_DATE
			)) AS "primaryKey"		,
      ('|'||V_TERR_ASSIGNMENT_ROW.TERRITORY_SLS_MGR_CODE || '|' || V_TERR_ASSIGNMENT_ROW.COST_CENTER_CODE || '|' ||
      v_terr_assignment_row.CATEGORY || '|' || v_terr_assignment_row.GEMS_EMPLOYEE_ID || '|' || v_terr_assignment_row.EFFECTIVE_DATE || '|') tran_id
	INTO V_ROWDATA
		,v_primaryKey,v_transaction_id
	FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'TERITORY_ASSIGNMENT'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
  /*              
  dbms_output.put_line('insert completed ' );
    dbms_output.put_line( v_terr_assignment_row.TERRITORY_SLS_MGR_CODE || '|' || v_terr_assignment_row.COST_CENTER_CODE || '|' || v_terr_assignment_row.CATEGORY
    || '|' || v_terr_assignment_row.GEMS_EMPLOYEE_ID || '|' || v_terr_assignment_row.EFFECTIVE_DATE);    
  */   
     --END IF;      
      
END TERR_ASSIGNMENT_INITLOAD_SP;


PROCEDURE TERRITORY_INITLOAD_SP (
/*******************************************************************************
	TERRITORY_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for
  TERRITORY Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
    interritory_rowtype IN TERRITORY%rowtype
    )
    is
  
    v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_territory_row TERRITORY%ROWTYPE := interritory_rowtype;
--    
BEGIN
--
--	
	SELECT XMLELEMENT ( "TERRITORY",               
		  XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                  'http://www.oracle.com/Employee.xsd' AS
                         "xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
	          v_territory_row.TERRITORY_SLS_MGR_CODE TERRITORY_SLS_MGR_CODE						
	        	,v_territory_row.COST_CENTER_CODE COST_CENTER_CODE			
			      ,v_territory_row.CATEGORY CATEGORY
			      ,v_territory_row.HOME_STORE HOME_STORE
			      ,v_territory_row.LEASE_CAR_INDICATOR LEASE_CAR_INDICATOR
			      ,v_territory_row.TERRITORY_TYPE_BUSN_CODE TERRITORY_TYPE_BUSN_CODE			
			     )) AS "result" 
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
			            	v_territory_row.territory_sls_mgr_code territory_sls_mgr_code 
                   ,v_territory_row.cost_center_code cost_center_code
                   ,V_TERRITORY_ROW.CATEGORY CATEGORY
			)) AS "primaryKey"		,
      ('|'||v_territory_row.territory_sls_mgr_code || '|' || v_territory_row.cost_center_code || '|' || V_TERRITORY_ROW.CATEGORY || '|') tran_id
	INTO V_ROWDATA
	   	,v_primaryKey
      ,v_transaction_id
	FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
               , audit_rec_flag )
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'TERRITORY'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R' );
     --END IF;      
      
end TERRITORY_INITLOAD_SP;


PROCEDURE TERRITORY_SLS_MGR_INITLOAD_SP (
/*******************************************************************************
	TERRITORY_SLS_MGR_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for 
  TERRITORY_SALES_MGR Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  inTERRITORY_SALES_MGR_rowtype IN TERRITORY_SALES_MGR%rowtype
  ) 
  IS
	v_transaction_id varchar2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_terr_sls_mgr_row TERRITORY_SALES_MGR%ROWTYPE := inTERRITORY_SALES_MGR_rowtype ;
     
    
BEGIN
--dbms_output.put_line('Just Entered TERRITORY_SLS_MGR_INITLOAD_SP');
	
	SELECT XMLELEMENT ( "TERRITORY_SALES_MGR",               
		  XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                  'http://www.oracle.com/Employee.xsd' AS
                         "xsi:nonamespaceSchemaLocation" ),
	       XMLFOREST(
       v_terr_sls_mgr_row.territory_sls_mgr_code territory_sls_mgr_code
			,v_terr_sls_mgr_row.gems_employee_id gems_employee_id                              
      ,v_terr_sls_mgr_row.territory_sls_mgr_dad territory_sls_mgr_dad
			,to_char(v_terr_sls_mgr_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
			,to_char(v_terr_sls_mgr_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
                        ,v_terr_sls_mgr_row.first_name first_name
                        ,v_terr_sls_mgr_row.last_name last_name 
                        ,v_terr_sls_mgr_row.middle_initial Middle_initial
                        ,v_terr_sls_mgr_row.territory_sls_mgr_type territory_sls_mgr_type			
			)) AS "result" 
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				V_TERR_SLS_MGR_ROW.TERRITORY_SLS_MGR_CODE TERRITORY_SLS_MGR_CODE
			)) AS "primaryKey"		,
      ('|' || V_TERR_SLS_MGR_ROW.TERRITORY_SLS_MGR_CODE || '|') tran_id
	INTO V_ROWDATA
		,v_primaryKey,v_transaction_id
	FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
                  , change_by
               , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , sysdate
                , 'TERRITORY_SALES_MGR'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R');
/*                
 dbms_output.put_line('insert completed ' );
    dbms_output.put_line( v_terr_sls_mgr_row.territory_sls_mgr_code || '|' || v_terr_sls_mgr_row.gems_employee_id || '|' || v_terr_sls_mgr_row.territory_sls_mgr_dad
   || '|' || v_terr_sls_mgr_row.effective_date || '|' ||v_terr_sls_mgr_row.first_name || '|' || v_terr_sls_mgr_row.last_name );                
*/ 
     --END IF;      
      
END TERRITORY_SLS_MGR_INITLOAD_SP;


PROCEDURE TYPE_INITLOAD_SP (
/*******************************************************************************
	TYPE_INITLOAD_SP

	CCNA-356 - This procedure is intended to build an AUDIT_LOG entry for TYPE Records

created : 04/23/2013 BLR CCN Project....
*******************************************************************************/
  intype_rowtype IN TYPE%rowtype
  ) 
  IS
	v_transaction_id varchar2(500);
  v_rowdata sys.xmltype;
  v_primaryKey sys.xmltype;
  v_TYPE_row TYPE%ROWTYPE := intype_rowtype;
  
BEGIN
--
--
	SELECT XMLELEMENT ( "TYPE",               
		  XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                  'http://www.oracle.com/Employee.xsd' AS
                         "xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
               			v_type_row.COST_CENTER_CODE COST_CENTER_CODE
			             ,v_TYPE_row.TYPE_code TYPE_CODE
				,to_char(v_TYPE_row.EFFECTIVE_DATE, 'yyyymmdd')   EFFECTIVE_DATE
				,to_char(v_TYPE_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE		
			)) AS "result" 
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				            v_TYPE_row.COST_CENTER_CODE COST_CENTER_CODE
            			,v_TYPE_row.TYPE_CODE TYPE_CODE
          				,v_TYPE_row.EFFECTIVE_DATE EFFECTIVE_DATE
			    )) AS "primaryKey"		,
      ('|' || v_TYPE_row.COST_CENTER_CODE || '|' || v_TYPE_row.TYPE_CODE || '|' || v_TYPE_row.EFFECTIVE_DATE || '|') tran_id
	INTO V_ROWDATA
		,v_primaryKey
    ,v_transaction_id
	FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
               , audit_rec_flag )
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'TYPE'
                ,v_primaryKey
                ,v_rowdata
                ,'INITLOAD'
                , 'R' );
     --END IF;      
      
end TYPE_INITLOAD_SP;
 
Procedure COST_CENTER_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the COST_CENTER_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the COST_CENTER Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype cost_center%rowtype;      
        
cursor cc_cur is select * from cost_center;

  begin	
  
  OPEN cc_cur;
    LOOP
      begin
          fetch cc_cur into v_rectype;
          exit when cc_cur%notfound;
          
          V_CONTEXT := 'Calling cost_center_initload_sp ';
          initload.cost_center_initload_sp(v_rectype); 
      end;
    END LOOP;
    CLOSE cc_cur;
       
 EXCEPTION

   when others then
      dbms_output.put_line('Failed at - ' || V_CONTEXT);
      
  end cost_center_audit_initload_sp;
  
Procedure ADDRESS_CAN_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the ADDRESS_CAN_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the ADDRESS_CAN Audit table				
									 
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype ADDRESS_CAN%ROWTYPE;           

cursor cc_addr_can is select * from ADDRESS_CAN;

  begin			
       open cc_addr_can;
       loop
         begin
          fetch cc_addr_can into v_rectype;
          exit when cc_addr_can%notfound;
          
          v_context := 'Calling address_can_initload_sp ';
          initload.address_can_initload_sp(v_rectype); 
      end;
    end loop;
    CLOSE cc_addr_can;
       
    EXCEPTION
    
     when others then
      dbms_output.put_line('Failed at - ' || V_CONTEXT);
      
   end ADDRESS_CAN_AUDIT_INITLOAD_SP;

Procedure ADDRESS_MEX_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the ADDRESS_MEX_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the ADDRESS_MEX Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype ADDRESS_MEX%ROWTYPE;           

cursor cc_addr_mex is select * from ADDRESS_MEX;	

  begin	
      open cc_addr_mex;
       loop
         begin
          fetch cc_addr_mex into v_rectype;
          exit when cc_addr_mex%notfound;
          
          v_context := 'Calling address_mex_initload_sp ';
          initload.address_mex_initload_sp(v_rectype);  
    end;
    end loop;
    CLOSE cc_addr_mex;
       
   EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || V_CONTEXT);
      
   end ADDRESS_MEX_AUDIT_INITLOAD_SP;

Procedure ADDR_OTHER_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the ADDRESS_OTHER_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the ADDRESS_OTHER Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype ADDRESS_OTHER%ROWTYPE;           

cursor cc_addr_oth is select * from ADDRESS_OTHER;

  begin	
       open cc_addr_oth;
       loop
         begin
            fetch cc_addr_oth into v_rectype;
            exit when cc_addr_oth%notfound;
            
            v_context := 'Calling address_other_initload_sp ';
            initload.address_other_initload_sp(v_rectype);   
         end;
    end loop;
    CLOSE cc_addr_oth;
   
   EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
       
   end ADDR_OTHER_AUDIT_INITLOAD_SP;   

Procedure ADDR_USA_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the ADDRESS_USA_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the ADDRESS_USA Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype ADDRESS_USA%ROWTYPE;
        
cursor cc_addr_usa is select * from ADDRESS_USA;

  begin	
       open cc_addr_usa;
       loop
         begin
            fetch cc_addr_usa into v_rectype;
            exit when cc_addr_usa%notfound;
            
            v_context := 'Calling address_usa_initload_sp ';
           initload.address_usa_initload_sp(v_rectype);  
         end;
    end loop;
    close cc_addr_usa;

    EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end ADDR_USA_AUDIT_INITLOAD_SP;

Procedure ADMN_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the ADMINISTRATION_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the ADMINISTRATION Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype ADMINISTRATION%ROWTYPE;           

cursor cc_adm is select * from ADMINISTRATION;

  begin		

       open cc_adm;
       loop
         begin
            fetch cc_adm into v_rectype;
            exit when cc_adm%notfound;
            
            v_context := 'Calling ADMINISTRATION_INITLOAD_SP ';
            initload.administration_initload_sp(v_rectype); 
         end;
    end loop;
    close cc_adm;

    EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end admn_audit_initload_sp;

Procedure OTHER_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the OTHER_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the OTHER Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype OTHER%ROWTYPE;           

cursor cc_othr is select * from OTHER;									
  begin	
    
       open cc_othr;
       loop
         begin
            fetch cc_othr into v_rectype;
            exit when cc_othr%notfound;
            
             v_context := 'Calling other_initload_sp ';
             initload.other_initload_sp(v_rectype); 
         end;
    end loop;
    close cc_othr;
      
   EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end OTHER_AUDIT_INITLOAD_SP;

Procedure PHONE_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the PHONE_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the PHONE Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype PHONE%ROWTYPE;           

cursor cc_phone is select * from PHONE;	

  begin	
  
       open cc_phone;
       loop
         begin
            fetch cc_phone into v_rectype;
            exit when cc_phone%notfound;
            
              v_context := 'Calling phone_initload_sp ';
           initload.phone_initload_sp(v_rectype);
         end;
    end loop;
    close cc_phone;
       
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end PHONE_AUDIT_INITLOAD_SP;

Procedure REAL_ESTATE_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the REAL_ESTATE_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the REAL_ESTATE Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype REAL_ESTATE%ROWTYPE;           

cursor cc_real_estate is select * from REAL_ESTATE;	

  begin	
        
       open cc_real_estate;
       loop
         begin
            fetch cc_real_estate into v_rectype;
            exit when cc_real_estate%notfound;
            
             v_context := 'Calling real_estate_initload_sp ';
             initload.real_estate_initload_sp(v_rectype);
         end;
    end loop;
    close cc_real_estate;
       
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end REAL_ESTATE_AUDIT_INITLOAD_SP;

Procedure STATUS_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the STATUS_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the STATUS Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype STATUS%ROWTYPE;           

cursor cc_status is select * from STATUS;

  begin	
  
       open cc_status;
       loop
         begin
            fetch cc_status into v_rectype;
            exit when cc_status%notfound;
            
              v_context := 'Calling STATUS_INITLOAD_SP ';
           initload.status_initload_sp(v_rectype); 
         end;
    end loop;
    close cc_status;

  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end STATUS_AUDIT_INITLOAD_SP;

Procedure STORE_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the STORE_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the STORE Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	v_context varchar2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype store%rowtype;           
        
cursor cc_store is select * from store;

  begin					
  
       open cc_store;
       loop
         begin
            fetch cc_store into v_rectype;
            exit when cc_store%notfound;
            
            v_context := 'Calling STORE_INITLOAD_SP ';
            initload.store_initload_sp(v_rectype);
         end;
    end loop;
    close cc_store;

   EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end STORE_AUDIT_INITLOAD_SP;
   
Procedure POLLING_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the POLLING_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the POLLING Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype POLLING%ROWTYPE;           

cursor cc_polling is select * from POLLING;

  begin	
  
       open cc_polling;
       loop
         begin
            fetch cc_polling into v_rectype;
            exit when cc_polling%notfound;
            
            v_context := 'Calling polling_initload_sp ';
            initload.polling_initload_sp(v_rectype);   
         end;
    end loop;
    close cc_polling;
        
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end polling_audit_initload_sp;
   
Procedure TYPE_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the TYPE_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the TYPE Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype TYPE%ROWTYPE;           
									
 cursor cc_type is select * from TYPE;

  begin	
  
       open cc_type;
       loop
         begin
            fetch cc_type into v_rectype;
            exit when cc_type%notfound;
            
            v_context := 'Calling type_initload_sp ';
            initload.type_initload_sp(v_rectype);   
         end;
    end loop;
    close cc_type;
           
       
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end TYPE_AUDIT_INITLOAD_SP;

Procedure BANK_CARD_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the BANK_CARD_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the BANK_CARD Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype BANK_CARD%ROWTYPE;           
									
 cursor cc_bank_card is select * from bank_card;

  begin	

       open cc_bank_card;
       loop
         begin
            fetch cc_bank_card into v_rectype;
            exit when cc_bank_card%notfound;
            
            v_context := 'Calling bank_card_initload_sp ';
            initload.bank_card_initload_sp(v_rectype);  
         end;
    end loop;
    close cc_bank_card;
   
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end BANK_CARD_AUDIT_INITLOAD_SP;

Procedure POLL_DWLD_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the POLL_DWLD_RSN_HIST_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the POLLING_DWLD_RSN_HIST Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype POLLING_DWLD_RSN_HIST%ROWTYPE;           
									
  cursor cc_poll_dwld is select * from POLLING_DWLD_RSN_HIST;

  begin	
  
       open cc_poll_dwld;
       loop
         begin
            fetch cc_poll_dwld into v_rectype;
            exit when cc_poll_dwld%notfound;
            
            v_context := 'Calling poll_dwld_rsn_hist_initload_sp ';
            initload.poll_dwld_rsn_hist_initload_sp(v_rectype);  
         end;
    end loop;
    close cc_poll_dwld;  
      
   EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end POLL_DWLD_AUDIT_INITLOAD_SP;

Procedure TERMINAL_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the TERMINAL_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the TERMINAL Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype TERMINAL%ROWTYPE;           
									
  cursor cc_terminal is select * from TERMINAL;

  begin	
  
       open cc_terminal;
       loop
         begin
            fetch cc_terminal into v_rectype;
            exit when cc_terminal%notfound;
            
            v_context := 'Calling terminal_initload_sp ';
            initload.terminal_initload_sp(v_rectype); 
         end;
    end loop;
    close cc_terminal;
       
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end TERMINAL_AUDIT_INITLOAD_SP;

Procedure SALES_REP_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the SALES_REP_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the SALES_REP Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype SALES_REP%ROWTYPE;           
									
  cursor cc_sales_rep is select * from SALES_REP;

  begin	
  
       open cc_sales_rep;
       loop
         begin
            fetch cc_sales_rep into v_rectype;
            exit when cc_sales_rep%notfound;
            
            v_context := 'Calling SALES_REP_INITLOAD_SP ';
            initload.SALES_REP_INITLOAD_SP(v_rectype); 
         end;
    end loop;
    close cc_sales_rep; 
       
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end SALES_REP_AUDIT_INITLOAD_SP;
   
Procedure TERR_SALES_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the TERRITORY_SLS_MGR_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the TERRITORY_SALES_MGR Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype TERRITORY_SALES_MGR%ROWTYPE;           
 
       cursor cc_terr_sales is select * from TERRITORY_SALES_MGR;

  begin	
  
       open cc_terr_sales;
       loop
         begin
            fetch cc_terr_sales into v_rectype;
            exit when cc_terr_sales%notfound;
            
            v_context := 'Calling territory_sales_mgr_initload_sp ';
           initload.territory_sls_mgr_initload_sp(v_rectype); 
         end;
    end loop;
    close cc_terr_sales; 
      
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end TERR_SALES_AUDIT_INITLOAD_SP;

Procedure TERRITORY_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the TERRITORY_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the TERRITORY Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype TERRITORY%ROWTYPE;   
        
cursor cc_terr is select * from TERRITORY;

  begin	
  
       open cc_terr;
       loop
         begin
            fetch cc_terr into v_rectype;
            exit when cc_terr%notfound;
            
           v_context := 'Calling territory_initload_sp ';
           initload.territory_initload_sp(v_rectype); 
         end;
    end loop;
    close cc_terr;        
      
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end TERRITORY_AUDIT_INITLOAD_SP;

Procedure TERR_ASGN_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the TERR_ASSIGNMENT_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the TERRITORY_ASSIGNMENT Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype TERRITORY_ASSIGNMENT%ROWTYPE;           
									
 cursor cc_terr_asgn is select * from TERRITORY_ASSIGNMENT;

  begin	
  
       open cc_terr_asgn;
       loop
         begin
            fetch cc_terr_asgn into v_rectype;
            exit when cc_terr_asgn%notfound;
            
           v_context := 'Calling TERRITORY_INITLOAD_SP ';
           initload.TERR_ASSIGNMENT_INITLOAD_SP(v_rectype); 
         end;
    end loop;
    close cc_terr_asgn;   
      
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end TERR_ASGN_AUDIT_INITLOAD_SP;

Procedure MARKETING_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the MARKETING_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the MARKETING Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype MARKETING%ROWTYPE;           
									
  cursor cc_mrkt is select * from MARKETING;

  begin	
  
       open cc_mrkt;
       loop
         begin
            fetch cc_mrkt into v_rectype;
            exit when cc_mrkt%notfound;
            
            v_context := 'Calling MARKETING_INITLOAD_SP ';
            initload.MARKETING_INITLOAD_SP(v_rectype);  
          
         end;
    end loop;
    close cc_mrkt;   
     
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
  end MARKETING_AUDIT_INITLOAD_SP;  

Procedure TAXWARE_AUDIT_INITLOAD_SP
/******************************************************************	
This Procedure is a wrapper for the TAXWARE_INITLOAD_SP 
Audit Load of the CCN tables 	
    * Loads the TAXWARE Audit table				
									
Created: SH 05/06/2013						
******************************************************************/	
as								        
    	V_CONTEXT VARCHAR2(200);				
    	V_table_name VARCHAR2(200);				
        v_rectype TAXWARE%ROWTYPE;           
									
  cursor cc_tax is select * from TAXWARE;

  begin	
  
       open cc_tax;
       loop
         begin
            fetch cc_tax into v_rectype;
            exit when cc_tax%notfound;
            
          v_context := 'Calling TAXWARE_INITLOAD_SP ';
          initload.TAXWARE_INITLOAD_SP(v_rectype);    
         end;
    end loop;
    close cc_tax;  
 
  EXCEPTION
    
       when others then
          dbms_output.put_line('Failed at - ' || v_context);
          
   end taxware_audit_initload_sp;

Procedure CCN_AUDIT_INITLOAD_SP
/******************************************************************
This Procedure is a wrapper for the Initial Load of the CCN tables
    * Disables all the Triggers 
    * Deletes all the CCN tables
    * Loads all the CCN tables
    * Loads the Audit tables
    * Re-Enables the Triggers

Created: SH 05/06/2013
******************************************************************/
as
    V_CONTEXT VARCHAR2(200);
  begin

      V_CONTEXT := 'Alter triggers - DISABLE ';
      common_tools.ALTER_ALL_TRIGGERS ( 'DISABLE' );

      V_CONTEXT := 'Delete CCN Tables ';
      initload.delete_ccn_tables();
      commit;
      
      V_CONTEXT := 'Load COST CENTER Table ';
      initLoad.LOAD_COST_CENTER_TABLE();
      commit;
      
      V_CONTEXT := 'Load Store Table ';
      initload.load_store_table();
      commit;
      
      V_CONTEXT := 'Load Admninistration Table ';
      initLoad.LOAD_ADMINISTRATION_TABLE();
      commit;
      
      V_CONTEXT := 'Load Real Estate Table ';
      initLoad.LOAD_REAL_ESTATE_TABLE();
      commit;
      
      V_CONTEXT := 'Load Other Table ';
      initLoad.LOAD_OTHER_TABLE();
      commit;
      
      V_CONTEXT := 'Load Phone Table ';
      initLoad.LOAD_PHONE_TABLE();
      commit;
      
      V_CONTEXT := 'Load Status Table ';
      initLoad.LOAD_STATUS_TABLE();
      commit;
      
      V_CONTEXT := 'Load Type Table ';
      initLoad.LOAD_TYPE_TABLE();
      commit;
      
      V_CONTEXT := 'Load Address USA Table ';
      initLoad.LOAD_ADDRESS_USA_TABLE();
      commit;
      
      V_CONTEXT := 'Load Address CAN Table ';
      initLoad.LOAD_ADDRESS_CAN_TABLE();
      commit;
      
      V_CONTEXT := 'Load Address MEX Table ';
      initLoad.LOAD_ADDRESS_MEX_TABLE();
      commit;
      
      V_CONTEXT := 'Load Address OTH Table ';
      initLoad.LOAD_ADDRESS_OTH_TABLE();
      commit;
      
      V_CONTEXT := 'Load Marketing Table ';
      initLoad.LOAD_MARKETING_TABLE();
      commit;
      
      V_CONTEXT := 'Load Sales Manager Table ';
      initLoad.LOAD_SALES_MANAGER_TABLE();
      commit;
      
      V_CONTEXT := 'Load Territory Table ';
      initLoad.LOAD_TERRITORY_TABLE();
      commit;
      
      V_CONTEXT := 'Load Sales Rep Table ';
      initLoad.LOAD_SALES_REP_TABLE();
      commit;
      
      V_CONTEXT := 'Load Terr Assign Table ';
      initLoad.LOAD_TERRITORY_ASSIGN_TABLE();
      commit;
      
      V_CONTEXT := 'Load Updt Terr Table ';
      initLoad.UPDT_TERRITORY_TABLE();
      commit;
      
      V_CONTEXT := 'Load Polling Table ';
      initLoad.LOAD_POLLING_TABLE();
      commit;
      
      V_CONTEXT := 'Load Bank Card Table ';
      initLoad.LOAD_BANK_CARD_TABLE();
      commit;
      
      V_CONTEXT := 'Load Terminal Table ';
      initload.load_terminal_table();
      commit;
      
      v_context := 'Load COST CENTER Audit Table ';
      initLoad.COST_CENTER_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Store Audit Table ';
      initLoad.STORE_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Admninistration Audit Table ';
      initLoad.ADMN_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Real Estate Audit Table ';
      initLoad.REAL_ESTATE_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Other Audit Table ';
      initLoad.OTHER_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Phone Audit Table ';
      initload.phone_audit_initload_sp();
      commit;
      
      v_context := 'Load Status Audit Table ';
      initLoad.STATUS_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Type Audit Table ';
      initLoad.TYPE_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Address USA Audit Table ';
      initLoad.ADDR_USA_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Address CAN Table ';
      initLoad.ADDRESS_CAN_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Address MEX Audit Table ';
      initLoad.ADDRESS_MEX_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Address OTH Audit Table ';
      initLoad.ADDR_OTHER_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Sales Manager Audit Table ';
      initload.terr_sales_audit_initload_sp();
      commit;
      
      v_context := 'Load Territory Audit Table ';
      initLoad.TERRITORY_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Sales Rep Table ';
      initLoad.SALES_REP_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Terr Assign Table ';
      initload.TERR_ASGN_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Polling Audit Table ';
      initLoad.POLLING_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Polling rsn Table ';
      initload.POLL_DWLD_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Bank Card Audit Table ';
      initload.BANK_CARD_AUDIT_INITLOAD_SP();
      commit;
      
      v_context := 'Load Terminal Audit Table ';
      initload.terminal_audit_initload_sp(); 
      commit;
      
      v_context := 'Load Marketing Audit Table ';
      initload.marketing_audit_initload_sp();  
      commit;
      
      v_context := 'Load Taxware Audit Table ';
      initload.taxware_audit_initload_sp();
      commit;
      
      V_CONTEXT := 'Alter triggers - ENABLE  ';
      common_tools.alter_all_triggers ( 'ENABLE' );
      
 commit;     
EXCEPTION

   When Others Then
      dbms_output.put_line('CCN_INITLOAD_SP failed at ' ||  V_CONTEXT);

end CCN_AUDIT_INITLOAD_SP;

END initLoad;

@


1.13
log
@polling fix
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d2 1
a2 1
/**************************************************************** 
d30 1
a30 1
*****************************************************************/
d35 1
a35 1
/***************************************************************
d44 1
a44 1
***************************************************************/
d86 1
a86 1
/***************************************************************
d93 1
a93 1
***************************************************************/
d225 1
a225 1
/***************************************************************
d232 2
a233 1
***************************************************************/
d270 3
a272 1
       POP_KIT_COUNT FROM TEMP_STORE;
d303 2
a304 2
      v_ccntemp_row.selling_store_Flag      := null;
      
d336 1
a336 1
 
d341 1
a341 1
/***************************************************************
d348 2
a349 1
****************************************************************/
d385 4
a388 1
       MISSION_TYPE  FROM TEMP_ADMINISTRATION;
d402 2
a403 1
      v_ccntemp_row.admin_cost_cntr_type    := null;
d441 1
a441 1

d446 1
a446 1
/***************************************************************
d453 2
a454 1
****************************************************************/
d490 4
a493 1
       MISSION_TYPE  FROM TEMP_REAL_ESTATE;
a541 1

d546 1
a546 1
/***************************************************************
d553 2
a554 1
****************************************************************/
d590 4
a593 1
       MISSION_TYPE  FROM TEMP_OTHER;
a641 1

d646 1
a646 1
/***************************************************************
d653 1
a653 1
****************************************************************/
d842 1
a842 1
/***************************************************************
d849 1
a849 1
****************************************************************/
d922 1
a922 1
/***************************************************************
d929 1
a929 1
****************************************************************/
d1002 1
a1002 1
/***************************************************************
d1009 1
a1009 1
****************************************************************/
d1109 1
a1109 1
/***************************************************************
d1116 1
a1116 1
****************************************************************/
d1220 1
a1220 1
/***************************************************************
d1227 1
a1227 1
****************************************************************/
d1321 1
a1321 1
/***************************************************************
d1328 1
a1328 1
****************************************************************/
d1449 1
a1449 1
/***************************************************************
d1456 1
a1456 1
****************************************************************/
d1598 1
a1598 1
/***************************************************************
d1605 1
a1605 1
****************************************************************/
d1689 1
a1689 1
/***************************************************************
d1696 1
a1696 1
****************************************************************/
d1767 1
a1767 1
/***************************************************************
d1774 1
a1774 1
****************************************************************/
d1872 1
a1872 1
/***************************************************************
d1879 1
a1879 1
****************************************************************/
d1973 1
a1973 1
/***************************************************************
d1982 2
a1983 1
****************************************************************/
d2019 5
a2023 1
             ttc.HOME_STORE  
d2104 1
a2104 1
/***************************************************************
d2111 1
a2111 1
****************************************************************/
d2193 1
a2193 1
/***************************************************************
d2200 1
a2200 1
****************************************************************/
d2308 1
a2308 1
/***************************************************************
d2315 1
a2315 1
****************************************************************/
d2409 1
a2409 1
/***************************************************************
d2416 1
a2416 1
****************************************************************/
d2548 1
a2548 1
/***************************************************************
d2555 1
a2555 1
****************************************************************/
@


1.12
log
@Changed DATE format for date fields to remove the -'s
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a0 1
create or replace
d2135 2
a2136 1
	 V_CCNINFO_ROW.NEXT_DOWNLOAD_BLOCK_COUNT := CCNINFO_REC.NEXT_DOWNLOAD_BLOCK_COUNT;   
d3010 1
a3010 1
created : 04/22/2013 TAL CCN Project....
d3032 3
a3034 3
        ,to_char(v_bank_card_row.EFFECTIVE_DATE, 'yyyymmdd')  EFFECTIVE_DATE
        ,to_char(v_bank_card_row.EXPIRATION_DATE, 'yyyymmdd')  EXPIRATION_DATE
        ,to_char(v_bank_card_row.LAST_MAINT_DATE, 'yyyymmdd')  LAST_MAINT_DATE
d3841 2
a3842 1
created : 04/23/2013 BLR CCN Project....
d3867 1
d5681 2
a5682 1
END initLoad;@


1.11
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d4 1
a4 1
This package will load:
d2634 2
a2635 2
				,v_ADDRESS_CAN_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_ADDRESS_CAN_row.EXPIRATION_DATE    EXPIRATION_DATE
d2681 1
a2681 1
                , 'somebody'
d2715 2
a2716 2
				,v_ADDRESS_MEX_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_ADDRESS_MEX_row.EXPIRATION_DATE    EXPIRATION_DATE
d2762 1
a2762 1
                , 'somebody'
d2796 2
a2797 2
				,v_address_OTHER_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_address_OTHER_row.EXPIRATION_DATE    EXPIRATION_DATE
d2843 1
a2843 1
                , 'somebody'
d2877 2
a2878 2
				,v_address_usa_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_address_usa_row.EXPIRATION_DATE    EXPIRATION_DATE
d2928 1
a2928 1
                , 'somebody'
d2997 1
a2997 1
                , 'somebody'
d3032 3
a3034 3
				,v_BANK_CARD_row.EFFECTIVE_DATE        EFFECTIVE_DATE
				,v_BANK_CARD_row.EXPIRATION_DATE       EXPIRATION_DATE
				,v_BANK_CARD_row.LAST_MAINT_DATE       LAST_MAINT_DATE
d3080 1
a3080 1
                , 'somebody'
d3120 6
a3125 6
				,v_COST_CENTER_row.BEGIN_DATE             BEGIN_DATE
				,v_COST_CENTER_row.OPEN_DATE              OPEN_DATE
				,v_COST_CENTER_row.MOVE_DATE              MOVE_DATE
				,v_COST_CENTER_row.CLOSE_DATE             CLOSE_DATE
				,v_COST_CENTER_row.FINANCIAL_CLOSE_DATE   FINANCIAL_CLOSE_DATE
				,v_COST_CENTER_row.POS_PROG_VER_EFF_DATE  POS_PROG_VER_EFF_DATE
d3177 1
a3177 1
                , 'somebody'
d3271 1
a3271 1
                , 'somebody'
d3347 1
a3347 1
                , 'somebody'
d3385 2
a3386 2
				,v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE       HRCHY_DTL_EFF_DATE
				,v_HIER_DETAIL_row.HRCHY_DTL_EXP_DATE       HRCHY_DTL_EXP_DATE
d3438 1
a3438 1
                , 'somebody'
d3512 1
a3512 1
                , 'somebody'
d3548 2
a3549 2
				,v_MARKETING_row.EFFECTIVE_DATE           EFFECTIVE_DATE
				,v_MARKETING_row.EXPIRATION_DATE          EXPIRATION_DATE
d3595 1
a3595 1
                , 'somebody'
d3668 1
a3668 1
                , 'somebody'
d3739 1
a3739 1
                ,'somebody'
d3777 5
a3781 2
				v_polling_dwld_rsn_hist_row.cost_center_code           cost_center_code
        ,v_polling_dwld_rsn_hist_row.polling_status_code        polling_status_code
d3788 4
a3791 6
	       xmlforest(
				v_polling_dwld_rsn_hist_row.cost_center_code      cost_center_code
				,v_polling_dwld_rsn_hist_row.polling_status_code  polling_status_code
                 		,v_polling_dwld_rsn_hist_row.effective_date       effective_date
		                ,v_polling_dwld_rsn_hist_row.download_date        download_date
		                ,v_polling_dwld_rsn_hist_row.pos_download_reason  pos_download_reason
d3820 1
a3820 1
                ,'somebody'
d3901 1
a3901 1
                ,'somebody'
d3973 1
a3973 1
                ,'somebody'
d4010 2
a4011 2
        ,v_sales_rep_row.effective_date             effective_date
        ,v_sales_rep_row.expiration_date            expiration_date
d4050 1
a4050 1
                ,'somebody'
d4089 2
a4090 2
        ,v_status_row.effective_date             effective_date
        ,v_status_row.expiration_date            expiration_date
d4127 1
a4127 1
                ,'somebody'
d4166 1
a4166 1
        ,v_store_row.perp_inv_start_date         perp_inv_start_date
d4207 1
a4207 1
                ,'somebody'
d4248 1
a4248 1
        ,v_taxware_row.twj_maintenance_date   maintenance_date
d4251 3
d4288 1
a4288 1
                ,'somebody'
d4328 2
a4329 2
	       XMLForest(
			v_terminal_row.COST_CENTER_CODE COST_CENTER_CODE
d4331 5
a4335 5
		        ,v_terminal_row.TERMINAL_NUMBER TERMINAL_NUMBER 
		        ,v_terminal_row.EFFECTIVE_DATE EFFECTIVE_DATE
		        ,v_terminal_row.EXPIRATION_DATE EXPIRATION_DATE
	                ,v_terminal_row.POS_LAST_TRAN_DATE POS_LAST_TRAN_DATE
		        ,v_terminal_row.POS_LAST_TRAN_NUMBER POS_LAST_TRAN_NUMBER			
d4368 1
a4368 1
                ,'somebody'
d4412 2
a4413 2
                          ,v_terr_assignment_row.EFFECTIVE_DATE EFFECTIVE_DATE
                          ,v_terr_assignment_row.EXPIRATION_DATE EXPIRATION_DATE 
d4451 1
a4451 1
                ,'somebody'
d4530 1
a4530 1
                ,'somebody'
d4562 2
a4563 2
	       XMLForest(
			v_terr_sls_mgr_row.territory_sls_mgr_code territory_sls_mgr_code
d4565 3
a4567 3
                        ,v_terr_sls_mgr_row.territory_sls_mgr_dad territory_sls_mgr_dad
                        ,v_terr_sls_mgr_row.effective_date effective_date                 
                        ,v_terr_sls_mgr_row.expiration_date expiration_date 
d4604 1
a4604 1
                ,'somebody'
d4642 2
a4643 2
                   ,v_TYPE_row.EFFECTIVE_DATE EFFECTIVE_DATE
                  ,v_TYPE_row.EXPIRATION_DATE EXPIRATION_DATE			
d4679 1
a4679 1
                ,'somebody'
d4726 1
a4726 1
									
@


1.10
log
@ccna-351 initload change to load_phobe_table
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d72 2
a73 1
     delete COST_CENTER ; 
a631 1

a639 3
revised : 05/09/2013 BLR CCNA-351 PRODUCTION database had null 
          phone_numbers. Phone numbers must be numeric according
          to business rules.  
d650 1
a650 1
   
a658 1
   
d675 1
a675 1
   
d677 1
a677 1
      v_ccntemp_row.phone_number_type       := ccntemp_rec.phone_type; 
a681 1
-- 05/09/2013 BLR CCNA-351 PRODUCTION database should not load null phone_numbers
d683 9
a691 5
      if v_ccntemp_row.phone_number is not null then
    
         insert into PHONE values v_ccntemp_row;
         v_ccntemp_row := null ;
         v_count  := v_count  + 1;
a692 8
         v_commit := v_commit + 1;    
 
        if v_commit > 500 then
           commit;
          v_commit := 0;
        end if; 
      end if;          
    
d709 8
a716 1
      
d825 2
a826 3
      
end LOAD_PHONE_TABLE;				 
				
d4361 1
a4361 1
                , 'TAXWARE'
d4692 17
a4708 5
        v_rectype COST_CENTER%ROWTYPE;           
									
  begin		
       V_CONTEXT := 'Load Audit for COST CENTER ';
       select * into v_rectype from cost_center;  
a4709 3
       V_CONTEXT := 'Calling cost_center_initload_sp ';
       initload.cost_center_initload_sp(v_rectype); 
 
d4729 3
a4731 1
									
d4733 11
a4743 2
       V_CONTEXT := 'Load Audit for ADDRESS_CAN ';
       select * into v_rectype from ADDRESS_CAN;  
a4744 3
       V_CONTEXT := 'Calling address_can_initload_sp ';
       initload.address_can_initload_sp(v_rectype);    
   
d4764 3
a4766 1
									
d4768 11
a4778 2
       V_CONTEXT := 'Load Audit for ADDRESS_MEX ';
       select * into v_rectype from ADDRESS_MEX;      
a4779 3
       V_CONTEXT := 'Calling address_mex_initload_sp ';
       initload.address_mex_initload_sp(v_rectype); 

d4799 15
a4813 7
									
  begin		
       V_CONTEXT := 'Load Audit for ADDRESS_OTHER ';
       select * into v_rectype from address_other;
       
       V_CONTEXT := 'Calling address_other_initload_sp ';
       initload.address_other_initload_sp(v_rectype);                  
d4833 17
a4849 10
        v_rectype ADDRESS_USA%ROWTYPE;           
									
  begin			
      
       V_CONTEXT := 'Load Audit for ADDRESS_USA ';
       select * into v_rectype from ADDRESS_USA;     
       
       V_CONTEXT := 'Calling address_usa_initload_sp ';
       initload.address_usa_initload_sp(v_rectype);  
       
d4869 3
a4871 1
									
d4873 13
a4885 7
  
       V_CONTEXT := 'Load Audit for ADMINISTRATION ';
       select * into v_rectype from ADMINISTRATION;  
       
       V_CONTEXT := 'Calling ADMINISTRATION_INITLOAD_SP ';
       initload.ADMINISTRATION_INITLOAD_SP(v_rectype);
       
d4905 2
a4906 1
									
d4909 12
a4920 6
       V_CONTEXT := 'Load Audit for OTHER ';
       select * into v_rectype from other;   
       
       V_CONTEXT := 'Calling other_initload_sp ';
       initload.other_initload_sp(v_rectype);   
   
d4940 3
a4942 1
									
d4945 11
a4955 5
       V_CONTEXT := 'Load Audit for PHONE ';
       select * into v_rectype from PHONE;  
       
       V_CONTEXT := 'Calling phone_initload_sp ';
       initload.phone_initload_sp(v_rectype);    
d4976 3
a4978 1
									
d4981 11
a4991 5
       V_CONTEXT := 'Load Audit for REAL_ESTATE ';        
       select * into v_rectype from REAL_ESTATE;     
       
       V_CONTEXT := 'Calling real_estate_initload_sp ';
       initload.real_estate_initload_sp(v_rectype);  
d5012 3
a5014 1
									
d5017 12
a5028 6
       V_CONTEXT := 'Load Audit for STATUS ';  
       select * into v_rectype from status;       
       
       v_context := 'Calling STATUS_INITLOAD_SP ';
       initload.STATUS_INITLOAD_SP(v_rectype);                  
       
d5045 1
a5045 1
    	V_CONTEXT VARCHAR2(200);				
d5047 4
a5050 2
        v_rectype STORE%ROWTYPE;           
									
d5053 12
a5064 6
       V_CONTEXT := 'Load Audit for STORE ';  
       select * into v_rectype from STORE;      
       
       v_context := 'Calling STORE_INITLOAD_SP ';
       initload.STORE_INITLOAD_SP(v_rectype);   
       
d5084 3
a5086 1
									
d5089 12
a5100 6
       V_CONTEXT := 'Load Audit for POLLING ';
       select * into v_rectype from polling;  
       
       v_context := 'Calling polling_initload_sp ';
       initload.polling_initload_sp(v_rectype);    
       
d5121 2
d5125 12
a5136 5
       V_CONTEXT := 'Load Audit for TYPE ';
       select * into v_rectype from TYPE;      
       
       v_context := 'Calling type_initload_sp ';
       initload.type_initload_sp(v_rectype);     
d5158 16
a5173 8
  begin		
  
       V_CONTEXT := 'Load Audit for BANK_CARD ';
       select * into v_rectype from BANK_CARD;  
       
       v_context := 'Calling bank_card_initload_sp ';
       initload.bank_card_initload_sp(v_rectype);  
       
d5194 3
a5196 1
  begin		
d5198 12
a5209 6
       V_CONTEXT := 'Load Audit for POLLING_DWLD_RSN_HIST ';
       select * into v_rectype from POLLING_DWLD_RSN_HIST;   
       
       v_context := 'Calling poll_dwld_rsn_hist_initload_sp ';
       initload.poll_dwld_rsn_hist_initload_sp(v_rectype);   
       
d5230 3
a5232 1
  begin		
d5234 11
a5244 5
       v_context := 'Load Audit for TERMINAL ';
       select * into v_rectype from terminal; 
       
       v_context := 'Calling terminal_initload_sp ';
       initload.terminal_initload_sp(v_rectype);
d5266 3
a5268 1
  begin		
d5270 11
a5280 5
       v_context := 'Load Audit for SALES_REP ';
       select * into v_rectype from SALES_REP;  
       
       v_context := 'Calling SALES_REP_INITLOAD_SP ';
       initload.SALES_REP_INITLOAD_SP(v_rectype);   
d5301 4
a5304 2
									
  begin		
d5306 12
a5317 6
       v_context := 'Load Audit for TERRITORY_SALES_MGR ';
       select * into v_rectype from TERRITORY_SALES_MGR;  
       
       v_context := 'Calling territory_sales_mgr_initload_sp ';
       initload.territory_sls_mgr_initload_sp(v_rectype);   
       
d5336 4
a5339 2
        v_rectype TERRITORY%ROWTYPE;           
									
d5342 12
a5353 6
       v_context := 'Load Audit for TERRITORY ';
       select * into v_rectype from TERRITORY;       
       
       v_context := 'Calling territory_initload_sp ';
       initload.territory_initload_sp(v_rectype);    
       
d5374 2
d5378 12
a5389 6
       v_context := 'Load Audit for TERRITORY_ASSIGNMENT ';
       select * into v_rectype from TERRITORY_ASSIGNMENT; 
       
       v_context := 'Calling TERRITORY_INITLOAD_SP ';
       initload.TERR_ASSIGNMENT_INITLOAD_SP(v_rectype);
       
d5410 3
a5412 1
  begin		
d5414 13
a5426 6
       v_context := 'Load Audit for MARKETING '; 
       select * into v_rectype from MARKETING; 
       
       v_context := 'Calling MARKETING_INITLOAD_SP ';
       initload.MARKETING_INITLOAD_SP(v_rectype);                  
       
d5447 3
a5449 1
  begin		
d5451 12
a5462 6
       v_context := 'Load Audit for TAXWARE '; 
       select * into v_rectype from TAXWARE; 
       
       v_context := 'Calling TAXWARE_INITLOAD_SP ';
       initload.TAXWARE_INITLOAD_SP(v_rectype);  
       
d5476 1
d5489 3
a5491 2
      initload.DELETE_CCN_TABLES();

d5494 2
a5495 1

d5497 3
a5499 2
      initLoad.LOAD_STORE_TABLE();

d5502 2
a5503 1

d5506 2
a5507 1

d5510 2
a5511 1

d5514 2
a5515 1

d5518 2
a5519 1

d5522 2
a5523 1

d5526 2
a5527 1

d5530 2
a5531 1

d5534 2
a5535 1

d5538 2
a5539 1

d5542 2
a5543 1

d5546 1
d5550 1
d5554 1
d5558 1
d5562 1
d5566 1
d5570 2
a5571 1

d5573 3
a5575 2
      initLoad.LOAD_TERMINAL_TABLE();
       
d5578 2
a5579 1

d5582 2
a5583 1

d5586 3
a5588 2

      v_context := 'Load Real Estate Table ';
d5590 3
a5592 2

      v_context := 'Load Other Table ';
d5594 7
a5600 5

      v_context := 'Load Phone Table ';
      initLoad.PHONE_AUDIT_INITLOAD_SP();

      v_context := 'Load Status Table ';
d5602 3
a5604 2

      v_context := 'Load Type Table ';
d5606 3
a5608 2

      v_context := 'Load Address USA Table ';
d5610 2
a5611 1

d5614 3
a5616 2

      v_context := 'Load Address MEX Table ';
d5618 3
a5620 2

      v_context := 'Load Address OTH Table ';
d5622 5
a5626 3

      v_context := 'Load Sales Manager Table ';
      initLoad.TERR_SALES_AUDIT_INITLOAD_SP();
d5628 1
a5628 1
      v_context := 'Load Territory Table ';
d5630 1
d5634 1
d5638 1
d5640 1
a5640 1
      v_context := 'Load Polling Table ';
d5642 1
d5646 1
d5648 1
a5648 1
      v_context := 'Load Bank Card Table ';
d5650 13
a5662 9

      v_context := 'Load Terminal Table ';
      initLoad.TERMINAL_AUDIT_INITLOAD_SP(); 
       
      v_context := 'Load Marketing Table ';
      initLoad.MARKETING_AUDIT_INITLOAD_SP();  
       
      v_context := 'Load Taxware Table ';
      initload.taxware_audit_INITLOAD_SP();
d5665 1
a5665 1
      common_tools.ALTER_ALL_TRIGGERS ( 'ENABLE' );
d5667 1
@


1.9
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d631 1
d640 3
d653 1
a653 1

d662 1
d679 1
a679 1

d681 1
a681 1
      v_ccntemp_row.phone_number_type       := ccntemp_rec.phone_type;
d686 1
d688 5
a692 9
      insert into PHONE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   
d694 8
d718 1
a718 8

-- EXCEPTION

--    when others then
--       dbms_output.put_line('Load_Phone_Table - Table Not Loaded Stopped on Record - ' 
--       || v_count);


d827 3
a829 2
end LOAD_PHONE_TABLE;

@


1.8
log
@CCNA356- ADD INITLOADS FOR PHONE THRU TYPE
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d4680 770
@


1.7
log
@CCNA-356 ADD INITLOADS MODULE PHONE THRUOUGH TYPE
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d2 1
a2 1
PACKAGE initLoad
d4 26
a29 1
This package will load the new CCN Oracle Database
d32 1
a32 1
IS
d35 1
a35 1
PROCEDURE DELETE_CCN_TABLES;
d43 1
d46 37
a82 1
	--return REF_CURSOR;
d85 1
a85 1
PROCEDURE LOAD_COST_CENTER_TABLE;
d94 129
a222 1
	
d224 1
a224 1
PROCEDURE LOAD_STORE_TABLE;
d228 1
a228 1
	This function will load the STORE table from data  
d233 1
d235 100
d336 2
a337 1
PROCEDURE LOAD_ADMINISTRATION_TABLE;
d341 1
a341 1
	This function will load the ADMINISTRATION table from data  
d345 90
a434 1
***************************************************************/
d437 1
a437 1
PROCEDURE LOAD_REAL_ESTATE_TABLE;
d441 1
a441 1
	This function will load the REAL_ESTATE table from data  
d445 87
a531 1
***************************************************************/
d534 1
a534 1
PROCEDURE LOAD_OTHER_TABLE;
d538 1
a538 1
	This function will load the OTHER table from data  
d542 87
a628 1
***************************************************************/
d631 1
a631 1
PROCEDURE LOAD_PHONE_TABLE;
d635 1
a635 1
	This function will load the PHONE table from data  
d639 80
d722 106
a827 1
PROCEDURE LOAD_STATUS_TABLE;
d831 1
a831 1
	This function will load the STATUS table from data  
d835 70
a904 1
***************************************************************/
d907 1
a907 1
PROCEDURE LOAD_TYPE_TABLE;
d911 1
a911 1
	This function will load the TYPE table from data  
d915 70
a984 1
***************************************************************/
d987 1
a987 1
PROCEDURE LOAD_ADDRESS_USA_TABLE;
d991 1
a991 1
	This function will load the ADDRESS_USA table from data  
d995 97
a1091 1
***************************************************************/
d1094 1
a1094 1
PROCEDURE LOAD_ADDRESS_CAN_TABLE;
d1098 1
a1098 1
	This function will load the ADDRESS_CAN table from data  
d1102 101
a1202 1
***************************************************************/
d1205 1
a1205 1
PROCEDURE LOAD_ADDRESS_MEX_TABLE;
d1209 1
a1209 1
	This function will load the ADDRESS_MEX table from data  
d1212 92
a1303 2
created : 10/05/2011 mdh CCN Project....
***************************************************************/
d1306 1
a1306 1
PROCEDURE LOAD_ADDRESS_OTH_TABLE;
d1310 1
a1310 1
	This function will load the ADDRESS_OTH table from data  
d1314 118
a1431 1
***************************************************************/
d1434 1
a1434 1
PROCEDURE LOAD_MARKETING_TABLE;
d1438 1
a1438 1
	This function will load the MARKETING table from data  
d1442 139
a1580 1
***************************************************************/
d1583 1
a1583 1
PROCEDURE LOAD_SALES_MANAGER_TABLE;
d1587 1
a1587 1
	This function will load the TERRITORY_SALES_MANAGER table from data  
d1590 82
a1671 2
created : 11/17/2011 blr CCN Project....
***************************************************************/
d1674 1
a1674 1
PROCEDURE LOAD_TERRITORY_TABLE;
d1678 1
a1678 1
	This function will load the TERRITORY table from data  
d1681 69
a1749 2
created : 11/21/2011 blr CCN Project....
***************************************************************/
d1752 1
a1752 1
PROCEDURE LOAD_SALES_REP_TABLE;
d1756 1
a1756 1
	This function will load the SALES_REP table from data  
d1759 96
a1854 2
created : 11/21/2011 blr CCN Project....
***************************************************************/
d1857 1
a1857 1
PROCEDURE LOAD_TERRITORY_ASSIGN_TABLE;
d1859 1
a1859 1
	LOAD_TERRITORY_ASSIGNMENT_TABLE
d1861 1
a1861 1
	This function will load the TERRITORY_ASSIGNMENT table from data  
d1864 92
a1955 2
created : 11/21/2011 blr CCN Project....
***************************************************************/
d1958 1
a1958 1
PROCEDURE UPDT_TERRITORY_TABLE;
d1962 118
a2079 4
	This function will update the TERRITORY table from a data  
	file from legacy idms database.  This procedure will update
  all territories added by Benita in Territory to make sure they
  align to the CCN Database.
d2081 1
a2081 2
created : 10/25/2011 mdh CCN Project....
***************************************************************/
d2084 1
a2084 1
PROCEDURE LOAD_POLLING_TABLE;
d2088 80
a2167 2
	This function will update the POLLING table from a data  
	file from legacy idms database.  
d2169 1
a2169 2
created : 06/15/2012 tal CCN Project....
***************************************************************/
d2172 1
a2172 1
PROCEDURE LOAD_BANK_CARD_TABLE;
d2176 107
a2282 2
	This function will update the BANK_CARD table from a data  
	file from legacy idms database.  
d2284 1
a2284 2
created : 06/15/2012 tal CCN Project....
***************************************************************/
d2287 1
a2287 1
PROCEDURE LOAD_TERMINAL_TABLE;
d2291 93
a2383 2
	This function will update the TERMINAL table from a data  
	file from legacy idms database.  
d2385 1
a2385 2
created : 06/15/2012 tal CCN Project....
***************************************************************/
d2388 1
a2388 1
PROCEDURE LOAD_POLLING_DWLD_RSN_TABLE;
d2392 2
a2393 2
	This function will update the POLLING_DWLD_RSN_HIST table from a data  
	file from legacy idms database.  
d2396 129
a2524 1
***************************************************************/
d2527 1
a2527 1
PROCEDURE LOAD_TAXWARE_TABLE;
d2531 2
a2532 2
	This function will update the TAXWARE table from a data  
	file from legacy idms database.  
d2535 69
a2603 1
***************************************************************/
d2614 71
a2684 1
    inADDRESS_CAN_rowtype  IN  ADDRESS_CAN%ROWTYPE );
d2695 71
a2765 1
    inADDRESS_MEX_rowtype  IN  ADDRESS_MEX%ROWTYPE );
d2776 71
a2846 1
    inADDRESS_OTHER_rowtype  IN  ADDRESS_OTHER%ROWTYPE );
d2857 75
a2931 1
    inADDRESS_USA_rowtype  IN  ADDRESS_USA%ROWTYPE );
d2938 1
a2938 1
	This procedure is intended to build an AUDIT_LOG entry for ADministration Records
d2942 59
a3000 1
    inADMINISTRATION_rowtype  IN  ADMINISTRATION%ROWTYPE );
d3009 1
a3009 1
created : 04/18/2012 TAL CCN Project....
d3011 73
a3083 1
    inBANK_CARD_rowtype  IN  BANK_CARD%ROWTYPE );
d3092 1
a3092 1
created : 04/18/2012 TAL CCN Project....
d3094 87
a3180 1
    inCOST_CENTER_rowtype  IN  COST_CENTER%ROWTYPE );
d3189 1
a3189 1
created : 04/18/2012 TAL CCN Project....
d3191 84
a3274 1
    inEMP_DATA_rowtype  IN  EMP_DATA%ROWTYPE );
d3281 1
a3281 1
	This procedure is intended to build an AUDIT_LOG entry for HIER_DESC Records
d3283 1
a3283 1
created : 04/18/2012 TAL CCN Project....
d3285 66
a3350 1
    inHIER_DESC_rowtype  IN  HIERARCHY_DESCRIPTION%ROWTYPE );
d3357 1
a3357 1
	This procedure is intended to build an AUDIT_LOG entry for HIER_DETAIL Records
d3359 1
a3359 1
created : 04/18/2012 TAL CCN Project....
d3361 81
a3441 1
    inHIER_DETAIL_rowtype  IN  HIERARCHY_DETAIL%ROWTYPE );
d3448 1
a3448 1
	This procedure is intended to build an AUDIT_LOG entry for HIER_HEADER Records
d3450 1
a3450 1
created : 04/18/2012 TAL CCN Project....
d3452 64
a3515 1
    inHIER_HEADER_rowtype  IN  HIERARCHY_HEADER%ROWTYPE );
d3524 1
a3524 1
created : 04/18/2012 TAL CCN Project....
d3526 73
a3598 1
    inMARKETING_rowtype  IN  MARKETING%ROWTYPE );
d3607 1
a3607 1
created : 04/18/2012 TAL CCN Project....
a3608 1
    inOTHER_rowtype  IN  OTHER%ROWTYPE );
d3610 65
a3674 1
procedure PHONE_INITLOAD_SP(
d3684 64
a3747 1
);
d3759 73
a3831 2
  ); 
  
d3842 67
a3908 2
  ); 
  
d3919 61
a3979 2
  ); 
  
d3990 2
a3991 1
  ); 
d3993 66
d4069 67
a4135 2
  ); 
  
d4146 71
a4216 2
  ); 
  
d4227 69
a4295 2
  ); 
  
d4306 70
a4375 2
  ); 
  
d4386 72
a4457 2
  ); 
  
d4468 64
a4531 2
    );
    
d4542 69
a4610 3
  );
  
  
d4620 6
a4625 1
  ); 
d4627 54
@


1.6
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d2 1
a2 1
PACKAGE body initLoad
d4 1
a4 26
This package will load:

  DELETE_CCN_TABLES           -  11/23/2011
  LOAD_COST_CENTER_TABLE      -  09/29/2011 CHG 09/10/2012 MDH 
  LOAD_STORE_TABLE            -  09/29/2011 CHG 09/10/2012 MDH
  LOAD_ADMINISTATION_TABLE    -  10/25/2011
  LOAD_REAL_ESTATE_TABLE      -  10/25/2011
  LOAD_OTHER_TABLE            -  10/25/2011
  LOAD_PHONE_TABLE            -  09/19/2011
  LOAD_STATUS_TABLE           -  09/19/2011
  LOAD_TYPE_TABLE             -  09/19/2011
  LOAD_ADDRESS_USA_TABLE      -  10/05/2011
  LOAD_ADDRESS_CAN_TABLE      -  10/05/2011
  LOAD_ADDRESS_MEX_TABLE      -  10/10/2011
  LOAD_ADDRESS_OTH_TABLE      -  10/10/2011
  LOAD_SALES_MANAGER_TABLE    -  10/17/2011
  LOAD_TERRITORY_TABLE        -  10/17/2011
  LOAD_SALES_REP_TABLE        -  10/17/2011
  LOAD_TERR_ASSIGNMENT_TABLE  -  10/17/2011
  LOAD_TERRITORY_CCNTR_TABLE  -  11/03/2011  
  LOAD_POLLING_TABLE          -  10/15/2011
  LOAD_TERMINAL_TABLE         -  10/15/2011
  LOAD_BANK_CARD_TABLE        -  10/15/2011
  LOAD_POLLING_DWLS_HIST_TABLE   08/23/2012 - tal
  LOAD_TAXWARE_TABLE          -  08/23/2012 - tal
  
d7 1
a7 1
AS
d10 1
a10 1
PROCEDURE DELETE_CCN_TABLES
a17 1

d20 1
a20 37
is
begin

     delete TAXWARE ;
     delete POLLING_DWLD_RSN_HIST ;
     delete TERMINAL ;
     delete BANK_CARD ;
     delete POLLING_DWLD_RSN_HIST;
     delete POLLING ;
     delete TERRITORY_ASSIGNMENT ; 
     delete SALES_REP ;
     delete TERRITORY ; 
     delete TERRITORY_SALES_MGR ;
     delete MARKETING ; 
     delete ADDRESS_OTHER ;
     delete ADDRESS_MEX ;
     delete ADDRESS_CAN ;
     delete ADDRESS_USA ; 
     delete TYPE ;
     delete STATUS ;
     delete PHONE ;
     delete TAXWARE;
     delete OTHER ; 
     delete REAL_ESTATE ;
     delete ADMINISTRATION ;
     delete STORE ;
     delete COST_CENTER ; 

exception

      when others then
          dbms_output.put_line('Delete_CCN_Tables - CCN Deletion Errors '
                || sqlerrm );
end DELETE_CCN_TABLES;



d23 1
a23 1
PROCEDURE LOAD_COST_CENTER_TABLE
d32 1
a32 129
is   
   cursor ccntemp_cur is
      select COST_CENTER_CODE,
             COST_CENTER_NAME,
             CATEGORY_CODE,
             ENTITY_TYPE,
             STATEMENT_TYPE,
             COUNTRY_CODE,
	           BEGIN_DATE,
             OPEN_DATE,
	           MOVE_DATE,
             CLOSE_DATE,
             FINANCIAL_CLOSE_DATE, 
             PROGRAM_VERSION,
             PROG_VER_EFF_DATE,  
             UPS_ZONE_CODE,
             RPS_ZONE_CODE,
             DUNS_NUMBER,
             CURRENCY_CODE,
             PRIME_LOGO_IND,
             SECND_LOGO_IND,
             LEASE_OWN_CODE,
             MISSION_TYPE,
             DEP_TKT_REORDER_SW,
             DEP_BAG_REORDER_SW,
             BANK_TYPE,
             POP_KIT_CODE FROM TEMP_COST_CENTER;
   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row COST_CENTER%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.cost_center_name        := ccntemp_rec.cost_center_name;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.entity_type             := ccntemp_rec.entity_type;
 --     v_ccntemp_row.statement_type       := ccntemp_rec.statement_type;
      v_ccntemp_row.country_code            := substr(ccntemp_rec.country_code,1,3);
      v_ccntemp_row.transport_type          := null;
--      v_ccntemp_row.tax_jurisdiction     := null;  
      v_ccntemp_row.pos_prog_ver_nbr        := ccntemp_rec.program_version;  
      v_ccntemp_row.ups_zone_code           := ccntemp_rec.ups_zone_code;
      v_ccntemp_row.currency_code           := ccntemp_rec.currency_code;
      v_ccntemp_row.pri_logo_group_ind      := ccntemp_rec.prime_logo_ind;
      v_ccntemp_row.scd_logo_group_ind      := ccntemp_rec.secnd_logo_ind;
      v_ccntemp_row.duns_number             := ccntemp_rec.duns_number;
      v_ccntemp_row.lease_own_code          := ccntemp_rec.lease_own_code;
      v_ccntemp_row.mission_type_code       := ccntemp_rec.mission_type;
      v_ccntemp_row.deposit_bag_reorder     := ccntemp_rec.dep_bag_reorder_sw;
      v_ccntemp_row.deposit_ticket_reorder  := ccntemp_rec.dep_tkt_reorder_sw;
      v_ccntemp_row.banking_type            := ccntemp_rec.bank_type;
      v_ccntemp_row.pop_kit_code            := ccntemp_rec.pop_kit_code;
      
      if ccntemp_rec.statement_type  <> '**'  then
         v_ccntemp_row.statement_type  := ccntemp_rec.statement_type;
      else
         v_ccntemp_row.statement_type  :=  null;
      end if; 

      if ccntemp_rec.begin_date <> '00000000' then
         v_ccntemp_row.begin_date := to_date(ccntemp_rec.begin_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.open_date <> '00000000' then
         v_ccntemp_row.open_date := to_date(ccntemp_rec.open_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.move_date <> '00000000' then
         v_ccntemp_row.move_date := to_date(ccntemp_rec.move_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.close_date <> '00000000' then
         v_ccntemp_row.close_date := to_date(ccntemp_rec.close_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.financial_close_date <> '00000000' then
         v_ccntemp_row.financial_close_date := to_date(ccntemp_rec.financial_close_date, 'YYYYMMDD');
      end if;   

      if ccntemp_rec.prog_ver_eff_date <> '00000000' then
         v_ccntemp_row.pos_prog_ver_eff_date := to_date(ccntemp_rec.prog_ver_eff_date, 'YYYYMMDD');
      end if;   

      if ccntemp_rec.rps_zone_code <> '0' then
         v_ccntemp_row.rps_zone_code := ccntemp_rec.rps_zone_code;
      end if;   

   
      
      insert into COST_CENTER values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Cost_Center_Table - Invalid Load Cost Center ' 
            || ccntemp_rec.cost_center_code 
            || '-' 
            || ccntemp_rec.cost_center_name 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Cost_Center_Table - Total Loaded Cost Centers '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Cost_Center_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_COST_CENTER_TABLE;

d34 1
a34 1
PROCEDURE LOAD_STORE_TABLE
d38 1
a38 1
	This procedure will load the STORE table from data  
a42 1
is   
a43 100
   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE,
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE,
       POP_KIT_COUNT FROM TEMP_STORE;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row STORE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.inventory_indicator     := ccntemp_rec.perp_inv_ind;
     

      if ccntemp_rec.perp_inv_start_date <> '00000000' then
         v_ccntemp_row.perp_inv_start_date := to_date(ccntemp_rec.perp_inv_start_date, 'YYYYMMDD');
      end if;   

      v_ccntemp_row.rural_metro_zone_code   := ccntemp_rec.rural_metro_zone_code;
      v_ccntemp_row.classification_code     := ccntemp_rec.class_code;
--      v_ccntemp_row.deposit_bag_reorder     := ccntemp_rec.dep_bag_reorder_sw;
--      v_ccntemp_row.deposit_ticket_reorder  := ccntemp_rec.dep_tkt_reorder_sw;
--      v_ccntemp_row.banking_type            := ccntemp_rec.bank_type;
 --     v_ccntemp_row.duns_number             := ccntemp_rec.duns_nbr;
 --     v_ccntemp_row.pri_logo_group_ind      := ccntemp_rec.primary_logo_ind;
 --     v_ccntemp_row.sec_logo_group_ind      := ccntemp_rec.secondary_logo_ind;
 --     v_ccntemp_row.lease_own_code          := ccntemp_rec.lease_own_code;
 --     v_ccntemp_row.mission_type_code       := ccntemp_rec.mission_type;
      v_ccntemp_row.selling_store_Flag      := null;
      
      
      insert into STORE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Store_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Store_Table - Total Loaded Stores '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Store_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
 
end LOAD_STORE_TABLE;
d45 1
a45 2

PROCEDURE LOAD_ADMINISTRATION_TABLE
d49 1
a49 1
	This procedure will load the ADMINISTRATION table from data  
d53 1
a53 88
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE, 
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE  FROM TEMP_ADMINISTRATION;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADMINISTRATION%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.admin_cost_cntr_type    := null;
             

      if ccntemp_rec.internal_mail_nbr <> '000' then
         v_ccntemp_row.internal_mail_number := ccntemp_rec.internal_mail_nbr;
      end if;   

     
      insert into ADMINISTRATION values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Administration_Table - Invalid Load Admin CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Administration_Table - Total Loaded Admin CCNTRS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Administration_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
a54 1
end LOAD_ADMINISTRATION_TABLE;
d56 1
a56 2

PROCEDURE LOAD_REAL_ESTATE_TABLE
d60 1
a60 1
	This procedure will load the REAL_ESTATE table from data  
d64 1
a64 84
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE,
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE  FROM TEMP_REAL_ESTATE;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row REAL_ESTATE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code       := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category               := ccntemp_rec.category_code;
--      v_ccntemp_row.gnrc_country           := ccntemp_rec.gnrc_group_ind;
--      v_ccntemp_row.lease_own_code         := substr(ccntemp_rec.lease_own_code,1,1);
           
     
      insert into REAL_ESTATE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Real_Estate_Table - Invalid Load Real Estate CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Real_Estate_Table - Total Loaded Real Estate CCNTRS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Real_Estate_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
d67 1
a67 4
end LOAD_REAL_ESTATE_TABLE;


PROCEDURE LOAD_OTHER_TABLE
d71 1
a71 1
	This procedure will load the OTHER table from data  
d75 1
a75 2
****************************************************************/
is   
a76 81
   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       CATEGORY_CODE,
	     LAST_MAINT_DATE,
	     OPEN_TIME,
	     CLOSE_TIME,
	     SUNDAY_OPEN_IND,
	     PERP_INV_START_DATE,
	     ACT_FT_EMP_CNT,
	     BGT_FT_EMP_CNT,
	     ACT_PT_EMP_CNT,
	     BGT_PT_EMP_CNT,
	     CLASS_CODE,	
	     GNRC_GROUP_IND,		
       CONTROL_CLERK_CODE,
	     PERP_INV_IND,
	     SCHEDULE_CODE,
	     RURAL_METRO_ZONE_CODE,
	     UPS_ZONE_CODE,
	     RPS_ZONE,
	     INTERNAL_MAIL_NBR,
	     REMERCHANDISE_CODE,
	     PLANOGRAM_TYPE_CODE,
	     SHELF_LABEL_CODE,
	     SHELF_LABEL_COUNT,
	     DUNS_NBR,
	     PRIMARY_LOGO_IND,
	     SECONDARY_LOGO_IND,
	     PART_TIME_SCHEDULE,
       PROGRAM_TYPE_CODE,
       PROGRAM_VERSION_NBR, 
       LEASE_OWN_CODE,
       HOME_STORE,
       MISSION_TYPE  FROM TEMP_OTHER;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row OTHER%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code       := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category               := ccntemp_rec.category_code;
--      v_ccntemp_row.lease_own_code         := ccntemp_rec.lease_own_code;
--      v_ccntemp_row.mission_type_code      := ccntemp_rec.mission_type;
           
         
      insert into OTHER values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Other_Table - Invalid Load Other CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Other_Table - Total Loaded Other CCNTRS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Other_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
d78 1
a78 5

end LOAD_OTHER_TABLE;


PROCEDURE LOAD_PHONE_TABLE
d82 1
a82 1
	This procedure will load the PHONE table from data  
a85 80
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       PHONE_TYPE,
	     phone_area_code,	
	     PHONE_NUMBER,
	     phone_extension 
       FROM TEMP_PHONE;

   cursor ccninfo_cur is
      select    COST_CENTER_CODE, 
		EFFECTIVE_DATE, 
		EXPIRATION_DATE, 
		NETACC_PHONE_1, 
		netacc_phone_2  	
    
		FROM "COSTCNTR"."TEMP_BANK_CARD";

   v_input_cnt   integer := 0;
   v_bypass_cnt  integer := 0;
   v_loaded_cnt  integer := 0;

   v_ccphone_row phone%rowtype;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row PHONE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.phone_number_type       := ccntemp_rec.phone_type;
      v_ccntemp_row.phone_area_code         := ccntemp_rec.phone_area_code;
      v_ccntemp_row.phone_number            := ccntemp_rec.phone_number;
      v_ccntemp_row.phone_extension         := ccntemp_rec.phone_extension;
      

      insert into PHONE values v_ccntemp_row;
      v_ccntemp_row := null ;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Phone_Table - Invalid Load Cost Center ' 
            || ccntemp_rec.cost_center_code
            || '-'
            || ccntemp_rec.phone_type
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Phone_Table - Total Loaded Cost Center Phone Numbers '
      || v_count);

-- EXCEPTION

--    when others then
--       dbms_output.put_line('Load_Phone_Table - Table Not Loaded Stopped on Record - ' 
--       || v_count);


/**************************************************************
   BANK_PHONE Load  - Commented out DO NOt Load BAnk Phone#'s
   as of 4/25/13 via MDH
d89 1
a89 106
--   for ccninfo_rec in ccninfo_cur loop

--   BEGIN
 
     
/*************************************************************************
      Now Build the Phone Table Entries  --
      Commented out DO NOt Load Bank Phone#'s as of 4/25/13 via MDH
**************************************************************************/

/***************************************************************************
   
    	v_input_cnt  := v_input_cnt  + 1;
  
      if  ccninfo_rec.expiration_date  !=  '00000000'   then
	        v_bypass_cnt  := v_bypass_cnt  + 1;
      end if;
  
      if  ccninfo_rec.expiration_date  =  '00000000'
      and ccninfo_rec.netacc_phone_1  !=  '99999999999'
      and ccninfo_rec.netacc_phone_1  is not  null         then
	        v_ccphone_row.cost_center_code     := ccninfo_rec.cost_center_code; 
          v_ccphone_row.phone_number_type    := 'BC1';
 
          v_ccphone_row.phone_area_code      := '' ;
          if  substr(ccninfo_rec.netacc_phone_1,2,3)   !=  '   ' then
              v_ccphone_row.phone_area_code      := substr(ccninfo_rec.netacc_phone_1,2,3);
          end if;
	          
          v_ccphone_row.phone_number         := substr(ccninfo_rec.netacc_phone_1,5,7); 
          
          v_ccphone_row.phone_extension      := '';
          if  substr(ccninfo_rec.netacc_phone_1,12,4)   !=  '    ' then
              v_ccphone_row.phone_extension  := substr(ccninfo_rec.netacc_phone_1,12,4);
          end if;
   
   insert into phone values v_ccphone_row;
	 
   v_loaded_cnt  := v_loaded_cnt  + 1;
   
      end if;
       
      if  ccninfo_rec.expiration_date  =  '00000000'
      and ccninfo_rec.netacc_phone_2  !=  '99999999999'
      and ccninfo_rec.netacc_phone_2  is not  null         then
	        v_ccphone_row.cost_center_code     := ccninfo_rec.cost_center_code; 
          v_ccphone_row.phone_number_type    := 'BC2';
          
          v_ccphone_row.phone_area_code      := '' ;
          if  substr(ccninfo_rec.netacc_phone_2,2,3)   !=  '   ' then
              v_ccphone_row.phone_area_code      := substr(ccninfo_rec.netacc_phone_2,2,3);
          end if;
	          
          v_ccphone_row.phone_number         := substr(ccninfo_rec.netacc_phone_2,5,7);  
          
          v_ccphone_row.phone_extension      := '';
          if  substr(ccninfo_rec.netacc_phone_2,12,4)   !=  '    ' then
              v_ccphone_row.phone_extension  := substr(ccninfo_rec.netacc_phone_2,12,4);
          end if;
   
   insert into phone values v_ccphone_row;
	 
   v_loaded_cnt  := v_loaded_cnt  + 1;
   
      end if;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load Error ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || '-'
            || ccninfo_rec.EFFECTIVE_DATE 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Bank_Card Temp Rows Read '
      || v_input_cnt);

   dbms_output.put_line('Bank_Card Rows Bypassed   '
      || v_bypass_cnt);

   dbms_output.put_line('Phone Rows Loaded         '
      || v_loaded_cnt);

EXCEPTION

   when others then
      dbms_output.put_line('Table Not Loaded Stopped on Record - ' 
      || v_input_cnt);
*************************************************************************/

end LOAD_PHONE_TABLE;


PROCEDURE LOAD_STATUS_TABLE
d93 1
a93 1
	This procedure will load the STATUS table from data  
d97 1
a97 2
****************************************************************/
is   
a98 5
   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       STATUS_CODE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE FROM TEMP_STATUS;
d100 1
a100 64
   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row STATUS%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.status_code             := ccntemp_rec.status_code;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;
              
     
      insert into STATUS values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Status_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.status_code
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Status_Table - Total Loaded Store Status Records '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Status_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);


end LOAD_STATUS_TABLE;


PROCEDURE LOAD_TYPE_TABLE
d104 1
a104 1
	This procedure will load the TYPE table from data  
d108 1
a108 35
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       TYPE_CODE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE FROM TEMP_TYPE;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row TYPE%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.type_code               := ccntemp_rec.type_code;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;
              
     
      insert into TYPE values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;
a109 5
      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   
d111 1
a111 31
   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Type_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.type_code
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Type_Table - Total Loaded Store Type Records '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Type_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);


end LOAD_TYPE_TABLE;


PROCEDURE LOAD_ADDRESS_USA_TABLE
d115 1
a115 1
	This procedure will load the ADDRESS_USA table from data  
d119 1
a119 95
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_USA;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_USA%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.state_code           := ccntemp_rec.state_code;
      v_ccntemp_row.zip_code             := substr(ccntemp_rec.zip_prefix,1,5);
      v_ccntemp_row.zip_code_4           := ccntemp_rec.zip_suffix;
      v_ccntemp_row.destination_point    := ccntemp_rec.destination_point;
      v_ccntemp_row.check_digit          := ccntemp_rec.check_digit;
      v_ccntemp_row.county               := ccntemp_rec.county_name;
   -- v_ccntemp_row.country_code         := ccntemp_rec.country_code;
      v_ccntemp_row.fips_code            := ccntemp_rec.fips_code;
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_USA values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_USA_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_USA_Table - Total Loaded Store Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_USA_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
a120 1
end LOAD_ADDRESS_USA_TABLE;
d122 1
a122 2

PROCEDURE LOAD_ADDRESS_CAN_TABLE
d126 1
a126 1
	This procedure will load the ADDRESS_CAN table from data  
d130 1
a130 101
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_CAN;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_CAN%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN
  
      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.province_code        := ccntemp_rec.state_code;

      if ccntemp_rec.state_code  = 'QU'  then
          v_ccntemp_row.province_code  := 'QC';
      end if;
 
      if ccntemp_rec.state_code  =  'AL'  then
          v_ccntemp_row.province_code  := 'AB';
      end if;

      v_ccntemp_row.postal_code          := ccntemp_rec.zip_prefix;
   -- v_ccntemp_row.country_code         := ccntemp_rec.country_code;
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_CAN values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_CAN_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_CAN_Table - Total Loaded Canada Store Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_CAN_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_ADDRESS_CAN_TABLE;
d133 1
a133 1
PROCEDURE LOAD_ADDRESS_MEX_TABLE
d137 1
a137 1
	This procedure will load the ADDRESS_MEX table from data  
d140 2
a141 92
created : 10/10/2011 mdh CCN Project....
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_MEX;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_MEX%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.province_code        := ccntemp_rec.state_code;
      v_ccntemp_row.postal_code          := substr(ccntemp_rec.zip_prefix,1,5);
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_MEX values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_MEX_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_MEX_Table - Total Loaded Other Mexico Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_MEX_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_ADDRESS_MEX_TABLE;
d144 1
a144 1
PROCEDURE LOAD_ADDRESS_OTH_TABLE
d148 1
a148 1
	This procedure will load the ADDRESS_OTH table from data  
d152 1
a152 2
****************************************************************/
is   
a153 72
   cursor ccntemp_cur is
      select COST_CENTER_CODE,
       ADDRESS_TYPE,
	     EFFECTIVE_DATE,
	     EXPIRATION_DATE,
	     ADDRESS_LINE_1,
	     ADDRESS_LINE_2,
	     ADDRESS_LINE_3,
	     CITY,
	     STATE_CODE,
	     ZIP_PREFIX,
	     ZIP_SUFFIX,
	     DESTINATION_POINT,	
	     CHECK_DIGIT,		
       COUNTY_CODE,
       COUNTY_NAME,
	     COUNTRY_CODE,
	     FIPS_CODE FROM TEMP_ADDRESS_OTHER;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccntemp_row ADDRESS_OTHER%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.address_type            := ccntemp_rec.address_type;
     

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

      
      v_ccntemp_row.address_line_1       := ccntemp_rec.address_line_1;
      v_ccntemp_row.address_line_2       := ccntemp_rec.address_line_2;
      v_ccntemp_row.address_line_3       := ccntemp_rec.address_line_3;
      v_ccntemp_row.city                 := ccntemp_rec.city;
      v_ccntemp_row.province_code        := null;
      v_ccntemp_row.state_code           := ccntemp_rec.state_code;
      v_ccntemp_row.postal_code          := ccntemp_rec.zip_prefix 
                                         || ccntemp_rec.zip_suffix;
      v_ccntemp_row.country_code         := ccntemp_rec.country_code;
  --                                     Eventually the above field will be country name
  --
  --    if ccntemp_rec.country_code  = 'JAM' then
  --        v_ccntemp_row.country_code  := 'JAMAICA';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'ANT' then
  --        v_ccntemp_row.country_code  := 'NETHERLANDS ANTILLES';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'TTO' then
  --        v_ccntemp_row.country_code  := 'TRINIDAD AND TOBAGO';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'ABW' then
  --        v_ccntemp_row.country_code  := 'ARUBA';
  --    end if;
  --
  --    if ccntemp_rec.country_code  = 'CUW' then
  --        v_ccntemp_row.country_code  := 'CURACAO';
  --    end if;
d155 1
a155 45
  
      v_ccntemp_row.valid_address        := null ;
      
     
      insert into ADDRESS_OTHER values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Address_OTH_Table - Invalid Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || '-'
            || ccntemp_rec.address_type
            || '-'
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Address_OTH_Table - Total Loaded Other Store Addresses '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Address_OTH_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);


end LOAD_ADDRESS_OTH_TABLE;


PROCEDURE LOAD_MARKETING_TABLE
d159 1
a159 1
	This procedure will load the MARKETING table from data  
d163 1
a163 126
****************************************************************/
is   

   cursor ccntemp_cur is
      select COST_CENTER_CODE,
             CATEGORY_CODE,
             MARKETING_TYPE,
	           EFFECTIVE_DATE,
	           EXPIRATION_DATE,
             MARKET_BRAND,
             MARKET_MISSION,
             SALES_FLOOR_SIZE,
             STOCK_ROOM_SIZE,
             REAL_ESTATE_SETTING  FROM TEMP_MARKETING;

   v_count  integer    := 0;
   v_commit integer    := 0;
   v_mkt_count integer := 0;
   v_ccntemp_row MARKETING%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      v_ccntemp_row.cost_center_code        := ccntemp_rec.cost_center_code;
      v_ccntemp_row.category                := ccntemp_rec.category_code;
      v_ccntemp_row.marketing_type          := ccntemp_rec.marketing_type;
           

      if ccntemp_rec.effective_date <> '00000000' then
         v_ccntemp_row.effective_date := to_date(ccntemp_rec.effective_date, 'YYYYMMDD');
      end if;
      
      if ccntemp_rec.expiration_date <> '00000000' then
         v_ccntemp_row.expiration_date := to_date(ccntemp_rec.expiration_date, 'YYYYMMDD');
      end if;

/*
verify market brand, mission, sales and stock room floor szie, and real estate setting codes
*/
    
        v_mkt_count := 0;
	select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_BRAND'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.market_brand);

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_MISSION'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.market_mission);   

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_SLS_SQ_FT'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.sales_floor_size); 

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_WHS_SQ_FT'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.stock_room_size); 

        select count(1)
   	  into v_mkt_count
          from CODE_DETAIL cddet 
	    where (cddet.code_header_name  = 'MARKET_RE_SET'  and
                   cddet.code_header_type  = 'COD'           and
                   cddet.code_detail_value = ccntemp_rec.real_estate_setting); 

     

     v_ccntemp_row.mkt_brand               := ccntemp_rec.market_brand;
     v_ccntemp_row.mkt_mission             := ccntemp_rec.market_mission;
     v_ccntemp_row.mkt_sales_floor_size    := ccntemp_rec.sales_floor_size;
     v_ccntemp_row.mkt_warehouse_size      := ccntemp_rec.stock_room_size;
     v_ccntemp_row.mkt_real_estate_setting := ccntemp_rec.real_estate_setting;
         
     
      insert into MARKETING values v_ccntemp_row;
      v_ccntemp_row := null;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

       when no_data_found then
          dbms_output.put_line('Load_Marketing_Table - '
            || 'Invalid Market (Brand, Mission, SLS SQ FT, WHS SQ FT, RE Setting) for Store ' 
            || ccntemp_rec.cost_center_code 
            || '-'
            || ccntemp_rec.market_brand
            || '-'
            || ccntemp_rec.market_mission
            || '-'
            || ccntemp_rec.sales_floor_size
            || '-'
            || ccntemp_rec.stock_room_size
            || '-' 
            || ccntemp_rec.real_estate_setting 
            || '  *****');
  

     WHEN others then
         dbms_output.put_line('Load_Marketing_Table - Invalid Market Load Store ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || ccntemp_rec.effective_date
            || ' '
            || sqlerrm);

   END;
a164 1
END LOOP;
d166 1
a166 13
   dbms_output.put_line('Load_Marketing_Table - Total Loaded Store Marketing Records '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Marketing_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_MARKETING_TABLE;


PROCEDURE LOAD_SALES_MANAGER_TABLE
d170 1
a170 1
	This procedure will load the TERRITORY_SALES_MANAGER table from data  
d173 2
a174 80
created : 11/17/2011 mdh CCN Project....
****************************************************************/
is   

   cursor CCNSMGR_CUR is
      select TERRITORY_SLS_MGR_CODE,             
             GEMS_EMPLOYEE_ID,
	           TERRITORY_SLS_MGR_DAD,
       	     EFFECTIVE_DATE,	
	           EXPIRATION_DATE,
	           SALES_MANAGER_LAST_NAME,
             SALES_MANAGER_FIRST_NAME,
             SALES_MANAGER_MIDDLE_NAME,
	            TERRITORY_SLS_MGR_TYPE FROM TEMP_TERRITORY_SALES_MANAGER;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccnsmgr_row TERRITORY_SALES_MGR%rowtype;

Begin

   for ccnsmgr_rec in ccnsmgr_cur loop

   Begin

      v_ccnsmgr_row.territory_sls_mgr_code := ccnsmgr_rec.territory_sls_mgr_code;
      v_ccnsmgr_row.gems_employee_id   := ccnsmgr_rec.gems_employee_id;
      v_ccnsmgr_row.territory_sls_mgr_dad := ccnsmgr_rec.territory_sls_mgr_dad;
      
      if ccnsmgr_rec.effective_date <> '00000000' then
         v_ccnsmgr_row.effective_date := to_date(ccnsmgr_rec.effective_date, 'yyyymmdd');
      end if;
      
      if ccnsmgr_rec.expiration_date <> '00000000' then
         v_ccnsmgr_row.expiration_date := to_date(ccnsmgr_rec.expiration_date, 'yyyymmdd');
      end if;
      
     
      v_ccnsmgr_row.first_name                   := ccnsmgr_rec.sales_manager_first_name;
      v_ccnsmgr_row.last_name                    := ccnsmgr_rec.sales_manager_last_name;
      v_ccnsmgr_row.middle_initial               := substr(ccnsmgr_rec.sales_manager_middle_name,1,1);
      v_ccnsmgr_row.territory_sls_mgr_type       := ccnsmgr_rec.territory_sls_mgr_type;
      

      insert into TERRITORY_SALES_MGR values v_ccnsmgr_row;

      v_ccnsmgr_row := null;

      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Sales_MGR_Table - Invalid Load SALES MANAGER ' 
            || ccnsmgr_rec.TERRITORY_SLS_MGR_CODE 
            || '-' 
            || ccnsmgr_rec.SALES_MANAGER_LAST_NAME
            || ccnsmgr_rec.SALES_MANAGER_FIRST_NAME
            || ccnsmgr_rec.SALES_MANAGER_MIDDLE_NAME
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Sales_MGR_Table - Total Loaded SALES MANAGERS '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Sales_Mgr_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
a175 1
end LOAD_SALES_MANAGER_TABLE;
d177 1
a177 2

PROCEDURE LOAD_TERRITORY_TABLE
d181 1
a181 1
	This procedure will load the TERRITORY Table from a data  
d184 2
a185 46
created : 11/21/2011 mdh CCN Project....
****************************************************************/
is 

   cursor CCNTERR_CUR is
     select  COST_CENTER_CODE,	         
	           CATEGORY_CD, 
             TERRITORY_SLS_MGR_CODE,
	           LEASE_CAR_INDICATOR,		     
	           TERRITORY_TYPE_BUSN_CODE,
             HOME_STORE FROM TEMP_TERRITORY;

   v_count integer := 0;
   v_commit integer := 0;
   v_ccnterr_row TERRITORY%rowtype;

Begin

   for ccnterr_rec in CCNTERR_CUR loop

   Begin

      v_ccnterr_row.cost_center_code := ccnterr_rec.cost_center_code;
      v_ccnterr_row.home_store := ccnterr_rec.home_store;
      v_ccnterr_row.territory_sls_mgr_code := ccnterr_rec.territory_sls_mgr_code;
      v_ccnterr_row.category := ccnterr_rec.category_cd;
      v_ccnterr_row.lease_car_indicator := ccnterr_rec.lease_car_indicator;
      v_ccnterr_row.territory_type_busn_code := ccnterr_rec.territory_type_busn_code;
      
      
--      if ccnterr_rec.last_year_final_sales <> '00000000000' then	
--        	v_ccnterr_row.last_year_final_sales := ccnterr_rec.last_year_final_sales;
--      end if;

      insert into TERRITORY values v_ccnterr_row;

      v_ccnterr_row := null;

      v_count := v_count + 1;

      v_commit := v_commit + 1;

      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   
a186 1
   EXCEPTION
d188 1
a188 23
      WHEN others then
         dbms_output.put_line('Load_Territory_Table - Invalid Load Territory  ' 
            || ccnterr_rec.cost_center_code  
	    || ' '	            
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Territory_Table - Total LOADED TERRITORIES '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Territory_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_TERRITORY_TABLE;


PROCEDURE LOAD_SALES_REP_TABLE
d192 1
a192 1
	This procedure will load the SALES_REP Table from a data
d195 2
a196 35
created : 11/21/2011 mdh CCN Project....
****************************************************************/
is 

   cursor CCNSREP_CUR is
      select GEMS_EMPLOYEE_ID,             
             SOCIAL_SECURITY_NUMBER,
      	     EFFECTIVE_DATE,	
	           EXPIRATION_DATE,
      	     FIRST_NAME,
	           MIDDLE_INITIAL,
	           LAST_NAME,
	           EMPLOYEE_STATUS_CODE
	          FROM TEMP_SALES_REP;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccnsrep_row SALES_REP%rowtype;

Begin

   for ccnsrep_rec in CCNSREP_CUR loop

   Begin

/*
getting and setting the gems employee id
*/
     Begin
	select emp.employee_number 
	into v_ccnsrep_row.gems_employee_id
          from emp_data emp 
	    where emp.national_identifier = ccnsrep_rec.social_security_number;
  
     exception
a197 23
       when no_data_found then
          v_ccnsrep_row.gems_employee_id  := null ;
--        v_ccnsrep_row.gems_employee_id  := '1111111';

     End;

--      	v_ccnsrep_row.gems_employee_id   := ccnsrep_rec.gems_employee_id;

	v_ccnsrep_row.social_security_number := ccnsrep_rec.social_security_number;
      
        if ccnsrep_rec.effective_date <> '00000000' then
            v_ccnsrep_row.effective_date := to_date(ccnsrep_rec.effective_date, 'yyyymmdd');
        end if;
      
        if ccnsrep_rec.expiration_date <> '00000000' then
            v_ccnsrep_row.expiration_date := to_date(ccnsrep_rec.expiration_date, 'yyyymmdd');
        end if;
    
       	v_ccnsrep_row.first_name              := ccnsrep_rec.first_name;
	v_ccnsrep_row.middle_initial          := ccnsrep_rec.middle_initial;
       	v_ccnsrep_row.last_name               := ccnsrep_rec.last_name;	
       	v_ccnsrep_row.employee_code           := ccnsrep_rec.employee_status_code;
	
d199 1
a199 39

      insert into SALES_REP values v_ccnsrep_row;
	v_ccnsrep_row := null;

      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Sales_Rep_Table - Invalid Load SALES REP ' 
            || ccnsrep_rec.social_security_number
            || '-' 
            || ccnsrep_rec.gems_employee_id
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Sales_Rep_Table - Total Loaded SALES REP '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Sales_Rep_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_SALES_REP_TABLE;


PROCEDURE LOAD_TERRITORY_ASSIGN_TABLE
d201 1
a201 1
	LOAD_TERRITORY_ASSIGN_TABLE
d203 1
a203 1
	This procedure will load the TERRITORY_ASSIGNMENT Table from a data  
d206 2
a207 79
created : 11/21/2011 mdh CCN Project....
****************************************************************/
is 

   cursor CCNASGN_CUR is
      select TERRITORY_SLS_MGR_CODE,
             COST_CENTER_CODE,
      	     CATEGORY_CD,      
             SOCIAL_SECURITY_NBR,       
             GEMS_EMPLOYEE_ID,
	           EFFECTIVE_DATE,	
	           EXPIRATION_DATE FROM TEMP_TERRITORY_ASSIGNMENT;

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccnasgn_row TERRITORY_ASSIGNMENT%rowtype;

Begin

   for ccnasgn_rec in CCNASGN_CUR loop

   Begin

/*
getting and setting the gems employee id from emp_data table
*/
     
      select slsrep.gems_employee_id
          into v_ccnasgn_row.gems_employee_id
             from SALES_REP slsrep
                where slsrep.social_security_number = ccnasgn_rec.social_security_nbr;
  
  
      v_ccnasgn_row.territory_sls_mgr_code       := ccnasgn_rec.territory_sls_mgr_code;
      v_ccnasgn_row.cost_center_code             := ccnasgn_rec.cost_center_code;
      v_ccnasgn_row.category		         := ccnasgn_rec.category_cd;
  --  v_ccnasgn_row.gems_employee_id             := ccnasgn_rec.gems_employee_id;
  --  v_ccnasgn_row.social_security_number       := ccnasgn_rec.social_security_nbr;
      
      if ccnasgn_rec.effective_date <> '00000000' then
         v_ccnasgn_row.effective_date := to_date(ccnasgn_rec.effective_date, 'yyyymmdd');
      end if;
      
      if ccnasgn_rec.expiration_date <> '00000000' then
         v_ccnasgn_row.expiration_date := to_date(ccnasgn_rec.expiration_date, 'yyyymmdd');
      end if;
      
      
      insert into TERRITORY_ASSIGNMENT values v_ccnasgn_row;

	v_ccnasgn_row := null;
	 
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

       WHEN no_data_found then
               dbms_output.put_line('*** Invalid Load Territory Assignment ' 
                || ccnasgn_rec.cost_center_code 
                || '-' 
                || ccnasgn_rec.social_security_nbr
                || '  no Sales Rep. found  ***') ;
  

      WHEN others then
         dbms_output.put_line('Load_Territory_ASGN_Table - Invalid Load Territory Assignment ' 
            || ccnasgn_rec.cost_center_code 
            || '-' 
            || ccnasgn_rec.social_security_nbr
            || ' '
            || sqlerrm);

   END;
a208 1
END LOOP;
d210 1
a210 13
   dbms_output.put_line('Load_Territory_ASGN_Table - Total Loaded Assignments '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Territory_ASGN_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

end LOAD_TERRITORY_ASSIGN_TABLE;


PROCEDURE UPDT_TERRITORY_TABLE
d214 4
a217 118
	This procedure will update the TERRITORY Table from a data  
	file from legacy IDMS database.  This procedure will update
  all territories added by Beniat in Territory to make sure they
  aslign to the CCN Database.

created : 11/21/2011 mdh CCN Project....
****************************************************************/
is 

   cursor ccntemp_cur is
      select TTC.COST_CENTER_CODE,
             TTC.CATEGORY_CODE,
             TER.COST_CENTER_CODE TCCNTR,
      	     LAST_MAINT_DATE,
	           OPEN_TIME,
	           CLOSE_TIME,
	           SUNDAY_OPEN_IND,
      	     PERP_INV_START_DATE,
	           ACT_FT_EMP_CNT,
	           BGT_FT_EMP_CNT,
	           ACT_PT_EMP_CNT,
	           BGT_PT_EMP_CNT,
	           CLASS_CODE,	
	           GNRC_GROUP_IND,		
             CONTROL_CLERK_CODE,
	           PERP_INV_IND,
	           SCHEDULE_CODE,
      	     RURAL_METRO_ZONE_CODE,
	           UPS_ZONE_CODE,
	           RPS_ZONE,
	           INTERNAL_MAIL_NBR,
	           REMERCHANDISE_CODE,
	           PLANOGRAM_TYPE_CODE,
	           SHELF_LABEL_CODE,
	           SHELF_LABEL_COUNT,
	           DUNS_NBR,
	           PRIMARY_LOGO_IND,
	           SECONDARY_LOGO_IND,
	           PART_TIME_SCHEDULE,
             PROGRAM_TYPE_CODE,
             PROGRAM_VERSION_NBR, 
             LEASE_OWN_CODE,
             ttc.HOME_STORE  
         FROM TEMP_TERRITORY_CCNTR ttc LEFT OUTER JOIN TERRITORY ter
           ON (TTC.cost_center_code  =  TER.cost_center_code);

   v_count       integer := 0;
   v_count_chg   integer := 0;
   v_commit      integer := 0;
   v_terr_count  integer := 0;
   v_ccntemp_row TERRITORY%rowtype;

BEGIN

   for ccntemp_rec in ccntemp_cur loop

   BEGIN

      IF CCNTEMP_REC.TCCNTR  is NOT NULL then
      --  v_ccntemp_row.category                  := ccntemp_rec.category_code;
      --  v_ccntemp_row.home_store                := ccntemp_rec.home_store;
      --  v_ccntemp_row.gnrc_country              := ccntemp_rec.gnrc_group_ind;

          update TERRITORY 
            set category   = ccntemp_rec.category_code,
                home_store = ccntemp_rec.home_store
            where cost_center_code = ccntemp_rec.TCCNTR;
          v_ccntemp_row   := null;
          v_count_chg    := v_count_chg  +  1;
      ELSE
          v_ccntemp_row.territory_sls_mgr_code    := '@@@@@@@@@@@@';
          v_ccntemp_row.cost_center_code          := ccntemp_rec.cost_center_code;
          v_ccntemp_row.category                  := ccntemp_rec.category_code;
          v_ccntemp_row.home_store                := ccntemp_rec.home_store;
       -- v_ccntemp_row.gnrc_country              := ccntemp_rec.gnrc_group_ind;
          v_ccntemp_row.lease_car_indicator       := 'n';
          v_ccntemp_row.territory_type_busn_code  := null;
   
          insert into TERRITORY values v_ccntemp_row;
          v_ccntemp_row   := null;
          v_count         := v_count  +  1;
          dbms_output.put_line('UPDT_Territory_Table - *** Territory CCNTR added: ' 
            || ccntemp_rec.cost_center_code 
            || '-'
            || ccntemp_rec.category_code
            || ' ***');
      END IF;


      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('UPDT_Territory_Table - Invalid Load Territory CCNTR ' 
            || ccntemp_rec.cost_center_code 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('UPDT_Territory_Table - Total Loaded Territory CCNTRS '
      || 'Adds: ' 
      || v_count
      || 'Changes: '
      || v_count_chg);

EXCEPTION

   when others then
      dbms_output.put_line('UPDT_Territory_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
d219 2
a220 1
end UPDT_TERRITORY_TABLE;
d223 1
a223 1
PROCEDURE LOAD_POLLING_TABLE
d227 2
a228 2
	This procedure will update the POLLING Table from a data  
	file from legacy IDMS database.  
d230 2
a231 73
created : 10/15/2011 mdh CCN Project....
****************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE         ,
		POLLING_STATUS_CODE      ,
		MULTICAST_IND            ,
		TIME_ZONES               ,
		LAST_UPLOAD_STATUS       ,
		LAST_UPLOAD_DATE         ,
		LAST_DOWNLOAD_STATUS     ,
		LAST_DOWNLOAD_DATE       ,
		SPECIAL_RUN_INDICATOR    ,
		OVER_VOLUME_INDICATOR    ,
		POLLING_INDICATOR        ,
		POLLING_PRIORITY         ,
		POLLING_SCHEDULE         ,
		POLLING_STATUS_MAINT_DATE,
		NEXT_DOWNLOAD_BLOCK_COUNT  
             	             	
		FROM "COSTCNTR"."TEMP_POLLING";

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccninfo_row polling%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code      := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code   := ccninfo_rec.polling_status_code;   

	 v_ccninfo_row.polling_status_code   := nvl(ccninfo_rec.polling_status_code, 'I');

	 v_ccninfo_row.multicast_ind         := ccninfo_rec.multicast_ind; 
	 v_ccninfo_row.time_zone             := ccninfo_rec.time_zones;          
	 V_CCNINFO_ROW.POLLING_IND           := CCNINFO_REC.POLLING_INDICATOR;     
	-- V_CCNINFO_ROW.POLLING_PRIORITY      := CCNINFO_REC.POLLING_PRIORITY;     
	-- V_CCNINFO_ROW.POLLING_SCHEDULE_CODE := CCNINFO_REC.POLLING_SCHEDULE; 

	 V_CCNINFO_ROW.NEXT_DOWNLOAD_BLOCK_COUNT := CCNINFO_REC.NEXT_DOWNLOAD_BLOCK_COUNT;   

      insert into POLLING values v_ccninfo_row;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Polling_Table - Load Failed - Cost-Center/Status = ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || '-'
            || ccninfo_rec.POLLING_STATUS_CODE 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Polling_Table - Total Polling Rows Loaded '
      || v_count);

EXCEPTION
a232 3
   when others then
      dbms_output.put_line('Load_Polling_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);
d234 1
a234 4
end LOAD_POLLING_TABLE;


PROCEDURE LOAD_BANK_CARD_TABLE
d238 2
a239 2
	This procedure will update the BANK_CARD Table from a data  
	file from legacy IDMS database.  
d241 2
a242 69
created : 10/15/2011 tal CCN Project....
****************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE, 
		POLLING_STATUS_CODE,	
		MERCHANT_ID, 
		EFFECTIVE_DATE, 
		EXPIRATION_DATE, 
		LAST_CHANGE_DATE, 
		LAST_MAINTENANCE_AUTH_ID, 
		LAST_MAINTENANCE_USER_ID, 
    DISCOVER_ID,
		QUALITY_CODE, 
		NETACC_PHONE_1, 
		NETACC_PHONE_2, 
		AMEX_SE_ID 
             	             	
		FROM "COSTCNTR"."TEMP_BANK_CARD";

   v_input_cnt   integer := 0;
   v_bypass_cnt  integer := 0;
   v_loaded_cnt  integer := 0;

   v_commit integer := 0;
   v_ccninfo_row bank_card%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code     := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code  := ccninfo_rec.polling_status_code;    
	 v_ccninfo_row.merchant_id          := ccninfo_rec.MERCHANT_ID;   

         v_ccninfo_row.EFFECTIVE_DATE     := '' ;
      if ccninfo_rec.EFFECTIVE_DATE <> '00000000' then
         v_ccninfo_row.EFFECTIVE_DATE     := to_date(ccninfo_rec.EFFECTIVE_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.EXPIRATION_DATE     := '' ;
      if ccninfo_rec.EXPIRATION_DATE <> '00000000' then
         v_ccninfo_row.EXPIRATION_DATE     := to_date(ccninfo_rec.EXPIRATION_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.LAST_MAINT_DATE     := '' ;
      if ccninfo_rec.LAST_CHANGE_DATE <> '00000000' then
         v_ccninfo_row.LAST_MAINT_DATE     := to_date(ccninfo_rec.LAST_CHANGE_DATE, 'YYYYMMDD');
      end if;
	
	 V_CCNINFO_ROW.LAST_MAINT_METHOD_ID := CCNINFO_REC.LAST_MAINTENANCE_AUTH_ID;
	 v_ccninfo_row.LAST_MAINT_USER_ID   := ccninfo_rec.last_maintenance_user_id;
   V_CCNINFO_ROW.DISCOVER_ID          := CCNINFO_REC.DISCOVER_ID;
	 V_CCNINFO_ROW.QUALITY_CODE         := CCNINFO_REC.QUALITY_CODE;     
	 V_CCNINFO_ROW.AMEX_SE_ID           := CCNINFO_REC.AMEX_SE_ID;     

 	v_input_cnt  := v_input_cnt  + 1;

      if ccninfo_rec.EFFECTIVE_DATE   =  ccninfo_rec.EXPIRATION_DATE then
	v_bypass_cnt  := v_bypass_cnt  + 1;
      end if; 

      if ccninfo_rec.EFFECTIVE_DATE  !=  ccninfo_rec.EXPIRATION_DATE then
	insert into BANK_CARD values v_ccninfo_row;
	v_loaded_cnt  := v_loaded_cnt  + 1;
      end if;
a243 5
      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   
d245 1
a245 33
   EXCEPTION

      WHEN others then
         dbms_output.put_line('Load_Bank_Card_Table - Load Error ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || '-'
            || ccninfo_rec.MERCHANT_ID 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Load_Bank_Card_Table - Bank_Card Temp Rows Read '
      || v_input_cnt);

   dbms_output.put_line('Load_Bank_Card_Table - Bank_Card Rows Bypassed   '
      || v_bypass_cnt);

   dbms_output.put_line('Load_Bank_Card_Table - Bank_Card Rows Loaded     '
      || v_loaded_cnt);

EXCEPTION

   when others then
      dbms_output.put_line('Load_Bank_Card_Table - Table Not Loaded Stopped on Record - ' 
      || v_input_cnt);

end LOAD_BANK_CARD_TABLE;


PROCEDURE LOAD_TERMINAL_TABLE
d249 2
a250 2
	This procedure will update the TERMINAL Table from a data  
	file from legacy IDMS database.  
d252 2
a253 62
created : 10/15/2011 tal CCN Project....
****************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE	,
		POLLING_STATUS_CODE	,
		TERMINAL_NUMBER        ,
		EFFECTIVE_DATE         ,
		EXPIRATION_DATE        ,
		POS_LAST_TRAN_DATE     ,
		POS_LAST_TRAN_NUMBER  
             	             	
		FROM "COSTCNTR"."TEMP_TERMINAL";

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccninfo_row TERMINAL%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code        := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code     := ccninfo_rec.polling_status_code;   

	 v_ccninfo_row.polling_status_code     := nvl(ccninfo_rec.polling_status_code, 'I');


	 v_ccninfo_row.TERMINAL_NUMBER         := ccninfo_rec.TERMINAL_NUMBER;    

         v_ccninfo_row.EFFECTIVE_DATE          := '' ;
      if ccninfo_rec.EFFECTIVE_DATE <> '00000000' then
         v_ccninfo_row.EFFECTIVE_DATE          := to_date(ccninfo_rec.EFFECTIVE_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.EXPIRATION_DATE         := '' ;
      if ccninfo_rec.EXPIRATION_DATE <> '00000000' then
         v_ccninfo_row.EXPIRATION_DATE         := to_date(ccninfo_rec.EXPIRATION_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.POS_LAST_TRAN_DATE     := '' ;
      if ccninfo_rec.POS_LAST_TRAN_DATE <> '00000000' then
         v_ccninfo_row.POS_LAST_TRAN_DATE     := to_date(ccninfo_rec.POS_LAST_TRAN_DATE, 'YYYYMMDD');
      end if;
   
	 v_ccninfo_row.POS_LAST_TRAN_NUMBER   := ccninfo_rec.POS_LAST_TRAN_NUMBER;   
 
--      if ccninfo_rec.EFFECTIVE_DATE  !=  ccninfo_rec.EXPIRATION_DATE then
      	insert into TERMINAL values v_ccninfo_row;
      	v_count  := v_count  + 1;
--      end if;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION
a254 9
      WHEN others then
         dbms_output.put_line('Load_Terminal_Table - Load Failed - CCTR/Sta/Term = ' 
            || v_ccninfo_row.COST_CENTER_CODE 
            || '-'
            || v_ccninfo_row.POLLING_STATUS_CODE 
            || '-'
            || v_ccninfo_row.TERMINAL_NUMBER 
            || ' '
            || sqlerrm);
d256 1
a256 22
   END;

END LOOP;

   dbms_output.put_line('Load_Termina_Table - Terminal Rows Loaded '
      || v_count);
   dbms_output.put_line('Too Many Timinals, Taminals, Tominals... ');
   dbms_output.put_line('Ah Phooey - Have Another Drink ');

EXCEPTION

   when others then
      dbms_output.put_line('Load_Termina_Table - Table Not Loaded Stopped on Record - ' 
      || v_count);

   dbms_output.put_line('Too Many Timinals, Taminals, Tominals... ');
   dbms_output.put_line('Ah Phooey - Have Another Drink ');

end LOAD_TERMINAL_TABLE;


PROCEDURE LOAD_POLLING_DWLD_RSN_TABLE
d260 2
a261 2
	This procedure will update the POLLING_DWLD_RSN_HIST Table from a data  
	file from legacy IDMS database.  
d264 1
a264 13
****************************************************************/
is 

   cursor ccninfo_cur is
      select    COST_CENTER_CODE, 
		POLLING_STATUS_CODE,
		EFFECTIVE_DATE, 
		DOWNLOAD_DATE, 
		DOWNLOAD_REASON
             	             	
		from "COSTCNTR"."TEMP_POLLING_DWLD_RSN"
    
    order by cost_center_code, effective_date ;
a265 10
   v_input_cnt   integer := 0;
   v_bypass_cnt  integer := 0;
   v_loaded_cnt  integer := 0;
   v_errors_cnt  integer := 0;
   
   v_save_cost_center      varchar2(06) := '      ';
   v_save_effective_date   varchar2(08) := '        ';
--	 v_save_download_date    varchar2(08) := '        ';
--	 v_save_download_reason  varchar2(04) := '    ';
   
d267 1
a267 107
   v_commit integer := 0;
   v_ccninfo_row POLLING_DWLD_RSN_HIST%rowtype;

BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	 v_ccninfo_row.cost_center_code     := ccninfo_rec.cost_center_code; 
	 v_ccninfo_row.polling_status_code  := ccninfo_rec.polling_status_code;    

         v_ccninfo_row.EFFECTIVE_DATE     := '' ;
      if ccninfo_rec.EFFECTIVE_DATE <> '00000000' then
         v_ccninfo_row.EFFECTIVE_DATE     := to_date(ccninfo_rec.EFFECTIVE_DATE, 'YYYYMMDD');
      end if;

         v_ccninfo_row.DOWNLOAD_DATE     := '' ;
      if ccninfo_rec.DOWNLOAD_DATE <> '00000000' then
         v_ccninfo_row.DOWNLOAD_DATE     := to_date(ccninfo_rec.DOWNLOAD_DATE, 'YYYYMMDD');
      end if;
	
	 V_CCNINFO_ROW.POS_DOWNLOAD_REASON                    := CCNINFO_REC.DOWNLOAD_REASON;     

 	v_input_cnt  := v_input_cnt  + 1;

--      if v_save_cost_center      =   v_ccninfo_row.cost_center_code then
--        	v_bypass_cnt  := v_bypass_cnt  + 1;
--     end if; 

    if   v_save_cost_center      <>  ccninfo_rec.cost_center_code    
    or
       ( v_save_cost_center      =   ccninfo_rec.cost_center_code
    and  v_save_effective_date   <>  ccninfo_rec.effective_date )     
    
	--  or  v_save_download_date    <>  ccninfo_row.download_date       
	--  or  v_save_download_reason  <>  ccninfo_row.pos_download_reason 
    then
    
    	insert into polling_dwld_rsn_hist values v_ccninfo_row;
 	    v_loaded_cnt  := v_loaded_cnt  + 1;
      
    else
    
      v_bypass_cnt  := v_bypass_cnt  + 1;
      
    end if;
   
   v_save_cost_center      :=  ccninfo_rec.cost_center_code    ;
   v_save_effective_date   :=  ccninfo_rec.effective_date      ;
--	 v_save_download_date    :=  ccninfo_rec.download_date       ;
--	 v_save_download_reason  :=  ccninfo_rec.pos_download_reason ;
      
      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
 --        dbms_output.put_line('500 More Records' ) ;
      end if;   

   EXCEPTION



      when others then
      
      v_errors_cnt  := v_errors_cnt  + 1;
      
         dbms_output.put_line('Load Error ' 
            || 'CCTR=' || ccninfo_rec.COST_CENTER_CODE 
            || ' '
            || 'STA='  || ccninfo_rec.polling_status_code 
            || ' '
            || 'EFF='  || ccninfo_rec.effective_date 
            || ' '
            || 'DNL='  || ccninfo_rec.download_date
            || ' '
            || 'RSN='  || ccninfo_rec.download_reason 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Temp Rows Read  '
      || v_input_cnt);

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Rows Loaded     '
      || v_loaded_cnt);

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Rows Bypassed   '
      || v_bypass_cnt);

   dbms_output.put_line('POLLING_DWLD_RSN_HIST Rows Errored    '
      || v_errors_cnt);

EXCEPTION

   when others then
      dbms_output.put_line('Table Not Loaded Stopped on Record - ' 
      || v_input_cnt);

END LOAD_POLLING_DWLD_RSN_TABLE;


PROCEDURE LOAD_TAXWARE_TABLE
d271 2
a272 2
	This procedure will update the TAXWARE Table from a data  
	file from legacy IDMS database.  
d275 1
a275 69
****************************************************************/
is 

   cursor ccninfo_cur is
      select  cost_center_code     ,
              twj_state            ,
              twj_zip              ,
              twj_geo              ,
              twj_maintenance_date ,
              twj_country          ,
              twj_company 
             	              	
		FROM "COSTCNTR"."TEMP_TAXWARE";

   v_count  integer := 0;
   v_commit integer := 0;
   v_ccninfo_row taxware%rowtype;
 
BEGIN

   for ccninfo_rec in ccninfo_cur loop

   BEGIN
  
	  v_ccninfo_row.cost_center_code    := ccninfo_rec.cost_center_code; 
	  v_ccninfo_row.twj_state           := ccninfo_rec.twj_state;  
	  v_ccninfo_row.twj_zip             := ccninfo_rec.twj_zip ;   
	  v_ccninfo_row.twj_geo             := ccninfo_rec.twj_geo; 

    v_ccninfo_row.twj_maintenance_date          := '' ;
      if ccninfo_rec.twj_maintenance_date <> '00000000' then
         v_ccninfo_row.twj_maintenance_date          := to_date(ccninfo_rec.twj_maintenance_date, 'YYYYMMDD');
      end if;
      
	 v_ccninfo_row.twj_country         := ccninfo_rec.twj_country;      
   v_ccninfo_row.twj_company         := ccninfo_rec.twj_company; 
 
      insert into TAXWARE values v_ccninfo_row;
      v_count  := v_count  + 1;

      v_commit := v_commit + 1;
      if v_commit > 500 then
         commit;
         v_commit := 0;
      end if;   

   EXCEPTION

      when others then
         dbms_output.put_line(
               'Load Failed - Cost_Center_Code = ' 
            || ccninfo_rec.COST_CENTER_CODE 
            || ' '
            || sqlerrm);

   END;

END LOOP;

   dbms_output.put_line('Total TAXWARE Rows Loaded '
      || v_count);

EXCEPTION

   when others then
      dbms_output.put_line('Table Not Loaded Stopped on Record - ' 
      || v_count);

END LOAD_TAXWARE_TABLE;
d286 1
a286 71

    inADDRESS_CAN_rowtype  IN  ADDRESS_CAN%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_ADDRESS_CAN_row ADDRESS_CAN%ROWTYPE := inADDRESS_CAN_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_CAN",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_ADDRESS_CAN_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_CAN_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_ADDRESS_CAN_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_ADDRESS_CAN_row.EXPIRATION_DATE    EXPIRATION_DATE
				,v_ADDRESS_CAN_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_ADDRESS_CAN_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_ADDRESS_CAN_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_ADDRESS_CAN_row.CITY               CITY
				,v_ADDRESS_CAN_row.PROVINCE_CODE      PROVINCE_CODE
        ,v_ADDRESS_CAN_row.POSTAL_CODE        POSTAL_CODE
				,v_ADDRESS_CAN_row.VALID_ADDRESS      VALID_ADDRESS
				,v_ADDRESS_CAN_row.COUNTRY_CODE       COUNTRY_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_ADDRESS_CAN_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_CAN_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_ADDRESS_CAN_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_ADDRESS_CAN_row.COST_CENTER_CODE || 
        '|' || v_ADDRESS_CAN_row.ADDRESS_TYPE     || 
        '|' || v_ADDRESS_CAN_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_CAN'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  ADDRESS_CAN_INITLOAD_SP;
d297 1
a297 71

    inADDRESS_MEX_rowtype  IN  ADDRESS_MEX%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_ADDRESS_MEX_row ADDRESS_MEX%ROWTYPE := inADDRESS_MEX_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_MEX",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_ADDRESS_MEX_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_MEX_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_ADDRESS_MEX_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_ADDRESS_MEX_row.EXPIRATION_DATE    EXPIRATION_DATE
				,v_ADDRESS_MEX_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_ADDRESS_MEX_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_ADDRESS_MEX_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_ADDRESS_MEX_row.CITY               CITY
				,v_ADDRESS_MEX_row.PROVINCE_CODE      PROVINCE_CODE
        ,v_ADDRESS_MEX_row.POSTAL_CODE        POSTAL_CODE
				,v_ADDRESS_MEX_row.VALID_ADDRESS      VALID_ADDRESS
				,v_ADDRESS_MEX_row.COUNTRY_CODE       COUNTRY_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_ADDRESS_MEX_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_ADDRESS_MEX_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_ADDRESS_MEX_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_ADDRESS_MEX_row.COST_CENTER_CODE || 
        '|' || v_ADDRESS_MEX_row.ADDRESS_TYPE     || 
        '|' || v_ADDRESS_MEX_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_MEX'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  ADDRESS_MEX_INITLOAD_SP;
d308 1
a308 71

    inADDRESS_OTHER_rowtype  IN  ADDRESS_OTHER%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_address_OTHER_row ADDRESS_OTHER%ROWTYPE := inADDRESS_OTHER_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_OTHER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_address_OTHER_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_OTHER_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_address_OTHER_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_address_OTHER_row.EXPIRATION_DATE    EXPIRATION_DATE
				,v_address_OTHER_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_address_OTHER_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_address_OTHER_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_address_OTHER_row.CITY               CITY
				,v_address_OTHER_row.PROVINCE_CODE      PROVINCE_CODE
				,v_address_OTHER_row.POSTAL_CODE        POSTAL_CODE
				,v_address_OTHER_row.VALID_ADDRESS      VALID_ADDRESS
        ,v_address_OTHER_row.COUNTRY_CODE       COUNTRY_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_address_OTHER_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_OTHER_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_address_OTHER_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_address_OTHER_row.COST_CENTER_CODE || 
        '|' || v_address_OTHER_row.ADDRESS_TYPE     || 
        '|' || v_address_OTHER_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_OTHER'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  ADDRESS_OTHER_INITLOAD_SP;
d319 1
a319 75

    inADDRESS_USA_rowtype  IN  ADDRESS_USA%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_address_USA_row ADDRESS_USA%ROWTYPE := inADDRESS_USA_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADDRESS_USA",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_address_usa_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_usa_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_address_usa_row.EFFECTIVE_DATE     EFFECTIVE_DATE
				,v_address_usa_row.EXPIRATION_DATE    EXPIRATION_DATE
				,v_address_usa_row.ADDRESS_LINE_1     ADDRESS_LINE_1
				,v_address_usa_row.ADDRESS_LINE_2     ADDRESS_LINE_2	
				,v_address_usa_row.ADDRESS_LINE_3     ADDRESS_LINE_3
				,v_address_usa_row.CITY               CITY
				,v_address_usa_row.STATE_CODE         STATE_CODE
        ,v_address_usa_row.ZIP_CODE           ZIP_CODE
				,v_address_usa_row.ZIP_CODE_4         ZIP_CODE_4
        ,v_address_usa_row.COUNTY             COUNTY
        ,v_address_usa_row.FIPS_CODE          FIPS_CODE
        ,v_address_usa_row.DESTINATION_POINT  DESTINATION_POINT
        ,v_address_usa_row.CHECK_DIGIT        CHECK_DEIGIT
				,v_address_usa_row.VALID_ADDRESS      VALID_ADDRESS
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_address_usa_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_address_usa_row.ADDRESS_TYPE       ADDRESS_TYPE
				,v_address_usa_row.EFFECTIVE_DATE     EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_address_usa_row.COST_CENTER_CODE || 
        '|' || v_address_usa_row.ADDRESS_TYPE     || 
        '|' || v_address_usa_row.EFFECTIVE_DATE   || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADDRESS_USA'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  ADDRESS_USA_INITLOAD_SP;
d326 1
a326 1
	This procedure is intended to build an AUDIT_LOG entry for ADMINISTRATION Records
d330 1
a330 59

    inADMINISTRATION_rowtype  IN  ADMINISTRATION%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_ADMINISTRATION_row ADMINISTRATION%ROWTYPE := inADMINISTRATION_rowtype; 
    
begin

	SELECT XMLELEMENT ( "ADMINISTRATION",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_ADMINISTRATION_row.COST_CENTER_CODE      COST_CENTER_CODE
				,v_ADMINISTRATION_row.CATEGORY              CATEGORY
				,v_ADMINISTRATION_row.INTERNAL_MAIL_NUMBER  INTERNAL_MAIL_NUMBER
				,v_ADMINISTRATION_row.ADMIN_COST_CNTR_TYPE  ADMIN_COST_CNTR_TYPE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_ADMINISTRATION_row.COST_CENTER_CODE   COST_CENTER_CODE
			)) AS "primaryKey"
			,('|' || v_ADMINISTRATION_row.COST_CENTER_CODE || '|') transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'ADMINISTRATION'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  ADMINISTRATION_INITLOAD_SP;
d339 1
a339 1
created : 04/22/2013 TAL CCN Project....
d341 1
a341 73

    inBANK_CARD_rowtype  IN  BANK_CARD%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_BANK_CARD_row BANK_CARD%ROWTYPE := inBANK_CARD_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "BANK_CARD",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
       		XMLForest(
				 v_BANK_CARD_row.COST_CENTER_CODE      COST_CENTER_CODE
				,v_BANK_CARD_row.POLLING_STATUS_CODE   POLLING_STATUS_CODE
				,v_BANK_CARD_row.MERCHANT_ID           MERCHANT_ID
				,v_BANK_CARD_row.EFFECTIVE_DATE        EFFECTIVE_DATE
				,v_BANK_CARD_row.EXPIRATION_DATE       EXPIRATION_DATE
				,v_BANK_CARD_row.LAST_MAINT_DATE       LAST_MAINT_DATE
				,v_BANK_CARD_row.LAST_MAINT_METHOD_ID  LAST_MAINT_METHOD_ID
				,v_BANK_CARD_row.LAST_MAINT_USER_ID    LAST_MAINT_USER_ID
				,v_BANK_CARD_row.QUALITY_CODE          QUALITY_CODE
				,v_BANK_CARD_row.AMEX_SE_ID            AMEX_SE_ID
				,v_BANK_CARD_row.DISCOVER_ID           DISCOVER_ID
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
	       XMLForest(
				 v_BANK_CARD_row.COST_CENTER_CODE   COST_CENTER_CODE
				,v_BANK_CARD_row.POLLING_STATUS_CODE   POLLING_STATUS_CODE
				,v_BANK_CARD_row.MERCHANT_ID   MERCHANT_ID
				,v_BANK_CARD_row.EFFECTIVE_DATE   EFFECTIVE_DATE
			)) AS "primaryKey"
			,('|' || v_BANK_CARD_row.COST_CENTER_CODE     || 
        '|' || v_BANK_CARD_row.POLLING_STATUS_CODE  ||
        '|' || v_BANK_CARD_row.MERCHANT_ID          || 
        '|' || v_BANK_CARD_row.EFFECTIVE_DATE       ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'BANK_CARD'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  BANK_CARD_INITLOAD_SP;
d350 1
a350 1
created : 04/22/2013 TAL CCN Project....
d352 1
a352 87

    inCOST_CENTER_rowtype  IN  COST_CENTER%ROWTYPE )
    
    is

    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_COST_CENTER_row COST_CENTER%ROWTYPE := inCOST_CENTER_rowtype; 
    
begin 

	SELECT XMLELEMENT ( "COST_CENTER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_COST_CENTER_row.COST_CENTER_CODE       COST_CENTER_CODE
				,v_COST_CENTER_row.COST_CENTER_NAME       COST_CENTER_NAME
				,v_COST_CENTER_row.CATEGORY               CATEGORY
				,v_COST_CENTER_row.ENTITY_TYPE            ENTITY_TYPE
				,v_COST_CENTER_row.STATEMENT_TYPE         STATEMENT_TYPE
				,v_COST_CENTER_row.COUNTRY_CODE           COUNTRY_CODE
				,v_COST_CENTER_row.TRANSPORT_TYPE         TRANSPORT_TYPE
				,v_COST_CENTER_row.BEGIN_DATE             BEGIN_DATE
				,v_COST_CENTER_row.OPEN_DATE              OPEN_DATE
				,v_COST_CENTER_row.MOVE_DATE              MOVE_DATE
				,v_COST_CENTER_row.CLOSE_DATE             CLOSE_DATE
				,v_COST_CENTER_row.FINANCIAL_CLOSE_DATE   FINANCIAL_CLOSE_DATE
				,v_COST_CENTER_row.POS_PROG_VER_EFF_DATE  POS_PROG_VER_EFF_DATE
				,v_COST_CENTER_row.UPS_ZONE_CODE          UPS_ZONE_CODE
				,v_COST_CENTER_row.RPS_ZONE_CODE          RPS_ZONE_CODE
				,v_COST_CENTER_row.CURRENCY_CODE          CURRENCY_CODE
				,v_COST_CENTER_row.POS_PROG_VER_NBR       POS_PROG_VER_NBR
				,v_COST_CENTER_row.LEASE_OWN_CODE         LEASE_OWN_CODE
				,v_COST_CENTER_row.MISSION_TYPE_CODE      MISSION_TYPE_CODE
				,v_COST_CENTER_row.DUNS_NUMBER            DUNS_NUMBER
				,v_COST_CENTER_row.PRI_LOGO_GROUP_IND     PRI_LOGO_GROUP_IND
				,v_COST_CENTER_row.SCD_LOGO_GROUP_IND     SCD_LOGO_GROUP_IND
				,v_COST_CENTER_row.BANKING_TYPE           BANKING_TYPE
				,v_COST_CENTER_row.DEPOSIT_BAG_REORDER    DEPOSIT_BAG_REORDER
				,v_COST_CENTER_row.DEPOSIT_TICKET_REORDER DEPOSIT_TICKET_REORDER
				,v_COST_CENTER_row.POP_KIT_CODE           POP_KIT_CODE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_COST_CENTER_row.COST_CENTER_CODE   COST_CENTER_CODE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
			,('|' || v_COST_CENTER_row.COST_CENTER_CODE     ||
                          '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'COST_CENTER'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  COST_CENTER_INITLOAD_SP;
d361 1
a361 1
created : 04/22/2013 TAL CCN Project....
d363 1
a364 3
    inEMP_DATA_rowtype  IN  EMP_DATA%ROWTYPE )
    
    is
d366 5
a370 6
    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_EMP_DATA_row EMP_DATA%ROWTYPE := inEMP_DATA_rowtype; 
    
begin 
d372 3
a374 72
	SELECT XMLELEMENT ( "EMP_DATA",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_EMP_DATA_row.NATIONAL_IDENTIFIER     NATIONAL_IDENTIFIER
				,v_EMP_DATA_row.RECORD_TYPE             RECORD_TYPE
				,v_EMP_DATA_row.COMPANY_CODE            COMPANY_CODE
				,v_EMP_DATA_row.FILE_NUMBER             FILE_NUMBER
				,v_EMP_DATA_row.EMPLOYEE_NAME           EMPLOYEE_NAME
				,v_EMP_DATA_row.LAST_NAME               LAST_NAME
				,v_EMP_DATA_row.FIRST_NAME              FIRST_NAME
				,v_EMP_DATA_row.MIDDLE_INITIAL          MIDDLE_INITIAL
				,v_EMP_DATA_row.HOME_ADDRESS_LINE1      HOME_ADDRESS_LINE1
				,v_EMP_DATA_row.HOME_ADDRESS_LINE2      HOME_ADDRESS_LINE2
				,v_EMP_DATA_row.HOME_CITY_STATE         HOME_CITY_STATE
				,v_EMP_DATA_row.HOME_CITY               HOME_CITY
				,v_EMP_DATA_row.HOME_STATE              HOME_STATE
				,v_EMP_DATA_row.HOME_POSTAL_CODE        HOME_POSTAL_CODE
				,v_EMP_DATA_row.HOME_PHONE              HOME_PHONE
				,v_EMP_DATA_row.SEX                     SEX
				,v_EMP_DATA_row.EMP_PAYROLL_STATUS      EMP_PAYROLL_STATUS
				,v_EMP_DATA_row.EMP_ASSIGNMENT_STATUS   EMP_ASSIGNMENT_STATUS
				,v_EMP_DATA_row.EMP_DIVISION            EMP_DIVISION
				,v_EMP_DATA_row.ACCOUNT_NUMBER          ACCOUNT_NUMBER
				,v_EMP_DATA_row.FLSA_CODE               FLSA_CODE
				,v_EMP_DATA_row.EMPLOYEE_NUMBER         EMPLOYEE_NUMBER
				,v_EMP_DATA_row.PAYROLL_EMP_RPT_SEQ_ID  PAYROLL_EMP_RPT_SEQ_ID
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_EMP_DATA_row.NATIONAL_IDENTIFIER     NATIONAL_IDENTIFIER
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
			,('|' || v_EMP_DATA_row.NATIONAL_IDENTIFIER     ||
                          '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'EMP_DATA'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  EMP_DATA_INITLOAD_SP;
d377 1
a377 1
PROCEDURE HIER_DESC_INITLOAD_SP (
d379 1
a379 1
	HIER_DESC_INITLOAD_SP
d381 1
a381 1
	This procedure is intended to build an AUDIT_LOG entry for HIERARCXHY_DESCRIPTION Records
d383 1
a383 1
created : 04/23/2013 TAL CCN Project....
d385 1
a386 3
    inHIER_DESC_rowtype  IN  HIERARCHY_DESCRIPTION%ROWTYPE )
    
    is
d388 3
a390 6
    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_HIER_DESC_row HIERARCHY_DESCRIPTION%ROWTYPE := inHIER_DESC_rowtype; 
    
begin 
d392 5
a396 54
	SELECT XMLELEMENT ( "HIERARCHY_DESCRIPTION",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_HIER_DESC_row.HRCHY_HDR_NAME       HRCHY_HDR_NAME
				,v_HIER_DESC_row.HRCHY_HDR_LVL_NBR    HRCHY_HDR_LVL_NBR
				,v_HIER_DESC_row.HRCHY_HDR_LVL_DESC   HRCHY_HDR_LVL_DESC
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_HIER_DESC_row.HRCHY_HDR_NAME       HRCHY_HDR_NAME
				,v_HIER_DESC_row.HRCHY_HDR_LVL_NBR    HRCHY_HDR_LVL_NBR
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
			,('|' || v_HIER_DESC_row.HRCHY_HDR_NAME     ||
        '|' || v_HIER_DESC_row.HRCHY_HDR_LVL_NBR  ||
                          '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'HIERARCHY_DESCRIPTION'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  HIER_DESC_INITLOAD_SP;
d399 1
a399 1
PROCEDURE HIER_DETAIL_INITLOAD_SP (
d401 1
a401 1
	HIER_DETAIL_INITLOAD_SP
d403 1
a403 1
	This procedure is intended to build an AUDIT_LOG entry for HIERARCHY_DETAIL Records
d405 1
a405 1
created : 04/23/2013 TAL CCN Project....
d407 8
d416 3
a418 3
    inHIER_DETAIL_rowtype  IN  HIERARCHY_DETAIL%ROWTYPE )
    
    is
d420 3
a422 6
    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_HIER_DETAIL_row HIERARCHY_DETAIL%ROWTYPE := inHIER_DETAIL_rowtype; 
    
begin 
d424 2
a425 69
	SELECT XMLELEMENT ( "HIERARCHY_DETAIL",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_HIER_DETAIL_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
				,v_HIER_DETAIL_row.HRCHY_DTL_LEVEL          HRCHY_DTL_LEVEL
				,v_HIER_DETAIL_row.HRCHY_DTL_PREV_LVL_VAL   HRCHY_DTL_PREV_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_CURR_LVL_VAL   HRCHY_DTL_CURR_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_NEXT_LVL_VAL   HRCHY_DTL_NEXT_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE       HRCHY_DTL_EFF_DATE
				,v_HIER_DETAIL_row.HRCHY_DTL_EXP_DATE       HRCHY_DTL_EXP_DATE
				,v_HIER_DETAIL_row.HRCHY_DTL_DESC           HRCHY_DTL_DESC
				,v_HIER_DETAIL_row.HRCHY_DTL_CURR_ROW_VAL   HRCHY_DTL_CURR_ROW_VAL
				,v_HIER_DETAIL_row.UPPER_LVL_VER_VALUE      UPPER_LVL_VER_VALUE
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_HIER_DETAIL_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
				,v_HIER_DETAIL_row.HRCHY_DTL_LEVEL          HRCHY_DTL_LEVEL
				,v_HIER_DETAIL_row.HRCHY_DTL_PREV_LVL_VAL   HRCHY_DTL_PREV_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_CURR_LVL_VAL   HRCHY_DTL_CURR_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_NEXT_LVL_VAL   HRCHY_DTL_NEXT_LVL_VAL
				,v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE       HRCHY_DTL_EFF_DATE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_HIER_DETAIL_row.HRCHY_HDR_NAME     ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_LEVEL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_PREV_LVL_VAL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_CURR_LVL_VAL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_NEXT_LVL_VAL    ||
        '|' || v_HIER_DETAIL_row.HRCHY_DTL_EFF_DATE        ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'HIERARCHY_DETAIL'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  HIER_DETAIL_INITLOAD_SP;
d427 4
d432 1
a432 1
PROCEDURE HIER_HEADER_INITLOAD_SP (
d434 1
a434 1
	HIER_HEADER_INITLOAD_SP
d436 2
a437 1
	This procedure is intended to build an AUDIT_LOG entry for HIERARCHY_HEADER Records
d439 1
a439 1
created : 04/24/2013 TAL CCN Project....
d441 6
d448 2
a449 3
    inHIER_HEADER_rowtype  IN  HIERARCHY_HEADER%ROWTYPE )
    
    is
d451 8
a458 6
    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_HIER_HEADER_row HIERARCHY_HEADER%ROWTYPE := inHIER_HEADER_rowtype; 
    
begin 
d460 2
a461 52
	SELECT XMLELEMENT ( "HIERARCHY_HEADER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_HIER_HEADER_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
				,v_HIER_HEADER_row.HRCHY_HDR_LEVELS         HRCHY_HDR_LEVELS
				,v_HIER_HEADER_row.HRCHY_HDR_DESC           HRCHY_HDR_DESC
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_HIER_HEADER_row.HRCHY_HDR_NAME           HRCHY_HDR_NAME
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_HIER_HEADER_row.HRCHY_HDR_NAME     ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'HIERARCHY_HEADER'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  HIER_HEADER_INITLOAD_SP;
d463 11
d475 6
a480 1
PROCEDURE MARKETING_INITLOAD_SP (
d482 1
a482 1
	MARKETING_INITLOAD_SP
d484 2
a485 1
	This procedure is intended to build an AUDIT_LOG entry for MARKETING Records
d487 1
a487 1
created : 04/24/2013 TAL CCN Project....
d489 9
d499 8
a506 3
    inMARKETING_rowtype  IN  MARKETING%ROWTYPE )
    
    is
d508 2
a509 6
    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_MARKETING_row MARKETING%ROWTYPE := inMARKETING_rowtype; 
    
begin 
d511 8
a518 61
	SELECT XMLELEMENT ( "MARKETING",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_MARKETING_row.COST_CENTER_CODE         COST_CENTER_CODE
				,v_MARKETING_row.CATEGORY                 CATEGORY
				,v_MARKETING_row.MARKETING_TYPE           MARKETING_TYPE
				,v_MARKETING_row.EFFECTIVE_DATE           EFFECTIVE_DATE
				,v_MARKETING_row.EXPIRATION_DATE          EXPIRATION_DATE
				,v_MARKETING_row.MKT_BRAND                MKT_BRAND
				,v_MARKETING_row.MKT_MISSION              MKT_MISSION
				,v_MARKETING_row.MKT_SALES_FLOOR_SIZE     MKT_SALES_FLOOR_SIZE
				,v_MARKETING_row.MKT_WAREHOUSE_SIZE       MKT_WAREHOUSE_SIZE
				,v_MARKETING_row.MKT_REAL_ESTATE_SETTING  MKT_REAL_ESTATE_SETTING
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_MARKETING_row.COST_CENTER_CODE         COST_CENTER_CODE
				,v_MARKETING_row.MARKETING_TYPE           MARKETING_TYPE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_MARKETING_row.COST_CENTER_CODE     || 
        '|' || v_MARKETING_row.MARKETING_TYPE       ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'MARKETING'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  MARKETING_INITLOAD_SP;
d520 2
d523 6
a528 1
PROCEDURE OTHER_INITLOAD_SP (
d530 1
a530 1
	OTHER_INITLOAD_SP
d532 2
a533 1
	This procedure is intended to build an AUDIT_LOG entry for OTHER Records
d535 1
a535 1
created : 04/26/2013 TAL CCN Project....
d537 9
d547 4
a550 1
    inOTHER_rowtype  IN  OTHER%ROWTYPE )
d552 3
a554 1
    is
d556 2
a557 6
    v_transaction_id VARCHAR2(500);
    v_rowdata sys.xmltype;
    v_primaryKey sys.xmltype;
    v_OTHER_row OTHER%ROWTYPE := inOTHER_rowtype; 
    
begin 
d559 9
a567 51
	SELECT XMLELEMENT ( "OTHER",               
	  		XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema'   AS "xmlns:xsi",
        			          'http://www.oracle.com/Employee.xsd' AS
                    	     	"xsi:nonamespaceSchemaLocation" ),
--  All Data Fileds Go Here  --
       		XMLForest(
				 v_OTHER_row.COST_CENTER_CODE         COST_CENTER_CODE
				,v_OTHER_row.CATEGORY                 CATEGORY
			)) AS "result"
			,XMLELEMENT ( "PrimaryKey",               
	  			XMLATTRIBUTES ( 'http://www.w3.org/2001/XMLSchema' AS "xmlns:xsi",
                				  'http://www.oracle.com/Employee.xsd' AS
                         			"xsi:nonamespaceSchemaLocation" ),
--  All Primary KEY Fields Go Here  --
	       XMLForest(
				 v_OTHER_row.COST_CENTER_CODE         COST_CENTER_CODE
			)) AS "primaryKey"
--  All Primary Key Fields Go Here  --
      ,('|' || v_OTHER_row.COST_CENTER_CODE     ||
        '|' )  transaction_id
			INTO v_rowdata
			,v_primaryKey
			,v_transaction_id
			FROM DUAL;	
      
     /* -- for   Column -- */
     --IF (:OLD.CATEGORY != :NEW.CATEGORY) THEN

-- Same For All Triggers  --

          INSERT INTO audit_log
               (log_id
               , transaction_id
               , transaction_date
               , table_name
               , table_pk_value
               , table_row_data
               , change_by
	       , AUDIT_REC_FLAG)
          VALUES
               ((SELECT NVL(MAX(LOG_ID), 0) + 1 FROM AUDIT_LOG),
                v_transaction_id
                , SYSDATE
                , 'OTHER'
                , v_primaryKey
                , v_rowdata
                , 'somebody'
		, 'R');
     --END IF;      
     
end  OTHER_INITLOAD_SP;
d569 1
d571 5
@


1.5
log
@add POP_KIT_CODE to COST_CENTER table.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d716 4
a719 3
/*********************************************
   BANK_PHONE Load
*********************************************/
d722 1
a722 1
   for ccninfo_rec in ccninfo_cur loop
d724 3
a726 2
   BEGIN
      
d728 5
a732 2
      Now Build the Phone Table Entries
*************************************************************************/
d822 1
d2606 1067
a3672 1
END initLoad;
d3674 1
@


1.4
log
@Take out Deposit Bag, Deposit Ticket, and Banking TYpe out of loads to administration, real estate, other, and territory tables.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d119 2
a120 1
             BANK_TYPE  FROM TEMP_COST_CENTER;
d150 1
d268 2
a269 1
       MISSION_TYPE  FROM TEMP_STORE;
d1357 2
a1358 2
      v_ccntemp_row.province_code             := null;
      v_ccntemp_row.state_code               := ccntemp_rec.state_code;
d1361 22
a1382 22
      v_ccntemp_row.country_code              := ccntemp_rec.country_code;
     --                                  Eventually the above field will be country name
  
      if ccntemp_rec.country_code  = 'JAM' then
          v_ccntemp_row.country_code  := 'JAMAICA';
      end if;

      if ccntemp_rec.country_code  = 'ANT' then
          v_ccntemp_row.country_code  := 'NETHERLANDS ANTILLES';
      end if;

      if ccntemp_rec.country_code  = 'TTO' then
          v_ccntemp_row.country_code  := 'TRINIDAD AND TOBAGO';
      end if;

      if ccntemp_rec.country_code  = 'ABW' then
          v_ccntemp_row.country_code  := 'ARUBA';
      end if;

      if ccntemp_rec.country_code  = 'CUW' then
          v_ccntemp_row.country_code  := 'CURACAO';
      end if;
@


1.3
log
@Address other db change
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@a364 2
	     DEP_TKT_REORDER_SW,
	     BANK_TYPE,
a370 1
	     DEP_BAG_REORDER_SW,
a464 2
	     DEP_TKT_REORDER_SW,
	     BANK_TYPE,
a470 1
	     DEP_BAG_REORDER_SW,
a561 2
	     DEP_TKT_REORDER_SW,
	     BANK_TYPE,
a567 1
	     DEP_BAG_REORDER_SW,
a1982 2
	           DEP_TKT_REORDER_SW,
	           BANK_TYPE,
a1988 1
	           DEP_BAG_REORDER_SW,
@


1.2
log
@move Banking_Type, Deposit_Ticket_Reorder, and Deposit_Bag_Reorder from STORE to COST_CENTER table.
Change names of LAST_MAINT fields in BANK_CARD table.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d1363 2
a1364 2
      v_ccntemp_row.province             := null;
      v_ccntemp_row.state                := ccntemp_rec.state_code;
d1367 1
a1367 1
      v_ccntemp_row.country              := ccntemp_rec.country_code;
d1371 1
a1371 1
          v_ccntemp_row.country  := 'JAMAICA';
d1375 1
a1375 1
          v_ccntemp_row.country  := 'NETHERLANDS ANTILLES';
d1379 1
a1379 1
          v_ccntemp_row.country  := 'TRINIDAD AND TOBAGO';
d1383 1
a1383 1
          v_ccntemp_row.country  := 'ARUBA';
d1387 1
a1387 1
          v_ccntemp_row.country  := 'CURACAO';
d2609 2
a2610 1
END initLoad;@


1.1
log
@Initial load of all CCN data from Legacy IDMS Files.
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@d7 2
a8 2
  LOAD_COST_CENTER_TABLE      -  09/29/2011 CHG 08/21/2012 MDH 
  LOAD_STORE_TABLE            -  09/29/2011 CHG 08/21/2012 MDH
d116 4
a119 1
             MISSION_TYPE FROM TEMP_COST_CENTER;
d130 4
a133 4
      v_ccntemp_row.cost_center_code     := ccntemp_rec.cost_center_code;
      v_ccntemp_row.cost_center_name     := ccntemp_rec.cost_center_name;
      v_ccntemp_row.category             := ccntemp_rec.category_code;
      v_ccntemp_row.entity_type          := ccntemp_rec.entity_type;
d135 2
a136 2
      v_ccntemp_row.country_code         := substr(ccntemp_rec.country_code,1,3);
      v_ccntemp_row.transport_type       := null;
d138 12
a149 9
      v_ccntemp_row.pos_prog_ver_nbr     := ccntemp_rec.program_version;  
      v_ccntemp_row.ups_zone_code        := ccntemp_rec.ups_zone_code;
      v_ccntemp_row.currency_code        := ccntemp_rec.currency_code;
      v_ccntemp_row.pri_logo_group_ind   := ccntemp_rec.prime_logo_ind;
      v_ccntemp_row.scd_logo_group_ind   := ccntemp_rec.secnd_logo_ind;
      v_ccntemp_row.duns_number          := ccntemp_rec.duns_number;
      v_ccntemp_row.lease_own_code       := ccntemp_rec.lease_own_code;
      v_ccntemp_row.mission_type_code   := ccntemp_rec.mission_type;
     
a252 2
	     DEP_TKT_REORDER_SW,
	     BANK_TYPE,
a258 1
	     DEP_BAG_REORDER_SW,
d289 3
a291 3
      v_ccntemp_row.deposit_bag_reorder     := ccntemp_rec.dep_bag_reorder_sw;
      v_ccntemp_row.deposit_ticket_reorder  := ccntemp_rec.dep_tkt_reorder_sw;
      v_ccntemp_row.banking_type            := ccntemp_rec.bank_type;
d2230 1
a2230 1
         v_ccninfo_row.LAST_CHANGE_DATE     := '' ;
d2232 1
a2232 1
         v_ccninfo_row.LAST_CHANGE_DATE     := to_date(ccninfo_rec.LAST_CHANGE_DATE, 'YYYYMMDD');
d2235 2
a2236 2
	 V_CCNINFO_ROW.LAST_MAINT_UI        := CCNINFO_REC.LAST_MAINTENANCE_AUTH_ID;
	 v_ccninfo_row.last_maint_user_id   := ccninfo_rec.last_maintenance_user_id;
@

