head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2012.08.13.14.21.32;	author Oxd628;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
permissions	666;
commitid	b3c50290d6b1f7c;
filename	CCN_DRM_APICALL.pkg;

1.1
date	2012.07.25.19.03.09;	author SW\Oxd628;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	900501042ec2a80;
filename	CCN_DRM_APICALL.pkg;


desc
@@


1.2
log
@
Committed on the Free edition of March Hare Software CVSNT Server.
Upgrade to CVS Suite for more features and support:
http://march-hare.com/cvsnt/
@
text
@create or replace
PACKAGE BODY CCN_DRM_APICALL AS 
/*********************************************************** 
This package will hold the SQL DEVELOPER generated 
INSERT, UPDATE, and DELETE procedures/functions 
used to process the ADDRESS_CAN table	

created : 01/25/2012 tal CCN project
revisions: 

************************************************************/

PROCEDURE MAIN_CALL
/*******************************************************
Procedure is the main call where the rest of the
procedures are called, input is the method name and
parameters


Author : 

versions : init 07/20/2012 
*******************************************************/
( I_METHOD  	IN VARCHAR2
 ,I_PARAM_VAL   IN ParamList
, O_RESP 	OUT XMLTYPE
)

IS

V_CONTEXT	VARCHAR2(200);
SQ 		NUMBER;
SE 		VARCHAR2(100);

V_OPPARAM	XMLTYPE;
V_DRMREQ	VARCHAR2(5000);
V_OP_RESP	VARCHAR2(32767);

BEGIN

	V_CONTEXT := 'Call WSDL Reading procedure';
	
	/* Read DRM WSDL and pass list of params 
	   in xmltype to the method specific procedure */
	
	READ_WSDL_PARAMS(I_METHOD,V_OPPARAM);
	
	/* Call method specific procedure and get 
	  the output as a string with the complete DRM request */

	V_CONTEXT := 'Call Method specific procedure';

	CASE
	    WHEN UPPER(I_METHOD) = 'INACTIVATENODES' THEN 
	    
	    	CALL_INACTIVATENODES(I_PARAM_VAL,V_OPPARAM,V_DRMREQ);
	    
	    WHEN UPPER(I_METHOD) = 'ADDHIER' THEN 
	    
	    NULL;
	    
	    ELSE NULL;
	    
	END CASE;
	
	
	V_CONTEXT := 'Call procedure to execute the webservice';
	
	/* Call the procedure that executes webservice 
	   and get the response */
	
	CALL_WEB_SERVICE(V_DRMREQ, V_OP_RESP, I_METHOD);
	
	O_RESP := XMLTYPE(V_OP_RESP);
	
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20071,'CCN_DRM_APICALL.MAIN_CALL',V_CONTEXT);   	
	
	
END MAIN_CALL;


PROCEDURE READ_WSDL_PARAMS
/*******************************************************
Procedure reads the DRM WSDL and generates the parameter
list in the form of an XML


Author : 

versions : init 07/20/2012 
*******************************************************/
( I_METHOD  IN VARCHAR2
, O_PARAMS OUT XMLTYPE
) 
IS


 
 ndoc      	DBMS_XMLDOM.DOMNode;
 NODE       	DBMS_XMLDOM.DOMNODE; 
 node1      	DBMS_XMLDOM.DOMNode; 
 childnode 	DBMS_XMLDOM.DOMNode;
 NODE2	 	DBMS_XMLDOM.DOMNODE;
 NODE3	 	DBMS_XMLDOM.DOMNODE;
 NODE4	 	DBMS_XMLDOM.DOMNODE;
 NODE5	 	DBMS_XMLDOM.DOMNODE;
 NODE6	 	DBMS_XMLDOM.DOMNODE;
 NODE7	 	DBMS_XMLDOM.DOMNODE;
 NODE8	 	DBMS_XMLDOM.DOMNODE;
 NODE9	 	DBMS_XMLDOM.DOMNODE;
 NODE10	 	DBMS_XMLDOM.DOMNODE;


 doc       	DBMS_XMLDOM.DOMDocument; 
 
 
 DOCELEM    	DBMS_XMLDOM.DOMELEMENT;
 DOCELEM1   	DBMS_XMLDOM.DOMELEMENT;
 DOCELEM2   	DBMS_XMLDOM.DOMELEMENT;
 docelem3   	DBMS_XMLDOM.DOMElement;

 nodelist0  	DBMS_XMLDOM.DOMNodelist;
 NODELIST   	DBMS_XMLDOM.DOMNODELIST;
 NODELIST1  	DBMS_XMLDOM.DOMNODELIST;
 NODELIST2  	DBMS_XMLDOM.DOMNODELIST;
 NODELIST3  	DBMS_XMLDOM.DOMNODELIST;
 NODELIST4  	DBMS_XMLDOM.DOMNODELIST;
 nodelist5    DBMS_XMLDOM.DOMNODELIST;
 
 var       	XMLType; 
 
 AATTR 		  DBMS_XMLDOM.DOMATTR;
 AATTR1 		DBMS_XMLDOM.DOMATTR;
 
 AATTR2 		DBMS_XMLDOM.DOMATTR;
 
 NMNODEMAP 	DBMS_XMLDOM.DOMNAMEDNODEMAP;
 nmNodeMap1 	DBMS_XMLDOM.DOMNamedNodeMap;
 

 buf       VARCHAR2(2000);
 NSPACE    VARCHAR2(50);
 NODEBUFFER CLOB;
 xmlOutput xmltype;
 
 NUM       INTEGER;
 NUM1      INTEGER;
 WRT       VARCHAR2(200);
 STRINDEX VARCHAR2(100);
 STRINDEX1 VARCHAR2(100);
 STRINDEX2 VARCHAR2(3);
 
 buf1      VARCHAR2(2000);
 
 
 SE	VARCHAR2(1000);
 SQ	INTEGER;
 
 V_CONTEXT	VARCHAR2(1000);
 
 
 L_URL HTTPURITYPE;
--l_xml xmltype;
 
BEGIN 
 
	V_CONTEXT := 'Read WSDL';
	
	L_URL:=HTTPURITYPE.CREATEURI('http://cphdrmdv.sw.sherwin.com:8001/oracle-epm-drm-webservices/DrmService?wsdl');
	var:=L_URL.GETXML;



 -- Create DOMDocument handle
 	doc     := DBMS_XMLDOM.newDOMDocument(var);  --converts xmltype into a DOM doc
 	ndoc    := DBMS_XMLDOM.makeNode(doc);	      --creates handle	


 	DOCELEM := DBMS_XMLDOM.GETDOCUMENTELEMENT(DOC); -- gets root element of DOM odc
 
 	nspace := xmldom.getNamespace(DOCELEM);
 
 
 	NODELIST1 := DBMS_XMLDOM.GETCHILDRENBYTAGNAME(DOCELEM, 'types'); --Traverse through the WSDL for tag types
  
 	NODE4 := DBMS_XMLDOM.ITEM(NODELIST1, 0);	--get the first element in the nodelist
 
 	docelem1  := DBMS_XMLDOM.MAKEELEMENT(NODE4);
  
 	NODELIST := DBMS_XMLDOM.GETCHILDRENBYTAGNAME(docelem1, 'schema'); --Traverse through the WSDL for tag schema
 
 	NODE5  :=  DBMS_XMLDOM.ITEM(NODELIST, 0); 

 	docelem2  := DBMS_XMLDOM.MAKEELEMENT(NODE5);

	/* The parameters are defined in the tag complexType, 
	   so read this tag for the required method name= */
 	nodelist0 := DBMS_XMLDOM.GETCHILDRENBYTAGNAME(docelem2, 'complexType'); 
 
 	num := DBMS_XMLDOM.GETLENGTH(nodelist0);

 
	buf1 := HEADERREQ || '<ns1:' || I_METHOD || '>';
	
	V_CONTEXT := 'Read Parameters';
 
 	/* Loop through the parameters defined as element name="methodname" */
 	FOR I in 0..(num -1) LOOP

   		NODE2 := DBMS_XMLDOM.ITEM(nodelist0, I); 
  
   		NMNODEMAP := DBMS_XMLDOM.GETATTRIBUTES(NODE2);
   
   		NODE3 := DBMS_XMLDOM.GETNAMEDITEM(NMNODEMAP,'name');
 
   		AATTR := DBMS_XMLDOM.MAKEATTR(NODE3);
   
   		STRINDEX := DBMS_XMLDOM.GETVALUE(AATTR);
   
   		IF  UPPER(STRINDEX) = UPPER(I_METHOD) THEN
      
 
    			nodelist3 := DBMS_XMLDOM.GETCHILDRENBYTAGNAME(docelem2, 'complexType');
 
   
    			NODELIST4 := DBMS_XMLDOM.GETCHILDNODES(NODE2);
    
      
        		NODE6  :=  DBMS_XMLDOM.ITEM(NODELIST4, 0);
        
        		docelem3 := DBMS_XMLDOM.MAKEELEMENT(NODE6);
    
        		nodelist5 := DBMS_XMLDOM.GETCHILDRENBYTAGNAME(docelem3, 'element');
 
        		NUM1 := DBMS_XMLDOM.GETLENGTH(NODELIST5);
        		
        		
        		V_CONTEXT := 'Read Attributes of the elements to get name';
        		
        		/* Since the parameter name is an attribute read the attribute name=
        		  to get the parameter name */
        		FOR J IN 0..(NUM1 -1) LOOP
            
          		
          			NODE7 := DBMS_XMLDOM.ITEM(nodelist5, J); 
  
          			NMNODEMAP1 := DBMS_XMLDOM.GETATTRIBUTES(NODE7);
   
			  	NODE8 := DBMS_XMLDOM.GETNAMEDITEM(NMNODEMAP1,'name');

			  	AATTR1 := DBMS_XMLDOM.MAKEATTR(NODE8);
          
    
               

			  	NODE10 := DBMS_XMLDOM.GETNAMEDITEM(NMNODEMAP1,'minOccurs');

			  	AATTR2 := DBMS_XMLDOM.MAKEATTR(NODE10);

			  	STRINDEX2 := DBMS_XMLDOM.GETVALUE(AATTR2);
			  	
        
   
          			IF STRINDEX2='0' THEN
   
            				NULL;
            
          			ELSE
          
            				STRINDEX1 := DBMS_XMLDOM.GETVALUE(AATTR1);
            				--DBMS_OUTPUT.PUT_LINE('Yep: '||STRINDEX1);
            				             				
            				/* Concatenate all the parameters in a string (in the form of xml) */
            				BUF1 := BUF1 || '<ns1:'|| STRINDEX1 || '/>';
            
          
          			END IF; --IF STRINDEX2='0'

      			END LOOP; --FOR J IN
   	
   	
   		END IF;	--UPPER(STRINDEX) 
   
   
 	END LOOP; --FOR I in 0
  
    
    BUF1 := BUF1 || '</ns1:' || I_METHOD || '>' || CLOSERREQ;
  
   
    /* convert the xml string to xml */
    O_PARAMS := XMLTYPE(BUF1);
    
    --DBMS_XMLDOM.WRITETOBUFFER(NODE6, BUF);
       


EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20071,'CCN_DRM_APICALL.READ_WSDL_PARAMS',V_CONTEXT);   

END READ_WSDL_PARAMS;

PROCEDURE CALL_INACTIVATENODES
/*******************************************************
Procedure to generate request to call webservice 
inactivateNodes takes input as the array string for 
values

Author : 

versions : init 07/20/2012 
*******************************************************/
( I_PARAM_VAL  IN ParamList
, I_PARAM_LIST IN XMLTYPE
, O_REQUEST OUT VARCHAR2
) IS

   test1 		xmltype;

   fragment  		XMLTYPE;
   doc       		DBMS_XMLDOM.DOMDocument; 
   ndoc      		DBMS_XMLDOM.DOMNode; 


   DOCELEM   		DBMS_XMLDOM.DOMELEMENT;
   docelem1  		DBMS_XMLDOM.DOMElement;
   node      		DBMS_XMLDOM.DOMNode; 
   NODE1     		DBMS_XMLDOM.DOMNODE; 

   N1        		DBMS_XMLDOM.DOMNODE; 
   N2        		DBMS_XMLDOM.DOMNODE; 
   N3        		DBMS_XMLDOM.DOMNODE;

   childnode 		DBMS_XMLDOM.DOMNode; 
   CHILDNODE1 		DBMS_XMLDOM.DOMNODE;
   CHILDNODE2 		DBMS_XMLDOM.DOMNODE;
   childnode3 		DBMS_XMLDOM.DOMNODE;

   CN  			DBMS_XMLDOM.DOMNODE;
   CN1 			DBMS_XMLDOM.DOMNODE;

   nodelist  		DBMS_XMLDOM.DOMNodelist;
   nodelist1  		DBMS_XMLDOM.DOMNodelist;
   
   BUF            	VARCHAR2(2000);
   FINALBUF       	VARCHAR2(4000);
   
   num			INTEGER;
   
   nm   		VARCHAR2(2000);
   
    SE	VARCHAR2(100);
    SQ	INTEGER;
    
    V_CONTEXT	VARCHAR2(200);
   
   
BEGIN

         
  

   -- I_PARAM_VAL := ParamList('VERSION', 'HIER NAME', 'N1','N2','N3','N4');
   
	/*Get the parameter list(I_PARAM_LIST) that we got as input XML and 
	insert values for each of the parameters(tags) from 
	the parameter values we received as input(I_PARAM_VAL) */
   	
   	fragment 	:= I_PARAM_LIST;
   
   	V_CONTEXT := 'Start';
   
	doc     	:= DBMS_XMLDOM.newDOMDocument(fragment); 
	ndoc    	:= DBMS_XMLDOM.makeNode(doc);
	docelem 	:= DBMS_XMLDOM.getDocumentElement(doc);
	NODELIST	:= DBMS_XMLDOM.GETELEMENTSBYTAGNAME(DOCELEM, 'Body');
	node  	  	:= DBMS_XMLDOM.item(nodelist, 0);
	childnode	:= DBMS_XMLDOM.getFirstChild(node);
	NODELIST1	:= DBMS_XMLDOM.GETCHILDNODES(CHILDNODE);
	NUM       	:= DBMS_XMLDOM.GETLENGTH(  nodelist1);       
         
         
	FOR J IN 1..(NUM ) LOOP
         
		childnode1 := DBMS_XMLDOM.item(nodelist1, j -1); 
		nm:=DBMS_XMLDOM.GETNODENAME(CHILDNODE1);
		
		V_CONTEXT := 'Looping through param list';

		/* For a stringlist(nodeNameList) type we need to create the number of tags as the number of 
		parameters in the list and also populate their values*/
		
        	IF SUBSTR(NM,INSTR(NM,':') +1) = 'nodeNameList' THEN


        		FOR K IN J..I_PARAM_VAL.LAST LOOP
        		
        			V_CONTEXT := 'Looping through stringlist and creating tags';

				/* Create child tags named s for each parameter in the list 
				also set their value */
        	    		DOCELEM1  	:= DBMS_XMLDOM.CREATEELEMENT(DOC,'ns1:s');
        	    		N3        	:= DBMS_XMLDOM.makeNode(DOCELEM1);

        	      		N2		:= DBMS_XMLDOM.APPENDCHILD(CHILDNODE1,N3);
        	      		/*Below step creates a text node, basically inserts 
        	      		the text value from I_PARAM_VAL into the xml I_PARAM_LIST for stringlisttype */
        	      		CHILDNODE2 	:= DBMS_XMLDOM.MAKENODE(DBMS_XMLDOM.CREATETEXTNODE(DOC, I_PARAM_VAL(K)));   	
        	    		CHILDNODE3 	:= DBMS_XMLDOM.APPENDCHILD(N2,  childnode2);

        	    	END LOOP;  

        	 ELSE
				/*Below step creates a text node, basically inserts 
        	      		the text value from I_PARAM_VAL into the xml I_PARAM_LIST  */
				CHILDNODE2 := DBMS_XMLDOM.MAKENODE(DBMS_XMLDOM.CREATETEXTNODE(DOC, I_PARAM_VAL(J)));   	
				CHILDNODE3 :=       DBMS_XMLDOM.APPENDCHILD(childnode1,  childnode2);

        	END IF;


     
	END LOOP;
  
	DBMS_XMLDOM.WRITETOBUFFER(CHILDNODE, BUF);
	
	/* Concatenate the standard header and closing tags (defined in the specs) */
	FINALBUF := headerfragment || BUF || CLOSEFRAGMENT;

	test1 := xmltype(finalbuf);


	--DBMS_OUTPUT.PUT_LINE(FINALBUF);
	DBMS_XMLDOM.freeDocument(doc);
	/* O_REQUEST is the final xml webservice call as a string with values populated */
	O_REQUEST := FINALBUF;
	
EXCEPTION WHEN OTHERS THEN

	SQ := SQLCODE;
	SE := SQLERRM;
	
	V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
  

	ERRPKG.RAISE_ERR(-20071,'CCN_DRM_APICALL.CALL_INACTIVATENODES',V_CONTEXT);   	
   
END CALL_INACTIVATENODES;

PROCEDURE CALL_WEB_SERVICE
/*******************************************************
Procedure to call webservice for CCN project only.

Author : Keith D. Parker

versions : init 01/18/2012 kdp
*******************************************************/
(i_payload IN VARCHAR2
, o_response OUT VARCHAR2
, i_soapAction IN VARCHAR2
) IS
   v_http_req      utl_http.req;
   v_http_resp     utl_http.resp;

   l_wsdl_url       VARCHAR2(32767) := 'http://cphdrmdv.sw.sherwin.com:8001/oracle-epm-drm-webservices/DrmService?wsdl';
   									 --'http://cphdrmdv.sw.sherwin.com:28080/oracle-epm-drm-webservices/DrmService?wsdl';
   v_part_response VARCHAR2(32767);

 BEGIN

   v_http_req := utl_http.begin_request(
                   l_wsdl_url, 'POST', 'HTTP/1.1');

   utl_http.set_authentication(v_http_req, 'cmuir', 'pwd', 'Basic', TRUE);

   utl_http.set_header(v_http_req, 'Content-Type'   ,'text/xml');
   utl_http.set_header(v_http_req, 'Content-Length' ,length(i_payload));
   utl_http.set_header(v_http_req, 'SOAPAction'     ,i_soapAction);
   utl_http.write_text(v_http_req, i_payload);

   v_http_resp := utl_http.get_response(v_http_req);
   -- Add handler for HTTP error v_http_resp.status_code >= 500 <= 599 
   BEGIN
     LOOP
       utl_http.read_text(v_http_resp, v_part_response);
       o_response := o_response || v_part_response;
     END LOOP;
   EXCEPTION WHEN utl_http.end_of_body THEN
     NULL;
   END;
   utl_http.end_response(v_http_resp);
   -- exception handler  
   EXCEPTION
   	WHEN OTHERS THEN
   		DBMS_OUTPUT.PUT_LINE(SQLERRM);
 END CALL_WEB_SERVICE;



END CCN_DRM_APICALL;
/@


1.1
log
@new
@
text
@d1 1
a1 1
CREATE OR REPLACE
d161 1
a161 1
 buf1      VARCHAR2(500);
d164 1
a164 1
 SE	VARCHAR2(100);
d167 1
a167 1
 V_CONTEXT	VARCHAR2(200);
d174 1
a174 2

	
d180 2
d197 1
a197 2
 
 
d209 1
d211 1
a211 2
 
	buf1 := '<ns1:' || I_METHOD || '>';
d251 1
a251 1
        
d260 3
d270 1
d280 1
a280 2
            				
            				
d282 1
a282 1
            				BUF1 := BUF1 || '<ns1:'|| STRINDEX1 || '>';
d294 1
d296 3
a298 2
    BUF1 := BUF1 || '</ns1:' || I_METHOD || '>';
    
d516 1
a516 3
/
	
	
@

