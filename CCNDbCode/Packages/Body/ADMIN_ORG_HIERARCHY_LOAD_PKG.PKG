CREATE OR REPLACE PACKAGE BODY COSTCNTR.ADMIN_ORG_HIERARCHY_LOAD_PKG
IS

PROCEDURE ADMIN_ORG_REFERENCE_LOAD
/**********************************************************
ADMIN_ORG_REFERENCE_LOAD

created : 07/15/2016 mxk766
**********************************************************/
IS
BEGIN

DELETE FROM HIERARCHY_DETAIL WHERE HRCHY_HDR_NAME='ADMINORG_HIERARCHY';

DELETE FROM HIERARCHY_DESCRIPTION WHERE HRCHY_HDR_NAME='ADMINORG_HIERARCHY';

DELETE FROM HIERARCHY_HEADER WHERE HRCHY_HDR_NAME='ADMINORG_HIERARCHY'; 

INSERT INTO HIERARCHY_HEADER(HRCHY_HDR_NAME, HRCHY_HDR_LEVELS, HRCHY_HDR_DESC)
VALUES('ADMINORG_HIERARCHY',2,'ADMINORG_HIERARCHY Testing');

INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',1,'Domain',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),1,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',2,'Group',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),2,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',3,'Division',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),3,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',4,'Area',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),4,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',5,'District',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),5,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',6,'City/Sales Manager',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),6,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',7,'Zone',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),7,4);
INSERT INTO HIERARCHY_DESCRIPTION 
(HRCHY_HDR_NAME,HRCHY_HDR_LVL_NBR,HRCHY_HDR_LVL_DESC,UPPER_LVL_VER_VALUE,HRCHY_GLOBAL_LVL_NBR,LVL_VALUE_SIZE) 
VALUES ('ADMINORG_HIERARCHY',8,'Cost Center',xmltype('<attributes><upper_lvl_ver_desc><Name>Statement Type</Name><Description>Picklist Value</Description><Value>**</Value></upper_lvl_ver_desc></attributes>'),8,6);
 
END ADMIN_ORG_REFERENCE_LOAD;


PROCEDURE ADMIN_ORG_HIERARCHY_LOAD
/**********************************************************
ADMIN_ORG_HIERARCHY_LOAD

created : 07/15/2016 mxk766
**********************************************************/
IS

  V_START                      PLS_INTEGER := 0;
  V_END                        PLS_INTEGER := 0; 
  V_PROCESS_LVL                PLS_INTEGER := 0;
    
  V_PROCESS_CURR_LVL_VAL       VARCHAR2(100);
  V_HRCHY_DTL_CURR_ROW_VAL     VARCHAR2(100); 
  V_ADD_INPUT                  VARCHAR2(100); 
  
  TYPE HRCHY_DTL_REC IS RECORD(
  HRCHY_DTL_PREV_VAL           VARCHAR2(100),
  HRCHY_DTL_CURR_VAL           VARCHAR2(100),
  HRCHY_DTL_NEXT_VAL           VARCHAR2(100),
  HRCHY_DTL_CURR_ROW_VAL       VARCHAR2(100),
  HRCHY_DTL_UPPR_LVL_VER_VAL   XMLTYPE,
  HRCHY_DTL_DESC               VARCHAR2(100),
  HRCHY_DTL_EFF_DATE           DATE,
  GEMS_ID                      VARCHAR2(100),
  GEMS_NAME                    VARCHAR2(100),
  HDTL_PREV_REC_LVL_VAL        VARCHAR2(100),
  HDTL_PREV_REC_PREV_VAL       VARCHAR2(100),
  HDTL_PREV_REC_CURR_VAL       VARCHAR2(100),
  HDTL_PREV_REC_NEXT_VAL       VARCHAR2(100),
  HDTL_PREV_REC_CURR_ROW_VAL   VARCHAR2(100) 
  ); 
  
  V_HRCHY_DTL_REC HRCHY_DTL_REC;
  
  TYPE ADMINORG_HIER_EXT_DTL_TYP IS TABLE OF TEMP_ADMINORG_HIER_EXT_DETAIL%ROWTYPE INDEX BY VARCHAR2(1000);    
  ADMINORG_HIER_EXT_DTL_TBL ADMINORG_HIER_EXT_DTL_TYP;
  
  PROCEDURE BUILD_HIERARCHY(
                            IN_PROCESS_LVL                 IN NUMBER,
                            IN_HRCHY_DTL_CURR_LVL_VAL      IN VARCHAR2, 
                            OUT_DATA_REC                   OUT HRCHY_DTL_REC
                            ) 
  IS                         
      V_IS_COST_CENTER             VARCHAR2(1) :='N';
      V_HRCHY_DTL_UPPR_LVL_VER_VAL VARCHAR2(100);  
      V_HRCHY_DTL_DESC             VARCHAR2(100);  
      V_HRCHY_DTL_EFF_DATE         DATE;  
      
      V_HDTL_PREV_UPPR_LVL_VER_VAL VARCHAR2(100);  
      V_HDTL_PREV_DESC             VARCHAR2(100);  
      V_HDTL_PREV_EFF_DATE         DATE;  
      V_GEMS_ID                    VARCHAR2(100);
      V_GEMS_NAME                  VARCHAR2(100); 
  BEGIN  
    OUT_DATA_REC.HRCHY_DTL_PREV_VAL     := NVL(TRIM(SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,
                                                  0,
                                                  (IN_PROCESS_LVL - 1) * 4)),
                                      '~~~');
                                      
    /*
    Identifying whether the data that is sent is having cost center or not.
    If the data is like 1111222233334444 for level 4 then the length of the string
    is equal to the process level * 4. So it does not have cost center in it.
    But if we have data like 111122223333444444. Then for level 4 we are going to have
    length > 4*4. So we assume it has got cost center in it. 
    If we have cost center in the data then we are going to get extra 2 more bytes from the string.
    */
    
    IF LENGTH(IN_HRCHY_DTL_CURR_LVL_VAL) > IN_PROCESS_LVL*4 THEN 
        --This is the cost center data.
        V_IS_COST_CENTER := 'Y';  
    END IF;
                                      
    OUT_DATA_REC.HRCHY_DTL_CURR_VAL     := SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,
                                         0,
                                         (IN_PROCESS_LVL * 4)
                                         +
                                         CASE 
                                         WHEN V_IS_COST_CENTER= 'Y' THEN 
                                              2 
                                         ELSE 
                                              0 
                                         END
                                         );
    
    /**
    If the value is a cost center value then next level value will be defaulted to ~~~.
    */    
    IF V_IS_COST_CENTER ='Y' THEN 
        OUT_DATA_REC.HRCHY_DTL_NEXT_VAL     := '~~~';
    ELSE
        OUT_DATA_REC.HRCHY_DTL_NEXT_VAL     := NULL;
    END IF; 
     
    OUT_DATA_REC.HRCHY_DTL_CURR_ROW_VAL := SUBSTR(OUT_DATA_REC.HRCHY_DTL_CURR_VAL, 
                                         CASE 
                                         WHEN V_IS_COST_CENTER= 'Y'
                                         THEN 
                                             -6 
                                         ELSE 
                                             -4
                                         END
                                        );
    
    
    /*
    Get the previous records information related to prev rec previous val, curr val, nextval and curr row val.    
    */
    OUT_DATA_REC.HDTL_PREV_REC_PREV_VAL     := NVL(TRIM(SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,
                                                      0,
                                                      ((IN_PROCESS_LVL - 1) - 1) * 4)),
                                          '~~~');
    OUT_DATA_REC.HDTL_PREV_REC_CURR_VAL     := SUBSTR(IN_HRCHY_DTL_CURR_LVL_VAL,
                                             0,
                                             (IN_PROCESS_LVL - 1) * 4);
    OUT_DATA_REC.HDTL_PREV_REC_NEXT_VAL     := IN_HRCHY_DTL_CURR_LVL_VAL;
    OUT_DATA_REC.HDTL_PREV_REC_CURR_ROW_VAL := SUBSTR(OUT_DATA_REC.HDTL_PREV_REC_CURR_VAL, -4);
    OUT_DATA_REC.HDTL_PREV_REC_LVL_VAL      := (IN_PROCESS_LVL - 1);
    
    --Building Version val
    /*
    We are identifying the gemsid and gemsname basing upon the below logic.
    If the string has / then ignore that string and just populate the default value.
    If the string does not have "/" then we are going to remove the non-numeric data set and populate the gemsid.
    Then we remove the numberic to identify the gemsname.
    */
   

    BEGIN
      V_HRCHY_DTL_UPPR_LVL_VER_VAL := ADMINORG_HIER_EXT_DTL_TBL(IN_HRCHY_DTL_CURR_LVL_VAL).UPPER_LVL_VER_VALUE;
      V_HRCHY_DTL_DESC := ADMINORG_HIER_EXT_DTL_TBL(IN_HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_DESC;
      V_HRCHY_DTL_EFF_DATE:= ADMINORG_HIER_EXT_DTL_TBL(IN_HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_EFF_DATE;
    EXCEPTION
    WHEN OTHERS THEN
    SELECT XMLELEMENT("attributes",
                          XMLAGG(XMLELEMENT("upper_lvl_ver_desc",
                                            XMLFOREST('Statement Type' AS
                                                      "Name",
                                                      'Picklist Value' AS
                                                      "Description",
                                                      '**' AS "Value"))))
        INTO OUT_DATA_REC.HRCHY_DTL_UPPR_LVL_VER_VAL
        FROM DUAL;
    V_HRCHY_DTL_DESC :=NULL;
    V_HRCHY_DTL_EFF_DATE := NULL;
    END;
    
    OUT_DATA_REC.HRCHY_DTL_DESC     := V_HRCHY_DTL_DESC;
    OUT_DATA_REC.HRCHY_DTL_EFF_DATE := V_HRCHY_DTL_EFF_DATE; 
          
    IF INSTR(V_HRCHY_DTL_UPPR_LVL_VER_VAL, '/') > 0 THEN
        SELECT XMLELEMENT("attributes",
                          XMLAGG(XMLELEMENT("upper_lvl_ver_desc",
                                            XMLFOREST('Statement Type' AS
                                                      "Name",
                                                      'Picklist Value' AS
                                                      "Description",
                                                      '**' AS "Value"))))
        INTO OUT_DATA_REC.HRCHY_DTL_UPPR_LVL_VER_VAL
        FROM DUAL;
      ELSE           
          
          V_GEMS_ID := TRIM(TRANSLATE(V_HRCHY_DTL_UPPR_LVL_VER_VAL,
                            '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!`''\.-',
                            '0123456789')
                            );  
                            
          V_GEMS_NAME := TRIM(TRANSLATE(V_HRCHY_DTL_UPPR_LVL_VER_VAL,
                              'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.-0123456789',
                              'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.-')
                              );
           
          OUT_DATA_REC.GEMS_ID   := V_GEMS_ID;
          OUT_DATA_REC.GEMS_NAME := V_GEMS_NAME;
          
          SELECT XMLELEMENT("attributes",
                          XMLELEMENT("upper_lvl_ver_desc",
                                     XMLELEMENT("Name", 'GEMS_ID'),
                                     XMLELEMENT("Description",
                                                'Picklist Value'),
                                     XMLELEMENT("Value", V_GEMS_ID)),
                          XMLELEMENT("upper_lvl_ver_desc",
                                     XMLFOREST('ManagerName' AS "Name",
                                               'Picklist Value' AS
                                               "Description",
                                               V_GEMS_NAME AS "Value")))
          INTO OUT_DATA_REC.HRCHY_DTL_UPPR_LVL_VER_VAL
          FROM DUAL; 
      END IF; 
      
      V_IS_COST_CENTER :='N';
      
  END BUILD_HIERARCHY;

BEGIN 

    CCN_BATCH_PKG.LOCK_DATABASE_SP(); 
    
   /*
   Step 1
   Insert the data from the external table into a temporary table.
   */
   
   EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_ADMINORG_HIER_EXT_DETAIL';
  
   INSERT INTO TEMP_ADMINORG_HIER_EXT_DETAIL
   (
       HRCHY_HDR_NAME,
       HRCHY_DTL_LEVEL,
       HRCHY_DTL_PREV_LVL_VAL,
       HRCHY_DTL_CURR_LVL_VAL,
       HRCHY_DTL_NEXT_LVL_VAL,
       HRCHY_DTL_EFF_DATE,
       HRCHY_DTL_EXP_DATE,
       HRCHY_DTL_DESC,
       UPPER_LVL_VER_VALUE,
       IS_VALID_RECORD
   )
   SELECT 
       HRCHY_HDR_NAME,
       HRCHY_DTL_LEVEL,
       HRCHY_DTL_PREV_LVL_VAL,
       HRCHY_DTL_CURR_LVL_VAL,
       HRCHY_DTL_NEXT_LVL_VAL,
       HRCHY_DTL_EFF_DATE,
       HRCHY_DTL_EXP_DATE,
       HRCHY_DTL_DESC,
       UPPER_LVL_VER_VALUE,
       'VALID-RECORD'
   FROM    
   ADMINORG_HIERARCHY_EXT_DETAIL;    
   
   /*
   Step 2
   Check for data validity and update the flags accordingly.
   */
   
   UPDATE TEMP_ADMINORG_HIER_EXT_DETAIL T1
   SET IS_VALID_RECORD='DUPLICATE-RECORD'
   WHERE ROWID > (
                  SELECT MIN(ROWID) FROM TEMP_ADMINORG_HIER_EXT_DETAIL T2 
                  WHERE T1.HRCHY_DTL_CURR_LVL_VAL = T2.HRCHY_DTL_CURR_LVL_VAL 
                  AND   T1.HRCHY_DTL_LEVEL        = T2.HRCHY_DTL_LEVEL
                 ); 
                 
   UPDATE TEMP_ADMINORG_HIER_EXT_DETAIL T1
   SET IS_VALID_RECORD='CURR-LVL-REC-SIZE->-(LEVEL*4)+2'
   WHERE ROWID IN (
                  SELECT ROWID FROM TEMP_ADMINORG_HIER_EXT_DETAIL T2 
                  WHERE 
                  (LENGTH(HRCHY_DTL_CURR_LVL_VAL) > (HRCHY_DTL_LEVEL * 4)+2
                   OR 
                   LENGTH(HRCHY_DTL_CURR_LVL_VAL) < (HRCHY_DTL_LEVEL * 4))
                  );
                 
   /*
   Step 3 Build the data into a temporary hierarchy detail table(TEMP_ADMINORG_HIERARCHY)
   before loading into the HIERARCHY_DETAIL table
   */
  
   EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_ADMINORG_HIERARCHY'; 
   
   /*
   Populate the associate array with all the hierarchy data.
   This array is used to get the data for the matching CURR_LVL_VALS. 
   This array is used for performance improvements and we use this array instead 
   of the table and avoid context switch.
   */
   
   FOR REC IN (SELECT * FROM TEMP_ADMINORG_HIER_EXT_DETAIL WHERE IS_VALID_RECORD='VALID-RECORD') LOOP 
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_HDR_NAME := REC.HRCHY_HDR_NAME;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_LEVEL := REC.HRCHY_DTL_LEVEL;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_PREV_LVL_VAL := REC.HRCHY_DTL_PREV_LVL_VAL;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_CURR_LVL_VAL := REC.HRCHY_DTL_CURR_LVL_VAL;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_NEXT_LVL_VAL := REC.HRCHY_DTL_NEXT_LVL_VAL;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_EFF_DATE := REC.HRCHY_DTL_EFF_DATE;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_EXP_DATE := REC.HRCHY_DTL_EXP_DATE;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).HRCHY_DTL_DESC := REC.HRCHY_DTL_DESC;
     ADMINORG_HIER_EXT_DTL_TBL(REC.HRCHY_DTL_CURR_LVL_VAL).UPPER_LVL_VER_VALUE := REC.UPPER_LVL_VER_VALUE; 
   END LOOP; 
   
    /**
     We are going to loop through all the levels one level at a time.   
   **/
   
   FOR REC_UNIQUE_LEVEL IN 
   (
    SELECT  DISTINCT TO_NUMBER(HRCHY_DTL_LEVEL) AS HRCHY_DTL_LEVEL
    FROM    TEMP_ADMINORG_HIER_EXT_DETAIL 
    WHERE   1=1
    ORDER BY 1
   )LOOP 
   
       /*
       For each level get all the HRCHY_DTL_CURR_LEVEL data 
       */
         
       FOR REC_HRCH_DT_CURR_VAL IN
       (SELECT HRCHY_HDR_NAME,
               HRCHY_DTL_LEVEL,
               HRCHY_DTL_PREV_LVL_VAL,
               HRCHY_DTL_CURR_LVL_VAL,
               HRCHY_DTL_NEXT_LVL_VAL,
               HRCHY_DTL_EFF_DATE,
               HRCHY_DTL_EXP_DATE,
               HRCHY_DTL_DESC,
               UPPER_LVL_VER_VALUE
        FROM
               TEMP_ADMINORG_HIER_EXT_DETAIL
        WHERE  HRCHY_DTL_LEVEL  = REC_UNIQUE_LEVEL.HRCHY_DTL_LEVEL
        AND    IS_VALID_RECORD  = 'VALID-RECORD'
       )LOOP
       
          /*
          For each level in the Hierarchy ext detail record we loop through all the levels 
          present for that record.
          Suppose we get a level 5 then we are going to loop back 5 times and rebuilt the hierarchies 
          and check whether the hierarchy is there or not. If not then Insert else update.
          The reason behind this is to make sure that if only the hierarchy at a certain level is given
          then we can rebuilt the whole hierarchy starting from level 1.
          Ex:
          Level 3: 111122223333. 
          Here we are going to loop 3 times and check whether we have 
          1111 at level 1
          11112222 at level 2 (Inturn looped 2 times for 1111 and 11112222)
          111122223333 at level 3 (Inturn looped 3 times for 1111, 11112222 and 111122223333)
          
          In this way if we get data like
          1111 
          1111222233334444555566667777888888
          
          we still going to build the hierarchy for all the missing levels and we will have data like
          
          PREVLEVEL                            CURRENTLEVEL                        NEXTLEVEL
          ~~~                                  1111                                11112222
          1111                                 11112222                            111122223333  
          111122223333                         111122223333444                     11112222333344445555
          1111222233334444                     11112222333344445555                111122223333444455556666
          11112222333344445555                 111122223333444455556666            1111222233334444555566667777
          111122223333444455556666             1111222233334444555566667777        1111222233334444555566667777888888
          1111222233334444555566667777         1111222233334444555566667777888888  ~~~ 
          */
          
          FOR REC_LEVELS IN 
           (
               SELECT LEVEL AS LVL FROM DUAL
               CONNECT BY LEVEL <= REC_UNIQUE_LEVEL.HRCHY_DTL_LEVEL
               ORDER BY LEVEL
           )LOOP
                
                /*
                The cost center comes at the last 6 bytes. If the cost center is not at the last 6 then 
                each level is delimited with 4 bytes.
                So suppose we have a level 4 (data will be like 1111222233334444)
                Here we have 16 bytes and and we are going to split the data with 4 bytes.
                Suppose if we have data as 111122223333444444 then we are going to split the first 3 with 
                4 bytes and the last 6 with 6 bytes. The last 6 will be considered as the cost center.
                */
                                
                V_PROCESS_LVL          := REC_LEVELS.LVL;
                V_START                := 1;
                V_END                  := 4 * V_PROCESS_LVL;
                V_PROCESS_CURR_LVL_VAL := SUBSTR(REC_HRCH_DT_CURR_VAL.HRCHY_DTL_CURR_LVL_VAL,
                                                  V_START,
                                                  V_END);
                V_ADD_INPUT := SUBSTR(REC_HRCH_DT_CURR_VAL.HRCHY_DTL_CURR_LVL_VAL,V_END+1);
                
                IF LENGTH(V_ADD_INPUT) =2 THEN
                    V_PROCESS_CURR_LVL_VAL := V_PROCESS_CURR_LVL_VAL||V_ADD_INPUT;
                END IF;

                /*
                call the procedure build_hierarchy to get the previous  values for the current record 
                that is passed.
                */
                
                BUILD_HIERARCHY(IN_PROCESS_LVL                 => V_PROCESS_LVL,
                                IN_HRCHY_DTL_CURR_LVL_VAL      => V_PROCESS_CURR_LVL_VAL, 
                                OUT_DATA_REC                   => V_HRCHY_DTL_REC  
                                ); 
                                
                /*
                Insert into the table for the hierarchy data.
                We are going to insert if the level, prev, curr and next value is not there.
                */
                 
                MERGE INTO TEMP_ADMINORG_HIERARCHY T1
                USING (SELECT * FROM DUAL) T2
                ON (
                    HRCHY_DTL_LEVEL                    = V_PROCESS_LVL 
                AND HRCHY_DTL_PREV_LVL_VAL             = V_HRCHY_DTL_REC.HRCHY_DTL_PREV_VAL
                AND HRCHY_DTL_CURR_LVL_VAL             = V_HRCHY_DTL_REC.HRCHY_DTL_CURR_VAL 
                AND NVL(HRCHY_DTL_NEXT_LVL_VAL, 'XXX') = NVL(V_HRCHY_DTL_REC.HRCHY_DTL_NEXT_VAL, 'XXX')
                   )
                WHEN NOT MATCHED THEN
                INSERT
                    (
                    HRCHY_HDR_NAME,
                    HRCHY_DTL_LEVEL,
                    HRCHY_DTL_PREV_LVL_VAL,
                    HRCHY_DTL_CURR_LVL_VAL,
                    HRCHY_DTL_NEXT_LVL_VAL,
                    HRCHY_DTL_CURR_ROW_VAL,
                    HRCHY_DTL_EFF_DATE,
                    HRCHY_DTL_EXP_DATE,
                    HRCHY_DTL_DESC,
                    UPPER_LVL_VER_VALUE,
                    GEMS_ID,
                    GEMS_NAME 
                    )
                VALUES
                    (
                    REC_HRCH_DT_CURR_VAL.HRCHY_HDR_NAME,
                    V_PROCESS_LVL,
                    V_HRCHY_DTL_REC.HRCHY_DTL_PREV_VAL,
                    V_HRCHY_DTL_REC.HRCHY_DTL_CURR_VAL,
                    V_HRCHY_DTL_REC.HRCHY_DTL_NEXT_VAL,
                    V_HRCHY_DTL_REC.HRCHY_DTL_CURR_ROW_VAL,
                    NVL(V_HRCHY_DTL_REC.HRCHY_DTL_EFF_DATE, SYSDATE),
                    REC_HRCH_DT_CURR_VAL.HRCHY_DTL_EXP_DATE,
                    V_HRCHY_DTL_REC.HRCHY_DTL_DESC,
                    V_HRCHY_DTL_REC.HRCHY_DTL_UPPR_LVL_VER_VAL,
                    V_HRCHY_DTL_REC.GEMS_ID,
                    V_HRCHY_DTL_REC.GEMS_NAME 
                    );
                 
                 /*
                 Do an update for the previous records Next value.
                 */
                 
                UPDATE TEMP_ADMINORG_HIERARCHY
                SET 
                      HRCHY_DTL_NEXT_LVL_VAL = V_HRCHY_DTL_REC.HDTL_PREV_REC_NEXT_VAL,
                      HRCHY_DTL_CURR_ROW_VAL = V_HRCHY_DTL_REC.HDTL_PREV_REC_CURR_ROW_VAL
                WHERE HRCHY_DTL_LEVEL = V_HRCHY_DTL_REC.HDTL_PREV_REC_LVL_VAL
                AND   HRCHY_DTL_PREV_LVL_VAL = V_HRCHY_DTL_REC.HDTL_PREV_REC_PREV_VAL
                AND   HRCHY_DTL_CURR_LVL_VAL = V_HRCHY_DTL_REC.HDTL_PREV_REC_CURR_VAL
                AND   NVL(HRCHY_DTL_NEXT_LVL_VAL, V_HRCHY_DTL_REC.HDTL_PREV_REC_NEXT_VAL) =
                           V_HRCHY_DTL_REC.HDTL_PREV_REC_NEXT_VAL; 
      
      END LOOP; 
    
    END LOOP;  
              
  END LOOP;
  
   /*
    Delete the duplicate data from the Adminorg hierarchy table basing upon the hrchy dtl level,
    hrchy dtl prev lvl val, next lvl val and curr level val.
    */
    
    DELETE FROM TEMP_ADMINORG_HIERARCHY T1 
    WHERE ROWID >(SELECT MIN(ROWID) FROM TEMP_ADMINORG_HIERARCHY T2 
                  WHERE 
                  T1.HRCHY_DTL_LEVEL = T2.HRCHY_DTL_LEVEL AND 
                  T1.HRCHY_DTL_PREV_LVL_VAL = T2.HRCHY_DTL_PREV_LVL_VAL AND 
                  T1.HRCHY_DTL_CURR_LVL_VAL = T2.HRCHY_DTL_CURR_LVL_VAL AND 
                  NVL(T1.HRCHY_DTL_NEXT_LVL_VAL,'XXX') = NVL(T2.HRCHY_DTL_NEXT_LVL_VAL,'XXX')
                 );
  
  /*
  Load the reference data before loading the hieararchy detail table.
  */
  
  HIERARCHY_LOADING_PKG.ALTER_HIER_TRIGGERS ( 'DISABLE' );
    
  ADMIN_ORG_REFERENCE_LOAD;
  
  /*
  Disable the hierarchy detail triggers before loading or deleting data from HIERARCHY DETAIL table.
  */  

  INSERT INTO HIERARCHY_DETAIL 
  (  
   HRCHY_HDR_NAME,
   HRCHY_DTL_LEVEL,
   HRCHY_DTL_PREV_LVL_VAL,
   HRCHY_DTL_CURR_LVL_VAL,
   HRCHY_DTL_NEXT_LVL_VAL,
   HRCHY_DTL_EFF_DATE,
   HRCHY_DTL_EXP_DATE,
   HRCHY_DTL_DESC,
   HRCHY_DTL_CURR_ROW_VAL,
   UPPER_LVL_VER_VALUE
  )
  SELECT  
   HRCHY_HDR_NAME,
   HRCHY_DTL_LEVEL,
   HRCHY_DTL_PREV_LVL_VAL,
   HRCHY_DTL_CURR_LVL_VAL,
   HRCHY_DTL_NEXT_LVL_VAL,
   HRCHY_DTL_EFF_DATE,
   HRCHY_DTL_EXP_DATE,
   HRCHY_DTL_DESC,
   HRCHY_DTL_CURR_ROW_VAL,
   UPPER_LVL_VER_VALUE
  FROM 
  TEMP_ADMINORG_HIERARCHY;
  
  COMMIT;
  
  /*
  Re-enable the trigger.
  */
  
  CCN_BATCH_PKG.UNLOCK_DATABASE_SP();
  HIERARCHY_LOADING_PKG.ALTER_HIER_TRIGGERS ( 'ENABLE' );
  
EXCEPTION
WHEN OTHERS THEN
    ROLLBACK;
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP();
    HIERARCHY_LOADING_PKG.ALTER_HIER_TRIGGERS ( 'ENABLE' );
    RAISE_APPLICATION_ERROR(-20001, SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE); 
END ADMIN_ORG_HIERARCHY_LOAD; 

END ADMIN_ORG_HIERARCHY_LOAD_PKG;
/

SHOW ERRORS;
