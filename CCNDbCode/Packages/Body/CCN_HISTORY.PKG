create or replace PACKAGE BODY CCN_HISTORY
    AS

/*********************************************************** 
This package is will return data HISTORY detail

created :  04/17/2014 nxk 
**************************************************/

PROCEDURE RETURN_HIERARCHY_HIST(
 /**********************************************************
 	RETURN_HIERARCHY_HIST

 	This procedure will return a ref cursor with data from 
 	from the hierarchy_detail_hst table based on header name, current value , traverse ( UP or DOWN DEFAULT is UP), level
 	and structure as of history date 

set serveroutput on;
declare
out_var ccn_history.REF_CURSOR;
begin
CCN_HISTORY.RETURN_HIERARCHY_HIST('GLOBAL_HIERARCHY','779010','9','UP','01-JAN-2006',out_var);
end;

 created : 08/01/2014 CCN Project....
 modified: 01/28/2015 nxk927 Showing current hierarchy in history screen as well
         : 04/17/2018 nxk927 Removed the down query as we are never using it and it will always
           return last level only.
           Removed the union and order by clause and created two separate cursors one for current and another for history
           We can not use order by clause in union and as the data we were inserting in the TEMP_RETURN_HIERARCHY_HST was not in correct order.
           We split these in two cursors to not rely on the sql developer order clause as we can't predict how this will return the data in each session.
 **********************************************************/
     IN_HEADER_NAME         IN      HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE
     ,IN_CURR_ROW_VAL       IN      HIERARCHY_DETAIL.HRCHY_DTL_CURR_ROW_VAL%TYPE
     ,IN_LEVEL              IN      HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE
     ,IN_TRAVERSE           IN      VARCHAR2 DEFAULT 'UP'
     ,IN_HIST_DATE          IN      HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE DEFAULT NULL
     ,OUT_HIERARCHY_REF_CUR    OUT  REF_CURSOR)
IS
/*
--For Testing purpose only
TYPE HIERARCHY_DETAIL_HST_REC_TYPE IS RECORD (
         LEV                      VARCHAR2(100),
         HRCHY_HDR_NAME           VARCHAR2(100),
         HRCHY_DTL_LEVEL          VARCHAR2(2), 
         HRCHY_DTL_PREV_LVL_VAL   VARCHAR2(1000),
         HRCHY_DTL_CURR_LVL_VAL   VARCHAR2(1000),
         HRCHY_DTL_NEXT_LVL_VAL   VARCHAR2(1000),
         HRCHY_DTL_EFF_DATE       DATE,
         HRCHY_DTL_EXP_DATE       DATE,
         HRCHY_DTL_DESC           VARCHAR2(100),
         HRCHY_DTL_CURR_ROW_VAL   VARCHAR2(100),
         UPPER_LVL_VER_VALUE      VARCHAR2(32000));
HIERARCHY_DETAIL_HST_REC HIERARCHY_DETAIL_HST_REC_TYPE;
*/
     CURSOR hist_cursor(in_date IN DATE) IS
        SELECT  AR.LEV AS LEV,
                AR.HRCHY_HDR_NAME,
                AR.HRCHY_DTL_LEVEL,
                AR.HRCHY_DTL_PREV_LVL_VAL,
                AR.HRCHY_DTL_CURR_LVL_VAL,
                AR.HRCHY_DTL_NEXT_LVL_VAL,
                AR.HRCHY_DTL_EFF_DATE,
                AR.HRCHY_DTL_EXP_DATE,
                AR.HRCHY_DTL_DESC,
                AR.HRCHY_DTL_CURR_ROW_VAL,
                AR.UPPER_LVL_VER_VALUE
          FROM (SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
                       (HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
                       (HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
                       hr.HRCHY_HDR_NAME,
                       hr.HRCHY_DTL_LEVEL,
                       hr.HRCHY_DTL_PREV_LVL_VAL,
                       hr.HRCHY_DTL_CURR_LVL_VAL,
                       hr.HRCHY_DTL_NEXT_LVL_VAL,
                       hr.HRCHY_DTL_EFF_DATE,
                       hr.HRCHY_DTL_EXP_DATE,
                       hr.HRCHY_DTL_DESC,
                       hr.HRCHY_DTL_CURR_ROW_VAL,
                       xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                  FROM HIERARCHY_DETAIL_HST hr
                 WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
                   AND ((HRCHY_DTL_EFF_DATE = NVL(in_date, HRCHY_DTL_EFF_DATE) 
                   AND HRCHY_DTL_LEVEL = IN_LEVEL)
                      OR (HRCHY_DTL_LEVEL <> IN_LEVEL))
                   AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL) AR
                 START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
               CONNECT BY PRIOR AR.PA =  AR.CH;

     CURSOR curr_cursor(in_date IN DATE) IS
         SELECT 'A'|| AR.LEV AS LEV,
                 AR.HRCHY_HDR_NAME,
                 AR.HRCHY_DTL_LEVEL,
                 AR.HRCHY_DTL_PREV_LVL_VAL,
                 AR.HRCHY_DTL_CURR_LVL_VAL,
                 AR.HRCHY_DTL_NEXT_LVL_VAL,
                 AR.HRCHY_DTL_EFF_DATE,
                 AR.HRCHY_DTL_EXP_DATE,
                 AR.HRCHY_DTL_DESC,
                 AR.HRCHY_DTL_CURR_ROW_VAL,
                 AR.UPPER_LVL_VER_VALUE
            FROM (SELECT DISTINCT (HRCHY_DTL_LEVEL || hr.HRCHY_DTL_CURR_ROW_VAL ) lev,
                         (HRCHY_DTL_CURR_LVL_VAL || HRCHY_DTL_NEXT_LVL_VAL) Ch,
                         (HRCHY_DTL_PREV_LVL_VAL || HRCHY_DTL_CURR_LVL_VAL) pa,
                         hr.HRCHY_HDR_NAME,
                         hr.HRCHY_DTL_LEVEL,
                         hr.HRCHY_DTL_PREV_LVL_VAL,
                         hr.HRCHY_DTL_CURR_LVL_VAL,
                         hr.HRCHY_DTL_NEXT_LVL_VAL,
                         hr.HRCHY_DTL_EFF_DATE,
                         hr.HRCHY_DTL_EXP_DATE,
                         hr.HRCHY_DTL_DESC,
                         hr.HRCHY_DTL_CURR_ROW_VAL,
                         xmltype.getStringVal(hr.UPPER_LVL_VER_VALUE) UPPER_LVL_VER_VALUE
                    FROM HIERARCHY_DETAIL hr
                   WHERE HRCHY_HDR_NAME = IN_HEADER_NAME
                     AND ((HRCHY_DTL_EFF_DATE = NVL(in_date, HRCHY_DTL_EFF_DATE) 
                     AND HRCHY_DTL_LEVEL = IN_LEVEL)
                      OR (HRCHY_DTL_LEVEL <> IN_LEVEL))
                     AND HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL) AR
                   START WITH AR.lev = IN_LEVEL || IN_CURR_ROW_VAL
                 CONNECT BY PRIOR AR.PA =  AR.CH;

     SQ         INTEGER;
     SE         VARCHAR2(100);
     V_CONTEXT  VARCHAR2(100);
     V_INDEX    NUMBER := 0;

 BEGIN

    IF CCN_RESTRICTION_PKG.IS_OBJECT_RESTRICTED('TEMP_RETURN_HIERARCHY_HST') THEN
        errpkg.raise_err(errnums.en_terminal_window_locked_err,
                         ' RETURN_HIERARCHY_HIST ', 
                         'TEMP_RETURN_HIERARCHY_HST table has been locked. Please try processing again after some time');
    ELSE
        CCN_RESTRICTION_PKG.RESTRICT_OBJECT('TEMP_RETURN_HIERARCHY_HST');
    END IF;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_RETURN_HIERARCHY_HST';
    FOR rec IN (SELECT HRCHY_DTL_EFF_DATE
                  FROM HIERARCHY_DETAIL_HST
                 WHERE HRCHY_HDR_NAME         =  IN_HEADER_NAME 
                   AND HRCHY_DTL_EFF_DATE     <= IN_HIST_DATE
                   AND HRCHY_DTL_LEVEL        = IN_LEVEL
                   AND HRCHY_DTL_CURR_ROW_VAL = IN_CURR_ROW_VAL
                 UNION
                SELECT HRCHY_DTL_EFF_DATE
                  FROM HIERARCHY_DETAIL
                 WHERE HRCHY_HDR_NAME         =  IN_HEADER_NAME 
                   AND HRCHY_DTL_EFF_DATE     <= IN_HIST_DATE
                   AND HRCHY_DTL_LEVEL        = IN_LEVEL
                   AND HRCHY_DTL_CURR_ROW_VAL = IN_CURR_ROW_VAL) LOOP
        FOR rec1 in hist_cursor(rec.HRCHY_DTL_EFF_DATE) LOOP
            V_INDEX := V_INDEX + 1;
            INSERT INTO TEMP_RETURN_HIERARCHY_HST VALUES(
                   V_INDEX,
                   rec1.LEV,
                   rec1.HRCHY_HDR_NAME,
                   rec1.HRCHY_DTL_LEVEL,
                   rec1.HRCHY_DTL_PREV_LVL_VAL,
                   rec1.HRCHY_DTL_CURR_LVL_VAL,
                   rec1.HRCHY_DTL_NEXT_LVL_VAL,
                   rec1.HRCHY_DTL_EFF_DATE,
                   rec1.HRCHY_DTL_EXP_DATE,
                   rec1.HRCHY_DTL_DESC,
                   rec1.HRCHY_DTL_CURR_ROW_VAL,
                   rec1.UPPER_LVL_VER_VALUE);
        END LOOP;
        FOR rec1 in curr_cursor(rec.HRCHY_DTL_EFF_DATE) LOOP
            V_INDEX := V_INDEX + 1;
            INSERT INTO TEMP_RETURN_HIERARCHY_HST VALUES(
                   V_INDEX,
                   rec1.LEV,
                   rec1.HRCHY_HDR_NAME,
                   rec1.HRCHY_DTL_LEVEL,
                   rec1.HRCHY_DTL_PREV_LVL_VAL,
                   rec1.HRCHY_DTL_CURR_LVL_VAL,
                   rec1.HRCHY_DTL_NEXT_LVL_VAL,
                   rec1.HRCHY_DTL_EFF_DATE,
                   rec1.HRCHY_DTL_EXP_DATE,
                   rec1.HRCHY_DTL_DESC,
                   rec1.HRCHY_DTL_CURR_ROW_VAL,
                   rec1.UPPER_LVL_VER_VALUE);
        END LOOP;
    END LOOP;
    COMMIT;

    OPEN OUT_HIERARCHY_REF_CUR FOR 
       SELECT LEV,
              HRCHY_HDR_NAME,
              HRCHY_DTL_LEVEL,
              HRCHY_DTL_PREV_LVL_VAL,
              HRCHY_DTL_CURR_LVL_VAL,
              HRCHY_DTL_NEXT_LVL_VAL,
              HRCHY_DTL_EFF_DATE,
              HRCHY_DTL_EXP_DATE,
              HRCHY_DTL_DESC,
              HRCHY_DTL_CURR_ROW_VAL,
              dbms_lob.substr(UPPER_LVL_VER_VALUE,32000,1)
         FROM TEMP_RETURN_HIERARCHY_HST
        ORDER BY ID DESC;

EXCEPTION WHEN OTHERS THEN
     SQ := SQLCODE;
     SE := SQLERRM;
     V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
     ERRPKG.RAISE_ERR(-20004,'RETURN_HIERARCHY_HIST',V_CONTEXT);
END RETURN_HIERARCHY_HIST;

 PROCEDURE RELEASE_LOCK_FOR_HRCHY_HST
  /**********************************************************
	RELEASE_LOCK_FOR_HRCHY_HST

	This procedure will release the lock on the history table

 created : 08/01/2014 CCN Project....
 modified:
**********************************************************/
 IS
 BEGIN
     CCN_RESTRICTION_PKG.RELEASE_OBJECT('TEMP_RETURN_HIERARCHY_HST');
     EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_RETURN_HIERARCHY_HST';
 END RELEASE_LOCK_FOR_HRCHY_HST;

PROCEDURE RETURN_STATUS_HIST (
/**********************************************************
	RETURN_STATUS_HIST

	This procedure will return a ref cursor with data from 
	from the STATUS table based on COST_CENTER_CODE, EXPIRATION_DATE

created : 04/17/2014 nxk 
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
**********************************************************/
IN_COST_CENTER_CODE IN STATUS.COST_CENTER_CODE%TYPE,
IN_HIST_DATE IN STATUS.EFFECTIVE_DATE%TYPE,
OUT_STATUS_REF_CUR OUT REF_CURSOR)
IS
    SQ INTEGER;
    SE VARCHAR2(100);
		V_CONTEXT VARCHAR2(100);       
BEGIN

	OPEN OUT_STATUS_REF_CUR FOR
        SELECT * 
          FROM STATUS 
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
           AND EFFECTIVE_DATE <= IN_HIST_DATE
         ORDER BY EFFECTIVE_DATE DESC;


EXCEPTION
    WHEN OTHERS THEN
        SQ := SQLCODE;
        SE := SQLERRM;
        V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 

        ERRPKG.RAISE_ERR(-20523,'RETURN_STATUS_HIST',V_CONTEXT); 
END RETURN_STATUS_HIST;

PROCEDURE RETURN_TYPE_HIST (
/**********************************************************
	RETURN_TYPE_HIST

	This procedure will return a ref cursor with data from 
	from the TYPE table based on COST_CENTER_CODE, EXPIRATION_DATE

created : 04/17/2014 nxk 
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
**********************************************************/
IN_COST_CENTER_CODE IN TYPE.COST_CENTER_CODE%TYPE,
IN_HIST_DATE IN TYPE.EFFECTIVE_DATE%TYPE,
OUT_TYPE_REF_CUR OUT REF_CURSOR)
IS                 
    SQ INTEGER;
    SE VARCHAR2(100);
		V_CONTEXT VARCHAR2(100);
BEGIN

	OPEN OUT_TYPE_REF_CUR FOR
        SELECT * 
          FROM TYPE 
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE) 
           AND EFFECTIVE_DATE <= IN_HIST_DATE
         ORDER BY EFFECTIVE_DATE DESC;


EXCEPTION
    WHEN OTHERS THEN
        SQ := SQLCODE;
        SE := SQLERRM;
        V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 

        ERRPKG.RAISE_ERR(-20523,'RETURN_TYPE_HIST',V_CONTEXT); 
END RETURN_TYPE_HIST;

PROCEDURE RETURN_POLLING_HIST (
/**********************************************************
	RETURN_POLLING_HIST

	This procedure will return a ref cursor with data from 
	from the POLLING table based on COST_CENTER_CODE, changed date

created : 04/17/2014 nxk 
modified: 02/02/2015 axk326 CCN Project Team...
          Added Upper() function while selecting from any table 
          based on COST_CENTER_CODE
          01/18/2018 bxa919 added the union condition to populate 
          the polling data from polling table.
        : 03/06/2018 nxk927 CCN Project....
          added two new columns POLLING_START_DATE and POLLING_STOP_DATE
modified: 03/15/2018 bxa919 CCN Project Team...
          Order by is now based on changed_date and effective_date
        : 06/12/2018 pxa852 CCN Project Team....
          EFFECTIVE_DATE column name changed to POLLING_EFFECTIVE_DATE and
          EXPIRATION_DATE column name changed to POLLING_EXPIRATION_DATE
**********************************************************/
IN_COST_CENTER_CODE IN POLLING.COST_CENTER_CODE%TYPE,
IN_HIST_DATE IN POLLING_HST.CHANGED_DATE%TYPE, 
OUT_POLLING_REF_CUR OUT REF_CURSOR)
IS                 
    SQ INTEGER;
    SE VARCHAR2(100);
    V_CONTEXT VARCHAR2(100);
BEGIN

	OPEN OUT_POLLING_REF_CUR FOR
	        SELECT POLLING_STATUS_CODE,
	               MULTICAST_IND,
	               TIME_ZONE,
	               POLLING_IND,
	               NEXT_DOWNLOAD_BLOCK_COUNT,
	               CURRENT_FLAG,
	               CHANGED_DATE,
	               POLLING_EFFECTIVE_DATE,
	               POLLING_EXPIRATION_DATE,
                   POLLING_START_DATE,
                   POLLING_STOP_DATE
	          FROM POLLING_HST 
	         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
	         AND TRUNC(CHANGED_DATE) <= IN_HIST_DATE
	        UNION
	        /* added union condition to populate the polling data from polling table */
	        SELECT POLLING_STATUS_CODE,
	               MULTICAST_IND,
	               TIME_ZONE,
	               POLLING_IND,
	               NEXT_DOWNLOAD_BLOCK_COUNT,
	               CURRENT_FLAG,
	               DECODE(CURRENT_FLAG, 'N', POLLING_EXPIRATION_DATE, NULL) AS CHANGED_DATE,
	               POLLING_EFFECTIVE_DATE,
	               POLLING_EXPIRATION_DATE,
                   POLLING_START_DATE,
                   POLLING_STOP_DATE
	          FROM POLLING
	         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY CHANGED_DATE, POLLING_EFFECTIVE_DATE;

EXCEPTION
    WHEN OTHERS THEN
        SQ := SQLCODE;
        SE := SQLERRM;
        V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 

        ERRPKG.RAISE_ERR(-20523,'RETURN_POLLING_HIST',V_CONTEXT);    
END RETURN_POLLING_HIST;

PROCEDURE RETURN_BANK_CARD_HIST (
/**********************************************************
This procedure will return a ref cursor with data  
from BANK_CARD table based on COST_CENTER_CODE

created : 02/28/2018 bxa919 CCN Project Team...
**********************************************************/
    IN_COST_CENTER_CODE    IN     BANK_CARD.COST_CENTER_CODE%TYPE,
    OUT_BANK_CARD_REF_CUR     OUT REF_CURSOR)
IS
BEGIN
    OPEN OUT_BANK_CARD_REF_CUR FOR
        SELECT *
          FROM BANK_CARD
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY EFFECTIVE_DATE DESC;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(ERRNUMS.EN_INVALID_HIST_REC,'RETURN_BANK_CARD_HIST',SQLERRM);
END RETURN_BANK_CARD_HIST;

PROCEDURE RETURN_ADDRESS_HIST (
/**********************************************************
This procedure will return a ref cursor with data  
from ADDRESS details from different countries based on 
COST_CENTER_CODE, EXPIRATION_DATE

created : 02/28/2018 bxa919 CCN Project Team...
**********************************************************/
    IN_COST_CENTER_CODE       IN      ADDRESS_USA.COST_CENTER_CODE%TYPE,
    OUT_ADDRESS_USA_REF_CUR      OUT  REF_CURSOR,
    OUT_ADDRESS_CAN_REF_CUR      OUT  REF_CURSOR,
    OUT_ADDRESS_MEX_REF_CUR      OUT  REF_CURSOR,
    OUT_ADDRESS_BRB_REF_CUR      OUT  REF_CURSOR,
    OUT_ADDRESS_OTHER_REF_CUR    OUT  REF_CURSOR)
IS
BEGIN
    OPEN OUT_ADDRESS_USA_REF_CUR FOR 
        SELECT *
          FROM ADDRESS_USA
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY EFFECTIVE_DATE DESC;

    OPEN OUT_ADDRESS_CAN_REF_CUR FOR 
        SELECT *
          FROM ADDRESS_CAN
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY EFFECTIVE_DATE DESC;

    OPEN OUT_ADDRESS_MEX_REF_CUR FOR 
        SELECT *
          FROM ADDRESS_MEX
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY EFFECTIVE_DATE DESC;

    OPEN OUT_ADDRESS_BRB_REF_CUR FOR 
        SELECT *
          FROM ADDRESS_BRB
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY EFFECTIVE_DATE DESC;

    OPEN OUT_ADDRESS_OTHER_REF_CUR FOR
        SELECT *
          FROM ADDRESS_OTHER
         WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
         ORDER BY EFFECTIVE_DATE DESC;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(ERRNUMS.EN_INVALID_HIST_REC,'RETURN_ADDRESS_HIST',SQLERRM);
END RETURN_ADDRESS_HIST;

PROCEDURE HIERARCHY_HDR_PICKLIST(
/**********************************************************
This procedure will provide the hierarchies a user can see in
history window drop down

created : 05/02/2018 sxg151 CCN Project....
modified:
**********************************************************/
    IN_USER_ID            IN     VARCHAR2,
    OUT_HIERARCHY_REF_CUR    OUT REF_CURSOR)
IS
BEGIN
    OPEN OUT_HIERARCHY_REF_CUR FOR
        SELECT DISTINCT HRCHY_HDR_NAME
          FROM HIERARCHY_DESCRIPTION HD
         WHERE EXISTS (SELECT x.*
                         FROM ROLE_DETAILS RD,
                              SECURITY_MATRIX SM,
                              XMLTABLE ('/USER_RULES_DESCRIPTION/HIERARCHY_WINDOW/HIERARCHY_NAME/*'
                                        PASSING RD.USER_RULES_DESCRIPTION
                                        COLUMNS Value VARCHAR2(30) PATH 'text()') x
                        WHERE SM.USER_ID   = IN_USER_ID
                          AND SM.ROLE_CODE = RD.ROLE_CODE
                          AND x.value      = HD.HRCHY_HDR_NAME)
         UNION
        --Below query will make sure pricing district user can see global hierarchy history as well
        SELECT 'GLOBAL_HIERARCHY'
          FROM SECURITY_MATRIX
         WHERE USER_ID   = IN_USER_ID
           AND ROLE_CODE IN ('HWU2');
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(-20004,'HIERARCHY_HDR_DESC_PICKLIST', SQLCODE || ' ' || SQLERRM);
END HIERARCHY_HDR_PICKLIST;

END CCN_HISTORY;