CREATE OR REPLACE PACKAGE BODY CCN_BATCH_PROCESS AS
/*********************************************************** 
This package body will have procedures and functions related 
to the batch process

Created  : 04/04/2016 nxk927 CCN project
Modified : 05/25/2017 rxa457 CCN PROJECT TEAM..
Modified : 06/02/2017 sxp130 ASP-795 CCN project 
************************************************************/
  
PROCEDURE NEWLY_CRTD_COST_CENTER
/**********************************************************
	This procedure is intended to generate a file with the list of new cost centers
  created on previous day

Created : 04/04/2016 nxk927 CCN project
**********************************************************/
IS
 	V_CLOB        CLOB;

BEGIN
   FOR REC IN (SELECT *
                 FROM COST_CENTER 
                WHERE OPEN_DATE = TRUNC(SYSDATE) -1
                  AND OPEN_DATE <> '01-JAN-2099') LOOP
       V_CLOB := REC.COST_CENTER_CODE 
                 || ',' || REC.COST_CENTER_NAME 
                 || ',' || REC.OPEN_DATE
                 || CHR(10)
                 || V_CLOB;
                 
   END LOOP;
   	
   IF V_CLOB <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('NEWLY_CRTD_COST_CENTER', NULL, NULL,V_CLOB);
   END IF;

END NEWLY_CRTD_COST_CENTER;

FUNCTION GET_HIERARCHY_DETAIL_STRING(
/**********************************************************
	This procedure is intended to generate a file with the list of new selling stores
  created on that day

1 - consider only open/valid store cost centers under USA/CAN/PRI countries
2 - cost center should be a complete cost center => should be part of global, facts and legacy hierarchies
3 - selling store flag should have been set to "Y" on that day

Created : 09/27/2016 jxc517 CCN project Team....
Changed :
**********************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2)
RETURN VARCHAR2
IS
    V_GLBL_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_LGCY_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_FCTS_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_RETURN_VALUE                VARCHAR2(32000);
BEGIN
    FOR hd_rec IN (SELECT *
                     FROM HIERARCHY_DETAIL_VIEW
                    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                      AND HRCHY_HDR_NAME IN ('GLOBAL_HIERARCHY', 'FACTS_DIVISION', 'LEGACY_GL_DIVISION')) LOOP
        IF hd_rec.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' THEN
            V_GLBL_HD_VIEW_REC := hd_rec;
        ELSIF hd_rec.HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION' THEN
            V_LGCY_HD_VIEW_REC := hd_rec;
        ELSIF hd_rec.HRCHY_HDR_NAME = 'FACTS_DIVISION' THEN
            V_FCTS_HD_VIEW_REC := hd_rec;
        END IF;
    END LOOP;

    V_RETURN_VALUE := '"' || V_LGCY_HD_VIEW_REC.DIVISION || ' ~ ' || V_LGCY_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_FCTS_HD_VIEW_REC.DIVISION || ' ~ ' || V_FCTS_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DOMAIN || ' ~ ' || V_GLBL_HD_VIEW_REC.DOMAIN_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC."GROUP" || ' ~ ' || V_GLBL_HD_VIEW_REC.GROUP_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DIVISION || ' ~ ' || V_GLBL_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.AREA || ' ~ ' || V_GLBL_HD_VIEW_REC.AREA_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DISTRICT || ' ~ ' || V_GLBL_HD_VIEW_REC.DISTRICT_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.CITY_SALES_MANAGER || ' ~ ' || V_GLBL_HD_VIEW_REC.CITY_SALES_MANAGER_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.ZONE || ' ~ ' || V_GLBL_HD_VIEW_REC.ZONE_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.SPECIAL_ROLES || ' ~ ' || V_GLBL_HD_VIEW_REC.SPECIAL_ROLES_NAME;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END GET_HIERARCHY_DETAIL_STRING;

PROCEDURE GENERATE_USA_SELLING_STR_FILE(
/**********************************************************
This process takes care of generating USA/PRI selling store file

Database type ADDRESS_USA_OT is used to create header and details.
1 - The CONSTRUCTOR FUNCTION address_usa_ot is used to initialize member variables.
2 - The MEMBER FUNCTION print_header_delimited is used to create a Header for the DELIMITER passed
3 - The MEMBER FUNCTION print_values_delimited prints the values with the DELIMITER passed

Created : 09/27/2016 jxc517 CCN project Team....
Changed : 04/03/2017 gxg192 Changes to send email with file as an attachment
          04/04/2017 gxg192 Added comments for address_usa_ot.
          05/05/2017 sxp130 - ASP-783 - Include Phone Number in Selling Store E-Mail Notification.
**********************************************************/
IN_DATE       IN     DATE)
IS
    CURSOR curs IS
        SELECT CC.*, COMMON_TOOLS.GET_PHONE_NUMBER(CC.COST_CENTER_CODE,'PRI') AS PHONE_NUMBER  --ASP-783
          FROM COST_CENTER CC
         WHERE CLOSE_DATE IS NULL
           AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
           AND CATEGORY = 'S'
           AND COUNTRY_CODE IN ('USA', 'PRI')
           AND GLOBAL_HIERARCHY_IND = 'Y'
           AND EXISTS (SELECT 1
                         FROM STORE S
                        WHERE CC.COST_CENTER_CODE = S.COST_CENTER_CODE
                          AND NVL(SELLING_STORE_FLAG, 'N') = 'Y'
                          AND SELLING_STORE_FLAG_MARK_DT = IN_DATE); 

    V_CLOB                        CLOB;
    V_CLOB_FOR_EMAIL              CLOB;
    V_ADDRESS_USA_OT              ADDRESS_USA_OT;

    PATH        	  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(50) := 'USA_SELLING_STORES_' || TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE     UTL_FILE.FILE_TYPE;
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);

    V_ADDRESS_USA_OT := ADDRESS_USA_OT('DUMMY', 'M');

    V_CLOB := 'SELLING_STORE_MARKED_ON,' ||
              'STORE_NUMBER,' ||
              'STORE_NAME,' ||
              'LEGACY_GL_DIVISION,' ||
              'FACTS_DIVISION,' ||
              'DOMAIN,' ||
              'GROUP,' ||
              'DIVISION,' ||
              'AREA,' ||
              'DISTRICT,' ||
              'CITY_SALES_MANAGER,' ||
              'ZONE,' ||
              'SPECIAL_ROLES,' ||
              V_ADDRESS_USA_OT.print_header_delimited(',') ||',' ||
              'PHONE_NUMBER'  --ASP-783
              ;

    V_CLOB_FOR_EMAIL := V_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR cc_rec IN curs LOOP
        V_ADDRESS_USA_OT := ADDRESS_USA_OT(cc_rec.COST_CENTER_CODE, 'M');

        V_CLOB := '"' || IN_DATE || '",' ||
                  '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  GET_HIERARCHY_DETAIL_STRING(cc_rec.COST_CENTER_CODE) || '",' ||
                  V_ADDRESS_USA_OT.print_values_delimited(',') || ',' ||
                  '"' || cc_rec.PHONE_NUMBER || '"'     --ASP-783
                  ;

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;

    UTL_FILE.FCLOSE(OUTPUT_FILE);
    MAIL_PKG.SEND_MAIL('SELLING_STORES_MAIL_USA', NULL, NULL,V_CLOB_FOR_EMAIL);

END GENERATE_USA_SELLING_STR_FILE;

PROCEDURE GENERATE_CAN_SELLING_STR_FILE(
/**********************************************************
This process takes care of generating CAN selling store file

Database type ADDRESS_CAN_OT is used to create header and details.
1 - The CONSTRUCTOR FUNCTION address_can_ot is used to initialize member variables.
2 - The MEMBER FUNCTION print_header_delimited is used to create a Header for the DELIMITER passed
3 - The MEMBER FUNCTION print_values_delimited prints the values with the DELIMITER passed

Created : 09/27/2016 jxc517 CCN project Team....
Changed : 04/03/2017 gxg192 Changes to send email with file as an attachment
          04/04/2017 gxg192 Added comments for address_can_ot.
          05/05/2017 sxp130 - ASP-783 - Include Phone Number in Selling Store E-Mail Notification.
**********************************************************/
IN_DATE       IN     DATE)
IS
    CURSOR curs IS
        SELECT CC.*, COMMON_TOOLS.GET_PHONE_NUMBER(CC.COST_CENTER_CODE,'PRI') AS PHONE_NUMBER  --ASP-783
          FROM COST_CENTER CC
         WHERE CLOSE_DATE IS NULL
           AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
           AND CATEGORY = 'S'
           AND COUNTRY_CODE = 'CAN'
           AND GLOBAL_HIERARCHY_IND = 'Y'
           AND EXISTS (SELECT 1
                         FROM STORE S
                        WHERE CC.COST_CENTER_CODE = S.COST_CENTER_CODE
                          AND NVL(SELLING_STORE_FLAG, 'N') = 'Y'
                          AND SELLING_STORE_FLAG_MARK_DT = IN_DATE);

    V_CLOB                        CLOB;
    V_CLOB_FOR_EMAIL              CLOB;
    V_ADDRESS_CAN_OT              ADDRESS_CAN_OT;

    PATH        	  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(50) := 'CAN_SELLING_STORES_' || TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE     UTL_FILE.FILE_TYPE;
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);

    V_ADDRESS_CAN_OT := ADDRESS_CAN_OT('DUMMY', 'M');

    V_CLOB := 'SELLING_STORE_MARKED_ON,' ||
              'STORE_NUMBER,' ||
              'STORE_NAME,' ||
              'LEGACY_GL_DIVISION,' ||
              'FACTS_DIVISION,' ||
              'DOMAIN,' ||
              'GROUP,' ||
              'DIVISION,' ||
              'AREA,' ||
              'DISTRICT,' ||
              'CITY_SALES_MANAGER,' ||
              'ZONE,' ||
              'SPECIAL_ROLES,' ||
              V_ADDRESS_CAN_OT.print_header_delimited(',')  ||',' ||
              'PHONE_NUMBER'   --ASP-783
              ;

    V_CLOB_FOR_EMAIL := V_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR cc_rec IN curs LOOP
        V_ADDRESS_CAN_OT := ADDRESS_CAN_OT(cc_rec.COST_CENTER_CODE, 'M');

        V_CLOB := '"' || IN_DATE || '",' ||
                  '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  GET_HIERARCHY_DETAIL_STRING(cc_rec.COST_CENTER_CODE) || '",' ||
                  V_ADDRESS_CAN_OT.print_values_delimited(',') || ',' ||
                  '"' || cc_rec.PHONE_NUMBER || '"'       --ASP-783
                  ;

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;
    UTL_FILE.FCLOSE(OUTPUT_FILE);

    MAIL_PKG.SEND_MAIL('SELLING_STORES_MAIL_CAN', NULL, NULL,V_CLOB_FOR_EMAIL);

END GENERATE_CAN_SELLING_STR_FILE;

PROCEDURE GENERATE_SELLING_STORE_FILE(
/**********************************************************
	This procedure is intended to generate a file with the list of new selling stores
  created on the date passed

1 - consider only open/valid store cost centers under USA/CAN/PRI countries
2 - cost center should be a complete cost center => should be part of global, facts and legacy hierarchies
3 - selling store flag should have been set to "Y" on that day
4 - consider only mailling address for any country code

Created : 09/27/2016 jxc517 CCN project Team....
Changed :
**********************************************************/
IN_DATE       IN     DATE)
IS
BEGIN
    GENERATE_USA_SELLING_STR_FILE(IN_DATE);

    GENERATE_CAN_SELLING_STR_FILE(IN_DATE);

END GENERATE_SELLING_STORE_FILE;


PROCEDURE GENERATE_PCI_MISMATCH_FILE
/**********************************************************
This process takes care of generating PCI_TERMINAL_MISMATCH file

Created : 04/11/2017 pxb712 CCN project Team....
**********************************************************/

IS
    V_CLOB                        CLOB;
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('PCI_TERM_MISMATCH', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
   
   BEGIN
      FOR REC IN (SELECT * 
                    FROM PCI_TERMINAL_MAIL 
                   WHERE ENTRY_DATE  >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                           FROM BATCH_JOB
                                          WHERE BATCH_JOB_NAME = 'PCI_TERM_MISMATCH')) LOOP
					V_CLOB := REC.COST_CENTER_CODE 
							  || ',' || REC.TERMINAL_NUMBER 
                              || ',' || REC.PCI_TERMINAL_ID
                              || CHR(10)
                              || V_CLOB;
                 
     END LOOP;
     
      --Sending mail for the category 'PCI_POS_TERMINAL_MISMATCH'	
      IF V_CLOB <> EMPTY_CLOB() THEN
        MAIL_PKG.SEND_MAIL('PCI_POS_TERMINAL_MISMATCH', NULL, NULL,V_CLOB);
      END IF;
    EXCEPTION
       WHEN OTHERS THEN
          V_TRANS_STATUS := 'ERROR';
   END;
    
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('PCI_TERM_MISMATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

END GENERATE_PCI_MISMATCH_FILE;

PROCEDURE GENERATE_HRCHY_MISMATCH_FILE
/**********************************************************
This process takes care of generating EMAILS FOR HIER_TRNSFR_TERRITORY 
AND HIER_TRNSFR_DAD_CHNG_TERRITORY...

Created : 04/13/2017 pxb712 CCN project Team....
**********************************************************/

IS
    V_CLOB                        CLOB;
    V_DAD_CHANGE_CLOB             CLOB;
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('HRCHY_DAD_MISMATCH', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   BEGIN
      FOR REC IN (SELECT * 
                    FROM hierarchy_transfer_mail 
                   WHERE ENTRY_DATE  >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                           FROM BATCH_JOB
                                          WHERE BATCH_JOB_NAME = 'HRCHY_DAD_MISMATCH')) LOOP
         IF (REC.PROCESS_NAME = 'HIER_TRNSFR_TERRITORY') THEN          
            V_CLOB := REC.HRCHY_DTL_PREV_LVL_FROM
                      || ',' || REC.HRCHY_DTL_PREV_LVL_TO
                      || ',' || REC.HRCHY_DTL_CURR_ROW_VAL
                      || CHR(10)
                      || V_CLOB;
         ELSE
            V_DAD_CHANGE_CLOB := REC.HRCHY_DTL_PREV_LVL_FROM
                                 || ',' || REC.HRCHY_DTL_PREV_LVL_TO
                                 || ',' || REC.HRCHY_DTL_CURR_ROW_VAL
                                 || CHR(10)
                                 || V_DAD_CHANGE_CLOB;
         END IF;
      END LOOP;

       --Sending mail for the category 'HIER_TRNSFR_TERRITORY'
       IF V_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('HIER_TRNSFR_TERRITORY', NULL, NULL, V_CLOB);
       END IF;
       --Sending mail for the change of DAD on territory cost centers
       IF V_DAD_CHANGE_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('HIER_TRNSFR_DAD_CHNG_TERRITORY', NULL, NULL, V_DAD_CHANGE_CLOB);
       END IF;
    EXCEPTION
      WHEN OTHERS THEN
         V_TRANS_STATUS := 'ERROR';
    END;
    
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('HRCHY_DAD_MISMATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
END GENERATE_HRCHY_MISMATCH_FILE;

PROCEDURE GENERATE_STORE_PD_HRCHY_FILE
/**********************************************************
This procedure is intended to generate Price District Hierarchy reporting for stores pricing group
STORE_PDH_HRCHY.CSV
The Report is scheduled to run everyday 8am
Filters:
consider only Category = 'S' and stores attached to Price district Hierarchy

Created : 05/25/2017 rxa457 ASP-772 CCN project Team....
Changed : 10/17/2017 nxk927 CCN project Team....
          Changed the report to include everything even if the cost center 
          is not attached to Price district
        : 10/23/2017 nxk927 CCN project Team....
          Added O category cost center with polling status code of P and type code of 42
**********************************************************/
IS
  CURSOR main_cursor IS
    SELECT CC.*
      FROM COST_CENTER CC
     WHERE CATEGORY             = 'S'
       AND NVL(CLOSE_DATE,TRUNC(SYSDATE))> TRUNC(SYSDATE)-1
     UNION ALL
    SELECT OC.* 
      FROM COST_CENTER OC
     WHERE CATEGORY =  'O'
       AND COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                  FROM POLLING
                                 WHERE POLLING_STATUS_CODE = 'P'
                                   AND EXPIRATION_DATE IS NULL)
       AND COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                  FROM TYPE
                                 WHERE TYPE_CODE = '42'
                                   AND EXPIRATION_DATE IS NULL)
       AND NVL(CLOSE_DATE,TRUNC(SYSDATE))> TRUNC(SYSDATE)-1
     ORDER BY 1;

  CURSOR address_cur IS
    SELECT COST_CENTER_CODE, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE_CODE, ZIP_CODE, ZIP_CODE_4
      FROM ADDRESS_VW
    WHERE ADDRESS_TYPE = 'M'
      AND EXPIRATION_DATE IS NULL;

  CURSOR hierarchy_cur(P_COST_CENTER_CODE VARCHAR2) IS
    SELECT *
      FROM HIERARCHY_DETAIL_VIEW
     WHERE HRCHY_HDR_NAME  = 'GLOBAL_HIERARCHY'
       AND COST_CENTER_CODE = P_COST_CENTER_CODE;

  CURSOR polling_cur(P_COST_CENTER_CODE VARCHAR2) IS
      SELECT *
        FROM POLLING
       WHERE CURRENT_FLAG      = 'Y'
         AND COST_CENTER_CODE  = P_COST_CENTER_CODE;

  CURSOR type_cur(P_COST_CENTER_CODE VARCHAR2) IS
    SELECT *
      FROM TYPE
     WHERE EXPIRATION_DATE IS NULL
       AND COST_CENTER_CODE = P_COST_CENTER_CODE;

  CURSOR pricing_district_cur(P_COST_CENTER_CODE VARCHAR2) IS
    SELECT DISTRICT AS PRICE_DISTRICT
      FROM HIERARCHY_DETAIL_VIEW
     WHERE HRCHY_HDR_NAME   = 'PRICE_DISTRICT'
       AND COST_CENTER_CODE = P_COST_CENTER_CODE
       AND ROWNUM <= 1;

    V_CLOB                      CLOB;
    V_CLOB_FOR_EMAIL            CLOB;

    PATH                        VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                    VARCHAR2(50)   := 'STORE_PDH_HRCHY' || '_'|| TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE                 UTL_FILE.FILE_TYPE;

    V_ADDRESS_STREET            VARCHAR2(200);
    V_CITY                      ADDRESS_VW.CITY%TYPE;
    V_STATE_CODE                ADDRESS_VW.STATE_CODE%TYPE;
    V_ADDRESS_ZIP               VARCHAR2(10);
    V_PHONE_NUMBER              VARCHAR2(14);
    V_FAX_NUMBER                VARCHAR2(14);
    V_DIVISION                  HIERARCHY_DETAIL_VIEW.DIVISION%TYPE;
    V_DIVISION_NAME             HIERARCHY_DETAIL_VIEW.DIVISION_NAME%TYPE;
    V_AREA                      HIERARCHY_DETAIL_VIEW.AREA%TYPE;
    V_AREA_NAME                 HIERARCHY_DETAIL_VIEW.AREA_NAME%TYPE;
    V_AREA_SHORT_NAME           VARCHAR2(100);
    V_DAD                       HIERARCHY_DETAIL_VIEW.DISTRICT%TYPE;
    V_DAD_DESC                  HIERARCHY_DETAIL_VIEW.DISTRICT_NAME%TYPE;
    V_POLLING_STATUS_CODE       POLLING.POLLING_STATUS_CODE%TYPE;
    V_POLLING_STATUS_CODE_DESC  CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
    V_TYPE_CODE                 TYPE.TYPE_CODE%TYPE;
    V_TYPE_CODE_DESC            CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
    V_PRICE_DISTRICT            VARCHAR2(100);
    V_CUR_COUNT                 NUMBER := 0;
        
    TYPE ADDRESS_VW_REC_TYPE IS TABLE OF ADDRESS_CUR%ROWTYPE INDEX BY VARCHAR2(6);
    AAT_ADDRESS_VW ADDRESS_VW_REC_TYPE;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);
    FOR rec IN address_cur LOOP
        AAT_ADDRESS_VW(rec.COST_CENTER_CODE) := rec;
    END LOOP;
        
    V_CLOB_FOR_EMAIL := 'Store No,' ||
                        'Store No DESC,' ||
                        'Store Address-Street,' ||
                        'Store Address-City,' ||
                        'Store Address-State,' ||
                        'Store Address-ZIP,' ||
                        'Store Phone-No,' ||
                        'Store Fax No,' ||
                        'Store Div,' ||
                        'Store Div DESC,' ||
                        'Store Area,' ||
                        'Store Area Name,' ||
                        'Store Area Name Short,' ||
                        'Store Dad,' ||
                        'Store Dad DESC,' ||
                        'Store Open Date,' ||
                        'Store Close Date,' ||
                        'Statement Type,' ||
                        'Statement Type DESC,' ||
                        'Store Polling Status Code,' ||
                        'Store Polling Status Code DESC,' ||
                        'Store Type,' ||
                        'Store Type DESC,' ||
                        'Store Pricing District';

    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB_FOR_EMAIL, TRUE);

    V_CUR_COUNT := 0;
    FOR cc_rec IN main_cursor LOOP
        V_CUR_COUNT := V_CUR_COUNT + 1;

        /*Fetch Address Information*/
        V_ADDRESS_STREET := NULL;
        V_CITY           := NULL;
        V_STATE_CODE     := NULL;
        V_ADDRESS_ZIP    := NULL;
        IF AAT_ADDRESS_VW.EXISTS(cc_rec.COST_CENTER_CODE) THEN
            IF AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_1 IS NOT NULL OR AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_2 IS NOT NULL THEN
              V_ADDRESS_STREET := LTRIM(RTRIM(AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_1||' '||AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_2
                                              )
                                        );
            END IF;
            V_CITY := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).CITY;
            V_STATE_CODE := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).STATE_CODE;
            IF AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ZIP_CODE IS NOT NULL THEN
              V_ADDRESS_ZIP := LTRIM(RTRIM(AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ZIP_CODE||' ' ||AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ZIP_CODE_4
                                           )
                                     );
            END IF;
        END IF;
        
        /*Fetch Phone Information*/
        V_PHONE_NUMBER := COMMON_TOOLS.GET_FORMATTED_PHONE_NUMBER(CC_REC.COST_CENTER_CODE, 'PRI');
        V_FAX_NUMBER   := COMMON_TOOLS.GET_FORMATTED_PHONE_NUMBER(CC_REC.COST_CENTER_CODE, 'FAX');

        /*Fetch Global Hierarchy Information for Area, and DAD*/
        V_DIVISION := NULL;
        V_DIVISION_NAME := NULL;
        V_AREA := NULL;
        V_AREA_NAME := NULL;
        V_AREA_SHORT_NAME := NULL;
        V_DAD := NULL;
        V_DAD_DESC := NULL;
        FOR rec IN hierarchy_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_DIVISION := rec.DIVISION;
            V_DIVISION_NAME := rec.DIVISION_NAME;
            V_AREA := rec.AREA;
            V_AREA_NAME := rec.AREA_NAME;
            V_AREA_SHORT_NAME := RTRIM(REPLACE(REPLACE(rec.AREA_NAME,
                                                       'AREA',
                                                       ''),
                                               'REGION',
                                               '')
                                       );
            V_DAD := rec.DIVISION || rec.AREA || rec.DISTRICT;
            V_DAD_DESC := rec.DISTRICT_NAME;
        END LOOP;

        /*Fetch Polling Information*/
        V_POLLING_STATUS_CODE      := NULL;
        V_POLLING_STATUS_CODE_DESC := NULL;
        FOR rec IN polling_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_POLLING_STATUS_CODE := rec.POLLING_STATUS_CODE;
            V_POLLING_STATUS_CODE_DESC := NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('POLLING_STATUS_CODE',
                                                                                              'COD',
                                                                                              rec.POLLING_STATUS_CODE),
                                              'N/A');
        END LOOP;

        /*Fetch Type Information*/
        V_TYPE_CODE      := NULL;
        V_TYPE_CODE_DESC := NULL;
        FOR rec IN type_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_TYPE_CODE      := rec.TYPE_CODE;
            V_TYPE_CODE_DESC := NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('TYPE_CODE',
                                                                                    'COD',
                                                                                    rec.TYPE_CODE),
                                    'N/A');
        END LOOP;

        /*Fetch price District Information*/
        V_PRICE_DISTRICT := NULL;
        FOR rec IN pricing_district_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_PRICE_DISTRICT := rec.PRICE_DISTRICT;
        END LOOP;

        V_CLOB := '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  '"' || V_ADDRESS_STREET || '",' ||
                  '"' || V_CITY || '",' ||
                  '"' || V_STATE_CODE || '",' ||
                  '"' || V_ADDRESS_ZIP || '",' ||
                  '"' || V_PHONE_NUMBER || '",' ||
                  '"' || V_FAX_NUMBER || '",' ||
                  '"' || V_DIVISION || '",' ||
                  '"' || V_DIVISION_NAME || '",' ||
                  '"' || V_AREA || '",' ||
                  '"' || V_AREA_NAME || '",' ||
                  '"' || V_AREA_SHORT_NAME || '",' ||
                  '"' || V_DAD || '",' ||
                  '"' || V_DAD_DESC || '",' ||
                  '"' || CC_REC.OPEN_DATE || '",' ||
                  '"' || CC_REC.CLOSE_DATE || '",' ||
                  '"' || CC_REC.STATEMENT_TYPE || '",' ||
                  '"' || NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('STATEMENT_TYPE',
                                                                             'COD',
                                                                             cc_rec.STATEMENT_TYPE),
                             'N/A') || '",' ||
                  '"' || V_POLLING_STATUS_CODE || '",' ||
                  '"' || V_POLLING_STATUS_CODE_DESC || '",' ||
                  '"' || V_TYPE_CODE || '",' ||
                  '"' || V_TYPE_CODE_DESC || '",'||
                  '"' || V_PRICE_DISTRICT || '"';

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;

    UTL_FILE.FCLOSE(OUTPUT_FILE);
    IF V_CUR_COUNT > 0 THEN
        MAIL_PKG.SEND_MAIL('STORE_PDH_HRCHY_MAIL', NULL, NULL,V_CLOB_FOR_EMAIL);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        UTL_FILE.FCLOSE(OUTPUT_FILE);
        ERRPKG.RAISE_ERR(-20999, 'CCN_BATCH_PROCESS.GENERATE_STORE_PD_HRCHY_FILE','GENERATE STORE PRICE DISTRICT HIERARCHY REPORTING FAILED AT '||SQLCODE||' : '||                SQLERRM);
END GENERATE_STORE_PD_HRCHY_FILE;

FUNCTION FILL_SPACES (
/******************************************************************************************
This Function is to fill the required spaces
created : 05/27/2017 sxp130 ASP-795
modified:
*******************************************************************************************/
IN_NUMBER_OF_SPACES      IN     NUMBER)
RETURN VARCHAR2
IS
   V_VAL  VARCHAR2(10);
BEGIN
   RETURN RPAD(' ',IN_NUMBER_OF_SPACES);
EXCEPTION
   WHEN OTHERS THEN
      RETURN NULL;
END FILL_SPACES;

PROCEDURE GNRT_STORE_BANK_CARD_MRCHNT_FL
/******************************************************************************************
This Procedure create file STORE_BANK_CARD_MERCHANT_FL.CSV on the server
File structure:
MERCHANT_ID,SUBSTR(MERCHANT_ID, 7, 4),PCI_MERCHANT_ID,DISCOVER_ID,PCI_DISCOVER_ID,AMEX_SE_ID
Filters:
POLLING_STATUS_CODE = 'P'
CATEGORY IN ('S','O')
created : 05/25/2017 sxp130 ASP-795
modified: 09/06/2017 sxp130 ASP-795 - Incorporated code changes for PAT E-Mail on
        : Tuesday, September 05, 2017 10:54AM - PAT's E-mail.
        : 10/02/2017 rxa457 CCN Project Team...
          file name changed merchtb.dat
*******************************************************************************************/
AS
   CURSOR CUR_COST_CENTER IS
      SELECT *
         FROM COST_CENTER
        WHERE CLOSE_DATE IS NULL
          AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
          AND CATEGORY IN ('S', 'O');

   CURSOR CUR_BANK_CARD (P_COST_CENTER_CODE VARCHAR2) IS
      SELECT BANK_CARD.*
        FROM POLLING,
             BANK_CARD
       WHERE POLLING.COST_CENTER_CODE = P_COST_CENTER_CODE
         AND POLLING.COST_CENTER_CODE = BANK_CARD.COST_CENTER_CODE
         AND UPPER(POLLING.POLLING_STATUS_CODE) IN ('P')
         AND POLLING.POLLING_STATUS_CODE = BANK_CARD.POLLING_STATUS_CODE
         AND POLLING.EXPIRATION_DATE IS NULL AND POLLING.CURRENT_FLAG ='Y'
         AND BANK_CARD.EXPIRATION_DATE IS NULL;

   --Variable Declaration
   PATH                VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
   FILENAME            VARCHAR2(50) := 'merchtb_' || TO_CHAR(SYSDATE,'MMDDRR') || '.dat';
   OUTPUT_FILE         UTL_FILE.FILE_TYPE;
   V_CLOB              CLOB;
   V_CLOB_FOR_EMAIL    CLOB;

PROCEDURE APPEND_CLOB(
   IN_VALUE         IN     VARCHAR2,
   IN_COST_CENTER   IN     VARCHAR2,
   IN_OUT_MAIL_CLOB IN OUT CLOB)
IS
   V_CLOB              CLOB;
BEGIN
   IF IN_VALUE IS NOT NULL AND NOT REGEXP_LIKE(IN_VALUE, '^[9-9]+$' ) AND NOT REGEXP_LIKE(IN_VALUE, '^[0-0]+$' ) THEN
      V_CLOB := IN_VALUE || ',' || SUBSTR(IN_COST_CENTER, 3) || CHR(13);
      IF V_CLOB <> EMPTY_CLOB() THEN
         UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
         IF IN_OUT_MAIL_CLOB <> EMPTY_CLOB() THEN
            IN_OUT_MAIL_CLOB := IN_OUT_MAIL_CLOB || CHR(10) || V_CLOB;
         ELSE
            IN_OUT_MAIL_CLOB := V_CLOB;
         END IF;
      END IF;
   END IF;
END APPEND_CLOB;

BEGIN
   OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                 ,FILENAME
                                 , 'W' --BINARY
                                 , 32767);

   FOR REC_CC IN CUR_COST_CENTER LOOP
      /*Fetch Bank_Card Information for each Store*/
      FOR REC_BC IN CUR_BANK_CARD (REC_CC.COST_CENTER_CODE)  LOOP
         --Append MERCHANT_ID to file
         APPEND_CLOB(REC_BC.MERCHANT_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append PCI_MERCHANT_ID to file
         APPEND_CLOB(REC_BC.PCI_MERCHANT_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append DISCOVER_ID to file
         APPEND_CLOB(REC_BC.DISCOVER_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append PCI_DISCOVER_ID to file
         APPEND_CLOB(REC_BC.PCI_DISCOVER_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append AMEX_SE_ID to file
         APPEND_CLOB(REC_BC.AMEX_SE_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
      END LOOP;
   END LOOP;
   UTL_FILE.FCLOSE(OUTPUT_FILE);
   --Sending mail for the category 'STORE_BANK_CARD_MERCHANT'
   IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('STORE_BANK_CARD_MERCHANT', NULL, NULL, V_CLOB_FOR_EMAIL);
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      UTL_FILE.FCLOSE(OUTPUT_FILE);
      RAISE;
END GNRT_STORE_BANK_CARD_MRCHNT_FL;

PROCEDURE GNRT_STORE_BANK_CARD_SERIAL_FL
/******************************************************************************************
This Procedure create file STORE_BANK_CARD_SERIAL.CSV on the server
Filters:
POLLING_STATUS_CODE = 'P'
CATEGORY IN ('S','O')
created : 05/25/2017 sxp130 ASP-795
modified:
*******************************************************************************************/
AS
   CURSOR CUR_COST_CENTER IS
      SELECT *
        FROM COST_CENTER
       WHERE CLOSE_DATE IS NULL
         AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
         AND CATEGORY IN ('S', 'O');
   CURSOR CUR_BANK_CARD (P_COST_CENTER_CODE VARCHAR2) IS
      SELECT BANK_CARD.*
        FROM POLLING,
             BANK_CARD
       WHERE POLLING.COST_CENTER_CODE = P_COST_CENTER_CODE
         AND POLLING.COST_CENTER_CODE = BANK_CARD.COST_CENTER_CODE
         AND UPPER(POLLING.POLLING_STATUS_CODE) IN ('P')
         AND POLLING.POLLING_STATUS_CODE = BANK_CARD.POLLING_STATUS_CODE
         AND POLLING.EXPIRATION_DATE IS NULL AND POLLING.CURRENT_FLAG ='Y'
         AND BANK_CARD.EXPIRATION_DATE IS NULL;
   CURSOR CUR_HIER_DET_VIEW (P_COST_CENTER_CODE VARCHAR2) IS
      SELECT *
        FROM GLOBAL_HIERARCHY_DETAIL_VIEW
       WHERE COST_CENTER_CODE =   P_COST_CENTER_CODE;
   CURSOR CUR_ADDRESS IS
      SELECT COST_CENTER_CODE, 
             ADDRESS_LINE_1,
             CITY,
             STATE_CODE,
             PROVINCE_CODE,
             ZIP_CODE,
             POSTAL_CODE
        FROM ADDRESS_VW
       WHERE ADDRESS_TYPE = 'M'
         AND EXPIRATION_DATE IS NULL;

   TYPE ADDRESS_VW_REC_TYPE IS RECORD (COST_CENTER_CODE     VARCHAR2(6),
                                       ADDRESS_LINE_1       VARCHAR2(2000),
                                       CITY                 VARCHAR2(100),
                                       STATE_CODE           VARCHAR2(100),
                                       PROVINCE_CODE        VARCHAR2(100),
                                       ZIP_CODE             VARCHAR2(100),
                                       POSTAL_CODE          VARCHAR2(100));

   TYPE RT_ADDRESS_VW IS TABLE OF ADDRESS_VW_REC_TYPE INDEX BY VARCHAR2(6);
   AAT_ADDRESS_VW RT_ADDRESS_VW; --Associative Array Type

   --Variable Declaration
   PATH                     VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
   FILENAME                 VARCHAR2(50) := 'STORE_BANK_CARD_SERIAL_' || TO_CHAR(SYSDATE,'MMDDRR') || '.dat';
   OUTPUT_FILE              UTL_FILE.FILE_TYPE;
   V_DIVISION_NO            VARCHAR2(200);
   V_AREA                   VARCHAR2(200);
   V_DISTRICT               VARCHAR2(200);
   V_MERCHANT_ID            VARCHAR2(200);
   V_DISCOVER_ID            VARCHAR2(200);
   V_AMEX_SE_ID             VARCHAR2(200);
   V_ADDRESS_LINE_1         VARCHAR2(200);
   V_CITY                   VARCHAR2(200);
   V_STATE_CODE             VARCHAR2(200);
   V_ZIP_CODE               VARCHAR2(200);
   V_CLOB                   CLOB;
   V_CLOB_FOR_EMAIL         CLOB;
BEGIN
   OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                 ,FILENAME
                                 , 'W' --BINARY
                                 , 32767);
								 
   FOR REC IN CUR_ADDRESS LOOP
      AAT_ADDRESS_VW(REC.COST_CENTER_CODE) := REC;
   END LOOP;
								 
   FOR REC_CC IN CUR_COST_CENTER LOOP
      --Variable initialize to NULL
      V_DIVISION_NO            := FILL_SPACES(2);
      V_AREA                   := FILL_SPACES(2);
      V_DISTRICT               := FILL_SPACES(2);
      V_MERCHANT_ID            := FILL_SPACES(11);
      V_DISCOVER_ID            := FILL_SPACES(15);
      V_AMEX_SE_ID             := FILL_SPACES(10);
      V_ADDRESS_LINE_1         := FILL_SPACES(30);
      V_CITY                   := FILL_SPACES(20);
      V_STATE_CODE             := FILL_SPACES(2);
      V_ZIP_CODE               := FILL_SPACES(10);
      V_CLOB                   := NULL;
      /*Fetch Global Hierarchy Information for DIVISION, AREA and DISTRICT*/
      FOR REC_HD IN CUR_HIER_DET_VIEW (REC_CC.COST_CENTER_CODE)  LOOP
         V_DIVISION_NO := RPAD(NVL(REC_HD.DIVISION,' '),2,' ');
         V_AREA := RPAD(NVL(REC_HD.AREA,' '),2,' ');
         V_DISTRICT := RPAD(NVL(REC_HD.DISTRICT,' '),2,' ');
      END LOOP;

      /*Fetch Bank_Card Information for MERCHANT_ID, DISCOVER_ID and AMEX_SE_ID*/
      FOR REC_BC IN CUR_BANK_CARD (REC_CC.COST_CENTER_CODE)  LOOP
         V_MERCHANT_ID := RPAD(NVL(REC_BC.MERCHANT_ID,' '),11,' ');
         V_DISCOVER_ID := RPAD(NVL(REC_BC.DISCOVER_ID,' '),15,' ');
         V_AMEX_SE_ID := RPAD(NVL(REC_BC.AMEX_SE_ID,' '),10,' ');
      END LOOP;

      /*Fetch Address Information*/
      IF AAT_ADDRESS_VW.EXISTS(REC_CC.COST_CENTER_CODE) THEN
         V_ADDRESS_LINE_1 := RPAD(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ADDRESS_LINE_1,' '),30,' ');
         V_CITY := RPAD(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).CITY,' '),20,' ');
         V_STATE_CODE := RPAD(NVL(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).STATE_CODE, AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).PROVINCE_CODE),' '),2,' ');
         V_ZIP_CODE :=  RPAD(NVL(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ZIP_CODE, AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).POSTAL_CODE),' '),10,' ');   
      END IF;

      IF Trim(V_MERCHANT_ID) IS NOT NULL THEN
         V_CLOB :=   '60'                                                    ||
                      RPAD(NVL(SUBSTR(REC_CC.COST_CENTER_CODE,3),' '),4,' ') ||
                      FILL_SPACES(12)                                        ||
                      RPAD(NVL(REC_CC.COST_CENTER_NAME,' '),35,' ')          ||
                      FILL_SPACES(73)                                        ||
                      V_DIVISION_NO                                          ||
                      FILL_SPACES(15)                                        ||
                      V_AREA                                                 ||
                      FILL_SPACES(15)                                        ||
                      V_DISTRICT                                             ||
                      FILL_SPACES(3)                                         ||
                      V_MERCHANT_ID                                          ||
                      FILL_SPACES(4)                                         ||
                      V_DISCOVER_ID                                          ||
                      FILL_SPACES(5)                                         ||
                      V_AMEX_SE_ID                                           ||
                      FILL_SPACES(5)                                         ||
                      V_ADDRESS_LINE_1                                       ||
                      FILL_SPACES(2)                                         ||
                      V_CITY                                                 ||
                      FILL_SPACES(1)                                         ||
                      V_STATE_CODE                                           ||
                      FILL_SPACES(3)                                         ||
                       V_ZIP_CODE                                            ||
                      FILL_SPACES(2)                                         ||
                      RPAD(NVL(REC_CC.STATEMENT_TYPE,' '),2,' ')             ||
                      FILL_SPACES(13)
                      ;
      END IF;

      IF V_CLOB <> EMPTY_CLOB() THEN
         UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
         IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
            V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
         ELSE
            V_CLOB_FOR_EMAIL := V_CLOB;
         END IF;
      END IF;
   END LOOP;

   UTL_FILE.FCLOSE(OUTPUT_FILE);
   --Sending mail for the category 'STORE_BANK_CARD_SERIAL'
   IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('STORE_BANK_CARD_SERIAL', NULL, NULL, V_CLOB_FOR_EMAIL);
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      UTL_FILE.FCLOSE(OUTPUT_FILE);
      RAISE;
END GNRT_STORE_BANK_CARD_SERIAL_FL;

PROCEDURE GENERATE_STORE_BANK_CARD_FILE
/**********************************************************
This procedure is intended to generate below files which describes store and merchant details
1. STORE_BANK_CARD_MERCHANT.CSV
2. STORE_BANK_CARD_SERIAL.DAT
Filters:
1 - consider only POLLING_STATUS_CODE = 'P' and CATEGORY IN ( 'S', 'O' )
Created : 05/25/2017 sxp130 CCN project Team.... - ASP-795
Changed :
**********************************************************/
IS
BEGIN
    GNRT_STORE_BANK_CARD_MRCHNT_FL;
    GNRT_STORE_BANK_CARD_SERIAL_FL;
END GENERATE_STORE_BANK_CARD_FILE;

END CCN_BATCH_PROCESS;