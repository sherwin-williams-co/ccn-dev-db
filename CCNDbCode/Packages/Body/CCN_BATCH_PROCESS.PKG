CREATE OR REPLACE PACKAGE BODY CCN_BATCH_PROCESS AS
/*********************************************************** 
This package body will have procedures and functions related 
to the batch process

Created  : 04/04/2016 nxk927 CCN project
Modified : 
************************************************************/
  
PROCEDURE NEWLY_CRTD_COST_CENTER
/**********************************************************
	This procedure is intended to generate a file with the list of new cost centers
  created on previous day

Created : 04/04/2016 nxk927 CCN project
**********************************************************/
IS
 	V_CLOB        CLOB;

BEGIN
   FOR REC IN (SELECT *
                 FROM COST_CENTER 
                WHERE OPEN_DATE = TRUNC(SYSDATE) -1
                  AND OPEN_DATE <> '01-JAN-2099') LOOP
       V_CLOB := REC.COST_CENTER_CODE 
                 || ',' || REC.COST_CENTER_NAME 
                 || ',' || REC.OPEN_DATE
                 || CHR(10)
                 || V_CLOB;
                 
   END LOOP;
   	
   IF V_CLOB <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('NEWLY_CRTD_COST_CENTER', NULL, NULL,V_CLOB);
   END IF;

END NEWLY_CRTD_COST_CENTER;

FUNCTION GET_HIERARCHY_DETAIL_STRING(
/**********************************************************
	This procedure is intended to generate a file with the list of new selling stores
  created on that day

1 - consider only open/valid store cost centers under USA/CAN/PRI countries
2 - cost center should be a complete cost center => should be part of global, facts and legacy hierarchies
3 - selling store flag should have been set to "Y" on that day

Created : 09/27/2016 jxc517 CCN project Team....
Changed :
**********************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2)
RETURN VARCHAR2
IS
    V_GLBL_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_LGCY_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_FCTS_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_RETURN_VALUE                VARCHAR2(32000);
BEGIN
    FOR hd_rec IN (SELECT *
                     FROM HIERARCHY_DETAIL_VIEW
                    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                      AND HRCHY_HDR_NAME IN ('GLOBAL_HIERARCHY', 'FACTS_DIVISION', 'LEGACY_GL_DIVISION')) LOOP
        IF hd_rec.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' THEN
            V_GLBL_HD_VIEW_REC := hd_rec;
        ELSIF hd_rec.HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION' THEN
            V_LGCY_HD_VIEW_REC := hd_rec;
        ELSIF hd_rec.HRCHY_HDR_NAME = 'FACTS_DIVISION' THEN
            V_FCTS_HD_VIEW_REC := hd_rec;
        END IF;
    END LOOP;

    V_RETURN_VALUE := '"' || V_LGCY_HD_VIEW_REC.DIVISION || ' ~ ' || V_LGCY_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_FCTS_HD_VIEW_REC.DIVISION || ' ~ ' || V_FCTS_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DOMAIN || ' ~ ' || V_GLBL_HD_VIEW_REC.DOMAIN_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC."GROUP" || ' ~ ' || V_GLBL_HD_VIEW_REC.GROUP_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DIVISION || ' ~ ' || V_GLBL_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.AREA || ' ~ ' || V_GLBL_HD_VIEW_REC.AREA_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DISTRICT || ' ~ ' || V_GLBL_HD_VIEW_REC.DISTRICT_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.CITY_SALES_MANAGER || ' ~ ' || V_GLBL_HD_VIEW_REC.CITY_SALES_MANAGER_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.ZONE || ' ~ ' || V_GLBL_HD_VIEW_REC.ZONE_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.SPECIAL_ROLES || ' ~ ' || V_GLBL_HD_VIEW_REC.SPECIAL_ROLES_NAME;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END GET_HIERARCHY_DETAIL_STRING;

PROCEDURE GENERATE_USA_SELLING_STR_FILE(
/**********************************************************
This process takes care of generating USA/PRI selling store file

Database type ADDRESS_USA_OT is used to create header and details.
1 - The CONSTRUCTOR FUNCTION address_usa_ot is used to initialize member variables.
2 - The MEMBER FUNCTION print_header_delimited is used to create a Header for the DELIMITER passed
3 - The MEMBER FUNCTION print_values_delimited prints the values with the DELIMITER passed

Created : 09/27/2016 jxc517 CCN project Team....
Changed : 04/03/2017 gxg192 Changes to send email with file as an attachment
          04/04/2017 gxg192 Added comments for address_usa_ot.
**********************************************************/
IN_DATE       IN     DATE)
IS
    CURSOR curs IS
        SELECT *
          FROM COST_CENTER CC
         WHERE CLOSE_DATE IS NULL
           AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
           AND CATEGORY = 'S'
           AND COUNTRY_CODE IN ('USA', 'PRI')
           AND GLOBAL_HIERARCHY_IND = 'Y'
           AND EXISTS (SELECT 1
                         FROM STORE S
                        WHERE CC.COST_CENTER_CODE = S.COST_CENTER_CODE
                          AND NVL(SELLING_STORE_FLAG, 'N') = 'Y'
                          AND SELLING_STORE_FLAG_MARK_DT = IN_DATE);

    V_CLOB                        CLOB;
    V_CLOB_FOR_EMAIL              CLOB;
    V_ADDRESS_USA_OT              ADDRESS_USA_OT;

    PATH        	  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(50) := 'USA_SELLING_STORES_' || TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE     UTL_FILE.FILE_TYPE;
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);

    V_ADDRESS_USA_OT := ADDRESS_USA_OT('DUMMY', 'M');

    V_CLOB := 'SELLING_STORE_MARKED_ON,' ||
              'STORE_NUMBER,' ||
              'STORE_NAME,' ||
              'LEGACY_GL_DIVISION,' ||
              'FACTS_DIVISION,' ||
              'DOMAIN,' ||
              'GROUP,' ||
              'DIVISION,' ||
              'AREA,' ||
              'DISTRICT,' ||
              'CITY_SALES_MANAGER,' ||
              'ZONE,' ||
              'SPECIAL_ROLES,' ||
              V_ADDRESS_USA_OT.print_header_delimited(',');

    V_CLOB_FOR_EMAIL := V_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR cc_rec IN curs LOOP
        V_ADDRESS_USA_OT := ADDRESS_USA_OT(cc_rec.COST_CENTER_CODE, 'M');

        V_CLOB := '"' || IN_DATE || '",' ||
                  '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  GET_HIERARCHY_DETAIL_STRING(cc_rec.COST_CENTER_CODE) || '",' ||
                  V_ADDRESS_USA_OT.print_values_delimited(',');

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;

    UTL_FILE.FCLOSE(OUTPUT_FILE);
    MAIL_PKG.SEND_MAIL('SELLING_STORES_MAIL_USA', NULL, NULL,V_CLOB_FOR_EMAIL);

END GENERATE_USA_SELLING_STR_FILE;

PROCEDURE GENERATE_CAN_SELLING_STR_FILE(
/**********************************************************
This process takes care of generating CAN selling store file

Database type ADDRESS_CAN_OT is used to create header and details.
1 - The CONSTRUCTOR FUNCTION address_can_ot is used to initialize member variables.
2 - The MEMBER FUNCTION print_header_delimited is used to create a Header for the DELIMITER passed
3 - The MEMBER FUNCTION print_values_delimited prints the values with the DELIMITER passed

Created : 09/27/2016 jxc517 CCN project Team....
Changed : 04/03/2017 gxg192 Changes to send email with file as an attachment
          04/04/2017 gxg192 Added comments for address_can_ot.
**********************************************************/
IN_DATE       IN     DATE)
IS
    CURSOR curs IS
        SELECT *
          FROM COST_CENTER CC
         WHERE CLOSE_DATE IS NULL
           AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
           AND CATEGORY = 'S'
           AND COUNTRY_CODE = 'CAN'
           AND GLOBAL_HIERARCHY_IND = 'Y'
           AND EXISTS (SELECT 1
                         FROM STORE S
                        WHERE CC.COST_CENTER_CODE = S.COST_CENTER_CODE
                          AND NVL(SELLING_STORE_FLAG, 'N') = 'Y'
                          AND SELLING_STORE_FLAG_MARK_DT = IN_DATE);

    V_CLOB                        CLOB;
    V_CLOB_FOR_EMAIL              CLOB;
    V_ADDRESS_CAN_OT              ADDRESS_CAN_OT;

    PATH        	  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(50) := 'CAN_SELLING_STORES_' || TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE     UTL_FILE.FILE_TYPE;
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);

    V_ADDRESS_CAN_OT := ADDRESS_CAN_OT('DUMMY', 'M');

    V_CLOB := 'SELLING_STORE_MARKED_ON,' ||
              'STORE_NUMBER,' ||
              'STORE_NAME,' ||
              'LEGACY_GL_DIVISION,' ||
              'FACTS_DIVISION,' ||
              'DOMAIN,' ||
              'GROUP,' ||
              'DIVISION,' ||
              'AREA,' ||
              'DISTRICT,' ||
              'CITY_SALES_MANAGER,' ||
              'ZONE,' ||
              'SPECIAL_ROLES,' ||
              V_ADDRESS_CAN_OT.print_header_delimited(',');

    V_CLOB_FOR_EMAIL := V_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR cc_rec IN curs LOOP
        V_ADDRESS_CAN_OT := ADDRESS_CAN_OT(cc_rec.COST_CENTER_CODE, 'M');

        V_CLOB := '"' || IN_DATE || '",' ||
                  '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  GET_HIERARCHY_DETAIL_STRING(cc_rec.COST_CENTER_CODE) || '",' ||
                  V_ADDRESS_CAN_OT.print_values_delimited(',');

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;
    UTL_FILE.FCLOSE(OUTPUT_FILE);

    MAIL_PKG.SEND_MAIL('SELLING_STORES_MAIL_CAN', NULL, NULL,V_CLOB_FOR_EMAIL);

END GENERATE_CAN_SELLING_STR_FILE;

PROCEDURE GENERATE_SELLING_STORE_FILE(
/**********************************************************
	This procedure is intended to generate a file with the list of new selling stores
  created on the date passed

1 - consider only open/valid store cost centers under USA/CAN/PRI countries
2 - cost center should be a complete cost center => should be part of global, facts and legacy hierarchies
3 - selling store flag should have been set to "Y" on that day
4 - consider only mailling address for any country code

Created : 09/27/2016 jxc517 CCN project Team....
Changed :
**********************************************************/
IN_DATE       IN     DATE)
IS
BEGIN
    GENERATE_USA_SELLING_STR_FILE(IN_DATE);

    GENERATE_CAN_SELLING_STR_FILE(IN_DATE);

END GENERATE_SELLING_STORE_FILE;


PROCEDURE GENERATE_PCI_MISMATCH_FILE
/**********************************************************
This process takes care of generating PCI_TERMINAL_MISMATCH file

Created : 04/11/2017 pxb712 CCN project Team....
**********************************************************/

IS
    V_CLOB                        CLOB;
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('PCI_TERM_MISMATCH', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
   
   BEGIN
      FOR REC IN (SELECT * 
                    FROM PCI_TERMINAL_MAIL 
                   WHERE ENTRY_DATE  >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                           FROM BATCH_JOB
                                          WHERE BATCH_JOB_NAME = 'PCI_TERM_MISMATCH')) LOOP
         V_CLOB := REC.COST_CENTER_CODE 
                   || ',' || REC.TERMINAL_NUMBER 
                   || ',' || REC.PCI_TERMINAL_ID
                   || CHR(10)
                   || V_CLOB;
                 
     END LOOP;
     
      --Sending mail for the category 'PCI_POS_TERMINAL_MISMATCH'	
      IF V_CLOB <> EMPTY_CLOB() THEN
        MAIL_PKG.SEND_MAIL('PCI_POS_TERMINAL_MISMATCH', NULL, NULL,V_CLOB);
      END IF;
    EXCEPTION
       WHEN OTHERS THEN
          V_TRANS_STATUS := 'ERROR';
   END;
   
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('PCI_TERM_MISMATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

END GENERATE_PCI_MISMATCH_FILE;

PROCEDURE GENERATE_HRCHY_MISMATCH_FILE
/**********************************************************
This process takes care of generating EMAILS FOR HIER_TRNSFR_TERRITORY 
AND HIER_TRNSFR_DAD_CHNG_TERRITORY...

Created : 04/13/2017 pxb712 CCN project Team....
**********************************************************/

IS
    V_CLOB                        CLOB;
    V_DAD_CHANGE_CLOB             CLOB;
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('HRCHY_DAD_MISMATCH', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   BEGIN
      FOR REC IN (SELECT * 
                    FROM hierarchy_transfer_mail 
                   WHERE ENTRY_DATE  >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                           FROM BATCH_JOB
                                          WHERE BATCH_JOB_NAME = 'HRCHY_DAD_MISMATCH')) LOOP
         IF (REC.PROCESS_NAME = 'HIER_TRNSFR_TERRITORY') THEN          
            V_CLOB := REC.HRCHY_DTL_PREV_LVL_FROM
                      || ',' || REC.HRCHY_DTL_PREV_LVL_TO
                      || ',' || REC.HRCHY_DTL_CURR_ROW_VAL
                      || CHR(10)
                      || V_CLOB;
         ELSE
            V_DAD_CHANGE_CLOB := REC.HRCHY_DTL_PREV_LVL_FROM
                                 || ',' || REC.HRCHY_DTL_PREV_LVL_TO
                                 || ',' || REC.HRCHY_DTL_CURR_ROW_VAL
                                 || CHR(10)
                                 || V_DAD_CHANGE_CLOB;
         END IF;
      END LOOP;

       --Sending mail for the category 'HIER_TRNSFR_TERRITORY'
       IF V_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('HIER_TRNSFR_TERRITORY', NULL, NULL, V_CLOB);
       END IF;
       --Sending mail for the change of DAD on territory cost centers
       IF V_DAD_CHANGE_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('HIER_TRNSFR_DAD_CHNG_TERRITORY', NULL, NULL, V_DAD_CHANGE_CLOB);
       END IF;
    EXCEPTION
      WHEN OTHERS THEN
         V_TRANS_STATUS := 'ERROR';
    END;
    
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('HRCHY_DAD_MISMATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
END GENERATE_HRCHY_MISMATCH_FILE;

END CCN_BATCH_PROCESS;


END CCN_BATCH_PROCESS;