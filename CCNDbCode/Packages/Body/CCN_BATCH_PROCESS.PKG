create or replace PACKAGE BODY CCN_BATCH_PROCESS AS
/*********************************************************** 
This package body will have procedures and functions related 
to the batch process

Created  : 04/04/2016 nxk927 CCN project
Modified : 05/25/2017 rxa457 CCN PROJECT TEAM..
Modified : 06/02/2017 sxp130 ASP-795 CCN project 
************************************************************/

PROCEDURE NEWLY_CRTD_COST_CENTER
/**********************************************************
	This procedure is intended to generate a file with the list of new cost centers
  created on previous day

Created : 04/04/2016 nxk927 CCN project
**********************************************************/
IS
 	V_CLOB        CLOB;

BEGIN
   FOR REC IN (SELECT *
                 FROM COST_CENTER 
                WHERE OPEN_DATE = TRUNC(SYSDATE) -1
                  AND OPEN_DATE <> '01-JAN-2099') LOOP
       V_CLOB := REC.COST_CENTER_CODE 
                 || ',' || REC.COST_CENTER_NAME 
                 || ',' || REC.OPEN_DATE
                 || CHR(10)
                 || V_CLOB;

   END LOOP;

   IF V_CLOB <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('NEWLY_CRTD_COST_CENTER', NULL, NULL,V_CLOB);
   END IF;

END NEWLY_CRTD_COST_CENTER;

FUNCTION GET_HIERARCHY_DETAIL_STRING(
/**********************************************************
	This procedure is intended to generate a file with the list of new selling stores
  created on that day

1 - consider only open/valid store cost centers under USA/CAN/PRI countries
2 - cost center should be a complete cost center => should be part of global, facts and legacy hierarchies
3 - selling store flag should have been set to "Y" on that day

Created : 09/27/2016 jxc517 CCN project Team....
Changed :
**********************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2)
RETURN VARCHAR2
IS
    V_GLBL_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_LGCY_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_FCTS_HD_VIEW_REC            HIERARCHY_DETAIL_VIEW%ROWTYPE;
    V_RETURN_VALUE                VARCHAR2(32000);
BEGIN
    FOR hd_rec IN (SELECT *
                     FROM HIERARCHY_DETAIL_VIEW
                    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                      AND HRCHY_HDR_NAME IN ('GLOBAL_HIERARCHY', 'FACTS_DIVISION', 'LEGACY_GL_DIVISION')) LOOP
        IF hd_rec.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY' THEN
            V_GLBL_HD_VIEW_REC := hd_rec;
        ELSIF hd_rec.HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION' THEN
            V_LGCY_HD_VIEW_REC := hd_rec;
        ELSIF hd_rec.HRCHY_HDR_NAME = 'FACTS_DIVISION' THEN
            V_FCTS_HD_VIEW_REC := hd_rec;
        END IF;
    END LOOP;

    V_RETURN_VALUE := '"' || V_LGCY_HD_VIEW_REC.DIVISION || ' ~ ' || V_LGCY_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_FCTS_HD_VIEW_REC.DIVISION || ' ~ ' || V_FCTS_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DOMAIN || ' ~ ' || V_GLBL_HD_VIEW_REC.DOMAIN_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC."GROUP" || ' ~ ' || V_GLBL_HD_VIEW_REC.GROUP_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DIVISION || ' ~ ' || V_GLBL_HD_VIEW_REC.DIVISION_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.AREA || ' ~ ' || V_GLBL_HD_VIEW_REC.AREA_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.DISTRICT || ' ~ ' || V_GLBL_HD_VIEW_REC.DISTRICT_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.CITY_SALES_MANAGER || ' ~ ' || V_GLBL_HD_VIEW_REC.CITY_SALES_MANAGER_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.ZONE || ' ~ ' || V_GLBL_HD_VIEW_REC.ZONE_NAME || '",' ||
                      '"' || V_GLBL_HD_VIEW_REC.SPECIAL_ROLES || ' ~ ' || V_GLBL_HD_VIEW_REC.SPECIAL_ROLES_NAME;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END GET_HIERARCHY_DETAIL_STRING;

PROCEDURE GENERATE_USA_SELLING_STR_FILE(
/**********************************************************
This process takes care of generating USA/PRI selling store file

Database type ADDRESS_USA_OT is used to create header and details.
1 - The CONSTRUCTOR FUNCTION address_usa_ot is used to initialize member variables.
2 - The MEMBER FUNCTION print_header_delimited is used to create a Header for the DELIMITER passed
3 - The MEMBER FUNCTION print_values_delimited prints the values with the DELIMITER passed

Created : 09/27/2016 jxc517 CCN project Team....
Changed : 04/03/2017 gxg192 Changes to send email with file as an attachment
          04/04/2017 gxg192 Added comments for address_usa_ot.
          05/05/2017 sxp130 - ASP-783 - Include Phone Number in Selling Store E-Mail Notification.
**********************************************************/
IN_DATE       IN     DATE)
IS
    CURSOR curs IS
        SELECT CC.*, COMMON_TOOLS.GET_PHONE_NUMBER(CC.COST_CENTER_CODE,'PRI') AS PHONE_NUMBER  --ASP-783
          FROM COST_CENTER CC
         WHERE CLOSE_DATE IS NULL
           AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
           AND CATEGORY = 'S'
           AND COUNTRY_CODE IN ('USA', 'PRI')
           AND GLOBAL_HIERARCHY_IND = 'Y'
           AND EXISTS (SELECT 1
                         FROM STORE S
                        WHERE CC.COST_CENTER_CODE = S.COST_CENTER_CODE
                          AND NVL(SELLING_STORE_FLAG, 'N') = 'Y'
                          AND SELLING_STORE_FLAG_MARK_DT = IN_DATE); 

    V_CLOB                        CLOB;
    V_CLOB_FOR_EMAIL              CLOB;
    V_ADDRESS_USA_OT              ADDRESS_USA_OT;

    PATH        	  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(50) := 'USA_SELLING_STORES_' || TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE     UTL_FILE.FILE_TYPE;
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);

    V_ADDRESS_USA_OT := ADDRESS_USA_OT('DUMMY', 'M');

    V_CLOB := 'SELLING_STORE_MARKED_ON,' ||
              'STORE_NUMBER,' ||
              'STORE_NAME,' ||
              'LEGACY_GL_DIVISION,' ||
              'FACTS_DIVISION,' ||
              'DOMAIN,' ||
              'GROUP,' ||
              'DIVISION,' ||
              'AREA,' ||
              'DISTRICT,' ||
              'CITY_SALES_MANAGER,' ||
              'ZONE,' ||
              'SPECIAL_ROLES,' ||
              V_ADDRESS_USA_OT.print_header_delimited(',') ||',' ||
              'PHONE_NUMBER'  --ASP-783
              ;

    V_CLOB_FOR_EMAIL := V_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR cc_rec IN curs LOOP
        V_ADDRESS_USA_OT := ADDRESS_USA_OT(cc_rec.COST_CENTER_CODE, 'M');

        V_CLOB := '"' || IN_DATE || '",' ||
                  '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  GET_HIERARCHY_DETAIL_STRING(cc_rec.COST_CENTER_CODE) || '",' ||
                  V_ADDRESS_USA_OT.print_values_delimited(',') || ',' ||
                  '"' || cc_rec.PHONE_NUMBER || '"'     --ASP-783
                  ;

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;

    UTL_FILE.FCLOSE(OUTPUT_FILE);
    MAIL_PKG.SEND_MAIL('SELLING_STORES_MAIL_USA', NULL, NULL,V_CLOB_FOR_EMAIL);

END GENERATE_USA_SELLING_STR_FILE;

PROCEDURE GENERATE_CAN_SELLING_STR_FILE(
/**********************************************************
This process takes care of generating CAN selling store file

Database type ADDRESS_CAN_OT is used to create header and details.
1 - The CONSTRUCTOR FUNCTION address_can_ot is used to initialize member variables.
2 - The MEMBER FUNCTION print_header_delimited is used to create a Header for the DELIMITER passed
3 - The MEMBER FUNCTION print_values_delimited prints the values with the DELIMITER passed

Created : 09/27/2016 jxc517 CCN project Team....
Changed : 04/03/2017 gxg192 Changes to send email with file as an attachment
          04/04/2017 gxg192 Added comments for address_can_ot.
          05/05/2017 sxp130 - ASP-783 - Include Phone Number in Selling Store E-Mail Notification.
**********************************************************/
IN_DATE       IN     DATE)
IS
    CURSOR curs IS
        SELECT CC.*, COMMON_TOOLS.GET_PHONE_NUMBER(CC.COST_CENTER_CODE,'PRI') AS PHONE_NUMBER  --ASP-783
          FROM COST_CENTER CC
         WHERE CLOSE_DATE IS NULL
           AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
           AND CATEGORY = 'S'
           AND COUNTRY_CODE = 'CAN'
           AND GLOBAL_HIERARCHY_IND = 'Y'
           AND EXISTS (SELECT 1
                         FROM STORE S
                        WHERE CC.COST_CENTER_CODE = S.COST_CENTER_CODE
                          AND NVL(SELLING_STORE_FLAG, 'N') = 'Y'
                          AND SELLING_STORE_FLAG_MARK_DT = IN_DATE);

    V_CLOB                        CLOB;
    V_CLOB_FOR_EMAIL              CLOB;
    V_ADDRESS_CAN_OT              ADDRESS_CAN_OT;

    PATH        	  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(50) := 'CAN_SELLING_STORES_' || TO_CHAR(SYSDATE,'MMDDRR') || '.csv';
    OUTPUT_FILE     UTL_FILE.FILE_TYPE;
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                   ,FILENAME
                                   ,'W' --BINARY
                                   ,32767);

    V_ADDRESS_CAN_OT := ADDRESS_CAN_OT('DUMMY', 'M');

    V_CLOB := 'SELLING_STORE_MARKED_ON,' ||
              'STORE_NUMBER,' ||
              'STORE_NAME,' ||
              'LEGACY_GL_DIVISION,' ||
              'FACTS_DIVISION,' ||
              'DOMAIN,' ||
              'GROUP,' ||
              'DIVISION,' ||
              'AREA,' ||
              'DISTRICT,' ||
              'CITY_SALES_MANAGER,' ||
              'ZONE,' ||
              'SPECIAL_ROLES,' ||
              V_ADDRESS_CAN_OT.print_header_delimited(',')  ||',' ||
              'PHONE_NUMBER'   --ASP-783
              ;

    V_CLOB_FOR_EMAIL := V_CLOB;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR cc_rec IN curs LOOP
        V_ADDRESS_CAN_OT := ADDRESS_CAN_OT(cc_rec.COST_CENTER_CODE, 'M');

        V_CLOB := '"' || IN_DATE || '",' ||
                  '"' || cc_rec.COST_CENTER_CODE || '",' ||
                  '"' || cc_rec.COST_CENTER_NAME || '",' ||
                  GET_HIERARCHY_DETAIL_STRING(cc_rec.COST_CENTER_CODE) || '",' ||
                  V_ADDRESS_CAN_OT.print_values_delimited(',') || ',' ||
                  '"' || cc_rec.PHONE_NUMBER || '"'       --ASP-783
                  ;

        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;
    UTL_FILE.FCLOSE(OUTPUT_FILE);

    MAIL_PKG.SEND_MAIL('SELLING_STORES_MAIL_CAN', NULL, NULL,V_CLOB_FOR_EMAIL);

END GENERATE_CAN_SELLING_STR_FILE;

PROCEDURE GENERATE_SELLING_STORE_FILE(
/**********************************************************
	This procedure is intended to generate a file with the list of new selling stores
  created on the date passed

1 - consider only open/valid store cost centers under USA/CAN/PRI countries
2 - cost center should be a complete cost center => should be part of global, facts and legacy hierarchies
3 - selling store flag should have been set to "Y" on that day
4 - consider only mailling address for any country code

Created : 09/27/2016 jxc517 CCN project Team....
Changed :
**********************************************************/
IN_DATE       IN     DATE)
IS
BEGIN
    GENERATE_USA_SELLING_STR_FILE(IN_DATE);

    GENERATE_CAN_SELLING_STR_FILE(IN_DATE);

END GENERATE_SELLING_STORE_FILE;

PROCEDURE GENERATE_HRCHY_MISMATCH_FILE
/**********************************************************
This process takes care of generating EMAILS FOR HIER_TRNSFR_TERRITORY 
AND HIER_TRNSFR_DAD_CHNG_TERRITORY...

Created : 04/13/2017 pxb712 CCN project Team....
**********************************************************/

IS
    V_CLOB                        CLOB;
    V_DAD_CHANGE_CLOB             CLOB;
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('HRCHY_DAD_MISMATCH', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   BEGIN
      FOR REC IN (SELECT * 
                    FROM hierarchy_transfer_mail 
                   WHERE ENTRY_DATE  >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                           FROM BATCH_JOB
                                          WHERE BATCH_JOB_NAME = 'HRCHY_DAD_MISMATCH')) LOOP
         IF (REC.PROCESS_NAME = 'HIER_TRNSFR_TERRITORY') THEN          
            V_CLOB := REC.HRCHY_DTL_PREV_LVL_FROM
                      || ',' || REC.HRCHY_DTL_PREV_LVL_TO
                      || ',' || REC.HRCHY_DTL_CURR_ROW_VAL
                      || CHR(10)
                      || V_CLOB;
         ELSE
            V_DAD_CHANGE_CLOB := REC.HRCHY_DTL_PREV_LVL_FROM
                                 || ',' || REC.HRCHY_DTL_PREV_LVL_TO
                                 || ',' || REC.HRCHY_DTL_CURR_ROW_VAL
                                 || CHR(10)
                                 || V_DAD_CHANGE_CLOB;
         END IF;
      END LOOP;

       --Sending mail for the category 'HIER_TRNSFR_TERRITORY'
       IF V_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('HIER_TRNSFR_TERRITORY', NULL, NULL, V_CLOB);
       END IF;
       --Sending mail for the change of DAD on territory cost centers
       IF V_DAD_CHANGE_CLOB <> EMPTY_CLOB() THEN
           MAIL_PKG.SEND_MAIL('HIER_TRNSFR_DAD_CHNG_TERRITORY', NULL, NULL, V_DAD_CHANGE_CLOB);
       END IF;
    EXCEPTION
      WHEN OTHERS THEN
         V_TRANS_STATUS := 'ERROR';
    END;

   CCN_BATCH_PKG.UPDATE_BATCH_JOB('HRCHY_DAD_MISMATCH', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
END GENERATE_HRCHY_MISMATCH_FILE;

PROCEDURE GENERATE_STORE_PD_HRCHY_FILE
/**********************************************************
This procedure is intended to generate Price District Hierarchy reporting for stores pricing group
STORE_PDH_HRCHY.CSV
The Report is scheduled to run everyday 8am
Filters:
consider only Category = 'S' and stores attached to Price district Hierarchy

Created : 05/25/2017 rxa457 ASP-772 CCN project Team....
Changed : 10/17/2017 nxk927 CCN project Team....
          Changed the report to include everything even if the cost center 
          is not attached to Price district
        : 10/23/2017 nxk927 CCN project Team....
          Added O category cost center with polling status code of P and type code of 42
        : 02/20/2018 bxa919CCN Porject Team...
          modified the code in order to generate multiple spreadsheets for CAN and USA.
          CCN_SPREADSHEET package this takes sql query as input and parse the query data
          to built xml clob and generates .xlsx file. 
        : 03/22/2018 bxa919 CCN Project Team...
          Added code for MEX,BRB and OTHER Countries
        : 03.27/2018 bxa919 CCN Project Team....
          As User wants to display PROVINCE AND STATE_CODE in one single column.So made changes
          to display those values in single column
        : 08/21/2018 pxa852 CCN Project Team...
          Modified the code to include POS start date and POS end date fields in the Price hierarchy report.
**********************************************************/
IS
  CURSOR main_cursor IS
    SELECT CC.*
      FROM COST_CENTER CC
     WHERE CATEGORY             = 'S'
       AND NVL(CLOSE_DATE,TRUNC(SYSDATE))> TRUNC(SYSDATE)-1
     UNION ALL
    SELECT OC.* 
      FROM COST_CENTER OC
     WHERE CATEGORY =  'O'
       AND COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                  FROM POLLING
                                 WHERE POLLING_STATUS_CODE = 'P'
                                   AND EXPIRATION_DATE IS NULL)
       AND COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                  FROM TYPE
                                 WHERE TYPE_CODE = '42'
                                   AND EXPIRATION_DATE IS NULL)
       AND NVL(CLOSE_DATE,TRUNC(SYSDATE))> TRUNC(SYSDATE)-1
     ORDER BY 1;

  /* As the Address formats are different for CAN and USA, postal code and provice code columns are fetched 
  in order populate in CAN address fields */
  CURSOR address_cur IS
        SELECT COST_CENTER_CODE, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE_CODE, ZIP_CODE, ZIP_CODE_4,POSTAL_CODE,PROVINCE_CODE,PREMISES,AVENUE_LANE,DISTRICT,PARISH
          FROM ADDRESS_VW
         WHERE ADDRESS_TYPE = 'M'
           AND EXPIRATION_DATE IS NULL;

  CURSOR hierarchy_cur(P_COST_CENTER_CODE VARCHAR2) IS
    SELECT *
      FROM HIERARCHY_DETAIL_VIEW
     WHERE HRCHY_HDR_NAME  = 'GLOBAL_HIERARCHY'
       AND COST_CENTER_CODE = P_COST_CENTER_CODE;

  CURSOR polling_cur(P_COST_CENTER_CODE VARCHAR2) IS
      SELECT *
        FROM POLLING
       WHERE CURRENT_FLAG      = 'Y'
         AND COST_CENTER_CODE  = P_COST_CENTER_CODE;

  CURSOR type_cur(P_COST_CENTER_CODE VARCHAR2) IS
    SELECT *
      FROM TYPE
     WHERE EXPIRATION_DATE IS NULL
       AND COST_CENTER_CODE = P_COST_CENTER_CODE;

  CURSOR pricing_district_cur(P_COST_CENTER_CODE VARCHAR2) IS
    SELECT DISTRICT AS PRICE_DISTRICT
      FROM HIERARCHY_DETAIL_VIEW
     WHERE HRCHY_HDR_NAME   = 'PRICE_DISTRICT'
       AND COST_CENTER_CODE = P_COST_CENTER_CODE
       AND ROWNUM <= 1;

    PATH                        VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                    VARCHAR2(50) := 'STORE_PDH_HRCHY_MAIL' || '_'|| TO_CHAR(TRUNC(SYSDATE),'DD_MON_RRRR') ||'.xlsx'; 
    V_ADDRESS_STREET            VARCHAR2(200);
    V_ADDRESS_POSTAL            ADDRESS_VW.POSTAL_CODE%TYPE;
    V_PROVINCE_CODE             ADDRESS_VW.PROVINCE_CODE%TYPE;
    V_CITY                      ADDRESS_VW.CITY%TYPE;
    V_STATE_CODE                ADDRESS_VW.STATE_CODE%TYPE;
    V_PREMISES                  ADDRESS_VW.PREMISES%TYPE;
    V_AVENUE_LANE               ADDRESS_VW.AVENUE_LANE%TYPE;   
    V_DISTRICT                  ADDRESS_VW.DISTRICT%TYPE;    
    V_PARISH                    ADDRESS_VW.PARISH%TYPE;
    V_ADDRESS_ZIP               VARCHAR2(10);
    V_PHONE_NUMBER              VARCHAR2(14);
    V_FAX_NUMBER                VARCHAR2(14);
    V_DIVISION                  HIERARCHY_DETAIL_VIEW.DIVISION%TYPE;
    V_DIVISION_NAME             HIERARCHY_DETAIL_VIEW.DIVISION_NAME%TYPE;
    V_AREA                      HIERARCHY_DETAIL_VIEW.AREA%TYPE;
    V_AREA_NAME                 HIERARCHY_DETAIL_VIEW.AREA_NAME%TYPE;
    V_AREA_SHORT_NAME           VARCHAR2(100);
    V_DAD                       HIERARCHY_DETAIL_VIEW.DISTRICT%TYPE;
    V_DAD_DESC                  HIERARCHY_DETAIL_VIEW.DISTRICT_NAME%TYPE;
    V_POLLING_STATUS_CODE       POLLING.POLLING_STATUS_CODE%TYPE;
    V_POLLING_STATUS_CODE_DESC  CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
    V_TYPE_CODE                 TYPE.TYPE_CODE%TYPE;
    V_TYPE_CODE_DESC            CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
    V_PRICE_DISTRICT            VARCHAR2(100);
    V_POS_START_DATE            POLLING.POLLING_START_DATE%TYPE;
    V_POS_END_DATE              POLLING.POLLING_STOP_DATE%TYPE;
    V_CUR_COUNT                 NUMBER := 0;
    V_STATEMENT_DESC            VARCHAR2(1000);
    V_REC_COUNT                 NUMBER := 0;

    TYPE ADDRESS_VW_REC_TYPE IS TABLE OF ADDRESS_CUR%ROWTYPE INDEX BY VARCHAR2(6);
    AAT_ADDRESS_VW ADDRESS_VW_REC_TYPE;
BEGIN

    /* In order to re-load the new records in the USA,CAN table .The exsisting records need to be deleted as CCN_SPREADSHEET package reads the records from the table
       everytime the file is generated the new records need to be inserted*/
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_PRICING_DISTRICT_USA';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_PRICING_DISTRICT_CAN';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_PRICING_DISTRICT_OTHER';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_PRICING_DISTRICT_MEX';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_PRICING_DISTRICT_BRB';

    FOR rec IN address_cur LOOP
        AAT_ADDRESS_VW(rec.COST_CENTER_CODE) := rec;
    END LOOP;

    V_CUR_COUNT := 0;
    FOR cc_rec IN main_cursor LOOP
        V_CUR_COUNT := V_CUR_COUNT + 1;

        /* Fetching statement description value */
        V_STATEMENT_DESC:= NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('STATEMENT_TYPE', 'COD', cc_rec.STATEMENT_TYPE),'N/A');

        /*Fetch Address Information*/
        V_ADDRESS_STREET := NULL;
        V_CITY           := NULL;
        V_STATE_CODE     := NULL;
        V_ADDRESS_ZIP    := NULL;
        V_ADDRESS_POSTAL := NULL;
        V_PROVINCE_CODE  := NULL;
        V_PREMISES       := NULL;
        V_AVENUE_LANE    := NULL;          
        V_DISTRICT       := NULL;            
        V_PARISH         := NULL; 
        IF AAT_ADDRESS_VW.EXISTS(cc_rec.COST_CENTER_CODE) THEN
            IF AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_1 IS NOT NULL OR AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_2 IS NOT NULL THEN
              V_ADDRESS_STREET := LTRIM(RTRIM(AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_1||' '||AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ADDRESS_LINE_2
                                              )
                                        );
            END IF;
            V_CITY           := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).CITY;
            V_STATE_CODE     := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).STATE_CODE;
            V_ADDRESS_POSTAL := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).POSTAL_CODE;
            V_PROVINCE_CODE  := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).PROVINCE_CODE;
            V_PREMISES       := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).PREMISES ;
            V_AVENUE_LANE    := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).AVENUE_LANE ;          
            V_DISTRICT       := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).DISTRICT ;            
            V_PARISH         := AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).PARISH  ; 
            IF AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ZIP_CODE IS NOT NULL THEN
              V_ADDRESS_ZIP := LTRIM(RTRIM(AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ZIP_CODE||' ' ||AAT_ADDRESS_VW(cc_rec.COST_CENTER_CODE).ZIP_CODE_4
                                           )
                                     );
            END IF;
        END IF;

        /*Fetch Phone Information*/
        V_PHONE_NUMBER := COMMON_TOOLS.GET_FORMATTED_PHONE_NUMBER(CC_REC.COST_CENTER_CODE, 'PRI');
        V_FAX_NUMBER   := COMMON_TOOLS.GET_FORMATTED_PHONE_NUMBER(CC_REC.COST_CENTER_CODE, 'FAX');

        /*Fetch Global Hierarchy Information for Area, and DAD*/
        V_DIVISION := NULL;
        V_DIVISION_NAME := NULL;
        V_AREA := NULL;
        V_AREA_NAME := NULL;
        V_AREA_SHORT_NAME := NULL;
        V_DAD := NULL;
        V_DAD_DESC := NULL;
        FOR rec IN hierarchy_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_DIVISION := rec.DIVISION;
            V_DIVISION_NAME := rec.DIVISION_NAME;
            V_AREA := rec.AREA;
            V_AREA_NAME := rec.AREA_NAME;
            V_AREA_SHORT_NAME := RTRIM(REPLACE(REPLACE(rec.AREA_NAME,
                                                       'AREA',
                                                       ''),
                                               'REGION',
                                               '')
                                       );
            V_DAD := rec.DIVISION || rec.AREA || rec.DISTRICT;
            V_DAD_DESC := rec.DISTRICT_NAME;
        END LOOP;

        /*Fetch Polling Information*/
        V_POLLING_STATUS_CODE      := NULL;
        V_POLLING_STATUS_CODE_DESC := NULL;
        FOR rec IN polling_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_POLLING_STATUS_CODE      := rec.POLLING_STATUS_CODE;
            V_POLLING_STATUS_CODE_DESC := NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('POLLING_STATUS_CODE',
                                                                                              'COD',
                                                                                              rec.POLLING_STATUS_CODE),
                                              'N/A');
            V_POS_START_DATE           := rec.POLLING_START_DATE;
            V_POS_END_DATE             := rec.POLLING_STOP_DATE;
        END LOOP;

        /*Fetch Type Information*/
        V_TYPE_CODE      := NULL;
        V_TYPE_CODE_DESC := NULL;
        FOR rec IN type_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_TYPE_CODE      := rec.TYPE_CODE;
            V_TYPE_CODE_DESC := NVL(CCN_PICK_LIST_PKG.GET_CODE_DETAIL_VALUE_DSCRPTN('TYPE_CODE',
                                                                                    'COD',
                                                                                    rec.TYPE_CODE),
                                    'N/A');
        END LOOP;

        /*Fetch price District Information*/
        V_PRICE_DISTRICT := NULL;
        FOR rec IN pricing_district_cur(cc_rec.COST_CENTER_CODE) LOOP
            V_PRICE_DISTRICT := rec.PRICE_DISTRICT;
        END LOOP;
        --In order to generate multiple sheets for CAN and USA .The CCN_SPREADSHEET package takes table data
        --as input inorder to parse and build xml clob.Based on Country code the data
        --is inserted in corresponding tables. As the address representation is different for different countries
        IF CC_REC.COUNTRY_CODE IN ('USA', 'PRI') THEN
           --Inserting data in CCN_PRICING_DISTRICT_USA tables for USA country code*/
            INSERT INTO CCN_PRICING_DISTRICT_USA VALUES ( cc_rec.COST_CENTER_CODE 
                                                          , cc_rec.COST_CENTER_NAME 
                                                          , V_ADDRESS_STREET 
                                                          , V_CITY 
                                                          , V_STATE_CODE 
                                                          , V_ADDRESS_ZIP 
                                                          , V_PHONE_NUMBER 
                                                          , V_FAX_NUMBER 
                                                          , V_DIVISION 
                                                          , V_DIVISION_NAME 
                                                          , V_AREA 
                                                          , V_AREA_NAME 
                                                          , V_AREA_SHORT_NAME 
                                                          , V_DAD 
                                                          , V_DAD_DESC 
                                                          , CC_REC.OPEN_DATE 
                                                          , CC_REC.CLOSE_DATE 
                                                          , CC_REC.STATEMENT_TYPE 
                                                          , V_STATEMENT_DESC 
                                                          , V_POLLING_STATUS_CODE 
                                                          , V_POLLING_STATUS_CODE_DESC 
                                                          , V_TYPE_CODE 
                                                          , V_TYPE_CODE_DESC 
                                                          , V_PRICE_DISTRICT
                                                          , V_POS_START_DATE
                                                          , V_POS_END_DATE );
          /* Inserting data in CCN_PRICING_DISTRICT_CAN tables for CAN country code*/
        ELSIF CC_REC.COUNTRY_CODE='CAN' THEN
            --Inserting data in CCN_PRICING_DISTRICT_CAN tables for CAN country code
             INSERT INTO CCN_PRICING_DISTRICT_CAN VALUES ( cc_rec.COST_CENTER_CODE 
                                                         , cc_rec.COST_CENTER_NAME 
                                                         , V_ADDRESS_STREET 
                                                         , V_CITY 
                                                         , V_PROVINCE_CODE
                                                         , V_ADDRESS_POSTAL
                                                         , V_PHONE_NUMBER 
                                                         , V_FAX_NUMBER 
                                                         , V_DIVISION 
                                                         , V_DIVISION_NAME 
                                                         , V_AREA 
                                                         , V_AREA_NAME 
                                                         , V_AREA_SHORT_NAME 
                                                         , V_DAD 
                                                         , V_DAD_DESC 
                                                         , CC_REC.OPEN_DATE 
                                                         , CC_REC.CLOSE_DATE 
                                                         , CC_REC.STATEMENT_TYPE 
                                                         , V_STATEMENT_DESC 
                                                         , V_POLLING_STATUS_CODE 
                                                         , V_POLLING_STATUS_CODE_DESC 
                                                         , V_TYPE_CODE 
                                                         , V_TYPE_CODE_DESC 
                                                         , V_PRICE_DISTRICT
                                                         , V_POS_START_DATE
                                                         , V_POS_END_DATE );
    /* Inserting data in CCN_PRICING_DISTRICT_MEX tables for MEX country code*/
        ELSIF CC_REC.COUNTRY_CODE='MEX' THEN
            --Inserting data in CCN_PRICING_DISTRICT_MEX tables for MEX country code
             INSERT INTO CCN_PRICING_DISTRICT_MEX VALUES ( cc_rec.COST_CENTER_CODE 
                                                         , cc_rec.COST_CENTER_NAME 
                                                         , V_ADDRESS_STREET 
                                                         , V_CITY 
                                                         , V_PROVINCE_CODE
                                                         , V_ADDRESS_POSTAL
                                                         , V_PHONE_NUMBER 
                                                         , V_FAX_NUMBER 
                                                         , V_DIVISION 
                                                         , V_DIVISION_NAME 
                                                         , V_AREA 
                                                         , V_AREA_NAME 
                                                         , V_AREA_SHORT_NAME 
                                                         , V_DAD 
                                                         , V_DAD_DESC 
                                                         , CC_REC.OPEN_DATE 
                                                         , CC_REC.CLOSE_DATE 
                                                         , CC_REC.STATEMENT_TYPE 
                                                         , V_STATEMENT_DESC 
                                                         , V_POLLING_STATUS_CODE 
                                                         , V_POLLING_STATUS_CODE_DESC 
                                                         , V_TYPE_CODE 
                                                         , V_TYPE_CODE_DESC 
                                                         , V_PRICE_DISTRICT
                                                         , V_POS_START_DATE
                                                         , V_POS_END_DATE );
    /* Inserting data in CCN_PRICING_DISTRICT_BRB tables for BRB country code*/
        ELSIF CC_REC.COUNTRY_CODE='BRB' THEN
            --Inserting data in CCN_PRICING_DISTRICT_BRB tables for BRB country code
             INSERT INTO CCN_PRICING_DISTRICT_BRB VALUES ( cc_rec.COST_CENTER_CODE 
                                                         , cc_rec.COST_CENTER_NAME 
                                                         , V_AVENUE_LANE
                                                         , V_PREMISES   
                                                         , V_DISTRICT          
                                                         , V_PARISH     
                                                         , V_ADDRESS_POSTAL
                                                         , V_PHONE_NUMBER 
                                                         , V_FAX_NUMBER 
                                                         , V_DIVISION 
                                                         , V_DIVISION_NAME 
                                                         , V_AREA 
                                                         , V_AREA_NAME 
                                                         , V_AREA_SHORT_NAME 
                                                         , V_DAD 
                                                         , V_DAD_DESC 
                                                         , CC_REC.OPEN_DATE 
                                                         , CC_REC.CLOSE_DATE 
                                                         , CC_REC.STATEMENT_TYPE 
                                                         , V_STATEMENT_DESC 
                                                         , V_POLLING_STATUS_CODE 
                                                         , V_POLLING_STATUS_CODE_DESC 
                                                         , V_TYPE_CODE 
                                                         , V_TYPE_CODE_DESC 
                                                         , V_PRICE_DISTRICT
                                                         , V_POS_START_DATE
                                                         , V_POS_END_DATE );
    /* Inserting data in CCN_PRICING_DISTRICT_OTHER tables for OTHER country code*/
        ELSE
            --Inserting data in CCN_PRICING_DISTRICT_OTHER tables for OTHER country code
             INSERT INTO CCN_PRICING_DISTRICT_OTHER VALUES ( cc_rec.COST_CENTER_CODE 
                                                         , cc_rec.COST_CENTER_NAME 
                                                         , V_ADDRESS_STREET 
                                                         , V_CITY 
                                                         , NVL(V_STATE_CODE,V_PROVINCE_CODE)
                                                         , V_ADDRESS_POSTAL
                                                         , V_PHONE_NUMBER 
                                                         , V_FAX_NUMBER 
                                                         , V_DIVISION 
                                                         , V_DIVISION_NAME 
                                                         , V_AREA 
                                                         , V_AREA_NAME 
                                                         , V_AREA_SHORT_NAME 
                                                         , V_DAD 
                                                         , V_DAD_DESC 
                                                         , CC_REC.OPEN_DATE 
                                                         , CC_REC.CLOSE_DATE 
                                                         , CC_REC.STATEMENT_TYPE 
                                                         , V_STATEMENT_DESC 
                                                         , V_POLLING_STATUS_CODE 
                                                         , V_POLLING_STATUS_CODE_DESC 
                                                         , V_TYPE_CODE 
                                                         , V_TYPE_CODE_DESC 
                                                         , V_PRICE_DISTRICT
                                                         , V_POS_START_DATE
                                                         , V_POS_END_DATE );
        END IF; 
    END LOOP;
    COMMIT;
  /*Invoking the package with  different countries*/

    --Below condition is used to fetch the count of the records in order invoke the spreadsheet proc
    SELECT COUNT(*) INTO V_REC_COUNT FROM CCN_PRICING_DISTRICT_USA;
    IF V_REC_COUNT >0 THEN
        --Creating first sheet of the excel - USA_PRICE_DISTRICT_DETAILS
        CCN_SPREADSHEET_PKG.QUERY2SHEET('SELECT * FROM CCN_PRICING_DISTRICT_USA ORDER BY STORE_NO',TRUE,NULL,NULL,NULL,'USA_PDH_DTLS');
    END IF;

    --Below condition is used to fetch the count of the records in order invoke the spreadsheet proc
    SELECT COUNT(*) INTO V_REC_COUNT FROM CCN_PRICING_DISTRICT_CAN;
    IF V_REC_COUNT >0 THEN
        --Creating second sheet of the excel - CAN_PRICE_DISTRICT_DETAILS
        CCN_SPREADSHEET_PKG.QUERY2SHEET('SELECT * FROM CCN_PRICING_DISTRICT_CAN ORDER BY STORE_NO',TRUE,NULL,NULL,NULL,'CAN_PDH_DTLS');
    END IF;

    --Below condition is used to fetch the count of the records in order invoke the spreadsheet proc
    SELECT COUNT(*) INTO V_REC_COUNT FROM CCN_PRICING_DISTRICT_OTHER;
    IF V_REC_COUNT >0 THEN
       --Creating second sheet of the excel - OTHER_CNTRY_PRICE_DISTRICT_DETAILS
        CCN_SPREADSHEET_PKG.QUERY2SHEET('SELECT * FROM CCN_PRICING_DISTRICT_OTHER ORDER BY STORE_NO',TRUE,NULL,NULL,NULL,'OTHER_CNTRY_PDH_DTLS');
    END IF;

    --Below condition is used to fetch the count of the records in order invoke the spreadsheet proc
    SELECT COUNT(*) INTO V_REC_COUNT FROM CCN_PRICING_DISTRICT_MEX;
    IF V_REC_COUNT >0 THEN
       --Creating second sheet of the excel - MEX_PRICE_DISTRICT_DETAILS
        CCN_SPREADSHEET_PKG.QUERY2SHEET('SELECT * FROM CCN_PRICING_DISTRICT_MEX ORDER BY STORE_NO',TRUE,NULL,NULL,NULL,'MEX_PDH_DTLS');
    END IF;

    --Below condition is used to fetch the count of the records in order invoke the spreadsheet proc
    SELECT COUNT(*) INTO V_REC_COUNT FROM CCN_PRICING_DISTRICT_BRB;
    IF V_REC_COUNT >0 THEN
        --Creating second sheet of the excel - BRB_PRICE_DISTRICT_DETAILS
        CCN_SPREADSHEET_PKG.QUERY2SHEET('SELECT * FROM CCN_PRICING_DISTRICT_BRB ORDER BY STORE_NO',TRUE,NULL,NULL,NULL,'BRB_PDH_DTLS');
    END IF;

    --Creating the final excel based on the path and file name procided
    --NOTE: The clob is built in the package "CCN_SPREADSHEET_PKG" which will be used by the below call
    CCN_SPREADSHEET_PKG.SAVE(PATH,FILENAME);
    --Below procedure will send the excel file as attachement through email based on the mail category 
    MAIL_PKG.SEND_MAIL('STORE_PDH_HRCHY_MAIL');
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(-20999, 'CCN_BATCH_PROCESS.GENERATE_STORE_PD_HRCHY_FILE','GENERATE STORE PRICE DISTRICT HIERARCHY REPORTING FAILED AT '||SQLCODE||' : '||                SQLERRM);
END GENERATE_STORE_PD_HRCHY_FILE;

FUNCTION FILL_SPACES (
/******************************************************************************************
This Function is to fill the required spaces
created : 05/27/2017 sxp130 ASP-795
modified:
*******************************************************************************************/
IN_NUMBER_OF_SPACES      IN     NUMBER)
RETURN VARCHAR2
IS
   V_VAL  VARCHAR2(10);
BEGIN
   RETURN RPAD(' ',IN_NUMBER_OF_SPACES);
EXCEPTION
   WHEN OTHERS THEN
      RETURN NULL;
END FILL_SPACES;

PROCEDURE GNRT_STORE_BANK_CARD_MRCHNT_FL(
/******************************************************************************************
This Procedure create file STORE_BANK_CARD_MERCHANT_FL.CSV on the server
File structure:
MERCHANT_ID,SUBSTR(MERCHANT_ID, 7, 4),PCI_MERCHANT_ID,DISCOVER_ID,PCI_DISCOVER_ID,AMEX_SE_ID
Filters:
POLLING_STATUS_CODE = 'P'
CATEGORY IN ('S','O')
created : 05/25/2017 sxp130 ASP-795
modified: 09/06/2017 sxp130 ASP-795 - Incorporated code changes for PAT E-Mail on
        : Tuesday, September 05, 2017 10:54AM - PAT's E-mail.
        : 10/02/2017 rxa457 CCN Project Team...
          file name changed merchtb.dat
        :01/19/2018 bxa919 CCN Project Team...
         adding new columns MERCH_ID_CAN_MC,PCI_MERCH_ID_CAN_MC from bank_card table 
         to populate in the file..
modified: 03/15/2018 rxv940 CCN Project Team....
          Removing out the email part and logic involved in creating CLOB for email
          - shell script FTP'es
        : 03/16/2018 nxk927
          polling status code Q added in the filter
        : 06/22/2018 sxg151 CCN Project Team...
          Added logic to send an email along with FTP ASP - 1082.
        : 06/19/2018 sxg151 CCN Project Team...
          Removed CHR(13) in APPEND_CLOB  procedure "Text file line breaks wrong, after the file is transferred to UAR(Windows)server".
*******************************************************************************************/
IN_TMSTMP  IN VARCHAR2)
AS
   CURSOR CUR_COST_CENTER IS
      SELECT *
         FROM COST_CENTER
        WHERE CLOSE_DATE IS NULL
          AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
          AND CATEGORY IN ('S', 'O')
          AND EXISTS (SELECT 1
                        FROM POLLING
                       WHERE POLLING.COST_CENTER_CODE = COST_CENTER.COST_CENTER_CODE
                         AND POLLING.EXPIRATION_DATE IS NULL
                         AND POLLING.CURRENT_FLAG = 'Y'
                         AND UPPER(POLLING.POLLING_STATUS_CODE) IN ('P','Q'))
        ORDER BY 1;

   CURSOR CUR_BANK_CARD (P_COST_CENTER_CODE VARCHAR2) IS
      SELECT *
        FROM BANK_CARD
       WHERE BANK_CARD.COST_CENTER_CODE = P_COST_CENTER_CODE
         AND BANK_CARD.EXPIRATION_DATE IS NULL;

   --Variable Declaration
   PATH                VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
   FILENAME            VARCHAR2(50) := 'merchtb_' || IN_TMSTMP || '.dat';
   OUTPUT_FILE         UTL_FILE.FILE_TYPE;
   V_CLOB              CLOB;
   V_CLOB_FOR_EMAIL    CLOB;--ASP-1082 

--ASP-1082
PROCEDURE APPEND_CLOB(
   IN_VALUE         IN     VARCHAR2,
   IN_COST_CENTER   IN     VARCHAR2,
   IN_OUT_MAIL_CLOB IN OUT CLOB)
IS
   V_CLOB              CLOB;
BEGIN
   IF IN_VALUE IS NOT NULL AND NOT REGEXP_LIKE(IN_VALUE, '^[9-9]+$' ) AND NOT REGEXP_LIKE(IN_VALUE, '^[0-0]+$' ) THEN
      V_CLOB := IN_VALUE || ',' || SUBSTR(IN_COST_CENTER, 3);--ASP-1082 --Removed  || CHR(13)
      IF V_CLOB <> EMPTY_CLOB() THEN
         UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
         IF IN_OUT_MAIL_CLOB <> EMPTY_CLOB() THEN
            IN_OUT_MAIL_CLOB := IN_OUT_MAIL_CLOB || CHR(10) || V_CLOB;
         ELSE
            IN_OUT_MAIL_CLOB := V_CLOB;
         END IF;
      END IF;
   END IF;
END APPEND_CLOB;

BEGIN
   OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                 ,FILENAME
                                 , 'W' --BINARY
                                 , 32767);

   FOR REC_CC IN CUR_COST_CENTER LOOP
      /*Fetch Bank_Card Information for each Store*/
      FOR REC_BC IN CUR_BANK_CARD (REC_CC.COST_CENTER_CODE)  LOOP
         --Append MERCHANT_ID to file
         APPEND_CLOB(REC_BC.MERCHANT_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append PCI_MERCHANT_ID to file
         APPEND_CLOB(REC_BC.PCI_MERCHANT_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append DISCOVER_ID to file
         APPEND_CLOB(REC_BC.DISCOVER_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append PCI_DISCOVER_ID to file
         APPEND_CLOB(REC_BC.PCI_DISCOVER_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
         --Append AMEX_SE_ID to file
         APPEND_CLOB(REC_BC.AMEX_SE_ID, REC_BC.COST_CENTER_CODE, V_CLOB_FOR_EMAIL);
      END LOOP;
   END LOOP;
   UTL_FILE.FCLOSE(OUTPUT_FILE);
   --Sending mail for the category 'STORE_BANK_CARD_MERCHANT' --ASP-1082
   IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('STORE_BANK_CARD_MERCHANT', NULL, NULL, V_CLOB_FOR_EMAIL);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      IF UTL_FILE.IS_OPEN(output_file) THEN
        UTL_FILE.FCLOSE(output_file);
      END IF;
      RAISE;
END GNRT_STORE_BANK_CARD_MRCHNT_FL;

PROCEDURE GNRT_STORE_BANK_CARD_SERIAL_FL(
/******************************************************************************************
This Procedure create file STORE_BANK_CARD_SERIAL.CSV on the server
Filters:
POLLING_STATUS_CODE = 'P'
CATEGORY IN ('S','O')
created : 05/25/2017 sxp130 ASP-795
modified: 02/23/2018 nxk927
          polling status code Q added in the filter
modified: 03/15/2018 rxv940 CCN Project Team....
          Removing out the email part and logic involved in creating CLOB for email
          - shell script FTP'es
modified: 03/16/2018 nxk927
          Considering all the records without merchant id and using 0's for null merchant id, null discover id and
          null AMEX_SE_ID
        : 06/22/2018 sxg151 CCN Project Team...
          Added logic to send an email along with FTP ASP - 1082.
*******************************************************************************************/
IN_TMSTMP  IN VARCHAR2)
AS
   CURSOR CUR_COST_CENTER IS
      SELECT *
        FROM COST_CENTER
       WHERE CLOSE_DATE IS NULL
         AND NVL(OPEN_DATE,SYSDATE) <> '01-JAN-2099'
         AND CATEGORY IN ('S', 'O')
         AND EXISTS (SELECT 1
                        FROM POLLING
                       WHERE POLLING.COST_CENTER_CODE = COST_CENTER.COST_CENTER_CODE
                         AND POLLING.EXPIRATION_DATE IS NULL
                         AND POLLING.CURRENT_FLAG = 'Y'
                         AND UPPER(POLLING.POLLING_STATUS_CODE) IN ('P','Q'))
       ORDER BY 1;
   CURSOR CUR_BANK_CARD (P_COST_CENTER_CODE VARCHAR2) IS
      SELECT *
        FROM BANK_CARD
       WHERE BANK_CARD.COST_CENTER_CODE = P_COST_CENTER_CODE
         AND BANK_CARD.EXPIRATION_DATE IS NULL;
   CURSOR CUR_HIER_DET_VIEW (P_COST_CENTER_CODE VARCHAR2) IS
      SELECT *
        FROM GLOBAL_HIERARCHY_DETAIL_VIEW
       WHERE COST_CENTER_CODE =   P_COST_CENTER_CODE;
   CURSOR CUR_ADDRESS IS
      SELECT COST_CENTER_CODE, 
             ADDRESS_LINE_1,
             CITY,
             STATE_CODE,
             PROVINCE_CODE,
             ZIP_CODE,
             POSTAL_CODE
        FROM ADDRESS_VW
       WHERE ADDRESS_TYPE = 'M'
         AND EXPIRATION_DATE IS NULL;

   TYPE ADDRESS_VW_REC_TYPE IS RECORD (COST_CENTER_CODE     VARCHAR2(6),
                                       ADDRESS_LINE_1       VARCHAR2(2000),
                                       CITY                 VARCHAR2(100),
                                       STATE_CODE           VARCHAR2(100),
                                       PROVINCE_CODE        VARCHAR2(100),
                                       ZIP_CODE             VARCHAR2(100),
                                       POSTAL_CODE          VARCHAR2(100));

   TYPE RT_ADDRESS_VW IS TABLE OF ADDRESS_VW_REC_TYPE INDEX BY VARCHAR2(6);
   AAT_ADDRESS_VW RT_ADDRESS_VW; --Associative Array Type

   --Variable Declaration
   PATH                     VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
   FILENAME                 VARCHAR2(50) := 'STORE_BANK_CARD_SERIAL_' || IN_TMSTMP || '.dat';
   OUTPUT_FILE              UTL_FILE.FILE_TYPE;
   V_DIVISION_NO            VARCHAR2(200);
   V_AREA                   VARCHAR2(200);
   V_DISTRICT               VARCHAR2(200);
   V_MERCHANT_ID            VARCHAR2(200);
   V_DISCOVER_ID            VARCHAR2(200);
   V_AMEX_SE_ID             VARCHAR2(200);
   V_ADDRESS_LINE_1         VARCHAR2(200);
   V_CITY                   VARCHAR2(200);
   V_STATE_CODE             VARCHAR2(200);
   V_ZIP_CODE               VARCHAR2(200);
   V_CLOB                   CLOB;
   V_CLOB_FOR_EMAIL         CLOB;
BEGIN
   OUTPUT_FILE := UTL_FILE.FOPEN (PATH
                                 ,FILENAME
                                 , 'W' --BINARY
                                 , 32767);

   FOR REC IN CUR_ADDRESS LOOP
      AAT_ADDRESS_VW(REC.COST_CENTER_CODE) := REC;
   END LOOP;

   FOR REC_CC IN CUR_COST_CENTER LOOP
      --Variable initialize to NULL
      V_DIVISION_NO            := FILL_SPACES(2);
      V_AREA                   := FILL_SPACES(2);
      V_DISTRICT               := FILL_SPACES(2);
      V_MERCHANT_ID            := NULL;
      V_DISCOVER_ID            := NULL;
      V_AMEX_SE_ID             := NULL;
      V_ADDRESS_LINE_1         := FILL_SPACES(30);
      V_CITY                   := FILL_SPACES(20);
      V_STATE_CODE             := FILL_SPACES(2);
      V_ZIP_CODE               := FILL_SPACES(10);
      V_CLOB                   := NULL;
      /*Fetch Global Hierarchy Information for DIVISION, AREA and DISTRICT*/
      FOR REC_HD IN CUR_HIER_DET_VIEW (REC_CC.COST_CENTER_CODE)  LOOP
         V_DIVISION_NO := RPAD(NVL(REC_HD.DIVISION,' '),2,' ');
         V_AREA := RPAD(NVL(REC_HD.AREA,' '),2,' ');
         V_DISTRICT := RPAD(NVL(REC_HD.DISTRICT,' '),2,' ');
      END LOOP;

      /*Fetch Bank_Card Information for MERCHANT_ID, DISCOVER_ID and AMEX_SE_ID*/
      FOR REC_BC IN CUR_BANK_CARD (REC_CC.COST_CENTER_CODE)  LOOP
         V_MERCHANT_ID := REC_BC.MERCHANT_ID;
         V_DISCOVER_ID := REC_BC.DISCOVER_ID;
         V_AMEX_SE_ID  := REC_BC.AMEX_SE_ID;
      END LOOP;

      /*Fetch Address Information*/
      IF AAT_ADDRESS_VW.EXISTS(REC_CC.COST_CENTER_CODE) THEN
         V_ADDRESS_LINE_1 := RPAD(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ADDRESS_LINE_1,' '),30,' ');
         V_CITY := RPAD(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).CITY,' '),20,' ');
         V_STATE_CODE := RPAD(NVL(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).STATE_CODE, AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).PROVINCE_CODE),' '),2,' ');
         V_ZIP_CODE :=  RPAD(NVL(NVL(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ZIP_CODE, AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).POSTAL_CODE),' '),10,' ');   
      END IF;

      V_CLOB :=   '60'                                                    ||
                   RPAD(NVL(SUBSTR(REC_CC.COST_CENTER_CODE,3),' '),4,' ') ||
                   FILL_SPACES(12)                                        ||
                   RPAD(NVL(REC_CC.COST_CENTER_NAME,' '),35,' ')          ||
                   FILL_SPACES(73)                                        ||
                   V_DIVISION_NO                                          ||
                   FILL_SPACES(15)                                        ||
                   V_AREA                                                 ||
                   FILL_SPACES(15)                                        ||
                   V_DISTRICT                                             ||
                   FILL_SPACES(3)                                         ||
                   RPAD(NVL(V_MERCHANT_ID,'0'),11,'0')                    ||
                   FILL_SPACES(4)                                         ||
                   RPAD(NVL(V_DISCOVER_ID,'0'),15,'0')                    ||
                   FILL_SPACES(5)                                         ||
                   RPAD(NVL(V_AMEX_SE_ID,'0'),10,'0')                     ||
                   FILL_SPACES(5)                                         ||
                   V_ADDRESS_LINE_1                                       ||
                   FILL_SPACES(2)                                         ||
                   V_CITY                                                 ||
                   FILL_SPACES(1)                                         ||
                   V_STATE_CODE                                           ||
                   FILL_SPACES(3)                                         ||
                   V_ZIP_CODE                                             ||
                   FILL_SPACES(2)                                         ||
                   RPAD(NVL(REC_CC.STATEMENT_TYPE,' '),2,' ')             ||
                   FILL_SPACES(13);

      IF V_CLOB <> EMPTY_CLOB() THEN
         UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
         IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
            V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
         ELSE
            V_CLOB_FOR_EMAIL := V_CLOB;
         END IF;
      END IF;
   END LOOP;

   UTL_FILE.FCLOSE(OUTPUT_FILE);
   --Sending mail for the category 'STORE_BANK_CARD_SERIAL'
   IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
      MAIL_PKG.SEND_MAIL('STORE_BANK_CARD_SERIAL', NULL, NULL, V_CLOB_FOR_EMAIL);
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      UTL_FILE.FCLOSE(OUTPUT_FILE);
      RAISE;
END GNRT_STORE_BANK_CARD_SERIAL_FL;

PROCEDURE GENERATE_STORE_BANK_CARD_FILE(
/**********************************************************
This procedure is intended to generate below files which describes store and merchant details
1. STORE_BANK_CARD_MERCHANT.CSV
2. STORE_BANK_CARD_SERIAL.DAT
Filters:
1 - consider only POLLING_STATUS_CODE = 'P' and CATEGORY IN ( 'S', 'O' )
Created : 05/25/2017 sxp130 CCN project Team.... - ASP-795
Changed : 03/15/2018 rxv940 CCN project Team....
          Created an input variable that gets appended to file name
**********************************************************/
IN_TMSTMP   IN VARCHAR2)
IS
BEGIN
    GNRT_STORE_BANK_CARD_MRCHNT_FL(IN_TMSTMP);
    GNRT_STORE_BANK_CARD_SERIAL_FL(IN_TMSTMP);
END GENERATE_STORE_BANK_CARD_FILE;

PROCEDURE  GENERATE_VALUE_LINK_PROCESS
/**********************************************************
The procedure is intended to generate below files which  describes the merchant details.
1.VALUELINK_SRA31000.TXT. 
Filters:
1 - consider only POLLING_STATUS_CODE = 'P' and CATEGORY IN ( 'P', 'Q' )
Created : 11/03/2017 bxa919 CCN project Team.... - ASP-800
Changed : 11/10/2017 bxa919 CCN project Team.... - ASP-800
          Removing filtering on open date to exclude 01-Jan-2099
          Phone Number should be (999) 999-9999 if not available
**********************************************************/
IS
    CURSOR CUR_COST_CENTER IS
        SELECT CC.COST_CENTER_CODE,
               CC.COST_CENTER_NAME,
               NVL(COMMON_TOOLS.GET_PHONE_NUMBER(CC.COST_CENTER_CODE,'PRI'), '9999999999') AS PHONE_NUMBER
          FROM COST_CENTER CC
            /* Actibve Cost Centers */
         WHERE CLOSE_DATE  IS NULL
           /* Excludes the canadian statement types */
           AND STATEMENT_TYPE NOT IN ('CN','AC')
           AND EXISTS (SELECT 1
                         FROM POLLING P
                        /* checks for the polling status as 'P' or 'Q' */
                        WHERE P.COST_CENTER_CODE = CC.COST_CENTER_CODE
                          AND POLLING_STATUS_CODE IN ('P','Q')
                          AND CURRENT_FLAG = 'Y')
         ORDER BY SUBSTR(CC.COST_CENTER_CODE, 3);

    CURSOR CUR_ADDRESS IS
        SELECT COST_CENTER_CODE,
               ADDRESS_LINE_1,
               CITY,
               STATE_CODE,
               ZIP_CODE,
               ZIP_CODE_4
         FROM  ADDRESS_VW
        WHERE  ADDRESS_TYPE   = 'M'
          AND  EXPIRATION_DATE IS NULL;

    TYPE ADDRESS_VW_REC_TYPE IS RECORD (COST_CENTER_CODE VARCHAR2(6),
                                        ADDRESS_LINE_1   VARCHAR2(2000),
                                        CITY             VARCHAR2(100),
                                        STATE_CODE       VARCHAR2(100),
                                        ZIP_CODE         VARCHAR2(100),
                                        ZIP_CODE_4         VARCHAR2(100));

    TYPE RT_ADDRESS_VW IS TABLE OF ADDRESS_VW_REC_TYPE INDEX BY VARCHAR2(6);
    AAT_ADDRESS_VW RT_ADDRESS_VW;

    /*Variable declaration*/
    PATH                  VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME              VARCHAR2(50) := 'SRA31000_' || TO_CHAR(SYSDATE,'MMDDRR') || '.TXT'; --File Name
    OUTPUT_FILE           UTL_FILE.FILE_TYPE;
    V_ADDRESS_LINE_1      VARCHAR2(200);
    V_CITY                VARCHAR2(200);
    V_STATE_CODE          VARCHAR2(200);
    V_ZIP_CODE            VARCHAR2(200);
    V_ZIP_CODE_4          VARCHAR2(200);
    V_CLOB                CLOB;
    V_CLOB_HEADER         CLOB;
    V_CLOB_TRAILER        CLOB;
    V_COUNT               VARCHAR2(5000):=0;
BEGIN
    OUTPUT_FILE := UTL_FILE.FOPEN (PATH ,
                                   FILENAME,
                                   'W' --BINARY
                                   ,32767);
    --Header details are generated
   V_CLOB_HEADER :='1' ||                                         -- Header indicator
                    TO_CHAR(SYSDATE,'YYYYDDD')||                  -- Current year in the format YYYYDDD
                    '0' ||                                        -- Zero filled 
                    TO_CHAR(sysdate,'HHMMSS') ||                  -- Timestamp of file craetion
                    FILL_SPACES(1)||                              -- space filled
                    RPAD('005',3,'0')||                           -- Format version number
                    RPAD('SHERWIN-WILLIAMS COMPANY',30) ||        -- Header name 
                    RPAD(' ',200,' ')||                           -- space filled
                    RPAD(' ',200,' ')||                           -- space filled
                    RPAD(' ',50,' ')||                            -- space filled
                    CHR(28)                                       -- New Line  (File Separator)
                    ;


    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB_HEADER, TRUE);

    FOR rec IN CUR_ADDRESS LOOP
        AAT_ADDRESS_VW(REC.COST_CENTER_CODE) := rec;
    END LOOP;

    FOR REC_CC IN CUR_COST_CENTER LOOP
        --Variable initialize to NULL
        V_ADDRESS_LINE_1 := NULL;
        V_CITY           := NULL;
        V_STATE_CODE     := NULL;
        V_ZIP_CODE       := NULL;
        V_ZIP_CODE_4     := NULL;
        V_CLOB           := NULL;
        V_CLOB_HEADER    := NULL;
        V_CLOB_TRAILER   := NULL;
        V_COUNT          := V_COUNT+1;

        /*Fetch Address Information*/
        IF AAT_ADDRESS_VW.EXISTS(REC_CC.COST_CENTER_CODE) THEN
            V_ADDRESS_LINE_1 := UPPER(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ADDRESS_LINE_1);
            V_CITY           := UPPER(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).CITY);
            V_STATE_CODE     := UPPER(AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).STATE_CODE);
            V_ZIP_CODE       := AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ZIP_CODE;
            V_ZIP_CODE_4     := AAT_ADDRESS_VW(REC_CC.COST_CENTER_CODE).ZIP_CODE_4;
        END IF;

        IF TRIM(REC_CC.COST_CENTER_CODE) IS NOT NULL THEN
            V_CLOB :=  '2'||                                                                         -- Record type indicator 
                       FILL_SPACES(5)||                                                              -- Filled spaces
                       '000000000'||                                                                 -- Merchnat expansion
                       LPAD(0,7,0)||                                                                 -- Merchnat number 
                       RPAD(NVL(SUBSTR(REC_CC.COST_CENTER_CODE,-4),' '),4,' ')||                     -- Cost center code
                       RPAD(NVL(REC_CC.COST_CENTER_NAME,' '),30,' ')||                               -- Cost center name
                       RPAD(NVL(V_ADDRESS_LINE_1,' '),30,' ')||                                      -- Address 
                       RPAD(NVL(V_CITY,' '),20,' ')||                                                -- City name
                       RPAD(NVL(V_STATE_CODE,' '),2,' ')||                                           -- State info       
                       RPAD(NVL(V_ZIP_CODE,' '),5,' ')||                                             -- Zip code
                       RPAD(NVL(V_ZIP_CODE_4,' '),4,' ')||                                           -- Zip code+4
                       CCN_COMMON_TOOLS.GET_TRANSLATED_CODE_DETAIL_VAL('COUNTRY_CODE_ISO','USA')||   -- ISO numeric country code
                       FILL_SPACES(30)||                                                             -- Filled spaces
                       '('|| SUBSTR(REC_CC.PHONE_NUMBER,1,3)||')'||
                       ' '|| SUBSTR(REC_CC.PHONE_NUMBER,4,3)||
                       '-'|| SUBSTR(REC_CC.PHONE_NUMBER,7) ||                                        -- Phone Numer   
                       FILL_SPACES(8)||                                                              -- Filled spaces
                       FILL_SPACES(30)||                                                             -- Filled spaces
                       FILL_SPACES(22)||                                                             -- Filled spaces
                       '000000000'    ||                                                             -- Filled Zeros
                       '97134700004'||                                                               -- FDMS merchant number
                       FILL_SPACES(20)||                                                             -- Grouping store location
                       FILL_SPACES(20)||                                                             -- Grouping store location
                       '0000'||                                                                      -- Rule No for service fee
                       '0000'||                                                                      -- Exp Rule No for service fee
                       FILL_SPACES(3)||                                                              -- Providence location   
                       FILL_SPACES(5)||                                                              -- space filled    
                       '00000000000000000000'||                                                      -- Banking Account No.     
                       '00000000000000000000'||                                                      -- Banking act Routing No.
                       FILL_SPACES(50)||                                                             -- Bank Name     
                       FILL_SPACES(30)||                                                             -- Bank Address
                       FILL_SPACES(20)||                                                             -- Bank City Name
                       FILL_SPACES(2)||                                                              -- Bank Abbrevation
                       FILL_SPACES(9)||                                                              -- Postal Code
                       FILL_SPACES(20)||                                                             -- Branch Location
                       FILL_SPACES(1)||                                                              -- ACH Flag
                       '000' ||                                                                      -- Filled Zeros
                       FILL_SPACES(20)||                                                             -- ACH Roll Up
                       FILL_SPACES(4)||                                                              -- Filled Spaces
                       CHR(28)                                                                       -- New Line (File Separator)     
                       ;
        END IF;
        IF V_CLOB <> EMPTY_CLOB() THEN
            UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
        END IF;
    END LOOP;
    /* Trailer details are generated alongh with adding the header and tariler value count*/
    V_CLOB_TRAILER := '9' ||                            --Record Type
                      LPAD((V_COUNT+2),9,0) ||          --Count of records
                      LPAD(' ',200)||                   --Forced Spaces    
                      LPAD(' ',200)||                   --Forced Spaces 
                      LPAD(' ',89) ||                   --Forced Spaces 
                      CHR(28)                           --New Line  (File Separator)                  
                      ;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB_TRAILER, TRUE);
    UTL_FILE.FCLOSE(OUTPUT_FILE);
EXCEPTION 
   WHEN OTHERS THEN
        UTL_FILE.FCLOSE(OUTPUT_FILE);
        RAISE;
END GENERATE_VALUE_LINK_PROCESS ;

PROCEDURE LOAD_POS_CCN_LOAD_STATUS(
/****************************************************************************
This procedure is used to load the POS_CCN_LOAD_STATUS table
with data extracted from PNP_CCN_LOAD_STATUS
created : 05/30/2018 nxk927 CCN Project....
changed : 
*****************************************************************************/
IN_RUN_CYCLE     IN VARCHAR2)
AS

CURSOR POS_SD_CUR IS
    SELECT CH.*,
           SYSDATE AS LOAD_DATE
      FROM PNP_CCN_LOAD_STATUS CH
     WHERE RLS_RUN_CYCLE = IN_RUN_CYCLE;

BEGIN

FOR REC IN POS_SD_CUR LOOP
        INSERT INTO POS_CCN_LOAD_STATUS VALUES REC;
END LOOP;
COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        NULL;
END LOAD_POS_CCN_LOAD_STATUS;

PROCEDURE POS_TERM_TRAN_UPDATE
/**********************************************************
	This procedure is intended to UPDATE POS_LAST_TRAN_DATE, POS_LAST_TRAN_NUMBER and POS_VERSION_NUMBER
  in termianl table

Created : 12/01/2017 nxk927 CCN project
Changed : 05/30/2018 nxk927 CCN project
          Loading the POS_CCN_LOAD_STATUS before getting the max run cycle
**********************************************************/
IS
    CURSOR POS_TERM_DTS(IN_RUNCYCLE IN VARCHAR2) IS
    SELECT TRAN_DATE, STORE_NO, TERMNBR, TRANNBR,POS_VERSION_NUMBER
      FROM PNP_CCN_HEADERS  A
     WHERE RLS_RUN_CYCLE = IN_RUNCYCLE
       AND TRAN_TIMESTAMP = (SELECT MAX(TRAN_TIMESTAMP)
                               FROM PNP_CCN_HEADERS  B
                              WHERE RLS_RUN_CYCLE = A.RLS_RUN_CYCLE
                                AND STORE_NO      = A.STORE_NO
                                AND TERMNBR       = A.TERMNBR);
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
    V_RUNCYCLE   VARCHAR2(10);
BEGIN
    V_RUNCYCLE := GET_LOAD_RUNCYCLE();

    V_START_TIME := DBMS_UTILITY.GET_TIME;
    V_CONTEXT := 'Load POS_CCN_LOAD_STATUS Table ';
    LOAD_POS_CCN_LOAD_STATUS(V_RUNCYCLE);
    DBMS_OUTPUT.PUT_LINE('POS_CCN_LOAD_STATUS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

    V_START_TIME := DBMS_UTILITY.GET_TIME;
    V_CONTEXT := 'Updating TERMINAL Table ';
    FOR REC IN POS_TERM_DTS(V_RUNCYCLE) LOOP
        UPDATE TERMINAL
           SET POS_LAST_TRAN_DATE                        = REC.TRAN_DATE,
               POS_LAST_TRAN_NUMBER                      = LPAD(REC.TRANNBR, 5, '0'),
               POS_VERSION_NBR                           = REC.POS_VERSION_NUMBER
         WHERE SUBSTR(COST_CENTER_CODE,3)                = REC.STORE_NO
           AND TERMINAL_NUMBER                           = REC.TERMNBR
           AND (NVL(POS_LAST_TRAN_DATE,(TRUNC(SYSDATE))) <> NVL(REC.TRAN_DATE,TRUNC(SYSDATE)+1) OR
                NVL(POS_LAST_TRAN_NUMBER,-1)             <> NVL(LPAD(REC.TRANNBR, 5, '0'),-2) OR
                NVL(POS_VERSION_NBR,-1)                  <> NVL(REC.POS_VERSION_NUMBER,-2))
           AND EXPIRATION_DATE IS NULL;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('TERMINAL Table Updated in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
END POS_TERM_TRAN_UPDATE;

FUNCTION GET_LOAD_RUNCYCLE
/******************************************************************************
  This function will get the runcycle for the days load

Created : 09/28/2017 nxk927 CCN Project....
Changed :
*******************************************************************************/
RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(10);
BEGIN
    SELECT RLS_RUN_CYCLE
      INTO V_RETURN_VALUE
      FROM (SELECT CH.*
              FROM PNP_CCN_LOAD_STATUS CH
              WHERE CH.START_TS  > (SELECT MAX(START_TS)
                                      FROM POS_CCN_LOAD_STATUS)
                AND STATUS_CODE = 'C'
              ORDER BY CH.START_TS)
     WHERE ROWNUM < 2;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_LOAD_RUNCYCLE;

PROCEDURE LOAD_ADDRESS_GEO_DETAILS
/******************************************************************************
  This Procedure Will load the data from ADDRESS_GEO_V

Created : 03/12/2018 rxv940 CCN Project....
Changed :
*******************************************************************************/
IS
    CURSOR ADDRESS_GEO_V_CUR IS
        SELECT *
          FROM ADDRESS_GEO_V;

    V_CCN_ADDRESS_GEO_DETAILS_REC     CCN_ADDRESS_GEO_DETAILS%ROWTYPE;
    V_BATCH_NUMBER                    BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS                    BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
    V_ERRM                            VARCHAR2(500);
    V_CODE                            NUMBER;
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('LD_ADDRESS_GEO_DTLS', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;    
    FOR rec IN ADDRESS_GEO_V_CUR LOOP
        BEGIN
            SAVEPOINT SVPT1;
            V_CCN_ADDRESS_GEO_DETAILS_REC := NULL;
            BEGIN
                -- Getting the current latitude and longitude details from the table by cost center
                SELECT *
                  INTO V_CCN_ADDRESS_GEO_DETAILS_REC
                  FROM CCN_ADDRESS_GEO_DETAILS
                 WHERE COST_CENTER_CODE = rec.STORE
                   AND EXPIRATION_DATE IS NULL
                   AND ADDRESS_TYPE     = 'M';
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            -- Insert if the cost center is not found in the table
            IF V_CCN_ADDRESS_GEO_DETAILS_REC.COST_CENTER_CODE IS NULL THEN
                INSERT INTO CCN_ADDRESS_GEO_DETAILS VALUES (rec.STORE, rec.LON, rec.LAT, 'M', TRUNC(SYSDATE), NULL);
            ELSE
                -- Check if Latitude and longitude values are different
                IF (NVL(rec.LAT, -1) <> NVL(V_CCN_ADDRESS_GEO_DETAILS_REC.LATITUDE, -1)
                   OR
                   NVL(rec.LON, -1) <> NVL(V_CCN_ADDRESS_GEO_DETAILS_REC.LONGITUDE, -1)) THEN
                    -- This update is to expire the old records
                    UPDATE CCN_ADDRESS_GEO_DETAILS
                       SET EXPIRATION_DATE = TRUNC(SYSDATE) - 1
                     WHERE COST_CENTER_CODE = rec.STORE
                       AND ADDRESS_TYPE     = 'M'
                       AND EXPIRATION_DATE IS NULL;
                    -- This is to insert the new state of records
                    INSERT INTO CCN_ADDRESS_GEO_DETAILS
                        VALUES (rec.STORE, rec.LON, rec.LAT, 'M', TRUNC(SYSDATE), NULL);

                END IF;
            END IF;
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN 
                ROLLBACK TO SVPT1;
                V_TRANS_STATUS := 'ERROR';
                v_code  := SQLCODE;
                v_errm  := substr(SQLERRM,1,500);
                --write to error log
                errpkg.INSERT_ERROR_LOG_SP(v_code, 'LD_ADDRESS_GEO_DTLS', v_errm, rec.STORE);
        END;
    END LOOP;

    CCN_BATCH_PKG.UPDATE_BATCH_JOB('LD_ADDRESS_GEO_DTLS', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;    

EXCEPTION
    WHEN OTHERS THEN
        -- Logging of error
        V_ERRM := substr(SQLERRM,1, 500);
        V_CODE := SQLCODE;
        errpkg.raise_err(v_code, v_errm ||'  LOAD_ADDRESS_GEO_DETAILS '  || ' errors found');
END LOAD_ADDRESS_GEO_DETAILS;

PROCEDURE LOAD_DSC_CODE_DESC_DETAILS
/******************************************************************************
  This Procedure Will load the data into CCN_DSC_CODE_DESC and CCN_DSC_CODE_DESC_HIST tables from DSC_DOCE_DESC_CUR

Created : 04/24/2018 sxg151 CCN Project....
Changed :
*******************************************************************************/
IS
    CURSOR DSC_DOCE_DESC_CUR_NEW_RECS IS
        SELECT *
          FROM COST_CENTER_DSC_CODES A
         --get all the records that are not present in CCN
         WHERE NOT EXISTS (SELECT 1
                             FROM CCN_DSC_CODE_DESC
                            WHERE A.COST_CENTER_CODE = COST_CENTER_CODE);

    CURSOR DSC_DOCE_DESC_CUR_EXTNG_RECS IS
        SELECT *
          FROM COST_CENTER_DSC_CODES A
         --get all the records that are present in CCN but any of the values changed
         WHERE EXISTS (SELECT 1
                         FROM CCN_DSC_CODE_DESC B
                        WHERE A.COST_CENTER_CODE = COST_CENTER_CODE
                          AND (A.SECONDARY_DSC <> B.SECONDARY_DSC OR
                               A.SEC_DSC_DESCR <> B.SEC_DSC_DESCR OR
                               A.PRIMARY_DSC   <> B.PRIMARY_DSC   OR
                               A.PRI_DSC_DESCR <> B.PRI_DSC_DESCR));

    V_BATCH_NUMBER                    BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS                    BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('LD_DSC_CODE_DTLS', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

    FOR rec IN DSC_DOCE_DESC_CUR_NEW_RECS LOOP --Loop through new records and insert into CCN
        BEGIN
            INSERT INTO CCN_DSC_CODE_DESC(COST_CENTER_CODE, SECONDARY_DSC, SEC_DSC_DESCR, PRIMARY_DSC, PRI_DSC_DESCR)
                VALUES (rec.COST_CENTER_CODE, rec.SECONDARY_DSC, rec.SEC_DSC_DESCR, rec.PRIMARY_DSC, rec.PRI_DSC_DESCR);
        EXCEPTION
            WHEN OTHERS THEN
                V_TRANS_STATUS := 'ERROR';
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LD_DSC_CODE_DTLS', SUBSTR(SQLERRM,1,500), rec.COST_CENTER_CODE);
        END;
    END LOOP;

    FOR rec IN DSC_DOCE_DESC_CUR_EXTNG_RECS LOOP --Loop through existing records,backup and update in CCN
        BEGIN
            UPDATE CCN_DSC_CODE_DESC
               SET SECONDARY_DSC    = rec.SECONDARY_DSC,
                   SEC_DSC_DESCR    = rec.SEC_DSC_DESCR,
                   PRIMARY_DSC      = rec.PRIMARY_DSC,
                   PRI_DSC_DESCR    = rec.PRI_DSC_DESCR
             WHERE COST_CENTER_CODE = rec.COST_CENTER_CODE;
            -- insert into History table
            INSERT INTO CCN_DSC_CODE_DESC_HIST(COST_CENTER_CODE, SECONDARY_DSC, SEC_DSC_DESCR, PRIMARY_DSC, PRI_DSC_DESCR, LOAD_DATE)
                VALUES (rec.COST_CENTER_CODE, rec.SECONDARY_DSC, rec.SEC_DSC_DESCR, rec.PRIMARY_DSC, rec.PRI_DSC_DESCR, SYSDATE);
        EXCEPTION
            WHEN OTHERS THEN
                V_TRANS_STATUS := 'ERROR';
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LD_DSC_CODE_DTLS', SUBSTR(SQLERRM,1,500), rec.COST_CENTER_CODE);
        END;
    END LOOP;

    COMMIT;

    CCN_BATCH_PKG.UPDATE_BATCH_JOB('LD_DSC_CODE_DTLS', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||'LOAD_CCN_DSC_CODE_DETAILS'  || ' errors found');
END LOAD_DSC_CODE_DESC_DETAILS;

PROCEDURE GEN_ADMINORG_HRCHY_ATTR_FILE
/**********************************************************
This process takes care of generating ADMINORG_HIERARCHY_ATTRBT_VW report 

Created : 07/17/2018 kxm302 CCN project Team....
**********************************************************/
IS
    PATH        	VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME  	    VARCHAR2(100) := 'AdminOrgHierarchyAttrbt_' || TO_CHAR(SYSDATE,'DD_MON_RRRR') || '.xlsx';
BEGIN
    --Creating first sheet of the excel - ADMINORG_HIERARCHY_ATTRBT_VW
    CCN_SPREADSHEET_PKG.QUERY2SHEET('SELECT * FROM ADMINORG_HIERARCHY_ATTRBT_VW ORDER BY COST_CENTER_CODE',
                                     TRUE, NULL, NULL, NULL, 'ADMINORG_HRCHY_DTLS','dd-mmm-yyyy hh:mm:ss');

    --Creating the final excel based on the path and file name provided
    --NOTE: The clob is built in the package "CCN_SPREADSHEET_PKG" which will be used by the below call
    CCN_SPREADSHEET_PKG.SAVE(PATH, FILENAME);

    --Below procedure will send the excel file as attachment through email based on the mail category
    MAIL_PKG.SEND_MAIL('ADMINORG_HIERARCHY_MNTHLY_PRCSS');
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(-20999, 'CCN_HIERARCHY_FILE_GEN_PKG.GENERATE_COSTCNTR_HRCHY_FILE','GENERATE COST CENTER HIERARCHY REPORTING FAILED AT '||SQLCODE||' : '|| SQLERRM);
END GEN_ADMINORG_HRCHY_ATTR_FILE;

PROCEDURE CC_NUMERIC_SEQ_ROSTER_RPT
/**********************************************************
This process takes care of generating CCN05000 REPORT 43

Created : 08/10/2018 kxm302 CCN project Team....
**********************************************************/
IS
    CURSOR cc_numeric_seq IS
      SELECT CTE.STORE_NO,
             CTE.COST_CENTER_CODE,
             CTE.COST_CENTER_NAME,
             CTE.DIVISION,
             CTE.AREA,
             CTE.DISTRICT,
             CTE.AREA_NAME,
             CTE.DISTRICT_NAME,
             HVW1.LEGACY_DIVISION,
             HVW2.DIVISION FACTS_DIVISION
      FROM (SELECT SUBSTR(C.COST_CENTER_CODE,3) STORE_NO,
              C.COST_CENTER_CODE,
              UPPER(C.COST_CENTER_NAME) COST_CENTER_NAME,
              HVW.DIVISION,
              HVW.AREA,
              HVW.DISTRICT,
              HVW.AREA_NAME,
              HVW.DISTRICT_NAME
         FROM COST_CENTER C
         JOIN HIERARCHY_DETAIL_VIEW HVW
        ON  C.COST_CENTER_CODE = HVW.COST_CENTER_CODE
        AND HVW.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY'
        AND HVW.DIVISION || HVW.AREA || HVW.DISTRICT NOT LIKE '%@@%'
        AND NOT EXISTS
        (SELECT 1 FROM CC_DELETION_GUIDS CC WHERE C.COST_CENTER_CODE = CC.COST_CENTER_CODE )
         ) CTE
        LEFT JOIN HIERARCHY_DETAIL_VIEW HVW1
        ON  CTE.COST_CENTER_CODE = HVW1.COST_CENTER_CODE
        AND  HVW1.HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION'
        LEFT JOIN HIERARCHY_DETAIL_VIEW HVW2
        ON  CTE.COST_CENTER_CODE = HVW2.COST_CENTER_CODE
        AND  HVW2.HRCHY_HDR_NAME = 'FACTS_DIVISION'
          /*added below order as the previous report was sorted russian format*/
        ORDER BY NLSSORT(CTE.COST_CENTER_CODE, 'NLS_SORT=russian');

    PATH                        VARCHAR2(50) := 'CCN_DATAFILES'; -- DIRECTORY CREATED IN ORACLE DATABASE
    FILENAME                    VARCHAR2(50) := 'CC_NUMERIC_SEQ_ROSTER_RPT_' || TO_CHAR(TRUNC(SYSDATE),'DD_MON_RRRR') || '.csv'; --File Name
    OUTPUT_FILE                 UTL_FILE.FILE_TYPE;
    V_CLOB                      CLOB;
    V_DELIMITER_VAL            VARCHAR2(1) := ',';
BEGIN

    OUTPUT_FILE := UTL_FILE.FOPEN (PATH ,
                                   FILENAME,
                                   'W' --BINARY
                                   ,32767);

    V_CLOB := 'STORE_NO'              || V_DELIMITER_VAL ||
              'COST_CENTER_CODE'      || V_DELIMITER_VAL ||
              'COST_CENTER_NAME'      || V_DELIMITER_VAL ||
              'DIVISION'              || V_DELIMITER_VAL ||
              'AREA'                  || V_DELIMITER_VAL ||
              'DISTRICT'              || V_DELIMITER_VAL ||
              'AREA_NAME'             || V_DELIMITER_VAL ||
              'DISTRICT_NAME'         || V_DELIMITER_VAL ||
              'LEGACY_DIVISION'       || V_DELIMITER_VAL ||
              'FACTS_DIVISION'        ;
    UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);

    FOR rec IN cc_numeric_seq LOOP
        V_CLOB              := rec.STORE_NO                           || V_DELIMITER_VAL ||
                               rec.COST_CENTER_CODE                   || V_DELIMITER_VAL ||
                               REPLACE(rec.COST_CENTER_NAME, ',', '') || V_DELIMITER_VAL ||
                               rec.DIVISION                           || V_DELIMITER_VAL ||
                               rec.AREA                               || V_DELIMITER_VAL ||
                               rec.DISTRICT                           || V_DELIMITER_VAL ||
                               REPLACE(rec.AREA_NAME, ',', '')        || V_DELIMITER_VAL ||
                               REPLACE(rec.DISTRICT_NAME, ',', '')    || V_DELIMITER_VAL ||
                               rec.LEGACY_DIVISION                    || V_DELIMITER_VAL ||
                               rec.FACTS_DIVISION                     ;
        UTL_FILE.PUT_LINE(OUTPUT_FILE, V_CLOB, TRUE);
    END LOOP;

    MAIL_PKG.SEND_MAIL('CC_NUMERIC_SEQ_ROSTER_RPT');

    UTL_FILE.FCLOSE(OUTPUT_FILE);
EXCEPTION
    WHEN OTHERS THEN
	    IF UTL_FILE.IS_OPEN(OUTPUT_FILE) THEN
            UTL_FILE.FCLOSE(OUTPUT_FILE);
        END IF;
        ERRPKG.RAISE_ERR(-20999, 'CCN_BATCH_PROCESS.CC_NUMERIC_SEQ_ROSTER_RPT','GENERATE CC_NUMERIC_SEQ_ROSTER_RPT  FAILED AT '||SQLCODE||' : '|| SQLERRM);
END CC_NUMERIC_SEQ_ROSTER_RPT;

PROCEDURE UPD_STORE_DESCARTES_DLVRY_CODE
/******************************************************************************
This Procedure Will update the store descartes delivery code.

Created : 07/31/2018 pxa852 CCN Project Team....
Changed :
*******************************************************************************/
IS
    V_START_TIME                      DATE := SYSDATE;
    V_CLOB_FOR_EMAIL                  CLOB;
    invalid_dscrts_dlry_code_err      EXCEPTION;
BEGIN
    FOR rec IN (SELECT * FROM TEMP_STR_DSCRTS_DLVRY_CD_UPD)LOOP
        SAVEPOINT STORE_DESCARTES_DEL_CODE_UPD;

        BEGIN
            IF rec.DESCARTES_DELIVERY_CODE IS NOT NULL THEN
               IF  NOT  common_tools.code_detail_valid('DESCARTES_DELIVERY_CODE',  rec.DESCARTES_DELIVERY_CODE) THEN
                   RAISE  invalid_dscrts_dlry_code_err;
               END IF;
            END IF;
            UPDATE STORE
                SET DESCARTES_DELIVERY_CODE          = rec.DESCARTES_DELIVERY_CODE
            WHERE COST_CENTER_CODE                   = rec.COST_CENTER_CODE
              AND NVL(DESCARTES_DELIVERY_CODE, 'X')  <> NVL(rec.DESCARTES_DELIVERY_CODE, 'X');
        EXCEPTION
            WHEN invalid_dscrts_dlry_code_err THEN
                 errpkg.INSERT_ERROR_LOG_SP(errnums.en_invalid_dcrts_dlry_cd_err,
                                            'invalid_dscrts_dlry_code_err ',
                                            'Descartes Delivery Code must be a valid value as per picklist item "DESCARTES_DELIVERY_CODE".',
                                            rec.COST_CENTER_CODE);

            WHEN OTHERS THEN
                ROLLBACK TO STORE_DESCARTES_DEL_CODE_UPD;
                --write to error log
                errpkg.INSERT_ERROR_LOG_SP(SQLCODE, 'UPD_STORE_DESCARTES_DLVRY_CODE', substr(SQLERRM,1,500), rec.COST_CENTER_CODE);
        END;
        COMMIT;
    END LOOP;
    --this process will email an error report to CCN team if there are any errors in error_log table.
    --This process will get error records from error log table and store it in a clob which will be used to write it to a file.
    ERRPKG.ERROR_DETAILS(V_START_TIME, SYSDATE, V_CLOB_FOR_EMAIL);
    --sending mail only if there are error records.
    IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
        V_CLOB_FOR_EMAIL := 'COST_CENTER_CODE,ERROR_TEXT' || CHR(10) || V_CLOB_FOR_EMAIL;
        MAIL_PKG.SEND_MAIL('STORE_DSCRTS_UI_BULK_LD_UPD_PROC_FAIL',NULL, NULL, V_CLOB_FOR_EMAIL);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Logging of error
        errpkg.raise_err(SQLCODE, substr(SQLERRM,1, 500) ||'  UPD_STORE_DESCARTES_DLVRY_CODE '  || ' errors found');
END UPD_STORE_DESCARTES_DLVRY_CODE;

END CCN_BATCH_PROCESS;