create or replace PACKAGE BODY CC_ARCHIVE_DELET_RECREATE_PKG AS
/**********************************************************
This Package contains all the procedures used to deal with
removing/archiving a cost center from CCN database

Created : 03/16/2016 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE STORE_CC_DELETE_GUID(
/**********************************************************
	This procedure will recursively check and insert the guid for
  cost center being remvoed

created : 05/03/2016 jxc517 CCN Project....
modified: 
**********************************************************/
    IN_ARCHIVE_CC IN      VARCHAR2,
    IN_NEW_CC     IN      VARCHAR2)
IS
    V_RANDOM_NUMBER       VARCHAR2(16);
BEGIN
    SELECT DBMS_RANDOM.STRING('A', 16) INTO V_RANDOM_NUMBER FROM DUAL;

    INSERT INTO CC_DELETION_GUIDS VALUES (V_RANDOM_NUMBER, IN_ARCHIVE_CC, IN_NEW_CC, SYSDATE);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STORE_CC_DELETE_GUID(IN_ARCHIVE_CC, IN_NEW_CC);
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_ARCHIVE_CC, 'STORE_CC_DELETE_GUID', SQLERRM, SQLCODE);
        RAISE;
END STORE_CC_DELETE_GUID;

PROCEDURE ARCHIVE_COST_CENTER_DTLS(
/**********************************************************
	This procedure will archive all the tables for the passed cost center

created : 03/15/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN
   --SQL Statement to archive the cost center records from all cost center related Tables
   FOR REC IN (SELECT 'INSERT INTO ARC_' || TABLE_NAME ||
                      '    SELECT A.*,' ||
                      '           SYSDATE'||
                      '      FROM ' || TABLE_NAME || ' A '||
                      '     WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''' AS VALUE 
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY TABLE_ORDER DESC) LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := REC.VALUE;
   END LOOP;
   
   --SQL Statement to archive the cost center records from Hierarchy_Detail Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ARC_HIERARCHY_DETAIL'||
                                                           '    SELECT A.*,' ||
                                                           '           SYSDATE'||
                                                           '      FROM HIERARCHY_DETAIL A '||
                                                           '     WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%'''||
                                                           '        OR HRCHY_DTL_NEXT_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%''';

   --SQL Statement to archive the cost center records from Audit_Log Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ARC_AUDIT_LOG' ||
                                                           '    SELECT A.*,' ||
                                                           '           SYSDATE' ||
                                                           '      FROM AUDIT_LOG A '||
                                                           '     WHERE TRANSACTION_ID  LIKE ''%'|| IN_COST_CENTER ||'%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER, 'ARCHIVE_COST_CENTER_DTLS', SQLERRM, SQLCODE);
      RAISE;
END ARCHIVE_COST_CENTER_DTLS;

PROCEDURE INSRT_CC_DTLS_FRM_ARCHV(
/**********************************************************
This procedure will insert the cost center details from archive table to current table

created : 05/05/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_ARCHIVE_CC IN      VARCHAR2,
          IN_NEW_CC     IN      VARCHAR2) IS
  
   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;
   
   COL_TABLE          TAB_TYPE;
   VAR                VARCHAR2(30000);
   V_CC_NAME          VARCHAR2(100);
   FROM_CC            VARCHAR2(6) := IN_ARCHIVE_CC;
   TO_CC              VARCHAR2(6) := IN_NEW_CC;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN
   --Loop through all the tables which holds cost center details
   --Below tabels are not needed as they are not associated with cost_center
   --'SALES_REP','TERRITORY_SALES_MGR','TERRITORY','TERRITORY_ASSIGNMENT','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL'
   FOR REC IN (SELECT *
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY 2) LOOP

      --Build the column list from the data dictionary and store in variable VAR
      VAR := NULL;
      SELECT * BULK COLLECT INTO COL_TABLE
        FROM USER_TAB_COLUMNS
       WHERE TABLE_NAME = REC.TABLE_NAME
       ORDER BY COLUMN_ID;
      
      FOR i IN 1..COL_TABLE.LAST LOOP
         VAR := VAR || ',' || COL_TABLE(i).COLUMN_NAME;
      END LOOP;
      
      --Data in VAR for COST_CENTER table will be ,COST_CENTER_CODE,COST_CENTER_NAME,CATEGORY,ENTITY_TYPE,STATEMENT_TYPE,COUNTRY_CODE,TRANSPORT_TYPE,BEGIN_DATE,OPEN_DATE,MOVE_DATE,CLOSE_DATE,FINANCIAL_CLOSE_DATE,POS_PROG_VER_EFF_DATE,UPS_ZONE_CODE,RPS_ZONE_CODE,CURRENCY_CODE,POS_PROG_VER_NBR,LEASE_OWN_CODE,MISSION_TYPE_CODE,DUNS_NUMBER,PRI_LOGO_GROUP_IND,SCD_LOGO_GROUP_IND,BANKING_TYPE,DEPOSIT_BAG_REORDER,DEPOSIT_TICKET_REORDER,POP_KIT_CODE,GLOBAL_HIERARCHY_IND
      --Take the column names excluding COST_CENTER_CODE which will be from 19th character till the end
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ' || REC.TABLE_NAME || 
                                                              ' SELECT '''|| TO_CC ||''','|| SUBSTR(VAR,19) || 
                                                              '   FROM ARC_' || REC.TABLE_NAME || 
                                                              '  WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(FROM_CC) ||'''';
   END LOOP;
   
   --SQL Statement to insert NEW cost center records from OLD cost center Hierarchy_Detail records
   --Pre-final level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,HRCHY_DTL_CURR_LVL_VAL,'||
                                              'REPLACE(HRCHY_DTL_NEXT_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_NEXT_LVL_VAL,'||
                                              'HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM ARC_HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_NEXT_LVL_VAL LIKE ''%' || FROM_CC || '%''';
   --Last level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,' ||
                                              'REPLACE(HRCHY_DTL_CURR_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_CURR_LVL_VAL,'||
                                              'HRCHY_DTL_NEXT_LVL_VAL,HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,'||
                                              ''''||TO_CC||''' HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM ARC_HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%' || FROM_CC || '%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'INSRT_CC_DTLS_FRM_ARCHV', SQLERRM, SQLCODE);
      RAISE;
END INSRT_CC_DTLS_FRM_ARCHV;

FUNCTION GET_ARCHIVE_COST_CENTER(
/**********************************************************
	This function will generate a random cost center code
  for the cost center being removed

xxLXXX 
		- xx matches first 2 numbers of the deleted cost center.
		-XXX will be randomly generated by our code.
These are the following exceptions. Do not use as the final 4 digits: L471, L473, L474

created : 05/06/2016 jxc517 CCN Project....
modified: 
**********************************************************/
    IN_COST_CENTER_CODE     IN      VARCHAR2)
RETURN VARCHAR2
IS
    V_ARCHIVE_COST_CENTER_CODE VARCHAR2(6) := SUBSTR(IN_COST_CENTER_CODE, 1, 2) || 'L';
    V_RANDOM_NUMBER            VARCHAR2(16);
    V_COUNT                    NUMBER := 0;
BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(100,999))
      INTO V_RANDOM_NUMBER
      FROM DUAL;

    IF V_RANDOM_NUMBER IN (471, 473, 474) THEN  --exception cost center, so generate another
        V_ARCHIVE_COST_CENTER_CODE := GET_ARCHIVE_COST_CENTER(IN_COST_CENTER_CODE);
    ELSE
        V_ARCHIVE_COST_CENTER_CODE := V_ARCHIVE_COST_CENTER_CODE || V_RANDOM_NUMBER;
    END IF;

    SELECT COUNT(*)
      INTO V_COUNT
      FROM COST_CENTER
     WHERE COST_CENTER_CODE = V_ARCHIVE_COST_CENTER_CODE;

    IF V_COUNT > 0 THEN --cost center all ready exists, so generate another
        V_ARCHIVE_COST_CENTER_CODE := GET_ARCHIVE_COST_CENTER(IN_COST_CENTER_CODE);
    END IF;

    RETURN V_ARCHIVE_COST_CENTER_CODE;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'GET_ARCHIVE_COST_CENTER', SQLERRM, SQLCODE);
        RAISE;
END GET_ARCHIVE_COST_CENTER;

PROCEDURE PROCESS
/**********************************************************
	This procedure is the core procedure that gets invoked
	for bulk cost center deletions from CCN application
  
  We need to archive the existing cost center details
  Delete the exisitng cost center details
  Reinsert the cost center details with new cost center mapped by business
  store the deleted cost center/new cost center with mapping to a GUID

created : 03/15/2016 jxc517 CCN Project Team...
modified: 
**********************************************************/
IS
    V_ARCHIVE_COST_CENTER_CODE VARCHAR2(6);
BEGIN
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   FOR rec IN (SELECT * FROM TEMP_COST_CENTER_DELETE) LOOP
       SAVEPOINT CC_DELETE;
       BEGIN
           ARCHIVE_COST_CENTER_DTLS(rec.COST_CENTER_CODE);
           
           COMMON_TOOLS.DELETE_COST_CENTER(rec.COST_CENTER_CODE);
           
           V_ARCHIVE_COST_CENTER_CODE := GET_ARCHIVE_COST_CENTER(rec.COST_CENTER_CODE);
           
           INSRT_CC_DTLS_FRM_ARCHV(rec.COST_CENTER_CODE, V_ARCHIVE_COST_CENTER_CODE);

           STORE_CC_DELETE_GUID(rec.COST_CENTER_CODE, V_ARCHIVE_COST_CENTER_CODE);
           
           COMMIT;
       EXCEPTION
           WHEN OTHERS THEN
               COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'PROCESS', SQLERRM, SQLCODE);
               ROLLBACK TO CC_DELETE;
       END;
   END LOOP;
   
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'PROCESS', SQLERRM, SQLCODE);
      RAISE;
END PROCESS;

END CC_ARCHIVE_DELET_RECREATE_PKG;

