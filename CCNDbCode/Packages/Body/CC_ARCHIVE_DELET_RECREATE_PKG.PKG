create or replace PACKAGE BODY CC_ARCHIVE_DELET_RECREATE_PKG AS
/**********************************************************
This Package contains all the procedures used to deal with
removing/archiving a cost center from CCN database

Created : 03/16/2016 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE STORE_CC_DELETE_GUID(
/**********************************************************
	This procedure will recursively check and insert the guid for
  cost center being remvoed

created : 05/03/2016 jxc517 CCN Project....
modified: 
**********************************************************/
    IN_ARCHIVE_CC IN      VARCHAR2,
    IN_NEW_CC     IN      VARCHAR2)
IS
    V_RANDOM_NUMBER       VARCHAR2(16);
BEGIN
    SELECT DBMS_RANDOM.STRING('A', 16) INTO V_RANDOM_NUMBER FROM DUAL;

    INSERT INTO CC_DELETION_GUIDS VALUES (V_RANDOM_NUMBER, IN_ARCHIVE_CC, IN_NEW_CC, SYSDATE);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STORE_CC_DELETE_GUID(IN_ARCHIVE_CC, IN_NEW_CC);
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_ARCHIVE_CC, 'STORE_CC_DELETE_GUID', SQLERRM, SQLCODE);
        RAISE;
END STORE_CC_DELETE_GUID;

PROCEDURE ARCHIVE_COST_CENTER_DTLS(
/**********************************************************
	This procedure will archive all the tables for the passed cost center

created : 03/15/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_COST_CENTER IN VARCHAR2) IS

   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;

   COL_TABLE          TAB_TYPE;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN
   --SQL Statement to archive the cost center records from all cost center related Tables
   FOR REC IN (SELECT 'INSERT INTO ARC_' || TABLE_NAME ||
                      '    SELECT A.*,' ||
                      '           SYSDATE'||
                      '      FROM ' || TABLE_NAME || ' A '||
                      '     WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(IN_COST_CENTER) ||'''' AS VALUE 
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY TABLE_ORDER DESC) LOOP
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := REC.VALUE;
   END LOOP;

   --SQL Statement to archive the cost center records from Hierarchy_Detail Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ARC_HIERARCHY_DETAIL'||
                                                           '    SELECT A.*,' ||
                                                           '           SYSDATE'||
                                                           '      FROM HIERARCHY_DETAIL A '||
                                                           '     WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%'''||
                                                           '        OR HRCHY_DTL_NEXT_LVL_VAL LIKE ''%'|| IN_COST_CENTER ||'%''';

   --SQL Statement to archive the cost center records from Audit_Log Table
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ARC_AUDIT_LOG' ||
                                                           '    SELECT A.*,' ||
                                                           '           SYSDATE' ||
                                                           '      FROM AUDIT_LOG A '||
                                                           '     WHERE TRANSACTION_ID  LIKE ''%'|| IN_COST_CENTER ||'%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER, 'ARCHIVE_COST_CENTER_DTLS', SQLERRM, SQLCODE);
      RAISE;
END ARCHIVE_COST_CENTER_DTLS;

PROCEDURE INSRT_CC_DTLS_FRM_ARCHV(
/**********************************************************
This procedure will insert the cost center details from archive table to current table

created : 05/05/2016 jxc517 CCN Project....
modified: 
**********************************************************/
          IN_ARCHIVE_CC IN      VARCHAR2,
          IN_NEW_CC     IN      VARCHAR2) IS

   TYPE TAB_TYPE                IS TABLE OF USER_TAB_COLUMNS%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE SQL_STATEMENTS_TAB_TYPE IS TABLE OF VARCHAR2(10000)          INDEX BY BINARY_INTEGER;

   COL_TABLE          TAB_TYPE;
   VAR                VARCHAR2(30000);
   V_CC_NAME          VARCHAR2(100);
   FROM_CC            VARCHAR2(6) := IN_ARCHIVE_CC;
   TO_CC              VARCHAR2(6) := IN_NEW_CC;
   SQL_STATEMENTS_TAB SQL_STATEMENTS_TAB_TYPE;
BEGIN
   --Loop through all the tables which holds cost center details
   --Below tabels are not needed as they are not associated with cost_center
   --'SALES_REP','TERRITORY_SALES_MGR','TERRITORY','TERRITORY_ASSIGNMENT','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL'
   FOR REC IN (SELECT *
                 FROM INSERTORDER
                WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                ORDER BY 2) LOOP

      --Build the column list from the data dictionary and store in variable VAR
      VAR := NULL;
      SELECT * BULK COLLECT INTO COL_TABLE
        FROM USER_TAB_COLUMNS
       WHERE TABLE_NAME = REC.TABLE_NAME
       ORDER BY COLUMN_ID;

      FOR i IN 1..COL_TABLE.LAST LOOP
         VAR := VAR || ',' || COL_TABLE(i).COLUMN_NAME;
      END LOOP;

      --Data in VAR for COST_CENTER table will be ,COST_CENTER_CODE,COST_CENTER_NAME,CATEGORY,ENTITY_TYPE,STATEMENT_TYPE,COUNTRY_CODE,TRANSPORT_TYPE,BEGIN_DATE,OPEN_DATE,MOVE_DATE,CLOSE_DATE,FINANCIAL_CLOSE_DATE,POS_PROG_VER_EFF_DATE,UPS_ZONE_CODE,RPS_ZONE_CODE,CURRENCY_CODE,POS_PROG_VER_NBR,LEASE_OWN_CODE,MISSION_TYPE_CODE,DUNS_NUMBER,PRI_LOGO_GROUP_IND,SCD_LOGO_GROUP_IND,BANKING_TYPE,DEPOSIT_BAG_REORDER,DEPOSIT_TICKET_REORDER,POP_KIT_CODE,GLOBAL_HIERARCHY_IND
      --Take the column names excluding COST_CENTER_CODE which will be from 19th character till the end
      SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO ' || REC.TABLE_NAME || 
                                                              ' SELECT '''|| TO_CC ||''','|| SUBSTR(VAR,19) || 
                                                              '   FROM ARC_' || REC.TABLE_NAME || 
                                                              '  WHERE UPPER(COST_CENTER_CODE) = '''|| UPPER(FROM_CC) ||'''';
   END LOOP;

   --SQL Statement to insert NEW cost center records from OLD cost center Hierarchy_Detail records
   --Pre-final level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,HRCHY_DTL_CURR_LVL_VAL,'||
                                              'REPLACE(HRCHY_DTL_NEXT_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_NEXT_LVL_VAL,'||
                                              'HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM ARC_HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_NEXT_LVL_VAL LIKE ''%' || FROM_CC || '%''';
   --Last level record
   SQL_STATEMENTS_TAB(NVL(SQL_STATEMENTS_TAB.LAST,0)+1) := 'INSERT INTO HIERARCHY_DETAIL' ||
                                     ' SELECT HRCHY_HDR_NAME,HRCHY_DTL_LEVEL,HRCHY_DTL_PREV_LVL_VAL,' ||
                                              'REPLACE(HRCHY_DTL_CURR_LVL_VAL,'''||FROM_CC||''','''||TO_CC||''') HRCHY_DTL_CURR_LVL_VAL,'||
                                              'HRCHY_DTL_NEXT_LVL_VAL,HRCHY_DTL_EFF_DATE,HRCHY_DTL_EXP_DATE,HRCHY_DTL_DESC,'||
                                              ''''||TO_CC||''' HRCHY_DTL_CURR_ROW_VAL,UPPER_LVL_VER_VALUE'||
                                     '  FROM ARC_HIERARCHY_DETAIL '||
                                     ' WHERE HRCHY_DTL_CURR_LVL_VAL LIKE ''%' || FROM_CC || '%''';

   --Loop through all the statements and execute one by one in that order
   FOR i IN 1..SQL_STATEMENTS_TAB.COUNT LOOP
      --DBMS_OUTPUT.PUT_LINE(SQL_STATEMENTS_TAB(i)||';');
      EXECUTE IMMEDIATE(SQL_STATEMENTS_TAB(i));
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'INSRT_CC_DTLS_FRM_ARCHV', SQLERRM, SQLCODE);
      RAISE;
END INSRT_CC_DTLS_FRM_ARCHV;

FUNCTION GET_ARCHIVE_COST_CENTER(
/**********************************************************
	This function will generate a random cost center code
  for the cost center being removed

xxLXXX 
		- xx matches first 2 numbers of the deleted cost center.
		-XXX will be randomly generated by our code.
These are the following exceptions. Do not use as the final 4 digits: L471, L473, L474

created : 05/06/2016 jxc517 CCN Project....
modified: 05/14/2019 jxc517 CCN Project....
          Last 3 digits of newly created cost centers can not be duplicates until we move to 6 digit cost center
**********************************************************/
    IN_COST_CENTER_CODE     IN      VARCHAR2)
RETURN VARCHAR2
IS
    V_ARCHIVE_COST_CENTER_CODE VARCHAR2(6) := SUBSTR(IN_COST_CENTER_CODE, 1, 2) || 'L';
    V_RANDOM_NUMBER            VARCHAR2(16);
    V_COUNT                    NUMBER := 0;
BEGIN
    SELECT TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(1,999)), '000')
      INTO V_RANDOM_NUMBER
      FROM DUAL;

    IF V_RANDOM_NUMBER IN (471, 473, 474) THEN  --exception cost center, so generate another
        V_ARCHIVE_COST_CENTER_CODE := GET_ARCHIVE_COST_CENTER(IN_COST_CENTER_CODE);
    ELSE
        V_ARCHIVE_COST_CENTER_CODE := V_ARCHIVE_COST_CENTER_CODE || V_RANDOM_NUMBER;
    END IF;

    SELECT COUNT(*)
      INTO V_COUNT
      FROM COST_CENTER
     WHERE SUBSTR(COST_CENTER_CODE, 3) = SUBSTR(V_ARCHIVE_COST_CENTER_CODE, 3);

    IF V_COUNT > 0 THEN --cost center all ready exists, so generate another
        V_ARCHIVE_COST_CENTER_CODE := GET_ARCHIVE_COST_CENTER(IN_COST_CENTER_CODE);
    END IF;

    RETURN V_ARCHIVE_COST_CENTER_CODE;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR(IN_COST_CENTER_CODE, 'GET_ARCHIVE_COST_CENTER', SQLERRM, SQLCODE);
        RAISE;
END GET_ARCHIVE_COST_CENTER;

PROCEDURE PROCESS
/**********************************************************
	This procedure is the core procedure that gets invoked
	for bulk cost center deletions from CCN application

  We need to archive the existing cost center details
  Delete the exisitng cost center details
  Reinsert the cost center details with new cost center mapped by business
  store the deleted cost center/new cost center with mapping to a GUID

created : 03/15/2016 jxc517 CCN Project Team...
modified: 
**********************************************************/
IS
    V_ARCHIVE_COST_CENTER_CODE VARCHAR2(6);
BEGIN
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

   FOR rec IN (SELECT * FROM TEMP_COST_CENTER_DELETE) LOOP
       SAVEPOINT CC_DELETE;
       BEGIN
           ARCHIVE_COST_CENTER_DTLS(rec.COST_CENTER_CODE);

           COMMON_TOOLS.DELETE_COST_CENTER(rec.COST_CENTER_CODE);

           V_ARCHIVE_COST_CENTER_CODE := GET_ARCHIVE_COST_CENTER(rec.COST_CENTER_CODE);

           INSRT_CC_DTLS_FRM_ARCHV(rec.COST_CENTER_CODE, V_ARCHIVE_COST_CENTER_CODE);

           STORE_CC_DELETE_GUID(rec.COST_CENTER_CODE, V_ARCHIVE_COST_CENTER_CODE);

           COMMIT;
       EXCEPTION
           WHEN OTHERS THEN
               COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'PROCESS', SQLERRM, SQLCODE);
               ROLLBACK TO CC_DELETE;
       END;
   END LOOP;

   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
   WHEN OTHERS THEN
      COMMON_TOOLS.LOG_ERROR('000000', 'PROCESS', SQLERRM, SQLCODE);
      RAISE;
END PROCESS;

PROCEDURE EXECUTE_DYNAMIC_SQL_COMMAND(
/*******************************************************************************
This procedure is used to execute SQL statements dynamically.

Created : 07/24/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
     IN_SQL_COMMAND VARCHAR2)
IS
BEGIN
    EXECUTE IMMEDIATE IN_SQL_COMMAND;
END EXECUTE_DYNAMIC_SQL_COMMAND;

PROCEDURE CRT_LD_ARC_BU_TBL_FRM_ARC_TBL (
/*******************************************************************************
This procedure is intended to create backup table with the archive table data.

Created : 07/24/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
      IN_ARCIVE_TABLE_NAME      IN     VARCHAR2)
IS
BEGIN
    --create archive backup table. creating this table for taking backup of archive table data.
    EXECUTE_DYNAMIC_SQL_COMMAND('CREATE TABLE ' || IN_ARCIVE_TABLE_NAME || '_BU' || ' AS SELECT * FROM ' || IN_ARCIVE_TABLE_NAME);
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'CRT_LD_ARC_BU_TBL_FRM_ARC_TBL', SQLERRM, SQLCODE);
        RAISE;
END CRT_LD_ARC_BU_TBL_FRM_ARC_TBL;

PROCEDURE RECRT_ARC_TBL_FRM_ACTL_TB (
/*******************************************************************************
This procedure is intended to drop the archive table, recreate it

Created :07/24/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
      IN_ARCIVE_TABLE_NAME      IN     VARCHAR2)
AS
BEGIN
    -- recreate archive table with the new fields
    EXECUTE_DYNAMIC_SQL_COMMAND('CREATE TABLE ' || IN_ARCIVE_TABLE_NAME || ' AS SELECT * FROM ' || SUBSTR(IN_ARCIVE_TABLE_NAME, 5) || ' WHERE 1=2');
    -- alter archive table to add archive date column
    EXECUTE_DYNAMIC_SQL_COMMAND('ALTER TABLE ' || IN_ARCIVE_TABLE_NAME || ' ADD ARCHIVE_DATE DATE');
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'RECRT_ARC_TBL_FRM_ACTL_TB', SQLERRM, SQLCODE);
        RAISE;
END RECRT_ARC_TBL_FRM_ACTL_TB;

PROCEDURE DT_MISMAT_COL_BW_BU_ACT_TBLS(
/*******************************************************************************
This procedure is used to convert the data if the data type of a column is changed in actual tabe.
If data type of a column is changed to number from varchar, used to_number function to convert the varchar data to number
and insert the data into archive table.
If data type of a column is changed to varchar from number, then used to_char function to convert number to a character
If data type of a column is changed to date, then used to_date function to convert it to a date format.

Created :07/24/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
      IN_ARCIVE_TABLE_NAME      IN     VARCHAR2,
      IN_COLUMN_NAME            IN     VARCHAR2,
      IN_DATA_TYPE              IN     VARCHAR2,
      OUT_COLUMN_VALUE           OUT   VARCHAR2
)
AS
      V_COL_DATA_TYPE                USER_TAB_COLUMNS.DATA_TYPE%TYPE;
BEGIN
    --store the data type of a archive table column in a variable and use it when comparing with the datatype of a column in backup table
    SELECT DATA_TYPE
      INTO V_COL_DATA_TYPE
      FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = IN_ARCIVE_TABLE_NAME
      AND COLUMN_NAME=IN_COLUMN_NAME;
    --if new data type is varchar2 then append to_char function.
    --if new data type is number then append to_number function.
    --if new data type is date then append to_date function.
    IF IN_DATA_TYPE <> V_COL_DATA_TYPE THEN
       IF V_COL_DATA_TYPE     = 'VARCHAR2' THEN
          OUT_COLUMN_VALUE   := 'TO_CHAR(' || IN_COLUMN_NAME ||')';
       ELSIF V_COL_DATA_TYPE  = 'NUMBER' THEN
          OUT_COLUMN_VALUE   := 'TO_NUMBER('||IN_COLUMN_NAME||')';
       ELSIF V_COL_DATA_TYPE  = 'DATE' THEN
          OUT_COLUMN_VALUE   := 'TO_DATE('||IN_COLUMN_NAME||', ''DD-MON-YYYY'')';
       END IF;
    ELSE
        OUT_COLUMN_VALUE  :=  IN_COLUMN_NAME;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'DT_MISMAT_COL_BW_BU_ACT_TBLS', SQLERRM, SQLCODE);
        RAISE;
END DT_MISMAT_COL_BW_BU_ACT_TBLS;

PROCEDURE LD_RCRTD_ARC_TBL_FRM_ARC_BU (
/*******************************************************************************
This procedure is intended to load the data into archive table from backup table

Created :07/24/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
      IN_ARCIVE_TABLE_NAME      IN     VARCHAR2
)
AS
      V_SELECT_COLUMNS                 VARCHAR2(2000);
      V_INSERT_COLUMNS                 VARCHAR2(2000);
      V_OUT_COLUMN                     VARCHAR2(2000);
BEGIN
    -- Loop through all column names in a backup table and concatenate all columns seperated by comma and store it in a variable.
    FOR rec in (SELECT * FROM USER_TAB_COLUMNS WHERE TABLE_NAME = IN_ARCIVE_TABLE_NAME || '_BU' ORDER BY COLUMN_ID) LOOP
             -- this procedure will check if datatype changes or not.
             -- if it changes, append the conversion function to covert the data when loading into archive table.
             DT_MISMAT_COL_BW_BU_ACT_TBLS (IN_ARCIVE_TABLE_NAME, rec.COLUMN_NAME, rec.DATA_TYPE, V_OUT_COLUMN);
             V_SELECT_COLUMNS := V_SELECT_COLUMNS || ',' || V_OUT_COLUMN;
             V_INSERT_COLUMNS := V_INSERT_COLUMNS || ',' || rec.COLUMN_NAME;
    END LOOP;
    -- insert backup table data into archive table.
    EXECUTE_DYNAMIC_SQL_COMMAND('INSERT INTO ' || IN_ARCIVE_TABLE_NAME || ' (' || SUBSTR(V_INSERT_COLUMNS,2) || ') ' ||
                                'SELECT ' || SUBSTR(V_SELECT_COLUMNS,2) || ' FROM ' || IN_ARCIVE_TABLE_NAME || '_BU');
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'LD_RCRTD_ARC_TBL_FRM_ARC_BU', SQLERRM, SQLCODE);
        RAISE;
END LD_RCRTD_ARC_TBL_FRM_ARC_BU;

FUNCTION IS_ARCHIVE_TABLE_EXISTS_FNC(
/**********************************************************
This function is to find out whether archive table exists in db or not.

Created : 08/02/2018 pxa852 CCN Project Team....
Changed:
**********************************************************/
    IN_ARCIVE_TABLE_NAME    IN      VARCHAR2)
RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(1) := 'N';
    V_COUNT             INTEGER;
BEGIN
     SELECT COUNT(*)
       INTO V_COUNT
       FROM USER_TABLES
     WHERE TABLE_NAME   = IN_ARCIVE_TABLE_NAME;

     IF V_COUNT > 0 THEN
        V_RETURN_VALUE := 'Y';
     END IF;
     RETURN V_RETURN_VALUE;

EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VALUE;
END IS_ARCHIVE_TABLE_EXISTS_FNC;

PROCEDURE CREAT_LOAD_ARCHIVE_BACKUP_SP (
/*******************************************************************************
This procedure will compare actual tables and archive tables and find out the tables
which has new fields added and consider them further process.
This procedure will also call other procedures which will
create backup table and insert archive table data into backup table(taking backup
of archive table before dropping and recreating it).
then drop archive table and recreate it with new fields.
Load backup table data into archive table.
drop backup table.

Created : 07/26/2018 pxa852 CCN Project team....
Changed :
*******************************************************************************/
      IN_ARCIVE_TABLE_NAME      IN     VARCHAR2
)
AS
BEGIN
    FOR rec in  (SELECT DISTINCT 'ARC_' || ACTL_TBL.TABLE_NAME TABLE_NAME
                   FROM USER_TAB_COLUMNS ACTL_TBL,
                        USER_TAB_COLUMNS ARCHV_TBL
                 WHERE ACTL_TBL.TABLE_NAME  = SUBSTR(ARCHV_TBL.TABLE_NAME(+), 5)
                   AND ACTL_TBL.COLUMN_NAME = ARCHV_TBL.COLUMN_NAME(+)
                   AND ACTL_TBL.COLUMN_ID   = ARCHV_TBL.COLUMN_ID(+)
                   AND ACTL_TBL.DATA_TYPE   = ARCHV_TBL.DATA_TYPE(+)
                   AND ARCHV_TBL.TABLE_NAME IS NULL
                   AND ARCHV_TBL.COLUMN_NAME IS NULL
                   AND ACTL_TBL.TABLE_NAME = SUBSTR(IN_ARCIVE_TABLE_NAME, 5)) LOOP

           --Create archive backup table and load archive table data into backup table
           CRT_LD_ARC_BU_TBL_FRM_ARC_TBL(rec.TABLE_NAME);
           --if archive table exists and if there is any mismatch in the table structure then drop and recreate it with the actual table structure.
           --if archive table exists, drop it.Recreate it in next step
           EXECUTE_DYNAMIC_SQL_COMMAND('DROP TABLE ' || rec.TABLE_NAME);
           RECRT_ARC_TBL_FRM_ACTL_TB(rec.TABLE_NAME);
           --insert the backup table data into archive table.
           LD_RCRTD_ARC_TBL_FRM_ARC_BU(rec.TABLE_NAME);
           --Drop backup table
           EXECUTE_DYNAMIC_SQL_COMMAND('DROP TABLE ' || rec.TABLE_NAME || '_BU');

    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'CREAT_LOAD_ARCHIVE_BACKUP_SP', SQLERRM, SQLCODE);
        RAISE;
END CREAT_LOAD_ARCHIVE_BACKUP_SP;

PROCEDURE RECREATE_MISMTCH_ARCHV_TBL_SP
/*******************************************************************************
This procedure will go through the each actual table name in insertorder table
if there is no archive table created in db for the actual table, then it will create a new archive table.
If archive table already exists and if there are any mismatches in tables strutures
then this procedure will perform following
1.take backup of archive table
2.drop archive table
3.recreate archive table with new structural changes
4.load data into archive table from backup table
5.drop archive backup table

Created : 07/26/2018 pxa852 CCN Project team....
Changed :
*******************************************************************************/
AS
BEGIN
    FOR rec in (SELECT 'ARC_' || TABLE_NAME ARC_TABLE_NAME
                   FROM INSERTORDER INS_ORD
                 WHERE TABLE_NAME NOT IN ('SALES_REP','CODE_HEADER','CODE_DETAIL','HIERARCHY_HEADER','HIERARCHY_DESCRIPTION','HIERARCHY_DETAIL')
                 ORDER BY TABLE_ORDER DESC) LOOP

       IF IS_ARCHIVE_TABLE_EXISTS_FNC(rec.ARC_TABLE_NAME) = 'Y' THEN
          --If there are any structural changes then this procedure will create backup table, recreate and load archive table, and drop backup table.
          CREAT_LOAD_ARCHIVE_BACKUP_SP(rec.ARC_TABLE_NAME);
       ELSE
          --if archive table does not exists then this procedure will create archive table
          RECRT_ARC_TBL_FRM_ACTL_TB(rec.ARC_TABLE_NAME);
       END IF;

    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('000000', 'RECREATE_MISMTCH_ARCHV_TBL_SP', SQLERRM, SQLCODE);
        RAISE;
END RECREATE_MISMTCH_ARCHV_TBL_SP;

END CC_ARCHIVE_DELET_RECREATE_PKG;