create or replace PACKAGE BODY CCN_CLEANSING_ADDRESS_PKG AS

PROCEDURE UPDATE_CLEANSING_FLAG(
/*******************************************************************************
This procedure will set the cleansing flag to null if ccn address mataches 
with the address in address_geo_v 

Created : 07/17/2018 pxa852 Address Object....
*******************************************************************************/
IN_COST_CENTER_CODE IN   VARCHAR2,
IN_CLEANSING_FLAG   IN   VARCHAR2
)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    --set cleansing flag to null if address matches
    UPDATE ADDRESS_USA
       SET CLEANSING_FLAG           = IN_CLEANSING_FLAG 
    WHERE UPPER(COST_CENTER_CODE)   = UPPER(IN_COST_CENTER_CODE)
      AND ADDRESS_TYPE              = 'S'
      AND CLEANSING_FLAG            = 'Y';
      
    IF SQL%ROWCOUNT = 0 THEN
        --set cleansing flag to null if address matches
        UPDATE ADDRESS_CAN
           SET CLEANSING_FLAG           = IN_CLEANSING_FLAG
        WHERE UPPER(COST_CENTER_CODE)   = UPPER(IN_COST_CENTER_CODE)
          AND ADDRESS_TYPE              = 'S'
          AND CLEANSING_FLAG            = 'Y';
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END UPDATE_CLEANSING_FLAG;

FUNCTION GET_GEO_ADDRESS_RECORD(
/*******************************************************************************
This function will return row from address_geo_v 
Cost center code is the input parameter

Created : 07/17/2018 pxa852 Address Object....
*******************************************************************************/
  IN_COST_CENTER_CODE IN   VARCHAR2)
RETURN CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE
IS
    V_ADDRESS_GEO_ROW   CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE;
BEGIN
    SELECT *
      INTO V_ADDRESS_GEO_ROW
      FROM CCN_ADDRESS_GEO_V_DETAILS
     WHERE UPPER(STORE)   = UPPER(IN_COST_CENTER_CODE);
    RETURN V_ADDRESS_GEO_ROW;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_GEO_ADDRESS_RECORD;

FUNCTION CHECK_DATA_AVALBLTY_IN_TABLE(
/*******************************************************************************
This function will return count from address_usa/address_can table.
Table name, cost center and mailing address effective date are the inputs

Created : 07/17/2018 pxa852 Address Object....
*******************************************************************************/
IN_TABLE_NAME     IN VARCHAR2,
IN_COST_CENTER    IN VARCHAR2,
IN_EFFECTIVE_DATE IN DATE)
RETURN NUMBER
IS
    V_RETURN_VALUE NUMBER := 0;
BEGIN
    EXECUTE IMMEDIATE
      'BEGIN
           SELECT COUNT(*) 
             INTO :1 
             FROM ' || IN_TABLE_NAME ||
          ' WHERE UPPER(COST_CENTER_CODE) = UPPER(''' || IN_COST_CENTER || ''')
              AND EFFECTIVE_DATE = ''' || IN_EFFECTIVE_DATE || '''
              AND ADDRESS_TYPE   = ''S''
              AND EXPIRATION_DATE IS NOT NULL;
       END;'
    USING OUT V_RETURN_VALUE;
  
    RETURN V_RETURN_VALUE;
END CHECK_DATA_AVALBLTY_IN_TABLE;

PROCEDURE GET_ACTV_ADDRESS_USA_BY_TYPE(
/*******************************************************************************
This procedure is used to return effective date for address type 'M' and 'S'

Created : 07/06/2018 pxa852 Address Object....
*******************************************************************************/
IN_COST_CENTER_CODE      IN     VARCHAR2,
IN_ADDRESS_TYPE_CODE     IN     VARCHAR2,
OUT_ADDRESS_USA_ROW         OUT ADDRESS_USA%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_ADDRESS_USA_ROW
      FROM ADDRESS_USA 
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
       AND ADDRESS_TYPE            = IN_ADDRESS_TYPE_CODE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_ACTV_ADDRESS_USA_BY_TYPE;

PROCEDURE GET_ACTV_ADDRESS_CAN_BY_TYPE(
/*******************************************************************************
This procedure is used to return effective date for address type 'M' and 'S'

Created : 07/06/2018 pxa852 Address Object....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE      IN     VARCHAR2,
IN_ADDRESS_TYPE_CODE     IN     VARCHAR2,
OUT_ADDRESS_CAN_ROW         OUT ADDRESS_CAN%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_ADDRESS_CAN_ROW
      FROM ADDRESS_CAN 
     WHERE UPPER(COST_CENTER_CODE) = UPPER(IN_COST_CENTER_CODE)
       AND ADDRESS_TYPE            = IN_ADDRESS_TYPE_CODE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_ACTV_ADDRESS_CAN_BY_TYPE;

PROCEDURE ADDRESS_USA_U_SP (
/*******************************************************************************
This procedure will update the address if it does not matches with the address in address_geo_v

Created :  07/18/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
in_Row_data             IN  ADDRESS_USA%ROWTYPE,
V_STRND_ADDRESS_USA_ROW IN  ADDRESS_USA%ROWTYPE
)
IS
BEGIN
        IF (NVL(V_STRND_ADDRESS_USA_ROW.ADDRESS_LINE_1,'XXX')   <> NVL(in_row_data.ADDRESS_LINE_1,'XXX')   OR
            NVL(V_STRND_ADDRESS_USA_ROW.ADDRESS_LINE_2,'XXX')   <> NVL(in_row_data.ADDRESS_LINE_2,'XXX')   OR
            NVL(V_STRND_ADDRESS_USA_ROW.CITY,'XXX')             <> NVL(in_row_data.CITY,'XXX')             OR
            NVL(V_STRND_ADDRESS_USA_ROW.STATE_CODE,'XXX')       <> NVL(in_row_data.STATE_CODE,'XXX')       OR
            NVL(V_STRND_ADDRESS_USA_ROW.ZIP_CODE,'XXX')         <> NVL(in_row_data.ZIP_CODE,'XXX')         OR
            NVL(V_STRND_ADDRESS_USA_ROW.ZIP_CODE_4,'XXX')       <> NVL(in_row_data.ZIP_CODE_4,'XXX')       OR
            NVL(V_STRND_ADDRESS_USA_ROW.COUNTY,'XXX')           <> NVL(in_row_data.COUNTY,'XXX')           OR
            NVL(V_STRND_ADDRESS_USA_ROW.COUNTRY_CODE,'XXX')     <> NVL(in_row_data.COUNTRY_CODE,'XXX'))    THEN
            UPDATE ADDRESS_USA
               SET ADDRESS_LINE_1    = in_row_data.ADDRESS_LINE_1,
                   ADDRESS_LINE_2    = in_row_data.ADDRESS_LINE_2,
                   CITY              = in_row_data.CITY,
                   STATE_CODE        = in_row_data.STATE_CODE,
                   ZIP_CODE          = in_row_data.ZIP_CODE,
                   ZIP_CODE_4        = in_row_data.ZIP_CODE_4,
                   DESTINATION_POINT = in_row_data.DESTINATION_POINT,
                   CHECK_DIGIT       = in_row_data.CHECK_DIGIT ,
                   COUNTY            = in_row_data.COUNTY,
                   COUNTRY_CODE      = in_row_data.COUNTRY_CODE
            WHERE NVL(UPPER(COST_CENTER_CODE),'XXX') = NVL(UPPER(in_row_data.COST_CENTER_CODE),'XXX')
              AND NVL(ADDRESS_TYPE,'XXX')            = NVL(in_row_data.ADDRESS_TYPE,'XXX')
              AND NVL(EFFECTIVE_DATE,SYSDATE)        = NVL(V_STRND_ADDRESS_USA_ROW.EFFECTIVE_DATE,SYSDATE);
        END IF;
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, 'ADDRESS_CAN_U_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS CAN Error' );
END ADDRESS_USA_U_SP;

PROCEDURE ADDRESS_CAN_U_SP (
/*******************************************************************************
This procedure will update the address if it does not matches with the address in address_geo_v

Created :  07/18/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
in_Row_data             IN  ADDRESS_CAN%ROWTYPE,
V_STRND_ADDRESS_CAN_ROW IN  ADDRESS_CAN%ROWTYPE
)
IS
BEGIN
        IF (NVL(V_STRND_ADDRESS_CAN_ROW.ADDRESS_LINE_1,'XXX')    <> NVL(in_row_data.ADDRESS_LINE_1,'XXX')   OR
            NVL(V_STRND_ADDRESS_CAN_ROW.ADDRESS_LINE_2,'XXX')    <> NVL(in_row_data.ADDRESS_LINE_2,'XXX')   OR
            NVL(V_STRND_ADDRESS_CAN_ROW.CITY,'XXX')              <> NVL(in_row_data.CITY,'XXX')             OR
            NVL(V_STRND_ADDRESS_CAN_ROW.PROVINCE_CODE,'XXX')     <> NVL(in_row_data.PROVINCE_CODE,'XXX')    OR
            NVL(V_STRND_ADDRESS_CAN_ROW.POSTAL_CODE,'XXX')       <> NVL(in_row_data.POSTAL_CODE,'XXX')      OR
            NVL(V_STRND_ADDRESS_CAN_ROW.COUNTRY_CODE,'XXX')      <> NVL(in_row_data.COUNTRY_CODE,'XXX'))    THEN
            UPDATE ADDRESS_CAN
               SET ADDRESS_LINE_1 = in_row_data.ADDRESS_LINE_1,
                   ADDRESS_LINE_2 = in_row_data.ADDRESS_LINE_2,
                   CITY           = in_row_data.CITY,
                   PROVINCE_CODE  = in_row_data.PROVINCE_CODE,
                   POSTAL_CODE    = in_row_data.POSTAL_CODE,
                   COUNTRY_CODE   = in_row_data.COUNTRY_CODE
            WHERE NVL(UPPER(COST_CENTER_CODE),'XXX')  = NVL(UPPER(in_row_data.COST_CENTER_CODE),'XXX')
              AND NVL(ADDRESS_TYPE,'XXX')             = NVL(in_row_data.ADDRESS_TYPE,'XXX')
              AND NVL(EFFECTIVE_DATE,SYSDATE)         = NVL(V_STRND_ADDRESS_CAN_ROW.EFFECTIVE_DATE,SYSDATE);
         END IF;
EXCEPTION
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, 'ADDRESS_CAN_U_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS CAN Error' );
END ADDRESS_CAN_U_SP;

PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
This procedure will compare the mailing address effective date and standardized address effective date. 
if they are not equal, update the expiration date of old record and insert a record with new effective date 
and address.

Created :  07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
in_Row_data             IN  ADDRESS_USA%ROWTYPE)
IS
    V_STRND_ADDRESS_USA_ROW            ADDRESS_USA%ROWTYPE;
BEGIN
    --Get the effective date for standardized address type
    GET_ACTV_ADDRESS_USA_BY_TYPE(in_row_data.COST_CENTER_CODE, 'S', V_STRND_ADDRESS_USA_ROW);
     --Compare the mailing address effective date and standardized address effective date
    IF in_row_data.EFFECTIVE_DATE <> V_STRND_ADDRESS_USA_ROW.EFFECTIVE_DATE AND 
       CHECK_DATA_AVALBLTY_IN_TABLE('ADDRESS_USA',in_row_data.COST_CENTER_CODE, in_row_data.EFFECTIVE_DATE)=0 
      THEN
    --If not equal, expire the old standardized record
        COMMON_TOOLS.EXPIRE_DATA_SP('ADDRESS_USA'
                                    ,in_row_data.COST_CENTER_CODE
                                    ,in_row_data.EFFECTIVE_DATE
                                    ,in_row_data.ADDRESS_TYPE);
    END IF;
    INSERT INTO ADDRESS_USA VALUES in_row_data;     
EXCEPTION
    WHEN dup_val_on_index THEN
        BEGIN
            --Update standardized address if there is any change in address
            ADDRESS_USA_U_SP(in_row_data, V_STRND_ADDRESS_USA_ROW);

        EXCEPTION
            WHEN OTHERS THEN 
                errpkg.raise_err(SQLCODE, 'ADDRESS_USA_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS USA Update Error' );
        END;
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, 'ADDRESS_USA_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS USA Error' );
END ADDRESS_USA_I_SP;

PROCEDURE ADDRESS_CAN_I_SP (
/*******************************************************************************
This procedure will compare the mailing address effective date and standardized address effective date. 
if they are not equal, update the expiration date of old record and insert a record with new effective date 
and address.

Created :  07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
in_Row_data             IN  ADDRESS_CAN%ROWTYPE)
IS
    V_STRND_ADDRESS_CAN_ROW            ADDRESS_CAN%ROWTYPE;
BEGIN
    --Get the effective date for standardized address type
    GET_ACTV_ADDRESS_CAN_BY_TYPE(in_row_data.COST_CENTER_CODE, 'S', V_STRND_ADDRESS_CAN_ROW);
    --Compare the mailing address effective date and standardized address effective date
    IF in_row_data.EFFECTIVE_DATE <> V_STRND_ADDRESS_CAN_ROW.EFFECTIVE_DATE AND
       CHECK_DATA_AVALBLTY_IN_TABLE('ADDRESS_CAN',in_row_data.COST_CENTER_CODE, in_row_data.EFFECTIVE_DATE)=0 
       THEN
     --If not equal, expire the old standardized record
        COMMON_TOOLS.EXPIRE_DATA_SP('ADDRESS_CAN'
                                    ,in_row_data.COST_CENTER_CODE
                                    ,in_row_data.EFFECTIVE_DATE
                                    ,in_row_data.ADDRESS_TYPE);
    END IF;
    INSERT INTO ADDRESS_CAN VALUES in_row_data;  
EXCEPTION
    WHEN dup_val_on_index THEN
        BEGIN
            --Update standardized address if there is any change in address
            ADDRESS_CAN_U_SP(in_row_data, V_STRND_ADDRESS_CAN_ROW);

        EXCEPTION
            WHEN OTHERS THEN 
                errpkg.raise_err(SQLCODE, 'ADDRESS_CAN_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS CAN Update Error' );
        END;
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, 'ADDRESS_CAN_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS CAN Error' );
END ADDRESS_CAN_I_SP;

PROCEDURE CCN_USA_CLEANSING_FLAG_U_PKG
/*******************************************************************************
This procedure is used to compare the ccn standardized address with the address in address_geo_v
and if matched reset the cleansing flag to null

Created : 07/17/2018 pxa852 Address Object....
*******************************************************************************/
IS
    CURSOR ADDRESS_USA_REC IS
        SELECT *
          FROM ADDRESS_USA 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL;

    V_ADDRESS_GEO_ROW   CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE;
BEGIN
    --LOOP through the each store record with cleasing 'Y'
    FOR rec in ADDRESS_USA_REC LOOP
        V_ADDRESS_GEO_ROW := GET_GEO_ADDRESS_RECORD(rec.COST_CENTER_CODE);

        IF (NVL(rec.ADDRESS_LINE_1,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET,'XXX')     AND
            NVL(rec.ADDRESS_LINE_2,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET2,'XXX')    AND
            NVL(rec.CITY,'XXX')           = NVL(V_ADDRESS_GEO_ROW.CITY,'XXX')       AND
            NVL(rec.STATE_CODE,'XXX')     = NVL(V_ADDRESS_GEO_ROW.STATE,'XXX')      AND
            NVL(rec.ZIP_CODE,'XXX')       = NVL(TRIM(V_ADDRESS_GEO_ROW.ZIP),'XXX')  AND
            NVL(rec.ZIP_CODE_4,'XXX')     = NVL(TRIM(V_ADDRESS_GEO_ROW.ZIP4),'XXX') AND
            NVL(rec.COUNTRY_CODE,'XXX')   = NVL(V_ADDRESS_GEO_ROW.COUNTRY_3,'XXX')  AND
            NVL(rec.COUNTY,'XXX')         = NVL(V_ADDRESS_GEO_ROW.COUNTY,'XXX'))    THEN
            UPDATE_CLEANSING_FLAG(rec.COST_CENTER_CODE, NULL);
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_USA_CLEANSING_FLAG_U_PKG;

PROCEDURE CCN_CAN_CLEANSING_FLAG_U_PKG
/*******************************************************************************
This procedure is used to compare the ccn standardized address with the address in address_geo_v
and if matched reset the cleansing flag to null

Created : 07/17/2018 pxa852 Address Object....
*******************************************************************************/
IS
    CURSOR ADDRESS_CAN_REC IS
        SELECT *
          FROM ADDRESS_CAN 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL;
        
    V_ADDRESS_GEO_ROW   CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE;
BEGIN
    --LOOP through the each store record with cleasing 'Y'
    FOR rec in ADDRESS_CAN_REC LOOP
        V_ADDRESS_GEO_ROW := GET_GEO_ADDRESS_RECORD(rec.COST_CENTER_CODE);
                       
        IF (NVL(rec.ADDRESS_LINE_1,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET,'XXX')     AND
            NVL(rec.ADDRESS_LINE_2,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET2,'XXX')    AND
            NVL(rec.CITY,'XXX')           = NVL(V_ADDRESS_GEO_ROW.CITY,'XXX')       AND
            NVL(rec.PROVINCE_CODE,'XXX')  = NVL(V_ADDRESS_GEO_ROW.STATE,'XXX')      AND
            NVL(rec.POSTAL_CODE,'XXX')    = NVL(TRIM(V_ADDRESS_GEO_ROW.ZIP)||TRIM(V_ADDRESS_GEO_ROW.ZIP4),'XXX') AND
            NVL(rec.COUNTRY_CODE,'XXX')   = NVL(V_ADDRESS_GEO_ROW.COUNTRY_3,'XXX')) THEN
            UPDATE_CLEANSING_FLAG(rec.COST_CENTER_CODE, NULL);
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_CAN_CLEANSING_FLAG_U_PKG;

PROCEDURE CCN_STNDRD_ADDR_MISMATCH_PKG
/*******************************************************************************
This procedure is used to generate a standardized mismatch report and send it in an email

Created : 07/17/2018 pxa852 Address Object....
*******************************************************************************/
IS
    CURSOR ADDRESS_MISMATCH_REC IS
        SELECT COST_CENTER_CODE
          FROM ADDRESS_USA 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL
        UNION
        SELECT COST_CENTER_CODE
          FROM ADDRESS_CAN 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL;

    V_CLOB              CLOB;

BEGIN

    FOR rec in ADDRESS_MISMATCH_REC LOOP
        V_CLOB :=  rec.COST_CENTER_CODE || CHR(10) || V_CLOB;
    END LOOP;
    -- If clob is empty then dont send an email
    IF V_CLOB <> EMPTY_CLOB() THEN
       V_CLOB := 'COST_CENTER_CODE' || CHR(10) || V_CLOB;
       MAIL_PKG.SEND_MAIL('CCN_STANDARDIZED_ADDRESS_MISMATCH', NULL, NULL, V_CLOB);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_STNDRD_ADDR_MISMATCH_PKG;

PROCEDURE CCN_CLEANSING_ADDRESS_IU_PKG
/*******************************************************************************
This procedure is intended to create/update a standardized record in addres_usa and address_can tables.
If there is no record present in address table with address_type 'S' for the record in addres_geo_v, it will
create a new record in address table with the mailing address effective date.

If there is already record present in address table with address type 'S' and there is a change in address,
it will update the standardized address in ccn address table.

If there is any update to the mailing address, it will expire the existing standardized address record 
and create a new record with address type 'S'

Created :  07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
IS
    CURSOR ADDRESS_GEO_REC IS
        SELECT A.*
          FROM CCN_ADDRESS_GEO_V_DETAILS A,
               COST_CENTER CC
         WHERE UPPER(A.STORE)     = UPPER(CC.COST_CENTER_CODE)
           AND CC.CATEGORY        = 'S'
           AND CC.COUNTRY_CODE IN ('USA', 'CAN', 'PRI');

    V_ADDRESS_USA_ROW            ADDRESS_USA%ROWTYPE;
    V_ADDRESS_CAN_ROW            ADDRESS_CAN%ROWTYPE;
    V_COUNT                      INTEGER;
BEGIN
    --Initial run will not have any records with cleasing flag as "Y"
    --So below two calls does nothing for the first run
    CCN_USA_CLEANSING_FLAG_U_PKG();
    CCN_CAN_CLEANSING_FLAG_U_PKG();

    --LOOP through the each store record in address_geo_v
    FOR rec in ADDRESS_GEO_REC LOOP
        V_ADDRESS_USA_ROW := NULL;
        V_ADDRESS_CAN_ROW := NULL;
       --add save point and rollback to this for that iteration if anything fails
        SAVEPOINT SVPNT;
        BEGIN
            IF rec.COUNTRY_3 IN ('USA', 'PRI') THEN
                SELECT COUNT(1)
                  INTO V_COUNT 
                  FROM ADDRESS_USA 
                 WHERE UPPER(COST_CENTER_CODE) = UPPER(rec.STORE) 
                   AND CLEANSING_FLAG IS NOT NULL;

                IF V_COUNT = 0 THEN
                    -- Get the effective date for mailing address type
                    GET_ACTV_ADDRESS_USA_BY_TYPE(rec.STORE, 'M', V_ADDRESS_USA_ROW);
                                          
                    V_ADDRESS_USA_ROW.COST_CENTER_CODE          := UPPER(rec.STORE);   
                    V_ADDRESS_USA_ROW.ADDRESS_TYPE              := 'S';
                    V_ADDRESS_USA_ROW.ADDRESS_LINE_1            := rec.STREET;
                    V_ADDRESS_USA_ROW.ADDRESS_LINE_2            := rec.STREET2;
                    V_ADDRESS_USA_ROW.ADDRESS_LINE_3            := NULL;
                    V_ADDRESS_USA_ROW.CITY                      := rec.CITY;
                    V_ADDRESS_USA_ROW.STATE_CODE                := rec.STATE;
                    V_ADDRESS_USA_ROW.ZIP_CODE                  := TRIM(rec.ZIP);
                    V_ADDRESS_USA_ROW.ZIP_CODE_4                := TRIM(rec.ZIP4);
                    V_ADDRESS_USA_ROW.FIPS_CODE                 := NULL;
                    V_ADDRESS_USA_ROW.COUNTY                    := rec.COUNTY;
                    V_ADDRESS_USA_ROW.COUNTRY_CODE              := rec.COUNTRY_3;
                        
                    --expire the old standardized record and creates/updates a new record
                    ADDRESS_USA_I_SP(V_ADDRESS_USA_ROW);
                END IF;
            ELSIF rec.COUNTRY_3 = 'CAN' THEN
                
                SELECT COUNT(1)
                  INTO V_COUNT 
                  FROM ADDRESS_CAN 
                 WHERE UPPER(COST_CENTER_CODE) = UPPER(rec.STORE) 
                   AND CLEANSING_FLAG IS NOT NULL;
                  
                IF V_COUNT = 0 THEN
                    -- Get the effective date for mailing address type
                    GET_ACTV_ADDRESS_CAN_BY_TYPE(rec.STORE, 'M', V_ADDRESS_CAN_ROW);
                           
                    V_ADDRESS_CAN_ROW.COST_CENTER_CODE          := rec.STORE;
                    V_ADDRESS_CAN_ROW.ADDRESS_TYPE              := 'S';
                    V_ADDRESS_CAN_ROW.ADDRESS_LINE_1            := rec.STREET;
                    V_ADDRESS_CAN_ROW.ADDRESS_LINE_2            := rec.STREET2;
                    V_ADDRESS_CAN_ROW.ADDRESS_LINE_3            := NULL;
                    V_ADDRESS_CAN_ROW.CITY                      := rec.CITY;
                    V_ADDRESS_CAN_ROW.PROVINCE_CODE             := rec.STATE;
                    V_ADDRESS_CAN_ROW.POSTAL_CODE               := TRIM(rec.ZIP)||TRIM(rec.ZIP4);
                    V_ADDRESS_CAN_ROW.VALID_ADDRESS             := NULL;
                    V_ADDRESS_CAN_ROW.COUNTRY_CODE              := rec.COUNTRY_3;

                    --expire the old standardized record and creates/updates a new record
                    ADDRESS_CAN_I_SP (V_ADDRESS_CAN_ROW);
                END IF;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                UPDATE_CLEANSING_FLAG(rec.STORE, 'Y');
                ROLLBACK TO SVPNT;
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, ' CCN_CLEANSING_ADDRESS ', SUBSTR(SQLERRM,1,500), rec.STORE);
        END;
        COMMIT;
    END LOOP;

    CCN_STNDRD_ADDR_MISMATCH_PKG();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_CLEANSING_ADDRESS_IU_PKG;


PROCEDURE CCN_CLEANSING_ADDRESS
/*******************************************************************************
This procedure is used to truncate the current table and insert the data into current and history tables.

Created : 07/18/2018 pxa852 Address Object....
*******************************************************************************/
IS
BEGIN
     --this table is used in cleasing process instead of address_geo_v.
     --Truncate this table in each run and reload it with the data from address_geo_v
     EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_ADDRESS_GEO_V_DETAILS';
     INSERT INTO CCN_ADDRESS_GEO_V_DETAILS (SELECT * FROM ADDRESS_GEO_V);
     --A new table is created for the maintaining history of address_geo_v
     --inserting data into history table in each run with the load date as run date(sysdate).
     --Primary key is on store and load date
     INSERT INTO CCN_ADDRESS_GEO_V_HIST (SELECT STORE,
                                                STREET,
                                                STREET2,
                                                CITY,
                                                STATE,
                                                ZIP,
                                                ZIP4,
                                                LON,
                                                LAT,
                                                COUNTRY_3,
                                                MANUAL_OVERRIDE,
                                                COUNTY,
                                                SYSDATE
                                           FROM ADDRESS_GEO_V);
     COMMIT;
     -- calling cleansing address process after inserting data into ccn_address_geo_v_details, ccn_address_geo_v_hist tables.
     CCN_CLEANSING_ADDRESS_IU_PKG();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_CLEANSING_ADDRESS;

FUNCTION GET_USA_CLEANSING_FLAG_FNC(
/*******************************************************************************
This function is used to compare the old standardized address with the new address. 
If they did not match,return 'Y' else null.

Created : 07/10/2018 pxa852 CCN project team....
*******************************************************************************/
IN_ADDRESS_USA_ROW   IN    ADDRESS_USA%ROWTYPE
)
RETURN VARCHAR2
IS
     V_ADDRESS_USA_ROW   ADDRESS_USA%ROWTYPE;
     V_RETURN_VALUE      VARCHAR2(1) := NULL;
BEGIN
    -- get old record and store it in a variable
    IF NVL(IN_ADDRESS_USA_ROW.ADDRESS_TYPE,'XXX') = 'S' THEN
        GET_ACTV_ADDRESS_USA_BY_TYPE(IN_ADDRESS_USA_ROW.COST_CENTER_CODE,
                                     IN_ADDRESS_USA_ROW.ADDRESS_TYPE,
                                     V_ADDRESS_USA_ROW);
        -- comparing old and new address and return 'Y' if they are not equal else return null  
        IF (NVL(IN_ADDRESS_USA_ROW.ADDRESS_LINE_1,'XXX')  <> NVL(V_ADDRESS_USA_ROW.ADDRESS_LINE_1,'XXX')  OR
           NVL(IN_ADDRESS_USA_ROW.ADDRESS_LINE_2,'XXX')   <> NVL(V_ADDRESS_USA_ROW.ADDRESS_LINE_2,'XXX')  OR
           NVL(IN_ADDRESS_USA_ROW.CITY,'XXX')             <> NVL(V_ADDRESS_USA_ROW.CITY,'XXX')            OR
           NVL(IN_ADDRESS_USA_ROW.STATE_CODE,'XXX')       <> NVL(V_ADDRESS_USA_ROW.STATE_CODE,'XXX')      OR
           NVL(IN_ADDRESS_USA_ROW.ZIP_CODE,'XXX')         <> NVL(V_ADDRESS_USA_ROW.ZIP_CODE,'XXX')        OR
           NVL(IN_ADDRESS_USA_ROW.ZIP_CODE_4, 'XXX')      <> NVL(V_ADDRESS_USA_ROW.ZIP_CODE_4,'XXX')      OR
           NVL(IN_ADDRESS_USA_ROW.COUNTRY_CODE, 'XXX')    <> NVL(V_ADDRESS_USA_ROW.COUNTRY_CODE,'XXX')    OR
           NVL(IN_ADDRESS_USA_ROW.COUNTY, 'XXX')          <> NVL(V_ADDRESS_USA_ROW.COUNTY, 'XXX'))        THEN
            V_RETURN_VALUE := 'Y';
            ERRPKG.STORE_WARNINGS(errnums.en_standardized_addr_chng_err,
                            'Standardized address is updated as requested, please contact data services to discuss about the issue');
        END IF;
    END IF;     
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN 
        RETURN V_RETURN_VALUE;
END GET_USA_CLEANSING_FLAG_FNC;

FUNCTION GET_CAN_CLEANSING_FLAG_FNC(
/*******************************************************************************
This function is used to compare the old standardized address with the new address. 
If they did not match,return 'Y' else null.

Created : 07/10/2018 pxa852 CCN project team....
*******************************************************************************/
IN_ADDRESS_CAN_ROW   IN    ADDRESS_CAN%ROWTYPE
)
RETURN VARCHAR2
IS
          V_ADDRESS_CAN_ROW   ADDRESS_CAN%ROWTYPE;
          V_RETURN_VALUE      VARCHAR2(1) := NULL;
BEGIN
    -- getting old record and storing it in a rowtype variable
     IF NVL(IN_ADDRESS_CAN_ROW.ADDRESS_TYPE,'XXX') = 'S' THEN
         GET_ACTV_ADDRESS_CAN_BY_TYPE(IN_ADDRESS_CAN_ROW.COST_CENTER_CODE,
                                      IN_ADDRESS_CAN_ROW.ADDRESS_TYPE,
                                      V_ADDRESS_CAN_ROW);
         -- comparing old and new address and return 'Y' if they are not equal else return null    
         IF  (NVL(IN_ADDRESS_CAN_ROW.ADDRESS_LINE_1,'XXX')  <> NVL(V_ADDRESS_CAN_ROW.ADDRESS_LINE_1,'XXX')   OR
              NVL(IN_ADDRESS_CAN_ROW.ADDRESS_LINE_2,'XXX')  <> NVL(V_ADDRESS_CAN_ROW.ADDRESS_LINE_2,'XXX')   OR
              NVL(IN_ADDRESS_CAN_ROW.CITY,'XXX')            <> NVL(V_ADDRESS_CAN_ROW.CITY,'XXX')             OR
              NVL(IN_ADDRESS_CAN_ROW.PROVINCE_CODE,'XXX')   <> NVL(V_ADDRESS_CAN_ROW.PROVINCE_CODE,'XXX')    OR
              NVL(IN_ADDRESS_CAN_ROW.POSTAL_CODE,'XXX')     <> NVL(V_ADDRESS_CAN_ROW.POSTAL_CODE,'XXX')      OR
              NVL(IN_ADDRESS_CAN_ROW.COUNTRY_CODE,'XXX')    <> NVL(V_ADDRESS_CAN_ROW.COUNTRY_CODE,'XXX'))  THEN
              V_RETURN_VALUE  :=  'Y';   
              ERRPKG.STORE_WARNINGS(errnums.en_standardized_addr_chng_err,
                                    'Standardized address is updated as requested, please contact data services to discuss about the issue');
          END IF;  
     END IF;
     RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN 
         RETURN V_RETURN_VALUE;
 END GET_CAN_CLEANSING_FLAG_FNC;

END CCN_CLEANSING_ADDRESS_PKG;