create or replace PACKAGE BODY CCN_CLEANSING_ADDRESS_PKG AS

PROCEDURE UPDATE_CLEANSING_FLAG(
/*******************************************************************************
This procedure will set the cleansing flag to IN_CLEANSING_FLAG passed in
for the cost center IN_COST_CENTER_CODE passed in

Created : 07/17/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
    IN_COST_CENTER_CODE IN   VARCHAR2,
    IN_CLEANSING_FLAG   IN   VARCHAR2)
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    UPDATE ADDRESS_USA
       SET CLEANSING_FLAG           = IN_CLEANSING_FLAG 
    WHERE COST_CENTER_CODE          = IN_COST_CENTER_CODE
      AND ADDRESS_TYPE              = 'S'
      AND CLEANSING_FLAG            = 'Y';
    IF SQL%ROWCOUNT = 0 THEN
        UPDATE ADDRESS_CAN
           SET CLEANSING_FLAG       = IN_CLEANSING_FLAG
        WHERE  COST_CENTER_CODE     = IN_COST_CENTER_CODE
          AND ADDRESS_TYPE          = 'S'
          AND CLEANSING_FLAG        = 'Y';
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END UPDATE_CLEANSING_FLAG;

FUNCTION GET_GEO_ADDRESS_RECORD(
/*******************************************************************************
This function will return row from address_geo_v 
Cost center code is the input parameter

Created : 07/17/2018 pxa852 Address Object....
Changed :*******************************************************************************/
    IN_COST_CENTER_CODE IN   VARCHAR2)
RETURN CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE
IS
    V_ADDRESS_GEO_ROW   CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE;
BEGIN
    SELECT *
      INTO V_ADDRESS_GEO_ROW
      FROM CCN_ADDRESS_GEO_V_DETAILS
     WHERE STORE   = IN_COST_CENTER_CODE;
    RETURN V_ADDRESS_GEO_ROW;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_ADDRESS_GEO_ROW;
END GET_GEO_ADDRESS_RECORD;

PROCEDURE GET_ACTV_ADDRESS_USA_BY_TYPE(
/*******************************************************************************
This procedure is used to return effective date for address type 'M' and 'S'

Created : 07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
    IN_COST_CENTER_CODE      IN     VARCHAR2,
    IN_ADDRESS_TYPE_CODE     IN     VARCHAR2,
    OUT_ADDRESS_USA_ROW         OUT ADDRESS_USA%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_ADDRESS_USA_ROW
      FROM ADDRESS_USA 
     WHERE COST_CENTER_CODE   = IN_COST_CENTER_CODE
       AND ADDRESS_TYPE       = IN_ADDRESS_TYPE_CODE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_ACTV_ADDRESS_USA_BY_TYPE;

PROCEDURE GET_ACTV_ADDRESS_CAN_BY_TYPE(
/*******************************************************************************
This procedure is used to return effective date for address type 'M' and 'S'

Created : 07/06/2018 pxa852 Address Object....
Changed : 
*******************************************************************************/
    IN_COST_CENTER_CODE      IN     VARCHAR2,
    IN_ADDRESS_TYPE_CODE     IN     VARCHAR2,
    OUT_ADDRESS_CAN_ROW         OUT ADDRESS_CAN%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_ADDRESS_CAN_ROW
      FROM ADDRESS_CAN 
     WHERE COST_CENTER_CODE   = IN_COST_CENTER_CODE
       AND ADDRESS_TYPE       = IN_ADDRESS_TYPE_CODE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_ACTV_ADDRESS_CAN_BY_TYPE;

PROCEDURE ADDRESS_USA_I_SP (
/*******************************************************************************
This procedure will update the expiration date of old record and insert a record with new effective date and address.

Created :  07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
    IN_STNDRD_ADDRESS_USA_REC             IN  ADDRESS_USA%ROWTYPE)
IS
    V_STRND_ADDRESS_USA_ROW            ADDRESS_USA%ROWTYPE;
BEGIN
    --expire the old standardized record
    COMMON_TOOLS.EXPIRE_DATA_SP('ADDRESS_USA'
                                ,IN_STNDRD_ADDRESS_USA_REC.COST_CENTER_CODE
                                ,IN_STNDRD_ADDRESS_USA_REC.EFFECTIVE_DATE
                                ,IN_STNDRD_ADDRESS_USA_REC.ADDRESS_TYPE);
    --Insert a new record if the record does not exists
    INSERT INTO ADDRESS_USA VALUES IN_STNDRD_ADDRESS_USA_REC;
EXCEPTION
    WHEN dup_val_on_index THEN
        BEGIN
            --Update standardized address if there is any change in address
            UPDATE ADDRESS_USA
               SET ROW = IN_STNDRD_ADDRESS_USA_REC
             WHERE COST_CENTER_CODE         = IN_STNDRD_ADDRESS_USA_REC.COST_CENTER_CODE
               AND ADDRESS_TYPE             = IN_STNDRD_ADDRESS_USA_REC.ADDRESS_TYPE
               AND EFFECTIVE_DATE           = IN_STNDRD_ADDRESS_USA_REC.EFFECTIVE_DATE;
        EXCEPTION
            WHEN OTHERS THEN 
                errpkg.raise_err(SQLCODE, 'ADDRESS_USA_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS USA Update Error' );
        END;
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, 'ADDRESS_USA_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS USA Error' );
END ADDRESS_USA_I_SP;

PROCEDURE ADDRESS_CAN_I_SP (
/*******************************************************************************
This procedure will compare the mailing address effective date and standardized address effective date. 
if they are not equal, update the expiration date of old record and insert a record with new effective date 
and address.

Created :  07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
    IN_STNDRD_ADDRESS_CAN_REC             IN  ADDRESS_CAN%ROWTYPE)
IS
    V_STRND_ADDRESS_CAN_ROW            ADDRESS_CAN%ROWTYPE;
BEGIN
     --If not equal, expire the old standardized record
     COMMON_TOOLS.EXPIRE_DATA_SP('ADDRESS_CAN'
                                 ,IN_STNDRD_ADDRESS_CAN_REC.COST_CENTER_CODE
                                 ,IN_STNDRD_ADDRESS_CAN_REC.EFFECTIVE_DATE
                                 ,IN_STNDRD_ADDRESS_CAN_REC.ADDRESS_TYPE);
     --Insert a new record if the record does not exists
     INSERT INTO ADDRESS_CAN VALUES IN_STNDRD_ADDRESS_CAN_REC;
EXCEPTION
    WHEN dup_val_on_index THEN
        BEGIN
            --Update standardized address if there is any change in address
            UPDATE ADDRESS_CAN
               SET ROW = IN_STNDRD_ADDRESS_CAN_REC
             WHERE COST_CENTER_CODE         = IN_STNDRD_ADDRESS_CAN_REC.COST_CENTER_CODE
               AND ADDRESS_TYPE             = IN_STNDRD_ADDRESS_CAN_REC.ADDRESS_TYPE
               AND EFFECTIVE_DATE           = IN_STNDRD_ADDRESS_CAN_REC.EFFECTIVE_DATE;
        EXCEPTION
            WHEN OTHERS THEN 
                errpkg.raise_err(SQLCODE, 'ADDRESS_CAN_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS CAN Update Error' );
        END;
    WHEN OTHERS THEN
        errpkg.raise_err(SQLCODE, 'ADDRESS_CAN_I_SP, ' || ' ' || SUBSTR(SQLERRM,1,200) || ';  ' || 'ADDRESS CAN Error' );
END ADDRESS_CAN_I_SP;

PROCEDURE CCN_USA_CLEANSING_FLAG_U_PKG
/*******************************************************************************
This procedure is used to compare the ccn standardized address with the address in address_geo_v
and if matched reset the cleansing flag to null. Considering only records with cleansing flag 'Y'

Created : 07/17/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
IS
    CURSOR ADDRESS_USA_REC IS
        SELECT *
          FROM ADDRESS_USA 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL;

    V_ADDRESS_GEO_ROW   CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE;
BEGIN
    --LOOP through the each store record with cleasing 'Y'
    FOR rec in ADDRESS_USA_REC LOOP
        V_ADDRESS_GEO_ROW := GET_GEO_ADDRESS_RECORD(rec.COST_CENTER_CODE);

        IF (NVL(rec.ADDRESS_LINE_1,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET,'XXX')     AND
            NVL(rec.ADDRESS_LINE_2,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET2,'XXX')    AND
            NVL(rec.CITY,'XXX')           = NVL(V_ADDRESS_GEO_ROW.CITY,'XXX')       AND
            NVL(rec.STATE_CODE,'XXX')     = NVL(V_ADDRESS_GEO_ROW.STATE,'XXX')      AND
            NVL(rec.ZIP_CODE,'XXX')       = NVL(TRIM(V_ADDRESS_GEO_ROW.ZIP),'XXX')  AND
            NVL(rec.ZIP_CODE_4,'XXX')     = NVL(TRIM(V_ADDRESS_GEO_ROW.ZIP4),'XXX') AND
            NVL(rec.COUNTRY_CODE,'XXX')   = NVL(V_ADDRESS_GEO_ROW.COUNTRY_3,'XXX')  AND
            NVL(rec.COUNTY,'XXX')         = NVL(V_ADDRESS_GEO_ROW.COUNTY,'XXX'))    THEN
            UPDATE_CLEANSING_FLAG(rec.COST_CENTER_CODE, NULL);
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_USA_CLEANSING_FLAG_U_PKG;

PROCEDURE CCN_CAN_CLEANSING_FLAG_U_PKG
/*******************************************************************************
This procedure is used to compare the ccn standardized address with the address in address_geo_v
and if matched reset the cleansing flag to null.Considering only records with cleansing flag 'Y'

Created : 07/17/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
IS
    CURSOR ADDRESS_CAN_REC IS
        SELECT *
          FROM ADDRESS_CAN 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL;
        
    V_ADDRESS_GEO_ROW   CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE;
BEGIN
    --LOOP through the each store record with cleasing 'Y'
    FOR rec in ADDRESS_CAN_REC LOOP
        V_ADDRESS_GEO_ROW := GET_GEO_ADDRESS_RECORD(rec.COST_CENTER_CODE);
                       
        IF (NVL(rec.ADDRESS_LINE_1,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET,'XXX')     AND
            NVL(rec.ADDRESS_LINE_2,'XXX') = NVL(V_ADDRESS_GEO_ROW.STREET2,'XXX')    AND
            NVL(rec.CITY,'XXX')           = NVL(V_ADDRESS_GEO_ROW.CITY,'XXX')       AND
            NVL(rec.PROVINCE_CODE,'XXX')  = NVL(V_ADDRESS_GEO_ROW.STATE,'XXX')      AND
            NVL(rec.POSTAL_CODE,'XXX')    = NVL(TRIM(V_ADDRESS_GEO_ROW.ZIP)||TRIM(V_ADDRESS_GEO_ROW.ZIP4),'XXX') AND
            NVL(rec.COUNTRY_CODE,'XXX')   = NVL(V_ADDRESS_GEO_ROW.COUNTRY_3,'XXX')) THEN
            UPDATE_CLEANSING_FLAG(rec.COST_CENTER_CODE, NULL);
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_CAN_CLEANSING_FLAG_U_PKG;

PROCEDURE CCN_STNDRD_ADDR_MISMATCH_PKG
/*******************************************************************************
This procedure is used to generate a standardized mismatch report and send it in an email

Created : 07/17/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
IS
    CURSOR ADDRESS_MISMATCH_REC IS
        SELECT COST_CENTER_CODE
          FROM ADDRESS_USA 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL
        UNION
        SELECT COST_CENTER_CODE
          FROM ADDRESS_CAN 
         WHERE ADDRESS_TYPE            = 'S'
           AND CLEANSING_FLAG          = 'Y'
           AND EXPIRATION_DATE IS NULL;

    V_CLOB              CLOB;
BEGIN
    FOR rec in ADDRESS_MISMATCH_REC LOOP
        V_CLOB :=  rec.COST_CENTER_CODE || CHR(10) || V_CLOB;
    END LOOP;
    -- If clob is empty then dont send an email
    IF V_CLOB <> EMPTY_CLOB() THEN
       V_CLOB := 'COST_CENTER_CODE' || CHR(10) || V_CLOB;
       MAIL_PKG.SEND_MAIL('CCN_STANDARDIZED_ADDRESS_MISMATCH', NULL, NULL, V_CLOB);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_STNDRD_ADDR_MISMATCH_PKG;

FUNCTION IS_USA_STNDRD_ADDR_MISMTCH_GEO(
/*******************************************************************************
This function is used to compare the standardized address with the address in geo view.
If they did not match,return 'Y' else null.

Created : 07/10/2018 pxa852 CCN project team....
Changed :
*******************************************************************************/
    IN_GEO_RECORD                IN     CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE,
    IN_MAILING_ADDR_EFFCTV_DT    IN     DATE)
RETURN VARCHAR2
IS
     V_ADDRESS_USA_ROW   ADDRESS_USA%ROWTYPE;
     V_RETURN_VALUE      VARCHAR2(1) := 'N';
BEGIN
    GET_ACTV_ADDRESS_USA_BY_TYPE(IN_GEO_RECORD.STORE, 'S', V_ADDRESS_USA_ROW);
    -- comparing old and new address and return 'Y' if they are not equal else return null
IF V_ADDRESS_USA_ROW.CLEANSING_FLAG IS NULL AND
        (V_ADDRESS_USA_ROW.EFFECTIVE_DATE              <> IN_MAILING_ADDR_EFFCTV_DT OR
        NVL(IN_GEO_RECORD.STREET,'XXX')                <> NVL(V_ADDRESS_USA_ROW.ADDRESS_LINE_1,'XXX')  OR
        NVL(IN_GEO_RECORD.STREET2,'XXX')               <> NVL(V_ADDRESS_USA_ROW.ADDRESS_LINE_2,'XXX')  OR
        NVL(IN_GEO_RECORD.CITY,'XXX')                  <> NVL(V_ADDRESS_USA_ROW.CITY,'XXX')            OR
        NVL(IN_GEO_RECORD.STATE,'XXX')                 <> NVL(V_ADDRESS_USA_ROW.STATE_CODE,'XXX')      OR
        NVL(TRIM(IN_GEO_RECORD.ZIP),'XXX')             <> NVL(V_ADDRESS_USA_ROW.ZIP_CODE,'XXX')        OR
        NVL(TRIM(IN_GEO_RECORD.ZIP4),'XXX')            <> NVL(V_ADDRESS_USA_ROW.ZIP_CODE_4,'XXX')      OR
        NVL(IN_GEO_RECORD.COUNTRY_3,'XXX')             <> NVL(V_ADDRESS_USA_ROW.COUNTRY_CODE,'XXX')    OR
        NVL(IN_GEO_RECORD.COUNTY, 'XXX')               <> NVL(V_ADDRESS_USA_ROW.COUNTY, 'XXX'))        THEN
         V_RETURN_VALUE := 'Y';
    END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
	  RETURN V_RETURN_VALUE;
END IS_USA_STNDRD_ADDR_MISMTCH_GEO;

FUNCTION IS_CAN_STNDRD_ADDR_MISMTCH_GEO(
/*******************************************************************************
This function is used to compare the standardized address with the address in geo view.
If they did not match,return 'Y' else null.

Created : 07/10/2018 pxa852 CCN project team....
Changed :
*******************************************************************************/
    IN_GEO_RECORD                IN     CCN_ADDRESS_GEO_V_DETAILS%ROWTYPE,
    IN_MAILING_ADDR_EFFCTV_DT    IN     DATE)
RETURN VARCHAR2
IS
     V_ADDRESS_CAN_ROW   ADDRESS_CAN%ROWTYPE;
     V_RETURN_VALUE      VARCHAR2(1) := 'N';
BEGIN
        GET_ACTV_ADDRESS_CAN_BY_TYPE(IN_GEO_RECORD.STORE, 'S', V_ADDRESS_CAN_ROW);
        -- comparing geo and standardized address and return 'Y' if they are not equal else return null
IF V_ADDRESS_CAN_ROW.CLEANSING_FLAG IS NULL AND
           (V_ADDRESS_CAN_ROW.EFFECTIVE_DATE                              <> IN_MAILING_ADDR_EFFCTV_DT OR
            NVL(IN_GEO_RECORD.STREET,'XXX')                               <> NVL(V_ADDRESS_CAN_ROW.ADDRESS_LINE_1,'XXX')   OR
            NVL(IN_GEO_RECORD.STREET2,'XXX')                              <> NVL(V_ADDRESS_CAN_ROW.ADDRESS_LINE_2,'XXX')   OR
            NVL(IN_GEO_RECORD.CITY,'XXX')                                 <> NVL(V_ADDRESS_CAN_ROW.CITY,'XXX')             OR
            NVL(IN_GEO_RECORD.STATE,'XXX')                                <> NVL(V_ADDRESS_CAN_ROW.PROVINCE_CODE,'XXX')    OR
            NVL(TRIM(IN_GEO_RECORD.ZIP)||TRIM(IN_GEO_RECORD.ZIP4),'XXX')  <> NVL(V_ADDRESS_CAN_ROW.POSTAL_CODE,'XXX')      OR
            NVL(IN_GEO_RECORD.COUNTRY_3,'XXX')                            <> NVL(V_ADDRESS_CAN_ROW.COUNTRY_CODE,'XXX'))    THEN
            V_RETURN_VALUE := 'Y';
        END IF;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
	  RETURN V_RETURN_VALUE;
END IS_CAN_STNDRD_ADDR_MISMTCH_GEO;

PROCEDURE CCN_CLEANSING_ADDRESS_IU_PKG
/*******************************************************************************
This procedure is intended to create/update a standardized record in addres_usa and address_can tables.
If there is no record present in address table with address_type 'S' for the record in addres_geo_v, it will
create a new record in address table with the mailing address effective date.

If there is already record present in address table with address type 'S' and there is a change in address,
it will update the standardized address in ccn address table.

If there is any update to the mailing address, it will expire the existing standardized address record 
and create a new record with address type 'S'

Created :  07/06/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
IS
    CURSOR ADDRESS_GEO_REC IS
        SELECT A.*
          FROM CCN_ADDRESS_GEO_V_DETAILS A,
               COST_CENTER CC
         WHERE A.STORE            = CC.COST_CENTER_CODE
           AND CC.CATEGORY        = 'S'
           AND CC.COUNTRY_CODE IN ('USA', 'CAN', 'PRI');

    V_ADDRESS_USA_ROW            ADDRESS_USA%ROWTYPE;
    V_ADDRESS_CAN_ROW            ADDRESS_CAN%ROWTYPE;
    V_COUNT                      INTEGER;
BEGIN
    --Below calls will check if any corrections happened in dta services to match CCN updated standardized address
    --If they match we will reset the cleansing flag to null to consider that cost centers in cleansing process
    --NOTE: First run will have nothing to reset, as the flag value will be blank for all records
    CCN_USA_CLEANSING_FLAG_U_PKG();
    CCN_CAN_CLEANSING_FLAG_U_PKG();

    --LOOP through the each store record in address_geo_v
    FOR rec in ADDRESS_GEO_REC LOOP
        V_ADDRESS_USA_ROW := NULL;
        V_ADDRESS_CAN_ROW := NULL;
       --add save point and rollback to this for that iteration if anything fails
        SAVEPOINT SVPNT;
        BEGIN
            IF rec.COUNTRY_3 IN ('USA', 'PRI') THEN
               --SELECT * FROM ADDRESS_USA WHERE COST_CENTER_CODE=''
                -- Get the effective date for mailing address type
                GET_ACTV_ADDRESS_USA_BY_TYPE(rec.STORE, 'M', V_ADDRESS_USA_ROW);
                --Check if standardized address mismatches data services geo address
                IF IS_USA_STNDRD_ADDR_MISMTCH_GEO(rec, V_ADDRESS_USA_ROW.EFFECTIVE_DATE) = 'Y' THEN
                    V_ADDRESS_USA_ROW.COST_CENTER_CODE          := rec.STORE;        V_ADDRESS_USA_ROW.ADDRESS_TYPE              := 'S';
                    V_ADDRESS_USA_ROW.ADDRESS_LINE_1            := rec.STREET;
                    V_ADDRESS_USA_ROW.ADDRESS_LINE_2            := rec.STREET2;
                    V_ADDRESS_USA_ROW.ADDRESS_LINE_3            := NULL;
                    V_ADDRESS_USA_ROW.CITY                      := rec.CITY;
                    V_ADDRESS_USA_ROW.STATE_CODE                := rec.STATE;
                    V_ADDRESS_USA_ROW.ZIP_CODE                  := TRIM(rec.ZIP);
                    V_ADDRESS_USA_ROW.ZIP_CODE_4                := TRIM(rec.ZIP4);
                    V_ADDRESS_USA_ROW.FIPS_CODE                 := NULL;
                    V_ADDRESS_USA_ROW.COUNTY                    := rec.COUNTY;
                    V_ADDRESS_USA_ROW.COUNTRY_CODE              := rec.COUNTRY_3;
                        
                    --expire the old standardized record and creates/updates a new record
                    ADDRESS_USA_I_SP(V_ADDRESS_USA_ROW);
                END IF;
ELSIF rec.COUNTRY_3 = 'CAN' THEN
                -- Get the effective date for mailing address type
                GET_ACTV_ADDRESS_CAN_BY_TYPE(rec.STORE, 'M', V_ADDRESS_CAN_ROW);
                --Check if standardized address mismatches data services geo address
                IF IS_CAN_STNDRD_ADDR_MISMTCH_GEO(rec, V_ADDRESS_CAN_ROW.EFFECTIVE_DATE) = 'Y'  THEN
                    V_ADDRESS_CAN_ROW.COST_CENTER_CODE          := rec.STORE;
                    V_ADDRESS_CAN_ROW.ADDRESS_TYPE              := 'S';
                    V_ADDRESS_CAN_ROW.ADDRESS_LINE_1            := rec.STREET;
                    V_ADDRESS_CAN_ROW.ADDRESS_LINE_2            := rec.STREET2;
                    V_ADDRESS_CAN_ROW.ADDRESS_LINE_3            := NULL;
                    V_ADDRESS_CAN_ROW.CITY                      := rec.CITY;
                    V_ADDRESS_CAN_ROW.PROVINCE_CODE             := rec.STATE;
                    V_ADDRESS_CAN_ROW.POSTAL_CODE               := TRIM(rec.ZIP)||TRIM(rec.ZIP4);
                    V_ADDRESS_CAN_ROW.VALID_ADDRESS             := NULL;
                    V_ADDRESS_CAN_ROW.COUNTRY_CODE              := rec.COUNTRY_3;

                    --expire the old standardized record and creates/updates a new record
                    ADDRESS_CAN_I_SP (V_ADDRESS_CAN_ROW);
                END IF;
             END IF;
        EXCEPTION
            WHEN OTHERS THEN
                UPDATE_CLEANSING_FLAG(rec.STORE, 'Y');
                ROLLBACK TO SVPNT;
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, ' CCN_CLEANSING_ADDRESS ', SUBSTR(SQLERRM,1,500), rec.STORE);
        END;
        COMMIT;
    END LOOP;

    CCN_STNDRD_ADDR_MISMATCH_PKG();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_CLEANSING_ADDRESS_IU_PKG;

PROCEDURE CCN_CLEANSING_ADDRESS
/*******************************************************************************
This procedure is used to truncate the current table and insert the data into current and history tables.

Created : 07/18/2018 pxa852 Address Object....
Changed :
*******************************************************************************/
IS
BEGIN
    --this table is used in cleasing process instead of address_geo_v.
    --Truncate this table in each run and reload it with the data from address_geo_v
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CCN_ADDRESS_GEO_V_DETAILS';
    INSERT INTO CCN_ADDRESS_GEO_V_DETAILS (SELECT * FROM ADDRESS_GEO_V);

    --Below delete is to support multiple runs and avoid duplicate load of that data into history tables
    DELETE FROM CCN_ADDRESS_GEO_V_HIST WHERE LOAD_DATE  = TRUNC(SYSDATE);
    --A new table is created for maintaining history of address_geo_v
    --inserting data into history table in each run.Populating load date with sysdate.
    --Primary key is on store and load date columns
    INSERT INTO CCN_ADDRESS_GEO_V_HIST (SELECT STORE,
                                               STREET,
                                               STREET2,
                                               CITY,
                                               STATE,
                                               ZIP,
                                               ZIP4,
                                               LON,
                                               LAT,
                                               COUNTRY_3,
                                               MANUAL_OVERRIDE,
                                               COUNTY,
                                               TRUNC(SYSDATE)
                                           FROM ADDRESS_GEO_V);
    COMMIT;
    -- calling cleansing address process after inserting data into ccn_address_geo_v_details, ccn_address_geo_v_hist tables.
    CCN_CLEANSING_ADDRESS_IU_PKG();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, SUBSTR(SQLERRM,1, 500) ||' CCN_CLEANSING_ADDRESS '  || ' errors found');
END CCN_CLEANSING_ADDRESS;

FUNCTION GET_USA_CLEANSING_FLAG_FNC(
/*******************************************************************************
This function is used to compare the old standardized address with the new address. 
If they did not match,return 'Y' else null.

Created : 07/10/2018 pxa852 CCN project team....
Changed :
*******************************************************************************/
    IN_ADDRESS_USA_ROW   IN    ADDRESS_USA%ROWTYPE)
RETURN VARCHAR2
IS
     V_ADDRESS_USA_ROW   ADDRESS_USA%ROWTYPE;
     V_RETURN_VALUE      VARCHAR2(1) := NULL;
BEGIN
    -- get old record and store it in a variable
    IF NVL(IN_ADDRESS_USA_ROW.ADDRESS_TYPE,'XXX') = 'S' THEN
        GET_ACTV_ADDRESS_USA_BY_TYPE(IN_ADDRESS_USA_ROW.COST_CENTER_CODE,
                                     IN_ADDRESS_USA_ROW.ADDRESS_TYPE,
                                     V_ADDRESS_USA_ROW);
        --comparing old and new address and return 'Y' if they are not equal else return null
        --raising a warning message if user add/updates the standardized address from UI
        IF (NVL(IN_ADDRESS_USA_ROW.ADDRESS_LINE_1,'XXX')  <> NVL(V_ADDRESS_USA_ROW.ADDRESS_LINE_1,'XXX')  OR
           NVL(IN_ADDRESS_USA_ROW.ADDRESS_LINE_2,'XXX')   <> NVL(V_ADDRESS_USA_ROW.ADDRESS_LINE_2,'XXX')  OR
           NVL(IN_ADDRESS_USA_ROW.CITY,'XXX')             <> NVL(V_ADDRESS_USA_ROW.CITY,'XXX')            OR
           NVL(IN_ADDRESS_USA_ROW.STATE_CODE,'XXX')       <> NVL(V_ADDRESS_USA_ROW.STATE_CODE,'XXX')      OR
           NVL(IN_ADDRESS_USA_ROW.ZIP_CODE,'XXX')         <> NVL(V_ADDRESS_USA_ROW.ZIP_CODE,'XXX')        OR
           NVL(IN_ADDRESS_USA_ROW.ZIP_CODE_4, 'XXX')      <> NVL(V_ADDRESS_USA_ROW.ZIP_CODE_4,'XXX')      OR
           NVL(IN_ADDRESS_USA_ROW.COUNTRY_CODE, 'XXX')    <> NVL(V_ADDRESS_USA_ROW.COUNTRY_CODE,'XXX')    OR
           NVL(IN_ADDRESS_USA_ROW.COUNTY, 'XXX')          <> NVL(V_ADDRESS_USA_ROW.COUNTY, 'XXX'))        THEN
            V_RETURN_VALUE := 'Y';
            ERRPKG.STORE_WARNINGS(errnums.en_standardized_addr_chng_err,
                                  'Standardized address is updated as requested, please contact data services to discuss about the issue');
        END IF;
    END IF;     
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN 
        RETURN V_RETURN_VALUE;
END GET_USA_CLEANSING_FLAG_FNC;

FUNCTION GET_CAN_CLEANSING_FLAG_FNC(
/*******************************************************************************
This function is used to compare the old standardized address with the new address. 
If they did not match,return 'Y' else null.

Created : 07/10/2018 pxa852 CCN project team....
Changed :
*******************************************************************************/
    IN_ADDRESS_CAN_ROW   IN    ADDRESS_CAN%ROWTYPE)
RETURN VARCHAR2
IS
          V_ADDRESS_CAN_ROW   ADDRESS_CAN%ROWTYPE;
          V_RETURN_VALUE      VARCHAR2(1) := NULL;
BEGIN
     --getting old record and storing it in a rowtype variable
     IF NVL(IN_ADDRESS_CAN_ROW.ADDRESS_TYPE,'XXX') = 'S' THEN
         GET_ACTV_ADDRESS_CAN_BY_TYPE(IN_ADDRESS_CAN_ROW.COST_CENTER_CODE,
                                      IN_ADDRESS_CAN_ROW.ADDRESS_TYPE,
                                      V_ADDRESS_CAN_ROW);
         --comparing old and new address and return 'Y' if they are not equal else return null
         --raising a warning message if user add/updates the standardized address from UI
         IF  (NVL(IN_ADDRESS_CAN_ROW.ADDRESS_LINE_1,'XXX')  <> NVL(V_ADDRESS_CAN_ROW.ADDRESS_LINE_1,'XXX')   OR
              NVL(IN_ADDRESS_CAN_ROW.ADDRESS_LINE_2,'XXX')  <> NVL(V_ADDRESS_CAN_ROW.ADDRESS_LINE_2,'XXX')   OR
              NVL(IN_ADDRESS_CAN_ROW.CITY,'XXX')            <> NVL(V_ADDRESS_CAN_ROW.CITY,'XXX')             OR
              NVL(IN_ADDRESS_CAN_ROW.PROVINCE_CODE,'XXX')   <> NVL(V_ADDRESS_CAN_ROW.PROVINCE_CODE,'XXX')    OR
              NVL(IN_ADDRESS_CAN_ROW.POSTAL_CODE,'XXX')     <> NVL(V_ADDRESS_CAN_ROW.POSTAL_CODE,'XXX')      OR
              NVL(IN_ADDRESS_CAN_ROW.COUNTRY_CODE,'XXX')    <> NVL(V_ADDRESS_CAN_ROW.COUNTRY_CODE,'XXX'))  THEN
              V_RETURN_VALUE  :=  'Y';
              ERRPKG.STORE_WARNINGS(errnums.en_standardized_addr_chng_err,
                                    'Standardized address is updated as requested, please contact data services to discuss about the issue');
          END IF;  
     END IF;
     RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN 
         RETURN V_RETURN_VALUE;
END GET_CAN_CLEANSING_FLAG_FNC;
END CCN_CLEANSING_ADDRESS_PKG;