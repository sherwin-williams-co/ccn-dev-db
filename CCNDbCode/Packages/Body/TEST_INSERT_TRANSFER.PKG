PACKAGE BODY TEST_INSERT_TRANSFER AS

PROCEDURE BUILD_COMPOSITE_KEYS(
/***********************************************************
      BUILD_COMPOSITE_KEYS 
      This Procedure will build composite keys for the Transfer
      or INSERT Procedures

Input :-

<HIERARCHY_DETAIL>
  <row_data>
        <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
        <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
        <FROM_HIERARCHY>
            <HRCHY_LEVEL1>05</HRCHY_LEVEL1> 
            <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
            <HRCHY_LEVEL3>95</HRCHY_LEVEL3>
        </FROM_HIERARCHY>
	<TRANSFER_TO>
        	<TO_HIERARCHY>
       		     <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
       		     <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
       		     <HRCHY_LEVEL3>35</HRCHY_LEVEL3>
       		     <HRCHY_LEVEL4>784659</HRCHY_LEVEL4>
       		     <HRCHY_DTL_EFF_DATE>01-APR-2014</HRCHY_DTL_EFF_DATE>
       		     <HRCHY_DTL_EXP_DATE>01-APR-2015</HRCHY_DTL_EXP_DATE>
			        <attributes>
			             <upper_lvl_ver_desc> 
			                  <Name>statement_type</Name>
			                  <Description>pkListValue</Description>
			                  <Value>US1</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>ManagerName</Name>
			                  <Description>CC Mgr Name</Description>
			                  <Value>Some Name1</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>state_code</Name>
			                  <Description>pkListValue</Description>
			                  <Value>CA1</Value>
			             </upper_lvl_ver_desc>
			        </attributes>
                     <HRCHY_DTL_DESC>LAS VEGAS-RANCHO</HRCHY_DTL_DESC>
       		 </TO_HIERARCHY>
                 <TO_HIERARCHY>
       		     <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
        	     <HRCHY_LEVEL2>03</HRCHY_LEVEL2> 
        	     <HRCHY_LEVEL3>99</HRCHY_LEVEL3>
        	     <HRCHY_LEVEL4>784987</HRCHY_LEVEL4>
		     <HRCHY_DTL_EFF_DATE>01-MAY-2014</HRCHY_DTL_EFF_DATE>
		     <HRCHY_DTL_EXP_DATE>01-MAY-2015</HRCHY_DTL_EXP_DATE>
			        <attributes>
			             <upper_lvl_ver_desc> 
			                  <Name>statement_type</Name>
			                  <Description>pkListValue</Description>
			                  <Value>US2</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>ManagerName</Name>
			                  <Description>CC Mgr Name</Description>
			                  <Value>Some Name2</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>state_code</Name>
			                  <Description>pkListValue</Description>
			                  <Value>CA2</Value>
			             </upper_lvl_ver_desc>
			        </attributes>
                     <HRCHY_DTL_DESC>WEST PACIFIC NW PF REP</HRCHY_DTL_DESC>
        	 </TO_HIERARCHY>
                 <TO_HIERARCHY>
       		     <HRCHY_LEVEL1>04</HRCHY_LEVEL1> 
        	     <HRCHY_LEVEL2>04</HRCHY_LEVEL2> 
        	     <HRCHY_LEVEL3>05</HRCHY_LEVEL3>
        	     <HRCHY_LEVEL4>786892</HRCHY_LEVEL4>
		     <HRCHY_DTL_EFF_DATE>01-JUN-2014</HRCHY_DTL_EFF_DATE>
		     <HRCHY_DTL_EXP_DATE>01-JUN-2015</HRCHY_DTL_EXP_DATE>
			        <attributes>
			             <upper_lvl_ver_desc> 
			                  <Name>statement_type</Name>
			                  <Description>pkListValue</Description>
			                  <Value>US3</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>ManagerName</Name>
			                  <Description>CC Mgr Name</Description>
			                  <Value>Some Name3</Value>
			             </upper_lvl_ver_desc>
			             <upper_lvl_ver_desc> 
			                  <Name>state_code</Name>
			                  <Description>pkListValue</Description>
			                  <Value>CA3</Value>
			             </upper_lvl_ver_desc>
			        </attributes>
                     <HRCHY_DTL_DESC>02/11 WEST PF REP</HRCHY_DTL_DESC>
        	 </TO_HIERARCHY>
	</TRANSFER_TO>

  </row_data>
</HIERARCHY_DETAIL>
**************************************************************
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD STRUCTURE</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>4</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>05</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>04</HRCHY_LEVEL2> 
      <HRCHY_LEVEL3>86</HRCHY_LEVEL3>
      <HRCHY_LEVEL4>785900</HRCHY_LEVEL4>
      <HRCHY_DTL_DESC>PF WEST REGION</HRCHY_DTL_DESC>
      <HRCHY_DTL_EFF_DATE>01-JAN-2013</HRCHY_DTL_EFF_DATE>
      <HRCHY_DTL_EXP_DATE>01-JAN-9999</HRCHY_DTL_EXP_DATE>
      <UPPER_LVL_VER_VALUE>01</UPPER_LVL_VER_VALUE>
  </row_data>
</HIERARCHY_DETAIL>


      IN_FLAG          'TO' or  'FROM' or  'INSERT'
      IN_COUNT         This corresponds to particular "TO" XML Portion
      IN_LAST_LEVEL    This is a flag to tell if this is the last level composite key generation or not
Created : 08/02/2013  CCN Project
************************************************************/
            IN_FLAG                  IN     VARCHAR2,
            IN_XML                   IN     VARCHAR2,
            IN_HRCHY_HDR_NAME        IN     VARCHAR2,
            IN_HRCHY_DTL_LEVEL       in     VARCHAR2,
            IN_COUNT                 IN     NUMBER,
            IN_LAST_LEVEL            IN     VARCHAR2,
            OUT_HIERARCHY_DETAIL_ROW OUT HIERARCHY_DETAIL%ROWTYPE)
is
  V_CONTEXT      VARCHAR2(3000);
  V_NEXT_ROW_VAL VARCHAR2(100);
  CC_EXISTS_ERR  EXCEPTION;

  V_ROW_DATA     XMLTYPE := SYS.XMLTYPE(IN_XML); 
  SQ             INTEGER;
  SE             VARCHAR2(1000);

BEGIN
   OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME    := IN_HRCHY_HDR_NAME;
   OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL   := IN_HRCHY_DTL_LEVEL;
/*
FROM Condition below will get the details of composite keys that are getting transfered using FROM portion of XML
TO Condition below will get the details of composite keys that are getting transfered using TO portion of XML
INSERT Condition below will get the details of composite keys that are getting transfered using INSERT XML
*/
   CASE WHEN IN_FLAG = 'FROM' THEN
        V_CONTEXT := 'Extracting FROM Hierarchy Details';
        FOR i in 1..IN_HRCHY_DTL_LEVEL - 1 LOOP
            --Previous Level Value should extract values of all levels except current level
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL :=  OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
        END LOOP; 
 
        IF IN_LAST_LEVEL = 'Y' THEN
            --Building composite 'FROM' keys for last record using 'TO' XML, as we won't be having last level details in 'FROM' XML
            --Current Row Value should extract value as the current level alone
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || IN_HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
            --Expiration Date of last level should be obtained from 'TO' level XML Effective Date
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE     := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE;
        ELSE
            --Building composite 'FROM' keys for other records using 'FROM' XML
            --Current Row Value should extract value as the current level alone
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || IN_HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();

            --Next value should be extracted using 'FROM' XML with current iteration + 1, if one exists
            --If not exists then get that from 'TO' XML - this will happen only for last level - 1 iteration in 'FROM' XML
            IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
               V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/FROM_HIERARCHY/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
            ELSE
               V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL(); 
            END IF;
            --Expiration Date of other levels should be obtained from existing current level records from Detail table
        END IF;

   WHEN IN_FLAG = 'TO' THEN
        V_CONTEXT := 'Extracting TO Hierarchy Details';
        --Building composite 'TO' keys using 'TO' XML
        FOR i IN 1..IN_HRCHY_DTL_LEVEL - 1 LOOP
            --Previous Level Value should extract values of all levels except current level
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL  :=  OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
        END LOOP;

        --Extract all available values from 'TO' XML
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC          := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_DTL_DESC/text()').GETSTRINGVAL();
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL  := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || IN_HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE      := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_DTL_EFF_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'|| '/HRCHY_DTL_EXP_DATE/text()') =1) THEN
          OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');    
        END IF;
      
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/attributes') = 1) THEN
           OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE     := SYS.XMLTYPE.CREATEXML(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/attributes').GETCLOBVAL());
        END IF;
        --Next value should be extracted using 'TO' XML with current iteration + 1, if one exists
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
           V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' ||'[' || IN_COUNT || ']'||'/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
        END IF;

   WHEN IN_FLAG = 'INSERT' THEN
        V_CONTEXT := 'Extracting INSERT Hierarchy Details';
       --This will be used by the HIERARCHY_DETAIL_INSERT procedure
        --Building composite 'INSERT' keys using 'INSERT' XML
        FOR i IN 1..IN_HRCHY_DTL_LEVEL - 1 LOOP
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL  :=  OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || i ||'/text()').GETSTRINGVAL();
        END LOOP;

        --Extract all available values from 'INSERT' XML
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC           := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_DESC/text()').GETSTRINGVAL(); 
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL   := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || IN_HRCHY_DTL_LEVEL ||'/text()').GETSTRINGVAL();
        OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE      := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EFF_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY');
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()') = 1) THEN
            OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE   := TO_DATE(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_EXP_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY'); 
        END IF;
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/attributes') = 1) THEN
          OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE     := SYS.XMLTYPE.CREATEXML(V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/attributes').GETCLOBVAL());
        END IF;
        --Next value should be extracted using 'INSERT' XML with current iteration + 1, if one exists
        IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()') =1) THEN
           V_NEXT_ROW_VAL := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_LEVEL' || (IN_HRCHY_DTL_LEVEL + '1') ||'/text()').GETSTRINGVAL();
        END IF;

           BEGIN
           --Start Check that a cost center should not belong to more than one Hierarchy
           IF CCN_HIER_BUSINESS_RULES_PKG.GET_HDR_LVL_DESC_SP(OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME, OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL) = 'Cost Center' THEN    
              V_CONTEXT := 'Calling the DUPLICATE_COST_CENTER';
              CCN_HIER_BUSINESS_RULES_PKG.DUPLICATE_COST_CENTER(OUT_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME, OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL, OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL);
           END IF;
 
           EXCEPTION
              WHEN OTHERS THEN
                 RAISE CC_EXISTS_ERR;
           END;

   ELSE
      NULL;
   END CASE;

   --Current Level Value should extract values of all levels as well as current level
   OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL || OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL;

   IF IN_LAST_LEVEL = 'Y' THEN
      --HRCHY_DTL_NEXT_LVL_VAL is '~~~' for next val of last level
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
   ELSE
     OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL := OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL || V_NEXT_ROW_VAL;
   END IF;

   --Assign Previous Level value for 1st Level as ~~~
   IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL = 1 THEN
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL := '~~~';
   END IF;

   --Getting descriptions for the corresponding level, if not present
   IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC IS NULL THEN
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_DESC := HIERARCHY_DESC_RETURN(OUT_HIERARCHY_DETAIL_ROW);
   END IF;

   ---Getting attribute value for the corresponding level, if not present
   IF OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE IS NULL THEN
      OUT_HIERARCHY_DETAIL_ROW.UPPER_LVL_VER_VALUE := HIERARCHY_ATTRIBUTE_RETURN(OUT_HIERARCHY_DETAIL_ROW);  
   END IF;
   
   ---Getting Effective Date value for the corresponding level, if not present
   IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE IS NULL THEN
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE := HIERARCHY_EFF_DATE_RETURN(OUT_HIERARCHY_DETAIL_ROW);  
   END IF;
   
   ---Getting Expiration Date value for the corresponding level, if not present
   IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE IS NULL THEN
      OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EXP_DATE := HIERARCHY_EXP_DATE_RETURN(OUT_HIERARCHY_DETAIL_ROW);  
   END IF;
   
   --Calling the Business rules or validations before an Insert which is - 'INSERT' or 'TO' 
   IF IN_FLAG IN ('INSERT','TO') THEN
      V_CONTEXT := 'Calling the Business Rules pkg';
      --CCN_HIER_BUSINESS_RULES_PKG.HIER_BUSINESS_RULES_MAIN(IN_XML);  
   END IF;

EXCEPTION
    
     WHEN CC_EXISTS_ERR THEN  
             SQ := ERRNUMS.EN_CC_EXISTS_ERR;
             ERRPKG.RAISE_ERR(SQ, 'The Cost Center ' || OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_ROW_VAL|| ' already exists');
             
     WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'BUILD_COMPOSITE_KEYS ',V_CONTEXT);
END BUILD_COMPOSITE_KEYS;

FUNCTION CURRENT_LVL_EXISTS (
/***********************************************************
      CURRENT_LVL_EXISTS 
      This Procedure will check for the current record 
      before the insert for Duplicates

      IN_FLAG          'H' for History table and NULL for Detail table
      
Created : 07/25/2013 CCN Project
************************************************************/
IN_FLAG                  IN  VARCHAR2,
IN_HIERARCHY_DETAIL_ROW  IN  HIERARCHY_DETAIL%ROWTYPE)
RETURN VARCHAR2
IS
  V_RETURN_VALUE    VARCHAR2(1) := 'N';
  V_COUNT           NUMBER;
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      SELECT COUNT(*) INTO V_COUNT
        FROM HIERARCHY_DETAIL_HST
       WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         and HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
   ELSE
      SELECT COUNT(*) INTO V_COUNT
        FROM HIERARCHY_DETAIL
       WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
   END IF;
  
   --This implies that current record already exists in the table
   IF V_COUNT > 0 THEN
      V_RETURN_VALUE := 'Y';
   END IF;
   
   RETURN V_RETURN_VALUE;
END CURRENT_LVL_EXISTS;

PROCEDURE GET_PREVIOUS_LVL(
/***********************************************************
      GET_PREVIOUS_LVL 
      This Procedure get the previous record 

      IN_FLAG          'H' for History table and NULL for Detail table

Created : 07/25/2013 CCN Project
************************************************************/
  IN_FLAG                  IN  VARCHAR2,
  IN_HIERARCHY_DETAIL_ROW  IN  HIERARCHY_DETAIL%ROWTYPE,
  OUT_HIERARCHY_DETAIL_ROW OUT HIERARCHY_DETAIL%ROWTYPE)
IS
  V_COUNT                NUMBER;
  V_HIERARCHY_DETAIL_ROW HIERARCHY_DETAIL%ROWTYPE;
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      BEGIN
         --Check if previous level exists already in History table. If so return that as output
         SELECT * INTO V_HIERARCHY_DETAIL_ROW
           FROM HIERARCHY_DETAIL_HST
          WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
            AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
            AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1');
      EXCEPTION
         --This exception is to proceed even if no records found
         WHEN NO_DATA_FOUND THEN
            NULL;
      END;
      --If not return the already existing previous level History record as ouptut
      IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL IS NULL THEN
         BEGIN
            SELECT * INTO V_HIERARCHY_DETAIL_ROW
              FROM HIERARCHY_DETAIL_HST
             WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
               AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
               AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1')
               AND ROWNUM < 2;
         EXCEPTION
            --This exception is to proceed even if no records found
            WHEN NO_DATA_FOUND THEN
               NULL;
         END;  
      END IF;
   ELSE
      BEGIN
         --Check if previous level exists already in Detail table. If so return that as output
         SELECT * INTO V_HIERARCHY_DETAIL_ROW
           FROM HIERARCHY_DETAIL
          WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
            AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
            AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1');
      EXCEPTION
         --This exception is to proceed even if no records found
         WHEN NO_DATA_FOUND THEN
            NULL;
      END;             
      
      IF OUT_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL IS NULL THEN
         BEGIN
            --If not return the already existing previous level Detail record as ouptut
            SELECT * INTO V_HIERARCHY_DETAIL_ROW
              FROM HIERARCHY_DETAIL
             WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL
               AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
               AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1')
               AND ROWNUM < 2;
         EXCEPTION
            --This exception is to proceed even if no records found
            WHEN NO_DATA_FOUND THEN
               NULL;
         END;  
      END IF;
   
   END IF;
   
   --If the output of this procedure is NULL, meaning previous level doesn't exists at all
   --In that case we should insert previous level also in a recursive style [Handled in INSERT_PROCESS]
   OUT_HIERARCHY_DETAIL_ROW := V_HIERARCHY_DETAIL_ROW;

EXCEPTION
   WHEN OTHERS THEN 
      OUT_HIERARCHY_DETAIL_ROW := NULL;
END GET_PREVIOUS_LVL;

FUNCTION HIERARCHY_DESC_RETURN (
/***********************************************************
      HIERARCHY_DESC_RETURN 
      This Procedure will return the Hierarchy level DESC 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. This is used for the insert into hist for Transfer 
      process.
input param : IN_HIERARCHY_DETAIL_ROW
Created : 03/19/2013 SH CCN Project
revised : 05/02/2013 kdp ccn Header Name to query 
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN VARCHAR2
IS
  V_HRCHY_DTL_DESC HIERARCHY_DETAIL.HRCHY_DTL_DESC%TYPE;
BEGIN
   SELECT DISTINCT HRCHY_DTL_DESC INTO V_HRCHY_DTL_DESC
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL;
   
   RETURN V_HRCHY_DTL_DESC;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_DESC_RETURN;

FUNCTION HIERARCHY_ATTRIBUTE_RETURN (
/***********************************************************
      HIERARCHY_ATTRIBUTE_RETURN 
      This Procedure will return the Hierarchy level Attributes 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. 

input param : IN_HIERARCHY_DETAIL_ROW
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN XMLTYPE
IS
  V_UPPER_LVL_VER_VALUE HIERARCHY_DETAIL.UPPER_LVL_VER_VALUE%TYPE;
BEGIN
   SELECT UPPER_LVL_VER_VALUE INTO V_UPPER_LVL_VER_VALUE
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
      AND ROWNUM < 2;

RETURN V_UPPER_LVL_VER_VALUE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_ATTRIBUTE_RETURN;

FUNCTION HIERARCHY_EFF_DATE_RETURN (
/***********************************************************
      HIERARCHY_EFF_DATE_RETURN 
      This Procedure will return the Hierarchy level Effective Date 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. 

input param : IN_HIERARCHY_DETAIL_ROW
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN DATE
IS
  V_EFF_DATE_VALUE HIERARCHY_DETAIL.HRCHY_DTL_EFF_DATE%TYPE;
BEGIN
   SELECT HRCHY_DTL_EFF_DATE INTO V_EFF_DATE_VALUE
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
      AND ROWNUM < 2;

RETURN V_EFF_DATE_VALUE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_EFF_DATE_RETURN;

FUNCTION HIERARCHY_EXP_DATE_RETURN (
/***********************************************************
      HIERARCHY_EXP_DATE_RETURN 
      This Procedure will return the Hierarchy level Expiration Date 
      from HIERARCHY_DETAIL for any curr val passed and for any
      level. 

input param : IN_HIERARCHY_DETAIL_ROW
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
RETURN DATE
IS
  V_EXP_DATE_VALUE HIERARCHY_DETAIL.HRCHY_DTL_EXP_DATE%TYPE;
BEGIN
   SELECT HRCHY_DTL_EXP_DATE INTO V_EXP_DATE_VALUE
     FROM HIERARCHY_DETAIL 
    WHERE HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
      AND HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
      AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
      AND ROWNUM < 2;

RETURN V_EXP_DATE_VALUE;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to proceed even if no records found
      RETURN NULL;
END HIERARCHY_EXP_DATE_RETURN;

PROCEDURE HIERARCHY_DELETE_WRAPPER(
/***********************************************************
      HIERARCHY_DELETE_WRAPPER 
      This Procedure will delete from HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST based on the in_flag
      level. 

      IN_FLAG                  IN  VARCHAR2,

input param : in_HRCHY_DTL_CURR_LVL_VAL
Created : 08/02/2013 CCN Project
************************************************************/
IN_FLAG                 IN VARCHAR2,
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      DELETE FROM HIERARCHY_DETAIL_HST
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL;
   ELSE
      DELETE FROM HIERARCHY_DETAIL
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL;
   END IF;
END HIERARCHY_DELETE_WRAPPER;

PROCEDURE HIERARCHY_UPDATE_WRAPPER(
/***********************************************************
      HIERARCHY_UPDATE_WRAPPER 
      This Procedure will update from HIERARCHY_DETAIL or
      HIERARCHY_DETAIL_HST based on the in_flag
      level. 
      
      IN_FLAG                  IN  VARCHAR2,
  
input param : in_HRCHY_DTL_CURR_LVL_VAL
Created : 08/02/2013 CCN Project
************************************************************/
IN_FLAG                 IN VARCHAR2,
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
BEGIN
   --'H' stands for History table check, else Detail table check
   IF IN_FLAG = 'H' THEN
      UPDATE HIERARCHY_DETAIL_HST
         SET HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL
         AND HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL;
   ELSE
      UPDATE HIERARCHY_DETAIL
         SET HRCHY_DTL_NEXT_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_NEXT_LVL_VAL
       WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
         AND HRCHY_DTL_LEVEL        = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL
         AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
   END IF;
END HIERARCHY_UPDATE_WRAPPER;

PROCEDURE DELETE_PROCESS(
/***********************************************************
      DELETE_PROCESS 
      This Procedure will perform the following checks
      and then calls the wrapper for UPDATE or DELETE
      based on the in_flag
     
      a) if CURRENT_LVL_EXISTS
      b) delete the record
      c) get the Previous level record
      d) get the count to see if it is the last record or has more children
      d) if it is the last level, UPDATE  else DELETE
Created : 08/02/2013 CCN Project
************************************************************/
IN_HIST_FLAG            IN VARCHAR2,
IN_HIERARCHY_DETAIL_ROW IN HIERARCHY_DETAIL%ROWTYPE)
IS
   V_LAST_CHILD                  VARCHAR2(1);
   V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
BEGIN
   --Before deleting, check if the record exists using below condition
   IF CURRENT_LVL_EXISTS(IN_HIST_FLAG, IN_HIERARCHY_DETAIL_ROW) = 'Y' THEN
      --Delete the existing record
      HIERARCHY_DELETE_WRAPPER(IN_HIST_FLAG, IN_HIERARCHY_DETAIL_ROW);
      
      --Get previous record for update/delete, if one exists
      GET_PREVIOUS_LVL(IN_HIST_FLAG,
                      IN_HIERARCHY_DETAIL_ROW,
                      V_HIERARCHY_DETAIL_ROW_PREV);
      
      BEGIN
         --Check if this is the last record being deleted at parent level
         SELECT DECODE(COUNT(*),1,'Y','N') INTO V_LAST_CHILD
           FROM HIERARCHY_DETAIL
          WHERE HRCHY_HDR_NAME         = IN_HIERARCHY_DETAIL_ROW.HRCHY_HDR_NAME
            AND HRCHY_DTL_LEVEL        = (IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL -'1')
            AND HRCHY_DTL_CURR_LVL_VAL = IN_HIERARCHY_DETAIL_ROW.HRCHY_DTL_PREV_LVL_VAL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            V_LAST_CHILD := 'N';
      END;
      IF V_LAST_CHILD = 'Y' THEN
         --This is the last record at parent level. So update previous[parent] records next level value as ~~~
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := '~~~';
         HIERARCHY_UPDATE_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW_PREV);
      ELSE
         --This is the NOT the last record at parent level. So we can delete this at parent level
         HIERARCHY_DELETE_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW_PREV);
      END IF;
   
   END IF;
END DELETE_PROCESS;

PROCEDURE INSERT_PROCESS(
/***********************************************************
      INSERT_PROCESS 
      This Procedure will perform the core insert process that involves below steps
      If the passed flag is TO/INSERT : Inserts records into HIERARCHY_DETAIL table recursively
      --Step 1 : Insert TO Hierarchy details into the Detail Table, recursively
      --Step 1.1 : Update/Insert the previous level record's next level value with current level value
      If the passed flag is FROM : Inserts records into HIERARCHY_DETAIL_HST table recursively
      Also Deletes records from HIERARCHY_DETAIL table
      --Step 1 : Insert FROM Hierarchy details into the History Table, recursively
      --Step 2 : Delete FROM Hierarchy details from Detail Table
      --Step 2.1 : Update/Delete the previous level record's
      
Created : 08/02/2013 CCN Project
************************************************************/
                         IN_FLAG                 IN VARCHAR2,
                         IN_HIST_FLAG            IN VARCHAR2,
                         IN_XML                  IN VARCHAR2,
                         IN_HRCHY_HDR_NAME       IN VARCHAR2,
                         IN_HRCHY_DTL_LEVEL      IN VARCHAR2,
                         IN_COUNT                IN NUMBER,
                         IN_LAST_LEVEL           IN VARCHAR2)
IS
   V_HIERARCHY_DETAIL_ROW        HIERARCHY_DETAIL%ROWTYPE;
   V_HIERARCHY_DETAIL_ROW_PREV   HIERARCHY_DETAIL%ROWTYPE;
   V_ROW_DATA                    XMLTYPE := SYS.XMLTYPE(IN_XML);
BEGIN
   --Building the Composite key based on parameters passed
   BUILD_COMPOSITE_KEYS(IN_FLAG,
                        IN_XML,
                        IN_HRCHY_HDR_NAME,
                        IN_HRCHY_DTL_LEVEL,
                        IN_COUNT,
                        IN_LAST_LEVEL,
                        V_HIERARCHY_DETAIL_ROW);
   --Get the previous level record, if one exists
   GET_PREVIOUS_LVL(IN_HIST_FLAG,
                    V_HIERARCHY_DETAIL_ROW,
                    V_HIERARCHY_DETAIL_ROW_PREV);
  
   IF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL IS NOT NULL THEN
      IF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL = '~~~' THEN
         --If previous level's Next Value is ~~~, we need to update that with current level value
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
         HIERARCHY_UPDATE_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW_PREV);
      ELSIF V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL <> V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL THEN
         --If previous level's Next Value is NOT ~~~ and NOT current level value, insert one
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_NEXT_LVL_VAL := V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_CURR_LVL_VAL;
         V_HIERARCHY_DETAIL_ROW_PREV.HRCHY_DTL_EFF_DATE     := NVL(V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_EFF_DATE, SYSDATE);
         CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW_PREV);
      END IF;
   ELSE
      --Previous Level Doesn't exists, recursively insert all previous levels
      --Also iteration should not lead to infinite loop, so add below condition to iterate back only till 1st level
      IF (V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1') > 0 THEN
         INSERT_PROCESS(IN_FLAG,
                        IN_HIST_FLAG,
                        IN_XML,
                        IN_HRCHY_HDR_NAME,
                        V_HIERARCHY_DETAIL_ROW.HRCHY_DTL_LEVEL - '1', --Reduce the iteration to insert previous level
                        IN_COUNT,
                        'N');                                         --If it comes here, meaning it is not the last level
      END IF;
   END IF;
   
   IF CURRENT_LVL_EXISTS(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW) = 'N' THEN
      --Always insert the record if it doesn't exists
      CCN_HIERARCHY.HIERARCHY_INSERT_WRAPPER(IN_HIST_FLAG, V_HIERARCHY_DETAIL_ROW);
   END IF;
  
   IF IN_FLAG = 'FROM' THEN
      --Delete only the last level record from HIERARCHY_DETAIL table, if the input flag is 'FROM'
      IF IN_LAST_LEVEL = 'Y' THEN 
         DELETE_PROCESS(NULL, V_HIERARCHY_DETAIL_ROW);
      END IF;
   END IF;

END INSERT_PROCESS;

PROCEDURE HIERARCHY_TRANSFER_PROCESS(
/***********************************************************
      HIERARCHY_TRANSFER_PROCESS 
      This Procedure will perform the core transfer process that involves below steps
      --Step 1 : Insert TO Hierarchy details into the Detail Table, recursively
      --Step 1.1 : Update/Insert the previous level record's next level value with current level value
      --Step 2 : Insert FROM Hierarchy details into the History Table, recursively
      --Step 3 : Delete FROM Hierarchy details from Detail Table
      --Step 3.1 : Update/Delete the previous level record's
      
Created : 08/02/2013 CCN Project
************************************************************/
IN_XML IN VARCHAR2) IS
 
  V_HIERARCHY_DETAIL_ROW_TO        HIERARCHY_DETAIL%ROWTYPE;
  V_HIERARCHY_DETAIL_ROW_FROM      HIERARCHY_DETAIL%ROWTYPE;
  V_HRCHY_HDR_NAME                 HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
  V_HRCHY_DTL_LEVEL                HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;
  V_COUNT                          NUMBER  := 1;
  V_ROW_DATA                       XMLTYPE := SYS.XMLTYPE(IN_XML);

  V_CONTEXT   VARCHAR2(3000);
  SQ          INTEGER;
  SE          VARCHAR2(1000);

BEGIN
   V_CONTEXT := 'Extracting Hierarchy Details';
   IF (V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
      V_HRCHY_HDR_NAME    := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
      V_HRCHY_DTL_LEVEL   := V_ROW_DATA.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
   END IF;
   --Extracting the TO_HIERARCHY
   WHILE V_ROW_DATA.EXISTSNODE('/HIERARCHY_DETAIL/row_data/TRANSFER_TO/TO_HIERARCHY' || '[' || V_COUNT || ']') = 1 LOOP
      --Step 1 : Insert TO Hierarchy details into the Detail Table, recursively
      --Step 1.1 : Update/Insert the previous level record's next level value with current level value
      V_CONTEXT := 'Calling INSERT_PROCESS for TO Hierarchy';
      INSERT_PROCESS('TO',                --Operation to perform sent as flag
                     NULL,                --Detail/History indication Flag
                     IN_XML,              --XML input
                     V_HRCHY_HDR_NAME,    --Header Name
                     V_HRCHY_DTL_LEVEL,   --Header Level to start the process with
                     V_COUNT,             --Count of XML Fragment, N/A for Insert Process but applicable for Transfer Process
                     'Y');                --Last Level Indicator
     
      --Step 2 : Insert FROM Hierarchy details into the History Table, recursively
      --Step 3 : Delete FROM Hierarchy details from Detail Table
      --Step 3.1 : Update/Delete the previous level record's
      V_CONTEXT := 'Calling INSERT_PROCESS for FROM Hierarchy';
      INSERT_PROCESS('FROM',              --Operation to perform sent as flag
                     'H',                 --Detail/History indication Flag
                     IN_XML,              --XML input
                     V_HRCHY_HDR_NAME,    --Header Name
                     V_HRCHY_DTL_LEVEL,   --Header Level to start the process with
                     V_COUNT,             --Count of XML Fragment, N/A for Insert Process but applicable for Transfer Process
                     'Y');                --Last Level Indicator
      V_COUNT := V_COUNT + 1;
   END LOOP;

EXCEPTION
    WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'HIERARCHY_TRANSFER_PROCESS ',V_CONTEXT);
END HIERARCHY_TRANSFER_PROCESS;

PROCEDURE HIERARCHY_DETAIL_INSERT(
/**********************************************************
	HIERARCHY_DETAIL_INSERT

      This Procedure will perform the core transfer process that involves below steps
      --Step 1 : Insert XML Hierarchy details into the Detail Table, recursively
      --Step 1.1 : Update/Insert the previous level record's next level value with current level value
        
<HIERARCHY_DETAIL>
  <row_data>
      <HRCHY_HDR_NAME>DAD Structure</HRCHY_HDR_NAME> 
      <HRCHY_DTL_LEVEL>3</HRCHY_DTL_LEVEL> 
      <HRCHY_LEVEL1>01</HRCHY_LEVEL1> 
      <HRCHY_LEVEL2>02</HRCHY_LEVEL2> 
      <HRCHY_LEVEL3>10</HRCHY_LEVEL3>
      <HRCHY_DTL_DESC>Ohio</HRCHY_DTL_DESC>
      <HRCHY_DTL_EFF_DATE>01-10-2013</HRCHY_DTL_EFF_DATE>
      <HRCHY_DTL_EXP_DATE/>
      <attributes>
         <upper_lvl_ver_desc>
         <Name>statement_type</Name> 
         <Description>pkListValue</Description> 
         <Value>US</Value> 
         </upper_lvl_ver_desc>
      </attributes>
  </row_data>
</HIERARCHY_DETAIL>

created : 02/13/2013 SH CCN Project....
**********************************************************/
    IN_XML                VARCHAR2)
IS
  V_XML_FRAG                       CLOB;
  V_XML                            XMLTYPE := SYS.XMLTYPE(IN_XML);
  V_HRCHY_HDR_NAME                 HIERARCHY_DETAIL.HRCHY_HDR_NAME%TYPE;
  V_HRCHY_DTL_LEVEL                HIERARCHY_DETAIL.HRCHY_DTL_LEVEL%TYPE;

  V_CONTEXT   VARCHAR2(3000);
  SQ          INTEGER;
  SE          VARCHAR2(1000);

BEGIN
   V_CONTEXT := 'Extracting Hierarchy Details';
   IF (V_XML.EXISTSNODE('/HIERARCHY_DETAIL/row_data') = 1) THEN
      V_HRCHY_HDR_NAME  := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_HDR_NAME/text()').GETSTRINGVAL();
      V_HRCHY_DTL_LEVEL := V_XML.EXTRACT('/HIERARCHY_DETAIL/row_data/HRCHY_DTL_LEVEL/text()').GETSTRINGVAL();
   END IF;
  
   V_CONTEXT := 'Calling INSERT_PROCESS';
   INSERT_PROCESS('INSERT',            --Operation to perform sent as flag
                  NULL,                --Detail/History indication Flag
                  IN_XML,              --XML input
                  V_HRCHY_HDR_NAME,    --Header Name
                  V_HRCHY_DTL_LEVEL,   --Header Level to start the process with
                  NULL,                --Count of XML Fragment, N/A for Insert Process but applicable for Transfer Process
                  'Y');                --Last Level Indicator

EXCEPTION
    WHEN OTHERS THEN
           SQ := SQLCODE;
           SE := SQLERRM;
           
           V_CONTEXT := V_CONTEXT || ' ' || SQ || ' ' || SE; 
           ERRPKG.RAISE_ERR(-20004,'HIERARCHY_DETAIL_INSERT ',V_CONTEXT);

END HIERARCHY_DETAIL_INSERT;

END TEST_INSERT_TRANSFER;
/

