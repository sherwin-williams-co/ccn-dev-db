create or replace PACKAGE BODY CCN_ADDRESS_FUT_TO_CURR_PKG
AS
/**********************************************************
  This Package contains procedured to move the future address records into
  current

created : 04/18/2016 jxc517 CCN Project....
Changed :
**********************************************************/

PROCEDURE BUILD_SELECT_CLASS_FOR_TABLE(
/******************************************************************************
  This procedure will build the select clause based on the input table for date formatting
  to 'MM-DD-YYYY format

created : 04/20/2016 jxc517 CCN Project....
revised :
*******************************************************************************/
    in_table_name          IN     VARCHAR2,
    o_select_clause           OUT CLOB)
IS
    CURSOR table_fields_cur IS
        SELECT column_name,
               data_type
          FROM user_tab_columns
          WHERE table_name = in_table_name
          ORDER BY column_id ASC;
BEGIN
    FOR rec IN table_fields_cur LOOP
        IF rec.data_type = 'DATE' THEN
            o_select_clause := o_select_clause ||
                 'TO_CHAR(' || rec.column_name || ', ''MM-DD-YYYY'') AS ' || rec.column_name || ',';
        ELSE
            o_select_clause := o_select_clause || rec.column_name || ',';
        END IF;
    END LOOP;
    o_select_clause := RTRIM(o_select_clause, ',');
END BUILD_SELECT_CLASS_FOR_TABLE;

PROCEDURE PROCESS_ADDRESS(
/******************************************************************************
  This procedure will performs the core upsert process for the passed cost center

created : 04/20/2016 jxc517 CCN Project....
revised : 09/20/2017 axt754 CCN Project....
          Removed code to update status code as '3' and added code to insert the future address also as address type "P"
          and changed clob to have status effective date instead future address effective date
*******************************************************************************/
    in_cost_center_code    IN     VARCHAR2,
    in_effective_date      IN     DATE,
    in_table_name          IN     VARCHAR2)
IS
    v_context          DBMS_XMLGEN.ctxHandle;
    v_clob             CLOB;
    v_select_clause    CLOB;
BEGIN
    --build the select clause for date formatting
    BUILD_SELECT_CLASS_FOR_TABLE(in_table_name, v_select_clause);
    --build the xml context to be used with DBMS_XMLGEN
    --The context will be bult form the result set of the dynamic sql query
    v_context := DBMS_XMLGEN.NEWCONTEXT('SELECT ' || v_select_clause || '
                                           FROM ' || in_table_name || '
                                          WHERE ADDRESS_TYPE = ''F''
                                            AND COST_CENTER_CODE = '''|| in_cost_center_code ||'''');
    --Set the rowset tag name as below, else default <ROWSET> tag will be used
    DBMS_XMLGEN.SETROWSETTAG(v_context, 'ADDRESS_UI_UPSERT');
    --Set the row tag name as below, else default <ROW> tag will be used
    DBMS_XMLGEN.SETROWTAG(v_context, in_table_name);
    --Convert the context into a clob xml
    SELECT DBMS_XMLGEN.GETXML(v_context) INTO v_clob FROM DUAL;
    --close the context
    DBMS_XMLGEN.CLOSECONTEXT(v_context);

    -- Update EFFECTIVE_DATE IN THE XML to status EFFECTIVE_DATE..
    SELECT  UPDATEXML(XMLTYPE(v_clob),
                      '/ADDRESS_UI_UPSERT/'||in_table_name||'/EFFECTIVE_DATE/text()',
                      TO_CHAR(in_effective_date,'MM-DD-YYYY')).getClobVal()
      INTO  v_clob
      FROM  DUAL;

    --Proceed further only if the XML is generated for upsert
    IF v_clob <> EMPTY_CLOB() THEN
        --Replace the future address type "F" to mailing address type "M"
        v_clob := REPLACE(v_clob,
                          '<ADDRESS_TYPE>F</ADDRESS_TYPE>',
                          '<ADDRESS_TYPE>M</ADDRESS_TYPE>');
        --DBMS_OUTPUT.PUT_LINE('XML : ' ||  v_clob);

        --Call the upsert procedure to perform update/insert
        CCN_UI_INTERFACE_APP_PKG.ADDRESS_UI_UPSERT_SP(v_clob);

        --Replace the mailing address type to Physical Address "P"
         v_clob := REPLACE(v_clob,
                          '<ADDRESS_TYPE>M</ADDRESS_TYPE>',
                          '<ADDRESS_TYPE>P</ADDRESS_TYPE>');
        --DBMS_OUTPUT.PUT_LINE('XML : ' ||  v_clob);

        --Call the upsert procedure to perform update/insert
        CCN_UI_INTERFACE_APP_PKG.ADDRESS_UI_UPSERT_SP(v_clob);

        --Finally delete the future address as it is no longer needed
        EXECUTE IMMEDIATE
            'UPDATE ' || in_table_name || '
                SET EXPIRATION_DATE = EFFECTIVE_DATE
              WHERE ADDRESS_TYPE = ''F''
                AND COST_CENTER_CODE = '''|| in_cost_center_code ||'''';
    END IF;
END PROCESS_ADDRESS;

PROCEDURE PROCESS
/******************************************************************************
  This procedure will move the future address records into current mailing address

created : 04/18/2016 jxc517 CCN Project....
revised : 05/16/2016 jxc517 CCN Project Team....
          Added new table ADDRESS_BRB
        : 09/20/2017 axt754 CCN Project Team....
          Changed code to :
          Move future to current if status is '3'
          effective date as the status effective date rather than future address effective date
*******************************************************************************/
IS
   v_batch_number    BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
   v_trans_status    BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
   v_clob            CLOB;
   V_STATUS_CODE     VARCHAR2(20);
   V_EFFECTIVE_DATE  DATE;


   CURSOR add_info_cur IS
       SELECT 'ADDRESS_USA' AS TABLE_NAME,
              COST_CENTER_CODE
         FROM ADDRESS_USA
        WHERE ADDRESS_TYPE = 'F'
          AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
          AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE > TRUNC(SYSDATE))
       UNION
       SELECT 'ADDRESS_CAN' AS TABLE_NAME,
              COST_CENTER_CODE
         FROM ADDRESS_CAN
        WHERE ADDRESS_TYPE = 'F'
          AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
          AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE > TRUNC(SYSDATE))
        UNION
       SELECT 'ADDRESS_MEX' AS TABLE_NAME,
              COST_CENTER_CODE
         FROM ADDRESS_MEX
        WHERE ADDRESS_TYPE = 'F'
          AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
          AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE > TRUNC(SYSDATE))
        UNION
       SELECT 'ADDRESS_OTHER' AS TABLE_NAME,
              COST_CENTER_CODE
         FROM ADDRESS_OTHER
        WHERE ADDRESS_TYPE = 'F'
          AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
          AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE > TRUNC(SYSDATE))
        UNION
       SELECT 'ADDRESS_BRB' AS TABLE_NAME,
              COST_CENTER_CODE
         FROM ADDRESS_BRB
        WHERE ADDRESS_TYPE = 'F'
          AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
          AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE > TRUNC(SYSDATE));
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('ADDR_FUTR_TO_MAIL', v_batch_number);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        --Loop through all the records in the future table that are going effective today
        FOR rec IN add_info_cur LOOP
            BEGIN
                -- Select status code and effective date from status, for a cost center code
                SELECT STATUS_CODE
                       ,EFFECTIVE_DATE
                  INTO V_STATUS_CODE
                       ,V_EFFECTIVE_DATE
                  FROM STATUS
                 WHERE UPPER(COST_CENTER_CODE) = UPPER(rec.COST_CENTER_CODE)
                   AND (EXPIRATION_DATE IS NULL OR EXPIRATION_DATE >= TRUNC(SYSDATE));
                -- check the condition, if the status code is 3, then start
                -- processing the address from future to current.
                IF (NVL(V_STATUS_CODE,'X') = '3') THEN
                    PROCESS_ADDRESS(rec.COST_CENTER_CODE, V_EFFECTIVE_DATE, rec.TABLE_NAME);
                    COMMIT;
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    COMMON_TOOLS.LOG_ERROR(rec.COST_CENTER_CODE, 'CCN_ADDRESS_FUT_TO_CURR_PKG.PROCESS - ' || rec.TABLE_NAME, SQLERRM, SQLCODE);
            END;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            v_trans_status := 'ERROR';
            ROLLBACK;
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('ADDR_FUTR_TO_MAIL', v_batch_number, v_trans_status);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        COMMON_TOOLS.LOG_ERROR('OTHER', 'CCN_ADDRESS_FUT_TO_CURR_PKG.PROCESS', SQLERRM, SQLCODE);
END PROCESS;

END CCN_ADDRESS_FUT_TO_CURR_PKG;