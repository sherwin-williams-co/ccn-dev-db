create or replace PACKAGE BODY INITLOAD
AS
/****************************************************************************** 
This package will load the new BANKING Oracle Database
Created : 03/10/2015 nxk927 CCN Project....
Changed :
******************************************************************************/

PROCEDURE TRUNCATE_TABLE(
/*****************************************************************************
    This procedure will truncate all loaded data for the table passed in.

Created : 05/20/2014 jxc517 CCN Project....
Changed :
*****************************************************************************/
IN_TABLE_NAME IN VARCHAR2)
IS
    CURSOR C_CONSTRAINTS IS
        SELECT CONSTRAINT_NAME, TABLE_NAME
          FROM USER_CONSTRAINTS
         WHERE R_CONSTRAINT_NAME IN (SELECT CONSTRAINT_NAME
                                       FROM USER_CONSTRAINTS
                                      WHERE TABLE_NAME = IN_TABLE_NAME);
BEGIN
    FOR rec IN C_CONSTRAINTS LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE ' || rec.TABLE_NAME || ' DISABLE CONSTRAINT ' || rec.CONSTRAINT_NAME;
    END LOOP;
    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || IN_TABLE_NAME;
    FOR rec IN C_CONSTRAINTS LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE ' || rec.TABLE_NAME || ' ENABLE CONSTRAINT ' || rec.CONSTRAINT_NAME;
    END LOOP;        
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END TRUNCATE_TABLE;

PROCEDURE TRUNCATE_BANKING_TBS
/*****************************************************************************
    This procedure will truncate all loaded data before reloading data 

Created : 03/10/2015 nxk927 CCN Project....
Changed : 08/18/2015 axk326 CCN Project....
          Removed code for truncatinig STORE_MICR_FORMAT_DTLS_FUTURE table
*****************************************************************************/
IS
BEGIN
    TRUNCATE_TABLE('ERROR_LOG');
    TRUNCATE_TABLE('AUDIT_LOG');
    TRUNCATE_TABLE('BANK_DEP_TICKOAK');
    TRUNCATE_TABLE('BANK_DEP_TICKORD');
    TRUNCATE_TABLE('BANK_DEP_TICKORD_HIST');
    TRUNCATE_TABLE('BANK_DEP_TICKORD_FUTURE');
    TRUNCATE_TABLE('BANK_DEP_TICK');
    TRUNCATE_TABLE('BANK_DEP_TICK_HIST');
    TRUNCATE_TABLE('BANK_DEP_TICK_FUTURE');
	  TRUNCATE_TABLE('BANK_DEP_BAG_TICK');
	  TRUNCATE_TABLE('BANK_DEP_BAG_TICK_HIST');
    TRUNCATE_TABLE('BANK_DEP_BAG_TICK_FUTURE');
    TRUNCATE_TABLE('BANK_PRCCNTR');
    TRUNCATE_TABLE('BANK_PRCCNTR_HIST');
    TRUNCATE_TABLE('BANK_PRCDIST');
    TRUNCATE_TABLE('MEMBER_BANK_CC');
    TRUNCATE_TABLE('MEMBER_BANK_CC_HIST');
    TRUNCATE_TABLE('MEMBER_BANK_CC_FUTURE');
    TRUNCATE_TABLE('LEAD_BANK_CC');
    TRUNCATE_TABLE('LEAD_BANK_CC_HIST');
    TRUNCATE_TABLE('LEAD_BANK_CC_FUTURE');
    TRUNCATE_TABLE('STORE_MICR_FORMAT_DTLS');
    TRUNCATE_TABLE('STORE_MICR_FORMAT_DTLS_HIST');
    TRUNCATE_TABLE('STORE_MICR_FORMAT_DTLS_FUTURE');
    TRUNCATE_TABLE('BANK_MICR_FORMAT');
    TRUNCATE_TABLE('BANK_MICR_FORMAT_HIST');
	  TRUNCATE_TABLE('BANK_MICR_FORMAT_FUTURE');
    TRUNCATE_TABLE('BANK_ACCOUNT');
	  TRUNCATE_TABLE('BANK_ACCOUNT_HIST');
    TRUNCATE_TABLE('BANK_ACCOUNT_FUTURE');
	  --truncate temporary intermediate tables as they will be reloaded in next step
    TRUNCATE_TABLE('BANK_DEP_TICKOAK_T');
    TRUNCATE_TABLE('BANK_DEP_TICKORD_T');
    TRUNCATE_TABLE('BANK_DEP_TICK_T');
    TRUNCATE_TABLE('BANK_PRCCNTR_T');
    TRUNCATE_TABLE('BANK_PRCDIST_T');
    TRUNCATE_TABLE('MEMBER_BANK_CC_T');
    TRUNCATE_TABLE('LEAD_BANK_CC_T');
    TRUNCATE_TABLE('BANK_MICR_FORMAT_T');
    TRUNCATE_TABLE('BANK_ACCOUNT_T');
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END TRUNCATE_BANKING_TBS;

PROCEDURE LOAD_TEMP_TABLES
/******************************************************************
   This Procedure loads the intermediate tables that are used in this process

Created : 03/10/2015 nxk927 CCN Project....
Changed :
******************************************************************/
IS
BEGIN
      INSERT INTO BANK_ACCOUNT_T
          SELECT * FROM TEMP_BANK_ACCOUNT;        
      COMMIT;
      INSERT INTO BANK_DEP_TICK_T
          SELECT BANK_ACCOUNT_NBR,
                 COST_CENTER_CODE,
                 DAILY_USE_ACTUAL,
                 DAILY_USE_OVERRIDE,
                 DEP_TKTS_ONHAND_QTY,
                 YTD_DEP_TKTS_ORDERED_QTY,
                 DJDE_FORM_PARM,
                 DJDE_FEED_PARM,
                 MICR_COST_CNTR,
                 MICR_ROUTING_NBR,
                 MICR_FORMAT_ACCT_NBR,
                 REORDER_POINT,
                 REORDER_NUMBER_BKS,
                 IMAGES_PER_PAGE,
                 NBR_FORMS_PER_BK,
                 PART_PAPER_PER_FORM,
                 NBR_DEP_TICKETS_PER_BK,
                 SHEETS_OF_PAPER_PER_BK,
                 FORMAT_NAME,
                 DEPBAG_DAILY_USE_ACTUAL,
                 DEPBAG_DLY_USE_OVERRIDE,
                 DEPBAG_ONHAND_QTY,
                 DEPBAG_YTD_ORDERED_QTY,
                 DEPBAG_LAST_ORDER_DATE,
                 DEPBAG_LAST_ORDER_QTY,
                 DEP_BAG_TYPE,
                 DEP_BAG_REORDER_POINT,
                 DEPBAG_REORDER_QTY,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID
          FROM TEMP_DEP_TICK;
      COMMIT;
      INSERT INTO BANK_DEP_TICKORD_T
          SELECT BANK_ACCOUNT_NBR,
                 COST_CENTER_CODE,
                 DEPOSIT_ORDER_PRIORITY,
                 DEPOSIT_ORDER_STATUS,
                 COST_CENTER,
                 DEPOSIT_ORDER_SEQ_NBR,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID,
                 EXTRACT_DATE,
                 EXTRACTED_USER_ID 
            FROM TEMP_DEP_TICKORD;
      COMMIT;
      INSERT INTO BANK_PRCCNTR_T
          SELECT PRICE_DIST_NBR,
                 COST_CENTER_CODE,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINT_AUTH_ID 
            FROM TEMP_BANK_PRCCNTR;
      COMMIT;
      INSERT INTO BANK_PRCDIST_T
          SELECT PRICE_DIST_NBR,
                 PRICE_DIST_NAME,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINT_AUTH_ID 
            FROM TEMP_BANK_PRCDIST;
      COMMIT;
      INSERT INTO LEAD_BANK_CC_T
          SELECT * FROM TEMP_LEAD_BANK_CC;
      COMMIT;
      INSERT INTO MEMBER_BANK_CC_T
          SELECT TRIM(TABLE_RESULT) BANK_ACCOUNT_NUMBER,
                 LEAD_STORE_NBR,
                 MEMBER_STORE_NBR,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 BANK_BRANCH_NBR
            FROM TEMP_MEMBER_BANK_CC M,
                 TEMP_BANK_SUB_ACCOUNT SB
           WHERE SUBSTR(MEMBER_STORE_NBR,3,4) = SB.TABLE_ARGUMENT(+);
      COMMIT;
      INSERT INTO BANK_DEP_TICKOAK_T
          SELECT DEPOSIT_TICKET_OOAK,
                 REORDER_POINT,
                 REORDER_NUMBER_BKS,
                 IMAGES_PER_PAGE,
                 NBR_FORMS_PER_BK,
                 PART_PAPER_PER_FORM,
                 NBR_DEP_TICKETS_PER_BK,
                 SHEETS_OF_PAPER_PER_BK,
                 DEP_BAG_TYPE,
                 DEP_BAG_REORDER_POINT,
                 DEPBAG_REORDER_QTY,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID 
            FROM TEMP_DEP_TICKOAK;
      COMMIT;
      INSERT INTO BANK_MICR_FORMAT_T
          SELECT BANK_ACCOUNT_NBR,
                 FORMAT_NAME,
                 DJDE_FORM_PARM,
                 DJDE_FEED_PARM,
                 MICR_COST_CNTR,
                 MICR_ROUTING_NBR,
                 MICR_FORMAT_ACTNBR,
                 REORDER_POINT,
                 REORDER_NUMBER_BKS,
                 IMAGES_PER_PAGE,
                 NBR_FORMS_PER_BK,
                 PART_PAPER_PER_FORM,
                 NBR_DEP_TICKETS_PER_BK,
                 SHEETS_OF_PAPER_PER_BK,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID
            FROM TEMP_MICR_FORMAT;
      COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_TEMP_TABLES', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_TEMP_TABLES;

FUNCTION GET_EXPIRATION_DATE(
/******************************************************************
   This Procedure gets the expiration date based on passed effective, expiration
   and previous records effective dates

Created : 08/12/2015 jxc517 CCN Project....
Changed :
******************************************************************/
IN_EFFECTIVE_DATE      IN    VARCHAR2,
IN_EXPIRATION_DATE     IN    VARCHAR2,
IN_PREV_EFFECTIVE_DATE IN    DATE) RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(8);
BEGIN
    SELECT GREATEST(LEAST(DECODE(IN_EXPIRATION_DATE,
                                 '00000000',
                                 TO_CHAR(IN_PREV_EFFECTIVE_DATE - 1, 'RRRRMMDD'),
                                 IN_EXPIRATION_DATE),
                          TO_CHAR(IN_PREV_EFFECTIVE_DATE - 1, 'RRRRMMDD')),
                    IN_EFFECTIVE_DATE)
      INTO V_RETURN_VALUE
      FROM DUAL;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_EXPIRATION_DATE;

PROCEDURE LOAD_BANK_ACCOUNT
/*******************************************************************************
    This procedure will load data into BANK_ACCOUNT from BANK_ACCOUNT_T table.

Created : 03/10/2015 sxt410 CCN Project...
Changed :
*******************************************************************************/
IS
    CURSOR bank_account_cur IS
        SELECT *
          FROM BANK_ACCOUNT_T
         WHERE BANK_ACCOUNT_NBR IN (SELECT BANK_ACCOUNT_NBR
                                      FROM BANK_ACCOUNT_T
                                     GROUP BY BANK_ACCOUNT_NBR
                                    HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR bank_account_temp_cur IS
        SELECT *
          FROM BANK_ACCOUNT_T
         ORDER BY BANK_ACCOUNT_NBR, EFFECTIVE_DATE;
    V_PREV_BANK_ACCOUNT_NBR BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_EFFECTIVE_DATE   DATE;
    V_ROW                   BANK_ACCOUNT%ROWTYPE;
    V_COMMIT                NUMBER:= 0;
BEGIN
    FOR rec IN bank_account_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR THEN
                UPDATE BANK_ACCOUNT_T
                   SET EXPIRATION_DATE  = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_ACCOUNT', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), '000000', 'BANK_ACCOUNT_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR REC IN bank_account_temp_cur LOOP
        BEGIN
            V_ROW.BANK_ACCOUNT_NBR       := REC.BANK_ACCOUNT_NBR;
            V_ROW.EFFECTIVE_DATE         := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EFFECTIVE_DATE), 'RRRRMMDD');
            V_ROW.EXPIRATION_DATE        := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EXPIRATION_DATE), 'RRRRMMDD');
            V_ROW.BANK_NAME              := REC.BANK_NAME;
            V_ROW.BOOK_KEEPER_NBR        := REC.BOOK_KEEPER_NBR;
            V_ROW.BANK_AUTO_RECON_IND    := REC.BANK_AUTO_RECON_IND;
            V_ROW.RECON_START_DATE       := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.RECON_START_DATE), 'RRRRMMDD');
            V_ROW.RECON_BANK_ACCOUNT_NBR := REC.RECON_BANK_ACCOUNT_NBR;
            V_ROW.JV_BOOK_KEEPER_REF     := REC.JV_BOOK_KEEPER_REF;
            V_ROW.JV_BANK_SHORT_NAME     := REC.JV_BANK_SHORT_NAME;
            V_ROW.IDI_BOOKKEEPER_REF     := REC.IDI_BOOKKEEPER_REF;
            V_ROW.IDI_BANK_SHORT_NAME    := REC.IDI_BANK_SHORT_NAME;
            V_ROW.ROUTING_NBR            := REC.ROUTING_NBR;
            V_ROW.UPDATE_DATE            := TRUNC(SYSDATE);
            V_ROW.LAST_UPD_USER_ID       := 'INITLOAD';
            IF V_ROW.ROUTING_NBR = '?' THEN 
                V_ROW.ROUTING_NBR := NULL;
            END IF;
            IF V_ROW.BANK_ACCOUNT_NBR LIKE '%@%'  THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_ACCOUNT', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), '000000', 'BANK_ACCOUNT');
            ELSE
                IF NVL(V_ROW.EXPIRATION_DATE, TRUNC(SYSDATE) + 1) <= TRUNC(SYSDATE) THEN --history
                    INSERT INTO BANK_ACCOUNT_HIST VALUES V_ROW;
                ELSIF V_ROW.EFFECTIVE_DATE > TRUNC(SYSDATE) THEN --future
                    INSERT INTO BANK_ACCOUNT_FUTURE VALUES (
                                 V_ROW.BANK_ACCOUNT_NBR,
                                 V_ROW.EFFECTIVE_DATE,
                                 V_ROW.EXPIRATION_DATE,
                                 V_ROW.BANK_NAME,
                                 V_ROW.BOOK_KEEPER_NBR,
                                 V_ROW.BANK_AUTO_RECON_IND,
                                 V_ROW.RECON_START_DATE,
                                 V_ROW.RECON_BANK_ACCOUNT_NBR,
                                 V_ROW.JV_BOOK_KEEPER_REF,
                                 V_ROW.JV_BANK_SHORT_NAME,
                                 V_ROW.IDI_BOOKKEEPER_REF,
                                 V_ROW.IDI_BANK_SHORT_NAME,
                                 V_ROW.ROUTING_NBR,
                                 V_ROW.UPDATE_DATE,
                                 V_ROW.LAST_UPD_USER_ID,
                                 BANKING_COMMON_TOOLS.GET_FUTURE_ID(V_ROW.BANK_ACCOUNT_NBR));
                ELSE --current
                    INSERT INTO BANK_ACCOUNT VALUES V_ROW;
                END IF;
            END IF;
            V_ROW := NULL;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_ACCOUNT', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), '000000', 'BANK_ACCOUNT - 1');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_ACCOUNT', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_ACCOUNT;

PROCEDURE LOAD_BANK_MICR_FMT
/*****************************************************************************
    This Procedure will load the BANK_MICR_FORMAT table from data  
    file from TEMP_BANK_MICR_FORMAT table

Created : 03/19/2015 nxk927 CCN Project....
Changed : 07/20/205  sxh487/nxk927 added condition for hist to insert bank-account into history 
           if micr moved to hist
Changed : 10/19/205  jxc517 emoved the logic to fail records with child records having effective
          dates before parent records. In these scenario's, we use the parent records effective
          date as child records effective date
******************************************************************************/
IS
    CURSOR bank_micr_format_cur IS
        SELECT *
          FROM BANK_MICR_FORMAT_T
         WHERE (BANK_ACCOUNT_NBR, FORMAT_NAME) IN (SELECT BANK_ACCOUNT_NBR, FORMAT_NAME
                                                     FROM BANK_MICR_FORMAT_T
                                                    GROUP BY BANK_ACCOUNT_NBR, FORMAT_NAME
                                                   HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, FORMAT_NAME, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR bank_micr_fmt_cur IS   
        SELECT ROW_NUMBER( ) OVER (PARTITION BY BANK_ACCOUNT_NBR ORDER BY EFFECTIVE_DATE) MICR_FORMAT_ID,
               A.*
          FROM BANK_MICR_FORMAT_T A
         ORDER BY BANK_ACCOUNT_NBR, FORMAT_NAME, EFFECTIVE_DATE;
    V_PREV_BANK_ACCOUNT_NBR BANK_MICR_FORMAT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_FORMAT_NAME      BANK_MICR_FORMAT_T.FORMAT_NAME%TYPE := 'YYYYY';
    V_PREV_EFFECTIVE_DATE   DATE;
    V_COMMIT                INTEGER := 0;
    V_ROW                   BANK_MICR_FORMAT%ROWTYPE;
    V_BANK_ACCOUNT_HIST_ROW BANK_ACCOUNT%ROWTYPE;
    V_BANK_ACCOUNT_CURR_ROW BANK_ACCOUNT%ROWTYPE;
BEGIN
    FOR rec IN bank_micr_format_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_FORMAT_NAME = rec.FORMAT_NAME THEN
                UPDATE BANK_MICR_FORMAT_T
                   SET EXPIRATION_DATE  = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND FORMAT_NAME      = rec.FORMAT_NAME
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_FORMAT_NAME        := rec.FORMAT_NAME;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR rec IN bank_micr_fmt_cur LOOP
        BEGIN
            V_ROW.BANK_ACCOUNT_NBR          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_ACCOUNT_NBR);
            V_ROW.FORMAT_NAME               := rec.FORMAT_NAME;
            V_ROW.DJDE_FORM_PARM            := rec.DJDE_FORM_PARM;
            V_ROW.DJDE_FEED_PARM            := rec.DJDE_FEED_PARM;
            V_ROW.MICR_COST_CNTR            := rec.MICR_COST_CNTR;
            V_ROW.MICR_ROUTING_NBR          := rec.MICR_ROUTING_NBR;
            V_ROW.MICR_FORMAT_ACTNBR        := rec.MICR_FORMAT_ACTNBR;
            V_ROW.EFFECTIVE_DATE            := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_ROW.EXPIRATION_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_ROW.LAST_MAINTENANCE_DATE     := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LAST_MAINTENANCE_DATE), 'RRRRMMDD');
            V_ROW.LAST_MAINT_USER_ID        := rec.LAST_MAINT_USER_ID;
            V_ROW.UPDATE_DATE               := TRUNC(SYSDATE);
            V_ROW.LAST_UPD_USER_ID          := 'INITLOAD';
            V_ROW.MICR_FORMAT_ID            := rec.MICR_FORMAT_ID;
            IF V_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT');
            ELSIF NVL(V_ROW.EXPIRATION_DATE, TRUNC(SYSDATE) + 1) <= TRUNC(SYSDATE) THEN --history
                V_BANK_ACCOUNT_HIST_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_ROW.BANK_ACCOUNT_NBR, V_ROW.EFFECTIVE_DATE);
                IF V_BANK_ACCOUNT_HIST_ROW.BANK_ACCOUNT_NBR IS NOT NULL THEN
                    TABLE_IU_PKG.BANK_ACCOUNT_HIST_I_SP(V_BANK_ACCOUNT_HIST_ROW);
                    TABLE_IU_PKG.BANK_MICR_FORMAT_HIST_I_SP(V_ROW);
                ELSE
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', 'Bank Account Number not found for effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT - 1');
                END IF;
            ELSIF V_ROW.EFFECTIVE_DATE > TRUNC(SYSDATE) THEN --future
                INSERT INTO BANK_MICR_FORMAT_FUTURE VALUES (
                          V_ROW.BANK_ACCOUNT_NBR,
                          V_ROW.FORMAT_NAME,
                          V_ROW.DJDE_FORM_PARM,
                          V_ROW.DJDE_FEED_PARM,
                          V_ROW.MICR_COST_CNTR,
                          V_ROW.MICR_ROUTING_NBR,
                          V_ROW.MICR_FORMAT_ACTNBR,
                          V_ROW.EFFECTIVE_DATE,
                          V_ROW.EXPIRATION_DATE,
                          V_ROW.LAST_MAINTENANCE_DATE,
                          V_ROW.LAST_MAINT_USER_ID,
                          V_ROW.UPDATE_DATE,
                          V_ROW.LAST_UPD_USER_ID,
                          V_ROW.MICR_FORMAT_ID,
                          (SELECT FUTURE_ID
                             FROM BANK_ACCOUNT_FUTURE
                            WHERE BANK_ACCOUNT_NBR = V_ROW.BANK_ACCOUNT_NBR
                              AND V_ROW.EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, V_ROW.EFFECTIVE_DATE))
                         );
            ELSE --current
                BEGIN
                    V_BANK_ACCOUNT_CURR_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_REC(V_ROW.BANK_ACCOUNT_NBR);
                    IF V_BANK_ACCOUNT_CURR_ROW.BANK_ACCOUNT_NBR IS NOT NULL
                       AND V_ROW.EFFECTIVE_DATE < V_BANK_ACCOUNT_CURR_ROW.EFFECTIVE_DATE THEN
                        --ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', 'MICR Format effective before Bank Account', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT - 2');
                        V_ROW.EFFECTIVE_DATE := V_BANK_ACCOUNT_CURR_ROW.EFFECTIVE_DATE;
                        INSERT INTO BANK_MICR_FORMAT VALUES V_ROW;
                    ELSE
                        INSERT INTO BANK_MICR_FORMAT VALUES V_ROW;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        V_BANK_ACCOUNT_HIST_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_ROW.BANK_ACCOUNT_NBR, V_ROW.EFFECTIVE_DATE);
                        IF V_BANK_ACCOUNT_HIST_ROW.BANK_ACCOUNT_NBR IS NOT NULL THEN
                            V_ROW.EXPIRATION_DATE := NVL(V_ROW.EXPIRATION_DATE, V_BANK_ACCOUNT_HIST_ROW.EXPIRATION_DATE);
                            TABLE_IU_PKG.BANK_MICR_FORMAT_HIST_I_SP(V_ROW);
                        ELSE
                            ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', 'Bank Account Number not found for effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT - 3');
                        END IF;
                END;
            END IF;
            V_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT - 4');
        END;
    END LOOP;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_MICR_FMT', SQLERRM, '0000000000', '0000000000', '0000000000');
END LOAD_BANK_MICR_FMT;

PROCEDURE LOAD_LEAD_BANK_CC
/*****************************************************************************
    This Procedure will load the LOAD_LEAD_BANK_CC_ASSGNMT table from data  
    file from legacy idms database.  

Created : 03/10/2015 nxk927 CCN Project....
Changed : 07/20/205  sxh487/nxk927 added condition for hist to insert bank-account into history 
           if lead moved to hist
Changed : 10/19/205  jxc517 emoved the logic to fail records with child records having effective
          dates before parent records. In these scenario's, we use the parent records effective
          date as child records effective date
******************************************************************************/
IS
    CURSOR lead_bank_cc_cur IS
        SELECT *
          FROM LEAD_BANK_CC_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM LEAD_BANK_CC_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR lead_bank_cc_temp_cur is
        SELECT *
        FROM LEAD_BANK_CC_T
       ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE;
    V_COMMIT                    NUMBER := 0;
    V_ROW                       LEAD_BANK_CC%ROWTYPE;
    V_BANK_ACCOUNT_HIST_ROW     BANK_ACCOUNT%ROWTYPE;
    V_BANK_ACCOUNT_CURR_ROW     BANK_ACCOUNT%ROWTYPE;
    V_PREV_BANK_ACCOUNT_NBR     BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_LEAD_STORE_NBR       MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_EFFECTIVE_DATE       DATE;
BEGIN
    FOR rec IN lead_bank_cc_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_LEAD_STORE_NBR = rec.COST_CENTER_CODE THEN
                UPDATE LEAD_BANK_CC_T
                   SET EXPIRATION_DATE  = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_LEAD_STORE_NBR     := rec.COST_CENTER_CODE;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'LEAD_BANK_CC_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR rec IN lead_bank_cc_temp_cur LOOP
        BEGIN
            V_ROW.LEAD_BANK_ACCOUNT_NBR   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_ACCOUNT_NBR);
            V_ROW.LEAD_STORE_NBR          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.COST_CENTER_CODE);
            V_ROW.EFFECTIVE_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE),'RRRRMMDD');
            V_ROW.EXPIRATION_DATE         := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE),'RRRRMMDD');
            V_ROW.BANK_BRANCH_NBR         := rec.BANK_BRANCH_NBR;
            V_ROW.BANK_TYPE_CODE          := rec.BANK_TYPE_CODE;
            V_ROW.UPDATE_DATE             := TRUNC(SYSDATE);
            V_ROW.LAST_UPD_USER_ID        := 'INITLOAD';
            IF V_ROW.LEAD_BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'LEAD_BANK_CC');
            ELSIF V_ROW.BANK_TYPE_CODE NOT IN ('L', 'I') THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', 'The BANK_TYPE_CODE is NULL', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'LEAD_BANK_CC - 1');
            ELSIF NVL(V_ROW.EXPIRATION_DATE, TRUNC(SYSDATE) + 1) <= TRUNC(SYSDATE) THEN --history
                V_BANK_ACCOUNT_HIST_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_ROW.LEAD_BANK_ACCOUNT_NBR, V_ROW.EFFECTIVE_DATE);
                IF V_BANK_ACCOUNT_HIST_ROW.BANK_ACCOUNT_NBR IS NOT NULL THEN
                    TABLE_IU_PKG.BANK_ACCOUNT_HIST_I_SP(V_BANK_ACCOUNT_HIST_ROW);
                    TABLE_IU_PKG.LEAD_BANK_CC_HIST_I_SP(V_ROW);
                ELSE
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', 'Bank Account Number not found for effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'LEAD_BANK_CC - 2');
                END IF;
            ELSIF V_ROW.EFFECTIVE_DATE > TRUNC(SYSDATE) THEN --future
                INSERT INTO LEAD_BANK_CC_FUTURE VALUES (
                          V_ROW.LEAD_BANK_ACCOUNT_NBR,
                          V_ROW.LEAD_STORE_NBR,
                          V_ROW.EFFECTIVE_DATE,
                          V_ROW.EXPIRATION_DATE,
                          V_ROW.BANK_BRANCH_NBR,
                          V_ROW.BANK_TYPE_CODE,
                          V_ROW.UPDATE_DATE,
                          V_ROW.LAST_UPD_USER_ID,
                          (SELECT FUTURE_ID
                             FROM BANK_ACCOUNT_FUTURE
                            WHERE BANK_ACCOUNT_NBR = V_ROW.LEAD_BANK_ACCOUNT_NBR
                              AND V_ROW.EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, V_ROW.EFFECTIVE_DATE))
                          );
            ELSE --current
                BEGIN
                    V_BANK_ACCOUNT_CURR_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_REC(V_ROW.LEAD_BANK_ACCOUNT_NBR);
                    IF V_BANK_ACCOUNT_CURR_ROW.BANK_ACCOUNT_NBR IS NOT NULL
                       AND V_ROW.EFFECTIVE_DATE < V_BANK_ACCOUNT_CURR_ROW.EFFECTIVE_DATE THEN
                        --ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', 'Lead effective before Bank Account', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'LEAD_BANK_CC - 3');
                        V_ROW.EFFECTIVE_DATE := V_BANK_ACCOUNT_CURR_ROW.EFFECTIVE_DATE;
                        INSERT INTO LEAD_BANK_CC VALUES V_ROW;
                    ELSE
                        INSERT INTO LEAD_BANK_CC VALUES V_ROW;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        V_BANK_ACCOUNT_HIST_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_ROW.LEAD_BANK_ACCOUNT_NBR, V_ROW.EFFECTIVE_DATE);
                        IF V_BANK_ACCOUNT_HIST_ROW.BANK_ACCOUNT_NBR IS NOT NULL THEN
                            V_ROW.EXPIRATION_DATE := NVL(V_ROW.EXPIRATION_DATE, V_BANK_ACCOUNT_HIST_ROW.EXPIRATION_DATE);
                            TABLE_IU_PKG.LEAD_BANK_CC_HIST_I_SP(V_ROW);
                        ELSE
                            ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', 'Bank Account Number not found for effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'LEAD_BANK_CC - 4');
                        END IF;
                END;
            END IF;
            V_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'LEAD_BANK_CC - 5');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_LEAD_BANK_CC', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_LEAD_BANK_CC;

PROCEDURE LOAD_MEMBER_BANK_CC
/*****************************************************************************
    This Procedure will load the BANK_CONC table from data  
    file from TEMP_BANK_CONC table

Created : 03/10/2015 nxk927 CCN Project....
Changed : 07/20/205  sxh487/nxk927 added condition for hist to insert lead bank and bank-account info 
          into history if lead moved to hist  
Changed : 10/19/205  jxc517 emoved the logic to fail records with child records having effective
          dates before parent records. In these scenario's, we use the parent records effective
          date as child records effective date
******************************************************************************/
IS
    CURSOR member_bank_cc_cur IS
        SELECT *
          FROM MEMBER_BANK_CC_T
         WHERE (LEAD_STORE_NBR, MEMBER_STORE_NBR) IN (SELECT LEAD_STORE_NBR, MEMBER_STORE_NBR
                                                        FROM MEMBER_BANK_CC_T
                                                       GROUP BY LEAD_STORE_NBR, MEMBER_STORE_NBR
                                                      HAVING COUNT(*) > 1)
         ORDER BY LEAD_STORE_NBR, MEMBER_STORE_NBR, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR member_bank_cc_temp_cur IS   
        SELECT *
          FROM MEMBER_BANK_CC_T
         ORDER BY LEAD_STORE_NBR, MEMBER_STORE_NBR, EFFECTIVE_DATE;
    V_COMMIT                INTEGER := 0;
    V_ROW                   MEMBER_BANK_CC%ROWTYPE;
    V_BANK_ACCOUNT_HIST_ROW BANK_ACCOUNT%ROWTYPE; 
    V_LEAD_BANK_CC_REC      LEAD_BANK_CC%ROWTYPE;
    V_LEAD_BANK_CC_HIST_REC LEAD_BANK_CC%ROWTYPE;
    V_PREV_LEAD_STORE_NBR   MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_MEMBER_STORE_NBR MEMBER_BANK_CC_T.MEMBER_STORE_NBR%TYPE := 'XXXXXX';
    V_PREV_EFFECTIVE_DATE   DATE;
BEGIN
    FOR rec IN member_bank_cc_cur LOOP
        BEGIN
            IF V_PREV_LEAD_STORE_NBR = rec.LEAD_STORE_NBR AND V_PREV_MEMBER_STORE_NBR = rec.MEMBER_STORE_NBR THEN
                UPDATE MEMBER_BANK_CC_T
                   SET EXPIRATION_DATE  = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE LEAD_STORE_NBR   = rec.LEAD_STORE_NBR
                   AND MEMBER_STORE_NBR = rec.MEMBER_STORE_NBR
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_LEAD_STORE_NBR   := rec.LEAD_STORE_NBR;
            V_PREV_MEMBER_STORE_NBR := rec.MEMBER_STORE_NBR;
            V_PREV_EFFECTIVE_DATE   := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', SQLERRM, NVL(rec.BANK_ACCOUNT_NUMBER,'000000000'), rec.MEMBER_STORE_NBR, 'MEMBER_BANK_CC_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR rec IN member_bank_cc_temp_cur LOOP
        BEGIN
            V_LEAD_BANK_CC_REC := NULL;
            V_ROW.LEAD_STORE_NBR          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LEAD_STORE_NBR);
            V_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(V_ROW.LEAD_STORE_NBR);
            V_ROW.LEAD_BANK_ACCOUNT_NBR   := V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
            V_ROW.MEMBER_BANK_ACCOUNT_NBR := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_ACCOUNT_NUMBER);
            V_ROW.MEMBER_STORE_NBR        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.MEMBER_STORE_NBR);
            V_ROW.EFFECTIVE_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE),'RRRRMMDD');
            V_ROW.EXPIRATION_DATE         := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE),'RRRRMMDD');
            V_ROW.BANK_BRANCH_NBR         := rec.BANK_BRANCH_NBR;
            V_ROW.UPDATE_DATE             := TRUNC(SYSDATE);
            V_ROW.LAST_UPD_USER_ID        := 'INITLOAD';
            IF V_ROW.LEAD_BANK_ACCOUNT_NBR LIKE '%@%' THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NUMBER,'000000000'), rec.MEMBER_STORE_NBR, 'MEMBER_BANK_CC');
            ELSIF NVL(V_ROW.EXPIRATION_DATE, TRUNC(SYSDATE) + 1) <= TRUNC(SYSDATE) THEN --history
                V_LEAD_BANK_CC_HIST_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_HIST_REC(V_ROW.LEAD_STORE_NBR, V_ROW.EFFECTIVE_DATE);
                IF V_LEAD_BANK_CC_HIST_REC.LEAD_BANK_ACCOUNT_NBR IS NOT NULL THEN
                    V_ROW.LEAD_BANK_ACCOUNT_NBR := V_LEAD_BANK_CC_HIST_REC.LEAD_BANK_ACCOUNT_NBR;
                    V_BANK_ACCOUNT_HIST_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_ROW.LEAD_BANK_ACCOUNT_NBR, V_ROW.EFFECTIVE_DATE);
                    IF V_BANK_ACCOUNT_HIST_ROW.BANK_ACCOUNT_NBR IS NOT NULL THEN
                        TABLE_IU_PKG.BANK_ACCOUNT_HIST_I_SP(V_BANK_ACCOUNT_HIST_ROW);
                        TABLE_IU_PKG.LEAD_BANK_CC_HIST_I_SP(V_LEAD_BANK_CC_HIST_REC);
                        TABLE_IU_PKG.MEMBER_BANK_CC_HIST_I_SP(V_ROW);
                    ELSE
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', 'Bank Account Number not found for effective date', NVL(rec.BANK_ACCOUNT_NUMBER,'000000000'), rec.MEMBER_STORE_NBR, 'MEMBER_BANK_CC - 1');
                    END IF;
                ELSE
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', 'Lead not found for effective date', NVL(rec.BANK_ACCOUNT_NUMBER,'000000000'), rec.MEMBER_STORE_NBR, 'MEMBER_BANK_CC - 2');
                END IF;
            ELSIF V_ROW.EFFECTIVE_DATE > TRUNC(SYSDATE) THEN --future
                INSERT INTO MEMBER_BANK_CC_FUTURE VALUES(
                         V_ROW.LEAD_BANK_ACCOUNT_NBR,
                         V_ROW.LEAD_STORE_NBR,
                         V_ROW.MEMBER_STORE_NBR,
                         V_ROW.EFFECTIVE_DATE,
                         V_ROW.EXPIRATION_DATE,
                         V_ROW.MEMBER_BANK_ACCOUNT_NBR,
                         V_ROW.BANK_BRANCH_NBR,
                         V_ROW.UPDATE_DATE,
                         V_ROW.LAST_UPD_USER_ID,
                         (SELECT NVL(MAX(FUTURE_ID),0) + 1
                            FROM MEMBER_BANK_CC_FUTURE
                           WHERE LEAD_STORE_NBR        = V_ROW.LEAD_STORE_NBR
                             AND MEMBER_STORE_NBR      = V_ROW.MEMBER_STORE_NBR
                             AND LEAD_BANK_ACCOUNT_NBR = V_ROW.LEAD_BANK_ACCOUNT_NBR)
                         );
            ELSE --current
                IF V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR IS NOT NULL
                   AND V_ROW.EFFECTIVE_DATE < V_LEAD_BANK_CC_REC.EFFECTIVE_DATE THEN
                    --ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', 'Member effective before Lead', NVL(rec.BANK_ACCOUNT_NUMBER,'000000000'), rec.MEMBER_STORE_NBR, 'MEMBER_BANK_CC - 3');
                    V_ROW.EFFECTIVE_DATE := V_LEAD_BANK_CC_REC.EFFECTIVE_DATE;
                    INSERT INTO MEMBER_BANK_CC VALUES V_ROW;
                ELSE
                    INSERT INTO MEMBER_BANK_CC VALUES V_ROW;
                END IF;
            END IF;
            V_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', SQLERRM, NVL(rec.BANK_ACCOUNT_NUMBER,'000000000'), REC.MEMBER_STORE_NBR, 'MEMBER_BANK_CC - 4');
        END;
    END LOOP;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_MEMBER_BANK_CC', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_MEMBER_BANK_CC;

PROCEDURE LOAD_BANK_DEP_TICKOAK
/*****************************************************************************
    This Procedure will load the BANK_DEP_TICKOAK table from data  
    file from TEMP_BANK_DEP_TICKOAK table

Created : 03/19/2015 nxk927 CCN Project....
Changed : 
******************************************************************************/
IS
    CURSOR bank_dep_tickoak_cur IS   
        SELECT *
          FROM BANK_DEP_TICKOAK_T;
    V_COMMIT                INTEGER := 0;
    V_BANK_DEP_TICKOAK_ROW  BANK_DEP_TICKOAK%ROWTYPE;
BEGIN
    FOR rec IN bank_dep_tickoak_cur LOOP
        BEGIN
            V_BANK_DEP_TICKOAK_ROW.DEPOSIT_TICKET_OOAK       := rec.DEPOSIT_TICKET_OOAK;
            V_BANK_DEP_TICKOAK_ROW.REORDER_POINT             := rec.REORDER_POINT;
            V_BANK_DEP_TICKOAK_ROW.REORDER_NUMBER_BKS        := rec.REORDER_NUMBER_BKS;
            V_BANK_DEP_TICKOAK_ROW.IMAGES_PER_PAGE           := rec.IMAGES_PER_PAGE;
            V_BANK_DEP_TICKOAK_ROW.NBR_FORMS_PER_BK          := rec.NBR_FORMS_PER_BK;
            V_BANK_DEP_TICKOAK_ROW.PART_PAPER_PER_FORM       := rec.PART_PAPER_PER_FORM;
            V_BANK_DEP_TICKOAK_ROW.NBR_DEP_TICKETS_PER_BK    := rec.NBR_DEP_TICKETS_PER_BK;
            V_BANK_DEP_TICKOAK_ROW.SHEETS_OF_PAPER_PER_BK    := rec.SHEETS_OF_PAPER_PER_BK;
            V_BANK_DEP_TICKOAK_ROW.DEP_BAG_TYPE              := rec.DEP_BAG_TYPE;
            V_BANK_DEP_TICKOAK_ROW.DEP_BAG_REORDER_POINT     := rec.DEP_BAG_REORDER_POINT;
            V_BANK_DEP_TICKOAK_ROW.DEPBAG_REORDER_QTY        := rec.DEPBAG_REORDER_QTY;
            V_BANK_DEP_TICKOAK_ROW.EFFECTIVE_DATE            := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_BANK_DEP_TICKOAK_ROW.EXPIRATION_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_BANK_DEP_TICKOAK_ROW.LAST_MAINTENANCE_DATE     := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LAST_MAINTENANCE_DATE), 'RRRRMMDD');
            V_BANK_DEP_TICKOAK_ROW.LAST_MAINT_USER_ID        := rec.LAST_MAINT_USER_ID;
            INSERT INTO BANK_DEP_TICKOAK VALUES V_BANK_DEP_TICKOAK_ROW;
            V_BANK_DEP_TICKOAK_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKOAK', SQLERRM, rec.DEPOSIT_TICKET_OOAK, '000000', 'BANK_DEP_TICKOAK');
        END;
    END LOOP;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKOAK', SQLERRM, '0000000000', '0000000000', '0000000000');
END LOAD_BANK_DEP_TICKOAK;

PROCEDURE LOAD_BANK_DEP_TICK
/*******************************************************************************
    This procedure will load data into BANK_DEP_TICK from BANK_DEP_TICK_T table.

Created : 04/08/2015 jxc517 CCN Project...
Changed : 08/18/2015 axk326 CCN Project...
          Removed Columns DJDE_FORM_PARM, DJDE_FEED_PARM, MICR_COST_CNTR, 
                          MICR_ROUTING_NBR, MICR_FORMAT_ACCT_NBR, FORMAT_NAME
                     From BANK_DEP_TICK 
*******************************************************************************/
IS
    CURSOR bank_dep_tick_cur IS
        SELECT *
          FROM BANK_DEP_TICK_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM BANK_DEP_TICK_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR bank_dep_tick_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICK_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_TEMP_ROW                  BANK_DEP_TICK%ROWTYPE;
    V_BANK_ACCOUNT_NBR          LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_COMMIT                    NUMBER := 0;
    V_PREV_BANK_ACCOUNT_NBR     BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_LEAD_STORE_NBR       MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_EFFECTIVE_DATE       DATE;
BEGIN
    FOR rec IN bank_dep_tick_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_LEAD_STORE_NBR = rec.COST_CENTER_CODE THEN
                UPDATE BANK_DEP_TICK_T
                   SET EXPIRATION_DATE  = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_LEAD_STORE_NBR     := rec.COST_CENTER_CODE;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICK_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR REC IN bank_dep_tick_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE         := REC.COST_CENTER_CODE;
            V_TEMP_ROW.DAILY_USE_ACTUAL         := REC.DAILY_USE_ACTUAL;
            V_TEMP_ROW.DAILY_USE_OVERRIDE       := REC.DAILY_USE_OVERRIDE;
            V_TEMP_ROW.DEP_TKTS_ONHAND_QTY      := REC.DEP_TKTS_ONHAND_QTY;
            V_TEMP_ROW.YTD_DEP_TKTS_ORDERED_QTY := REC.YTD_DEP_TKTS_ORDERED_QTY;
            V_TEMP_ROW.REORDER_POINT            := REC.REORDER_POINT;  
            V_TEMP_ROW.REORDER_NUMBER_BKS       := REC.REORDER_NUMBER_BKS;
            V_TEMP_ROW.IMAGES_PER_PAGE          := REC.IMAGES_PER_PAGE;
            V_TEMP_ROW.NBR_FORMS_PER_BK         := REC.NBR_FORMS_PER_BK;
            V_TEMP_ROW.PART_PAPER_PER_FORM      := REC.PART_PAPER_PER_FORM;
            V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK   := REC.NBR_DEP_TICKETS_PER_BK;
            V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK   := REC.SHEETS_OF_PAPER_PER_BK;
            V_TEMP_ROW.EFFECTIVE_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EXPIRATION_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINTENANCE_DATE    := NVL(TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.LAST_MAINTENANCE_DATE), 'RRRRMMDD'),
                                                       V_TEMP_ROW.EFFECTIVE_DATE);
            V_TEMP_ROW.LAST_MAINT_USER_ID       := REC.LAST_MAINT_USER_ID;

            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_TICK');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICK - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                            IF rec.ACTL_EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_TICK VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_TICK_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_TICK_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_TICK - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
            V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_TICK - 2');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_TICK;

PROCEDURE LOAD_STORE_MICR_FORMAT_DTLS
/*******************************************************************************
    This procedure will load data into BANK_DEP_TICK from BANK_DEP_TICK_T table.

Created : 04/08/2015 jxc517 CCN Project...
Changed : 10/19/205  jxc517 emoved the logic to fail records with child records having effective
          dates before parent records. In these scenario's, we use the parent records effective
          date as child records effective date
*******************************************************************************/
IS
    CURSOR bank_dep_tick_cur IS
        SELECT *
          FROM BANK_DEP_TICK_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM BANK_DEP_TICK_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR bank_dep_tick_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICK_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_TEMP_ROW                  STORE_MICR_FORMAT_DTLS%ROWTYPE;
    V_COMMIT                    NUMBER := 0;

    PROCEDURE INSERT_MISSING_MICR(
    /***********************************************************
	    This procedure will insert the missing MICR format record combination

    Created : 08/17/2015 jxc517 CCN Project Team....
    Changed : 
    ************************************************************/
    IN_ROW              IN     bank_dep_tick_temp_cur%ROWTYPE,
    IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
    IN_EFFECTIVE_DATE   IN     DATE,
    IN_EXPIRATION_DATE  IN     DATE,
    OUT_MICR_FORMAT_ID     OUT NUMBER)
    IS
        V_MICR_FORMAT_ID        NUMBER := NULL;
        REC                     bank_dep_tick_temp_cur%ROWTYPE := IN_ROW;
        V_MICR_REC              BANK_MICR_FORMAT%ROWTYPE;
        V_BANK_ACCOUNT_HIST_ROW BANK_ACCOUNT%ROWTYPE;
        V_BANK_ACCOUNT_CURR_ROW BANK_ACCOUNT%ROWTYPE;
    BEGIN
        V_MICR_REC.MICR_FORMAT_ID        := BANKING_COMMON_TOOLS.GET_NEXT_MICR_FORMAT_ID(IN_BANK_ACCOUNT_NBR, NULL);
        V_MICR_REC.BANK_ACCOUNT_NBR      := IN_BANK_ACCOUNT_NBR;
        V_MICR_REC.FORMAT_NAME           := REC.FORMAT_NAME;
        V_MICR_REC.DJDE_FORM_PARM        := REC.DJDE_FORM_PARM;
        V_MICR_REC.DJDE_FEED_PARM        := REC.DJDE_FEED_PARM;
        V_MICR_REC.MICR_COST_CNTR        := REC.MICR_COST_CNTR;
        V_MICR_REC.MICR_ROUTING_NBR      := REC.MICR_ROUTING_NBR;
        V_MICR_REC.MICR_FORMAT_ACTNBR    := REC.MICR_FORMAT_ACCT_NBR;
        V_MICR_REC.EFFECTIVE_DATE        := IN_EFFECTIVE_DATE;
        V_MICR_REC.EXPIRATION_DATE       := IN_EXPIRATION_DATE;
        V_MICR_REC.LAST_MAINTENANCE_DATE := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.LAST_MAINTENANCE_DATE), 'RRRRMMDD');
        V_MICR_REC.LAST_MAINT_USER_ID    := REC.LAST_MAINT_USER_ID;
        V_MICR_REC.LAST_UPD_USER_ID      := 'INITLOAD';
        V_MICR_REC.UPDATE_DATE           := TRUNC(SYSDATE);
        BEGIN
            V_BANK_ACCOUNT_CURR_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_REC(V_MICR_REC.BANK_ACCOUNT_NBR);
            IF V_BANK_ACCOUNT_CURR_ROW.BANK_ACCOUNT_NBR IS NOT NULL
               AND V_MICR_REC.EFFECTIVE_DATE < V_BANK_ACCOUNT_CURR_ROW.EFFECTIVE_DATE THEN
                --ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', 'MICR Format effective before Bank Account', NVL(IN_BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT');
                V_MICR_REC.EFFECTIVE_DATE := V_BANK_ACCOUNT_CURR_ROW.EFFECTIVE_DATE;
                INSERT INTO BANK_MICR_FORMAT VALUES V_MICR_REC;
            ELSE
                INSERT INTO BANK_MICR_FORMAT VALUES V_MICR_REC;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                V_BANK_ACCOUNT_HIST_ROW := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_MICR_REC.BANK_ACCOUNT_NBR, V_MICR_REC.EFFECTIVE_DATE);
                IF V_BANK_ACCOUNT_HIST_ROW.BANK_ACCOUNT_NBR IS NOT NULL THEN
                    V_MICR_REC.EXPIRATION_DATE := NVL(V_MICR_REC.EXPIRATION_DATE, V_BANK_ACCOUNT_HIST_ROW.EXPIRATION_DATE);
                    TABLE_IU_PKG.BANK_MICR_FORMAT_HIST_I_SP(V_MICR_REC);
                ELSE
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', 'Bank Account Number not found for effective date', NVL(IN_BANK_ACCOUNT_NBR,'000000000'), rec.FORMAT_NAME, 'BANK_MICR_FORMAT - 1');
                END IF;
        END;
        OUT_MICR_FORMAT_ID := V_MICR_REC.MICR_FORMAT_ID;
    END INSERT_MISSING_MICR;

BEGIN
    FOR REC IN bank_dep_tick_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE         := REC.COST_CENTER_CODE;
            V_TEMP_ROW.MICR_COST_CNTR           := REC.MICR_COST_CNTR;
            V_TEMP_ROW.MICR_ROUTING_NBR         := REC.MICR_ROUTING_NBR;
            V_TEMP_ROW.MICR_FORMAT_ACCT_NBR     := REC.MICR_FORMAT_ACCT_NBR;
            V_TEMP_ROW.EFFECTIVE_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EXPIRATION_DATE), 'RRRRMMDD');
            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'STORE_MICR_FORMAT_DTLS');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'STORE_MICR_FORMAT_DTLS - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                            IF REC.ACTL_EXPIRATION_DATE IS NULL THEN
                                V_TEMP_ROW.MICR_FORMAT_ID := BANKING_COMMON_TOOLS.GET_MICR_FRMT_ID_FR_BA_FRMT_NM(V_TEMP_ROW.BANK_ACCOUNT_NBR, REC.FORMAT_NAME, NULL);
                                IF V_TEMP_ROW.MICR_FORMAT_ID IS NULL THEN
                                    INSERT_MISSING_MICR(REC,
                                                        V_TEMP_ROW.BANK_ACCOUNT_NBR,
                                                        V_TEMP_ROW.EFFECTIVE_DATE,
                                                        V_TEMP_ROW.EXPIRATION_DATE,
                                                        V_TEMP_ROW.MICR_FORMAT_ID);
                                END IF;
                                BEGIN
                                    INSERT INTO STORE_MICR_FORMAT_DTLS VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO STORE_MICR_FORMAT_DTLS_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                V_TEMP_ROW.MICR_FORMAT_ID := BANKING_COMMON_TOOLS.GET_MICR_FRMT_ID_FR_BA_FRMT_NM(V_TEMP_ROW.BANK_ACCOUNT_NBR, REC.FORMAT_NAME, NULL);
                                IF V_TEMP_ROW.MICR_FORMAT_ID IS NULL THEN
                                    INSERT_MISSING_MICR(REC,
                                                        V_TEMP_ROW.BANK_ACCOUNT_NBR,
                                                        V_TEMP_ROW.EFFECTIVE_DATE,
                                                        V_TEMP_ROW.EXPIRATION_DATE,
                                                        V_TEMP_ROW.MICR_FORMAT_ID);
                                END IF;
                                INSERT INTO STORE_MICR_FORMAT_DTLS_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'STORE_MICR_FORMAT_DTLS - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
            V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'STORE_MICR_FORMAT_DTLS - 2');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_STORE_MICR_FORMAT_DTLS', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_STORE_MICR_FORMAT_DTLS;

PROCEDURE LOAD_BANK_DEP_BAG_TICK
/*******************************************************************************
    This procedure will load data into BANK_DEP_BAG_TICK from BANK_DEP_TICK_T table.

Created : 04/08/2015 jxc517 CCN Project...
Changed : 
*******************************************************************************/
IS
    CURSOR bank_dep_bag_tick_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICK_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_TEMP_ROW         BANK_DEP_BAG_TICK%ROWTYPE;
    V_BANK_ACCOUNT_NBR LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_COMMIT           NUMBER := 0;
BEGIN
    FOR REC IN bank_dep_bag_tick_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE         := REC.COST_CENTER_CODE;
            V_TEMP_ROW.DEPBAG_DAILY_USE_ACTUAL  := REC.DEPBAG_DAILY_USE_ACTUAL;
            V_TEMP_ROW.DEPBAG_DLY_USE_OVERRIDE  := REC.DEPBAG_DLY_USE_OVERRIDE;
            V_TEMP_ROW.DEPBAG_LAST_ORDER_DATE   := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.DEPBAG_LAST_ORDER_DATE), 'RRRRMMDD');
            V_TEMP_ROW.DEPBAG_LAST_ORDER_QTY    := REC.DEPBAG_LAST_ORDER_QTY;
            V_TEMP_ROW.DEPBAG_ONHAND_QTY        := REC.DEPBAG_ONHAND_QTY;
            V_TEMP_ROW.DEPBAG_REORDER_QTY       := REC.DEPBAG_REORDER_QTY;
            V_TEMP_ROW.DEPBAG_YTD_ORDERED_QTY   := REC.DEPBAG_YTD_ORDERED_QTY;
            V_TEMP_ROW.DEP_BAG_REORDER_POINT    := REC.DEP_BAG_REORDER_POINT;
            V_TEMP_ROW.DEP_BAG_TYPE             := REC.DEP_BAG_TYPE;
            V_TEMP_ROW.DEP_BAG_REORDER_SWITCH   := NULL; --REC.DEP_BAG_REORDER_SWITCH;
            V_TEMP_ROW.EFFECTIVE_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EXPIRATION_DATE), 'RRRRMMDD');
            
            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', 'Invalid Bank Account Number', REC.BANK_ACCOUNT_NBR, REC.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                            IF rec.ACTL_EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_BAG_TICK VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_BAG_TICK_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_BAG_TICK_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
            V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK - 2');
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_BAG_TICK;

PROCEDURE LOAD_BANK_DEP_TICKORD
/*****************************************************************************
    This Procedure will load the BANK_DEP_TICKORD table from data  
    file from TEMP_BANK_DEP_TICKORD table

Created : 03/11/2015 sxt410 CCN Project....
Changed :
******************************************************************************/
IS
    CURSOR dep_tick_ord_cur IS
        SELECT *
          FROM BANK_DEP_TICKORD_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM BANK_DEP_TICKORD_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR dep_tick_ord_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICKORD_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_COMMIT                    INTEGER := 0;
    V_TEMP_ROW                  BANK_DEP_TICKORD%ROWTYPE;
    V_PREV_BANK_ACCOUNT_NBR     BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_LEAD_STORE_NBR       MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_EFFECTIVE_DATE       DATE;
BEGIN
    FOR rec IN dep_tick_ord_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_LEAD_STORE_NBR = rec.COST_CENTER_CODE THEN
                UPDATE BANK_DEP_TICKORD_T
                   SET EXPIRATION_DATE  = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_LEAD_STORE_NBR     := rec.COST_CENTER_CODE;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR rec IN dep_tick_ord_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.COST_CENTER_CODE);
            V_TEMP_ROW.DEPOSIT_ORDER_PRIORITY := rec.DEPOSIT_ORDER_PRIORITY;
            V_TEMP_ROW.DEPOSIT_ORDER_STATUS   := rec.DEPOSIT_ORDER_STATUS;
            V_TEMP_ROW.DEPOSIT_ORDER_SEQ_NBR  := rec.DEPOSIT_ORDER_SEQ_NBR;
            V_TEMP_ROW.EFFECTIVE_DATE         := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE        := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINTENANCE_DATE  := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LAST_MAINTENANCE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINT_USER_ID     := rec.LAST_MAINT_USER_ID;
            V_TEMP_ROW.EXTRACT_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXTRACT_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXTRACTED_USER_ID      := rec.EXTRACTED_USER_ID;
            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                            IF rec.ACTL_EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_TICKORD VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_TICKORD_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_TICKORD_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD - 2');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_TICKORD; 

PROCEDURE LOAD_BANK_PRCDIST
/*****************************************************************************
    This Procedure will load the BANK_PRCDIST table from data  
    file from TEMP_BANK_PRCDIST table

Created : 03/10/2015 nxk927 CCN Project....
Changed :      
******************************************************************************/
IS
    CURSOR BANK_PRCDIST_CUR IS   
        SELECT *
          FROM BANK_PRCDIST_T ;
    V_COMMIT                INTEGER := 0;
    V_BANK_PRCDIST_ROW      BANK_PRCDIST%ROWTYPE;
BEGIN
    FOR rec IN BANK_PRCDIST_CUR LOOP
        BEGIN
            V_BANK_PRCDIST_ROW.PRICE_DIST_NBR     := rec.PRICE_DIST_NBR;
            V_BANK_PRCDIST_ROW.PRICE_DIST_NAME    := rec.PRICE_DIST_NAME;
            V_BANK_PRCDIST_ROW.EFFECTIVE_DATE     := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_BANK_PRCDIST_ROW.EXPIRATION_DATE    := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_BANK_PRCDIST_ROW.LAST_MAINT_AUTH_ID := rec.LAST_MAINT_AUTH_ID;
            INSERT INTO BANK_PRCDIST VALUES V_BANK_PRCDIST_ROW;
            V_BANK_PRCDIST_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_PRCDIST', SQLERRM, rec.PRICE_DIST_NBR, '000000', 'BANK_PRCDIST');
        END;
    END LOOP;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_PRCDIST', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_PRCDIST;

PROCEDURE LOAD_BANK_PRCCNTR
/*****************************************************************************
    This Procedure will load the BANK_PRCCNTR table from data  
    file from TEMP_BANK_PRCCNTR table

Created : 03/10/2015 nxk927 CCN Project....
Changed :     
******************************************************************************/
IS
    CURSOR bank_prccntr_cur IS
        SELECT *
          FROM BANK_PRCCNTR_T
         WHERE (COST_CENTER_CODE, PRICE_DIST_NBR) IN (SELECT COST_CENTER_CODE, PRICE_DIST_NBR
                                                        FROM BANK_PRCCNTR_T
                                                       GROUP BY COST_CENTER_CODE, PRICE_DIST_NBR
                                                      HAVING COUNT(*) > 1)
        ORDER BY COST_CENTER_CODE, PRICE_DIST_NBR, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR bank_prccntr_temp_cur IS   
        SELECT *
          FROM BANK_PRCCNTR_T ;
    V_COMMIT                INTEGER := 0;
    V_BANK_PRCCNTR_ROW      BANK_PRCCNTR%ROWTYPE;
    V_PREV_CC               BANK_PRCCNTR_T.COST_CENTER_CODE%TYPE := 'XXXXXX';
    V_PRICE_DIST_NBR        BANK_PRCCNTR_T.PRICE_DIST_NBR%TYPE := 'XXXX';
    V_PREV_EFFECTIVE_DATE   DATE;
BEGIN
    FOR rec IN bank_prccntr_cur LOOP
        BEGIN
            IF V_PRICE_DIST_NBR = rec.PRICE_DIST_NBR AND V_PREV_CC = rec.COST_CENTER_CODE THEN
                UPDATE BANK_PRCCNTR_T
                   SET EXPIRATION_DATE = INITLOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE PRICE_DIST_NBR   = rec.PRICE_DIST_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_CC               := rec.COST_CENTER_CODE;
            V_PRICE_DIST_NBR        := rec.PRICE_DIST_NBR;
            V_PREV_EFFECTIVE_DATE   := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_PRCCNTR', SQLERRM, '0000000000', rec.COST_CENTER_CODE , 'BANK_PRCCNTR_T');
        END;
    END LOOP;  
    COMMIT;
    FOR rec IN bank_prccntr_temp_cur LOOP
        BEGIN
            V_BANK_PRCCNTR_ROW.PRICE_DIST_NBR     := rec.PRICE_DIST_NBR;
            V_BANK_PRCCNTR_ROW.COST_CENTER_CODE   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.COST_CENTER_CODE);
            V_BANK_PRCCNTR_ROW.EFFECTIVE_DATE     := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_BANK_PRCCNTR_ROW.EXPIRATION_DATE    := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_BANK_PRCCNTR_ROW.LAST_MAINT_AUTH_ID := rec.LAST_MAINT_AUTH_ID;
            IF V_BANK_PRCCNTR_ROW.EXPIRATION_DATE IS NULL THEN
                INSERT INTO BANK_PRCCNTR VALUES V_BANK_PRCCNTR_ROW;
            ELSE
                INSERT INTO BANK_PRCCNTR_HIST VALUES V_BANK_PRCCNTR_ROW;
            END IF;
            V_BANK_PRCCNTR_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_PRCCNTR', SQLERRM, rec.PRICE_DIST_NBR, rec.COST_CENTER_CODE, 'BANK_PRCCNTR');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_PRCCNTR', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_PRCCNTR;

PROCEDURE CHECK_LEAD_CC
/*****************************************************************************
    This Procedure will Check if a LEAD Cost CENTER is Active and has no (members)children 
    in the MEMBER_BANK_CC. If so, update the bank_type_code to "I" (Independent)

Created : 03/19/2015 nxk927 CCN Project....
Changed : 
******************************************************************************/
IS
    CURSOR CHECK_LEAD_CUR IS   
        SELECT LEAD_STORE_NBR, LEAD_BANK_ACCOUNT_NBR
          FROM LEAD_BANK_CC 
         WHERE EXPIRATION_DATE IS NULL
           AND BANK_TYPE_CODE = 'L'
           AND (LEAD_BANK_ACCOUNT_NBR, LEAD_STORE_NBR) NOT IN (SELECT LEAD_BANK_ACCOUNT_NBR, LEAD_STORE_NBR 
                                                                 FROM MEMBER_BANK_CC 
                                                                WHERE EXPIRATION_DATE IS NULL);
    V_COMMIT                INTEGER := 0;
BEGIN
    FOR rec IN CHECK_LEAD_CUR LOOP
        BEGIN
            UPDATE LEAD_BANK_CC
               SET BANK_TYPE_CODE = 'I'
             WHERE LEAD_STORE_NBR        = rec.LEAD_STORE_NBR
               AND LEAD_BANK_ACCOUNT_NBR = rec.LEAD_BANK_ACCOUNT_NBR
               AND BANK_TYPE_CODE        = 'L';
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'CHECK_LEAD_CC', SQLERRM , '0000000000', rec.LEAD_STORE_NBR , 'LEAD_BANK_CC');
        END;
    END LOOP;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'CHECK_LEAD_CC', SQLERRM, '0000000000', '000000', 'LEAD_BANK_CC');
END CHECK_LEAD_CC;

PROCEDURE MARK_AUDIT_AS_SENT
/*****************************************************************************
    This Procedure will mark all the audit_log records as marked, so that none
    of these are sent again in audit

Created : 09/15/2015 jxc517 CCN Project....
Changed : 
******************************************************************************/
IS
BEGIN
    UPDATE AUDIT_LOG
       SET AUDIT_REC_FLAG = 'R'
     WHERE AUDIT_REC_FLAG IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'MARK_AUDIT_AS_SENT', SQLERRM, '0000000000', '000000', 'AUDIT');
END MARK_AUDIT_AS_SENT;

PROCEDURE BANK_INITLOAD_SP
/******************************************************************
This Procedure is a wrapper for the Initial Load of the BANK tables
    * Deletes all the store drafts tables
    * Loads all the store drafts tables

Created : 03/11/2015 nxk927 CCN Project....
Changed :
******************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN
    --Load data from external table to intermediate table as indexes are not possible on external table
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Loading Temporary Tables';
      LOAD_TEMP_TABLES();
      DBMS_OUTPUT.PUT_LINE('Temporary Tables loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_ACCOUNT Table';
      LOAD_BANK_ACCOUNT();
      DBMS_OUTPUT.PUT_LINE('BANK_ACCOUNT loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_MICR_FMT Table';
      LOAD_BANK_MICR_FMT();
      DBMS_OUTPUT.PUT_LINE('BANK_MICR_FMT loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load LEAD_BANK_CC Table';
      LOAD_LEAD_BANK_CC();
      DBMS_OUTPUT.PUT_LINE('LEAD_BANK_CC loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load MEMBER_BANK_CC Table';
      LOAD_MEMBER_BANK_CC();
      DBMS_OUTPUT.PUT_LINE('MEMBER_BANK_CC loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_TICKOAK Table';
      LOAD_BANK_DEP_TICKOAK();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_TICKOAK loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_TICK Table ';
      LOAD_BANK_DEP_TICK();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_TICK loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load STORE_MICR_FORMAT_DTLS Table ';
      LOAD_STORE_MICR_FORMAT_DTLS();
      DBMS_OUTPUT.PUT_LINE('STORE_MICR_FORMAT_DTLS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_BAG_TICK Table ';
      LOAD_BANK_DEP_BAG_TICK();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_BAG_TICK loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_TICKORD Table ';
      LOAD_BANK_DEP_TICKORD();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_TICKORD loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_PRCDIST Table ';
      LOAD_BANK_PRCDIST();
      DBMS_OUTPUT.PUT_LINE('BANK_PRCDIST loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_PRCCNTR Table ';
      LOAD_BANK_PRCCNTR();
      DBMS_OUTPUT.PUT_LINE('BANK_PRCCNTR loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
      
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Checking Lead bank to make sure it has member bank ';
      CHECK_LEAD_CC();
      DBMS_OUTPUT.PUT_LINE('Checked Lead bank in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Marking the audit records as sent ';
      MARK_AUDIT_AS_SENT();
      DBMS_OUTPUT.PUT_LINE('Marking the audit records as sent : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'BANK_INITLOAD_SP', SQLERRM, '0000000000', '0000000000', '0000000000');
END BANK_INITLOAD_SP;

PROCEDURE INITLOAD_SP
/******************************************************************
This Procedure is a wrapper for the Initial Load of the BANK tables
    * Deletes all the store drafts tables
    * Loads all the store drafts tables

Created : 03/11/2015 nxk927 CCN Project....
Changed :
******************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Truncate BANKING Tables ';
     TRUNCATE_BANKING_TBS();
     DBMS_OUTPUT.PUT_LINE('Truncating completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     V_START_TIME := DBMS_UTILITY.GET_TIME;
     BANK_INITLOAD_SP();
     DBMS_OUTPUT.PUT_LINE('Load completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'INITLOAD_SP', SQLERRM, '000000', '0000000',  '0000000');
END INITLOAD_SP;

END INITLOAD;