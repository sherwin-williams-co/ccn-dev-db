create or replace PACKAGE BODY DPST_TCKTS_UPDATE_BATCH_PKG
AS
/**********************************************************
  This Package contains procedured to update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 08/31/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE PROCESS
/******************************************************************************
  This procedure will update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 08/31/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Corrected the batch name, as it is wrong
Changed : 10/21/2015 jxc517 CCN Project....
          Added code to reset ytd deposit tickets on january 1st of every year
Changed : 11/04/2015 nxk927 CCN Project....
          added update for the orders that reach today's date
*******************************************************************************/
IS
V_BATCH_NUMBER                 BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS                 BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_NBR_DEP_TICKETS_PER_BK       BANK_DEP_TICK.NBR_DEP_TICKETS_PER_BK%TYPE;
V_REORDER_NUMBER_BKS           BANK_DEP_TICK.REORDER_NUMBER_BKS%TYPE;

BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('DPST_TCKTS_UPDT_BTCH', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        IF TO_CHAR(SYSDATE,'DDMON') = '01JAN' THEN
            FOR rec IN (SELECT * FROM BANK_DEP_TICK) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_HIST_I_SP(rec);
                rec.YTD_DEP_TKTS_ORDERED_QTY := 0;
                rec.EFFECTIVE_DATE  := LEAST(NVL(rec.EXPIRATION_DATE, SYSDATE), SYSDATE);
                TABLE_IU_PKG.BANK_DEP_TICK_I_SP(rec);
            END LOOP;
        END IF;
        FOR rec IN (SELECT COST_CENTER_CODE, SUM(TO_NUMBER(POS_COUNT)) POS_COUNT
                      FROM TEMP_DPST_TCKT_POS_CNTS
                     GROUP BY COST_CENTER_CODE
                     HAVING SUM(TO_NUMBER(POS_COUNT)) > 0) LOOP
            BEGIN
                --TBD as we have multiple records in this file for a store
                UPDATE BANK_DEP_TICK
                   SET DEP_TKTS_ONHAND_QTY = NVL(DEP_TKTS_ONHAND_QTY,0) - rec.POS_COUNT
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
        FOR rec IN (SELECT *
                      FROM BANK_DEP_TICKORD
                     WHERE COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                                  FROM BANK_DEP_TICK
                                                 WHERE DEP_TKTS_ONHAND_QTY <= REORDER_POINT)) LOOP
            BEGIN
                DEPOSIT_TICKET_MAINTENANCE_PKG.PLACE_DEPOSIT_TICKET_ORDER(rec.COST_CENTER_CODE,
                                                                          TRUNC(SYSDATE),
                                                                          NULL,
                                                                          'BATCH');
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
        V_NBR_DEP_TICKETS_PER_BK                   := BANKING_COMMON_TOOLS.GET_STANDARD_VAL_DEPOSIT_ORD('NBR_DEP_TICKETS_PER_BK');
        V_REORDER_NUMBER_BKS                       := BANKING_COMMON_TOOLS.GET_STANDARD_VAL_DEPOSIT_ORD('REORDER_NUMBER_BKS');
        FOR rec IN (SELECT *
                      FROM BANK_DEP_TICKORD
                     WHERE ORDER_DATE = TRUNC(SYSDATE)) LOOP
            BEGIN
            --This will update all the deposit ticket if the order hits today's date
                UPDATE BANK_DEP_TICK
                   SET DEP_TKTS_ONHAND_QTY      = NVL(DEP_TKTS_ONHAND_QTY,0) + (NVL(REORDER_NUMBER_BKS,V_REORDER_NUMBER_BKS) * NVL(NBR_DEP_TICKETS_PER_BK,V_NBR_DEP_TICKETS_PER_BK)),
                       YTD_DEP_TKTS_ORDERED_QTY = NVL(YTD_DEP_TKTS_ORDERED_QTY,0) +  (NVL(REORDER_NUMBER_BKS,V_REORDER_NUMBER_BKS) * NVL(NBR_DEP_TICKETS_PER_BK,V_NBR_DEP_TICKETS_PER_BK))
                 WHERE COST_CENTER_CODE         = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('DPST_TCKTS_UPDT_BTCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;

END DPST_TCKTS_UPDATE_BATCH_PKG;