create or replace PACKAGE BODY DPST_TCKTS_UPDATE_BATCH_PKG
AS
/**********************************************************
  This Package contains procedured to update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 08/31/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE PROCESS(
/******************************************************************************
  This procedure will update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 08/31/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Corrected the batch name, as it is wrong
Changed : 10/21/2015 jxc517 CCN Project....
          Added code to reset ytd deposit tickets on january 1st of every year
Changed : 11/04/2015 nxk927 CCN Project....
          added update for the orders that reach today's date
        : 11/05/2015 nxk927 CCN Project....
          added LAST_MAINT_USER_ID <> 'BATCH' so there won't be multiple updates
Changed : 08/19/2016 nxk927 CCN project....
          changed signature. Added servername and logfile name, pulling distinct cost center 
          to place the order
        : 12/13/2016 nxk927 CCN project....
          Removing unwanted calculation as the calculation for the onhand quantity and ytd quantity will happen
          as the order is placed.
        : 12/14/2016 jxc517 CCN project Team....
          Arrival date should be batch order date + 5, from UI it should be the date passed
        : 01/13/2017 nxk927 CCN project....
          YTD Order count be updated on first week day of the year
        : 03/15/2017 nxk927 CCN project....
          Daily uses deposit ticket should be one(not depending on the POS count)
        : 06/16/2017 gxg192 Replaced table TEMP_DPST_TCKT_POS_CNTS with POS_DPST_TICKET_COUNTS
                     since data from new POS needs to be considered. 
        : 06/28/2017 sxp130 ASP_805 CCN project....
          When exception raised, BANK_DEP_TICK.DEP_TKTS_ONHAND_QTY set back to previous value
        : 07/07/2017 nxk927 CCN project....
          Removed the Daily uses deposit ticket reduction process
*******************************************************************************/
IN_SERVER_NAME  IN VARCHAR2,
IN_LOGFILE      IN VARCHAR2
)IS
V_BATCH_NUMBER                 BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS                 BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_FIRSTWEEK_DAY                DATE;
V_LAST_BATCH_RUN_DATE          DATE;
BEGIN
    V_LAST_BATCH_RUN_DATE := CCN_BATCH_PKG.GET_LAST_RUNDATE('DPST_TCKTS_UPDT_BTCH');
    CCN_BATCH_PKG.INSERT_BATCH_JOB('DPST_TCKTS_UPDT_BTCH', V_BATCH_NUMBER,IN_SERVER_NAME,IN_LOGFILE);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        V_FIRSTWEEK_DAY := CCN_COMMON_TOOLS.RETURN_FIRST_WKDAY_OF_MNTH(TRUNC(SYSDATE,'YYYY'));
        IF TO_CHAR(SYSDATE,'DDMON') = TO_CHAR(V_FIRSTWEEK_DAY,'DDMON') THEN
           FOR rec IN (SELECT * FROM BANK_DEP_TICK) LOOP
               TABLE_IU_PKG.BANK_DEP_TICK_HIST_I_SP(rec);
               rec.YTD_DEP_TKTS_ORDERED_QTY := 0;
               rec.EFFECTIVE_DATE  := LEAST(NVL(rec.EXPIRATION_DATE, SYSDATE), SYSDATE);
               TABLE_IU_PKG.BANK_DEP_TICK_I_SP(rec);
               COMMIT;
           END LOOP;
        END IF;
        FOR rec IN (SELECT DISTINCT COST_CENTER_CODE
                      FROM BANK_DEP_TICK
                     WHERE DEP_TKTS_ONHAND_QTY <= REORDER_POINT) LOOP
            BEGIN
                DEPOSIT_TICKET_MAINTENANCE_PKG.PLACE_DEPOSIT_TICKET_ORDER(rec.COST_CENTER_CODE,
                                                                          TRUNC(SYSDATE) + 5, --arrival date from batch = order date + 5
                                                                          NULL,
                                                                          'BATCH');
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
                    --ASP_805 Changes
                    ROLLBACK;
                    UPDATE BANK_DEP_TICK
                       SET DEP_TKTS_ONHAND_QTY = NVL(DEP_TKTS_ONHAND_QTY,0) + 1
                     WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE
                       AND EXISTS (SELECT 1
                                     FROM POS_DPST_TICKET_COUNTS
                                    WHERE COST_CENTER_CODE= rec.COST_CENTER_CODE
                                      AND LOAD_DATE >= NVL(V_LAST_BATCH_RUN_DATE, LOAD_DATE)
                                      AND TO_NUMBER(POS_COUNT) > 0);
                    COMMIT;
            END;
            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('DPST_TCKTS_UPDT_BTCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;

PROCEDURE INTRM_DPST_TKT_PROCESS(
/******************************************************************************
  This procedure will update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 09/06/2016 nxk927 CCN Project....
Changed : 11/16/2016 nxk927 CCN Project....
          Grouping by just cost center. 
          The interim deposit will be cosidered 1 per cost center
        : 06/13/2017 gxg192 Replaced table TEMP_INTERIM_DEPST with POS_INTERIM_DEPST
                     since data from new POS needs to be considered.
        : 06/28/2017 sxp130 ASP_805 CCN project....
          When exception raised, BANK_DEP_TICK.DEP_TKTS_ONHAND_QTY set back to previous value
*******************************************************************************/
IN_SERVER_NAME  IN VARCHAR2,
IN_LOGFILE      IN VARCHAR2
)IS
V_BATCH_NUMBER                 BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS                 BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_LAST_BATCH_RUN_DATE          DATE;
BEGIN
    V_LAST_BATCH_RUN_DATE := CCN_BATCH_PKG.GET_LAST_RUNDATE('INTRM_DPST_TKT_PROC');

    CCN_BATCH_PKG.INSERT_BATCH_JOB('INTRM_DPST_TKT_PROC', V_BATCH_NUMBER,IN_SERVER_NAME,IN_LOGFILE);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        FOR rec IN (SELECT DISTINCT COST_CENTER_CODE
                      FROM POS_INTERIM_DEPST
                     WHERE LOAD_DATE >= NVL(V_LAST_BATCH_RUN_DATE, LOAD_DATE)) LOOP
            BEGIN
                UPDATE BANK_DEP_TICK
                   SET DEP_TKTS_ONHAND_QTY = NVL(DEP_TKTS_ONHAND_QTY,0) - 1
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;

                --business rule to check the order place date is valid or not
                BUSINESS_RULES_PKG.PLACE_TCKT_ORDER_BR_SP(rec.COST_CENTER_CODE,
                                                          NULL);   --ASP_805

            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'INTRM_DPST_TKT_PROC', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
                    --ASP_805 Changes
                    ROLLBACK;
                    UPDATE BANK_DEP_TICK
                       SET DEP_TKTS_ONHAND_QTY = NVL(DEP_TKTS_ONHAND_QTY,0) + 1
                     WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE
                       AND EXISTS (SELECT 1
                                     FROM POS_INTERIM_DEPST
                                    WHERE COST_CENTER_CODE = rec.COST_CENTER_CODE
                                      AND LOAD_DATE >= NVL(V_LAST_BATCH_RUN_DATE, LOAD_DATE));
                    COMMIT;
            END;
            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('INTRM_DPST_TKT_PROC', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'INTRM_DPST_TKT_PROC', SQLERRM, '1111111111', '111111', 'OTHER');
END INTRM_DPST_TKT_PROCESS;

PROCEDURE DPST_TKT_PROCESS(
/******************************************************************************
  This procedure will update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 07/07/2017 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_SERVER_NAME  IN VARCHAR2,
IN_LOGFILE      IN VARCHAR2
)IS
V_BATCH_NUMBER                 BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS                 BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_LAST_BATCH_RUN_DATE          DATE;
BEGIN
    V_LAST_BATCH_RUN_DATE := CCN_BATCH_PKG.GET_LAST_RUNDATE('DPST_TKT_PROCESS');
    CCN_BATCH_PKG.INSERT_BATCH_JOB('DPST_TKT_PROCESS', V_BATCH_NUMBER,IN_SERVER_NAME,IN_LOGFILE);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        FOR rec IN (SELECT DISTINCT COST_CENTER_CODE
                      FROM POS_DPST_TICKET_COUNTS
                     WHERE LOAD_DATE >= NVL(V_LAST_BATCH_RUN_DATE, LOAD_DATE)
                       AND TO_NUMBER(POS_COUNT) > 0) LOOP
            BEGIN
                --TBD as we have multiple records in this file for a store
                UPDATE BANK_DEP_TICK
                   SET DEP_TKTS_ONHAND_QTY = NVL(DEP_TKTS_ONHAND_QTY,0) - 1
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.DPST_TKT_PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
                    ROLLBACK;
            END;
            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('DPST_TKT_PROCESS', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TKT_PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END DPST_TKT_PROCESS;

PROCEDURE UPDATE_TICKORD_TRACK_NUM(
/*******************************************************************************
  THIS PROCEDURE IS INTENDED TO UPDATE THE TRACING NUMBER INFORMATION FOR AN ORDER ID.

  CREATED : 06/21/2016 MXK766 CCN PROJECT....
  CHANGED :
*******************************************************************************/
IN_LOAD_DATE IN VARCHAR2)
IS

  V_CREATE_DT DATE           := TO_DATE(IN_LOAD_DATE, 'MM/DD/YYYY');
  V_BANK_DEP_TICKORD_REC        BANK_DEP_TICKORD%ROWTYPE;
  V_BANK_DEP_TICKORD_FUTURE_REC BANK_DEP_TICKORD_FUTURE%ROWTYPE;
  V_BANK_DEP_TICKORD_HIST_REC   BANK_DEP_TICKORD_HIST%ROWTYPE;
  V_TICKORD_TRACKING_T_REC      TICKORD_TRACKING_T%ROWTYPE;

BEGIN

  /**
  STEP 1: READ THE DATA FROM THE EXTERNAL TABLE AND LOAD IT INTO A TICKORD_TRACKING_T
  STEP 2: USE THE RECORDS THAT GOT INTO TICKORD_TRACKING_T AND UPDATE THE ORDER_TRACKING_NUMBER
  IN BANK_DEP_TICKORD, BANK_DEP_TICKORD_FUTURE AND BANK_DEP_TICKORD_HIST BASED ON THE EXTERNAL_ORDER_ID_GUI
  **/

  --INSERTING DATA INTO TEMPORARY HOLDING TABLE.

    FOR REC IN (SELECT ORDER_ID, ORDER_TRACKING_NUMBER,EXTERNAL_ORDER_ID_GUI,V_CREATE_DT AS CREATE_DT FROM TEMP_TICKORD_TRACKING) LOOP
      V_TICKORD_TRACKING_T_REC := REC;
      BEGIN
          INSERT INTO TICKORD_TRACKING_T VALUES V_TICKORD_TRACKING_T_REC;
      EXCEPTION
      WHEN OTHERS THEN
          IF INSTR(SQLERRM, 'KUP-04040') > 0 THEN
              ERRPKG.RAISE_ERR(SQLCODE, 'ERROR IN UPDATE_TICKORD_TRACK_NUM. ISSUES WITH THE FILE. KUP-04040 ' || SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
          ELSE
              ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_TCKTS_UPDATE_BATCH_PKG.UPDATE_TICKORD_TRACK_NUM', SQLERRM, NULL , NULL, 'TICKORD_TRACKING_T');
          END IF;
      END;
    END LOOP;

  --LOOPING FOR THE INSERTED RECORDS THAT GOT LOADED AND UPDATING THE TARGET TABLES GIVEN BELOW.

  FOR REC IN (SELECT * FROM TICKORD_TRACKING_T WHERE CREATE_DT = V_CREATE_DT)
  LOOP

      FOR REC2 IN (SELECT * FROM BANK_DEP_TICKORD T1 WHERE T1.EXTERNAL_ORDER_ID_GUI = REC.EXTERNAL_ORDER_ID_GUI)
      LOOP
          V_BANK_DEP_TICKORD_REC := REC2;
          V_BANK_DEP_TICKORD_REC.ORDER_TRACKING_NUMBER := REC.ORDER_TRACKING_NUMBER;
          TABLE_IU_PKG.BANK_DEP_TICKORD_U_SP(V_BANK_DEP_TICKORD_REC);
      END LOOP;

      FOR REC3 IN (SELECT * FROM BANK_DEP_TICKORD_FUTURE T1 WHERE T1.EXTERNAL_ORDER_ID_GUI = REC.EXTERNAL_ORDER_ID_GUI)
      LOOP
          V_BANK_DEP_TICKORD_FUTURE_REC := REC3;
          V_BANK_DEP_TICKORD_FUTURE_REC.ORDER_TRACKING_NUMBER := REC.ORDER_TRACKING_NUMBER;
          TABLE_IU_PKG.BANK_DEP_TICKORD_FUTURE_U_SP(V_BANK_DEP_TICKORD_FUTURE_REC);
      END LOOP;

      FOR REC4 IN (SELECT * FROM BANK_DEP_TICKORD_HIST T1 WHERE T1.EXTERNAL_ORDER_ID_GUI = REC.EXTERNAL_ORDER_ID_GUI)
      LOOP
          V_BANK_DEP_TICKORD_HIST_REC := REC4;
          V_BANK_DEP_TICKORD_HIST_REC.ORDER_TRACKING_NUMBER := REC.ORDER_TRACKING_NUMBER;
          TABLE_IU_PKG.BANK_TICKORD_HIST_U_SP(V_BANK_DEP_TICKORD_HIST_REC);
      END LOOP;

  END LOOP;

  --DO A COMMIT AFTER ALL THE PROCESS IS DONE.

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    --ROLLBACK THE OPERATION IN CASE OF ANY FAILURE AND RAISE AN EXCEPTION WHICH WILL TRIGGER AN EMAIL.
    ROLLBACK;
    IF INSTR(SQLERRM, 'KUP-04040') > 0 THEN
      ERRPKG.RAISE_ERR(SQLCODE,
                       'ERROR IN UPDATE_TICKORD_TRACK_NUM. ISSUES WITH THE FILE. ' ||
                       SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
    ELSE
      ERRPKG.RAISE_ERR(SQLCODE,
                       'ERROR IN UPDATE_TICKORD_TRACK_NUM ' ||
                       SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
    END IF;
END UPDATE_TICKORD_TRACK_NUM;

END DPST_TCKTS_UPDATE_BATCH_PKG;