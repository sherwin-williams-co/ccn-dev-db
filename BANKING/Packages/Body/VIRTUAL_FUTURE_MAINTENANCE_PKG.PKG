CREATE OR REPLACE PACKAGE BODY VIRTUAL_FUTURE_MAINTENANCE_PKG
AS
/**********************************************************
This Package contains all the procedures used to
maintain a virtual future

Created : 10/21/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE UNEXPR_TRNSFRD_FRM_LEAD_MBRS(
/******************************************************************************
	This procedure unexpire the transferred from leads members as that transfer is
  obsolete as part of this current data updates for the virtual future

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR         IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE)
IS
    CURSOR lead_bank_cc_cur IS
        SELECT *
          FROM LEAD_BANK_CC A
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
    CURSOR mbr_bank_cc_othr_cur(IN_LEAD_STORE_NBR   IN     MEMBER_BANK_CC.LEAD_STORE_NBR%TYPE) IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_STORE_NBR        <> IN_LEAD_STORE_NBR
           AND LEAD_BANK_ACCOUNT_NBR <> IN_BANK_ACCOUNT_NBR
           AND MEMBER_STORE_NBR IN (SELECT MEMBER_STORE_NBR
                                      FROM MEMBER_BANK_CC_FUTURE
                                     WHERE LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
                                       AND LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR);
BEGIN
    FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
        FOR mbr_bank_cc_othr_rec IN mbr_bank_cc_othr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            mbr_bank_cc_othr_rec.EXPIRATION_DATE := NULL;
            TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_othr_rec);
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'UNEXPR_TRNSFRD_FRM_LEAD_MBRS ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END UNEXPR_TRNSFRD_FRM_LEAD_MBRS;

PROCEDURE VRTL_FTR_BANK_MICR_FRMT_UPDT(
/******************************************************************************
	This procedure performs the update process for virtual bank micr future

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR         IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
    IN_FUTURE_ID                IN     NUMBER)
IS
    CURSOR bank_micr_format_ftr_cur IS
        SELECT BANK_ACCOUNT_NBR,
               FORMAT_NAME,
               DJDE_FORM_PARM,
               DJDE_FEED_PARM,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACTNBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               IN_FUTURE_ID AS FUTURE_ID,
               MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT A
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
BEGIN
    FOR bank_micr_format_ftr_rec IN bank_micr_format_ftr_cur LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(bank_micr_format_ftr_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'VRTL_FTR_BANK_MICR_FRMT_UPDT ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END VRTL_FTR_BANK_MICR_FRMT_UPDT;

PROCEDURE VRTL_FTR_LEAD_BANK_CC_UPDT(
/******************************************************************************
    This procedure will update the virtual future lead details with the current records
    updated details

Created : 10/21/2015 jxc517 CCN Project....
Changed : 01/15/2016 dxv848 CCN Project....
          moved the ACCNT_MNTNC_UI_DELETE_SP procedure to  ACC_MEM_MAIN_COMMONTOOLS package
Changed:  07/27/2017 rxa457 CCN Project Team...
          Removing Virtual Future updates for STORE_MICR_FORMAT_DTLS_FUTURE, BANK_DEP_BAG_TICK_FUTURE, BANK_DEP_BAG_TICK_FUTURE - reference asp-825
          Also removed unused cursor mbr_bank_cc_cur along with this change.
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR         IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
    IN_FUTURE_ID                IN     NUMBER)
IS
    CURSOR lead_bank_cc_ftr_cur IS
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM LEAD_BANK_CC A
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
    CURSOR mbr_bank_cc_cur(IN_LEAD_STORE_NBR   IN    VARCHAR2) IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_STORE_NBR        <> IN_LEAD_STORE_NBR
           AND LEAD_BANK_ACCOUNT_NBR <> IN_BANK_ACCOUNT_NBR
           AND MEMBER_STORE_NBR IN (SELECT MEMBER_STORE_NBR
                                      FROM MEMBER_BANK_CC_FUTURE
                                     WHERE LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
                                       AND LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR);
    V_FUTURE_ID              NUMBER;
BEGIN
    FOR lead_bank_cc_ftr_rec IN lead_bank_cc_ftr_cur LOOP

        --now if the lead itself is expired
        IF lead_bank_cc_ftr_rec.EXPIRATION_DATE IS NOT NULL THEN

            --1) if this is a transfer virtual future, we need to unexpire the members from which the virtual future was created
            UNEXPR_TRNSFRD_FRM_LEAD_MBRS(IN_BANK_ACCOUNT_NBR);

            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(lead_bank_cc_ftr_rec.LEAD_BANK_ACCOUNT_NBR, V_FUTURE_ID);
        ELSE
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(lead_bank_cc_ftr_rec);
        END IF; --lead is expired
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'VRTL_FTR_LEAD_BANK_CC_UPDT ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END VRTL_FTR_LEAD_BANK_CC_UPDT;

PROCEDURE VIRTUAL_FUTURE_UPSERT_SP ( 
/******************************************************************************
	This procedure performs the core insert/update process for virtual future maintenance

As per discussion with Keith on 21-Oct-2015:
Specifically assuming only one future (as our model won't support multiple futures, with the changed busniess requirements)

Created : 10/21/2015 jxc517 CCN Project....
Changed : 01/15/2016 dxv848 CCN Project....
          moved the ACCNT_MNTNC_UI_DELETE_SP procedure to  ACC_MEM_MAIN_COMMONTOOLS package
Changed : rxa457 07/18/2017 CCN Project Team...
             Removed unused IN parameter IN_BANK_TYPE_CHNG_VRTL_FTR					
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR         IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
    IN_REAL_FUTURE_BANK_ACCOUNT IN     VARCHAR2,
    IN_TRANSFER_VRTL_FTR        IN     VARCHAR2)
IS
    V_FUTURE_ID                  NUMBER;
    CURSOR bank_account_ftr_cur(IN_FUTURE_ID   IN      NUMBER) IS
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM BANK_ACCOUNT A
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
BEGIN
    --Get the virtual future ID for which we need to update the current details into
    SELECT MAX(FUTURE_ID)
      INTO V_FUTURE_ID
      FROM BANK_ACCOUNT_FUTURE
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;

    --loop through that virtual future bank account
    FOR bank_account_ftr_rec IN bank_account_ftr_cur(V_FUTURE_ID) LOOP

        --now if the bank account itself is expired, there are 2 scenarios
        IF bank_account_ftr_rec.EXPIRATION_DATE IS NOT NULL THEN
            --1) if this is a transfer virtual future, we need to unexpire the members from which the virtual future was created
            --2) if this is a bank type change virtual future we don't need to do anything special
            IF IN_TRANSFER_VRTL_FTR = 'Y' THEN
                UNEXPR_TRNSFRD_FRM_LEAD_MBRS(IN_BANK_ACCOUNT_NBR);
            END IF; --transfer virtual future
            --finally delete the virtual future all together
            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(bank_account_ftr_rec.BANK_ACCOUNT_NBR,
                                                             bank_account_ftr_rec.FUTURE_ID);
        ELSE
            --below procedure will deal with the bank MICR format virtual futures
            VRTL_FTR_BANK_MICR_FRMT_UPDT(bank_account_ftr_rec.BANK_ACCOUNT_NBR,
                                         bank_account_ftr_rec.FUTURE_ID);
            IF IN_TRANSFER_VRTL_FTR = 'Y' THEN

                --below procedure will deal with the lead virtual futures
                --call not applicable for bank type change virtual futures
                --reason being the bank account now can not be expired with a date less than the expired leads date
                VRTL_FTR_LEAD_BANK_CC_UPDT(bank_account_ftr_rec.BANK_ACCOUNT_NBR,
                                           bank_account_ftr_rec.FUTURE_ID);
            END IF; --transfer virtual future

            --update the bank account 
            TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(bank_account_ftr_rec);
        END IF; --bank account is expired
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'VIRTUAL_FUTURE_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END VIRTUAL_FUTURE_UPSERT_SP;

PROCEDURE VRTL_FTR_MBR_BANK_CC_UPDT(
/******************************************************************************
    This procedure will update the virtual future member details with the current records
    updated details
    Note: Previously this Procedure was named as UPDT_VIRTUAL_FTR_MBR_STR_DTLS and was part of member_maintenance_pkg

Created : 07/31/2017 RXA457 CCN Project....
*******************************************************************************/
IN_MBR_BANK_CC_REC        IN     MEMBER_BANK_CC%ROWTYPE)
IS
    CURSOR member_bank_cc_cur(IN_FUTURE_ID   IN      NUMBER) IS
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM MEMBER_BANK_CC A
         WHERE MEMBER_STORE_NBR      = IN_MBR_BANK_CC_REC.MEMBER_STORE_NBR
           AND LEAD_BANK_ACCOUNT_NBR = IN_MBR_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    V_FUTURE_ID              NUMBER;
BEGIN
    SELECT MAX(FUTURE_ID)
      INTO V_FUTURE_ID
      FROM MEMBER_BANK_CC_FUTURE
     WHERE MEMBER_STORE_NBR      = IN_MBR_BANK_CC_REC.MEMBER_STORE_NBR
       AND LEAD_BANK_ACCOUNT_NBR = IN_MBR_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    FOR rec IN member_bank_cc_cur(V_FUTURE_ID) LOOP
        TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'VRTL_FTR_MBR_BANK_CC_UPDT ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END VRTL_FTR_MBR_BANK_CC_UPDT;

FUNCTION IS_VIRTUAL_FTR_MBR_STR(
/******************************************************************************
    This function will determine if this is a virtual future store member or 
    a real future store member
    Note: - Function moved from MEMBER_MAINTENANCE_PKG
Created : 07/31/2017 rxa457 CCN Project....
*******************************************************************************/
IN_MBR_BANK_CC_REC        IN     MEMBER_BANK_CC%ROWTYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1);
BEGIN
		SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM MEMBER_BANK_CC_FUTURE
     WHERE MEMBER_STORE_NBR      = IN_MBR_BANK_CC_REC.MEMBER_STORE_NBR
       AND LEAD_STORE_NBR        = IN_MBR_BANK_CC_REC.LEAD_STORE_NBR
       AND LEAD_BANK_ACCOUNT_NBR = IN_MBR_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
				RETURN V_RETURN_VAL;
END IS_VIRTUAL_FTR_MBR_STR;

FUNCTION IS_REAL_FUTURE_BANK_ACCOUNT(
/******************************************************************************
	This procedure checks if the passed future is a virtual future or real future
  returns 'N' if it is virtual future
  returns 'Y' if it is real future
    Note: - Function moved from MEMBER_MAINTENANCE_PKG
Created : 07/31/2017 rxa457 CCN Project....
Changed :
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR     IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    --if the bank account exists in current tables with expiration date as null => it's not real future
    SELECT CASE WHEN COUNT(*) > 0 THEN 'N' ELSE 'Y' END
      INTO V_RETURN_VAL
      FROM BANK_ACCOUNT BA
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND EXPIRATION_DATE IS NULL
       AND EXISTS (SELECT 1
                     FROM BANK_ACCOUNT_FUTURE
                    WHERE BANK_ACCOUNT_NBR = BA.BANK_ACCOUNT_NBR
                      AND EFFECTIVE_DATE   = BA.EFFECTIVE_DATE
                      AND EXPIRATION_DATE IS NULL);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_REAL_FUTURE_BANK_ACCOUNT;

END VIRTUAL_FUTURE_MAINTENANCE_PKG;
