CREATE OR REPLACE PACKAGE BODY BANKING_PICK_LIST_PKG AS

/**********************************************************
	BANKING_PICK_LIST_PKG

	This Package is intended to return values for picklists and 
	picklist screen

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/

PROCEDURE CODE_HEADER_ROWTYPE_SP (
/*******************************************************************************
	CODE_HEADER_ROWTYPE_SP

	This procedure is intended to insert new CODE_HEADER records

created : 11/21/2015 dxv848 CCN Project....
changed : 
*******************************************************************************/

in_table_name           IN      VARCHAR2 
,in_Row_data            IN      VARCHAR2--sys.xmltype
,out_CODE_HEADER_type   OUT CODE_HEADER%ROWTYPE)
IS 
    v_code NUMBER;
    v_errm VARCHAR2(500);

CURSOR table_fields_cur IS
    SELECT column_name
           ,data_length column_size
           ,data_type
      FROM all_tab_columns
     WHERE TABLE_NAME = in_table_name
  ORDER BY column_id ASC;

    v_CODE_HEADER_row        CODE_HEADER%ROWTYPE;
    v_row_value              VARCHAR2(500);
    v_Row_data               sys.xmltype := xmltype(in_Row_data);
BEGIN
    FOR table_fields_rec IN table_fields_cur LOOP
       IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN
            v_row_value := v_Row_data.EXTRACT('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal(); 
            CASE table_fields_rec.column_name
                WHEN 'CODE_HEADER_NAME' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_NAME            :=  v_row_value;
                WHEN 'CODE_HEADER_TYPE' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_TYPE            :=  v_row_value;
                WHEN 'CODE_HEADER_DESCRIPTION' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_DESCRIPTION     :=  v_row_value;
                WHEN 'CODE_HEADER_EXPIRE_FLAG' THEN 
                   v_CODE_HEADER_row.CODE_HEADER_EXPIRE_FLAG      :=  v_row_value;
                WHEN 'CODE_HEADER_EXPIRE_USER' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_EXPIRE_USER     :=  v_row_value;
                WHEN 'CODE_HEADER_EXPIRE_EFF_DATE' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_EXPIRE_EFF_DATE :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                WHEN 'CODE_HEADER_DTL_VAL_SIZE' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_DTL_VAL_SIZE    :=  v_row_value;
                WHEN 'CODE_HEADER_DTL_VAL_DEFAULT' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_DTL_VAL_DEFAULT :=  v_row_value;
                WHEN 'CODE_HEADER_CREATE_USER' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_CREATE_USER     :=  v_row_value;
                WHEN 'CODE_HEADER_EFF_DATE' THEN 
                    v_CODE_HEADER_row.CODE_HEADER_EFF_DATE        :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                ELSE  NULL;
            END CASE;
        END IF;
    END LOOP ;
    out_CODE_HEADER_type  := v_CODE_HEADER_row;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(v_code, 'CODE_HEADER_ROWTYPE_SP, ' || ' ' || 'in_table_name is ' || in_table_name, v_errm);
END CODE_HEADER_ROWTYPE_SP;

PROCEDURE CODE_DETAIL_ROWTYPE_SP (
/*******************************************************************************
	CODE_DETAIL_ROWTYPE_SP

	This procedure is intended to insert new CODE_DETAIL records

created : 11/21/2015 dxv848 CCN Project....
changed : 
*******************************************************************************/

in_table_name           IN      VARCHAR2 
,in_Row_data            IN      VARCHAR2--sys.xmltype
,out_CODE_DETAIL_type   OUT CODE_DETAIL%ROWTYPE)
IS 
    v_code NUMBER;
    v_errm VARCHAR2(500);

CURSOR table_fields_cur IS
    SELECT column_name
           ,data_length column_size
           ,data_type
      FROM all_tab_columns
     WHERE TABLE_NAME = in_table_name
  ORDER BY column_id ASC;

    v_CODE_DETAIL_row        CODE_DETAIL%ROWTYPE;
    v_row_value              VARCHAR2(500);
    v_Row_data               sys.xmltype := xmltype(in_Row_data);
BEGIN
    FOR table_fields_rec IN table_fields_cur LOOP
        IF (v_Row_data.existsNode('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()') = 1) THEN
            v_row_value := v_Row_data.extract('/'|| in_table_name|| '/' || table_fields_rec.column_name ||'/text()').getStringVal();
            CASE table_fields_rec.column_name
                WHEN 'CODE_HEADER_NAME' THEN 
                    v_CODE_DETAIL_row.CODE_HEADER_NAME            :=  v_row_value;
                WHEN 'CODE_HEADER_TYPE' THEN 
                    v_CODE_DETAIL_row.CODE_HEADER_TYPE            :=  v_row_value;
                WHEN 'CODE_DETAIL_VALUE' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_VALUE           :=  v_row_value;
                WHEN 'CODE_DETAIL_DESCRIPTION' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_DESCRIPTION     :=  v_row_value;
                WHEN 'CODE_DETAIL_EXPIRE_FLAG' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_FLAG     :=  v_row_value;
                WHEN 'CODE_DETAIL_EXPIRE_USER' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_USER     :=  v_row_value;
                WHEN 'CODE_DETAIL_EXPIRE_EFF_DATE' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_EXPIRE_EFF_DATE :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                WHEN 'CODE_DETAIL_ID' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_ID              :=  v_row_value;
                WHEN 'CODE_DETAIL_CREATE_USER' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_CREATE_USER     :=  v_row_value;
                WHEN 'CODE_DETAIL_EFF_DATE' THEN 
                    v_CODE_DETAIL_row.CODE_DETAIL_EFF_DATE        :=  TO_DATE(v_row_value,'MM-DD-YYYY');
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP ;
    out_CODE_DETAIL_type  := v_CODE_DETAIL_row;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        v_errm  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(v_code, 'CODE_DETAIL_ROWTYPE_SP, ' || ' ' || 'in_table_name is ' || in_table_name, v_errm);
END CODE_DETAIL_ROWTYPE_SP;

PROCEDURE CODE_HEADER_S_SP (
/**********************************************************
	CODE_HEADER_S_SP

	This procedure is intended to return a ref CURSOR with data from 
	from the CODE_HEADER table.  

created : 11/21/2015 dxv848 CCN Project....
changed : 
**********************************************************/	
in_HEADER_NAME IN CODE_HEADER.CODE_HEADER_NAME%TYPE
,in_HEADER_TYPE IN CODE_HEADER.CODE_HEADER_TYPE%TYPE
,out_CODE_HEADER_CUR OUT REF_CUR_CODE)
IS       
  V_CODE NUMBER;
  v_errm VARCHAR2(500);

BEGIN
	OPEN out_CODE_HEADER_CUR FOR
	    SELECT *
	      FROM CODE_HEADER
	     WHERE CODE_HEADER_NAME = NVL(in_HEADER_NAME, CODE_HEADER_NAME)
	       AND CODE_HEADER_TYPE = NVL(in_HEADER_TYPE, CODE_HEADER_TYPE);

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(v_code, 'CODE_HEADER_S_SP, ' || ' ' || 'in_HEADER_NAME is ' || in_HEADER_NAME, v_errm);	

END CODE_HEADER_S_SP;

PROCEDURE CODE_DETAIL_S_SP (
/**********************************************************
	CODE_DETAIL_S_SP

	This procedure is intended to return a ref CURSOR with data from 
	from the CODE_DETAIL table.  

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/		
in_HEADER_NAME IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
,in_HEADER_TYPE IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
,out_CODE_DETAIL_CUR OUT REF_CUR_CODE)
IS       
  V_CODE NUMBER;
  V_ERRM VARCHAR2(500);
  
BEGIN
    OPEN out_CODE_DETAIL_CUR FOR
    	SELECT * 
          FROM CODE_DETAIL
         WHERE CODE_HEADER_NAME = NVL(in_HEADER_NAME, CODE_HEADER_NAME)
           AND CODE_HEADER_TYPE = NVL(in_HEADER_TYPE, CODE_HEADER_TYPE)
      ORDER BY CODE_DETAIL_ID;

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_S_SP, ' || ' ' || 'in_HEADER_NAME is ' || in_HEADER_NAME, V_ERRM);	 

END CODE_DETAIL_S_SP;

FUNCTION GET_CODE_DETAIL_VALUE_DSCRPTN (
/**********************************************************
	GET_CODE_DETAIL_VALUE_DSCRPTN

	This procedure is intended to return the description for the code detail value
  from CODE_DETAIL table based on the passed parameters.  

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
in_HEADER_NAME  IN CODE_DETAIL.CODE_HEADER_NAME%TYPE,
in_HEADER_TYPE  IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE,
in_DETAIL_VALUE IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE)
RETURN VARCHAR2 
IS       
  V_CODE_DETAIL_DESCRIPTION    CODE_DETAIL.CODE_DETAIL_DESCRIPTION%TYPE;
BEGIN
    SELECT CODE_DETAIL_DESCRIPTION
      INTO V_CODE_DETAIL_DESCRIPTION
      FROM CODE_DETAIL
     WHERE UPPER(CODE_HEADER_NAME)  = UPPER(in_HEADER_NAME)
       AND UPPER(CODE_HEADER_TYPE)  = UPPER(in_HEADER_TYPE)
       AND UPPER(CODE_DETAIL_VALUE) = UPPER(in_DETAIL_VALUE)
  ORDER BY CODE_DETAIL_ID;

      RETURN V_CODE_DETAIL_DESCRIPTION;

EXCEPTION
    WHEN OTHERS THEN 
    RETURN NULL;
END GET_CODE_DETAIL_VALUE_DSCRPTN;

PROCEDURE CODE_DETAIL_DESC_SP (
/**********************************************************
	CODE_DETAIL_DESC_SP

	This procedure is intended to return a ref CURSOR with data from 
	from the CODE_DETAIL table.  

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
in_HEADER_NAME IN CODE_DETAIL.CODE_HEADER_NAME%TYPE
,in_HEADER_TYPE IN CODE_DETAIL.CODE_HEADER_TYPE%TYPE
,in_DETAIL_VALUE IN CODE_DETAIL.CODE_DETAIL_VALUE%TYPE
,out_CODE_DETAIL_CUR OUT REF_CUR_CODE) 
IS       
  V_CODE NUMBER;
  V_ERRM VARCHAR2(500);
  
BEGIN
    OPEN out_CODE_DETAIL_CUR FOR
	    SELECT * 
		  FROM CODE_DETAIL
		 WHERE CODE_HEADER_NAME = NVL(in_HEADER_NAME, CODE_HEADER_NAME)
		   AND CODE_HEADER_TYPE = NVL(in_HEADER_TYPE, CODE_HEADER_TYPE)
		   AND CODE_DETAIL_VALUE = NVL(in_DETAIL_VALUE, CODE_DETAIL_VALUE)
      ORDER BY CODE_DETAIL_ID;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_DESC_SP, ' || ' ' || 'in_HEADER_NAME is ' || in_HEADER_NAME, V_ERRM);	  

END CODE_DETAIL_DESC_SP;

PROCEDURE CODE_DETAIL_INSERT(
/**********************************************************
CODE_DETAIL_INSERT
	This procedure will insert into the CODE_DETAIL table 
<CODE_DETAIL_UI>
  <CODE_DETAIL>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_DETAIL_VALUE>CD</CODE_DETAIL_VALUE> 
      <CODE_DETAIL_DESCRIPTION>TEST</CODE_DETAIL_DESCRIPTION>
      <CODE_DETAIL_EXPIRE_FLAG></CODE_DETAIL_EXPIRE_FLAG>
      <CODE_DETAIL_EXPIRE_USER></CODE_DETAIL_EXPIRE_USER>
	    <CODE_DETAIL_EXPIRE_EFF_DATE></CODE_DETAIL_EXPIRE_EFF_DATE>
	    <CODE_DETAIL_ID>1</CODE_DETAIL_ID>	 
      <CODE_DETAIL_CREATE_USER></CODE_DETAIL_CREATE_USER>
	    <CODE_DETAIL_EFF_DATE></CODE_DETAIL_EFF_DATE>
  </CODE_DETAIL>
  <CODE_DETAIL>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_DETAIL_VALUE>CE</CODE_DETAIL_VALUE> 
      <CODE_DETAIL_DESCRIPTION>TEST</CODE_DETAIL_DESCRIPTION>
      <CODE_DETAIL_EXPIRE_FLAG></CODE_DETAIL_EXPIRE_FLAG>
      <CODE_DETAIL_EXPIRE_USER></CODE_DETAIL_EXPIRE_USER>
	    <CODE_DETAIL_EXPIRE_EFF_DATE></CODE_DETAIL_EXPIRE_EFF_DATE>
	    <CODE_DETAIL_ID>2</CODE_DETAIL_ID>	 
      <CODE_DETAIL_CREATE_USER></CODE_DETAIL_CREATE_USER>
	    <CODE_DETAIL_EFF_DATE></CODE_DETAIL_EFF_DATE>
  </CODE_DETAIL>
  <CODE_DETAIL>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_DETAIL_VALUE>CF</CODE_DETAIL_VALUE> 
      <CODE_DETAIL_DESCRIPTION>TES</CODE_DETAIL_DESCRIPTION>
      <CODE_DETAIL_EXPIRE_FLAG></CODE_DETAIL_EXPIRE_FLAG>
      <CODE_DETAIL_EXPIRE_USER></CODE_DETAIL_EXPIRE_USER>
	    <CODE_DETAIL_EXPIRE_EFF_DATE></CODE_DETAIL_EXPIRE_EFF_DATE>
	    <CODE_DETAIL_ID>3</CODE_DETAIL_ID>	 
      <CODE_DETAIL_CREATE_USER></CODE_DETAIL_CREATE_USER>
	    <CODE_DETAIL_EFF_DATE></CODE_DETAIL_EFF_DATE>
  </CODE_DETAIL>
</CODE_DETAIL_UI>

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_XML                      XMLTYPE := SYS.XMLTYPE(in_XML);
    V_COUNT				             NUMBER := 1;
    V_CONTEXT                  VARCHAR2(100);
    V_CODE_DETAIL_ROW          CODE_DETAIL%ROWTYPE;
    V_CODE_HEADER_DTL_VAL_SIZE CODE_HEADER.CODE_HEADER_DTL_VAL_SIZE%TYPE;
    V_CODE                     NUMBER;
    V_ERRM                     VARCHAR2(500);
    invalid_code_hdr_size_err  EXCEPTION;
BEGIN

    WHILE V_XML.EXISTSNODE('/CODE_DETAIL_UI/CODE_DETAIL' ||  '[' || V_COUNT || ']') = 1 LOOP
        
        V_CONTEXT := 'Building CODE_DETAIL record type';
        CODE_DETAIL_ROWTYPE_SP('CODE_DETAIL',
                               V_XML.EXTRACT('/CODE_DETAIL_UI/CODE_DETAIL' || '[' || V_COUNT || ']').getCLOBVal(),
                               V_CODE_DETAIL_ROW);
        BEGIN
            SELECT CODE_HEADER_DTL_VAL_SIZE
              INTO V_CODE_HEADER_DTL_VAL_SIZE
              FROM CODE_HEADER
             WHERE CODE_HEADER_NAME    = V_CODE_DETAIL_ROW.CODE_HEADER_NAME
               AND CODE_HEADER_TYPE    = V_CODE_DETAIL_ROW.CODE_HEADER_TYPE;
        EXCEPTION 
            WHEN OTHERS THEN
                V_CODE_HEADER_DTL_VAL_SIZE := NULL;
        END;

        IF V_CODE_HEADER_DTL_VAL_SIZE <> LENGTH(V_CODE_DETAIL_ROW.CODE_DETAIL_VALUE) THEN
            RAISE invalid_code_hdr_size_err;
        END IF;

        V_CONTEXT := 'Inserted into code_detail table';
        INSERT INTO CODE_DETAIL  VALUES V_CODE_DETAIL_ROW;

        V_COUNT := V_COUNT + 1;
    END LOOP;   

EXCEPTION
    WHEN invalid_code_hdr_size_err THEN
        ERRPKG.RAISE_ERR(errnums.en_invalid_code_hdr_size_err, 
                         'Size of the code detail value should not exceed the value defined in the code header'); 
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_INSERT, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	  
		
END CODE_DETAIL_INSERT;

PROCEDURE CODE_DETAIL_UPDATE(
/**********************************************************
	CODE_DETAIL_UPDATE
	This procedure will UPDATE into the table CODE_DETAIL
<CODE_DETAIL_UI>
  <CODE_DETAIL>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_DETAIL_VALUE>CE</CODE_DETAIL_VALUE> 
      <CODE_DETAIL_DESCRIPTION>TEST CHANGE</CODE_DETAIL_DESCRIPTION>
      <CODE_DETAIL_EXPIRE_FLAG></CODE_DETAIL_EXPIRE_FLAG>
      <CODE_DETAIL_EXPIRE_USER></CODE_DETAIL_EXPIRE_USER>
	    <CODE_DETAIL_EXPIRE_EFF_DATE></CODE_DETAIL_EXPIRE_EFF_DATE>
	    <CODE_DETAIL_ID>2</CODE_DETAIL_ID>	 
      <CODE_DETAIL_CREATE_USER></CODE_DETAIL_CREATE_USER>
	    <CODE_DETAIL_EFF_DATE></CODE_DETAIL_EFF_DATE>
  </CODE_DETAIL>
  </CODE_DETAIL_UI>
  
created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2) 
IS
    V_XML                 XMLTYPE := SYS.XMLTYPE(in_XML);
    V_COUNT				  NUMBER := 1;
    V_CONTEXT             VARCHAR2(100);
    V_CODE_DETAIL_ROW     CODE_DETAIL%ROWTYPE;
    V_CODE                NUMBER;
    V_ERRM                VARCHAR2(500);
BEGIN

    WHILE V_XML.EXISTSNODE('/CODE_DETAIL_UI/CODE_DETAIL' ||  '[' || V_COUNT || ']') = 1 LOOP
        
        V_CONTEXT := 'Building CODE_DETAIL record type';
        CODE_DETAIL_ROWTYPE_SP('CODE_DETAIL',
                               V_XML.EXTRACT('/CODE_DETAIL_UI/CODE_DETAIL' || '[' || V_COUNT || ']').getCLOBVal(),
                               V_CODE_DETAIL_ROW);

        V_CONTEXT := 'Updating code_detail table';
        UPDATE CODE_DETAIL  SET ROW = V_CODE_DETAIL_ROW
         WHERE CODE_HEADER_NAME   	= V_CODE_DETAIL_ROW.CODE_HEADER_NAME
           AND CODE_HEADER_TYPE    	= V_CODE_DETAIL_ROW.CODE_HEADER_TYPE
           AND CODE_DETAIL_VALUE   	= V_CODE_DETAIL_ROW.CODE_DETAIL_VALUE;

        V_COUNT := V_COUNT + 1;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_UPDATE, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	

END CODE_DETAIL_UPDATE;

PROCEDURE CODE_DETAIL_DELETE(
/**********************************************************
CODE_DETAIL_DELETE
	This procedure will UPDATE THE EXISTING CODES FROM the table CODE_DETAIL
<CODE_DETAIL_UI>
  <CODE_DETAIL>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_DETAIL_VALUE>CE</CODE_DETAIL_VALUE> 
      <CODE_DETAIL_DESCRIPTION>TEST CHANGE</CODE_DETAIL_DESCRIPTION>
      <CODE_DETAIL_EXPIRE_FLAG>Y</CODE_DETAIL_EXPIRE_FLAG>
      <CODE_DETAIL_EXPIRE_USER></CODE_DETAIL_EXPIRE_USER>
	    <CODE_DETAIL_EXPIRE_EFF_DATE></CODE_DETAIL_EXPIRE_EFF_DATE>
	    <CODE_DETAIL_ID>2</CODE_DETAIL_ID>	 
      <CODE_DETAIL_CREATE_USER></CODE_DETAIL_CREATE_USER>
	    <CODE_DETAIL_EFF_DATE></CODE_DETAIL_EFF_DATE>
  </CODE_DETAIL>
  </CODE_DETAIL_UI>

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2) 
IS
    V_CONTEXT     VARCHAR2(100);
    V_CODE        NUMBER;
    V_ERRM        VARCHAR2(500);
BEGIN

    V_CONTEXT := 'UPDATING FROM CODE_DETAIL';
    BANKING_PICK_LIST_PKG.CODE_DETAIL_UPDATE(in_XML);

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_DETAIL_DELETE, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	  
	    
END CODE_DETAIL_DELETE;

PROCEDURE CODE_HEADER_INSERT(
/**********************************************************
	CODE_HEADER_INSERT
	This procedure will insert into the table CODE_HEADER
<CODE_HEADER_UI>
  <CODE_HEADER>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_HEADER_DESCRIPTION>TESTING</CODE_HEADER_DESCRIPTION>
      <CODE_HEADER_EXPIRE_FLAG></CODE_HEADER_EXPIRE_FLAG>
      <CODE_HEADER_EXPIRE_USER></CODE_HEADER_EXPIRE_USER>
	    <CODE_HEADER_EXPIRE_EFF_DATE></CODE_HEADER_EXPIRE_EFF_DATE>
	    <CODE_HEADER_DTL_VAL_SIZE>1</CODE_HEADER_DTL_VAL_SIZE>
      <CODE_HEADER_DTL_VAL_DEFAULT></CODE_HEADER_DTL_VAL_DEFAULT>	
      <CODE_HEADER_CREATE_USER></CODE_HEADER_CREATE_USER>
	    <CODE_HEADER_EFF_DATE></CODE_HEADER_EFF_DATE>
  </CODE_HEADER>
</CODE_HEADER_UI>

created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2) 
IS
    V_CONTEXT                VARCHAR2(100);
    V_CODE_HEADER_ROW        CODE_HEADER%ROWTYPE;
    V_CODE                   NUMBER;
    V_ERRM                   VARCHAR2(500);
BEGIN

    V_CONTEXT := 'Building CODE_HEADER record type';
    CODE_HEADER_ROWTYPE_SP('CODE_HEADER',
                           SYS.XMLTYPE(in_XML).EXTRACT('/CODE_HEADER_UI/CODE_HEADER').getCLOBVal(),
                           V_CODE_HEADER_ROW);
                                
    V_CONTEXT := 'Inserting into CODE_HEADER table';
    INSERT INTO CODE_HEADER VALUES V_CODE_HEADER_ROW;

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_HEADER_INSERT, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	  
	 
END CODE_HEADER_INSERT;

PROCEDURE CODE_HEADER_UPDATE(
/**********************************************************
CODE_HEADER_UPDATE
	
	This procedure will UPDATE into the table CODE_HEADER
<CODE_HEADER_UI>
  <CODE_HEADER>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_HEADER_DESCRIPTION>TESTING</CODE_HEADER_DESCRIPTION>
      <CODE_HEADER_EXPIRE_FLAG>Y</CODE_HEADER_EXPIRE_FLAG>
      <CODE_HEADER_EXPIRE_USER></CODE_HEADER_EXPIRE_USER>
	    <CODE_HEADER_EXPIRE_EFF_DATE></CODE_HEADER_EXPIRE_EFF_DATE>
	    <CODE_HEADER_DTL_VAL_SIZE>2</CODE_HEADER_DTL_VAL_SIZE>
      <CODE_HEADER_DTL_VAL_DEFAULT></CODE_HEADER_DTL_VAL_DEFAULT>	
      <CODE_HEADER_CREATE_USER></CODE_HEADER_CREATE_USER>
	    <CODE_HEADER_EFF_DATE></CODE_HEADER_EFF_DATE>
  </CODE_HEADER>
  </CODE_HEADER_UI>
  
created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2) 
IS
    V_CONTEXT              VARCHAR2(100);
    V_CODE_HEADER_ROW      CODE_HEADER%ROWTYPE;
    V_CODE                 NUMBER;
    V_ERRM                 VARCHAR2(500);
BEGIN

    V_CONTEXT := 'Building CODE_HEADER record type';
    CODE_HEADER_ROWTYPE_SP('CODE_HEADER',
                           SYS.XMLTYPE(in_XML).EXTRACT('/CODE_HEADER_UI/CODE_HEADER').getCLOBVal(),
                           V_CODE_HEADER_ROW);
                                
    V_CONTEXT := 'Updating CODE_HEADER table';
    UPDATE CODE_HEADER 
       SET ROW = V_CODE_HEADER_ROW
     WHERE CODE_HEADER_NAME         = V_CODE_HEADER_ROW.CODE_HEADER_NAME
       AND CODE_HEADER_TYPE         = V_CODE_HEADER_ROW.CODE_HEADER_TYPE
       AND CODE_HEADER_DESCRIPTION  = V_CODE_HEADER_ROW.CODE_HEADER_DESCRIPTION;

EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_HEADER_UPDATE, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	  	

END CODE_HEADER_UPDATE;

PROCEDURE CODE_HEADER_DELETE(
/**********************************************************
		CODE_HEADER_DELETE
	This procedure will update existing code header FROM the table CODE_HEADER
<CODE_HEADER_UI>
  <CODE_HEADER>
      <CODE_HEADER_NAME>SAT</CODE_HEADER_NAME> 
      <CODE_HEADER_TYPE>COD</CODE_HEADER_TYPE> 
      <CODE_HEADER_DESCRIPTION>TESTING</CODE_HEADER_DESCRIPTION>
      <CODE_HEADER_EXPIRE_FLAG>Y</CODE_HEADER_EXPIRE_FLAG>
      <CODE_HEADER_EXPIRE_USER></CODE_HEADER_EXPIRE_USER>
	    <CODE_HEADER_EXPIRE_EFF_DATE></CODE_HEADER_EXPIRE_EFF_DATE>
	    <CODE_HEADER_DTL_VAL_SIZE>2</CODE_HEADER_DTL_VAL_SIZE>
      <CODE_HEADER_DTL_VAL_DEFAULT></CODE_HEADER_DTL_VAL_DEFAULT>	
      <CODE_HEADER_CREATE_USER></CODE_HEADER_CREATE_USER>
	    <CODE_HEADER_EFF_DATE></CODE_HEADER_EFF_DATE>
  </CODE_HEADER>
  </CODE_HEADER_UI>
created : 11/21/2015 dxv848 CCN Project....
changed :
**********************************************************/
    in_XML                VARCHAR2)
IS
    V_CONTEXT     VARCHAR2(100);
    V_CODE        NUMBER;
    V_ERRM        VARCHAR2(500);
BEGIN

    V_CONTEXT := 'UPDATING FROM CODE_HEADER';
    BANKING_PICK_LIST_PKG.CODE_HEADER_UPDATE(in_XML); 
    
EXCEPTION
    WHEN OTHERS THEN 
        v_code  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,500);
        ERRPKG.RAISE_ERR(V_CODE, 'CODE_HEADER_DELETE, ' || ' ' || 'in_XML is ' || in_XML, V_ERRM);	  

END CODE_HEADER_DELETE;

END BANKING_PICK_LIST_PKG;