create or replace PACKAGE BODY BANKING_BATCH_PKG
AS
/**********************************************************
  This Package is a wrapper for all batch processes of banking application

Created : 07/21/2015 axk326/jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE CURRENT_TO_HISTORY_PROCESS
/******************************************************************************
  This procedure is a wrapper to call CURRENT_TO_HISTORY_PKG.PROCESS

Created : 07/21/2015 axk326/jxc517 CCN Project....
Changed :
*******************************************************************************/
IS
BEGIN
   CURRENT_TO_HISTORY_PKG.PROCESS();
END CURRENT_TO_HISTORY_PROCESS;

PROCEDURE FUTURE_TO_CURRENT_PROCESS
/******************************************************************************
  This procedure is a wrapper to call FUTURE_TO_CURRENT_PKG.PROCESS

Created : 07/21/2015 axk326/jxc517 CCN Project....
Changed :
*******************************************************************************/
IS
BEGIN
    FUTURE_TO_CURRENT_PKG.PROCESS();
END FUTURE_TO_CURRENT_PROCESS;

PROCEDURE LOAD_MEMER_BANK_CONCENT_CC(
/*******************************************************************
  This procedure will load the data in MEMBER_BANK_CONCENTRATION_CC table.

Created : sxg151 10/30/2017
Changed : kxm302 11/12/2018 CCN Project Team...
        : Include only current transactions for concentration details ASP-1163
********************************************************************/
IN_LOAD_DATE  IN DATE)
IS
   CURSOR member_bank_cc_cur IS
      SELECT LEAD_STORE_NBR,
             Member_Store_Nbr
        FROM Member_Bank_Cc
        WHERE EFFECTIVE_DATE <= TRUNC(SYSDATE);
BEGIN
DELETE  FROM MEMBER_BANK_CONCENTRATION_CC WHERE LOAD_DATE = IN_LOAD_DATE;

   FOR member_bank_cc_cur_rec IN member_bank_cc_cur LOOP
       INSERT INTO MEMBER_BANK_CONCENTRATION_CC(LEAD_STORE_NBR,
                                                MEMBER_STORE_NBR,
                                                LOAD_DATE )
       VALUES(member_bank_cc_cur_rec.LEAD_STORE_NBR,
              member_bank_cc_cur_rec.MEMBER_STORE_NBR,
              IN_LOAD_DATE );
   END LOOP;
   Commit;
END LOAD_MEMER_BANK_CONCENT_CC;

PROCEDURE BANKING_CONCENTRATION_MONTHLY_RPT (
/**********************************************************
This procedure is intended to generate banking concentration report on monthly basis
and send it to Marcy Lee.

Created : 10/09/2018 pxa852 CCN project Team....
**********************************************************/
    IN_RUN_DATE            IN         DATE)
IS
    CURSOR BANKING_MEMBER IS
    --this query will get all the member details which are in concentration as of passed date
        SELECT A.MEMBER_STORE_NBR,
               (SELECT C.COST_CENTER_NAME
                  FROM COST_CENTER C
                 WHERE C.COST_CENTER_CODE = A.MEMBER_STORE_NBR) MEMBER_STORE_NAME,
               A.LEAD_STORE_NBR,
               (SELECT C.COST_CENTER_NAME
                  FROM COST_CENTER C
                 WHERE C.COST_CENTER_CODE = A.LEAD_STORE_NBR) LEAD_STORE_NAME,
               (SELECT L.LEAD_BANK_ACCOUNT_NBR
                  FROM LEAD_BANK_CC L
                 WHERE L.LEAD_STORE_NBR = A.LEAD_STORE_NBR
                   AND ROWNUM < 2) BANK_ACCOUNT_NBR,
               (SELECT B.BANK_NAME
                  FROM BANK_ACCOUNT B
                 WHERE B.BANK_ACCOUNT_NBR = (SELECT L.LEAD_BANK_ACCOUNT_NBR
                                               FROM LEAD_BANK_CC L
                                              WHERE L.LEAD_STORE_NBR = A.LEAD_STORE_NBR
                                                AND ROWNUM < 2)
               ) BANK_ACCOUNT_NAME
          FROM Member_Bank_Concentration_Cc A
         WHERE A.LOAD_DATE = TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')
        UNION
        --This sql will return all the lead and independant members which are in concentration(active) as of passed date.
        SELECT NULL AS MEMBER_STORE_NBR,
               NULL AS MEMBER_STORE_NAME,
               L.LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER C
                 WHERE C.COST_CENTER_CODE = L.LEAD_STORE_NBR) LEAD_STORE_NAME,
               L.LEAD_BANK_ACCOUNT_NBR AS BANK_ACCOUNT_NBR,
               (SELECT B.BANK_NAME
                  FROM BANK_ACCOUNT B
                 WHERE B.BANK_ACCOUNT_NBR = L.LEAD_BANK_ACCOUNT_NBR
                   AND ROWNUM < 2) BANK_ACCOUNT_NAME
          FROM LEAD_BANK_CC L
         WHERE L.EFFECTIVE_DATE <= TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')-1
        UNION
        --This sql returns all lead and independant details from history which are in concentration(active) as of passed date
        --If lead/independant is expired after the passed date (as of date/run date) and effective date is before the passed date,
        -- then that means the lead/indepedant is active as of that date.
        SELECT NULL AS MEMBER_STORE_NBR,
               NULL AS MEMBER_STORE_NAME,
               H.LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER C
                 WHERE C.COST_CENTER_CODE = H.LEAD_STORE_NBR) LEAD_STORE_NAME,
               H.LEAD_BANK_ACCOUNT_NBR AS BANK_ACCOUNT_NBR,
               (SELECT B.BANK_NAME
                  FROM BANK_ACCOUNT B
                 WHERE B.BANK_ACCOUNT_NBR = H.LEAD_BANK_ACCOUNT_NBR
                   AND ROWNUM < 2) BANK_ACCOUNT_NAME
          FROM LEAD_BANK_CC_HIST H
         WHERE H.EFFECTIVE_DATE <= TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')-1
           AND H.EXPIRATION_DATE > TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')-1
        UNION
        --This sql returns active lead details of members if we missed any in the first sql.
        SELECT NULL AS MEMBER_STORE_NBR,
               NULL AS MEMBER_STORE_NAME,
               A.LEAD_STORE_NBR,
               (SELECT C.COST_CENTER_NAME
                  FROM COST_CENTER C
                 WHERE C.COST_CENTER_CODE = A.LEAD_STORE_NBR) LEAD_STORE_NAME,
               STR_BNK_DPST_DLY_RCNCL_PROCESS.GET_BNK_ACCNT_NBR_FOR_CC(SUBSTR(A.LEAD_STORE_NBR, 3), TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')-1) BANK_ACCOUNT_NBR,
               (SELECT B.BANK_NAME
                  FROM BANK_ACCOUNT B
                 WHERE B.BANK_ACCOUNT_NBR = STR_BNK_DPST_DLY_RCNCL_PROCESS.GET_BNK_ACCNT_NBR_FOR_CC(SUBSTR(A.LEAD_STORE_NBR, 3), TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')-1)
                   AND ROWNUM < 2) BANK_ACCOUNT_NAME
          FROM (SELECT DISTINCT LEAD_STORE_NBR
                  FROM Member_Bank_Concentration_Cc
                 WHERE LOAD_DATE = TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')) A;

    V_CLOB_FOR_EMAIL            CLOB;
    V_CLOB                      CLOB;
BEGIN
    V_CLOB_FOR_EMAIL := 'MEMBER_STORE_NBR,MEMBER_STORE_NAME,LEAD_STORE_NBR,LEAD_STORE_NAME,BANK_ACCOUNT_NBR,BANK_ACCOUNT_NAME';
    FOR rec IN BANKING_MEMBER LOOP
        V_CLOB           :=  '="' || REC.MEMBER_STORE_NBR   || '",' ||
                             '"'  || REC.MEMBER_STORE_NAME  || '",' ||
                             '="' || REC.LEAD_STORE_NBR     || '",' ||
                             '"'  || REC.LEAD_STORE_NAME    || '",' ||
                             '="' || REC.BANK_ACCOUNT_NBR   || '",' ||
                             '"'  || REC.BANK_ACCOUNT_NAME  || '"' ;
        V_CLOB_FOR_EMAIL := V_CLOB_FOR_EMAIL || CHR(10) || V_CLOB;
    END LOOP;
  --sending mail only if the clob is not empty.
    IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() THEN
        MAIL_PKG.SEND_MAIL('BANKING_MEMBER_CONCENTRATION_RPT'||TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM'),NULL, NULL, V_CLOB_FOR_EMAIL);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        -- Logging of error
        errpkg.raise_err(SQLCODE, substr(SQLERRM,1, 500) ||'  BANKING_MEMBER_CONCENTRATION_RPT '  || ' errors found');
END BANKING_CONCENTRATION_MONTHLY_RPT;
END BANKING_BATCH_PKG;