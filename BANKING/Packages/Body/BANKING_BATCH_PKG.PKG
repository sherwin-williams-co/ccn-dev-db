create or replace PACKAGE BODY BANKING_BATCH_PKG
AS
/**********************************************************
  This Package is a wrapper for all batch processes of banking application

Created : 07/21/2015 axk326/jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE CURRENT_TO_HISTORY_PROCESS
/******************************************************************************
  This procedure is a wrapper to call CURRENT_TO_HISTORY_PKG.PROCESS

Created : 07/21/2015 axk326/jxc517 CCN Project....
Changed :
*******************************************************************************/
IS
BEGIN
   CURRENT_TO_HISTORY_PKG.PROCESS();
END CURRENT_TO_HISTORY_PROCESS;

PROCEDURE FUTURE_TO_CURRENT_PROCESS
/******************************************************************************
  This procedure is a wrapper to call FUTURE_TO_CURRENT_PKG.PROCESS

Created : 07/21/2015 axk326/jxc517 CCN Project....
Changed :
*******************************************************************************/
IS
BEGIN
    FUTURE_TO_CURRENT_PKG.PROCESS();
END FUTURE_TO_CURRENT_PROCESS;

PROCEDURE LOAD_MEMER_BANK_CONCENT_CC(
/*******************************************************************
  This procedure will load the data in MEMBER_BANK_CONCENTRATION_CC table.

Created : sxg151 10/30/2017
Changed : kxm302 11/12/2018 CCN Project Team...
        : Include only current transactions for concentration details ASP-1163
********************************************************************/
IN_LOAD_DATE  IN DATE)
IS
   CURSOR member_bank_cc_cur IS
      SELECT LEAD_STORE_NBR,
             Member_Store_Nbr
        FROM Member_Bank_Cc
        WHERE EFFECTIVE_DATE <= TRUNC(SYSDATE);
BEGIN
DELETE  FROM MEMBER_BANK_CONCENTRATION_CC WHERE LOAD_DATE = IN_LOAD_DATE;

   FOR member_bank_cc_cur_rec IN member_bank_cc_cur LOOP
       INSERT INTO MEMBER_BANK_CONCENTRATION_CC(LEAD_STORE_NBR,
                                                MEMBER_STORE_NBR,
                                                LOAD_DATE )
       VALUES(member_bank_cc_cur_rec.LEAD_STORE_NBR,
              member_bank_cc_cur_rec.MEMBER_STORE_NBR,
              IN_LOAD_DATE );
   END LOOP;
   Commit;
END LOAD_MEMER_BANK_CONCENT_CC;

FUNCTION IS_LEAD_ON_DATE_PASSED_FNC(
/***********************************************************
This function will check if the cost center is lead or not in the lead_bank_cc table
on the date passed
Created : 11/08/2018 pxa852 CCN Project Team....
Changed :
************************************************************/
    IN_COST_CENTER           IN     VARCHAR2,
    IN_EFFECTIVE_DATE        IN     DATE) RETURN VARCHAR2
IS
   V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN

     SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
        INTO V_RETURN_VAL
        FROM LEAD_BANK_CC
      WHERE LEAD_STORE_NBR = IN_COST_CENTER
        AND BANK_TYPE_CODE IN ('L','I')
        AND EFFECTIVE_DATE <= IN_EFFECTIVE_DATE;

    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_LEAD_ON_DATE_PASSED_FNC;

FUNCTION IS_LEAD_IN_HIST_ON_DATE_PASSED_FNC(
/***********************************************************
This function will check if the cost center is lead or not in the history table
on the date passed
Created : 11/08/2018 pxa852 CCN Project Team....
Changed :
************************************************************/
    IN_COST_CENTER           IN     VARCHAR2,
    IN_EFFECTIVE_DATE        IN     DATE) RETURN VARCHAR2
IS
   V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN

     SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
        INTO V_RETURN_VAL
        FROM LEAD_BANK_CC_HIST
      WHERE LEAD_STORE_NBR = IN_COST_CENTER
        AND BANK_TYPE_CODE IN ('L','I')
        AND EFFECTIVE_DATE <= IN_EFFECTIVE_DATE;

    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_LEAD_IN_HIST_ON_DATE_PASSED_FNC;

PROCEDURE GENERATE_LEAD_MEMBER_EMAIL_CLOB(
/*******************************************************************
This procedure will prepare the clob to write it to a file.

Created : pxa852 11/08/2018
Changed :
********************************************************************/
IN_MEMBER_STORE_NBR  IN VARCHAR2,
IN_MEMBER_STORE_NAME IN VARCHAR2,
IN_LEAD_STORE_NBR    IN VARCHAR2,
IN_LEAD_STORE_NAME   IN VARCHAR2,
IN_BANK_ACCOUNT_NBR  IN VARCHAR2,
IN_BANK_ACCOUNT_NAME IN VARCHAR2,
OUT_CLOB_FOR_EMAIL    OUT CLOB)
IS
BEGIN
OUT_CLOB_FOR_EMAIL  := '="' || IN_MEMBER_STORE_NBR   || '",' ||
                       '"'  || IN_MEMBER_STORE_NAME  || '",' ||
                       '="' || IN_LEAD_STORE_NBR     || '",' ||
                       '"'  || IN_LEAD_STORE_NAME    || '",' ||
                       '="' || IN_BANK_ACCOUNT_NBR   || '",' ||
                       '"'  || IN_BANK_ACCOUNT_NAME  || '"' ;
END GENERATE_LEAD_MEMBER_EMAIL_CLOB;

PROCEDURE BANKING_CONCENTRATION_MONTHLY_RPT (
/**********************************************************
This procedure is intended to generate banking concentration report on monthly basis
and send it to Marcy Lee.

Created : 10/09/2018 pxa852 CCN project Team....
**********************************************************/
    IN_RUN_DATE            IN         DATE)
IS
    CURSOR BANKING_MEMBER IS
       SELECT M.MEMBER_STORE_NBR,
              (SELECT C.COST_CENTER_NAME
                 FROM COST_CENTER C
                WHERE C.COST_CENTER_CODE = M.MEMBER_STORE_NBR) MEMBER_STORE_NAME,
              M.LEAD_STORE_NBR,
              (SELECT C.COST_CENTER_NAME
                 FROM COST_CENTER C
                WHERE C.COST_CENTER_CODE = M.LEAD_STORE_NBR) LEAD_STORE_NAME,
              (SELECT L.LEAD_BANK_ACCOUNT_NBR
                 FROM LEAD_BANK_CC L
                WHERE L.LEAD_STORE_NBR = M.LEAD_STORE_NBR
                  AND ROWNUM < 2) BANK_ACCOUNT_NBR,
              (SELECT B.BANK_NAME
                 FROM BANK_ACCOUNT B
                WHERE B.BANK_ACCOUNT_NBR = (SELECT L.LEAD_BANK_ACCOUNT_NBR
                                              FROM LEAD_BANK_CC L
                                             WHERE L.LEAD_STORE_NBR = M.LEAD_STORE_NBR
                                               AND ROWNUM < 2)
              ) BANK_ACCOUNT_NAME
         FROM Member_Bank_Concentration_Cc M
        WHERE M.LOAD_DATE = TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM') ORDER BY 1;

   CURSOR LEAD_OR_INDEPENDANT IS
       SELECT L.LEAD_STORE_NBR,
              (SELECT C.COST_CENTER_NAME
                 FROM COST_CENTER C
                WHERE C.COST_CENTER_CODE = L.LEAD_STORE_NBR) LEAD_STORE_NAME,
              L.LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR ,
              (SELECT B.BANK_NAME
                 FROM BANK_ACCOUNT B
                WHERE B.BANK_ACCOUNT_NBR =  L.LEAD_BANK_ACCOUNT_NBR
              ) BANK_ACCOUNT_NAME
         FROM LEAD_BANK_CC L
        WHERE L.EXPIRATION_DATE IS NULL
          AND L.BANK_TYPE_CODE IN ('L','I');

    V_CLOB_FOR_EMAIL            CLOB;
    OUT_CLOB_FOR_EMAIL          CLOB;
    V_CLOB_FOR_EMAIL1           CLOB;
    V_LEAD_BANK_HIST_REC        LEAD_BANK_CC_HIST%ROWTYPE;
    V_LEAD_STORE_NAME           COST_CENTER.COST_CENTER_NAME%TYPE;
    V_BANK_ACCOUNT_NAME         BANK_ACCOUNT.BANK_NAME%TYPE;
BEGIN
    FOR rec IN BANKING_MEMBER LOOP
        GENERATE_LEAD_MEMBER_EMAIL_CLOB(rec.MEMBER_STORE_NBR,rec.MEMBER_STORE_NAME,rec.LEAD_STORE_NBR,rec.LEAD_STORE_NAME,
                                        rec.BANK_ACCOUNT_NBR, rec.BANK_ACCOUNT_NAME, OUT_CLOB_FOR_EMAIL);
        V_CLOB_FOR_EMAIL  := OUT_CLOB_FOR_EMAIL || CHR(10) || V_CLOB_FOR_EMAIL ;
    END LOOP;

    FOR rec1 IN LEAD_OR_INDEPENDANT LOOP
        IF IS_LEAD_ON_DATE_PASSED_FNC(rec1.LEAD_STORE_NBR,TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')) = 'Y' THEN
           GENERATE_LEAD_MEMBER_EMAIL_CLOB(NULL,NULL, rec1.LEAD_STORE_NBR,rec1.LEAD_STORE_NAME,
                                            rec1.BANK_ACCOUNT_NBR, rec1.BANK_ACCOUNT_NAME, OUT_CLOB_FOR_EMAIL);
           V_CLOB_FOR_EMAIL1  := OUT_CLOB_FOR_EMAIL || CHR(10) || V_CLOB_FOR_EMAIL1 ;
        ELSE
           IF IS_LEAD_IN_HIST_ON_DATE_PASSED_FNC(rec1.LEAD_STORE_NBR,TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM')) = 'Y' THEN
              SELECT H.*
                     INTO V_LEAD_BANK_HIST_REC
                FROM LEAD_BANK_CC_HIST H
               WHERE H.LEAD_STORE_NBR = rec1.LEAD_STORE_NBR
                 AND H.BANK_TYPE_CODE IN ('L','I')
                 AND H.EFFECTIVE_DATE IN (SELECT MAX(EFFECTIVE_DATE)
                                            FROM LEAD_BANK_CC_HIST
                                           WHERE LEAD_STORE_NBR=rec1.LEAD_STORE_NBR
                                             AND EFFECTIVE_DATE <= TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM'));
              BEGIN
                  SELECT B.BANK_NAME
                         INTO V_BANK_ACCOUNT_NAME
                    FROM BANK_ACCOUNT B
                   WHERE B.BANK_ACCOUNT_NBR =  V_LEAD_BANK_HIST_REC.LEAD_BANK_ACCOUNT_NBR;
              EXCEPTION
                  WHEN OTHERS THEN
                      NULL;
              END;

                GENERATE_LEAD_MEMBER_EMAIL_CLOB(NULL,NULL,rec1.LEAD_STORE_NBR,rec1.LEAD_STORE_NAME,
                                                V_LEAD_BANK_HIST_REC.LEAD_BANK_ACCOUNT_NBR, V_BANK_ACCOUNT_NAME, OUT_CLOB_FOR_EMAIL);
                V_CLOB_FOR_EMAIL1  := OUT_CLOB_FOR_EMAIL || CHR(10) || V_CLOB_FOR_EMAIL1 ;
           END IF;
        END IF;
    END LOOP;
    --sending mail only if the clob is not empty.
    IF V_CLOB_FOR_EMAIL <> EMPTY_CLOB() OR V_CLOB_FOR_EMAIL1 <> EMPTY_CLOB() THEN
        V_CLOB_FOR_EMAIL := 'MEMBER_STORE_NBR,MEMBER_STORE_NAME,LEAD_STORE_NBR,LEAD_STORE_NAME,BANK_ACCOUNT_NBR,BANK_ACCOUNT_NAME' || CHR(10) || V_CLOB_FOR_EMAIL || V_CLOB_FOR_EMAIL1;
        MAIL_PKG.SEND_MAIL('BANKING_MEMBER_CONCENTRATION_RPT'||TRUNC(NVL(IN_RUN_DATE, SYSDATE),'MM'),NULL, NULL, V_CLOB_FOR_EMAIL);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        -- Logging of error
        errpkg.raise_err(SQLCODE, substr(SQLERRM,1, 500) ||'  BANKING_MEMBER_CONCENTRATION_RPT '  || ' errors found');
END BANKING_CONCENTRATION_MONTHLY_RPT;
END BANKING_BATCH_PKG;