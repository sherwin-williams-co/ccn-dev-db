CREATE OR REPLACE PACKAGE BODY POS_BANKING_DAILY_LOAD
AS
/**************************************************************** 
This package is for loading data from POS to CCN for
Banking Gift Card and deposit ticket/bags.

Created : 06/15/2017 gxg192 CCN Project....
Changed : 
*****************************************************************/
C_CHAR                              VARCHAR2(1) := 'X';
C_SCHEMA                            VARCHAR2(10) := 'BANKING';
C_SEPARATOR                         VARCHAR2(1) := ',';
C_FILE_HEADER                       CONSTANT VARCHAR2(1000) :='********************************BANKING DEPOSIT RECONCILE REPORT************************************';
C_FILE_RECONCILE_LEGACY             CONSTANT VARCHAR2(1000) :='********************************MISMATCHED MAINFRAME AND POS DATA*************************';
C_FILE_LEGACY_ORPHAN_HEADER         CONSTANT VARCHAR2(1000) :='*************************************MAINFRAME DATA MISSING IN POS*****************************************';
C_FILE_SUMMARY_HEADER               CONSTANT VARCHAR2(1000) :='******************************************SUMMARY REPORT*******************************************';   
C_MISMATCH_COMMENTS                 CONSTANT VARCHAR2(1000) :='MISMATCHED MAINFRAME AND POS DATA';
C_MISSING_COMMENTS                  CONSTANT VARCHAR2(1000) :='MAINFRAME DATA MISSING IN POS';
C_MISMATCH_IND                      CONSTANT VARCHAR2(3)    :='***';  
G_UNMATCHED_COUNT                   NUMBER :=0;
G_ORPHAN_COUNT                      NUMBER :=0;
G_DB_DIRECTORY                      VARCHAR2(100);
G_REC1                              CLOB;
G_REC2                              CLOB;
G_REPORT                            CLOB; 
G_SUMMARY                           CLOB;
G_MISMATCH_COLUMN_NAME              VARCHAR2(4000);

G_BATCH_NUMBER  BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
G_TRANS_STATUS  BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';

G_CONTEXT       VARCHAR2(200);
G_START_TIME    NUMBER;

FUNCTION GET_UAR_TRANS_CODE(
/**************************************************************************************
GET_UAR_TRANS_CODE

This FUNCTION will derive the UAT TRANS CODE based on Accum id present in CCN_ACCUMS table
in POS.
Example
    UAR_TRANS_CODE	Tran ID	    SMIS2 posAccum              posAccum
    101102	        10	        no 76-->default to 11       ac-->convert to 02
    107601	        10	        76                          ad-->convert to 01

    IF 76 is not present, then 11
    IF ac is present,     then 02

Created : 05/19/2017 gxg192 CCN Project....
Changed :
**************************************************************************************/
            IN_TRANID        IN UAR_GIFT_CARD_POS_TRANS.TRANSACTION_TYPE%TYPE,
            IN_RLS_RUN_CYCLE IN PNP_CCN_HEADERS.RLS_RUN_CYCLE%TYPE,
            IN_TRAN_GUID     IN PNP_CCN_HEADERS.TRAN_GUID%TYPE)
RETURN UAR_GIFT_CARD_POS_TRANS.UAR_TRAN_CODE%TYPE
IS
    V_UAR_TRAN_CODE UAR_GIFT_CARD_POS_TRANS.UAR_TRAN_CODE%TYPE;
    CNT_ACCUM_ID_76 NUMBER;
    CNT_ACCUM_ID_AC NUMBER;
    CNT_ACCUM_ID_AD NUMBER;
BEGIN
    SELECT IN_TRANID||
           DECODE(COUNT(DECODE(accum_id,'76',1,NULL)),0,'11','76') ||
           DECODE(COUNT(DECODE(accum_id,'ac',1,NULL)),0,'01','02') uat_tran_id
      INTO V_UAR_TRAN_CODE
      FROM PNP_CCN_ACCUMS
     WHERE TRAN_GUID = IN_TRAN_GUID
       AND RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;

    RETURN V_UAR_TRAN_CODE;

EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                 'POS_BANKING_DAILY_LOAD.GET_UAR_TRANS_CODE',
                                  SQLERRM,
                                  SUBSTR(IN_TRAN_GUID,-16,16),
                                  IN_TRANID,
                                 'UAR_GIFT_CARD_POS_TRANS');
       V_UAR_TRAN_CODE := NULL;
       RETURN V_UAR_TRAN_CODE;
END GET_UAR_TRANS_CODE;

PROCEDURE LOAD_POS_CCN_LOAD_STATUS(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POS_CCN_LOAD_STATUS" with data extracted from new interface tables
Created : 06/12/2017 gxg192 CCN Project....
Changed :
*****************************************************************************/
IN_DATE     IN DATE)
AS

BEGIN

   INSERT INTO POS_CCN_LOAD_STATUS
   SELECT CH.*,
          IN_DATE LOAD_DATE
     FROM PNP_CCN_LOAD_STATUS CH
    WHERE TRUNC(CH.START_TS) > (SELECT MAX(TRUNC(END_TS))
                                  FROM POS_CCN_LOAD_STATUS)
      AND STATUS_CODE = 'C';

   COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_POS_CCN_LOAD_STATUS',
                                    SQLERRM,
                                    '000000',
                                    '0000000',
                                    'POS_CCN_LOAD_STATUS');
        RAISE;

END LOAD_POS_CCN_LOAD_STATUS;

PROCEDURE UAR_GC_POS_TRANS_LOAD_SP(
/*******************************************************************************
This procedure is used to load the UAR Gift Card POS Transaction table
"UAR_GIFT_CARD_POS_TRANS" with data extracted from new interface tables
created : 10/28/2016 axk326 CCN Project....
changed : 12/08/2016 vxv336 added STATUS filter in cursor query
        : 05/19/2017 gxg192 Changes for fetching UAR_TRAN_CODE
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR GC_CUR IS
 SELECT CH.RLS_RUN_CYCLE,
        CH.TRAN_GUID,
        CH.TRANID TRANSACTION_TYPE,
        CGC.GIFTCARDNBR GIFT_CARD_NBR,
        CBS.DIVISION DIVISION_NBR,
        CBS.AREA AREA_NBR,
        CBS.DISTRICT DISTRICT_NBR,
        CH.STORE_NO STORE_NBR,
        CH.BILLST STORE_STATE_CD,
        CGC.AUTHAMT TRANS_AMOUNT,
        TO_CHAR(TO_DATE(CH.TRAN_DATE), 'mmddyyyy') TRANS_DATE,
        REPLACE(SUBSTR(CH.TRAN_TIMESTAMP, 13, 5), ':', '') TRANS_TIME, 
        CH.TERMNBR TERM_NBR,
        CH.TRANNBR TRANS_NBR,
        CH.EMP_NO EMPLOYEE_NBR
   FROM PNP_CCN_HEADERS CH,
        PNP_CCN_BATCH_SUMMARY CBS,
        PNP_CCN_GIFT_CARD_LOG CGC
  WHERE CGC.RLS_RUN_CYCLE IN (SELECT RLS_RUN_CYCLE
                                FROM POS_CCN_LOAD_STATUS
                               WHERE LOAD_DATE = IN_DATE)
    AND UPPER(CGC.ACTION) IN ('APPROVED', 'MANUAL')                               
    AND CH.RLS_RUN_CYCLE = CGC.RLS_RUN_CYCLE 
    AND CH.TRAN_GUID = CGC.TRAN_GUID
    AND CH.BATCH_GUID = CBS.BATCH_GUID;

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW      UAR_GIFT_CARD_POS_TRANS%ROWTYPE;

BEGIN

     DELETE UAR_GIFT_CARD_POS_TRANS
      WHERE LOAD_DATE = IN_DATE;

     FOR REC IN GC_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.TRANSACTION_TYPE    := rec.TRANSACTION_TYPE;
           V_TEMP_ROW.UAR_TRAN_CODE       := GET_UAR_TRANS_CODE(rec.TRANSACTION_TYPE, rec.RLS_RUN_CYCLE, rec.TRAN_GUID);
           V_TEMP_ROW.GIFT_CARD_NBR       := rec.GIFT_CARD_NBR;   
           V_TEMP_ROW.DIVISION_NBR        := rec.DIVISION_NBR;    
           V_TEMP_ROW.DISTRICT_NBR        := rec.DISTRICT_NBR;    
           V_TEMP_ROW.AREA_NBR            := rec.AREA_NBR;        
           V_TEMP_ROW.STORE_NBR           := rec.STORE_NBR;       
           V_TEMP_ROW.STORE_STATE_CD      := rec.STORE_STATE_CD;  
           V_TEMP_ROW.TRANS_AMOUNT        := STORDRFT.SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(rec.TRANS_AMOUNT, '0', '14', '2');    
           V_TEMP_ROW.TRANS_DATE          := rec.TRANS_DATE;      
           V_TEMP_ROW.TRANS_TIME          := STORDRFT.SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(rec.TRANS_TIME, '0', '8');      
           V_TEMP_ROW.TERM_NBR            := STORDRFT.SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(rec.TERM_NBR, '0', '5');       
           V_TEMP_ROW.TRANS_NBR           := rec.TRANS_NBR;       
           V_TEMP_ROW.EMPLOYEE_NBR        := STORDRFT.SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(rec.EMPLOYEE_NBR, '0', '2');
           V_TEMP_ROW.RLS_RUN_CYCLE       := rec.RLS_RUN_CYCLE;
           V_TEMP_ROW.LOAD_DATE           := IN_DATE;

           INSERT INTO UAR_GIFT_CARD_POS_TRANS VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'POS_BANKING_DAILY_LOAD.UAR_GC_POS_TRANS_LOAD_SP',
                                           SQLERRM,
                                           '000000', 
                                           '0000000',  
                                           'UAR_GIFT_CARD_POS_TRANS');
                RAISE;
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                  'POS_BANKING_DAILY_LOAD.UAR_GC_POS_TRANS_LOAD_SP',
                                  SQLERRM,
                                  '000000', 
                                  '0000000',  
                                  '0000000');
       ROLLBACK;
       RAISE;
END UAR_GC_POS_TRANS_LOAD_SP;

PROCEDURE GENERATE_GIFT_CARD_TRANS_FILE (
/******************************************************************************
This procedure will generate UAR GIFT CARD TRANSACTION FILE [SRA30060] file

Created : 10/28/2016 vxv336/gxg192 CCN Project
Changed : 06/14/2017 gxg192 Changes to add header, trailor and summary record
*******************************************************************************/
IN_DATE            IN         DATE)
IS
  CURSOR main_cur IS
      SELECT *
        FROM UAR_GIFT_CARD_POS_TRANS
       WHERE LOAD_DATE = IN_DATE;
      
  PATH                         VARCHAR2(50) := 'BANKING_LOAD_FILES';
  UAR_GIFT_CARD_TRANS_FL_NM    VARCHAR2(50) := 'SMIS1.UAR.POSGFTCD_' ||
                                       TO_CHAR(IN_DATE,'DDMONRRRR') || '_' ||
                                       TO_CHAR(SYSDATE,'HH24MISS');
  UAR_GIFT_CARD_TRANS_FL       UTL_FILE.FILE_TYPE;
  V_OUT_CLOB                   CLOB;

  V_RECORD_COUNT               NUMBER := 0;
  V_TOTAL_TRANS_AMOUNT         NUMBER := 0;

BEGIN
  UAR_GIFT_CARD_TRANS_FL := UTL_FILE.FOPEN (PATH
                                         ,UAR_GIFT_CARD_TRANS_FL_NM
                                         ,'W' --BINARY
                                         ,32767);
  --Create header record
  --Example *00P0614201700335842PROD

  V_OUT_CLOB := '*00P' || TO_CHAR(IN_DATE,'MMDDRRRR') ||SUBSTR(TO_CHAR(SYSTIMESTAMP,'HHMISSFF'),1,8)||'PROD'|| CHR(13);
  UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);

  FOR rec IN main_cur LOOP
      V_OUT_CLOB := '*' || rec.TRANSACTION_TYPE
                        || rec.UAR_TRAN_CODE
                        || rec.GIFT_CARD_NBR
                        || CHR(32)|| CHR(32)|| CHR(32)|| CHR(32)
                        || rec.DIVISION_NBR
                        || rec.DISTRICT_NBR
                        || rec.AREA_NBR
                        || CHR(32)|| CHR(32)
                        || rec.STORE_NBR
                        || rec.STORE_STATE_CD
                        || rec.TRANS_AMOUNT
                        || rec.TRANS_DATE
                        || rec.TRANS_TIME
                        || rec.TERM_NBR
                        || rec.TRANS_NBR
                        || rec.EMPLOYEE_NBR
                        || CHR(13);
                        
      IF V_OUT_CLOB <> EMPTY_CLOB() THEN
          UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);
          V_OUT_CLOB := NULL;
          V_RECORD_COUNT := V_RECORD_COUNT + 1;
          V_TOTAL_TRANS_AMOUNT := V_TOTAL_TRANS_AMOUNT + TO_NUMBER(rec.TRANS_AMOUNT);
      END IF;
  END LOOP;

  --Create trailor record
  --Example *980100000000033100000001881325
  V_OUT_CLOB := '*9801'
                || LPAD(V_RECORD_COUNT,12,'0')
                || LPAD(V_TOTAL_TRANS_AMOUNT,14,'0')
                || CHR(13);
  UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);

  --Create summary record
  --Example *990100000000033300000001881325
  V_OUT_CLOB := '*9901'
                || LPAD(V_RECORD_COUNT+2,12,'0')
                || LPAD(V_TOTAL_TRANS_AMOUNT,14,'0');
  UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);

  UTL_FILE.FCLOSE(UAR_GIFT_CARD_TRANS_FL);

EXCEPTION
   WHEN OTHERS THEN
      IF UTL_FILE.IS_OPEN(UAR_GIFT_CARD_TRANS_FL) THEN
         UTL_FILE.FCLOSE(UAR_GIFT_CARD_TRANS_FL);
      END IF;
      ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                  'POS_BANKING_DAILY_LOAD.GENERATE_GIFT_CARD_TRANS_FILE',
                                  SQLERRM,
                                  '000000', 
                                  '0000000',  
                                  '0000000');
       
      RAISE;
END GENERATE_GIFT_CARD_TRANS_FILE;

PROCEDURE GIFT_CARD_DATA_LOAD_SP(
/***********************************************************************
This Procedure is a wrapper for the gift card related data to be loaded
from POS Interface tables

Created : 10/26/2016 AXK326 CCN Project....
Changed : 12/06/2016 vxv336 Removed CONTROL and DETAIL file generation
        : 06/12/2017 gxg192 Added call to procedure load_pos_ccn_load_status
***********************************************************************/
IN_DATE DATE
) 
AS
    V_CLOB          CLOB;

BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('GIFT_CARD_DATA_LOAD', G_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
   
-- STEP 1
-- Call to LOAD_POS_CCN_LOAD_STATUS to load Records from PNP.CCN_load_status into pos ccn load status table
   G_START_TIME := DBMS_UTILITY.GET_TIME;
   G_CONTEXT := 'LOAD_POS_CCN_LOAD_STATUS';
   LOAD_POS_CCN_LOAD_STATUS(IN_DATE);
   DBMS_OUTPUT.PUT_LINE(G_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - G_START_TIME)/100 || ' Seconds');

-- STEP 2
-- Call to perform DailyLoad from POS new interface tables to UAR_GIFT_CARD_POS_TRANS table
   G_START_TIME := DBMS_UTILITY.GET_TIME;
   G_CONTEXT := 'UAR_GC_POS_TRANS_LOAD_SP';
   UAR_GC_POS_TRANS_LOAD_SP(IN_DATE);    
   DBMS_OUTPUT.PUT_LINE(G_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - G_START_TIME)/100 || ' Seconds');

-- STEP 3
-- Call to Generate UAR GIFT CARD TRANSACTION FILE
   G_START_TIME := DBMS_UTILITY.GET_TIME;
   G_CONTEXT := 'GENERATE_GIFT_CARD_TRANS_FILE';
   GENERATE_GIFT_CARD_TRANS_FILE(IN_DATE);
   DBMS_OUTPUT.PUT_LINE(G_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - G_START_TIME)/100 || ' Seconds');
   
   CCN_BATCH_PKG.UPDATE_BATCH_JOB('GIFT_CARD_DATA_LOAD', G_BATCH_NUMBER, G_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
   
EXCEPTION
   WHEN OTHERS THEN
      ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                 'POS_BANKING_DAILY_LOAD.GIFT_CARD_DATA_LOAD_SP',
                                  SQLERRM,
                                 '000000', 
                                 '0000000',  
                                 '0000000');
      RAISE;
END GIFT_CARD_DATA_LOAD_SP;

PROCEDURE LOAD_CCN_BATCH_SUMMARY(
/****************************************************************************
This procedure is used to load the CCN_BATCH_SUMMARY new interface table
from PNP schema to banking schema
created : 01/17/2017 AXK326 CCN Project....
changed : 06/15/2017 gxg192 Changes to remove execute immediate.
*****************************************************************************/
IN_DATE    DATE)
AS

CURSOR SD_CUR IS
    SELECT PCBS.*
      FROM PNP_CCN_BATCH_SUMMARY PCBS
     WHERE PCBS.RLS_RUN_CYCLE = (SELECT MAX(PCH.RLS_RUN_CYCLE)
                                   FROM PNP_CCN_HEADERS PCH);

   V_COUNT     NUMBER := 0;
   V_TCOUNT    NUMBER := 0;
   V_TEMP_ROW  CCN_BATCH_SUMMARY%ROWTYPE;

BEGIN
     DELETE FROM CCN_BATCH_SUMMARY WHERE LOAD_DATE = TRUNC(SYSDATE);
     FOR REC IN SD_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.AR_AMT_TTL_BATCH            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.AR_AMT_TTL_BATCH);
           V_TEMP_ROW.BANK_DEP_BATCH              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_DEP_BATCH);
           V_TEMP_ROW.BANKCARD_AMT_CALC           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANKCARD_AMT_CALC);
           V_TEMP_ROW.BANKCARD_AMT_CLSE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANKCARD_AMT_CLSE);
           V_TEMP_ROW.BATCH_CLSE_CD               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_CLSE_CD);
           V_TEMP_ROW.BATCH_GUID                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_GUID);
           V_TEMP_ROW.BATCH_MISS_CD               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_MISS_CD);
           V_TEMP_ROW.BATCH_OPEN_CD               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_OPEN_CD);
           V_TEMP_ROW.BATCH_TYP_CD                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_TYP_CD);
           V_TEMP_ROW.BATCH_VALID                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_VALID);
           V_TEMP_ROW.BROKER_NAME                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BROKER_NAME);
           V_TEMP_ROW.CASH_DRWR_CNT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_DRWR_CNT);
           V_TEMP_ROW.CASH_RFND_AMT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_RFND_AMT);
           V_TEMP_ROW.CASH_RFND_CALC              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_RFND_CALC);
           V_TEMP_ROW.CASH_RFND_DISC              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_RFND_DISC);
           V_TEMP_ROW.CASH_SLS_BATCH              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_SLS_BATCH);
           V_TEMP_ROW.CASH_SLS_DISC               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_SLS_DISC);
           V_TEMP_ROW.CASH_SLS_LESS_NON_MDSE      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_SLS_LESS_NON_MDSE);  
           V_TEMP_ROW.CHK_CLSE                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHK_CLSE);
           V_TEMP_ROW.CHK_CLSE_CALC               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHK_CLSE_CALC);
           V_TEMP_ROW.CHK_DRWR_CNT                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHK_DRWR_CNT);
           V_TEMP_ROW.CHRG_RFND_DISC              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_RFND_DISC);
           V_TEMP_ROW.CHRG_SLS_AMT                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_AMT);
           V_TEMP_ROW.CHRG_SLS_CALC               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_CALC);
           V_TEMP_ROW.CHRG_SLS_CRDT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_CRDT);
           V_TEMP_ROW.CHRG_SLS_CRDT_CALC          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_CRDT_CALC);
           V_TEMP_ROW.CHRG_SLS_DISC               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_DISC);
           V_TEMP_ROW.CHRG_SLS_LESS_NON_MDSE      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_LESS_NON_MDSE);  
           V_TEMP_ROW.CLOSE_PUT_TS                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLOSE_PUT_TS);
           V_TEMP_ROW.CLOSE_RECVD                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLOSE_RECVD);
           V_TEMP_ROW.CLSE_CASH                   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_CASH);
           V_TEMP_ROW.CLSE_CASH_CALC              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_CASH_CALC);
           V_TEMP_ROW.CLSE_HASH_TTL               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_HASH_TTL);
           V_TEMP_ROW.CLSE_HASH_TTL_RENTRY        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_HASH_TTL_RENTRY);
           V_TEMP_ROW.CLSE_OVR_SHRT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_OVR_SHRT);
           V_TEMP_ROW.CLSE_OVR_SHRT_RENTRY        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_OVR_SHRT_RENTRY);
           V_TEMP_ROW.CREATED_DT                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CREATED_DT);
           V_TEMP_ROW.CTL_CLRK_NO                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CTL_CLRK_NO);
           V_TEMP_ROW.DIV_NO                      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DIV_NO);
           V_TEMP_ROW.DSB_CASH_CALC               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DSB_CASH_CALC);
           V_TEMP_ROW.DSB_CASH_TTL                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DSB_CASH_TTL);
           V_TEMP_ROW.EDIT_SEQ_NO_FRST            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EDIT_SEQ_NO_FRST);
           V_TEMP_ROW.EDIT_SEQ_NO_LAST            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EDIT_SEQ_NO_LAST);
           V_TEMP_ROW.EDIT_TRAN_NO_FRST           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EDIT_TRAN_NO_FRST);
           V_TEMP_ROW.EDIT_TRAN_NO_LAST           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EDIT_TRAN_NO_LAST);
           V_TEMP_ROW.FLOW_START_TS               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.FLOW_START_TS);
           V_TEMP_ROW.GC_ACT_AC_CREDIT            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_ACT_AC_CREDIT);
           V_TEMP_ROW.GC_ACT_AD_DEBIT             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_ACT_AD_DEBIT);
           V_TEMP_ROW.GC_ACT_FOP_86               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_ACT_FOP_86);
           V_TEMP_ROW.GC_CALC_AC_CREDIT           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_CALC_AC_CREDIT);
           V_TEMP_ROW.GC_CALC_AD_DEBIT            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_CALC_AD_DEBIT);
           V_TEMP_ROW.GC_CALC_FOP_86              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_CALC_FOP_86);
           V_TEMP_ROW.GC_CNT_AE                   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GC_CNT_AE);
           V_TEMP_ROW.GROSS_SLS_AMT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GROSS_SLS_AMT);
           V_TEMP_ROW.INT_DEP_BATCH               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.INT_DEP_BATCH);
           V_TEMP_ROW.INVALID_REASON              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.INVALID_REASON);
           V_TEMP_ROW.LOCAL_BC_CHRG_DRWR_CNT      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LOCAL_BC_CHRG_DRWR_CNT);   
           V_TEMP_ROW.LOCAL_BC_CRDT_DRWR_CNT      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LOCAL_BC_CRDT_DRWR_CNT);   
           V_TEMP_ROW.MODIFIED_TS                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.MODIFIED_TS);
           V_TEMP_ROW.NATL_BC_CHRG_DRWR_CNT       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NATL_BC_CHRG_DRWR_CNT);  
           V_TEMP_ROW.NATL_BC_CRDT_DRWR_CNT       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NATL_BC_CRDT_DRWR_CNT);  
           V_TEMP_ROW.NET_CASH_SLS                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NET_CASH_SLS);
           V_TEMP_ROW.NET_CHRG_SLS                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NET_CHRG_SLS);
           V_TEMP_ROW.NET_SLS_AMT_CALC            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NET_SLS_AMT_CALC);
           V_TEMP_ROW.NET_SLS_AMT_CLSE            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NET_SLS_AMT_CLSE);
           V_TEMP_ROW.NON_MDSE_CASH_RFND          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MDSE_CASH_RFND);
           V_TEMP_ROW.NON_MDSE_CASH_SLS           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MDSE_CASH_SLS);
           V_TEMP_ROW.NON_MDSE_CASH_SLS_NET       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MDSE_CASH_SLS_NET);  
           V_TEMP_ROW.NON_MDSE_CHRG_RFND          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MDSE_CHRG_RFND);
           V_TEMP_ROW.NON_MDSE_CHRG_SLS           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MDSE_CHRG_SLS);
           V_TEMP_ROW.NON_MDSE_CHRG_SLS_NET       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MDSE_CHRG_SLS_NET);  
           V_TEMP_ROW.NON_SALE_SLS_CALC           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_SALE_SLS_CALC);
           V_TEMP_ROW.NON_SALE_SLS_CLSE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_SALE_SLS_CLSE);
           V_TEMP_ROW.OPEN_RECVD                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.OPEN_RECVD);
           V_TEMP_ROW.OPER_FND_PVS_DAY            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.OPER_FND_PVS_DAY);
           V_TEMP_ROW.OPER_FND_TRGT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.OPER_FND_TRGT);
           V_TEMP_ROW.PAY_ACCT_CALC_TTL           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PAY_ACCT_CALC_TTL);
           V_TEMP_ROW.PAY_ACCT_CUST_TTL           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PAY_ACCT_CUST_TTL);
           V_TEMP_ROW.PAY_DISC_CALC_TTL           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PAY_DISC_CALC_TTL);
           V_TEMP_ROW.POS_BATCH_RLSE_DT           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_BATCH_RLSE_DT);    
           V_TEMP_ROW.POS_CLSE_CNT_BANKCARD       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CLSE_CNT_BANKCARD);   
           V_TEMP_ROW.POS_CLSE_CNT_CASH_DSB       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CLSE_CNT_CASH_DSB);   
           V_TEMP_ROW.POS_CLSE_CNT_CASH_RFND      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CLSE_CNT_CASH_RFND);    
           V_TEMP_ROW.POS_CLSE_CNT_CHK            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CLSE_CNT_CHK);
           V_TEMP_ROW.POS_CLSE_CNT_NO_SALE        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CLSE_CNT_NO_SALE);  
           V_TEMP_ROW.POS_CLSE_CNT_VOID           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CLSE_CNT_VOID);
           V_TEMP_ROW.POS_CORR_BATCH_CD           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_CORR_BATCH_CD);
           V_TEMP_ROW.POS_ERR_CD_BATCH            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_ERR_CD_BATCH);
           V_TEMP_ROW.POS_ERR_FLG_DT              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_ERR_FLG_DT);   
           V_TEMP_ROW.POS_LINE_CNT_STAR_ORD       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_LINE_CNT_STAR_ORD);   
           V_TEMP_ROW.POS_TERM_NO                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TERM_NO);
           V_TEMP_ROW.POS_TERM_NO_COR             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TERM_NO_COR);
           V_TEMP_ROW.POS_TRAN_CNT_RCVD           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_CNT_RCVD);
           V_TEMP_ROW.POS_TRAN_DT                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_DT);
           V_TEMP_ROW.POS_TRAN_DUP_CD             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_DUP_CD);
           V_TEMP_ROW.POS_TRAN_ERR_CNT_CURR       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_ERR_CNT_CURR);   
           V_TEMP_ROW.POS_TRAN_ERR_CNT_ORIG       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_ERR_CNT_ORIG);   
           V_TEMP_ROW.POS_TRAN_NO_BATCH           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_NO_BATCH);
           V_TEMP_ROW.POS_TRAN_POLL_DT            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TRAN_POLL_DT);     
           V_TEMP_ROW.RCPT_DSB_BATCH_TTL          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RCPT_DSB_BATCH_TTL);
           V_TEMP_ROW.RCPT_DSB_BATCH_TTL_CALC     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RCPT_DSB_BATCH_TTL_CALC);    
           V_TEMP_ROW.REGN_NO                     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.REGN_NO);
           V_TEMP_ROW.RELEASED                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RELEASED);
           V_TEMP_ROW.REV_NO                      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.REV_NO);
           V_TEMP_ROW.RFND_ACCT_CALC_TTL          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RFND_ACCT_CALC_TTL);
           V_TEMP_ROW.RFND_ACCT_CUST_TTL          := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RFND_ACCT_CUST_TTL);
           V_TEMP_ROW.RUN_NO_PROC                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RUN_NO_PROC);
           V_TEMP_ROW.RUN_NO_RLSE                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RUN_NO_RLSE);
           V_TEMP_ROW.SD_ACT_AMT                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_ACT_AMT);
           V_TEMP_ROW.SD_ACT_INST_NM              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_ACT_INST_NM);
           V_TEMP_ROW.SD_ACT_INST_PYMT            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_ACT_INST_PYMT);
           V_TEMP_ROW.SD_CALC_AMT                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_CALC_AMT);
           V_TEMP_ROW.SD_CALC_INST_NM             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_CALC_INST_NM);
           V_TEMP_ROW.SD_CALC_PYMT                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_CALC_PYMT);
           V_TEMP_ROW.SD_CNT                      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_CNT);
           V_TEMP_ROW.SD_RETAINAGE                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SD_RETAINAGE);
           V_TEMP_ROW.SLS_BK_DT                   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_BK_DT);
           V_TEMP_ROW.SLS_DISC_TTL                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_DISC_TTL);
           V_TEMP_ROW.SLS_DISC_TTL_CALC           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_DISC_TTL_CALC);
           V_TEMP_ROW.SLS_TAX_BATCH               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TAX_BATCH);
           V_TEMP_ROW.SLS_TAX_CALC_SUM            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TAX_CALC_SUM);
           V_TEMP_ROW.SLS_TAX_CASH                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TAX_CASH);
           V_TEMP_ROW.SLS_TAX_CHRG                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TAX_CHRG);
           V_TEMP_ROW.SLS_TAX_CHRG_CRDT           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TAX_CHRG_CRDT);
           V_TEMP_ROW.SLS_TAX_RFND                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SLS_TAX_RFND);
           V_TEMP_ROW.STORE_NO                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STORE_NO);
           V_TEMP_ROW.STORE_NO_COR                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STORE_NO_COR);
           V_TEMP_ROW.STORE_TERM_ERR_CD           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STORE_TERM_ERR_CD);
           V_TEMP_ROW.SYS_RUN_DT                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SYS_RUN_DT);
           V_TEMP_ROW.TRAN_OUT_BAL_CNT            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRAN_OUT_BAL_CNT);
           V_TEMP_ROW.BOOK_PERIOD                 := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BOOK_PERIOD);
           V_TEMP_ROW.RLS_RUN_CYCLE               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RLS_RUN_CYCLE);
           V_TEMP_ROW.CREATED_TS                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CREATED_TS);
           V_TEMP_ROW.IS_VOIDED_OPEN              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.IS_VOIDED_OPEN);
           V_TEMP_ROW.STAGED_TS                   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STAGED_TS);
           V_TEMP_ROW.GLOBAL_HIERARCHY            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GLOBAL_HIERARCHY);
           V_TEMP_ROW.DAD                         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DAD);
           V_TEMP_ROW.AREA                        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.AREA);
           V_TEMP_ROW.DIVISION                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DIVISION);
           V_TEMP_ROW.DISTRICT                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DISTRICT);
           V_TEMP_ROW.DIVISION                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DIVISION);
           V_TEMP_ROW.CASH_ROUND_GAIN             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_ROUND_GAIN);
           V_TEMP_ROW.DIVISION                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DIVISION);
           V_TEMP_ROW.DIVISION                    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DIVISION);
           V_TEMP_ROW.CASH_ROUND_GAIN_CALC        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_ROUND_GAIN_CALC); 
           V_TEMP_ROW.CASH_ROUND_LOSS             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_ROUND_LOSS);
           V_TEMP_ROW.CASH_ROUND_LOSS_CALC        := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_ROUND_LOSS_CALC); 
           V_TEMP_ROW.EXTRACT_GROUP_ID            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXTRACT_GROUP_ID);  
           V_TEMP_ROW.CLSE_CASH_DEPOSIT           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CLSE_CASH_DEPOSIT);
           V_TEMP_ROW.CASH_SLS_GROSS              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_SLS_GROSS);
           V_TEMP_ROW.CASH_RFND_GROSS             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_RFND_GROSS);
           V_TEMP_ROW.CHRG_SLS_GROSS              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_SLS_GROSS);
           V_TEMP_ROW.CHRG_CRDT_GROSS             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHRG_CRDT_GROSS);
           V_TEMP_ROW.CANADIAN_PENNY_LOSS_GAIN    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CANADIAN_PENNY_LOSS_GAIN);     
           V_TEMP_ROW.AMERICAN_EXPRESS            := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.AMERICAN_EXPRESS);
           V_TEMP_ROW.NON_MERCHANDISE             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NON_MERCHANDISE);
           V_TEMP_ROW.NATIONAL_BANK_CARDS         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.NATIONAL_BANK_CARDS);
           V_TEMP_ROW.OPERATING_FUND_VARIANCE     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.OPERATING_FUND_VARIANCE);    
           V_TEMP_ROW.CASH_SALES                  := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_SALES);
           V_TEMP_ROW.CASH_REFUNDS                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_REFUNDS);
           V_TEMP_ROW.CHARGE_SALES                := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHARGE_SALES);
           V_TEMP_ROW.CHARGE_REFUNDS              := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHARGE_REFUNDS);
           V_TEMP_ROW.CHARGE_DISCOUNT             := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CHARGE_DISCOUNT);
           V_TEMP_ROW.CASH_DISCOUNT               := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CASH_DISCOUNT);
           V_TEMP_ROW.LOAD_DATE                   := IN_DATE;   

           INSERT INTO CCN_BATCH_SUMMARY VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_CCN_BATCH_SUMMARY',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000', 
                                    '0000000',  
                                    'CCN_BATCH_SUMMARY');                                           
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_CCN_BATCH_SUMMARY',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000', 
                                    '0000000',  
                                    '0000000'); 

END LOAD_CCN_BATCH_SUMMARY;

PROCEDURE LOAD_CCN_INTERIM_DEPOSITS(
/****************************************************************************
This procedure is used to load the CCN_INTERIM_DEPOSITS new interface table
from PNP schema to banking schema
created : 01/17/2017 AXK326 CCN Project Team....
changed : 06/15/2017 gxg192 Changes to remove execute immediate.
*****************************************************************************/
IN_DATE    DATE)
AS

CURSOR SD_CUR IS
    SELECT PCID.*
      FROM PNP_CCN_INTERIM_DEPOSITS PCID
     WHERE PCID.RLS_RUN_CYCLE = (SELECT MAX(PCH.RLS_RUN_CYCLE)
                                   FROM PNP_CCN_HEADERS PCH);

   V_COUNT     NUMBER := 0;
   V_TCOUNT    NUMBER := 0;
   V_TEMP_ROW  CCN_INTERIM_DEPOSITS%ROWTYPE;

BEGIN
     DELETE FROM CCN_INTERIM_DEPOSITS WHERE LOAD_DATE = TRUNC(SYSDATE);
     FOR REC IN SD_CUR
     LOOP
        BEGIN
              V_TEMP_ROW.TM                :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TM);
              V_TEMP_ROW.VOIDCD            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.VOIDCD);
              V_TEMP_ROW.STORENBR          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STORENBR);
              V_TEMP_ROW.TRNG              :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRNG);
              V_TEMP_ROW.CNCL              :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CNCL);
              V_TEMP_ROW.TRANID            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANID);
              V_TEMP_ROW.JOBNBR            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.JOBNBR);
              V_TEMP_ROW.SUBSEQCD          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SUBSEQCD);
              V_TEMP_ROW.ORDERDT           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORDERDT);
              V_TEMP_ROW.RSNCD             :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RSNCD);
              V_TEMP_ROW.OTHSTORE          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.OTHSTORE);
              V_TEMP_ROW.ORIGDT            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORIGDT);
              V_TEMP_ROW.ORIGTERM          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORIGTERM);
              V_TEMP_ROW.ORIGTRAN          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORIGTRAN);
              V_TEMP_ROW.GLACCTNBR         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GLACCTNBR);
              V_TEMP_ROW.DOCNBR            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DOCNBR);
              V_TEMP_ROW.BATCH_GUID        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BATCH_GUID);
              V_TEMP_ROW.TRAN_GUID         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRAN_GUID);
              V_TEMP_ROW.XMLVERSION        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.XMLVERSION);
              V_TEMP_ROW.VERSIONID         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.VERSIONID);
              V_TEMP_ROW.POSLOGXTR         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POSLOGXTR);
              V_TEMP_ROW.SUSPTRAN          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SUSPTRAN);
              V_TEMP_ROW.TERRFORCE         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERRFORCE);
              V_TEMP_ROW.TOTTRANAMT        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TOTTRANAMT);
              V_TEMP_ROW.RCVRFLAG          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RCVRFLAG);
              V_TEMP_ROW.MANFLAG           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.MANFLAG);
              V_TEMP_ROW.GSTFLAG           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GSTFLAG);
              V_TEMP_ROW.GSTFLAG2          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.GSTFLAG2);
              V_TEMP_ROW.SICCD             :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.SICCD);
              V_TEMP_ROW.ORDERNBR2         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORDERNBR2);
              V_TEMP_ROW.TRCNBR            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRCNBR);
              V_TEMP_ROW.EPROMO            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EPROMO);
              V_TEMP_ROW.TRCCD             :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRCCD);
              V_TEMP_ROW.RELATIONEMP       :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RELATIONEMP);
              V_TEMP_ROW.RELATIONNM        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RELATIONNM);
              V_TEMP_ROW.PROSHOW           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.PROSHOW);
              V_TEMP_ROW.TERMNBR           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMNBR);
              V_TEMP_ROW.TERMCTLNBR        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMCTLNBR);
              V_TEMP_ROW.CTLDT             :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CTLDT);
              V_TEMP_ROW.TRANNBR           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRANNBR);
              V_TEMP_ROW.EMPNBR            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EMPNBR);
              V_TEMP_ROW.ACCTNBR           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ACCTNBR);
              V_TEMP_ROW.POSMQXTR          :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POSMQXTR);
              V_TEMP_ROW.DTTZISO           :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DTTZISO);
              V_TEMP_ROW.TRAN_DATE         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TRAN_DATE);
              V_TEMP_ROW.DOC_ID            :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.DOC_ID);
              V_TEMP_ROW.REENTRY_TS        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.REENTRY_TS);
              V_TEMP_ROW.CREATED_TS        :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.CREATED_TS);
              V_TEMP_ROW.RECEIPTOPTION     :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RECEIPTOPTION);
              V_TEMP_ROW.EMAILADDRESS      :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EMAILADDRESS);
              V_TEMP_ROW.STAGED_TS         :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STAGED_TS);
              V_TEMP_ROW.RLS_RUN_CYCLE     :=   CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.RLS_RUN_CYCLE);
              V_TEMP_ROW.LOAD_DATE         :=   IN_DATE;

           INSERT INTO CCN_INTERIM_DEPOSITS VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_CCN_INTERIM_DEPOSITS',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000', 
                                    '0000000',  
                                    'CCN_INTERIM_DEPOSITS'); 
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
               ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_CCN_INTERIM_DEPOSITS',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000', 
                                    '0000000',  
                                    '0000000'); 

END LOAD_CCN_INTERIM_DEPOSITS;

PROCEDURE POS_DEP_TICK_CNT(
/*******************************************************************************
This procedure is used to load the POS data into
"POS_DPST_TICKET_COUNTS" with data extracted from CCN_BATCH_SUMMARY table
created : 01/17/2017 AXK326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR POS_DT_CUR IS
     SELECT CBS.STORE_NO,
            SUBSTR(CBS.POS_TERM_NO, 1, 5)POS_TERM_NO,
            (CASE NVL(CBS.BANK_DEP_BATCH, 0) WHEN '0' THEN '0000' ELSE '0001' END)POS_COUNT,
            NULL FILLER
       FROM CCN_BATCH_SUMMARY CBS
      WHERE LOAD_DATE = IN_DATE;

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW   POS_DPST_TICKET_COUNTS%ROWTYPE;

BEGIN
     DELETE FROM POS_DPST_TICKET_COUNTS WHERE LOAD_DATE = IN_DATE;
     FOR REC IN POS_DT_CUR
     LOOP
        BEGIN
            V_TEMP_ROW.COST_CENTER_CODE     := rec.STORE_NO;
            V_TEMP_ROW.TERMINAL_NUMBER      := rec.POS_TERM_NO||'0';
            V_TEMP_ROW.POS_COUNT            := rec.POS_COUNT;
            V_TEMP_ROW.FILLER               := rec.FILLER;
            V_TEMP_ROW.DATA_SOURCE          := 'NEW_POS';
            V_TEMP_ROW.LOAD_DATE            := IN_DATE;
           INSERT INTO POS_DPST_TICKET_COUNTS VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'POS_BANKING_DAILY_LOAD.POS_DEP_TICK_CNT',
                                           SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                           rec.STORE_NO,
                                           rec.POS_TERM_NO,
                                           'POS_DPST_TICKET_COUNTS');
            RAISE;
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.POS_DEP_TICK_CNT',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000', 
                                    '0000000',  
                                    '0000000');
          ROLLBACK;
          RAISE;
END POS_DEP_TICK_CNT;

PROCEDURE POS_INTERIM_DEPST(
/*******************************************************************************
This procedure is used to load the POS data into
"POS_INTERIM_DEPST" table with data extracted from CCN_INTERIM_DEPOSITS table
created : 01/17/2017 AXK326 CCN Project....
changed :
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR POS_INTERIM_CUR IS
      SELECT '99' REGION,  -- defaulted to 99,
             NULL CTLCLK,
             '99' DIV_NO,
             CID.STORENBR COST_CENTER_CODE,
             CID.TERMNBR TERMINAL_NUMBER,
             'NA' TRAN_NO,
             CID.RLS_RUN_CYCLE RLSE_RUN,
             TO_CHAR(TO_DATE(CID.TRAN_DATE), 'mmddyy') TRAN_DATE,
             REPLACE(SUBSTR(CID.DTTZISO, 11, 5), '.', '')TRAN_TIME,
             '0' FILLER,
             LPAD(CID.TRANNBR,5,'0') TRAN_NO1,
             STORDRFT.SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CID.EMPNBR, '0', '2') AS EMP_NO,
             STORDRFT.SD_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(CID.TOTTRANAMT, '0', '9', '2') AS DEPST_AMOUNT
        FROM CCN_INTERIM_DEPOSITS CID
       WHERE LOAD_DATE = IN_DATE;

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW   BANKING.POS_INTERIM_DEPST%ROWTYPE;

BEGIN
     DELETE FROM POS_INTERIM_DEPST WHERE LOAD_DATE = IN_DATE;
     FOR REC IN POS_INTERIM_CUR
     LOOP
        BEGIN
            V_TEMP_ROW.REGION             := rec.REGION;          
            V_TEMP_ROW.CTLCLK             := rec.CTLCLK;         
            V_TEMP_ROW.DIV_NO             := rec.DIV_NO;          
            V_TEMP_ROW.COST_CENTER_CODE   := rec.COST_CENTER_CODE;
            V_TEMP_ROW.TERMINAL_NUMBER    := rec.TERMINAL_NUMBER; 
            V_TEMP_ROW.TRAN_NO            := rec.TRAN_NO;         
            V_TEMP_ROW.RLSE_RUN           := rec.RLSE_RUN;
            V_TEMP_ROW.TRAN_DATE          := rec.TRAN_DATE;       
            V_TEMP_ROW.TRAN_TIME          := rec.TRAN_TIME;       
            V_TEMP_ROW.FILLER             := rec.FILLER;          
            V_TEMP_ROW.TRAN_NO1           := rec.TRAN_NO1;        
            V_TEMP_ROW.EMP_NO             := rec.EMP_NO;
            V_TEMP_ROW.DEPST_AMOUNT       := rec.DEPST_AMOUNT;
            V_TEMP_ROW.DATA_SOURCE        := 'NEW_POS';
            V_TEMP_ROW.LOAD_DATE          := IN_DATE;
            INSERT INTO POS_INTERIM_DEPST VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN                 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'POS_BANKING_DAILY_LOAD.POS_INTERIM_DEPST',
                                           SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                           rec.REGION, 
                                           rec.TERMINAL_NUMBER,
                                           'POS_INTERIM_DEPST');
                 RAISE;
        END;
     END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN

         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.POS_INTERIM_DEPST',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000',
                                    '0000000',
                                    '0000000');
         ROLLBACK;
         RAISE;
END POS_INTERIM_DEPST;

PROCEDURE POS_DLY_DEP_TKT_LD_SP(
/************************************************************************
POS_DEP_TKT_DLY_LD_SP

This Procedure is a wrapper for the daily Load for POS related tables
* Loads all the deposit ticket counts

created : 09/14/2016 axk326 CCN Project....
changed :
************************************************************************/
    IN_DATE DATE)
AS

BEGIN

      G_START_TIME := DBMS_UTILITY.GET_TIME;
      G_CONTEXT := 'Load POS_DPST_TICKET_COUNTS Table ';
      POS_DEP_TICK_CNT(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POS_DPST_TICKET_COUNTS Table loaded in : '|| (DBMS_UTILITY.GET_TIME - G_START_TIME)/100 || ' Seconds');
      
      G_START_TIME := DBMS_UTILITY.GET_TIME;
      G_CONTEXT := 'Load POS_INTERIM_DEPST Table ';
      POS_INTERIM_DEPST(IN_DATE);
      DBMS_OUTPUT.PUT_LINE('POS_INTERIM_DEPST Table loaded in : '|| (DBMS_UTILITY.GET_TIME - G_START_TIME)/100 || ' Seconds');

EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.POS_DLY_DEP_TKT_LD_SP',
                                    SQLERRM,
                                    '000000', 
                                    '0000000',  
                                    '0000000');
         RAISE;
END POS_DLY_DEP_TKT_LD_SP;

PROCEDURE TICKET_BAG_DATA_LOAD_SP(
/*********************************************************************** 
This Procedure is Wrapper procedure, which is used to load POS data related
to banking deposit ticket and bags.

Created : 06/15/2017 gxg192 CCN Project
Changed :
************************************************************************/
    IN_DATE IN DATE)
IS

BEGIN

    CCN_BATCH_PKG.INSERT_BATCH_JOB('TICKET_BAG_DATA_LOAD', G_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    
    -- Call LOAD_CCN_BATCH_SUMMARY procedure
    G_CONTEXT := 'LOADING CCN_BATCH_SUMMARY';
    LOAD_CCN_BATCH_SUMMARY(IN_DATE);
    
    -- Call LOAD_CCN_INTERIM_DEPOSITS procedure
    G_CONTEXT := 'LOADING CCN_INTERIM_DEPOSITS';
    LOAD_CCN_INTERIM_DEPOSITS(IN_DATE);
    
    -- Call POS_DLY_DEP_TKT_LD_SP procedure
    G_CONTEXT := 'LOADING DAILY POS FILE';
    POS_DLY_DEP_TKT_LD_SP(IN_DATE);

    CCN_BATCH_PKG.UPDATE_BATCH_JOB('TICKET_BAG_DATA_LOAD', G_BATCH_NUMBER, G_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
   
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                   'POS_BANKING_DAILY_LOAD.TICKET_BAG_DATA_LOAD_SP: '||G_CONTEXT,
                                   SQLERRM||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                   '000000',
                                   '0000000',
                                   '0000000');
        RAISE;
END TICKET_BAG_DATA_LOAD_SP;

END POS_BANKING_DAILY_LOAD;