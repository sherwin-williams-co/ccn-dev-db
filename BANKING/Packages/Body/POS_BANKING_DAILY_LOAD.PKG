CREATE OR REPLACE PACKAGE BODY POS_BANKING_DAILY_LOAD
AS
/**************************************************************************************
This package is for loading data from POS to CCN for
Banking Gift Card and deposit ticket/bags.

Created : 06/15/2017 gxg192 CCN Project....
Changed : 06/21/2017 gxg192 Changes to use single procedure for loading pos data
                            for gift cards and ticket/bags
        : 06/26/2017 gxg192 Changed procedure name from LOAD_UAR_GIFT_CARD_POS_TRANS to LOAD_POS_GIFT_CARD_POS_TRANS
        : 07/31/2017 gxg192 Added function to get store state code based on store number passed.
***************************************************************************************/

FUNCTION GET_UAR_TRANS_CODE(
/**************************************************************************************
GET_UAR_TRANS_CODE

UAR TRAN CODE is derived using data in 3 fields.
1. TRANSACTION_TYPE
2. SMIS2 posAccum and
3. posAccum

1. TRANSACTION_TYPE:
        This is TRANID field from CCN_HEADERS tables.

2. SALES/Form of Pay
        This field is derived as below:
        If PRODDESCR field in ccn_sales_lines table contains first 12 digit of the gift card number and 
        NON_MERCH_CODE is 11 then this field will be defaulted to 11 else 76.

3. TYPE (Credit / Debit)
        This field is derived as below:
        If accum_id field from CCN_ACCUMS table is "AC" then this field is defaulted to 02.
        else 01.

Data in above 3 fields is concatenated to create UAT_TRANS_CODE value.

Created : 05/19/2017 gxg192 CCN Project....
Changed : 06/26/2017 gxg192 Changes in logic for finding uar tran code.
        : 06/26/2017 gxg192 Changes in logic for finding uar tran code based on data in ccn_sales_lines table.
                            Added IN_GIFT_CARD_NBR as in parameter.
**************************************************************************************/
            IN_TRANID        IN POS_GIFT_CARD_POS_TRANS.TRANSACTION_TYPE%TYPE,
            IN_RLS_RUN_CYCLE IN PNP_CCN_HEADERS.RLS_RUN_CYCLE%TYPE,
            IN_TRAN_GUID     IN PNP_CCN_HEADERS.TRAN_GUID%TYPE,
            IN_GIFT_CARD_NBR IN PNP_CCN_HEADERS.TRAN_GUID%TYPE)
RETURN POS_GIFT_CARD_POS_TRANS.UAR_TRAN_CODE%TYPE
IS
    V_UAR_TRAN_CODE POS_GIFT_CARD_POS_TRANS.UAR_TRAN_CODE%TYPE;
    V_SALES_FORM_PAY VARCHAR2(2);
    V_TYPE           VARCHAR2(2);
    V_NON_MERCH_CODE VARCHAR2(2) := '11';
    V_PRODDESCR      VARCHAR2(200) := 'GIFTCARD '|| SUBSTR(IN_GIFT_CARD_NBR,1, 4) ||
                                              '-'|| SUBSTR(IN_GIFT_CARD_NBR,5, 4) ||
                                              '-'|| SUBSTR(IN_GIFT_CARD_NBR,9, 4);
BEGIN

    SELECT CASE WHEN COUNT(0) > 0
               THEN '11'
               ELSE '76'
               END
      INTO V_SALES_FORM_PAY
      FROM pnp_ccn_sales_lines
     WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
       AND TRAN_GUID = IN_TRAN_GUID
       AND NON_MERCH_CODE = V_NON_MERCH_CODE
       AND PRODDESCR LIKE V_PRODDESCR || '%';

    --Check if atleast 1 record with ACCUM_ID as "ac" is present in PNP_CCN_ACCUMS table
    --then default V_TYPE to 02 else 01.
    SELECT CASE WHEN COUNT(0) > 0
           THEN '02'
           ELSE '01'
           END
      INTO V_TYPE
      FROM PNP_CCN_ACCUMS
     WHERE TRAN_GUID = IN_TRAN_GUID
       AND RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
       AND ACCUM_ID = 'ac';

    --V_UAR_TRAN_CODE is equal to concatenated value of above 3 fields.
    V_UAR_TRAN_CODE := IN_TRANID || V_SALES_FORM_PAY || V_TYPE;

    RETURN V_UAR_TRAN_CODE;

EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                 'POS_BANKING_DAILY_LOAD.GET_UAR_TRANS_CODE',
                                  SQLERRM,
                                  SUBSTR(IN_TRAN_GUID,-16,16),
                                  SUBSTR(IN_RLS_RUN_CYCLE,-6,6),
                                 'POS_GIFT_CARD_POS_TRANS');
       V_UAR_TRAN_CODE := NULL;
       RETURN V_UAR_TRAN_CODE;
END GET_UAR_TRANS_CODE;

FUNCTION GET_STORE_STATE_CODE(
/**************************************************************************************
GET_STORE_STATE_CODE

This FUNCTION will derive the STORE STATE CODE based on Store number present in CCN_HEADERS table
in PNP i.e. new pos database. For Barbados, the first two positions of its Postal code will be used
as state code.
e.g. Postal code = BB11606 then state code will be "BB".
If state code is Null in address_vw (for counties like Canada) PROVINCE_CODE will be used as state code
if it is present. If state code as well as province code is null, function will return state code as Null.

Created : 07/31/2017 gxg192 CCN Project....
Changed :
**************************************************************************************/
            IN_STORE_NO      IN POS_GIFT_CARD_POS_TRANS.TRANSACTION_TYPE%TYPE)
RETURN ADDRESS_VW.STATE_CODE%TYPE
IS
   V_ADDRESS_ROW   ADDRESS_VW%ROWTYPE;
   V_STATE_CODE    ADDRESS_VW.STATE_CODE%TYPE;
BEGIN
   SELECT A.*
     INTO V_ADDRESS_ROW
     FROM ADDRESS_VW A, COST_CENTER C
    WHERE A.COST_CENTER_CODE = C.COST_CENTER_CODE
      AND C.CATEGORY = 'S'
      AND A.ADDRESS_TYPE = 'M'
      AND A.ACTIVE_FLAG = 'Y'
      AND SUBSTR(A.COST_CENTER_CODE,3) = IN_STORE_NO;

   IF V_ADDRESS_ROW.COUNTRY_CODE = 'BRB'
   THEN
      V_STATE_CODE := SUBSTR(V_ADDRESS_ROW.POSTAL_CODE,1,2);
   ELSE
      V_STATE_CODE := NVL(V_ADDRESS_ROW.STATE_CODE, V_ADDRESS_ROW.PROVINCE_CODE);
   END IF;

   RETURN V_STATE_CODE;
EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                 'POS_BANKING_DAILY_LOAD.GET_STORE_STATE_CODE',
                                  SQLERRM,
                                  '000000000',
                                  IN_STORE_NO,
                                  'ADDRESS_VW');
       V_STATE_CODE := NULL;
       RETURN V_STATE_CODE;
END GET_STORE_STATE_CODE;

PROCEDURE LOAD_POS_CCN_LOAD_STATUS(
/****************************************************************************
This procedure is used to load the POSXML store drafts temp table
"POS_CCN_LOAD_STATUS" with data extracted from new interface tables
Created : 06/12/2017 gxg192 CCN Project....
Changed : 08/01/2017 gxg192 Added DBMS output to print no. of records inserted into log file.
Changed : 09/27/2017 rxa457 CCN Project Team...
          Load date will be inserted as SYSDATE to keep track of data loaded date
*****************************************************************************/
IN_DATE     IN DATE)
AS

BEGIN

   INSERT INTO POS_CCN_LOAD_STATUS
   SELECT CH.*,
          SYSDATE LOAD_DATE
     FROM PNP_CCN_LOAD_STATUS CH
    WHERE TRUNC(CH.START_TS) = TRUNC(IN_DATE)
      AND STATUS_CODE = 'C';

   DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || SQL%ROWCOUNT);
   COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_POS_CCN_LOAD_STATUS',
                                    SQLERRM,
                                    '000000',
                                    '0000000',
                                    'POS_CCN_LOAD_STATUS');
        RAISE;

END LOAD_POS_CCN_LOAD_STATUS;

PROCEDURE LOAD_POS_GIFT_CARD_POS_TRANS(
/*******************************************************************************
This procedure is used to load the UAR Gift Card POS Transaction table
"POS_GIFT_CARD_POS_TRANS" with data extracted from new interface tables
created : 10/28/2016 axk326 CCN Project....
changed : 12/08/2016 vxv336 added STATUS filter in cursor query
        : 05/19/2017 gxg192 Changes for fetching UAR_TRAN_CODE
        : 06/26/2017 gxg192 Changed table name from UAR_GIFT_CARD_POS_TRANS to
                            POS_GIFT_CARD_POS_TRANS
        : 06/28/2017 gxg192 Changes to use CCN_COMMON_TOOLS instead of SD_COMMON_TOOLS
        : 07/27/2017 gxg192 Changes to use store's state code and not the customer's state code
        : 08/03/2017 gxg192 Removed formatting on few fields. Required Formatting is done
                            while generating gift card file.
changed : 09/27/2017 rxa457 CCN project team
          Load date will always be inserted as SYDATE							
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR GC_CUR IS
 SELECT CH.RLS_RUN_CYCLE,
        CH.TRAN_GUID,
        CH.TRANID TRANSACTION_TYPE,
        CGC.GIFTCARDNBR GIFT_CARD_NBR,
        CBS.DIVISION DIVISION_NBR,
        CBS.AREA AREA_NBR,
        CBS.DISTRICT DISTRICT_NBR,
        CH.STORE_NO STORE_NBR,
        CGC.AUTHAMT TRANS_AMOUNT,
        TO_CHAR(CH.TRAN_DATE, 'mmddyyyy') TRANS_DATE,
        TO_CHAR(CH.TRAN_TIMESTAMP,'HH24MI') TRANS_TIME,
        CH.TERMNBR TERM_NBR,
        CH.TRANNBR TRANS_NBR,
        CH.EMP_NO EMPLOYEE_NBR
   FROM PNP_CCN_HEADERS CH,
        PNP_CCN_BATCH_SUMMARY CBS,
        PNP_CCN_GIFT_CARD_LOG CGC
  WHERE CGC.RLS_RUN_CYCLE IN (SELECT RLS_RUN_CYCLE
                                FROM POS_CCN_LOAD_STATUS
                               WHERE TRUNC(START_TS) = TRUNC(IN_DATE))
    AND UPPER(CGC.ACTION) IN ('APPROVED', 'MANUAL')                               
    AND CH.RLS_RUN_CYCLE = CGC.RLS_RUN_CYCLE 
    AND CH.TRAN_GUID = CGC.TRAN_GUID
    AND CH.BATCH_GUID = CBS.BATCH_GUID;

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW      POS_GIFT_CARD_POS_TRANS%ROWTYPE;

BEGIN


     FOR REC IN GC_CUR
     LOOP
        BEGIN
           V_TEMP_ROW.TRANSACTION_TYPE    := rec.TRANSACTION_TYPE;
           V_TEMP_ROW.UAR_TRAN_CODE       := GET_UAR_TRANS_CODE(rec.TRANSACTION_TYPE, rec.RLS_RUN_CYCLE, rec.TRAN_GUID, rec.GIFT_CARD_NBR);
           V_TEMP_ROW.GIFT_CARD_NBR       := rec.GIFT_CARD_NBR;   
           V_TEMP_ROW.DIVISION_NBR        := rec.DIVISION_NBR;    
           V_TEMP_ROW.DISTRICT_NBR        := rec.DISTRICT_NBR;    
           V_TEMP_ROW.AREA_NBR            := rec.AREA_NBR;        
           V_TEMP_ROW.STORE_NBR           := rec.STORE_NBR;       
           V_TEMP_ROW.STORE_STATE_CD      := GET_STORE_STATE_CODE(rec.STORE_NBR);
           V_TEMP_ROW.TRANS_AMOUNT        := rec.TRANS_AMOUNT;
           V_TEMP_ROW.TRANS_DATE          := rec.TRANS_DATE;      
           V_TEMP_ROW.TRANS_TIME          := rec.TRANS_TIME;
           V_TEMP_ROW.TERM_NBR            := rec.TERM_NBR;
           V_TEMP_ROW.TRANS_NBR           := rec.TRANS_NBR;
           V_TEMP_ROW.EMPLOYEE_NBR        := rec.EMPLOYEE_NBR;
           V_TEMP_ROW.TRAN_GUID           := rec.TRAN_GUID;
           V_TEMP_ROW.LOAD_DATE           := SYSDATE;

           INSERT INTO POS_GIFT_CARD_POS_TRANS VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'POS_BANKING_DAILY_LOAD.LOAD_POS_GIFT_CARD_POS_TRANS',
                                           SQLERRM,
                                           SUBSTR(V_TEMP_ROW.TRAN_GUID,-16,16),
                                           SUBSTR(V_TEMP_ROW.GIFT_CARD_NBR,-16,16),
                                           'POS_GIFT_CARD_POS_TRANS');
                RAISE;
        END;
     END LOOP;

     COMMIT;
     DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                  'POS_BANKING_DAILY_LOAD.LOAD_POS_GIFT_CARD_POS_TRANS',
                                  SQLERRM,
                                  '000000', 
                                  '0000000',  
                                  '0000000');
       ROLLBACK;
       RAISE;
END LOAD_POS_GIFT_CARD_POS_TRANS;

PROCEDURE GENERATE_GIFT_CARD_TRANS_FILE (
/******************************************************************************
This procedure will generate UAR GIFT CARD TRANSACTION FILE [SRA30060] file

Created : 10/28/2016 vxv336/gxg192 CCN Project
Changed : 06/14/2017 gxg192 Changes to add header, trailor and summary record
        : 08/03/2017 gxg192 Changes to format required field for generating gift card file.
changed : 09/27/2017 rxa457 CCN project team
          Load date will always be inserted as SYDATE
          Pick all data that was not generated 	as part of the previous run	  
*******************************************************************************/
IN_DATE            IN         DATE)
IS
  V_LAST_BATCH_RUN_DATE DATE;
  CURSOR main_cur IS
      SELECT TRANSACTION_TYPE,
             UAR_TRAN_CODE,
             GIFT_CARD_NBR,
             DIVISION_NBR,
             DISTRICT_NBR,
             AREA_NBR,
             STORE_NBR,
             STORE_STATE_CD,
             CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(TRANS_AMOUNT, '0', '14', '2') AS TRANS_AMOUNT,
             TRANS_DATE,
             CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(TRANS_TIME, '0', '8') AS TRANS_TIME,
             CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(TERM_NBR, '0', '5') AS TERM_NBR,
             CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(TRANS_NBR, '0', '5') AS TRANS_NBR,
             CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(EMPLOYEE_NBR, '0', '2') AS EMPLOYEE_NBR
        FROM POS_GIFT_CARD_POS_TRANS
       WHERE LOAD_DATE > NVL(V_LAST_BATCH_RUN_DATE,TRUNC(SYSDATE)-1);
      
  PATH                         VARCHAR2(50) := 'BANKING_LOAD_FILES';
  UAR_GIFT_CARD_TRANS_FL_NM    VARCHAR2(50) := 'SMIS1.UAR.POSGFTCD_' ||
                                       TO_CHAR(IN_DATE,'DDMONRRRR') || '_' ||
                                       TO_CHAR(SYSDATE,'HH24MISS');
  UAR_GIFT_CARD_TRANS_FL       UTL_FILE.FILE_TYPE;
  V_OUT_CLOB                   CLOB;

  V_RECORD_COUNT               NUMBER := 0;
  V_TOTAL_TRANS_AMOUNT         NUMBER := 0;
  V_BATCH_NUMBER  BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
  V_TRANS_STATUS  BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';

BEGIN
   V_LAST_BATCH_RUN_DATE := CCN_COMMON_TOOLS.GET_LAST_BATCH_RUNDATE('POS_GIFT_CARD_GENERATION');
   CCN_BATCH_PKG.INSERT_BATCH_JOB('POS_GIFT_CARD_GENERATION', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
   
  UAR_GIFT_CARD_TRANS_FL := UTL_FILE.FOPEN (PATH
                                         ,UAR_GIFT_CARD_TRANS_FL_NM
                                         ,'W' --BINARY
                                         ,32767);
  --Create header record
  --Example *00P0614201700335842PROD

  V_OUT_CLOB := '*00P' || TO_CHAR(IN_DATE,'MMDDRRRR') ||SUBSTR(TO_CHAR(SYSTIMESTAMP,'HHMISSFF'),1,8)||'PROD'|| CHR(13);
  UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);

  FOR rec IN main_cur LOOP
      V_OUT_CLOB := '*' || rec.TRANSACTION_TYPE
                        || rec.UAR_TRAN_CODE
                        || rec.GIFT_CARD_NBR
                        || CHR(32)|| CHR(32)|| CHR(32)|| CHR(32)
                        || rec.DIVISION_NBR
                        || rec.DISTRICT_NBR
                        || rec.AREA_NBR
                        || CHR(32)|| CHR(32)
                        || rec.STORE_NBR
                        || rec.STORE_STATE_CD
                        || rec.TRANS_AMOUNT
                        || rec.TRANS_DATE
                        || rec.TRANS_TIME
                        || rec.TERM_NBR
                        || rec.TRANS_NBR
                        || rec.EMPLOYEE_NBR
                        || CHR(13);
                        
      IF V_OUT_CLOB <> EMPTY_CLOB() THEN
          UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);
          V_OUT_CLOB := NULL;
          V_RECORD_COUNT := V_RECORD_COUNT + 1;
          V_TOTAL_TRANS_AMOUNT := V_TOTAL_TRANS_AMOUNT + TO_NUMBER(rec.TRANS_AMOUNT);
      END IF;
  END LOOP;

  --Create trailor record
  --Example *980100000000033100000001881325
  V_OUT_CLOB := '*9801'
                || CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(V_RECORD_COUNT,'0', '12')
                || CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(V_TOTAL_TRANS_AMOUNT,'0', '14', '2')
                || CHR(13);
  UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);

  --Create summary record
  --Example *990100000000033300000001881325
  V_OUT_CLOB := '*9901'
                || CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(V_RECORD_COUNT+2,'0', '12')
                || CCN_COMMON_TOOLS.FORMAT_INPUT_FOR_FILE(V_TOTAL_TRANS_AMOUNT,'0', '14', '2');
  UTL_FILE.PUT_LINE(UAR_GIFT_CARD_TRANS_FL, V_OUT_CLOB, TRUE);

  UTL_FILE.FCLOSE(UAR_GIFT_CARD_TRANS_FL);

  CCN_BATCH_PKG.UPDATE_BATCH_JOB('POS_GIFT_CARD_GENERATION', V_BATCH_NUMBER, V_TRANS_STATUS);
  CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

EXCEPTION
   WHEN OTHERS THEN
      IF UTL_FILE.IS_OPEN(UAR_GIFT_CARD_TRANS_FL) THEN
         UTL_FILE.FCLOSE(UAR_GIFT_CARD_TRANS_FL);
      END IF;
      ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                  'POS_BANKING_DAILY_LOAD.GENERATE_GIFT_CARD_TRANS_FILE',
                                  SQLERRM,
                                  '000000', 
                                  '0000000',  
                                  '0000000');
       
      RAISE;
END GENERATE_GIFT_CARD_TRANS_FILE;

PROCEDURE LOAD_POS_DPST_TICKET_COUNTS(
/*******************************************************************************
This procedure is used to load the POS data into
"POS_DPST_TICKET_COUNTS" with data extracted from PNP_CCN_BATCH_SUMMARY table
created : 01/17/2017 AXK326 CCN Project....
changed : 09/27/2017 rxa457 CCN project team
          Load date will always be inserted as SYDATE							
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR POS_DT_CUR IS
     SELECT CBS.STORE_NO,
            SUBSTR(CBS.POS_TERM_NO, 1, 5)POS_TERM_NO,
            CBS.BANK_DEP_BATCH POS_COUNT,
            NULL FILLER
       FROM PNP_CCN_BATCH_SUMMARY CBS
      WHERE RLS_RUN_CYCLE IN (SELECT RLS_RUN_CYCLE
                                FROM POS_CCN_LOAD_STATUS
                               WHERE TRUNC(START_TS) = TRUNC(IN_DATE));

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW   POS_DPST_TICKET_COUNTS%ROWTYPE;

BEGIN
     FOR REC IN POS_DT_CUR
     LOOP
        BEGIN
            V_TEMP_ROW.COST_CENTER_CODE     := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.STORE_NO);
            V_TEMP_ROW.TERMINAL_NUMBER      := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_TERM_NO)||'0';
            V_TEMP_ROW.POS_COUNT            := CASE NVL(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.POS_COUNT), 0) WHEN '0' THEN '0000' ELSE '0001' END;
            V_TEMP_ROW.FILLER               := NULL;
            V_TEMP_ROW.DATA_SOURCE          := 'NEW_POS';
            V_TEMP_ROW.LOAD_DATE            := SYSDATE;
           INSERT INTO POS_DPST_TICKET_COUNTS VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'POS_BANKING_DAILY_LOAD.LOAD_POS_DPST_TICKET_COUNTS',
                                           SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                           V_TEMP_ROW.COST_CENTER_CODE,
                                           V_TEMP_ROW.TERMINAL_NUMBER,
                                           'POS_DPST_TICKET_COUNTS');
            RAISE;
        END;
     END LOOP;

     COMMIT;
     DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN
          ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_POS_DPST_TICKET_COUNTS',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000', 
                                    '0000000',  
                                    '0000000');
          ROLLBACK;
          RAISE;
END LOAD_POS_DPST_TICKET_COUNTS;

PROCEDURE LOAD_POS_INTERIM_DEPST(
/*******************************************************************************
This procedure is used to load the POS data into
"POS_INTERIM_DEPST" table with data extracted from PNP_CCN_INTERIM_DEPOSITS table
Created : 01/17/2017 AXK326 CCN Project....
Changed : 06/28/2017 gxg192 Changes to use CCN_COMMON_TOOLS instead of SD_COMMON_TOOLS
        : 08/03/2017 gxg192 Removed formatting on amount and emp no fields.
changed : 09/27/2017 rxa457 CCN project team
          Load date will always be inserted as SYDATE									
*******************************************************************************/
IN_DATE DATE)
AS

CURSOR POS_INTERIM_CUR IS
      SELECT '99' REGION,  -- defaulted to 99,
             NULL CTLCLK,
             '99' DIV_NO,
             CID.STORENBR COST_CENTER_CODE,
             CID.TERMNBR TERMINAL_NUMBER,
             'NA' TRAN_NO,
             CID.RLS_RUN_CYCLE RLSE_RUN,
             TO_CHAR(TO_DATE(CID.TRAN_DATE), 'mmddyy') TRAN_DATE,
             REPLACE(SUBSTR(CID.DTTZISO, 11, 5), '.', '')TRAN_TIME,
             '0' FILLER,
             LPAD(CID.TRANNBR,5,'0') TRAN_NO1,
             CID.EMPNBR AS EMP_NO,
             CID.TOTTRANAMT AS DEPST_AMOUNT
        FROM PNP_CCN_INTERIM_DEPOSITS CID
       WHERE RLS_RUN_CYCLE IN (SELECT RLS_RUN_CYCLE
                                FROM POS_CCN_LOAD_STATUS
                               WHERE TRUNC(START_TS) = TRUNC(IN_DATE));

   V_COUNT      NUMBER := 0;
   V_TCOUNT     NUMBER := 0;
   V_TEMP_ROW   BANKING.POS_INTERIM_DEPST%ROWTYPE;

BEGIN
     FOR REC IN POS_INTERIM_CUR
     LOOP
        BEGIN
            V_TEMP_ROW.REGION             := rec.REGION;          
            V_TEMP_ROW.CTLCLK             := rec.CTLCLK;         
            V_TEMP_ROW.DIV_NO             := rec.DIV_NO;          
            V_TEMP_ROW.COST_CENTER_CODE   := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.COST_CENTER_CODE);
            V_TEMP_ROW.TERMINAL_NUMBER    := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.TERMINAL_NUMBER);
            V_TEMP_ROW.TRAN_NO            := rec.TRAN_NO;         
            V_TEMP_ROW.RLSE_RUN           := rec.RLSE_RUN;
            V_TEMP_ROW.TRAN_DATE          := rec.TRAN_DATE;       
            V_TEMP_ROW.TRAN_TIME          := rec.TRAN_TIME;       
            V_TEMP_ROW.FILLER             := rec.FILLER;          
            V_TEMP_ROW.TRAN_NO1           := rec.TRAN_NO1;        
            V_TEMP_ROW.EMP_NO             := rec.EMP_NO;
            V_TEMP_ROW.DEPST_AMOUNT       := rec.DEPST_AMOUNT;
            V_TEMP_ROW.DATA_SOURCE        := 'NEW_POS';
            V_TEMP_ROW.LOAD_DATE          := SYSDATE;
            INSERT INTO POS_INTERIM_DEPST VALUES V_TEMP_ROW;

           V_COUNT   := V_COUNT + 1;
           IF V_COUNT > 100 THEN
               COMMIT;
               V_COUNT := 0;
           END IF;
           V_TCOUNT := V_TCOUNT + 1;
        EXCEPTION
            WHEN OTHERS THEN                 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                           'POS_BANKING_DAILY_LOAD.LOAD_POS_INTERIM_DEPST',
                                           SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                           V_TEMP_ROW.REGION, 
                                           V_TEMP_ROW.TERMINAL_NUMBER,
                                           'POS_INTERIM_DEPST');
                 RAISE;
        END;
     END LOOP;

     COMMIT;
     DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || V_TCOUNT);

EXCEPTION
    WHEN OTHERS THEN

         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'POS_BANKING_DAILY_LOAD.LOAD_POS_INTERIM_DEPST',
                                    SQLERRM||CHR(10)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                    '000000',
                                    '0000000',
                                    '0000000');
         ROLLBACK;
         RAISE;
END LOAD_POS_INTERIM_DEPST;

PROCEDURE POS_BANKING_DAILY_LOAD_SP(
/***********************************************************************
This Procedure is a wrapper for loading gift card and ticket/bags related data
from POS Interface tables to Banking tables.

Created : 06/21/2016 gxg192 CCN Project....
Changed :

***********************************************************************/
IN_DATE DATE
)
IS
   V_BATCH_NUMBER  BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
   V_TRANS_STATUS  BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
   V_CONTEXT       VARCHAR2(200);
   V_START_TIME    NUMBER;
BEGIN

   CCN_BATCH_PKG.INSERT_BATCH_JOB('POS_BANKING_DLY_LOAD', V_BATCH_NUMBER);
   CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

-- STEP 1
-- Call to LOAD_POS_CCN_LOAD_STATUS to load Records from PNP.CCN_load_status into pos ccn load status table
   V_START_TIME := DBMS_UTILITY.GET_TIME;
   V_CONTEXT := 'LOAD_POS_CCN_LOAD_STATUS';
   LOAD_POS_CCN_LOAD_STATUS(IN_DATE);
   DBMS_OUTPUT.PUT_LINE(V_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

-- STEP 2
-- Call to perform DailyLoad from POS new interface tables to POS_GIFT_CARD_POS_TRANS table
   V_START_TIME := DBMS_UTILITY.GET_TIME;
   V_CONTEXT := 'LOAD_POS_GIFT_CARD_POS_TRANS';
   LOAD_POS_GIFT_CARD_POS_TRANS(IN_DATE);
   DBMS_OUTPUT.PUT_LINE(V_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

-- STEP 3
-- Call to Generate UAR GIFT CARD TRANSACTION FILE
   V_START_TIME := DBMS_UTILITY.GET_TIME;
   V_CONTEXT := 'LOAD_POS_DPST_TICKET_COUNTS';
   LOAD_POS_DPST_TICKET_COUNTS(IN_DATE);
   DBMS_OUTPUT.PUT_LINE(V_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

-- STEP 4
-- Call to Generate UAR GIFT CARD TRANSACTION FILE
   V_START_TIME := DBMS_UTILITY.GET_TIME;
   V_CONTEXT := 'LOAD_POS_INTERIM_DEPST';
   LOAD_POS_INTERIM_DEPST(IN_DATE);
   DBMS_OUTPUT.PUT_LINE(V_CONTEXT|| ' completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

   CCN_BATCH_PKG.UPDATE_BATCH_JOB('POS_BANKING_DLY_LOAD', V_BATCH_NUMBER, V_TRANS_STATUS);
   CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;

END POS_BANKING_DAILY_LOAD_SP;

END POS_BANKING_DAILY_LOAD;