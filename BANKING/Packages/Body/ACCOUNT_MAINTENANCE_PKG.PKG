create or replace PACKAGE BODY         ACCOUNT_MAINTENANCE_PKG
AS
/**********************************************************
This Package contains all the procedures used in
account maintenance window

Created : 07/09/2015 jxc517 CCN Project....
Changed : rxa457 07/31/2017 CCN Project....
          Functions "IS_TRANSFER_VRTL_FTR" and "IS_BANK_TYPE_CHNG_VRTL_FTR" moved to VIRTUAL_FUTURE_MAINTENANCE_PKG
**********************************************************/

PROCEDURE ACCOUNT_MAINTENACE_UI_SP (
/*******************************************************************************
This procedure is intended to RETURN a ref cursor with data from banking
account maintenance related tables based on passed input bank account number

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/16/2015 jxc517 CCN Project....
          Modified code not to show virtual future as part of transfer process
Changed : 10/21/2015 jxc517 CCN Project....
          Modified code to show virtual future as part of lead bank type change process
Changed : 10/29/2015 jxc517 CCN Project....
          Modified code to include order by clause for bank MICR formats based on FORMAT_NAME
*******************************************************************************/
IN_BANK_ACCOUNT_NBR           IN     VARCHAR2
,OUT_BANK_ACCOUNT_REF_CUR        OUT REF_CURSOR
,OUT_BANK_ACCOUNT_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_LEAD_CC_REF_CUR        OUT REF_CURSOR
,OUT_BANK_LEAD_CC_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FORMAT_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FRMT_FTR_REF_CUR  OUT REF_CURSOR)
IS
    V_BANK_TYPE_CHNG_VRTL_FTR VARCHAR2(1);
BEGIN
    OPEN OUT_BANK_ACCOUNT_REF_CUR FOR
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;

    OPEN OUT_BANK_LEAD_CC_REF_CUR FOR
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LB.LEAD_STORE_NBR) COST_CENTER_NAME,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               NULL UPDATE_DATE,
               NULL LAST_UPD_USER_ID
          FROM LEAD_BANK_CC LB
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;

    OPEN OUT_BANK_MICR_FORMAT_REF_CUR FOR
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
         ORDER BY FORMAT_NAME;

    V_BANK_TYPE_CHNG_VRTL_FTR := VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_BANK_TYPE_CHNG_VRTL_FTR(IN_BANK_ACCOUNT_NBR);

    --V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' is to allow showing futures for virtual futures created as part of leads bank type change
    --EFFECTIVE_DATE > SYSDATE is NOT to allow showing futures for virtual futures created as part of transfer
    OPEN OUT_BANK_ACCOUNT_FTR_REF_CUR FOR
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND (V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' OR EFFECTIVE_DATE > SYSDATE)
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_LEAD_CC_FTR_REF_CUR FOR
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LBF.LEAD_STORE_NBR) COST_CENTER_NAME,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               FUTURE_ID
          FROM LEAD_BANK_CC_FUTURE LBF
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND (V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' OR EFFECTIVE_DATE > SYSDATE)
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_MICR_FRMT_FTR_REF_CUR FOR
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND (V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' OR EFFECTIVE_DATE > SYSDATE)
         ORDER BY FUTURE_ID, FORMAT_NAME;
END ACCOUNT_MAINTENACE_UI_SP;

PROCEDURE BUILD_TABLE_TYPES(
/******************************************************************************
This procedure is intended to build all the table types from input xml
for this process

Created : 07/09/2015 jxc517 CCN Project....
Changed : 01/15/2015 dxv848 CCN Project....
          Adding the condition if the bank_account effective_date is greater than the sysdate
          Then that bank_account in future table.
Changed : 07/12/2017 rxa457 CCN Project Team...
          Building Future TAB types when the save is initiated from Future tab irrespective of bank effective 
           date to get the correct future ID
*******************************************************************************/
    IN_XML                         IN     CLOB,
    O_BANK_ACCOUNT_REC                OUT BANK_ACCOUNT%ROWTYPE,
    O_BANK_ACCOUNT_FUTURE_REC         OUT BANK_ACCOUNT_FUTURE%ROWTYPE,
    O_LEAD_BANK_CC_REC                OUT LEAD_BANK_CC%ROWTYPE,
    O_LEAD_BANK_CC_FUTURE_REC         OUT LEAD_BANK_CC_FUTURE%ROWTYPE,
    O_BANK_MICR_FORMAT_TAB            OUT TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE,
    O_BANK_MICR_FORMAT_FUTURE_TAB     OUT TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    CURSOR TABLES_CUR IS
        SELECT DISTINCT TABLE_NAME
          FROM ALL_TAB_COLUMNS A
         WHERE OWNER = 'BANKING'
           AND TABLE_NAME NOT LIKE 'TEMP%'
           AND TABLE_NAME NOT LIKE '%$%';

    V_XML_BANK_ACCOUNT_FRAG         CLOB;
    V_XML_LEAD_BANK_CC_FRAG         CLOB;
    V_XML_BANK_MICR_FRAG            CLOB;
    V_COUNT                         INTEGER;
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_XML_BANK_MICR_FORMAT_FRAG     CLOB;
    V_FLAG                          VARCHAR2(1) := 'C';
    V_EFFECTIVE_DATE                BANK_ACCOUNT.EFFECTIVE_DATE%TYPE;
    V_FUTURE_ID                     NUMBER;
    V_BANK_ACCOUNT_NBR              BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE;
    V_BANK_MICR_FRMT_REC        BANK_MICR_FORMAT%ROWTYPE;
    V_BANK_MICR_FRMT_FTRE_REC   BANK_MICR_FORMAT_FUTURE%ROWTYPE;
BEGIN
    FOR rec IN TABLES_CUR LOOP 
        CASE rec.TABLE_NAME
            WHEN 'BANK_ACCOUNT' THEN --Single Record
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME) = 1) THEN
                    V_XML_BANK_ACCOUNT_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME).GETCLOBVAL();
                END IF;
            WHEN 'LEAD_BANK_CC' THEN --Single Record
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME) = 1) THEN
                    V_XML_LEAD_BANK_CC_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME).GETCLOBVAL();
                END IF;
            WHEN 'BANK_MICR_FORMAT' THEN --Multiple Records
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME||'_TABLE') = 1) THEN
                    V_XML_BANK_MICR_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME||'_TABLE').GETCLOBVAL();
                END IF;
            ELSE
                NULL;
        END CASE;
    END LOOP;
    V_EFFECTIVE_DATE := TO_DATE(V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/EFFECTIVE_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY HH12:MI:SS AM');
    --if the bank effective date is greater then the sysdate or If the save is initiated from the Future tab then it goes to future V_FLAG = 'F'
    IF TRUNC(V_EFFECTIVE_DATE) > TRUNC(SYSDATE) 
       OR V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/FUTURE_ID/text()') = 1 THEN
       --if the effective is greater then the sysdate then it goes to future so extracting the bank acount and getting the future id
       IF NOT V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/FUTURE_ID/text()') = 1 THEN
          V_BANK_ACCOUNT_NBR := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/BANK_ACCOUNT_NBR/text()').GETSTRINGVAL();
          V_FUTURE_ID := BANKING_COMMON_TOOLS.GET_FUTURE_ID(V_BANK_ACCOUNT_NBR);
       END IF;
      V_FLAG := 'F';
    END IF;
    IF V_XML_BANK_ACCOUNT_FRAG IS NOT NULL THEN
        IF V_FLAG = 'C' THEN --current
            TABLE_IU_PKG.BANK_ACCOUNT_ROWTYPE_SP('BANK_ACCOUNT'
                                                   ,V_XML_BANK_ACCOUNT_FRAG
                                                   ,O_BANK_ACCOUNT_REC);

        ELSE --future
            TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_ROWTYPE_SP('BANK_ACCOUNT_FUTURE'
                                                        ,REPLACE(V_XML_BANK_ACCOUNT_FRAG,'BANK_ACCOUNT>','BANK_ACCOUNT_FUTURE>')
                                                        ,O_BANK_ACCOUNT_FUTURE_REC);
							O_BANK_ACCOUNT_FUTURE_REC.FUTURE_ID := NVL(O_BANK_ACCOUNT_FUTURE_REC.FUTURE_ID,V_FUTURE_ID);
        END IF;
    END IF;

    IF V_XML_LEAD_BANK_CC_FRAG IS NOT NULL THEN
        IF V_FLAG = 'C' THEN --current
            TABLE_IU_PKG.LEAD_BANK_CC_ROWTYPE_SP('LEAD_BANK_CC'
                                                 ,V_XML_LEAD_BANK_CC_FRAG
                                                 ,O_LEAD_BANK_CC_REC);
        ELSE --future
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_ROWTYPE_SP('LEAD_BANK_CC_FUTURE'
                                                        ,REPLACE(V_XML_LEAD_BANK_CC_FRAG,'LEAD_BANK_CC>','LEAD_BANK_CC_FUTURE>')
                                                        ,O_LEAD_BANK_CC_FUTURE_REC);
            O_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID := NVL(O_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID,V_FUTURE_ID);
        END IF;
    END IF;
    IF V_XML_BANK_MICR_FRAG IS NOT NULL THEN
        V_COUNT := 1;
        WHILE SYS.XMLTYPE(V_XML_BANK_MICR_FRAG).EXISTSNODE('/BANK_MICR_FORMAT_TABLE/' || 'BANK_MICR_FORMAT' || '[' || V_COUNT || ']') = 1 LOOP
            V_XML_BANK_MICR_FORMAT_FRAG := SYS.XMLTYPE(V_XML_BANK_MICR_FRAG).EXTRACT('/BANK_MICR_FORMAT_TABLE/'|| 'BANK_MICR_FORMAT' || '[' || V_COUNT || ']').GETCLOBVAL();
            IF V_XML_BANK_MICR_FORMAT_FRAG IS NOT NULL THEN
                IF V_FLAG = 'C' THEN --current
                    TABLE_IU_PKG.BANK_MICR_FORMAT_ROWTYPE_SP('BANK_MICR_FORMAT'
                                                             ,V_XML_BANK_MICR_FORMAT_FRAG
                                                             ,V_BANK_MICR_FRMT_REC);
                    O_BANK_MICR_FORMAT_TAB(NVL(O_BANK_MICR_FORMAT_TAB.LAST, 0) +1) := V_BANK_MICR_FRMT_REC;
                ELSE --future
                    TABLE_IU_PKG.BANK_MICR_FRMT_FTR_ROWTYPE_SP('BANK_MICR_FORMAT_FUTURE'
                                                               ,REPLACE(V_XML_BANK_MICR_FORMAT_FRAG,'BANK_MICR_FORMAT>','BANK_MICR_FORMAT_FUTURE>')
                                                               ,V_BANK_MICR_FRMT_FTRE_REC);
                    V_BANK_MICR_FRMT_FTRE_REC.FUTURE_ID :=NVL(V_BANK_MICR_FRMT_FTRE_REC.FUTURE_ID,V_FUTURE_ID);
                    O_BANK_MICR_FORMAT_FUTURE_TAB(NVL(O_BANK_MICR_FORMAT_FUTURE_TAB.LAST, 0) +1) := V_BANK_MICR_FRMT_FTRE_REC;
                END IF;
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP;
    END IF;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_TABLE_TYPES ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_TABLE_TYPES;

PROCEDURE BUILD_FUTURE_FROM_CURRENT(
/******************************************************************************
This procedure is intended to build all the future table types from input current table types
for this process

Created : 10/07/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          code changes so that for bank account and bank MICR the effective dates should still carry forward
*******************************************************************************/
    IN_BANK_ACCOUNT_REC               IN     BANK_ACCOUNT%ROWTYPE,
    IN_LEAD_BANK_CC_REC               IN     LEAD_BANK_CC%ROWTYPE,
    IN_BANK_MICR_FORMAT_TAB           IN     TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE,
    O_BANK_ACCOUNT_FUTURE_REC            OUT BANK_ACCOUNT_FUTURE%ROWTYPE,
    O_LEAD_BANK_CC_FUTURE_REC            OUT LEAD_BANK_CC_FUTURE%ROWTYPE,
    O_BANK_MICR_FORMAT_FUTURE_TAB        OUT TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    V_FUTURE_ID            NUMBER := BANKING_COMMON_TOOLS.GET_FUTURE_ID(IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    V_INDEX                NUMBER := 0;
    V_BANK_MICR_FORMAT_REC BANK_MICR_FORMAT%ROWTYPE;
BEGIN
    --BANK_ACCOUNT_FUTURE
    O_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR       := IN_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE         := IN_BANK_ACCOUNT_REC.EFFECTIVE_DATE;
    O_BANK_ACCOUNT_FUTURE_REC.EXPIRATION_DATE        := NULL;
    O_BANK_ACCOUNT_FUTURE_REC.BANK_NAME              := IN_BANK_ACCOUNT_REC.BANK_NAME;
    O_BANK_ACCOUNT_FUTURE_REC.BOOK_KEEPER_NBR        := IN_BANK_ACCOUNT_REC.BOOK_KEEPER_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.BANK_AUTO_RECON_IND    := IN_BANK_ACCOUNT_REC.BANK_AUTO_RECON_IND;
    O_BANK_ACCOUNT_FUTURE_REC.RECON_START_DATE       := IN_BANK_ACCOUNT_REC.RECON_START_DATE;
    O_BANK_ACCOUNT_FUTURE_REC.RECON_BANK_ACCOUNT_NBR := IN_BANK_ACCOUNT_REC.RECON_BANK_ACCOUNT_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.JV_BOOK_KEEPER_REF     := IN_BANK_ACCOUNT_REC.JV_BOOK_KEEPER_REF;
    O_BANK_ACCOUNT_FUTURE_REC.JV_BANK_SHORT_NAME     := IN_BANK_ACCOUNT_REC.JV_BANK_SHORT_NAME;
    O_BANK_ACCOUNT_FUTURE_REC.IDI_BOOKKEEPER_REF     := IN_BANK_ACCOUNT_REC.IDI_BOOKKEEPER_REF;
    O_BANK_ACCOUNT_FUTURE_REC.IDI_BANK_SHORT_NAME    := IN_BANK_ACCOUNT_REC.IDI_BANK_SHORT_NAME;
    O_BANK_ACCOUNT_FUTURE_REC.ROUTING_NBR            := IN_BANK_ACCOUNT_REC.ROUTING_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.UPDATE_DATE            := SYSDATE;
    O_BANK_ACCOUNT_FUTURE_REC.LAST_UPD_USER_ID       := IN_BANK_ACCOUNT_REC.LAST_UPD_USER_ID;
    O_BANK_ACCOUNT_FUTURE_REC.FUTURE_ID              := V_FUTURE_ID;
    --LEAD_BANK_CC_FUTURE
    O_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR := IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    O_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR        := IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR;
    O_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE        := IN_LEAD_BANK_CC_REC.EFFECTIVE_DATE;
    O_LEAD_BANK_CC_FUTURE_REC.EXPIRATION_DATE       := NULL;
    O_LEAD_BANK_CC_FUTURE_REC.BANK_BRANCH_NBR       := IN_LEAD_BANK_CC_REC.BANK_BRANCH_NBR;
    O_LEAD_BANK_CC_FUTURE_REC.BANK_TYPE_CODE        := IN_LEAD_BANK_CC_REC.BANK_TYPE_CODE;
    O_LEAD_BANK_CC_FUTURE_REC.UPDATE_DATE           := SYSDATE;
    O_LEAD_BANK_CC_FUTURE_REC.LAST_UPD_USER_ID      := IN_LEAD_BANK_CC_REC.LAST_UPD_USER_ID;
    O_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID             := V_FUTURE_ID;
    --BANK_MICR_FORMAT_FUTURE
    V_INDEX := IN_BANK_MICR_FORMAT_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        V_BANK_MICR_FORMAT_REC := IN_BANK_MICR_FORMAT_TAB(V_INDEX);
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).BANK_ACCOUNT_NBR      := V_BANK_MICR_FORMAT_REC.BANK_ACCOUNT_NBR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).FORMAT_NAME           := V_BANK_MICR_FORMAT_REC.FORMAT_NAME;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).DJDE_FORM_PARM        := V_BANK_MICR_FORMAT_REC.DJDE_FORM_PARM;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).DJDE_FEED_PARM        := V_BANK_MICR_FORMAT_REC.DJDE_FEED_PARM;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_COST_CNTR        := V_BANK_MICR_FORMAT_REC.MICR_COST_CNTR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_ROUTING_NBR      := V_BANK_MICR_FORMAT_REC.MICR_ROUTING_NBR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_FORMAT_ACTNBR    := V_BANK_MICR_FORMAT_REC.MICR_FORMAT_ACTNBR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).EFFECTIVE_DATE        := V_BANK_MICR_FORMAT_REC.EFFECTIVE_DATE;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).EXPIRATION_DATE       := NULL;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).LAST_MAINTENANCE_DATE := V_BANK_MICR_FORMAT_REC.LAST_MAINTENANCE_DATE;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).LAST_MAINT_USER_ID    := V_BANK_MICR_FORMAT_REC.LAST_MAINT_USER_ID;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).UPDATE_DATE           := SYSDATE;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).LAST_UPD_USER_ID      := V_BANK_MICR_FORMAT_REC.LAST_UPD_USER_ID;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).FUTURE_ID             := V_FUTURE_ID;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_FORMAT_ID        := V_BANK_MICR_FORMAT_REC.MICR_FORMAT_ID;
        V_INDEX := IN_BANK_MICR_FORMAT_TAB.NEXT(V_INDEX);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_FUTURE_FROM_CURRENT ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_FUTURE_FROM_CURRENT;

PROCEDURE ACCNT_MNTNC_CURRENT_UPSERT_SP( 
/******************************************************************************
This procedure is intended to update following tables used in the
Account Maintenance Window that are current records
    Tables: 
       BANK_ACCOUNT
       LEAD_BANK_CC
       BANK_MICR_FORMAT

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/14/2015 jxc517 CCN Project....
          Code has been changed to deal with virtual futures
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
Changed : rxa457 07/18/2017 CCN Project Team...
          Removed unused IN parameter IN_BANK_TYPE_CHNG_VRTL_FTR from package 
           Call VIRTUAL_FUTURE_MAINTENANCE_PKG.VIRTUAL_FUTURE_UPSERT_SP
          Call to IS_REAL_FUTURE_BANK_ACCOUNT changed as VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_REAL_FUTURE_BANK_ACCOUNT 
           from "ACC_MEM_MAIN_COMMONTOOLS.IS_REAL_FUTURE_BANK_ACCOUNT"
Modified: 06/05/2018 nxk927 CCN Project Team...
          Removed the call to expire the deposit bag call and replaced with update procedure
*******************************************************************************/
    IN_BANK_ACCOUNT_REC                IN BANK_ACCOUNT%ROWTYPE,
    IN_LEAD_BANK_CC_REC                IN LEAD_BANK_CC%ROWTYPE,
    IN_BANK_MICR_FORMAT_TAB            IN TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE)
IS
    V_INDEX                     NUMBER := 0;
    V_REAL_FUTURE_BANK_ACCOUNT  VARCHAR2(1);
    V_TRANSFER_VRTL_FTR         VARCHAR2(1);
    V_BANK_TYPE_CHNG_VRTL_FTR  VARCHAR2(1);
BEGIN
    V_REAL_FUTURE_BANK_ACCOUNT := VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_REAL_FUTURE_BANK_ACCOUNT(IN_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR);
    V_TRANSFER_VRTL_FTR        := VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_TRANSFER_VRTL_FTR(IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    V_BANK_TYPE_CHNG_VRTL_FTR  := VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_BANK_TYPE_CHNG_VRTL_FTR(IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    TABLE_IU_PKG.BANK_ACCOUNT_I_SP(IN_BANK_ACCOUNT_REC);
    V_INDEX := IN_BANK_MICR_FORMAT_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(IN_BANK_MICR_FORMAT_TAB(V_INDEX));
        V_INDEX := IN_BANK_MICR_FORMAT_TAB.NEXT(V_INDEX);
    END LOOP;
    IF IN_LEAD_BANK_CC_REC.EXPIRATION_DATE IS NOT NULL THEN
        DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR,
                                                                     NULL, --bank account number
                                                                     NULL, --micr format id
                                                                     IN_LEAD_BANK_CC_REC.EXPIRATION_DATE);
    END IF;
    DEPOSIT_BAG_MAINTENANCE_PKG.IF_EXISTS_UPD_BAG_TICK_REC(IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR,
                                                           IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,
                                                           IN_LEAD_BANK_CC_REC.EFFECTIVE_DATE);
    IF IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR IS NOT NULL THEN
        TABLE_IU_PKG.LEAD_BANK_CC_I_SP(IN_LEAD_BANK_CC_REC);
    END IF;
    IF V_REAL_FUTURE_BANK_ACCOUNT = 'N' THEN
        VIRTUAL_FUTURE_MAINTENANCE_PKG.VIRTUAL_FUTURE_UPSERT_SP(IN_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR,
                                                                V_REAL_FUTURE_BANK_ACCOUNT,
                                                                V_TRANSFER_VRTL_FTR);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_CURRENT_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_CURRENT_UPSERT_SP;

PROCEDURE CREATE_LEAD_CHLD_FTR_FRM_CURR ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  to create future records from current records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          Removed code to create member futures for the lead from current future
        : 11/04/2015 nxk927 CCN Project....
          added on hand quantity and YTD order quantity to reset to 0 for futures
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR         IN     VARCHAR2,
    IN_EFFECTIVE_DATE           IN     DATE,
    IN_FUTURE_ID                IN     NUMBER)
IS
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
    CURSOR store_micr_format_dtls_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM STORE_MICR_FORMAT_DTLS A
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM BANK_DEP_TICK A
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_bag_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM BANK_DEP_BAG_TICK A
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    V_BANK_DEP_TICK_FUTURE           BANK_DEP_TICK_FUTURE%ROWTYPE;
BEGIN
    FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
        FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            bank_dep_tick_rec.EFFECTIVE_DATE           := IN_EFFECTIVE_DATE;
            bank_dep_tick_rec.EXPIRATION_DATE          := NULL;
            bank_dep_tick_rec.DEP_TKTS_ONHAND_QTY      := 0;
            bank_dep_tick_rec.YTD_DEP_TKTS_ORDERED_QTY := 0;
            TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_I_SP(bank_dep_tick_rec);
        END LOOP;
        FOR str_micr_format_rec IN store_micr_format_dtls_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            str_micr_format_rec.EFFECTIVE_DATE  := IN_EFFECTIVE_DATE;
            str_micr_format_rec.EXPIRATION_DATE := NULL;
            TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_I_SP(str_micr_format_rec);
        END LOOP;
        FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            bank_dep_bag_tick_rec.EFFECTIVE_DATE         := IN_EFFECTIVE_DATE;
            bank_dep_bag_tick_rec.EXPIRATION_DATE        := NULL;
            bank_dep_bag_tick_rec.DEPBAG_ONHAND_QTY      := 0;
            bank_dep_bag_tick_rec.DEPBAG_YTD_ORDERED_QTY := 0;
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(bank_dep_bag_tick_rec);
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_LEAD_CHLD_FTR_FRM_CURR ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CREATE_LEAD_CHLD_FTR_FRM_CURR;

PROCEDURE EXPIRE_PREV_CURR_LEAD(
/*******************************************************************************
    This procedure is intended to check and expire previous current records
    before inserting new record

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_LEAD_STORE_NBR      IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE)
IS
    CURSOR lead_bank_cc_cur IS
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_cur IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_CURR_LEAD';
    V_MEMBER_STORE               VARCHAR2(10);
    V_EXPIRE_DATE                DATE := IN_NEW_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR mb_rec IN member_bank_cc_cur LOOP
        mb_rec.EXPIRATION_DATE := GREATEST(mb_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        V_MEMBER_STORE := mb_rec.MEMBER_STORE_NBR;
        IF mb_rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                         NULL, --bank account number
                                                                         NULL, --micr format id
                                                                         mb_rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                mb_rec.EXPIRATION_DATE);
        END IF;
        TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mb_rec);
    END LOOP;
    FOR lb_rec IN lead_bank_cc_cur LOOP
        lb_rec.EXPIRATION_DATE := GREATEST(lb_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF lb_rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                         NULL, --bank account number
                                                                         NULL, --micr format id
                                                                         lb_rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                lb_rec.EXPIRATION_DATE);
        END IF;
        IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lb_rec.LEAD_STORE_NBR,
                                                         lb_rec.LEAD_BANK_ACCOUNT_NBR,
                                                         lb_rec.EXPIRATION_DATE,
                                                         NULL) = 'Y' THEN
            RAISE lead_exprd_with_actv_chlds;
        END IF;
        TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lb_rec);
    END LOOP;
EXCEPTION
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members/store deposit ticket. Please correct the previous future concentration/store deposit ticket first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_CURR_LEAD', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_CURR_LEAD;

PROCEDURE EXPIRE_PREV_FTR_LEAD(
/*******************************************************************************
    This procedure is intended to check and expire previous future records
    before inserting new record

Created : Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_LEAD_STORE_NBR      IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE)
IS
    CURSOR lead_bank_cc_future_cur IS
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_future_cur IS
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_FTR_LEAD';
    V_MEMBER_STORE               VARCHAR2(10);
    V_EXPIRE_DATE                DATE := IN_NEW_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR lbf_rec IN lead_bank_cc_future_cur LOOP
        FOR mbf_rec IN member_bank_cc_future_cur LOOP
            mbf_rec.EXPIRATION_DATE := GREATEST(mbf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            V_MEMBER_STORE := mbf_rec.MEMBER_STORE_NBR;
            IF mbf_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                           NULL, --bank account number
                                                                           NULL, --micr format id
                                                                           mbf_rec.FUTURE_ID,
                                                                           mbf_rec.EXPIRATION_DATE);
                DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                      mbf_rec.FUTURE_ID,
                                                                      mbf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(mbf_rec);
        END LOOP;
        lbf_rec.EXPIRATION_DATE := GREATEST(lbf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF lbf_rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                       NULL, --bank account number
                                                                       NULL, --micr format id
                                                                       lbf_rec.FUTURE_ID,
                                                                       lbf_rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                  lbf_rec.FUTURE_ID,
                                                                  lbf_rec.EXPIRATION_DATE);
        END IF;
        IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lbf_rec.LEAD_STORE_NBR,
                                                         lbf_rec.LEAD_BANK_ACCOUNT_NBR,
                                                         lbf_rec.EXPIRATION_DATE,
                                                         lbf_rec.FUTURE_ID) = 'Y' THEN
            RAISE lead_exprd_with_actv_chlds;
        END IF;
        TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(lbf_rec);
    END LOOP;
EXCEPTION
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members. Please correct the previous future concentration first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_FTR_LEAD', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_FTR_LEAD;

PROCEDURE EXPIRE_PREVIOUS_LEAD(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_LEAD_STORE_NBR      IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE)
IS
BEGIN
    EXPIRE_PREV_CURR_LEAD(IN_BANK_ACCOUNT_NBR, IN_LEAD_STORE_NBR, IN_NEW_EFFECTIVE_DATE);
    EXPIRE_PREV_FTR_LEAD(IN_BANK_ACCOUNT_NBR, IN_LEAD_STORE_NBR, IN_NEW_EFFECTIVE_DATE);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREVIOUS_LEAD', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREVIOUS_LEAD;

PROCEDURE ACCNT_MNTNC_FUTURE_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the
Account Maintenance Window that are future records
    Tables: 
       BANK_ACCOUNT_FUTURE
       LEAD_BANK_CC_FUTURE
       BANK_MICR_FORMAT_FUTURE
Expire following tables used in the Account Maintenance Window that are current records
    Tables: 
       BANK_ACCOUNT
       LEAD_BANK_CC
       BANK_MICR_FORMAT

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/08/2015 jxc517 CCN Project....
          bug on 10/07/2015 in JIRA requires future dated deposit ticket and store MICR
          details insertion not valid for new futures that are getting created
Changed : 10/21/2015 jxc517 CCN Project....
          code changes so that for bank account and bank MICR the effective dates should still carry forward
Changed : 01/15/2015 dxv848 CCN Project....
          Added the condition if we adding a new bank_account without lead_store then
          it wont check for lead_bank_cc_future
          12/08/2015 dxv848 CCN Project....
          Added the code to expire the previous member for the future lead..
*******************************************************************************/
    IN_BANK_ACCOUNT_FUTURE_REC         IN BANK_ACCOUNT_FUTURE%ROWTYPE,
    IN_LEAD_BANK_CC_FUTURE_REC         IN LEAD_BANK_CC_FUTURE%ROWTYPE,
    IN_BANK_MICR_FORMAT_FUTURE_TAB     IN TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    V_INDEX               NUMBER := 0;
    V_LEAD_BANK_CC_REC    LEAD_BANK_CC%ROWTYPE;
    V_BANKACC_LEAD_REC    LEAD_BANK_CC%ROWTYPE;
    V_MEMBER_STORE_REC    MEMBER_BANK_CC%ROWTYPE;
    V_LEAD_BANK_NBR       LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_LEAD_STORE_NBR      LEAD_BANK_CC.LEAD_STORE_NBR%TYPE;
BEGIN
    V_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR);
    V_MEMBER_STORE_REC := BANKING_COMMON_TOOLS.GET_MBR_STORE_NBR_FOR_LEAD_STR(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR);
    V_BANKACC_LEAD_REC := BANKING_COMMON_TOOLS.GET_LEADBANK_FOR_BANKACC_NBR(IN_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR);
    -- check if the future lead is currently lead
    IF V_LEAD_BANK_CC_REC.LEAD_STORE_NBR IS NOT NULL THEN
        IF V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR =  IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR THEN
            V_LEAD_BANK_NBR := IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR;
        ELSE
            V_LEAD_BANK_NBR := V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
        END IF;
        --lead details changed for the same account number, expire child from current
        EXPIRE_PREVIOUS_LEAD(V_LEAD_BANK_NBR,
                             IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR,
                             IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE);
    ELSIF
        -- check if the future lead is current member to another lead
        (V_MEMBER_STORE_REC.MEMBER_STORE_NBR IS NOT NULL
        AND V_MEMBER_STORE_REC.MEMBER_STORE_NBR =  IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR) THEN
        --lead details changed for the different account number, expire child from current
        -- For expiring the member,Directly we are calling the expire previous cuurent member. because if we have future member it already delete the future in the ACCNT_MNTNC_LEAD_PROCESS process
        -- so we are direclty calling thr expire prev curent member
        ACC_MEM_MAIN_COMMONTOOLS.EXPIRE_PREV_CURR_MEM(V_MEMBER_STORE_REC.LEAD_BANK_ACCOUNT_NBR,
                                                     V_MEMBER_STORE_REC.LEAD_STORE_NBR,
                                                     V_MEMBER_STORE_REC.MEMBER_STORE_NBR,
                                                     IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE);
    ELSE
        ACC_MEM_MAIN_COMMONTOOLS.EXPIRE_PREVIOUS_BANK_ACCOUNT(IN_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR,
                                                              IN_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE,
                                                              'ACCNT_MNTNC');
    END IF;
    -- We need to check if the bank_account also having the current lead attach to it
    -- if the bank account current lead_cost center is  present then expire the lead
    IF V_BANKACC_LEAD_REC.LEAD_STORE_NBR IS NOT NULL THEN
        IF V_BANKACC_LEAD_REC.LEAD_BANK_ACCOUNT_NBR =  IN_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR THEN
            V_LEAD_BANK_NBR := IN_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR;
        ELSE
            V_LEAD_BANK_NBR := V_BANKACC_LEAD_REC.LEAD_BANK_ACCOUNT_NBR;
        END IF;
        --lead details changed for the same account number, expire child from current
        EXPIRE_PREVIOUS_LEAD(V_LEAD_BANK_NBR,
                             V_BANKACC_LEAD_REC.LEAD_STORE_NBR,
                             IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE);
    END IF;
    TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(IN_BANK_ACCOUNT_FUTURE_REC);
    V_INDEX := IN_BANK_MICR_FORMAT_FUTURE_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(IN_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX));
        V_INDEX := IN_BANK_MICR_FORMAT_FUTURE_TAB.NEXT(V_INDEX);
    END LOOP;
    --IF we are adding a new bank_account without lead_store then it wont check for lead_bank_cc_future
    IF IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR IS NOT NULL THEN
       TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(IN_LEAD_BANK_CC_FUTURE_REC);
    END IF;

    IF V_LEAD_BANK_CC_REC.LEAD_STORE_NBR IS NOT NULL
       AND V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR =  IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR THEN
       --lead details changed for the same account number, create child futures from current
				CREATE_LEAD_CHLD_FTR_FRM_CURR(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR,
                                      IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE,
                                      IN_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_FUTURE_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_FUTURE_UPSERT_SP;

PROCEDURE ACC_MAIN_FUTURE_LEAD (
/******************************************************************************
	This procedure check the future lead_store attaching to the bank is having
  an existing future by passing the lead_store_nbr
  If we attachment a cost center as lead(L1) to bank with future effective date
  that lead cost center(L1) is already a future lead for another bank
  1) if the future is present the delete the future and
  2) Updates the expiration date(re-activate current)

Created : 12/04/2015 dxv848 CCN Project....

*******************************************************************************/
IN_LEAD_STORE_NBR VARCHAR2)
IS
    V_TEMP_LEAD_BANK_ACCOUNT_NBR    LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_LEAD_ST_REC                   LEAD_BANK_CC%ROWTYPE;
    V_GET_MEM_STORE_REC             MEMBER_BANK_CC%ROWTYPE;

BEGIN
    --check if the lead cost_center attaching to the bank has existing future lead
    FOR each_lead IN (SELECT *
                        FROM LEAD_BANK_CC_FUTURE
                       WHERE LEAD_STORE_NBR =IN_LEAD_STORE_NBR
                         AND EXPIRATION_DATE is NULL) LOOP

        IF NVL(V_TEMP_LEAD_BANK_ACCOUNT_NBR, 'XXX') <> each_lead.LEAD_BANK_ACCOUNT_NBR THEN
            V_TEMP_LEAD_BANK_ACCOUNT_NBR := each_lead.LEAD_BANK_ACCOUNT_NBR;
            -- before delete check if the member have virtual futures
            ACC_MEM_MAIN_COMMONTOOLS.UNEXPR_REAL_MBRS (V_TEMP_LEAD_BANK_ACCOUNT_NBR);
            --Delete all the futures for this Bank Account
            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(V_TEMP_LEAD_BANK_ACCOUNT_NBR, each_lead.FUTURE_ID);
            --get the lead bank deatils passing the lead store and get the member store details passing the lead store
            V_LEAD_ST_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(each_lead.LEAD_STORE_NBR);
            V_GET_MEM_STORE_REC:= BANKING_COMMON_TOOLS.GET_MBR_STORE_NBR_FOR_LEAD_STR(each_lead.LEAD_STORE_NBR);
            --the future lead store is also current lead for another bank
            IF (each_lead.LEAD_STORE_NBR = V_LEAD_ST_REC.LEAD_STORE_NBR) THEN
                --Re-Activate all the expired records
                ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(V_LEAD_ST_REC.LEAD_BANK_ACCOUNT_NBR);
            --if the future lead store is the member for the current lead then unexpire the current
            ELSIF (each_lead.LEAD_STORE_NBR = V_GET_MEM_STORE_REC.MEMBER_STORE_NBR) THEN
                ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(V_GET_MEM_STORE_REC.LEAD_BANK_ACCOUNT_NBR);
            ELSE
                ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(V_TEMP_LEAD_BANK_ACCOUNT_NBR);
            END IF;
        END IF;
    END LOOP;

END ACC_MAIN_FUTURE_LEAD;

PROCEDURE ACC_MAIN_FUTURE_MEM (
/******************************************************************************
	This procedure check the future lead_store attaching to the bank is having
  an existing future by passing the lead_store_nbr
  If we attachment a cost center as lead(L1) to bank with future effective date
  that lead cost center(L1) is already a future member for another bank
  1) if the future is present the delete the future and
  2) Updates the expiration date(re-activate current)


Created : 12/04/2015 dxv848 CCN Project....

*******************************************************************************/
IN_LEAD_STORE_NBR VARCHAR2)
IS
    V_LEAD_BANK_CC_REC              LEAD_BANK_CC%ROWTYPE;
    V_LEAD_STR_NBR                  MEMBER_BANK_CC.MEMBER_STORE_NBR%TYPE;

BEGIN
    V_LEAD_STR_NBR     := BANKING_COMMON_TOOLS.GET_LEAD_STORE_NBR_FOR_MBR_STR(IN_LEAD_STORE_NBR); -- paasing the curr store and get the lead_str_nbr
    V_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(V_LEAD_STR_NBR);  --- passing lead store number and get the lead_bank_cc details
    --check if the lead cost_center attaching to the bank has existing future member
    FOR each_mbr IN (SELECT *
                       FROM MEMBER_BANK_CC_FUTURE
                      WHERE MEMBER_STORE_NBR=IN_LEAD_STORE_NBR
                        AND EXPIRATION_DATE is NULL) LOOP
        --Delete all the futures for this member store
         ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(each_mbr.LEAD_BANK_ACCOUNT_NBR, each_mbr.FUTURE_ID);
         --Re-Activate the expired records for the member
        ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR, V_LEAD_STR_NBR, each_mbr.MEMBER_STORE_NBR);
    END LOOP;
END ACC_MAIN_FUTURE_MEM;

PROCEDURE ACC_MAIN_FUTURE_BANK (
/******************************************************************************
	This procedure check if the bank attaching to the future lead_store  is having
  an existing future by passing the lead_store_nbr and bank account number
  If we attachment a cost center as lead(L1) to bank with future effective date
  that bank is already having a future
  1) if the future is present the delete the future and
  2) Updates the expiration date(re-activate current)

Created : 12/04/2015 dxv848 CCN Project....
Modified: 04/04/2016 dxv848 CCn project....
          added the condition to unexpire the current lead store which is attached to the bank in future
          (add the code which is missed when merging the code)
          scenario: if the bank account attached with future lead cost center which is also currently lead is another bank
          and removed the variables which is not used.
*******************************************************************************/
IN_BANK_ACC_NBR VARCHAR2)
IS
    V_GET_MEM_STORE_REC             MEMBER_BANK_CC%ROWTYPE;
    V_LEAD_ST_BANK_REC              LEAD_BANK_CC%ROWTYPE;
BEGIN
    --check if the lead cost_center attaching to the bank has existing future bank
    FOR each_bank IN (SELECT *
                        FROM LEAD_BANK_CC_FUTURE
                       WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACC_NBR)LOOP
        --Get the lead bank details passing the lead store of the future bank
        V_LEAD_ST_BANK_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(each_bank.LEAD_STORE_NBR);
        IF NVL(IN_BANK_ACC_NBR, 'XXX') = each_bank.LEAD_BANK_ACCOUNT_NBR THEN
            --Delete all the futures for this Bank Account
            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(IN_BANK_ACC_NBR, each_bank.FUTURE_ID);
            --Re-Activate all the expired records of current bank
            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(IN_BANK_ACC_NBR);
        END IF;
        --the bank future lead is lead in future and current also(currently lead with diff bank)
        IF (each_bank.LEAD_STORE_NBR = V_LEAD_ST_BANK_REC.LEAD_STORE_NBR) THEN
            --Re-Activate all the expired records
            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(V_LEAD_ST_BANK_REC.LEAD_BANK_ACCOUNT_NBR);
        ELSE
            -- if the bank lead_store is current a member then reactivate the lead
            -- get the member store details by passing the lead store number and unexpire it
            V_GET_MEM_STORE_REC:= BANKING_COMMON_TOOLS.GET_MBR_STORE_NBR_FOR_LEAD_STR(each_bank.LEAD_STORE_NBR);
            ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP(V_GET_MEM_STORE_REC.LEAD_BANK_ACCOUNT_NBR, V_GET_MEM_STORE_REC.LEAD_STORE_NBR, each_bank.LEAD_STORE_NBR);
        END IF;
    END LOOP;
 END ACC_MAIN_FUTURE_BANK;

PROCEDURE ACCNT_MNTNC_LEAD_PROCESS (
/******************************************************************************
	This procedure performs the core insert/update process for Account Maintenance Window
  This Procdedure does the following
  it call the below procedures and check if the lead attached from IU has the future
  ACC_MAIN_FUTURE_LEAD
  ACC_MAIN_FUTURE_MEM
  ACC_MAIN_FUTURE_BANK

Created : 12/04/2015 dxv848 CCN Project....
Modified: 04/04/2016 dxv848 CCN Project....
          Removed the variable in ACC_MAIN_FUTURE_BANK which is not used
*******************************************************************************/
IN_LEAD_STORE_NBR          varchar2,
IN_LEAD_BANK_ACCOUNT_NBR   varchar2)
IS

BEGIN
    --check if the lead cost_center attaching to the bank has existing future lead
    ACC_MAIN_FUTURE_LEAD(IN_LEAD_STORE_NBR);
    --check if the lead cost_center attaching to the bank has existing future member
    ACC_MAIN_FUTURE_MEM(IN_LEAD_STORE_NBR);
    --check if the lead cost_center attaching to the bank has existing future bank
    ACC_MAIN_FUTURE_BANK(IN_LEAD_BANK_ACCOUNT_NBR);

END ACCNT_MNTNC_LEAD_PROCESS;

PROCEDURE ACCNT_MNTNC_UI_UPSERT_SP (
/******************************************************************************
	This procedure performs the core insert/update process for Account Maintenance Window

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/07/2015 jxc517 CCN Project....
          Added logic to support future dated lead effective dates, to create future details
        : 12/10/2015 dxv848 added to logic to check for the future which is already exists
Changed : 07/07/2017 rxa457 CCN Project Team...
              ACCNT_MNTNC_LEAD_PROCESS should be called ahead of calling Business Rules Package and Future upsert
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
    V_BANK_ACCOUNT_REC                BANK_ACCOUNT%ROWTYPE;
    V_BANK_ACCOUNT_FUTURE_REC         BANK_ACCOUNT_FUTURE%ROWTYPE;
    V_LEAD_BANK_CC_REC                LEAD_BANK_CC%ROWTYPE;
    V_LEAD_BANK_CC_FUTURE_REC         LEAD_BANK_CC_FUTURE%ROWTYPE;
    V_BANK_MICR_FORMAT_TAB            TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE;
    V_BANK_MICR_FORMAT_FUTURE_TAB     TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE;
    V_ROW_DATA                        XMLTYPE := SYS.XMLTYPE(IN_ROW_DATA);
		V_FUTURE_ID                       BANK_ACCOUNT_FUTURE.FUTURE_ID%TYPE;
		V_BANK_EFFECTIVE_DATE             BANK_ACCOUNT.EFFECTIVE_DATE%TYPE;
		V_LEAD_EFFECTIVE_DATE             LEAD_BANK_CC.EFFECTIVE_DATE%TYPE;
		V_BANK_ACCOUNT_NBR                BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE;
		V_LEAD_STORE_NBR                  LEAD_BANK_CC.LEAD_STORE_NBR%TYPE;
    V_CHK_BANK_EFFETCIVE_DATE         LEAD_BANK_CC.EFFECTIVE_DATE%TYPE;		
    V_CHK_LEAD_EFFETCIVE_DATE         LEAD_BANK_CC.EFFECTIVE_DATE%TYPE;		
BEGIN
    --Fetching Lead Effective Date, Bank Effective Date, Lead Store nbr and bank account Nbr from the input row data
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/FUTURE_ID/text()') = 1 THEN
			 V_FUTURE_ID := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/FUTURE_ID/text()').GETSTRINGVAL();
	  END IF;
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/EFFECTIVE_DATE/text()') = 1 THEN
       V_BANK_EFFECTIVE_DATE := TO_DATE(V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/EFFECTIVE_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY HH12:MI:SS AM');
		END IF;
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/LEAD_BANK_CC/EFFECTIVE_DATE/text()') = 1 THEN
       V_LEAD_EFFECTIVE_DATE := TO_DATE(V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/LEAD_BANK_CC/EFFECTIVE_DATE/text()').GETSTRINGVAL(), 'MM-DD-YYYY HH12:MI:SS AM');
		END IF;
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/BANK_ACCOUNT_NBR/text()') = 1 THEN
			V_BANK_ACCOUNT_NBR := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/BANK_ACCOUNT_NBR/text()').GETSTRINGVAL();
    END IF;		
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/LEAD_BANK_CC/LEAD_STORE_NBR/text()') = 1 THEN
			 V_LEAD_STORE_NBR   := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/LEAD_BANK_CC/LEAD_STORE_NBR/text()').GETSTRINGVAL();
    END IF;

    --For all Futures, System needs to first delete any existing Futures before generating the Future ID or building table types
    --Calling ACCNT_MNTNC_LEAD_PROCESS ahead of BUILD_TABLE_TYPES and BUILD_FUTURE_FROM_CURRENT will ensure corrrect generation of future ID
		IF V_FUTURE_ID IS NOT NULL OR V_LEAD_EFFECTIVE_DATE > TRUNC(SYSDATE) THEN
		   IF V_LEAD_EFFECTIVE_DATE >= V_BANK_EFFECTIVE_DATE THEN
			    ACCNT_MNTNC_LEAD_PROCESS(V_LEAD_STORE_NBR,V_BANK_ACCOUNT_NBR);
			 END IF;
		END IF;
		
		--Below code runs once per tab, which means we run either current or future tab at a time but not both at the same time
    BUILD_TABLE_TYPES(IN_ROW_DATA,
                      V_BANK_ACCOUNT_REC,
                      V_BANK_ACCOUNT_FUTURE_REC,
                      V_LEAD_BANK_CC_REC,
                      V_LEAD_BANK_CC_FUTURE_REC,
                      V_BANK_MICR_FORMAT_TAB,
                      V_BANK_MICR_FORMAT_FUTURE_TAB);

    --If an user changes the lead bank type from "I" to "L" with a future date (he can do this only from current tab)
    --We should just expire the "I" record in current tab but create a virtual future with bank type as "I"
    --The future "I" comes to current once the date hits, so this "I" record should go into future table even though
    --we got them as current details from UI. Below IF condition will take care of this particular scenario
		IF TRUNC(V_LEAD_BANK_CC_REC.EFFECTIVE_DATE) > TRUNC(SYSDATE)  THEN
				BUILD_FUTURE_FROM_CURRENT(V_BANK_ACCOUNT_REC,
                                  V_LEAD_BANK_CC_REC,
                                  V_BANK_MICR_FORMAT_TAB,
                                  V_BANK_ACCOUNT_FUTURE_REC,
                                  V_LEAD_BANK_CC_FUTURE_REC,
                                  V_BANK_MICR_FORMAT_FUTURE_TAB);
        V_BANK_ACCOUNT_REC := NULL;
        V_LEAD_BANK_CC_REC := NULL;
        V_BANK_MICR_FORMAT_TAB.DELETE();
    ELSE
				--invoke business rules only for current records as well as future records for "SAVES" initiated from both current and future tab; 
				--Will skip business rules for all "Virtual bank account" scenarios where Bank effective date is current and Lead effective date is in Future
				IF V_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE IS NULL --Current Non Virtual Record
					 OR 
					 TRUNC(V_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE) > TRUNC(SYSDATE) THEN --Future Non Virtual Record
					       BUSINESS_RULES_PKG.ACCOUNT_MAINTENANCE_BR_SP(V_BANK_ACCOUNT_REC,
																											        V_BANK_ACCOUNT_FUTURE_REC,
																											        V_LEAD_BANK_CC_REC,
																											        V_LEAD_BANK_CC_FUTURE_REC,
																											        V_BANK_MICR_FORMAT_TAB,
																											        V_BANK_MICR_FORMAT_FUTURE_TAB);
        END IF;
		END IF;
		
    IF V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR IS NOT NULL THEN --Current Details
				ACCNT_MNTNC_CURRENT_UPSERT_SP(V_BANK_ACCOUNT_REC,
                                      V_LEAD_BANK_CC_REC,
                                      V_BANK_MICR_FORMAT_TAB);
    ELSE --Future Details
				ACCNT_MNTNC_FUTURE_UPSERT_SP(V_BANK_ACCOUNT_FUTURE_REC,
                                     V_LEAD_BANK_CC_FUTURE_REC,
                                     V_BANK_MICR_FORMAT_FUTURE_TAB);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_UPSERT_SP;

PROCEDURE ACCNT_MNTNC_CURRENT_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process for current records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 08/18/2015 jxc517 CCN Project....
          Added logic to take care of new child table STORE_MICR_FORMAT_DTL for 
          parent table BANK_MICR_FORMAT
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2)
IS
    CURSOR bank_account_cur IS 
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR mbr_bank_cc_cur(IN_LEAD_STORE_NBR IN VARCHAR2) IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR;
    CURSOR bank_micr_format_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR store_micr_format_dtls_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_bag_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
BEGIN
    FOR bank_account_rec IN bank_account_cur LOOP
        FOR bank_micr_format_rec IN bank_micr_format_cur LOOP
            FOR str_micr_format_rec IN store_micr_format_dtls_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_D_SP(str_micr_format_rec);
            END LOOP;
            TABLE_IU_PKG.BANK_MICR_FORMAT_D_SP(bank_micr_format_rec);
        END LOOP;
        FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
            FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                FOR bank_dep_tick_rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
                END LOOP;
                FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(bank_dep_bag_tick_rec);
                END LOOP;
                TABLE_IU_PKG.MEMBER_BANK_CC_D_SP(mbr_bank_cc_rec);
            END LOOP;
            FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
            END LOOP;
            FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(bank_dep_bag_tick_rec);
            END LOOP;
            TABLE_IU_PKG.LEAD_BANK_CC_D_SP(lead_bank_cc_rec);
        END LOOP;
        TABLE_IU_PKG.BANK_ACCOUNT_D_SP(bank_account_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_CURRENT_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_CURRENT_DELETE_SP;

END ACCOUNT_MAINTENANCE_PKG;