CREATE OR REPLACE 
PACKAGE BODY ACCOUNT_MAINTENANCE_PKG
AS
/**********************************************************
This Package contains all the procedures used in
account maintenance window

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
**********************************************************/
PROCEDURE ACCOUNT_MAINTENACE_UI_SP (
/*******************************************************************************
This procedure is intended to RETURN a ref cursor with data from banking
account maintenance related tables based on passed input bank account number

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR           IN     VARCHAR2
,OUT_BANK_ACCOUNT_REF_CUR        OUT REF_CURSOR
,OUT_BANK_ACCOUNT_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_LEAD_CC_REF_CUR        OUT REF_CURSOR
,OUT_BANK_LEAD_CC_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FORMAT_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FRMT_FTR_REF_CUR  OUT REF_CURSOR)
IS
BEGIN
    OPEN OUT_BANK_ACCOUNT_REF_CUR FOR
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;

    OPEN OUT_BANK_ACCOUNT_FTR_REF_CUR FOR
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_LEAD_CC_REF_CUR FOR
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LB.LEAD_STORE_NBR) COST_CENTER_NAME,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               NULL UPDATE_DATE,
               NULL LAST_UPD_USER_ID
          FROM LEAD_BANK_CC LB
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;

    OPEN OUT_BANK_LEAD_CC_FTR_REF_CUR FOR
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LBF.LEAD_STORE_NBR) COST_CENTER_NAME,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               FUTURE_ID
          FROM LEAD_BANK_CC_FUTURE LBF
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_MICR_FORMAT_REF_CUR FOR
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;

    OPEN OUT_BANK_MICR_FRMT_FTR_REF_CUR FOR
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
         ORDER BY FUTURE_ID;
END ACCOUNT_MAINTENACE_UI_SP;

PROCEDURE BUILD_TABLE_TYPES(
/******************************************************************************
This procedure is intended to build all the table types from input xml
for this process

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_XML                         IN     CLOB,
    O_BANK_ACCOUNT_REC                OUT BANK_ACCOUNT%ROWTYPE,
    O_BANK_ACCOUNT_FUTURE_REC         OUT BANK_ACCOUNT_FUTURE%ROWTYPE,
    O_LEAD_BANK_CC_REC                OUT LEAD_BANK_CC%ROWTYPE,
    O_LEAD_BANK_CC_FUTURE_REC         OUT LEAD_BANK_CC_FUTURE%ROWTYPE,
    O_BANK_MICR_FORMAT_TAB            OUT TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE,
    O_BANK_MICR_FORMAT_FUTURE_TAB     OUT TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    CURSOR TABLES_CUR IS
        SELECT DISTINCT TABLE_NAME
          FROM ALL_TAB_COLUMNS A
         WHERE OWNER = 'BANKING'
           AND TABLE_NAME NOT LIKE 'TEMP%'
           AND TABLE_NAME NOT LIKE '%$%';

    V_XML_BANK_ACCOUNT_FRAG         CLOB;
    V_XML_LEAD_BANK_CC_FRAG         CLOB;
    V_XML_BANK_MICR_FRAG            CLOB;
    V_COUNT                         INTEGER;
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_XML_BANK_MICR_FORMAT_FRAG     CLOB;
    V_FLAG                          VARCHAR2(1) := 'C';

    V_BANK_MICR_FRMT_REC        BANK_MICR_FORMAT%ROWTYPE;
    V_BANK_MICR_FRMT_FTRE_REC   BANK_MICR_FORMAT_FUTURE%ROWTYPE;
BEGIN
    FOR rec IN TABLES_CUR LOOP 
        CASE rec.TABLE_NAME
            WHEN 'BANK_ACCOUNT' THEN --Single Record
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME) = 1) THEN
                    V_XML_BANK_ACCOUNT_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME).GETCLOBVAL();
                END IF;
            WHEN 'LEAD_BANK_CC' THEN --Single Record
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME) = 1) THEN
                    V_XML_LEAD_BANK_CC_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME).GETCLOBVAL();
                END IF;
            WHEN 'BANK_MICR_FORMAT' THEN --Multiple Records
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME||'_TABLE') = 1) THEN
                    V_XML_BANK_MICR_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME||'_TABLE').GETCLOBVAL();
                END IF;
            ELSE
                NULL;
        END CASE;
    END LOOP;
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/FUTURE_ID/text()') = 1 THEN
        V_FLAG := 'F';
    END IF;
    IF V_XML_BANK_ACCOUNT_FRAG IS NOT NULL THEN
        IF V_FLAG = 'C' THEN --current
            TABLE_IU_PKG.BANK_ACCOUNT_ROWTYPE_SP('BANK_ACCOUNT'
                                                   ,V_XML_BANK_ACCOUNT_FRAG
                                                   ,O_BANK_ACCOUNT_REC);
        ELSE --future
            TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_ROWTYPE_SP('BANK_ACCOUNT_FUTURE'
                                                        ,REPLACE(V_XML_BANK_ACCOUNT_FRAG,'BANK_ACCOUNT>','BANK_ACCOUNT_FUTURE>')
                                                        ,O_BANK_ACCOUNT_FUTURE_REC);
        END IF;
    END IF;
    IF V_XML_LEAD_BANK_CC_FRAG IS NOT NULL THEN
        IF V_FLAG = 'C' THEN --current
            TABLE_IU_PKG.LEAD_BANK_CC_ROWTYPE_SP('LEAD_BANK_CC'
                                                 ,V_XML_LEAD_BANK_CC_FRAG
                                                 ,O_LEAD_BANK_CC_REC);
        ELSE --future
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_ROWTYPE_SP('LEAD_BANK_CC_FUTURE'
                                                        ,REPLACE(V_XML_LEAD_BANK_CC_FRAG,'LEAD_BANK_CC>','LEAD_BANK_CC_FUTURE>')
                                                        ,O_LEAD_BANK_CC_FUTURE_REC);
        END IF;
    END IF;
    IF V_XML_BANK_MICR_FRAG IS NOT NULL THEN
        V_COUNT := 1;
        WHILE SYS.XMLTYPE(V_XML_BANK_MICR_FRAG).EXISTSNODE('/BANK_MICR_FORMAT_TABLE/' || 'BANK_MICR_FORMAT' || '[' || V_COUNT || ']') = 1 LOOP
            V_XML_BANK_MICR_FORMAT_FRAG := SYS.XMLTYPE(V_XML_BANK_MICR_FRAG).EXTRACT('/BANK_MICR_FORMAT_TABLE/'|| 'BANK_MICR_FORMAT' || '[' || V_COUNT || ']').GETCLOBVAL();
            IF V_XML_BANK_MICR_FORMAT_FRAG IS NOT NULL THEN
                IF V_FLAG = 'C' THEN --current
                    TABLE_IU_PKG.BANK_MICR_FORMAT_ROWTYPE_SP('BANK_MICR_FORMAT'
                                                             ,V_XML_BANK_MICR_FORMAT_FRAG
                                                             ,V_BANK_MICR_FRMT_REC);
                    O_BANK_MICR_FORMAT_TAB(NVL(O_BANK_MICR_FORMAT_TAB.LAST, 0) +1) := V_BANK_MICR_FRMT_REC;
                ELSE --future
                    TABLE_IU_PKG.BANK_MICR_FRMT_FTR_ROWTYPE_SP('BANK_MICR_FORMAT_FUTURE'
                                                               ,REPLACE(V_XML_BANK_MICR_FORMAT_FRAG,'BANK_MICR_FORMAT>','BANK_MICR_FORMAT_FUTURE>')
                                                               ,V_BANK_MICR_FRMT_FTRE_REC);
                    O_BANK_MICR_FORMAT_FUTURE_TAB(NVL(O_BANK_MICR_FORMAT_FUTURE_TAB.LAST, 0) +1) := V_BANK_MICR_FRMT_FTRE_REC;
                END IF;
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP;
    END IF;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_TABLE_TYPES ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_TABLE_TYPES;

PROCEDURE ACCNT_MNTNC_CURRENT_UPSERT_SP( 
/******************************************************************************
This procedure is intended to update following tables used in the
Account Maintenance Window that are current records
    Tables: 
       BANK_ACCOUNT
       LEAD_BANK_CC
       BANK_MICR_FORMAT

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_REC                IN BANK_ACCOUNT%ROWTYPE,
    IN_LEAD_BANK_CC_REC                IN LEAD_BANK_CC%ROWTYPE,
    IN_BANK_MICR_FORMAT_TAB            IN TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE)
IS
    V_INDEX    NUMBER := 0;
BEGIN
    TABLE_IU_PKG.BANK_ACCOUNT_I_SP(IN_BANK_ACCOUNT_REC);
    V_INDEX := IN_BANK_MICR_FORMAT_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(IN_BANK_MICR_FORMAT_TAB(V_INDEX));
        V_INDEX := IN_BANK_MICR_FORMAT_TAB.NEXT(V_INDEX);
    END LOOP;
    IF IN_LEAD_BANK_CC_REC.EXPIRATION_DATE IS NOT NULL THEN
        DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR,
                                                                     NULL, --bank account number
                                                                     NULL, --micr format id
                                                                     IN_LEAD_BANK_CC_REC.EXPIRATION_DATE);
    END IF;
    TABLE_IU_PKG.LEAD_BANK_CC_I_SP(IN_LEAD_BANK_CC_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_CURRENT_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_CURRENT_UPSERT_SP;

PROCEDURE EXPIRE_PREV_CURR_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous current records
    before inserting new record

Created : 07/31/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE,
IN_FLAG                IN     VARCHAR2)
IS
    CURSOR bank_account_cur IS
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE   < IN_NEW_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_micr_format_cur IS
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR lead_bank_cc_cur IS
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_cur IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    bnk_accnt_exprd_wt_actv_chld EXCEPTION;
    micr_exprd_with_actv_dptks   EXCEPTION;
    mbr_exprd_with_actv_dptks    EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_CURR_BANK_ACCOUNT';
    V_MEMBER_STORE               VARCHAR2(10);
    V_FORMAT_NAME                VARCHAR2(10);
BEGIN
    FOR ba_rec IN bank_account_cur LOOP
        FOR bmf_rec IN bank_micr_format_cur LOOP
            bmf_rec.EXPIRATION_DATE := GREATEST(bmf_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
            V_FORMAT_NAME := bmf_rec.MICR_FORMAT_ID;
            IF IN_FLAG = 'ACCNT_MNTNC' THEN
                IF BUSINESS_RULES_PKG.IS_MICR_EXPIRATION_INVALID(bmf_rec.BANK_ACCOUNT_NBR,
                                                                 bmf_rec.MICR_FORMAT_ID,
                                                                 bmf_rec.EXPIRATION_DATE,
                                                                 NULL) = 'Y' THEN
                    RAISE micr_exprd_with_actv_dptks;
                END IF;
            ELSIF IN_FLAG = 'MAKE_LEAD' THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(NULL, --cost center code
                                                                             bmf_rec.BANK_ACCOUNT_NBR,
                                                                             bmf_rec.MICR_FORMAT_ID,
                                                                             bmf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(bmf_rec);
        END LOOP;
        FOR mb_rec IN member_bank_cc_cur LOOP
            mb_rec.EXPIRATION_DATE := GREATEST(mb_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
            V_MEMBER_STORE := mb_rec.MEMBER_STORE_NBR;
            /*IF BUSINESS_RULES_PKG.IS_MEMBER_EXPIRATION_INVALID(mb_rec.MEMBER_STORE_NBR,
                                                               mb_rec.EXPIRATION_DATE,
                                                               NULL) = 'Y' THEN
                RAISE mbr_exprd_with_actv_dptks;
            END IF;*/
            IF mb_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                             NULL, --bank account number
                                                                             NULL, --micr format id
                                                                             mb_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mb_rec);
        END LOOP;
        FOR lb_rec IN lead_bank_cc_cur LOOP
            lb_rec.EXPIRATION_DATE := GREATEST(lb_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
            IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lb_rec.LEAD_STORE_NBR,
                                                             lb_rec.LEAD_BANK_ACCOUNT_NBR,
                                                             lb_rec.EXPIRATION_DATE,
                                                             NULL) = 'Y' THEN
                RAISE lead_exprd_with_actv_chlds;
            END IF;
            IF lb_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                             NULL, --bank account number
                                                                             NULL, --micr format id
                                                                             lb_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lb_rec);
        END LOOP;
        ba_rec.EXPIRATION_DATE := GREATEST(ba_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
        IF BUSINESS_RULES_PKG.IS_BNK_ACCNT_EXPRTN_INVALID(ba_rec.BANK_ACCOUNT_NBR,
                                                          ba_rec.EXPIRATION_DATE,
                                                          NULL) = 'Y' THEN
            RAISE bnk_accnt_exprd_wt_actv_chld;
        END IF;
        TABLE_IU_PKG.BANK_ACCOUNT_I_SP(ba_rec);
    END LOOP;
EXCEPTION
    WHEN bnk_accnt_exprd_wt_actv_chld THEN
        ERRPKG.RAISE_ERR(errnums.en_bnk_accnt_expr_wt_actv_chld,
                         V_PROC_NAME,
                         'Effective date of this future bank account is less than it''s previous lead/MICR formats. Please check the details in previous tab');
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members/store deposit ticket. Please correct the previous future concentration/store deposit ticket first');
    WHEN mbr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_mbr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future member "'|| V_MEMBER_STORE ||'" is less than some of it''s previous store deposit ticket. Please correct the previous future store deposit ticket first');
    WHEN micr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_micr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future MICR "'|| V_FORMAT_NAME ||'" is less than it''s previous stores MICR formats. Please correct the previous stores MICR format first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_CURR_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_CURR_BANK_ACCOUNT;

PROCEDURE EXPIRE_PREV_FTR_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous future records
    before inserting new record

Created : 07/31/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE,
IN_FLAG                IN     VARCHAR2)
IS
    CURSOR bank_account_future_cur IS
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE   < IN_NEW_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_micr_format_future_cur(IN_FUTURE_ID IN NUMBER) IS
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;
    CURSOR lead_bank_cc_future_cur(IN_FUTURE_ID IN NUMBER) IS
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_future_cur(IN_FUTURE_ID IN NUMBER) IS
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    bnk_accnt_exprd_wt_actv_chld EXCEPTION;
    micr_exprd_with_actv_dptks   EXCEPTION;
    mbr_exprd_with_actv_dptks    EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_FTR_BANK_ACCOUNT';
    V_MEMBER_STORE               VARCHAR2(10);
    V_FORMAT_NAME                VARCHAR2(10);
BEGIN
    FOR baf_rec IN bank_account_future_cur LOOP
        FOR bmff_rec IN bank_micr_format_future_cur(baf_rec.FUTURE_ID) LOOP
            bmff_rec.EXPIRATION_DATE := GREATEST(bmff_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
            V_FORMAT_NAME := bmff_rec.MICR_FORMAT_ID;
            IF IN_FLAG = 'ACCNT_MNTNC' THEN
                IF BUSINESS_RULES_PKG.IS_MICR_EXPIRATION_INVALID(bmff_rec.BANK_ACCOUNT_NBR,
                                                                 bmff_rec.MICR_FORMAT_ID,
                                                                 bmff_rec.EXPIRATION_DATE,
                                                                 bmff_rec.FUTURE_ID) = 'Y' THEN
                    RAISE micr_exprd_with_actv_dptks;
                END IF;
            ELSIF IN_FLAG = 'MAKE_LEAD' THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(NULL, --cost center code
                                                                           bmff_rec.BANK_ACCOUNT_NBR,
                                                                           bmff_rec.MICR_FORMAT_ID,
                                                                           bmff_rec.FUTURE_ID,
                                                                           bmff_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(bmff_rec);
        END LOOP;
        FOR mbf_rec IN member_bank_cc_future_cur(baf_rec.FUTURE_ID) LOOP
            mbf_rec.EXPIRATION_DATE := GREATEST(mbf_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
            V_MEMBER_STORE := mbf_rec.MEMBER_STORE_NBR;
            /*IF BUSINESS_RULES_PKG.IS_MEMBER_EXPIRATION_INVALID(mbf_rec.MEMBER_STORE_NBR,
                                                               mbf_rec.EXPIRATION_DATE,
                                                               mbf_rec.FUTURE_ID) = 'Y' THEN
                RAISE mbr_exprd_with_actv_dptks;
            END IF;*/
            IF mbf_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                           NULL, --bank account number
                                                                           NULL, --micr format id
                                                                           mbf_rec.FUTURE_ID,
                                                                           mbf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(mbf_rec);
        END LOOP;
        FOR lbf_rec IN lead_bank_cc_future_cur(baf_rec.FUTURE_ID) LOOP
            lbf_rec.EXPIRATION_DATE := GREATEST(lbf_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
            IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lbf_rec.LEAD_STORE_NBR,
                                                             lbf_rec.LEAD_BANK_ACCOUNT_NBR,
                                                             lbf_rec.EXPIRATION_DATE,
                                                             lbf_rec.FUTURE_ID) = 'Y' THEN
                RAISE lead_exprd_with_actv_chlds;
            END IF;
            IF lbf_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                           NULL, --bank account number
                                                                           NULL, --micr format id
                                                                           lbf_rec.FUTURE_ID,
                                                                           lbf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(lbf_rec);
        END LOOP;
        baf_rec.EXPIRATION_DATE := GREATEST(baf_rec.EFFECTIVE_DATE, IN_NEW_EFFECTIVE_DATE - 1);
        IF BUSINESS_RULES_PKG.IS_BNK_ACCNT_EXPRTN_INVALID(baf_rec.BANK_ACCOUNT_NBR,
                                                          baf_rec.EXPIRATION_DATE,
                                                          baf_rec.FUTURE_ID) = 'Y' THEN
            RAISE bnk_accnt_exprd_wt_actv_chld;
        END IF;
        TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(baf_rec);
    END LOOP;
EXCEPTION
    WHEN bnk_accnt_exprd_wt_actv_chld THEN
        ERRPKG.RAISE_ERR(errnums.en_bnk_accnt_expr_wt_actv_chld,
                         V_PROC_NAME,
                         'Effective date of this future bank account is less than it''s previous lead/MICR formats. Please check the details in previous tab');
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members. Please correct the previous future concentration first');
    WHEN mbr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_mbr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future member "'|| V_MEMBER_STORE ||'" is less than some of it''s previous store deposit ticket. Please correct the previous future store deposit ticket first');
    WHEN micr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_micr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future MICR "'|| V_FORMAT_NAME ||'" is less than it''s previous stores MICR formats. Please correct the previous stores MICR format first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_FTR_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_FTR_BANK_ACCOUNT;

PROCEDURE EXPIRE_PREVIOUS_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/31/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE,
IN_FLAG                IN     VARCHAR2)
IS
BEGIN
    EXPIRE_PREV_CURR_BANK_ACCOUNT(IN_BANK_ACCOUNT_NBR, IN_NEW_EFFECTIVE_DATE, IN_FLAG);
    EXPIRE_PREV_FTR_BANK_ACCOUNT(IN_BANK_ACCOUNT_NBR, IN_NEW_EFFECTIVE_DATE, IN_FLAG);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREVIOUS_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREVIOUS_BANK_ACCOUNT;

PROCEDURE ACCNT_MNTNC_FUTURE_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the
Account Maintenance Window that are future records
    Tables: 
       BANK_ACCOUNT_FUTURE
       LEAD_BANK_CC_FUTURE
       BANK_MICR_FORMAT_FUTURE
Expire following tables used in the Account Maintenance Window that are current records
    Tables: 
       BANK_ACCOUNT
       LEAD_BANK_CC
       BANK_MICR_FORMAT

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_FUTURE_REC         IN BANK_ACCOUNT_FUTURE%ROWTYPE,
    IN_LEAD_BANK_CC_FUTURE_REC         IN LEAD_BANK_CC_FUTURE%ROWTYPE,
    IN_BANK_MICR_FORMAT_FUTURE_TAB     IN TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    V_INDEX    NUMBER := 0;
BEGIN
    EXPIRE_PREVIOUS_BANK_ACCOUNT(IN_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR,
                                 IN_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE,
                                 'ACCNT_MNTNC');

    TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(IN_BANK_ACCOUNT_FUTURE_REC);
    V_INDEX := IN_BANK_MICR_FORMAT_FUTURE_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(IN_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX));
        V_INDEX := IN_BANK_MICR_FORMAT_FUTURE_TAB.NEXT(V_INDEX);
    END LOOP;
    TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(IN_LEAD_BANK_CC_FUTURE_REC);
    DEPOSIT_TICKET_MAINTENANCE_PKG.INSERT_BANK_DEPOSIT_DTLS_FTR(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR,
                                                                IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR,
                                                                IN_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID,
                                                                IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE,
                                                                IN_LEAD_BANK_CC_FUTURE_REC.EXPIRATION_DATE,
                                                                IN_LEAD_BANK_CC_FUTURE_REC.BANK_TYPE_CODE);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_FUTURE_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_FUTURE_UPSERT_SP;

PROCEDURE ACCNT_MNTNC_UI_UPSERT_SP ( 
/******************************************************************************
	This procedure performs the core insert/update process for Account Maintenance Window

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
    V_BANK_ACCOUNT_REC                BANK_ACCOUNT%ROWTYPE;
    V_BANK_ACCOUNT_FUTURE_REC         BANK_ACCOUNT_FUTURE%ROWTYPE;
    V_LEAD_BANK_CC_REC                LEAD_BANK_CC%ROWTYPE;
    V_LEAD_BANK_CC_FUTURE_REC         LEAD_BANK_CC_FUTURE%ROWTYPE;
    V_BANK_MICR_FORMAT_TAB            TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE;
    V_BANK_MICR_FORMAT_FUTURE_TAB     TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE;
BEGIN
    --Below code runs once per tab, which means we run either current or future tab at a time but not both at the same time
    BUILD_TABLE_TYPES(IN_ROW_DATA,
                      V_BANK_ACCOUNT_REC,
                      V_BANK_ACCOUNT_FUTURE_REC,
                      V_LEAD_BANK_CC_REC,
                      V_LEAD_BANK_CC_FUTURE_REC,
                      V_BANK_MICR_FORMAT_TAB,
                      V_BANK_MICR_FORMAT_FUTURE_TAB);
    BUSINESS_RULES_PKG.ACCOUNT_MAINTENANCE_BR_SP(V_BANK_ACCOUNT_REC,
                                                 V_BANK_ACCOUNT_FUTURE_REC,
                                                 V_LEAD_BANK_CC_REC,
                                                 V_LEAD_BANK_CC_FUTURE_REC,
                                                 V_BANK_MICR_FORMAT_TAB,
                                                 V_BANK_MICR_FORMAT_FUTURE_TAB);
    IF V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR IS NOT NULL THEN --Current Details
        ACCNT_MNTNC_CURRENT_UPSERT_SP(V_BANK_ACCOUNT_REC,
                                      V_LEAD_BANK_CC_REC,
                                      V_BANK_MICR_FORMAT_TAB);
    ELSE --Future Details
        ACCNT_MNTNC_FUTURE_UPSERT_SP(V_BANK_ACCOUNT_FUTURE_REC,
                                     V_LEAD_BANK_CC_FUTURE_REC,
                                     V_BANK_MICR_FORMAT_FUTURE_TAB);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_UPSERT_SP;

PROCEDURE ACCNT_MNTNC_CURRENT_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process for current records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 08/18/2015 jxc517 CCN Project....
          Added logic to take care of new child table STORE_MICR_FORMAT_DTL for 
          parent table BANK_MICR_FORMAT
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2)
IS
    CURSOR bank_account_cur IS 
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR mbr_bank_cc_cur(IN_LEAD_STORE_NBR IN VARCHAR2) IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR;
    CURSOR bank_micr_format_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR store_micr_format_dtls_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
BEGIN
    FOR bank_account_rec IN bank_account_cur LOOP
        FOR bank_micr_format_rec IN bank_micr_format_cur LOOP
            FOR str_micr_format_rec IN store_micr_format_dtls_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_D_SP(str_micr_format_rec);
            END LOOP;
            TABLE_IU_PKG.BANK_MICR_FORMAT_D_SP(bank_micr_format_rec);
        END LOOP;
        FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
            FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                FOR bank_dep_tick_rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
                END LOOP;
                TABLE_IU_PKG.MEMBER_BANK_CC_D_SP(mbr_bank_cc_rec);
            END LOOP;
            FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
            END LOOP;
            TABLE_IU_PKG.LEAD_BANK_CC_D_SP(lead_bank_cc_rec);
        END LOOP;
        TABLE_IU_PKG.BANK_ACCOUNT_D_SP(bank_account_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_CURRENT_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_CURRENT_DELETE_SP;

PROCEDURE CREATE_CURRENT_FROM_FUTURE ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  to create current records from passed future records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_FTR_REC     IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
    CURSOR bank_account_cur IS 
        SELECT BANK_ACCOUNT_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_NAME,
               BOOK_KEEPER_NBR,
               BANK_AUTO_RECON_IND,
               RECON_START_DATE,
               RECON_BANK_ACCOUNT_NBR,
               JV_BOOK_KEEPER_REF,
               JV_BANK_SHORT_NAME,
               IDI_BOOKKEEPER_REF,
               IDI_BANK_SHORT_NAME,
               ROUTING_NBR,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR lead_bank_cc_cur IS 
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR mbr_bank_cc_cur(IN_LEAD_BANK_CC_REC IN LEAD_BANK_CC%ROWTYPE) IS 
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               MEMBER_STORE_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               MEMBER_BANK_ACCOUNT_NBR,
               BANK_BRANCH_NBR,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
           --AND EFFECTIVE_DATE BETWEEN
             --  IN_LEAD_BANK_CC_REC.EFFECTIVE_DATE AND NVL(IN_LEAD_BANK_CC_REC.EXPIRATION_DATE,EFFECTIVE_DATE);
    CURSOR bank_micr_format_cur IS 
        SELECT BANK_ACCOUNT_NBR,
               FORMAT_NAME,
               DJDE_FORM_PARM,
               DJDE_FEED_PARM,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACTNBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR store_micr_format_dtls_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT BANK_ACCOUNT_NBR,
               MICR_FORMAT_ID,
               COST_CENTER_CODE,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACCT_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DAILY_USE_ACTUAL,
               DAILY_USE_OVERRIDE,
               DEP_TKTS_ONHAND_QTY,
               YTD_DEP_TKTS_ORDERED_QTY,
               REORDER_POINT,
               REORDER_NUMBER_BKS,
               IMAGES_PER_PAGE,
               NBR_FORMS_PER_BK,
               PART_PAPER_PER_FORM,
               NBR_DEP_TICKETS_PER_BK,
               SHEETS_OF_PAPER_PER_BK,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               REORDER_SWITCH,
               LAST_VW_ORDER_DATE
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
BEGIN
    FOR bank_account_rec IN bank_account_cur LOOP --loops only once for that future id
        TABLE_IU_PKG.BANK_ACCOUNT_I_SP(bank_account_rec);
        FOR bank_micr_format_rec IN bank_micr_format_cur LOOP
            TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(bank_micr_format_rec);
            FOR str_micr_format_rec IN store_micr_format_dtls_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(str_micr_format_rec);
            END LOOP;
        END LOOP;
        FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
            TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lead_bank_cc_rec);
            FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
            END LOOP;
            FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec) LOOP
                TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_rec);
                FOR bank_dep_tick_rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
                END LOOP;
            END LOOP;
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_CURRENT_FROM_FUTURE ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CREATE_CURRENT_FROM_FUTURE;

PROCEDURE ACCNT_MNTNC_FUTURE_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process for future records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_FTR_REC     IN     BANK_ACCOUNT_FUTURE%ROWTYPE,
    IN_FTR_TO_CURR_FLAG         IN     VARCHAR2 DEFAULT 'N')
IS
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR mbr_bank_cc_cur(IN_LEAD_BANK_CC_FTR_REC IN LEAD_BANK_CC_FUTURE%ROWTYPE) IS 
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_BANK_CC_FTR_REC.LEAD_STORE_NBR
           AND FUTURE_ID             = IN_LEAD_BANK_CC_FTR_REC.FUTURE_ID;
           --AND EFFECTIVE_DATE BETWEEN
             --  IN_LEAD_BANK_CC_FTR_REC.EFFECTIVE_DATE AND NVL(IN_LEAD_BANK_CC_FTR_REC.EXPIRATION_DATE,EFFECTIVE_DATE);
    CURSOR bank_micr_format_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR store_micr_format_dtls_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
BEGIN
    IF IN_FTR_TO_CURR_FLAG = 'Y' THEN
        CREATE_CURRENT_FROM_FUTURE(IN_BANK_ACCOUNT_FTR_REC);
    END IF;
    FOR bank_micr_format_rec IN bank_micr_format_cur LOOP
        FOR str_micr_format_rec IN store_micr_format_dtls_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
            TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_D_SP(str_micr_format_rec);
        END LOOP;
        TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_D_SP(bank_micr_format_rec);
    END LOOP;
    FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
        FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec) LOOP
            FOR bank_dep_tick_rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_rec);
            END LOOP;
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_D_SP(mbr_bank_cc_rec);
        END LOOP;
        FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_rec);
        END LOOP;
        TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_D_SP(lead_bank_cc_rec);
    END LOOP;
    TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_D_SP(IN_BANK_ACCOUNT_FTR_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_FUTURE_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_FUTURE_DELETE_SP;

PROCEDURE ACCNT_MNTNC_UI_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2,
    IN_FUTURE_ID            IN  NUMBER)
IS
    CURSOR bank_account_ftr_cur(IN_FTR_ID    IN    NUMBER) IS 
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND FUTURE_ID >= IN_FTR_ID;
BEGIN
    /*Business Rules  - TBD*/
    IF IN_FUTURE_ID IS NOT NULL THEN --deleting from a future record
        FOR bank_account_ftr_rec IN bank_account_ftr_cur(IN_FUTURE_ID) LOOP
            ACCNT_MNTNC_FUTURE_DELETE_SP(bank_account_ftr_rec, 'N'); --N here say's not to move future to current
        END LOOP;
    ELSE --deleting from a current record
        FOR bank_account_ftr_rec IN bank_account_ftr_cur(1) LOOP --notice hard coded "1" to delete all futures
            ACCNT_MNTNC_FUTURE_DELETE_SP(bank_account_ftr_rec, 'N'); --N here say's not to move future to current
        END LOOP;
        ACCNT_MNTNC_CURRENT_DELETE_SP(IN_BANK_ACCOUNT_NUMBER);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_DELETE_SP;

END ACCOUNT_MAINTENANCE_PKG;

