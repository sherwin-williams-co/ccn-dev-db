create or replace PACKAGE BODY         ACCOUNT_MAINTENANCE_PKG
AS
/**********************************************************
This Package contains all the procedures used in
account maintenance window

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
**********************************************************/
FUNCTION IS_REAL_FUTURE_BANK_ACCOUNT(
/******************************************************************************
	This procedure checks if the passed future is a virtual future or real future
  returns 'N' if it is virtual future
  returns 'Y' if it is real future

Created : 10/15/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR     IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    --if the bank account exists in current tables with expiration date as null => it's not real future
    SELECT CASE WHEN COUNT(*) > 0 THEN 'N' ELSE 'Y' END
      INTO V_RETURN_VAL
      FROM BANK_ACCOUNT BA
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND EXPIRATION_DATE IS NULL
       AND EXISTS (SELECT 1
                     FROM BANK_ACCOUNT_FUTURE
                    WHERE BANK_ACCOUNT_NBR = BA.BANK_ACCOUNT_NBR
                      AND EFFECTIVE_DATE   = BA.EFFECTIVE_DATE
                      AND EXPIRATION_DATE IS NULL);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_REAL_FUTURE_BANK_ACCOUNT;

FUNCTION IS_BANK_TYPE_CHNG_VRTL_FTR(
/*******************************************************************************
This procedure is intended to check if virtual future is created as part
of transfer process or bank type change

Returns 'Y' if it is part of bank type change

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN      BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    --Below query is to check if a lead record exists as virtual futures under any of below 2 condition
    --virtual future with same effective date => its created as part of transfer process and we should not display it
    --virtual future with different effective date => its created as part of bank type change process and we should display it
    SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM LEAD_BANK_CC LB
     WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
       AND EXISTS (SELECT 1
                     FROM LEAD_BANK_CC_FUTURE
                    WHERE LEAD_STORE_NBR        = LB.LEAD_STORE_NBR
                      AND LEAD_BANK_ACCOUNT_NBR = LB.LEAD_BANK_ACCOUNT_NBR
                      AND EFFECTIVE_DATE        <> LB.EFFECTIVE_DATE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_BANK_TYPE_CHNG_VRTL_FTR;

FUNCTION IS_TRANSFER_VRTL_FTR(
/*******************************************************************************
This procedure is intended to check if virtual future is created as part
of transfer process or bank type change

Returns 'Y' if it is part of transfer

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN      BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    --Below query is to check if a lead record exists as virtual futures under any of below 2 condition
    --virtual future with same effective date => its created as part of transfer process and we should not display it
    --virtual future with different effective date => its created as part of bank type change process and we should display it
    SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM LEAD_BANK_CC LB
     WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
       AND EXISTS (SELECT 1
                     FROM LEAD_BANK_CC_FUTURE
                    WHERE LEAD_STORE_NBR        = LB.LEAD_STORE_NBR
                      AND LEAD_BANK_ACCOUNT_NBR = LB.LEAD_BANK_ACCOUNT_NBR
                      AND EFFECTIVE_DATE        = LB.EFFECTIVE_DATE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_TRANSFER_VRTL_FTR;

PROCEDURE ACCOUNT_MAINTENACE_UI_SP (
/*******************************************************************************
This procedure is intended to RETURN a ref cursor with data from banking
account maintenance related tables based on passed input bank account number

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/16/2015 jxc517 CCN Project....
          Modified code not to show virtual future as part of transfer process
Changed : 10/21/2015 jxc517 CCN Project....
          Modified code to show virtual future as part of lead bank type change process
Changed : 10/29/2015 jxc517 CCN Project....
          Modified code to include order by clause for bank MICR formats based on FORMAT_NAME
*******************************************************************************/
IN_BANK_ACCOUNT_NBR           IN     VARCHAR2
,OUT_BANK_ACCOUNT_REF_CUR        OUT REF_CURSOR
,OUT_BANK_ACCOUNT_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_LEAD_CC_REF_CUR        OUT REF_CURSOR
,OUT_BANK_LEAD_CC_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FORMAT_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FRMT_FTR_REF_CUR  OUT REF_CURSOR)
IS
    V_BANK_TYPE_CHNG_VRTL_FTR VARCHAR2(1);
BEGIN
    OPEN OUT_BANK_ACCOUNT_REF_CUR FOR
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;

    OPEN OUT_BANK_LEAD_CC_REF_CUR FOR
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LB.LEAD_STORE_NBR) COST_CENTER_NAME,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               NULL UPDATE_DATE,
               NULL LAST_UPD_USER_ID
          FROM LEAD_BANK_CC LB
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;

    OPEN OUT_BANK_MICR_FORMAT_REF_CUR FOR
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
         ORDER BY FORMAT_NAME;

    V_BANK_TYPE_CHNG_VRTL_FTR := IS_BANK_TYPE_CHNG_VRTL_FTR(IN_BANK_ACCOUNT_NBR);

    --V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' is to allow showing futures for virtual futures created as part of leads bank type change
    --EFFECTIVE_DATE > SYSDATE is NOT to allow showing futures for virtual futures created as part of transfer
    OPEN OUT_BANK_ACCOUNT_FTR_REF_CUR FOR
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND (V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' OR EFFECTIVE_DATE > SYSDATE)
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_LEAD_CC_FTR_REF_CUR FOR
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LBF.LEAD_STORE_NBR) COST_CENTER_NAME,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               FUTURE_ID
          FROM LEAD_BANK_CC_FUTURE LBF
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND (V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' OR EFFECTIVE_DATE > SYSDATE)
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_MICR_FRMT_FTR_REF_CUR FOR
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND (V_BANK_TYPE_CHNG_VRTL_FTR = 'Y' OR EFFECTIVE_DATE > SYSDATE)
         ORDER BY FUTURE_ID, FORMAT_NAME;
END ACCOUNT_MAINTENACE_UI_SP;

PROCEDURE BUILD_TABLE_TYPES(
/******************************************************************************
This procedure is intended to build all the table types from input xml
for this process

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_XML                         IN     CLOB,
    O_BANK_ACCOUNT_REC                OUT BANK_ACCOUNT%ROWTYPE,
    O_BANK_ACCOUNT_FUTURE_REC         OUT BANK_ACCOUNT_FUTURE%ROWTYPE,
    O_LEAD_BANK_CC_REC                OUT LEAD_BANK_CC%ROWTYPE,
    O_LEAD_BANK_CC_FUTURE_REC         OUT LEAD_BANK_CC_FUTURE%ROWTYPE,
    O_BANK_MICR_FORMAT_TAB            OUT TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE,
    O_BANK_MICR_FORMAT_FUTURE_TAB     OUT TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    CURSOR TABLES_CUR IS
        SELECT DISTINCT TABLE_NAME
          FROM ALL_TAB_COLUMNS A
         WHERE OWNER = 'BANKING'
           AND TABLE_NAME NOT LIKE 'TEMP%'
           AND TABLE_NAME NOT LIKE '%$%';

    V_XML_BANK_ACCOUNT_FRAG         CLOB;
    V_XML_LEAD_BANK_CC_FRAG         CLOB;
    V_XML_BANK_MICR_FRAG            CLOB;
    V_COUNT                         INTEGER;
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_XML_BANK_MICR_FORMAT_FRAG     CLOB;
    V_FLAG                          VARCHAR2(1) := 'C';

    V_BANK_MICR_FRMT_REC        BANK_MICR_FORMAT%ROWTYPE;
    V_BANK_MICR_FRMT_FTRE_REC   BANK_MICR_FORMAT_FUTURE%ROWTYPE;
BEGIN
    FOR rec IN TABLES_CUR LOOP 
        CASE rec.TABLE_NAME
            WHEN 'BANK_ACCOUNT' THEN --Single Record
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME) = 1) THEN
                    V_XML_BANK_ACCOUNT_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME).GETCLOBVAL();
                END IF;
            WHEN 'LEAD_BANK_CC' THEN --Single Record
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME) = 1) THEN
                    V_XML_LEAD_BANK_CC_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME).GETCLOBVAL();
                END IF;
            WHEN 'BANK_MICR_FORMAT' THEN --Multiple Records
                IF (V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME||'_TABLE') = 1) THEN
                    V_XML_BANK_MICR_FRAG := V_ROW_DATA.EXTRACT('/ACCOUNT_MAINTENANCE_UI/'|| rec.TABLE_NAME||'_TABLE').GETCLOBVAL();
                END IF;
            ELSE
                NULL;
        END CASE;
    END LOOP;
    IF V_ROW_DATA.EXISTSNODE('/ACCOUNT_MAINTENANCE_UI/BANK_ACCOUNT/FUTURE_ID/text()') = 1 THEN
        V_FLAG := 'F';
    END IF;
    IF V_XML_BANK_ACCOUNT_FRAG IS NOT NULL THEN
        IF V_FLAG = 'C' THEN --current
            TABLE_IU_PKG.BANK_ACCOUNT_ROWTYPE_SP('BANK_ACCOUNT'
                                                   ,V_XML_BANK_ACCOUNT_FRAG
                                                   ,O_BANK_ACCOUNT_REC);
        ELSE --future
            TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_ROWTYPE_SP('BANK_ACCOUNT_FUTURE'
                                                        ,REPLACE(V_XML_BANK_ACCOUNT_FRAG,'BANK_ACCOUNT>','BANK_ACCOUNT_FUTURE>')
                                                        ,O_BANK_ACCOUNT_FUTURE_REC);
        END IF;
    END IF;
    IF V_XML_LEAD_BANK_CC_FRAG IS NOT NULL THEN
        IF V_FLAG = 'C' THEN --current
            TABLE_IU_PKG.LEAD_BANK_CC_ROWTYPE_SP('LEAD_BANK_CC'
                                                 ,V_XML_LEAD_BANK_CC_FRAG
                                                 ,O_LEAD_BANK_CC_REC);
        ELSE --future
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_ROWTYPE_SP('LEAD_BANK_CC_FUTURE'
                                                        ,REPLACE(V_XML_LEAD_BANK_CC_FRAG,'LEAD_BANK_CC>','LEAD_BANK_CC_FUTURE>')
                                                        ,O_LEAD_BANK_CC_FUTURE_REC);
        END IF;
    END IF;
    IF V_XML_BANK_MICR_FRAG IS NOT NULL THEN
        V_COUNT := 1;
        WHILE SYS.XMLTYPE(V_XML_BANK_MICR_FRAG).EXISTSNODE('/BANK_MICR_FORMAT_TABLE/' || 'BANK_MICR_FORMAT' || '[' || V_COUNT || ']') = 1 LOOP
            V_XML_BANK_MICR_FORMAT_FRAG := SYS.XMLTYPE(V_XML_BANK_MICR_FRAG).EXTRACT('/BANK_MICR_FORMAT_TABLE/'|| 'BANK_MICR_FORMAT' || '[' || V_COUNT || ']').GETCLOBVAL();
            IF V_XML_BANK_MICR_FORMAT_FRAG IS NOT NULL THEN
                IF V_FLAG = 'C' THEN --current
                    TABLE_IU_PKG.BANK_MICR_FORMAT_ROWTYPE_SP('BANK_MICR_FORMAT'
                                                             ,V_XML_BANK_MICR_FORMAT_FRAG
                                                             ,V_BANK_MICR_FRMT_REC);
                    O_BANK_MICR_FORMAT_TAB(NVL(O_BANK_MICR_FORMAT_TAB.LAST, 0) +1) := V_BANK_MICR_FRMT_REC;
                ELSE --future
                    TABLE_IU_PKG.BANK_MICR_FRMT_FTR_ROWTYPE_SP('BANK_MICR_FORMAT_FUTURE'
                                                               ,REPLACE(V_XML_BANK_MICR_FORMAT_FRAG,'BANK_MICR_FORMAT>','BANK_MICR_FORMAT_FUTURE>')
                                                               ,V_BANK_MICR_FRMT_FTRE_REC);
                    O_BANK_MICR_FORMAT_FUTURE_TAB(NVL(O_BANK_MICR_FORMAT_FUTURE_TAB.LAST, 0) +1) := V_BANK_MICR_FRMT_FTRE_REC;
                END IF;
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP;
    END IF;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_TABLE_TYPES ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_TABLE_TYPES;

PROCEDURE BUILD_FUTURE_FROM_CURRENT(
/******************************************************************************
This procedure is intended to build all the future table types from input current table types
for this process

Created : 10/07/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          code changes so that for bank account and bank MICR the effective dates should still carry forward
*******************************************************************************/
    IN_BANK_ACCOUNT_REC               IN     BANK_ACCOUNT%ROWTYPE,
    IN_LEAD_BANK_CC_REC               IN     LEAD_BANK_CC%ROWTYPE,
    IN_BANK_MICR_FORMAT_TAB           IN     TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE,
    O_BANK_ACCOUNT_FUTURE_REC            OUT BANK_ACCOUNT_FUTURE%ROWTYPE,
    O_LEAD_BANK_CC_FUTURE_REC            OUT LEAD_BANK_CC_FUTURE%ROWTYPE,
    O_BANK_MICR_FORMAT_FUTURE_TAB        OUT TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    V_FUTURE_ID            NUMBER := BANKING_COMMON_TOOLS.GET_FUTURE_ID(IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    V_INDEX                NUMBER := 0;
    V_BANK_MICR_FORMAT_REC BANK_MICR_FORMAT%ROWTYPE;
BEGIN
    --BANK_ACCOUNT_FUTURE
    O_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR       := IN_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE         := IN_BANK_ACCOUNT_REC.EFFECTIVE_DATE;
    O_BANK_ACCOUNT_FUTURE_REC.EXPIRATION_DATE        := NULL;
    O_BANK_ACCOUNT_FUTURE_REC.BANK_NAME              := IN_BANK_ACCOUNT_REC.BANK_NAME;
    O_BANK_ACCOUNT_FUTURE_REC.BOOK_KEEPER_NBR        := IN_BANK_ACCOUNT_REC.BOOK_KEEPER_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.BANK_AUTO_RECON_IND    := IN_BANK_ACCOUNT_REC.BANK_AUTO_RECON_IND;
    O_BANK_ACCOUNT_FUTURE_REC.RECON_START_DATE       := IN_BANK_ACCOUNT_REC.RECON_START_DATE;
    O_BANK_ACCOUNT_FUTURE_REC.RECON_BANK_ACCOUNT_NBR := IN_BANK_ACCOUNT_REC.RECON_BANK_ACCOUNT_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.JV_BOOK_KEEPER_REF     := IN_BANK_ACCOUNT_REC.JV_BOOK_KEEPER_REF;
    O_BANK_ACCOUNT_FUTURE_REC.JV_BANK_SHORT_NAME     := IN_BANK_ACCOUNT_REC.JV_BANK_SHORT_NAME;
    O_BANK_ACCOUNT_FUTURE_REC.IDI_BOOKKEEPER_REF     := IN_BANK_ACCOUNT_REC.IDI_BOOKKEEPER_REF;
    O_BANK_ACCOUNT_FUTURE_REC.IDI_BANK_SHORT_NAME    := IN_BANK_ACCOUNT_REC.IDI_BANK_SHORT_NAME;
    O_BANK_ACCOUNT_FUTURE_REC.ROUTING_NBR            := IN_BANK_ACCOUNT_REC.ROUTING_NBR;
    O_BANK_ACCOUNT_FUTURE_REC.UPDATE_DATE            := SYSDATE;
    O_BANK_ACCOUNT_FUTURE_REC.LAST_UPD_USER_ID       := IN_BANK_ACCOUNT_REC.LAST_UPD_USER_ID;
    O_BANK_ACCOUNT_FUTURE_REC.FUTURE_ID              := V_FUTURE_ID;
    --LEAD_BANK_CC_FUTURE
    O_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR := IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    O_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR        := IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR;
    O_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE        := IN_LEAD_BANK_CC_REC.EFFECTIVE_DATE;
    O_LEAD_BANK_CC_FUTURE_REC.EXPIRATION_DATE       := NULL;
    O_LEAD_BANK_CC_FUTURE_REC.BANK_BRANCH_NBR       := IN_LEAD_BANK_CC_REC.BANK_BRANCH_NBR;
    O_LEAD_BANK_CC_FUTURE_REC.BANK_TYPE_CODE        := IN_LEAD_BANK_CC_REC.BANK_TYPE_CODE;
    O_LEAD_BANK_CC_FUTURE_REC.UPDATE_DATE           := SYSDATE;
    O_LEAD_BANK_CC_FUTURE_REC.LAST_UPD_USER_ID      := IN_LEAD_BANK_CC_REC.LAST_UPD_USER_ID;
    O_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID             := V_FUTURE_ID;
    --BANK_MICR_FORMAT_FUTURE
    V_INDEX := IN_BANK_MICR_FORMAT_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        V_BANK_MICR_FORMAT_REC := IN_BANK_MICR_FORMAT_TAB(V_INDEX);
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).BANK_ACCOUNT_NBR      := V_BANK_MICR_FORMAT_REC.BANK_ACCOUNT_NBR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).FORMAT_NAME           := V_BANK_MICR_FORMAT_REC.FORMAT_NAME;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).DJDE_FORM_PARM        := V_BANK_MICR_FORMAT_REC.DJDE_FORM_PARM;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).DJDE_FEED_PARM        := V_BANK_MICR_FORMAT_REC.DJDE_FEED_PARM;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_COST_CNTR        := V_BANK_MICR_FORMAT_REC.MICR_COST_CNTR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_ROUTING_NBR      := V_BANK_MICR_FORMAT_REC.MICR_ROUTING_NBR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_FORMAT_ACTNBR    := V_BANK_MICR_FORMAT_REC.MICR_FORMAT_ACTNBR;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).EFFECTIVE_DATE        := V_BANK_MICR_FORMAT_REC.EFFECTIVE_DATE;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).EXPIRATION_DATE       := NULL;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).LAST_MAINTENANCE_DATE := V_BANK_MICR_FORMAT_REC.LAST_MAINTENANCE_DATE;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).LAST_MAINT_USER_ID    := V_BANK_MICR_FORMAT_REC.LAST_MAINT_USER_ID;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).UPDATE_DATE           := SYSDATE;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).LAST_UPD_USER_ID      := V_BANK_MICR_FORMAT_REC.LAST_UPD_USER_ID;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).FUTURE_ID             := V_FUTURE_ID;
        O_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX).MICR_FORMAT_ID        := V_BANK_MICR_FORMAT_REC.MICR_FORMAT_ID;
        V_INDEX := IN_BANK_MICR_FORMAT_TAB.NEXT(V_INDEX);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_FUTURE_FROM_CURRENT ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_FUTURE_FROM_CURRENT;

PROCEDURE ACCNT_MNTNC_CURRENT_UPSERT_SP( 
/******************************************************************************
This procedure is intended to update following tables used in the
Account Maintenance Window that are current records
    Tables: 
       BANK_ACCOUNT
       LEAD_BANK_CC
       BANK_MICR_FORMAT

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/14/2015 jxc517 CCN Project....
          Code has been changed to deal with virtual futures
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
    IN_BANK_ACCOUNT_REC                IN BANK_ACCOUNT%ROWTYPE,
    IN_LEAD_BANK_CC_REC                IN LEAD_BANK_CC%ROWTYPE,
    IN_BANK_MICR_FORMAT_TAB            IN TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE)
IS
    V_INDEX                     NUMBER := 0;
    V_REAL_FUTURE_BANK_ACCOUNT  VARCHAR2(1);
    V_TRANSFER_VRTL_FTR         VARCHAR2(1);
    V_BANK_TYPE_CHNG_VRTL_FTR  VARCHAR2(1);
BEGIN
    V_REAL_FUTURE_BANK_ACCOUNT := IS_REAL_FUTURE_BANK_ACCOUNT(IN_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR);
    V_TRANSFER_VRTL_FTR        := IS_TRANSFER_VRTL_FTR(IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    V_BANK_TYPE_CHNG_VRTL_FTR  := IS_BANK_TYPE_CHNG_VRTL_FTR(IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    TABLE_IU_PKG.BANK_ACCOUNT_I_SP(IN_BANK_ACCOUNT_REC);
    V_INDEX := IN_BANK_MICR_FORMAT_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(IN_BANK_MICR_FORMAT_TAB(V_INDEX));
        V_INDEX := IN_BANK_MICR_FORMAT_TAB.NEXT(V_INDEX);
    END LOOP;
    IF IN_LEAD_BANK_CC_REC.EXPIRATION_DATE IS NOT NULL THEN
        DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR,
                                                                     NULL, --bank account number
                                                                     NULL, --micr format id
                                                                     IN_LEAD_BANK_CC_REC.EXPIRATION_DATE);
        DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR,
                                                            IN_LEAD_BANK_CC_REC.EXPIRATION_DATE);
    END IF;
    IF IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR IS NOT NULL THEN
        TABLE_IU_PKG.LEAD_BANK_CC_I_SP(IN_LEAD_BANK_CC_REC);
    END IF;
    IF V_REAL_FUTURE_BANK_ACCOUNT = 'N' THEN
        VIRTUAL_FUTURE_MAINTENANCE_PKG.VIRTUAL_FUTURE_UPSERT_SP(IN_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR,
                                                                V_REAL_FUTURE_BANK_ACCOUNT,
                                                                V_TRANSFER_VRTL_FTR,
                                                                V_BANK_TYPE_CHNG_VRTL_FTR);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_CURRENT_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_CURRENT_UPSERT_SP;

PROCEDURE EXPIRE_PREV_CURR_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous current records
    before inserting new record

Created : 07/31/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE,
IN_FLAG                IN     VARCHAR2)
IS
    CURSOR bank_account_cur IS
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE   < IN_NEW_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_micr_format_cur IS
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR lead_bank_cc_cur IS
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_cur IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    bnk_accnt_exprd_wt_actv_chld EXCEPTION;
    micr_exprd_with_actv_dptks   EXCEPTION;
    mbr_exprd_with_actv_dptks    EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_CURR_BANK_ACCOUNT';
    V_MEMBER_STORE               VARCHAR2(10);
    V_FORMAT_NAME                VARCHAR2(10);
    V_EXPIRE_DATE                DATE := IN_NEW_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR ba_rec IN bank_account_cur LOOP
        FOR bmf_rec IN bank_micr_format_cur LOOP
            bmf_rec.EXPIRATION_DATE := GREATEST(bmf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            V_FORMAT_NAME := bmf_rec.MICR_FORMAT_ID;
            IF IN_FLAG = 'ACCNT_MNTNC' THEN
                IF BUSINESS_RULES_PKG.IS_MICR_EXPIRATION_INVALID(bmf_rec.BANK_ACCOUNT_NBR,
                                                                 bmf_rec.MICR_FORMAT_ID,
                                                                 bmf_rec.EXPIRATION_DATE,
                                                                 NULL) = 'Y' THEN
                    RAISE micr_exprd_with_actv_dptks;
                END IF;
            ELSIF IN_FLAG IN ('MAKE_LEAD', 'TRANSFER') THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(NULL, --cost center code
                                                                             bmf_rec.BANK_ACCOUNT_NBR,
                                                                             bmf_rec.MICR_FORMAT_ID,
                                                                             bmf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(bmf_rec);
        END LOOP;
        FOR mb_rec IN member_bank_cc_cur LOOP
            mb_rec.EXPIRATION_DATE := GREATEST(mb_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            V_MEMBER_STORE := mb_rec.MEMBER_STORE_NBR;
            /*IF BUSINESS_RULES_PKG.IS_MEMBER_EXPIRATION_INVALID(mb_rec.MEMBER_STORE_NBR,
                                                               mb_rec.EXPIRATION_DATE,
                                                               NULL) = 'Y' THEN
                RAISE mbr_exprd_with_actv_dptks;
            END IF;*/
            IF mb_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                             NULL, --bank account number
                                                                             NULL, --micr format id
                                                                             mb_rec.EXPIRATION_DATE);
                DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                    mb_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mb_rec);
        END LOOP;
        FOR lb_rec IN lead_bank_cc_cur LOOP
            lb_rec.EXPIRATION_DATE := GREATEST(lb_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            IF lb_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                             NULL, --bank account number
                                                                             NULL, --micr format id
                                                                             lb_rec.EXPIRATION_DATE);
                DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                    lb_rec.EXPIRATION_DATE);
            END IF;
            IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lb_rec.LEAD_STORE_NBR,
                                                             lb_rec.LEAD_BANK_ACCOUNT_NBR,
                                                             lb_rec.EXPIRATION_DATE,
                                                             NULL) = 'Y' THEN
                RAISE lead_exprd_with_actv_chlds;
            END IF;
            TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lb_rec);
        END LOOP;
        ba_rec.EXPIRATION_DATE := GREATEST(ba_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF BUSINESS_RULES_PKG.IS_BNK_ACCNT_EXPRTN_INVALID(ba_rec.BANK_ACCOUNT_NBR,
                                                          ba_rec.EXPIRATION_DATE,
                                                          NULL) = 'Y' THEN
            RAISE bnk_accnt_exprd_wt_actv_chld;
        END IF;
        TABLE_IU_PKG.BANK_ACCOUNT_I_SP(ba_rec);
    END LOOP;
EXCEPTION
    WHEN bnk_accnt_exprd_wt_actv_chld THEN
        ERRPKG.RAISE_ERR(errnums.en_bnk_accnt_expr_wt_actv_chld,
                         V_PROC_NAME,
                         'Effective date of this future bank account is less than it''s previous lead/MICR formats. Please check the details in previous tab');
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members/store deposit ticket. Please correct the previous future concentration/store deposit ticket first');
    WHEN mbr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_mbr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future member "'|| V_MEMBER_STORE ||'" is less than some of it''s previous store deposit ticket. Please correct the previous future store deposit ticket first');
    WHEN micr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_micr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future MICR "'|| V_FORMAT_NAME ||'" is less than it''s previous stores MICR formats. Please correct the previous stores MICR format first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_CURR_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_CURR_BANK_ACCOUNT;

PROCEDURE EXPIRE_PREV_FTR_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous future records
    before inserting new record

Created : 07/31/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE,
IN_FLAG                IN     VARCHAR2)
IS
    CURSOR bank_account_future_cur IS
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE   < IN_NEW_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_micr_format_future_cur(IN_FUTURE_ID IN NUMBER) IS
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;
    CURSOR lead_bank_cc_future_cur(IN_FUTURE_ID IN NUMBER) IS
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_future_cur(IN_FUTURE_ID IN NUMBER) IS
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    bnk_accnt_exprd_wt_actv_chld EXCEPTION;
    micr_exprd_with_actv_dptks   EXCEPTION;
    mbr_exprd_with_actv_dptks    EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_FTR_BANK_ACCOUNT';
    V_MEMBER_STORE               VARCHAR2(10);
    V_FORMAT_NAME                VARCHAR2(10);
    V_EXPIRE_DATE                DATE := IN_NEW_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR baf_rec IN bank_account_future_cur LOOP
        FOR bmff_rec IN bank_micr_format_future_cur(baf_rec.FUTURE_ID) LOOP
            bmff_rec.EXPIRATION_DATE := GREATEST(bmff_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            V_FORMAT_NAME := bmff_rec.MICR_FORMAT_ID;
            IF IN_FLAG = 'ACCNT_MNTNC' THEN
                IF BUSINESS_RULES_PKG.IS_MICR_EXPIRATION_INVALID(bmff_rec.BANK_ACCOUNT_NBR,
                                                                 bmff_rec.MICR_FORMAT_ID,
                                                                 bmff_rec.EXPIRATION_DATE,
                                                                 bmff_rec.FUTURE_ID) = 'Y' THEN
                    RAISE micr_exprd_with_actv_dptks;
                END IF;
            ELSIF IN_FLAG IN ('MAKE_LEAD', 'TRANSFER') THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(NULL, --cost center code
                                                                           bmff_rec.BANK_ACCOUNT_NBR,
                                                                           bmff_rec.MICR_FORMAT_ID,
                                                                           bmff_rec.FUTURE_ID,
                                                                           bmff_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(bmff_rec);
        END LOOP;
        FOR mbf_rec IN member_bank_cc_future_cur(baf_rec.FUTURE_ID) LOOP
            mbf_rec.EXPIRATION_DATE := GREATEST(mbf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            V_MEMBER_STORE := mbf_rec.MEMBER_STORE_NBR;
            /*IF BUSINESS_RULES_PKG.IS_MEMBER_EXPIRATION_INVALID(mbf_rec.MEMBER_STORE_NBR,
                                                               mbf_rec.EXPIRATION_DATE,
                                                               mbf_rec.FUTURE_ID) = 'Y' THEN
                RAISE mbr_exprd_with_actv_dptks;
            END IF;*/
            IF mbf_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                           NULL, --bank account number
                                                                           NULL, --micr format id
                                                                           mbf_rec.FUTURE_ID,
                                                                           mbf_rec.EXPIRATION_DATE);
                DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                      mbf_rec.FUTURE_ID,
                                                                      mbf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(mbf_rec);
        END LOOP;
        FOR lbf_rec IN lead_bank_cc_future_cur(baf_rec.FUTURE_ID) LOOP
            lbf_rec.EXPIRATION_DATE := GREATEST(lbf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            IF lbf_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                           NULL, --bank account number
                                                                           NULL, --micr format id
                                                                           lbf_rec.FUTURE_ID,
                                                                           lbf_rec.EXPIRATION_DATE);
                DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                      lbf_rec.FUTURE_ID,
                                                                      lbf_rec.EXPIRATION_DATE);
            END IF;
            IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lbf_rec.LEAD_STORE_NBR,
                                                             lbf_rec.LEAD_BANK_ACCOUNT_NBR,
                                                             lbf_rec.EXPIRATION_DATE,
                                                             lbf_rec.FUTURE_ID) = 'Y' THEN
                RAISE lead_exprd_with_actv_chlds;
            END IF;
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(lbf_rec);
        END LOOP;
        baf_rec.EXPIRATION_DATE := GREATEST(baf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF BUSINESS_RULES_PKG.IS_BNK_ACCNT_EXPRTN_INVALID(baf_rec.BANK_ACCOUNT_NBR,
                                                          baf_rec.EXPIRATION_DATE,
                                                          baf_rec.FUTURE_ID) = 'Y' THEN
            RAISE bnk_accnt_exprd_wt_actv_chld;
        END IF;
        TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(baf_rec);
    END LOOP;
EXCEPTION
    WHEN bnk_accnt_exprd_wt_actv_chld THEN
        ERRPKG.RAISE_ERR(errnums.en_bnk_accnt_expr_wt_actv_chld,
                         V_PROC_NAME,
                         'Effective date of this future bank account is less than it''s previous lead/MICR formats. Please check the details in previous tab');
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members. Please correct the previous future concentration first');
    WHEN mbr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_mbr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future member "'|| V_MEMBER_STORE ||'" is less than some of it''s previous store deposit ticket. Please correct the previous future store deposit ticket first');
    WHEN micr_exprd_with_actv_dptks THEN
        ERRPKG.RAISE_ERR(errnums.en_micr_exprd_with_actv_dptks,
                         V_PROC_NAME,
                         'Effective date of this future MICR "'|| V_FORMAT_NAME ||'" is less than it''s previous stores MICR formats. Please correct the previous stores MICR format first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_FTR_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_FTR_BANK_ACCOUNT;

PROCEDURE EXPIRE_PREVIOUS_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/31/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE,
IN_FLAG                IN     VARCHAR2)
IS
BEGIN
    EXPIRE_PREV_CURR_BANK_ACCOUNT(IN_BANK_ACCOUNT_NBR, IN_NEW_EFFECTIVE_DATE, IN_FLAG);
    EXPIRE_PREV_FTR_BANK_ACCOUNT(IN_BANK_ACCOUNT_NBR, IN_NEW_EFFECTIVE_DATE, IN_FLAG);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREVIOUS_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREVIOUS_BANK_ACCOUNT;

PROCEDURE CREATE_LEAD_CHLD_FTR_FRM_CURR ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  to create future records from current records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          Removed code to create member futures for the lead from current future
*******************************************************************************/
    IN_BANK_ACCOUNT_NBR         IN     VARCHAR2,
    IN_EFFECTIVE_DATE           IN     DATE,
    IN_FUTURE_ID                IN     NUMBER)
IS
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
    CURSOR store_micr_format_dtls_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM STORE_MICR_FORMAT_DTLS A
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM BANK_DEP_TICK A
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_bag_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT A.*,
               IN_FUTURE_ID AS FUTURE_ID
          FROM BANK_DEP_BAG_TICK A
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    V_BANK_DEP_TICK_FUTURE           BANK_DEP_TICK_FUTURE%ROWTYPE;
BEGIN
    FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
        FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            bank_dep_tick_rec.EFFECTIVE_DATE           := IN_EFFECTIVE_DATE;
            bank_dep_tick_rec.EXPIRATION_DATE          := NULL;
            bank_dep_tick_rec.DEP_TKTS_ONHAND_QTY      := '0';
            bank_dep_tick_rec.YTD_DEP_TKTS_ORDERED_QTY := '0';
            TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_I_SP(bank_dep_tick_rec);
        END LOOP;
        FOR str_micr_format_rec IN store_micr_format_dtls_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            str_micr_format_rec.EFFECTIVE_DATE  := IN_EFFECTIVE_DATE;
            str_micr_format_rec.EXPIRATION_DATE := NULL;
            TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_I_SP(str_micr_format_rec);
        END LOOP;
        FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            bank_dep_bag_tick_rec.EFFECTIVE_DATE         := IN_EFFECTIVE_DATE;
            bank_dep_bag_tick_rec.EXPIRATION_DATE        := NULL;
            bank_dep_bag_tick_rec.DEPBAG_ONHAND_QTY      := '0';
            bank_dep_bag_tick_rec.DEPBAG_YTD_ORDERED_QTY := '0';
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(bank_dep_bag_tick_rec);
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_LEAD_CHLD_FTR_FRM_CURR ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CREATE_LEAD_CHLD_FTR_FRM_CURR;

PROCEDURE EXPIRE_PREV_CURR_LEAD(
/*******************************************************************************
    This procedure is intended to check and expire previous current records
    before inserting new record

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_LEAD_STORE_NBR      IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE)
IS
    CURSOR lead_bank_cc_cur IS
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_cur IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_CURR_LEAD';
    V_MEMBER_STORE               VARCHAR2(10);
    V_EXPIRE_DATE                DATE := IN_NEW_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR mb_rec IN member_bank_cc_cur LOOP
        mb_rec.EXPIRATION_DATE := GREATEST(mb_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        V_MEMBER_STORE := mb_rec.MEMBER_STORE_NBR;
        IF mb_rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                         NULL, --bank account number
                                                                         NULL, --micr format id
                                                                         mb_rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(mb_rec.MEMBER_STORE_NBR,
                                                                mb_rec.EXPIRATION_DATE);
        END IF;
        TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mb_rec);
    END LOOP;
    FOR lb_rec IN lead_bank_cc_cur LOOP
        lb_rec.EXPIRATION_DATE := GREATEST(lb_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF lb_rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                         NULL, --bank account number
                                                                         NULL, --micr format id
                                                                         lb_rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(lb_rec.LEAD_STORE_NBR,
                                                                lb_rec.EXPIRATION_DATE);
        END IF;
        IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lb_rec.LEAD_STORE_NBR,
                                                         lb_rec.LEAD_BANK_ACCOUNT_NBR,
                                                         lb_rec.EXPIRATION_DATE,
                                                         NULL) = 'Y' THEN
            RAISE lead_exprd_with_actv_chlds;
        END IF;
        TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lb_rec);
    END LOOP;
EXCEPTION
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members/store deposit ticket. Please correct the previous future concentration/store deposit ticket first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_CURR_LEAD', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_CURR_LEAD;

PROCEDURE EXPIRE_PREV_FTR_LEAD(
/*******************************************************************************
    This procedure is intended to check and expire previous future records
    before inserting new record

Created : Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_LEAD_STORE_NBR      IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE)
IS
    CURSOR lead_bank_cc_future_cur IS
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR member_bank_cc_future_cur IS
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND EXPIRATION_DATE IS NULL;

    lead_exprd_with_actv_chlds   EXCEPTION;
    V_PROC_NAME                  VARCHAR2(30) := 'EXPIRE_PREV_FTR_LEAD';
    V_MEMBER_STORE               VARCHAR2(10);
    V_EXPIRE_DATE                DATE := IN_NEW_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR lbf_rec IN lead_bank_cc_future_cur LOOP
        FOR mbf_rec IN member_bank_cc_future_cur LOOP
            mbf_rec.EXPIRATION_DATE := GREATEST(mbf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            V_MEMBER_STORE := mbf_rec.MEMBER_STORE_NBR;
            IF mbf_rec.EXPIRATION_DATE IS NOT NULL THEN
                DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                           NULL, --bank account number
                                                                           NULL, --micr format id
                                                                           mbf_rec.FUTURE_ID,
                                                                           mbf_rec.EXPIRATION_DATE);
                DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(mbf_rec.MEMBER_STORE_NBR,
                                                                      mbf_rec.FUTURE_ID,
                                                                      mbf_rec.EXPIRATION_DATE);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(mbf_rec);
        END LOOP;
        lbf_rec.EXPIRATION_DATE := GREATEST(lbf_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF lbf_rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                       NULL, --bank account number
                                                                       NULL, --micr format id
                                                                       lbf_rec.FUTURE_ID,
                                                                       lbf_rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(lbf_rec.LEAD_STORE_NBR,
                                                                  lbf_rec.FUTURE_ID,
                                                                  lbf_rec.EXPIRATION_DATE);
        END IF;
        IF BUSINESS_RULES_PKG.IS_LEAD_EXPIRATION_INVALID(lbf_rec.LEAD_STORE_NBR,
                                                         lbf_rec.LEAD_BANK_ACCOUNT_NBR,
                                                         lbf_rec.EXPIRATION_DATE,
                                                         lbf_rec.FUTURE_ID) = 'Y' THEN
            RAISE lead_exprd_with_actv_chlds;
        END IF;
        TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(lbf_rec);
    END LOOP;
EXCEPTION
    WHEN lead_exprd_with_actv_chlds THEN
        ERRPKG.RAISE_ERR(errnums.en_lead_exprd_with_actv_chlds,
                         V_PROC_NAME,
                         'Effective date of this future lead is less than some of it''s previous members. Please correct the previous future concentration first');
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_FTR_LEAD', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_FTR_LEAD;

PROCEDURE EXPIRE_PREVIOUS_LEAD(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 10/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_BANK_ACCOUNT_NBR    IN     BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE,
IN_LEAD_STORE_NBR      IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE,
IN_NEW_EFFECTIVE_DATE  IN     DATE)
IS
BEGIN
    EXPIRE_PREV_CURR_LEAD(IN_BANK_ACCOUNT_NBR, IN_LEAD_STORE_NBR, IN_NEW_EFFECTIVE_DATE);
    EXPIRE_PREV_FTR_LEAD(IN_BANK_ACCOUNT_NBR, IN_LEAD_STORE_NBR, IN_NEW_EFFECTIVE_DATE);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREVIOUS_LEAD', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREVIOUS_LEAD;

PROCEDURE ACCNT_MNTNC_FUTURE_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the
Account Maintenance Window that are future records
    Tables: 
       BANK_ACCOUNT_FUTURE
       LEAD_BANK_CC_FUTURE
       BANK_MICR_FORMAT_FUTURE
Expire following tables used in the Account Maintenance Window that are current records
    Tables: 
       BANK_ACCOUNT
       LEAD_BANK_CC
       BANK_MICR_FORMAT

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/08/2015 jxc517 CCN Project....
          bug on 10/07/2015 in JIRA requires future dated deposit ticket and store MICR
          details insertion not valid for new futures that are getting created
Changed : 10/21/2015 jxc517 CCN Project....
          code changes so that for bank account and bank MICR the effective dates should still carry forward
*******************************************************************************/
    IN_BANK_ACCOUNT_FUTURE_REC         IN BANK_ACCOUNT_FUTURE%ROWTYPE,
    IN_LEAD_BANK_CC_FUTURE_REC         IN LEAD_BANK_CC_FUTURE%ROWTYPE,
    IN_BANK_MICR_FORMAT_FUTURE_TAB     IN TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE)
IS
    V_INDEX               NUMBER := 0;
    V_LEAD_BANK_CC_REC    LEAD_BANK_CC%ROWTYPE;
BEGIN
    V_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR);
    IF V_LEAD_BANK_CC_REC.LEAD_STORE_NBR IS NOT NULL
       AND V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR =  IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR THEN
       --lead details changed for the same account number, expire child from current
        EXPIRE_PREVIOUS_LEAD(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR,
                             IN_LEAD_BANK_CC_FUTURE_REC.LEAD_STORE_NBR,
                             IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE);
    ELSE
        EXPIRE_PREVIOUS_BANK_ACCOUNT(IN_BANK_ACCOUNT_FUTURE_REC.BANK_ACCOUNT_NBR,
                                     IN_BANK_ACCOUNT_FUTURE_REC.EFFECTIVE_DATE,
                                     'ACCNT_MNTNC');
    END IF;
    TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(IN_BANK_ACCOUNT_FUTURE_REC);
    V_INDEX := IN_BANK_MICR_FORMAT_FUTURE_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(IN_BANK_MICR_FORMAT_FUTURE_TAB(V_INDEX));
        V_INDEX := IN_BANK_MICR_FORMAT_FUTURE_TAB.NEXT(V_INDEX);
    END LOOP;
    TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(IN_LEAD_BANK_CC_FUTURE_REC);
    IF V_LEAD_BANK_CC_REC.LEAD_STORE_NBR IS NOT NULL
       AND V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR =  IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR THEN
       --lead details changed for the same account number, create child futures from current
        CREATE_LEAD_CHLD_FTR_FRM_CURR(IN_LEAD_BANK_CC_FUTURE_REC.LEAD_BANK_ACCOUNT_NBR,
                                      IN_LEAD_BANK_CC_FUTURE_REC.EFFECTIVE_DATE,
                                      IN_LEAD_BANK_CC_FUTURE_REC.FUTURE_ID);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_FUTURE_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_FUTURE_UPSERT_SP;

PROCEDURE ACCNT_MNTNC_UI_UPSERT_SP ( 
/******************************************************************************
	This procedure performs the core insert/update process for Account Maintenance Window

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/07/2015 jxc517 CCN Project....
          Added logic to support future dated lead effective dates, to create future details
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
    V_BANK_ACCOUNT_REC                BANK_ACCOUNT%ROWTYPE;
    V_BANK_ACCOUNT_FUTURE_REC         BANK_ACCOUNT_FUTURE%ROWTYPE;
    V_LEAD_BANK_CC_REC                LEAD_BANK_CC%ROWTYPE;
    V_LEAD_BANK_CC_FUTURE_REC         LEAD_BANK_CC_FUTURE%ROWTYPE;
    V_BANK_MICR_FORMAT_TAB            TABLE_IU_PKG.BANK_MICR_FORMAT_TAB_TYPE;
    V_BANK_MICR_FORMAT_FUTURE_TAB     TABLE_IU_PKG.BANK_MICR_FORMAT_FTR_TAB_TYPE;
BEGIN
    --Below code runs once per tab, which means we run either current or future tab at a time but not both at the same time
    BUILD_TABLE_TYPES(IN_ROW_DATA,
                      V_BANK_ACCOUNT_REC,
                      V_BANK_ACCOUNT_FUTURE_REC,
                      V_LEAD_BANK_CC_REC,
                      V_LEAD_BANK_CC_FUTURE_REC,
                      V_BANK_MICR_FORMAT_TAB,
                      V_BANK_MICR_FORMAT_FUTURE_TAB);     
    IF TRUNC(V_LEAD_BANK_CC_REC.EFFECTIVE_DATE) > TRUNC(SYSDATE) THEN
        BUILD_FUTURE_FROM_CURRENT(V_BANK_ACCOUNT_REC,
                                  V_LEAD_BANK_CC_REC,
                                  V_BANK_MICR_FORMAT_TAB,
                                  V_BANK_ACCOUNT_FUTURE_REC,
                                  V_LEAD_BANK_CC_FUTURE_REC,
                                  V_BANK_MICR_FORMAT_FUTURE_TAB);
        V_BANK_ACCOUNT_REC := NULL;
        V_LEAD_BANK_CC_REC := NULL;
        V_BANK_MICR_FORMAT_TAB.DELETE();
    ELSE
        BUSINESS_RULES_PKG.ACCOUNT_MAINTENANCE_BR_SP(V_BANK_ACCOUNT_REC,
                                                     V_BANK_ACCOUNT_FUTURE_REC,
                                                     V_LEAD_BANK_CC_REC,
                                                     V_LEAD_BANK_CC_FUTURE_REC,
                                                     V_BANK_MICR_FORMAT_TAB,
                                                     V_BANK_MICR_FORMAT_FUTURE_TAB);
    END IF;
    IF V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR IS NOT NULL THEN --Current Details
        ACCNT_MNTNC_CURRENT_UPSERT_SP(V_BANK_ACCOUNT_REC,
                                      V_LEAD_BANK_CC_REC,
                                      V_BANK_MICR_FORMAT_TAB);
    ELSE --Future Details
        ACCNT_MNTNC_FUTURE_UPSERT_SP(V_BANK_ACCOUNT_FUTURE_REC,
                                     V_LEAD_BANK_CC_FUTURE_REC,
                                     V_BANK_MICR_FORMAT_FUTURE_TAB);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_UPSERT_SP;

PROCEDURE ACCNT_MNTNC_CURRENT_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process for current records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 08/18/2015 jxc517 CCN Project....
          Added logic to take care of new child table STORE_MICR_FORMAT_DTL for 
          parent table BANK_MICR_FORMAT
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2)
IS
    CURSOR bank_account_cur IS 
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR mbr_bank_cc_cur(IN_LEAD_STORE_NBR IN VARCHAR2) IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR;
    CURSOR bank_micr_format_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR store_micr_format_dtls_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_bag_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
BEGIN
    FOR bank_account_rec IN bank_account_cur LOOP
        FOR bank_micr_format_rec IN bank_micr_format_cur LOOP
            FOR str_micr_format_rec IN store_micr_format_dtls_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_D_SP(str_micr_format_rec);
            END LOOP;
            TABLE_IU_PKG.BANK_MICR_FORMAT_D_SP(bank_micr_format_rec);
        END LOOP;
        FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
            FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                FOR bank_dep_tick_rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
                END LOOP;
                FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(bank_dep_bag_tick_rec);
                END LOOP;
                TABLE_IU_PKG.MEMBER_BANK_CC_D_SP(mbr_bank_cc_rec);
            END LOOP;
            FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
            END LOOP;
            FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(bank_dep_bag_tick_rec);
            END LOOP;
            TABLE_IU_PKG.LEAD_BANK_CC_D_SP(lead_bank_cc_rec);
        END LOOP;
        TABLE_IU_PKG.BANK_ACCOUNT_D_SP(bank_account_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_CURRENT_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_CURRENT_DELETE_SP;

PROCEDURE CREATE_CURRENT_FROM_FUTURE ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  to create current records from passed future records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 10/30/2015 nxk927 CCN Project....
          Code has been changed to deal with Deposit Bag order futures and Deposit ticket order future
*******************************************************************************/
    IN_BANK_ACCOUNT_FTR_REC     IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
V_BANK_DEP_TICK_REC      BANK_DEP_TICK_HIST%ROWTYPE;
V_BANK_DEP_BAG_TICK_REC  BANK_DEP_BAG_TICK_HIST%ROWTYPE;
    --cursor to get all the bank account records for the bank account, future id passed
    CURSOR bank_account_ftr_cur IS 
        SELECT BANK_ACCOUNT_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_NAME,
               BOOK_KEEPER_NBR,
               BANK_AUTO_RECON_IND,
               RECON_START_DATE,
               RECON_BANK_ACCOUNT_NBR,
               JV_BOOK_KEEPER_REF,
               JV_BANK_SHORT_NAME,
               IDI_BOOKKEEPER_REF,
               IDI_BANK_SHORT_NAME,
               ROUTING_NBR,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the lead details for the bank account, future id passed
    CURSOR lead_bank_cc_ftr_cur IS 
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the member details for the bank account, lead store, future id passed
    CURSOR mbr_bank_cc_ftr_cur(IN_LEAD_BANK_CC_REC IN LEAD_BANK_CC%ROWTYPE) IS 
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               MEMBER_STORE_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               MEMBER_BANK_ACCOUNT_NBR,
               BANK_BRANCH_NBR,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank micr details for the bank account, future id passed
    CURSOR bank_micr_format_ftr_cur IS 
        SELECT BANK_ACCOUNT_NBR,
               FORMAT_NAME,
               DJDE_FORM_PARM,
               DJDE_FEED_PARM,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACTNBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the store micr details for the bank account, micr format id, future id passed
    CURSOR store_micr_format_dtls_ftr_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT BANK_ACCOUNT_NBR,
               MICR_FORMAT_ID,
               COST_CENTER_CODE,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACCT_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit ticket details for the store, future id passed
    CURSOR bank_dep_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DAILY_USE_ACTUAL,
               DAILY_USE_OVERRIDE,
               DEP_TKTS_ONHAND_QTY,
               YTD_DEP_TKTS_ORDERED_QTY,
               REORDER_POINT,
               REORDER_NUMBER_BKS,
               IMAGES_PER_PAGE,
               NBR_FORMS_PER_BK,
               PART_PAPER_PER_FORM,
               NBR_DEP_TICKETS_PER_BK,
               SHEETS_OF_PAPER_PER_BK,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               REORDER_SWITCH,
               LAST_VW_ORDER_DATE
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit ticket details for the store, future id passed
    CURSOR bank_dep_tick_ord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DEPOSIT_ORDER_PRIORITY,
               DEPOSIT_ORDER_STATUS,
               DEPOSIT_ORDER_SEQ_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               ORDER_DATE,
               EXTRACTED_USER_ID
          FROM BANK_DEP_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID; 
           
    --cursor to get all the bank deposit bag ticket details for the store, future id passed
    CURSOR bank_dep_bag_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DEPBAG_DAILY_USE_ACTUAL,
               DEPBAG_DLY_USE_OVERRIDE,
               DEPBAG_LAST_ORDER_DATE,
               DEPBAG_LAST_ORDER_QTY,
               DEPBAG_ONHAND_QTY,
               DEPBAG_REORDER_QTY,
               DEPBAG_YTD_ORDERED_QTY,
               DEP_BAG_REORDER_POINT,
               DEP_BAG_TYPE,
               DEP_BAG_REORDER_SWITCH,
               EFFECTIVE_DATE,
               EXPIRATION_DATE
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit bag ticket order details for the store, future id passed
    CURSOR bank_dep_bag_tick_ord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DEPOSIT_BAG_ORDER_PRIORITY,
               DEPOSIT_BAG_ORDER_STATUS,
               DEPOSIT_BAG_ORDER_SEQ_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               ORDER_DATE,
               EXTRACTED_USER_ID
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;     
           
BEGIN
    --loop through the future bank account records and build the current bank account record
    FOR bank_account_rec IN bank_account_ftr_cur LOOP --loops only once for that future id
        TABLE_IU_PKG.BANK_ACCOUNT_I_SP(bank_account_rec);

        --loop through the future bank micr records and build the current bank micr records
        FOR bank_micr_format_rec IN bank_micr_format_ftr_cur LOOP
            TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(bank_micr_format_rec);

            --loop through the future stor micr records and build the current store micr records
            FOR str_micr_format_rec IN store_micr_format_dtls_ftr_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(str_micr_format_rec);
            END LOOP; --store_micr_format_dtls_ftr_cur
        END LOOP; --bank_micr_format_ftr_cur

        --loop through the future lead records and build the current lead records
        FOR lead_bank_cc_rec IN lead_bank_cc_ftr_cur LOOP
            TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lead_bank_cc_rec);

            --loop through the future bank deposit tickets for that lead and build the current bank deposit tickets
            FOR bank_dep_tick_rec IN bank_dep_tick_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                V_BANK_DEP_TICK_REC                        := BANKING_COMMON_TOOLS.GET_DEPOSIT_TICKET_ONHAND_YTD(lead_bank_cc_rec.LEAD_STORE_NBR);
                bank_dep_tick_rec.DEP_TKTS_ONHAND_QTY      := V_BANK_DEP_TICK_REC.DEP_TKTS_ONHAND_QTY;
                bank_dep_tick_rec.YTD_DEP_TKTS_ORDERED_QTY := V_BANK_DEP_TICK_REC.YTD_DEP_TKTS_ORDERED_QTY; 
                TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
            END LOOP; --bank_dep_tick_ftr_cur

            --loop through the future bank deposit bag tickets for that lead and build the current bank deposit tickets
            FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                V_BANK_DEP_BAG_TICK_REC                      := BANKING_COMMON_TOOLS.GET_DEPOSIT_BAG_ONHAND_YTD(lead_bank_cc_rec.LEAD_STORE_NBR);
                bank_dep_bag_tick_rec.DEPBAG_ONHAND_QTY      := V_BANK_DEP_BAG_TICK_REC.DEPBAG_ONHAND_QTY;
                bank_dep_bag_tick_rec.DEPBAG_YTD_ORDERED_QTY := V_BANK_DEP_BAG_TICK_REC.DEPBAG_YTD_ORDERED_QTY; 
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
            END LOOP; --bank_dep_bag_tick_ftr_cur
            
            --loop through the future bank deposit bag tickets order for that lead and build the current bank deposit tickets orders
            FOR bank_dep_tick_ord_ftr_rec IN bank_dep_tick_ord_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tick_ord_ftr_rec);
            END LOOP; --bank_dep_tick_ord_ftr_cur
             
            --loop through the future bank deposit bag order for that lead and build the current bank deposit bag orders
            FOR bank_dep_bag_tick_ord_ftr_rec IN bank_dep_bag_tick_ord_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tick_ord_ftr_rec);
            END LOOP; --bank_dep_bag_tick_ord_ftr_cur

            --loop through the future member details for that lead and build the current member details
            FOR mbr_bank_cc_rec IN mbr_bank_cc_ftr_cur(lead_bank_cc_rec) LOOP
                TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_rec);

                --loop through the future bank deposit tickets for that member and build the current bank deposit tickets
                FOR bank_dep_tick_rec IN bank_dep_tick_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    V_BANK_DEP_TICK_REC                        := BANKING_COMMON_TOOLS.GET_DEPOSIT_TICKET_ONHAND_YTD(mbr_bank_cc_rec.MEMBER_STORE_NBR);
                    bank_dep_tick_rec.DEP_TKTS_ONHAND_QTY      := V_BANK_DEP_TICK_REC.DEP_TKTS_ONHAND_QTY;
                    bank_dep_tick_rec.YTD_DEP_TKTS_ORDERED_QTY := V_BANK_DEP_TICK_REC.YTD_DEP_TKTS_ORDERED_QTY; 
                    TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
                END LOOP; --bank_dep_tick_ftr_cur

                --loop through the future bank deposit bag tickets for that member and build the current bank deposit tickets
                FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    V_BANK_DEP_BAG_TICK_REC                      := BANKING_COMMON_TOOLS.GET_DEPOSIT_BAG_ONHAND_YTD(mbr_bank_cc_rec.MEMBER_STORE_NBR);
                    bank_dep_bag_tick_rec.DEPBAG_ONHAND_QTY      := V_BANK_DEP_BAG_TICK_REC.DEPBAG_ONHAND_QTY;
                    bank_dep_bag_tick_rec.DEPBAG_YTD_ORDERED_QTY := V_BANK_DEP_BAG_TICK_REC.DEPBAG_YTD_ORDERED_QTY;
                    TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
                END LOOP; --bank_dep_bag_tick_ftr_cur
                
                --loop through the future bank deposit bag tickets order for that member and build the current bank deposit tickets orders
                FOR bank_dep_tick_ord_ftr_rec IN bank_dep_tick_ord_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tick_ord_ftr_rec);
                END LOOP; --bank_dep_tick_ord_ftr_cur
                
                --loop through the future bank deposit bag order for that member and build the current bank deposit bag orders
                FOR bank_dep_bag_tick_ord_ftr_rec IN bank_dep_bag_tick_ord_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tick_ord_ftr_rec);
                END LOOP; --bank_dep_bag_tick_ord_ftr_cur
            END LOOP; --mbr_bank_cc_ftr_cur
        END LOOP; --lead_bank_cc_ftr_cur
    END LOOP; --bank_account_ftr_cur
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_CURRENT_FROM_FUTURE ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CREATE_CURRENT_FROM_FUTURE;

PROCEDURE ACCNT_MNTNC_FUTURE_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process for future records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 10/30/2015 nxk927 CCN Project....
          Code has been changed to deal with Deposit Bag order futures and Deposit ticket order future
*******************************************************************************/
    IN_BANK_ACCOUNT_FTR_REC     IN     BANK_ACCOUNT_FUTURE%ROWTYPE,
    IN_FTR_TO_CURR_FLAG         IN     VARCHAR2 DEFAULT 'N')
IS
    --cursor to get all the lead records for the bank account, future id passed
    CURSOR lead_bank_cc_ftr_cur IS 
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank micr records for the bank account, future id passed
    CURSOR bank_micr_format_ftr_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the store micr records for the bank account, micr format id, future id passed
    CURSOR store_micr_format_dtls_ftr_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the member records for the bank account, lead store, future id passed
    CURSOR mbr_bank_cc_ftr_cur(IN_LEAD_BANK_CC_FTR_REC IN LEAD_BANK_CC_FUTURE%ROWTYPE) IS 
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_BANK_CC_FTR_REC.LEAD_STORE_NBR
           AND FUTURE_ID             = IN_LEAD_BANK_CC_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit ticket records for the store, future id passed
    CURSOR bank_dep_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit bag ticket records for the store, future id passed
    CURSOR bank_dep_bag_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;
           
        --cursor to get all the deposit ticket orders records for the store, future id passed
    CURSOR bank_dep_tickord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit bag ticket orders records for the store, future id passed
    CURSOR bank_dep_bag_tickord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

BEGIN
    --check the input flag to make sure, weather we need to create current records from future or not
    IF IN_FTR_TO_CURR_FLAG = 'Y' THEN
        IF IS_REAL_FUTURE_BANK_ACCOUNT(IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR) = 'N' THEN
            --exit out the process without doing anything, if the future record came for deletion is a virtual future
            --NOTE: return should happen only from batch not from UI deletion processes
             RETURN;
        ELSE
            --below call will create the current records from future records
            CREATE_CURRENT_FROM_FUTURE(IN_BANK_ACCOUNT_FTR_REC);
        END IF;
    END IF;

    --get all the bank micr details for this future and loop through
    FOR bank_micr_format_ftr_rec IN bank_micr_format_ftr_cur LOOP

        --for each bank micr, check if there is a child store micr attched to it
        --if so, get that store micr details and delete those child future records first
        FOR str_micr_format_ftr_rec IN store_micr_format_dtls_ftr_cur(bank_micr_format_ftr_rec.MICR_FORMAT_ID) LOOP
            --now delete the store micr format details from the future
            TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_D_SP(str_micr_format_ftr_rec);
        END LOOP; --store_micr_format_dtls_cur

        --now delete the bank micr details from the future
        TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_D_SP(bank_micr_format_ftr_rec);
    END LOOP; --bank_micr_format_cur
    
    --get all the lead bank cc details for this future and loop through
    FOR lead_bank_cc_ftr_rec IN lead_bank_cc_ftr_cur LOOP

        --for each lead bakn, check if there is a child member banks attched to it
        --if so, get that child member bank details and delete those child future records first
        FOR mbr_bank_cc_ftr_rec IN mbr_bank_cc_ftr_cur(lead_bank_cc_ftr_rec) LOOP

            --for this member store, get the bank deposit ticket order details
            --if found, delete those child records first
            FOR bank_dep_tickord_ftr_rec IN bank_dep_tickord_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP
                --now delete the bank deposit ticket details from the future
                TABLE_IU_PKG.BANK_DEP_TICKORD_FUTURE_D_SP(bank_dep_tickord_ftr_rec);
            END LOOP; --bank_dep_tickord_cur

            FOR bank_dep_bag_tickord_ftr_rec IN bank_dep_bag_tickord_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP

                --now delete the bank deposit bag ticket details from the future
                TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_D_SP(bank_dep_bag_tickord_ftr_rec);
            END LOOP; --bank_dep_bag_tickord_cur
            
            --for this member store, get the bank deposit ticket details
            --if found, delete those child records first
            FOR bank_dep_tick_ftr_rec IN bank_dep_tick_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP
                --now delete the bank deposit ticket details from the future
                TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_ftr_rec);
            END LOOP; --bank_dep_tick_cur

            FOR bank_dep_bag_tick_ftr_rec IN bank_dep_bag_tick_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP

                --now delete the bank deposit bag ticket details from the future
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_D_SP(bank_dep_bag_tick_ftr_rec);
            END LOOP; --bank_dep_bag_tick_cur

            --now delete the member bank details from the future
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_D_SP(mbr_bank_cc_ftr_rec);
        END LOOP; --mbr_bank_cc_cur

            --for this lead store, get the bank deposit ticket order details
            --if found, delete those child records first
            FOR bank_dep_tickord_ftr_rec IN bank_dep_tickord_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP
                --now delete the bank deposit ticket details from the future
                TABLE_IU_PKG.BANK_DEP_TICKORD_FUTURE_D_SP(bank_dep_tickord_ftr_rec);
            END LOOP; --bank_dep_tickord_cur

            FOR bank_dep_bag_tickord_ftr_rec IN bank_dep_bag_tickord_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP

                --now delete the bank deposit bag ticket details from the future
                TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_D_SP(bank_dep_bag_tickord_ftr_rec);
            END LOOP; --bank_dep_bag_tickord_cur
        
        --for this lead store, get the bank deposit ticket details
        --if found, delete those child records first
        FOR bank_dep_tick_ftr_rec IN bank_dep_tick_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP

            --now delete the bank deposit ticket details from the future
            TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_ftr_rec);
        END LOOP; --bank_dep_tick_cur
        
        FOR bank_dep_bag_tick_ftr_rec IN bank_dep_bag_tick_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP

            --now delete the bank deposit ticket bag details from the future
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_D_SP(bank_dep_bag_tick_ftr_rec);
        END LOOP; --bank_dep_bag_tick_cur

        --now delete the lead bank details from the future
        TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_D_SP(lead_bank_cc_ftr_rec);
    END LOOP; --lead_bank_cc_cur

    --now delete the bank account details from the future
    TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_D_SP(IN_BANK_ACCOUNT_FTR_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_FUTURE_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_FUTURE_DELETE_SP;

PROCEDURE ACCNT_MNTNC_UI_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Account Maintenance Window,
  delete process

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2,
    IN_FUTURE_ID            IN  NUMBER)
IS
    CURSOR bank_account_ftr_cur(IN_FTR_ID    IN    NUMBER) IS 
        SELECT *
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND FUTURE_ID >= IN_FTR_ID;
BEGIN
    /*Business Rules  - TBD*/
    IF IN_FUTURE_ID IS NOT NULL THEN --deleting from a future record
        FOR bank_account_ftr_rec IN bank_account_ftr_cur(IN_FUTURE_ID) LOOP
            ACCNT_MNTNC_FUTURE_DELETE_SP(bank_account_ftr_rec, 'N'); --N here say's not to move future to current
        END LOOP;
    ELSE --deleting from a current record
        FOR bank_account_ftr_rec IN bank_account_ftr_cur(1) LOOP --notice hard coded "1" to delete all futures
            ACCNT_MNTNC_FUTURE_DELETE_SP(bank_account_ftr_rec, 'N'); --N here say's not to move future to current
        END LOOP;
        ACCNT_MNTNC_CURRENT_DELETE_SP(IN_BANK_ACCOUNT_NUMBER);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_DELETE_SP;

PROCEDURE ACCNT_MNTNC_EXP_DELETE_SP ( 
/******************************************************************************
	This procedure performs the delete process for expired member future records
  and its related tables

Created : 10/02/2015 sxh487 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER      IN  VARCHAR2,
    IN_LEAD_STORE_NBR           IN  VARCHAR2,
    IN_MEMBER_STORE_NBR         IN  VARCHAR2,
    IN_FUTURE_ID                IN  NUMBER)
IS
    CURSOR mbr_bank_cc_cur IS 
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND MEMBER_STORE_NBR      = IN_MEMBER_STORE_NBR
           AND FUTURE_ID             = IN_FUTURE_ID;
    CURSOR store_micr_format_dtls_cur IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_tick_cur IS
        SELECT *
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        = IN_FUTURE_ID;
    CURSOR bank_dep_tickord_cur IS
        SELECT *
          FROM BANK_DEP_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        = IN_FUTURE_ID;
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        = IN_FUTURE_ID;
    CURSOR bank_dep_bag_tickord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        = IN_FUTURE_ID;
BEGIN
     --expire CC related child tables
     FOR str_micr_format_rec IN store_micr_format_dtls_cur LOOP
         TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_D_SP (str_micr_format_rec);
     END LOOP;
     FOR bank_dep_tick_rec IN bank_dep_tick_cur LOOP
         TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_rec);
     END LOOP;
     FOR bank_dep_tickord_rec IN bank_dep_tickord_cur LOOP
         TABLE_IU_PKG.BANK_DEP_TICKORD_FUTURE_D_SP(bank_dep_tickord_rec);
     END LOOP;
     FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
         TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_D_SP(bank_dep_bag_tick_rec);
     END LOOP;
     FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur LOOP
         TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_D_SP(bank_dep_bag_tickord_rec);
     END LOOP;
     FOR mbr_bank_cc_rec IN mbr_bank_cc_cur LOOP
         TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_D_SP(mbr_bank_cc_rec);
     END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_EXP_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_EXP_DELETE_SP;

PROCEDURE ACCNT_MNTNC_UNEXPIRE_SP ( 
/******************************************************************************
	This procedure Un-Expires the current records that have a future
  expiration date
  
Created : 09/28/2015 sxh487 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2)
IS
    CURSOR bank_account_cur IS 
        SELECT *
          FROM BANK_ACCOUNT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR mbr_bank_cc_cur(IN_LEAD_STORE_NBR IN VARCHAR2) IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR;
    CURSOR bank_micr_format_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER;
    CURSOR store_micr_format_dtls_cur(IN_MICR_FORMAT_ID NUMBER) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_tickord_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_bag_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_bag_tickord_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
BEGIN
     FOR bank_account_rec IN bank_account_cur LOOP
         FOR bank_micr_format_rec IN bank_micr_format_cur LOOP
             FOR str_micr_format_rec IN store_micr_format_dtls_cur(bank_micr_format_rec.MICR_FORMAT_ID) LOOP
                 str_micr_format_rec.EXPIRATION_DATE := NULL;
                 TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(str_micr_format_rec);
             END LOOP;
             bank_micr_format_rec.EXPIRATION_DATE := NULL;
             TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(bank_micr_format_rec);
         END LOOP;
         FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
             FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                 FOR bank_dep_tick_rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                     bank_dep_tick_rec.EXPIRATION_DATE := NULL;
                     TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
                 END LOOP;
                 FOR bank_dep_tickord_rec IN bank_dep_tickord_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                     bank_dep_tickord_rec.EXPIRATION_DATE := NULL;
                     TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tickord_rec);
                 END LOOP;
                 FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                     bank_dep_bag_tick_rec.EXPIRATION_DATE := NULL;
                     TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
                 END LOOP;
                 FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                     bank_dep_bag_tickord_rec.EXPIRATION_DATE := NULL;
                     TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tickord_rec);
                 END LOOP;
                 mbr_bank_cc_rec.EXPIRATION_DATE := NULL;
                 TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_rec);
             END LOOP;
             FOR bank_dep_tick_rec IN bank_dep_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                 bank_dep_tick_rec.EXPIRATION_DATE := NULL;
                 TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
             END LOOP;
             FOR bank_dep_tickord_rec IN bank_dep_tickord_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                 bank_dep_tickord_rec.EXPIRATION_DATE := NULL;
                 TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tickord_rec);
             END LOOP;
             FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                 bank_dep_bag_tick_rec.EXPIRATION_DATE := NULL;
                 TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
             END LOOP;
             FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                 bank_dep_bag_tickord_rec.EXPIRATION_DATE := NULL;
                 TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tickord_rec);
             END LOOP;
             lead_bank_cc_rec.EXPIRATION_DATE := NULL;
             TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lead_bank_cc_rec);
         END LOOP;
         bank_account_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.BANK_ACCOUNT_I_SP(bank_account_rec);
     END LOOP;
       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UNEXPIRE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UNEXPIRE_SP;

PROCEDURE ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP ( 
/******************************************************************************
	This procedure Un-Expires the current records that are cost center related and
  have a future expiration date
  
Created : 09/28/2015 sxh487 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2,
    IN_LEAD_STORE_NBR       IN  VARCHAR2,
    IN_MEMBER_STORE_NBR     IN  VARCHAR2)
IS
    CURSOR mbr_bank_cc_cur IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND MEMBER_STORE_NBR      = IN_MEMBER_STORE_NBR;
    CURSOR store_micr_format_dtls_cur IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NUMBER
           AND COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_tick_cur IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_tickord_cur IS
        SELECT *
          FROM BANK_DEP_TICKORD
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_bag_tickord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
BEGIN
     --expire CC related child tables
     FOR str_micr_format_rec IN store_micr_format_dtls_cur LOOP
         str_micr_format_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(str_micr_format_rec);
     END LOOP;
     FOR bank_dep_tick_rec IN bank_dep_tick_cur LOOP
         bank_dep_tick_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
     END LOOP;
     FOR bank_dep_tickord_rec IN bank_dep_tickord_cur LOOP
         bank_dep_tickord_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tickord_rec);
     END LOOP;
     FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
         bank_dep_bag_tick_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
     END LOOP;
     FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur LOOP
         bank_dep_bag_tickord_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tickord_rec);
     END LOOP;
     FOR mbr_bank_cc_rec IN mbr_bank_cc_cur LOOP
         mbr_bank_cc_rec.EXPIRATION_DATE := NULL;
         TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_rec);
     END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP;

END ACCOUNT_MAINTENANCE_PKG;