create or replace PACKAGE BODY STR_BNK_DPST_DLY_RCNCL_PROCESS
AS
/**********************************************************
  This Package contains procedure to perform the "Store Bank
  Deposit Daily Reconciliation" process
  This package will be used to generate 2 different files
  SMIS1.SRA12060*(uar.pos)  and SMIS1_SRA10060*(serial.dat)
  The UAR_POS file will be generated from 3 Input files that we will be recieving everyday
  (SRA13510_*.TXT  , SRA10510_*.TXT , SRA11060_*.TXT)
  These will be loaded into it's respective local tables as
  SRA13510_*.TXT --> JV_EXTRCT_CNTRL_FL table
  SRA10510_*.TXT --> SUMMARY_EXTRCT_CNTRL_FL  table
  SRA11060_*.TXT --> ACH_DRFTS_EXTRCT_CNTRL_FL table

  The Serial Dat file will be generated based on the HIERARCHY_DETAIL_VIEW,
  ADDRESS_ALL, COST_CENTER tables and  Banking tables

Created : 06/19/2015 jxc517 CCN Project....
Changed :
**********************************************************/

FUNCTION FORMAT_INPUT_FOR_FILE(
/*****************************************************************************
	This function will return the formatted data as requested  

Created : 06/19/2015 jxc517 CCN Project....
Changed :
*****************************************************************************/
IN_VALUE         IN VARCHAR2,
IN_PADDING_VALUE IN VARCHAR2,
IN_LENGTH        IN NUMBER,
IN_PRECISION     IN NUMBER DEFAULT 0
) RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(32000);
    V_DECIMAL_LOCATION  NUMBER;
    V_LEFT_SIDE_VALUE   VARCHAR2(32000) := IN_PADDING_VALUE;
    V_RIGHT_SIDE_VALUE  VARCHAR2(32000) := IN_PADDING_VALUE;
BEGIN
    IF IN_VALUE IS NOT NULL THEN
        V_DECIMAL_LOCATION := INSTR(IN_VALUE,'.');
        IF V_DECIMAL_LOCATION <> 0 THEN
           V_LEFT_SIDE_VALUE  := SUBSTR(IN_VALUE,1,V_DECIMAL_LOCATION - 1);
           V_RIGHT_SIDE_VALUE := SUBSTR(IN_VALUE,V_DECIMAL_LOCATION + 1);
        ELSE
           V_LEFT_SIDE_VALUE  := IN_VALUE;
        END IF;
    END IF;
    RETURN LPAD(V_LEFT_SIDE_VALUE,IN_LENGTH-IN_PRECISION,IN_PADDING_VALUE) || 
           RPAD(V_RIGHT_SIDE_VALUE,IN_PRECISION,IN_PADDING_VALUE);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END FORMAT_INPUT_FOR_FILE;

PROCEDURE GET_LEAD_BANK_RECORD(
/******************************************************************************
  This procedure gets the lead bank record for the cost center passed in

Created : 06/22/2015 jxc517 CCN Project....
Changed : Parameter IN_COST_CENTER_CODE should be passed as 4 characters. If 6 characters
          use substr(cc,3)
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_LEAD_BANK_RECORD         OUT LEAD_BANK_CC%ROWTYPE)
IS
BEGIN
    --(assuming its a member)Get the lead for the passed cost center
    BEGIN
        SELECT LEAD_STORE_NBR
          INTO OUT_LEAD_BANK_RECORD.LEAD_STORE_NBR
          FROM MEMBER_BANK_CC
         WHERE SUBSTR(MEMBER_STORE_NBR,3) = IN_COST_CENTER_CODE
           AND ROWNUM < 2;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    --get the lead details(if its not member NVL makes the passed cost center the lead)
    BEGIN
        SELECT *
          INTO OUT_LEAD_BANK_RECORD
          FROM LEAD_BANK_CC
         WHERE SUBSTR(LEAD_STORE_NBR,3) = NVL(SUBSTR(OUT_LEAD_BANK_RECORD.LEAD_STORE_NBR,3), IN_COST_CENTER_CODE);
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
END GET_LEAD_BANK_RECORD;

PROCEDURE GET_LEAD_BANK_ACCOUNT_REC(
/******************************************************************************
  This procedure gets the lead bank account for the lead bank account number passed in

Created : 06/22/2015 jxc517 CCN Project....
Changed :
*******************************************************************************/
IN_BANK_ACCOUNT_NBR       IN     VARCHAR2,
OUT_LEAD_BANK_RECORD         OUT BANK_ACCOUNT%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_LEAD_BANK_RECORD
      FROM BANK_ACCOUNT
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Should never come here, never ever!!!!');
END GET_LEAD_BANK_ACCOUNT_REC;

PROCEDURE LOAD_STR_BNK_DPST_DLY_RCNCL_TB(
/******************************************************************************
  This procedure loads STR_BNK_DPST_DLY_RCNCL_TBL [Mark IV SRA10001 table]
  for the date passed in as part of SRA11000 process

Created : 06/23/2015 jxc517 CCN Project....
Changed : 01/29/2015 nxk927/dxv848 CCN Project....
          Modified code to pass Lead Store Number only for member stores
        : 04/27/2016 nxk927 CCN Project....
          passing 4 digits cost center to GET_LEAD_BANK_RECORD instead of 6 digits
*******************************************************************************/
IN_DATE            IN         DATE)
IS
    CURSOR main_cur IS
        SELECT CC.COST_CENTER_CODE,
               CC.COST_CENTER_NAME,
               HDV.DIVISION,
               HDV.AREA,
               HDV.DISTRICT
          FROM COST_CENTER CC,
               HIERARCHY_DETAIL_VIEW HDV
         WHERE CC.COST_CENTER_CODE = HDV.COST_CENTER_CODE
           AND HDV.HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY'
           AND CC.CATEGORY IN ('S','O')
           AND NVL(CC.CLOSE_DATE + 183, TRUNC(IN_DATE)) >= TRUNC(IN_DATE);

    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
    V_BANK_ACCOUNT_REC BANK_ACCOUNT%ROWTYPE;
    V_COUNT            NUMBER := 0;
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE STR_BNK_DPST_DLY_RCNCL_TBL';
    --Loop through all the store/other category cost centers that are open currently (or) closed in last 6 months
    FOR rec IN main_cur LOOP
        V_LEAD_BANK_CC_REC := NULL;
        V_BANK_ACCOUNT_REC := NULL;
        V_COUNT            := V_COUNT + 1;
        --Get the lead bank record for the store
        GET_LEAD_BANK_RECORD(SUBSTR(rec.COST_CENTER_CODE,3),
                             V_LEAD_BANK_CC_REC);
        --Passed cost center not a lead/independent nor a member => should go into error report
        IF V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR IS NULL THEN
           DBMS_OUTPUT.PUT_LINE('SRA10040 Error Report : ' || rec.COST_CENTER_CODE || ' : concentration not found');
        ELSE
            --Lead is different from looping store => looping store is a member store
           IF V_LEAD_BANK_CC_REC.LEAD_STORE_NBR <> rec.COST_CENTER_CODE THEN
              V_LEAD_BANK_CC_REC.BANK_TYPE_CODE := 'M';
           END IF;
           --Get the bank account details for the lead store
           GET_LEAD_BANK_ACCOUNT_REC(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,
                                     V_BANK_ACCOUNT_REC);
           --Further processing continues only if the bank account is under auto reconciliation
           IF NVL(V_BANK_ACCOUNT_REC.BANK_AUTO_RECON_IND,'N') = 'Y' THEN
              --Auto reconciliation date should be maximum of effective date, reconciliatrion start date
              IF V_BANK_ACCOUNT_REC.EFFECTIVE_DATE >= V_BANK_ACCOUNT_REC.RECON_START_DATE THEN
                 V_BANK_ACCOUNT_REC.RECON_START_DATE := V_BANK_ACCOUNT_REC.EFFECTIVE_DATE;
              END IF;
           ELSE
              DBMS_OUTPUT.PUT_LINE(rec.COST_CENTER_CODE || ' : not part of AUTO RECONCILIATION');
           END IF;
        END IF;
        --Lead Store Number should be passed back only if it is a member stores
        IF V_LEAD_BANK_CC_REC.BANK_TYPE_CODE IN ('L', 'I') THEN
            V_LEAD_BANK_CC_REC.LEAD_STORE_NBR := NULL;
        END IF;
        --Push the data into STR_BNK_DPST_DLY_RCNCL_TBL table [SMIS1.TMP.SRA10061 for MARK-IV table (SRA10001)]
        INSERT INTO STR_BNK_DPST_DLY_RCNCL_TBL VALUES (rec.COST_CENTER_CODE,
                                                       NVL(V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR, 'NOT_AVAILABLE'),
                                                       rec.COST_CENTER_NAME,
                                                       V_BANK_ACCOUNT_REC.BANK_NAME,
                                                       V_BANK_ACCOUNT_REC.RECON_START_DATE,
                                                       V_BANK_ACCOUNT_REC.BANK_AUTO_RECON_IND,
                                                       V_LEAD_BANK_CC_REC.LEAD_STORE_NBR,
                                                       V_LEAD_BANK_CC_REC.BANK_TYPE_CODE,
                                                       rec.DIVISION,
                                                       rec.AREA,
                                                       rec.DISTRICT);
        IF V_COUNT > 1000 THEN
            COMMIT;
        END IF;
    END LOOP;
    COMMIT;
END LOAD_STR_BNK_DPST_DLY_RCNCL_TB;

PROCEDURE GENERATE_UAR_SERIAL_FILE(
/******************************************************************************
  This procedure will generate the UAR SERIAL FILE [SMIS1.SRA10060(+1) -> SMIS.SERIAL.DAT]
  that needs to be ftp'd as part of SRA11000, SRA90100 process

Created : 06/23/2015 jxc517 CCN Project....
Changed :
*******************************************************************************/
IN_DATE            IN         DATE)
IS
    CURSOR main_cur IS
        SELECT *
          FROM STR_BNK_DPST_DLY_RCNCL_TBL
         WHERE RECONCILIATION_IND = 'Y'
           AND BANK_ACCOUNT_NBR   <> 'NOT_AVAILABLE'
         ORDER BY COST_CENTER_CODE;

    PATH        	       VARCHAR2(50) := 'BANKING_LOAD_FILES';
    UAR_SERIAL_FL_NM     VARCHAR2(50) := 'SMIS1.SRA10060_' ||
                                         TO_CHAR(IN_DATE,'DDMONRRRR') || '_' ||
                                         TO_CHAR(SYSDATE,'HH24MISS');
    UAR_SERIAL_OTPT_FL   UTL_FILE.FILE_TYPE;

    V_ADDRESS_REC      ADDRESS_VW%ROWTYPE;
    V_PHONE_REC        CCN_PHONE_INFO_VW%ROWTYPE;
    V_OUT_CLOB         CLOB;
    V_COUNT            NUMBER := 0;
BEGIN
    UAR_SERIAL_OTPT_FL := UTL_FILE.FOPEN (PATH
                                          ,UAR_SERIAL_FL_NM
                                          ,'W' --BINARY
                                          ,32767);
    FOR rec IN main_cur LOOP
        V_ADDRESS_REC := NULL;
        V_PHONE_REC   := NULL;
        --Push the data into SMIS1.SRA10060(+1) file
        V_COUNT := V_COUNT + 1;
        BANKING_COMMON_TOOLS.GET_ADDRESS_RECORD(rec.COST_CENTER_CODE,
                                                V_ADDRESS_REC);
        BANKING_COMMON_TOOLS.GET_PHONE_RECORD(rec.COST_CENTER_CODE,
                                              V_PHONE_REC);
        V_OUT_CLOB := V_OUT_CLOB ||
                    '5' ||                                                                                --SER-FLAG (1)
                    '0' ||                                                                                --STORE-NBR-PFX (1)
                    RPAD(NVL(SUBSTR(rec.COST_CENTER_CODE, 3), ' '), 16, ' ') ||                           --STORE-NBR (4 + 12 spaces)
                    RPAD(NVL(rec.COST_CENTER_NAME, ' '), 35, ' ') ||                                      --STORE-NAME (35)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 56) ||                                                --FILLER (5 + 17 + 17 + 17 spaces)
                    FORMAT_INPUT_FOR_FILE(NVL(REPLACE(rec.BANK_ACCOUNT_NBR,'-'), ' '), 0, 17) ||          --BANK-ACCOUNT-NBR (17)
                    RPAD(NVL(rec.DIVISION, ' '), 17, ' ') ||                                              --DIVISION-NBR (2 + 15 spaces)
                    RPAD(NVL(rec.AREA, ' '), 17, ' ') ||                                                  --AREA-NBR (2 + 15 spaces)
                    RPAD(NVL(rec.DISTRICT, ' '), 40, ' ') ||                                              --DISTRICT-NBR (2 + 38 spaces)
                    RPAD(NVL(SUBSTR(rec.LEAD_BANK_CC, 3), ' '), 4, ' ') ||                                --STORE-NBR (4)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 1) ||                                                 --FILLER (1 space)
                    FORMAT_INPUT_FOR_FILE(NVL(rec.BANK_TYPE_CODE, ' '), ' ', 1) ||                        --BANKING-TYPE (1)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 1) ||                                                 --FILLER (1 space)
                    RPAD(NVL(rec.BANK_NAME, ' '), 26, ' ') ||                                             --BANK-NAME (26)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 7) ||                                                 --FILLER (7 spaces)
--??? lead store name or actual store name - for now assuming it as actual store name
                    RPAD(NVL(rec.COST_CENTER_NAME, ' '), 35, ' ') ||                                      --STORE-NAME-2 (35)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 4) ||                                                 --FILLER (4 spaces)
                    RPAD('SHERWIN-WILLIAMS STORE #', 24, ' ') ||                                          --SHERWIN-WILLIAMS (24)
                    RPAD(NVL(SUBSTR(V_ADDRESS_REC.COST_CENTER_CODE, 3), ' '), 4, ' ') ||                  --ADDR-STORE-NBR (4)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 11) ||                                                --FILLER (11 spaces)
                    RPAD(NVL(V_ADDRESS_REC.ADDRESS_LINE_1, ' '), 30, ' ') ||                              --ADDR-LINE-1 (30)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 48) ||                                                --FILLER (9 + 39 spaces)
                    RPAD(NVL(V_ADDRESS_REC.CITY, ' '), 20, ' ') ||                                        --ADDR-LINE-1 (20)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 9) ||                                                 --FILLER (9 spaces)
                    RPAD(NVL(NVL(V_ADDRESS_REC.STATE_CODE,V_ADDRESS_REC.PROVINCE_CODE), ' '), 2, ' ') ||  --STATE (2)
                    RPAD(NVL(NVL(V_ADDRESS_REC.ZIP_CODE,V_ADDRESS_REC.POSTAL_CODE), ' '), 5, ' ') ||      --ADDR-ZIP-1-5 (5)
                    RPAD(NVL(V_ADDRESS_REC.ZIP_CODE_4, ' '), 4, ' ') ||                                   --ADDR-ZIP-6-9 (4)
                    FORMAT_INPUT_FOR_FILE(NVL(V_PHONE_REC.PRIMARY_PHONE_NUMBER,
                                          NVL(V_PHONE_REC.SECONDARY_PHONE_NUMBER, '9')),
                                          '9', 10) ||                                                     --AREA-CODE || PHONE-NBR (9)
                    FORMAT_INPUT_FOR_FILE(' ', ' ', 4) ||                                                 --FILLER (4 spaces)
                    FORMAT_INPUT_FOR_FILE(1, 0, 12) ||                                                    --S1-DEPO-AMT = 0.01 (12)
                    FORMAT_INPUT_FOR_FILE(1, 0, 12) ||                                                    --S2-DEPO-AMT = 0.01 (12)
                    FORMAT_INPUT_FOR_FILE(1, 0, 12) ||                                                    --S2-END-DEPO-AMT = 0.01 (12)
                    FORMAT_INPUT_FOR_FILE(1, 0, 12) ||                                                    --S1-END-DEPO-AMT = 0.01 (12)
                    CHR(13);
        IF V_COUNT = 50 THEN
            UTL_FILE.PUT_LINE(UAR_SERIAL_OTPT_FL, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
            V_COUNT := 0;
        END IF;
    END LOOP;
     IF V_OUT_CLOB <> EMPTY_CLOB() THEN
        UTL_FILE.PUT_LINE(UAR_SERIAL_OTPT_FL, V_OUT_CLOB, TRUE);
        V_OUT_CLOB := NULL;
        V_COUNT := 0;
    END IF;
    UTL_FILE.FCLOSE(UAR_SERIAL_OTPT_FL);
END GENERATE_UAR_SERIAL_FILE;

PROCEDURE GENERATE_HEADER(
/******************************************************************************
  This procedure generates Header for UAR POS files
  as part of SRA10500 process

Created : 01/28/2015 nxk927/dxv848 CCN Project....
Changed :
*******************************************************************************/
IN_BANK_ACCOUNT_NBR IN    VARCHAR2,
OUT_HEADER            OUT CLOB)
IS
BEGIN
    OUT_HEADER := '0' ||                                                       --SER-FLAG (1)
                  FORMAT_INPUT_FOR_FILE(' ', ' ', 51) ||                       --FIELD-1, 2, 3 (17 + 17 + 17 spaces)
                  FORMAT_INPUT_FOR_FILE(IN_BANK_ACCOUNT_NBR, '0', 17) ||       --BANK-ACCOUNT-NBR (17)
                  'P' ||                                                       --SOURCE (1)
                  TO_CHAR(SYSDATE,'RRMMDDHH24MISS') ||                         --DATE (6) +  TIME (6)
                  FORMAT_INPUT_FOR_FILE(' ', ' ', 153) ||                      --PARALLEL (3)+ FILLER (150)
                  CHR(13);
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END GENERATE_HEADER;

PROCEDURE GENERATE_TRAILER(
/******************************************************************************
  This procedure generates trailer for UAR POS files
  as part of SRA10500 process

Created : 01/28/2015 nxk927/dxv848 CCN Project....
Changed :
*******************************************************************************/
IN_UAR_POS_FLAG IN     VARCHAR2,
IN_AMOUNT       IN     NUMBER,
OUT_TRAILER        OUT CLOB)
IS
    V_CFS_SIGN VARCHAR2(1) := '-';
BEGIN
    IF IN_AMOUNT >= 0 THEN
        V_CFS_SIGN := '+';
    END IF;
    IF IN_UAR_POS_FLAG = 'Y'  THEN
        OUT_TRAILER := '9' ||                                             --SER-FLAG (1)
                       FORMAT_INPUT_FOR_FILE('0', '0', 14) ||             --BEG-BALANCE (14)
                       '+' ||                                             --BEG-BALANCE-SIGN (1)
                       FORMAT_INPUT_FOR_FILE('0', '0', 14) ||             --END-BALANCE (14)
                       '+' ||                                             --END-BALANCE-SIGN (1)
                       FORMAT_INPUT_FOR_FILE(' ', ' ', 204)||             --FILLER (204 spaces)
                       CHR(13);
    ELSE
        OUT_TRAILER := '9' ||                                             --SER-FLAG (1)
                       FORMAT_INPUT_FOR_FILE('0', '0', 14) ||             --BEG-BALANCE (14)
                       '+' ||                                             --BEG-BALANCE-SIGN (1)
                       FORMAT_INPUT_FOR_FILE(ABS(IN_AMOUNT), '0', 14) ||  --END-BALANCE (14)
                       V_CFS_SIGN ||                                      --END-BALANCE-SIGN (1)
                       FORMAT_INPUT_FOR_FILE(' ', ' ', 204) ||            --FILLER (204 spaces)
                       CHR(13);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END GENERATE_TRAILER;

FUNCTION RETURN_REFEED_CODE(
/*****************************************************************************
	This function will return the refeed code from the Refeed_lookup_tb for the 
  passed Tcode

Created : 08/23/2016 nxk927 CCN Project....
Changed :
*****************************************************************************/
IN_TCODE         IN VARCHAR2
) RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(5);
BEGIN
    SELECT REFEED_TCODE
      INTO V_RETURN_VALUE
      FROM REFEED_LOOKUP_TB
     WHERE TCODE = IN_TCODE;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END RETURN_REFEED_CODE;

PROCEDURE GENERATE_UAR_POS_REFEED_FILE(
/******************************************************************************
  This procedure will generate UAR POSITION FILE [SRA12060] file using SRA11063, SRA13514
  that needs to be ftp'd as part of SRA12000 process

  This procedure will write the data from the bank account number passed to it. It will first
  create the header for the bank account number passed, then will write the body for all
  the cost center associated with it. When it's done with the body it will write the trailer

  In this process we will validate the data (cost center and bank account number)
  If the cost center sent in the file is not valide, then we will assign it with Code1 (exception codes) as SNZ
  If the bank account number that is in the input file doesn't match with the serial dat file that we will write,
  then the Code1 (exception codes) will be assigned as SAM else nothing

  For the code we have list of Tcode from which we will assign it to be either OC or OD
  TCODES as 2255,2896, 0594, 2895 will be assigned as OC and rest OD

Created : 06/29/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          Comparing today's data with yesterday's data from same table
        : 01/29/2016 nxk927/dxv848 CCN Project....
          moved this code to generate refeed file in seperate procedure
        : 02/18/2016 nxk927/dxv848 CCN Project....
          Removing the TRANSACTION_DATE logic  to pickup all the records and
          the date condition as we no longer consider the day check
        : 04/28/2016 nxk927 CCN Project....
          changed the function name from VALIDATE_CC_BNK_NBR to GET_SNZ_SAM_CODE
        : 08/23/2016 nxk927 CCN Project....
          changed the table where the data was being pulled
        : 03/17/2017 nxk927 CCN Project....
          taking source bank account number directly
*******************************************************************************/
IN_BANK_ACCOUNT_NBR     IN     VARCHAR2,
IN_DATE                 IN     DATE,
IO_UAR_POSITION_OTPT_FL IN OUT UTL_FILE.FILE_TYPE)
IS
   CURSOR refeed_cur IS  --POS_REFEED_CUR
        SELECT COST_CENTER_CODE,
               TRANSACTION_DATE,
               NVL(AMOUNT, '0') AMOUNT,
               NVL(TRAN_SEQNUM, '0') TRNSCTN_SEQ_NBR,
               --DECODE(CFA_SIGN, '-', 'OD', 'OC')CODE,
               --if tcodes are 2255,2896, 0594, 2895  then code as OC else OD
               DECODE(TCODE,'2255','OC','2896', 'OC','0594','OC','2895' ,'OC','2899' ,'OC', 'OD') CODE,
               --assigning code1 as SAM if bank account doesn't match from the serial file
               --assigning code1 as SNZ if its not a valid Cost center
               BUSINESS_RULES_PKG.GET_SNZ_SAM_CODE(COST_CENTER_CODE,BANK_ACCOUNT_NBR) CODE1,
               RETURN_REFEED_CODE(TCODE) TCODE,
               SOURCE_BANK_ACCOUNT
          FROM MISCTRAN
         WHERE SOURCE_BANK_ACCOUNT = IN_BANK_ACCOUNT_NBR
           AND LOAD_DATE = IN_DATE
           AND TCODE IS NOT NULL
         ORDER BY COST_CENTER_CODE;

    V_DIVISION              VARCHAR2(10);
    V_AREA                  VARCHAR2(10);
    V_DISTRICT              VARCHAR2(10);
    V_OUT_CLOB              CLOB;
    V_COUNT                 NUMBER := 0;
    OUT_TRAILER             CLOB;
    OUT_HEADER              CLOB;
    V_FLAG                  VARCHAR2(1) := 'Y';
BEGIN
    --Push the data into SMIS1.SRA12060(+1) file
    FOR rec IN refeed_cur LOOP--POS_REFEED_CUR
        --Body (REFEED details first and then POS details)
        --Header
        --writing the header for the first time per bank account
        --then the body for all the cost center under the same bank account number
        IF V_FLAG = 'Y' THEN
            GENERATE_HEADER(rec.SOURCE_BANK_ACCOUNT,OUT_HEADER);
            V_OUT_CLOB := V_OUT_CLOB || OUT_HEADER;

            IF V_OUT_CLOB <> EMPTY_CLOB() THEN
                UTL_FILE.PUT_LINE(IO_UAR_POSITION_OTPT_FL, V_OUT_CLOB, TRUE);
                V_OUT_CLOB := NULL;
            END IF;
            V_FLAG := 'N';
        END IF;
            V_COUNT := V_COUNT +1;
            ---getting DAD for the cost center
            BANKING_COMMON_TOOLS.GET_DAD_FOR_COST_CENTER(rec.COST_CENTER_CODE, V_DIVISION, V_AREA, V_DISTRICT);
            V_OUT_CLOB := V_OUT_CLOB ||
                              '1' ||                                                                   --SER-FLAG (1)
                              FORMAT_INPUT_FOR_FILE(' ', ' ', 17) ||                                   --FIELD-4 (17)
                              '0' ||                                                                   --STORE-NBR-PFX (1)
                              RPAD(rec.COST_CENTER_CODE, 16, ' ') ||                                   --STORE-NBR(4 + 12 spaces)
                              FORMAT_INPUT_FOR_FILE(rec.AMOUNT, '0', 12) ||                            --AMOUNT (12)
                              FORMAT_INPUT_FOR_FILE(TO_CHAR(rec.TRANSACTION_DATE,'YYMMDD'), '0', 6) || --TRAN-DATE YYMMDD (2 + 2 + 2)
                              RPAD(rec.TCODE, 4, ' ') ||                                               --TRAN-CODE (4)
                              FORMAT_INPUT_FOR_FILE(' ', ' ', 4) ||                                    --FILLER (4 spaces)
                              RPAD(NVL(V_DIVISION,' '), 17, ' ') ||                                    --DIVISION-NBR (2 + 15 spaces)
                              RPAD(NVL(V_AREA,' '), 17, ' ') ||                                        --AREA-NBR (2 + 15 spaces)
                              RPAD(NVL(V_DISTRICT,' '), 40, ' ') ||                                    --DISTRICT-NBR (2 + 38 spaces)
                              FORMAT_INPUT_FOR_FILE(' ', ' ', 40) ||                                   --FILLER (40 spaces)
                              --60 characters below
                              FORMAT_INPUT_FOR_FILE(rec.TRNSCTN_SEQ_NBR, '0', 9) ||                    --TRAN_SEQNUM (9)
                              FORMAT_INPUT_FOR_FILE(rec.CODE, ' ', 2) ||                               --CODE (2)
                              FORMAT_INPUT_FOR_FILE(' ', ' ', 21) ||                                   --FILLER (21 spaces)
                              FORMAT_INPUT_FOR_FILE(rec.CODE1, ' ', 3) ||                              --CODE1 (3)
                              FORMAT_INPUT_FOR_FILE(' ', ' ', 25) ||                                   --FILLER (25 spaces)
                              CHR(13);
            IF V_OUT_CLOB <> EMPTY_CLOB() THEN
                UTL_FILE.PUT_LINE(IO_UAR_POSITION_OTPT_FL, V_OUT_CLOB, TRUE);
                V_OUT_CLOB := NULL;
                OUT_HEADER := NULL;
            END IF;
    END LOOP;
    IF V_COUNT <> 0 THEN
        --Trailer
         --writing the trailer for the bank account when body part completes
        GENERATE_TRAILER('Y', NULL,OUT_TRAILER);
        V_OUT_CLOB := V_OUT_CLOB || OUT_TRAILER ;

        IF V_OUT_CLOB <> EMPTY_CLOB() THEN
            UTL_FILE.PUT_LINE(IO_UAR_POSITION_OTPT_FL, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
            OUT_TRAILER:= NULL;
        END IF;
    END IF;
END GENERATE_UAR_POS_REFEED_FILE;

PROCEDURE GNRT_UAR_POS_BNK_DPST_ACH_FILE(
/******************************************************************************
  This procedure will generate UAR POSITION FILE [SRA12060] file using SRA10520, SRA11063, SRA13514
  that needs to be ftp'd as part of SRA12000 process

  In this procedure, SUMMARY_EXTRCT_CNTRL_FL and ACH_DRFTS_EXTRCT_CNTRL_FL table will be used to pull
  the record depending on the bank account and the date that has been passed
  TCODE would be '0020' for those record we are pulling from SUMMARY_EXTRCT_CNTRL_FL table and '0055' for those
  being pulled from ACH_DRFTS_EXTRCT_CNTRL_FL

  We will generate header for the bank account that is being passed, then will generate body for all the
  cost centers that are associated with the same bank account number. When the body part is done, we will
  generate the trailer for the passed bank account number.

Created : 06/29/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          Comparing today's data with yesterday's data from same table
        : 01/29/2016 nxk927/dxv848 CCN Project....
          moved this code to generate refeed file in seperate procedure
          Removed the date condition as we no longer consider the day check
        : 08/10/2016 nxk927 CCN Project....
          passing the current date for summary table insteady of prev date
        : 08/23/2016 nxk927 CCN Project....
          using ACH_DRFTS_EXT_CTRL instead of ACH_DRFTS_EXTRCT_CNTRL_FL
          and considering only those with BANK_AUTO_RECON_IND as 'Y'
*******************************************************************************/
IN_BANK_ACCOUNT_NBR     IN     VARCHAR2,
IN_DATE                 IN     DATE,
IO_UAR_POSITION_OTPT_FL IN OUT UTL_FILE.FILE_TYPE)
IS
    CURSOR pos_cur IS
          SELECT *
            FROM (SELECT NVL(A.COST_CENTER_CODE, ' ') COST_CENTER_CODE,
                         A.TRANSACTION_DATE,
                         NVL(A.BANK_DEP_AMT, '0') BANK_DEP_AMT,
                         '0020' TCODE,
                         BANK_ACCOUNT_NBR
                    FROM SUMMARY_EXTRCT_CNTRL_FL A
                   WHERE A.BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
                     AND A.LOAD_DATE = IN_DATE
                   UNION
                  SELECT NVL(A.COST_CENTER_CODE, ' ') COST_CENTER_CODE,
                         A.TRANSACTION_DATE,
                         NVL(A.BANK_DEP_AMT, '0') BANK_DEP_AMT,
                         '0055' TCODE,
                         BANK_ACCOUNT_NBR
                    FROM ACH_DRFTS_EXT_CTRL A
                   WHERE A.BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
                     AND A.LOAD_DATE = IN_DATE
                     AND BANK_ACCOUNT_NBR IN (SELECT LPAD(REPLACE(BANK_ACCOUNT_NBR, '-',''),17,0)
                                                FROM BANK_ACCOUNT
                                               WHERE BANK_AUTO_RECON_IND = 'Y'))
           ORDER BY COST_CENTER_CODE;

	  V_DIVISION            VARCHAR2(10);
    V_AREA                VARCHAR2(10);
    V_DISTRICT            VARCHAR2(10);
    V_OUT_CLOB            CLOB;
    V_COUNT               NUMBER := 0;
    OUT_TRAILER           CLOB;
    OUT_HEADER            CLOB;
    V_FLAG                VARCHAR2(1) := 'Y';
BEGIN
    FOR rec IN pos_cur LOOP
        --Header
        --writing the header for the first time per bank account.
        --then the body for all the cost center under the same bank account number
        IF V_FLAG = 'Y' THEN
            GENERATE_HEADER(rec.BANK_ACCOUNT_NBR,OUT_HEADER);
            V_OUT_CLOB := V_OUT_CLOB || OUT_HEADER;

            IF V_OUT_CLOB <> EMPTY_CLOB() THEN
                UTL_FILE.PUT_LINE(IO_UAR_POSITION_OTPT_FL, V_OUT_CLOB, TRUE);
                V_OUT_CLOB := NULL;
                OUT_HEADER := NULL;
            END IF;
            V_FLAG := 'N';
        END IF;

        BANKING_COMMON_TOOLS.GET_DAD_FOR_COST_CENTER(rec.COST_CENTER_CODE, V_DIVISION, V_AREA, V_DISTRICT);
        V_COUNT := V_COUNT +1;
        V_OUT_CLOB := V_OUT_CLOB ||
                          '1' ||                                                                    --SER-FLAG (1)
                          FORMAT_INPUT_FOR_FILE(' ', ' ', 17) ||                                    --FIELD-4 (17)
                          '0' ||                                                                    --STORE-NBR-PFX (1)
                          RPAD(rec.COST_CENTER_CODE, 16, ' ') ||                                    --STORE-NBR(4 + 12 spaces)
                          FORMAT_INPUT_FOR_FILE(rec.BANK_DEP_AMT, '0', 12) ||                       --AMOUNT (12)
                          FORMAT_INPUT_FOR_FILE(TO_CHAR(rec.TRANSACTION_DATE,'YYMMDD'), '0', 6) ||  --TRAN-DATE YYMMDD (2 + 2 + 2)
                          RPAD(rec.TCODE, 4, ' ') ||                                                --TRAN-CODE (4)
                          FORMAT_INPUT_FOR_FILE(' ', ' ', 4) ||                                     --FILLER (4 spaces)
                          RPAD(NVL(V_DIVISION,' '), 17, ' ') ||                                     --DIVISION-NBR (2 + 15 spaces)
                          RPAD(NVL(V_AREA,' '), 17, ' ') ||                                         --AREA-NBR (2 + 15 spaces)
                          RPAD(NVL(V_DISTRICT,' '), 40, ' ') ||                                     --DISTRICT-NBR (2 + 38 spaces)
                          FORMAT_INPUT_FOR_FILE(' ', ' ', 100) ||                                   --FILLER (40 + 60 spaces)
                          CHR(13);
        IF V_OUT_CLOB <> EMPTY_CLOB() THEN
            UTL_FILE.PUT_LINE(IO_UAR_POSITION_OTPT_FL, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
        END IF;
    END LOOP;
    --Trailer
    --writing trailer for the bank account.
    IF V_COUNT <> 0 THEN
        GENERATE_TRAILER('Y', NULL,OUT_TRAILER);
        V_OUT_CLOB := V_OUT_CLOB || OUT_TRAILER;

        IF V_OUT_CLOB <> EMPTY_CLOB() THEN
            UTL_FILE.PUT_LINE(IO_UAR_POSITION_OTPT_FL, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
            OUT_TRAILER:= NULL;
        END IF;
    END IF;
END GNRT_UAR_POS_BNK_DPST_ACH_FILE;

PROCEDURE GENERATE_UAR_POS_FILE(
/******************************************************************************
  This procedure will generate UAR POSITION FILE [SRA12060] file using SRA10520, SRA11063, SRA13514
  that needs to be ftp'd as part of SRA12000 process

  This process will get all the bank account number from the
  JV_EXTRCT_CNTRL_FL and SUMMARY_EXTRCT_CNTRL_FL loaded today.
  This will be then passed back to GENERATE_UAR_POS_REFEED_FILE and GNRT_UAR_POS_BNK_DPST_ACH_FILE procedure
  that will write the POS_REFEED part and UAR_POS_BNK_DPST part from the respective table
  GENERATE_UAR_POS_REFEED_FILE will pull data from JV_EXTRCT_CNTRL_FL table while GNRT_UAR_POS_BNK_DPST_ACH_FILE
  will pull data from SUMMARY_EXTRCT_CNTRL_FL and ACH_DRFTS_EXTRCT_CNTRL_FL TABLE.

Created : 06/29/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          Comparing today's data with yesterday's data from same table
        : 01/29/2016 nxk927/dxv848 CCN Project....
          calling individual procedure to generate refeed and Summary pos file
        : 05/05/2015 nxk927 CCN Project....
          getting the bank accounts from previous day load for SUMMARY_EXTRCT_CNTRL_FL table
          also getting bank account number from ACH_DRFTS_EXTRCT_CNTRL_FL table
        : 08/10/2016 nxk927 CCN Project....
          passing the current date for summary table insteady of prev date
        : 08/23/2016 nxk927 CCN Project....
          passing the bank account number from the misctran table instead of JV table
          using ACH_DRFTS_EXT_CTRL instead of ACH_DRFTS_EXTRCT_CNTRL_FL
          and considering only those with BANK_AUTO_RECON_IND as 'Y'
        : 03/17/2017 nxk927 CCN Project....
          taking source bank account number for MISCTRAN
*******************************************************************************/
IN_DATE            IN         DATE)
IS
    CURSOR ach_cur IS
        SELECT DISTINCT SOURCE_BANK_ACCOUNT BANK_ACCOUNT_NBR
          FROM MISCTRAN
         WHERE LOAD_DATE = IN_DATE--TRUNC(SYSDATE)
         UNION
        SELECT DISTINCT BANK_ACCOUNT_NBR
          FROM ACH_DRFTS_EXT_CTRL--ACH_DRFTS_EXTRCT_CNTRL_FL
         WHERE LOAD_DATE = IN_DATE--TRUNC(SYSDATE)
           AND BANK_ACCOUNT_NBR IN (SELECT LPAD(REPLACE(BANK_ACCOUNT_NBR, '-',''),17,0)
                                      FROM BANK_ACCOUNT
                                     WHERE BANK_AUTO_RECON_IND = 'Y')
         UNION
        SELECT DISTINCT BANK_ACCOUNT_NBR
          FROM SUMMARY_EXTRCT_CNTRL_FL
         WHERE LOAD_DATE = IN_DATE;-- TRUNC(SYSDATE))

    PATH                  VARCHAR2(50) := 'BANKING_LOAD_FILES';
    UAR_POSITION_FL_NM    VARCHAR2(50) := 'SMIS1.SRA12060_' ||
                                         TO_CHAR(IN_DATE,'DDMONRRRR') || '_' ||
                                         TO_CHAR(SYSDATE,'HH24MISS');
    UAR_POSITION_OTPT_FL  UTL_FILE.FILE_TYPE;
BEGIN
    UAR_POSITION_OTPT_FL := UTL_FILE.FOPEN (PATH
                                           ,UAR_POSITION_FL_NM
                                           ,'W' --BINARY
                                           ,32767);
    --Push the data into SMIS1.SRA12060(+1) file
    FOR ach_rec IN ach_cur LOOP
        ---writing the UAR_POS_REFEED part first(Header, body ,trailer)
        GENERATE_UAR_POS_REFEED_FILE(ach_rec.BANK_ACCOUNT_NBR, IN_DATE, UAR_POSITION_OTPT_FL);
        ---writing the UAR_POS_BNK_DPST_ACH part  first(Header, body ,trailer)
        GNRT_UAR_POS_BNK_DPST_ACH_FILE(ach_rec.BANK_ACCOUNT_NBR, IN_DATE, UAR_POSITION_OTPT_FL);
    END LOOP;
    UTL_FILE.FCLOSE(UAR_POSITION_OTPT_FL);
END GENERATE_UAR_POS_FILE;

PROCEDURE LOAD_SUMMARY_EXTRCT_CNTRL_FL
/*****************************************************************************
	This procedure will load the data into SUMMARY_EXTRCT_CNTRL_FL_PREV from
  TEMP_SUMMARY_EXTRCT_CNTRL_FL [using SRA10510 file ] for next day's use

Created : 06/25/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          added column Load_date and combined MONTH, DAY AND YEAR to get date column 
        : 01/29/2016 nxk927/dxv848 CCN Project....
          changed the code to avoid dublicated while inserting
        : 04/19/2016 nxk927 CCN Project....
          Inserting the data as it is, in different table and inserting the data in
          SUMMARY_EXTRCT_CNTRL_FL with the bank account for the cost center as is in our database
        : 05/13/2016 nxk927 CCN Project....
          removed the substr(rec.COST_CENTER_CODE,3) as was used by mistake
*****************************************************************************/
IS
CURSOR SUM_CUR IS
   SELECT COST_CENTER_CODE,
          CENTURY,
          BANK_DEP_AMT,
          FILLER,
          BANK_ACCOUNT_NBR,
          TO_DATE(MONTH||'-'||DAY||'-'||YEAR, 'MM-DD-RRRR') TRANSACTION_DATE,
          TRUNC(SYSDATE) LOAD_DATE
     FROM TEMP_SUMMARY_EXTRCT_CNTRL_FL SM
     ---This is done to avoid loading duplicates. We don't want to insert same record again if they sent it next day.
     ---Usually they are sending the same data with the new data for a certain time
     ---this should not be sent
    WHERE NOT EXISTS (SELECT 1
                        FROM UAR_SUMMARY_EXTRCT_CNTRL_FL
                       WHERE COST_CENTER_CODE = SM.COST_CENTER_CODE
                         AND CENTURY          = SM.CENTURY
                         AND BANK_DEP_AMT     = SM.BANK_DEP_AMT
                         AND BANK_ACCOUNT_NBR = SM.BANK_ACCOUNT_NBR
                         AND TRANSACTION_DATE = TO_DATE(MONTH||'-'||DAY||'-'||YEAR, 'MM-DD-RRRR'));
    V_COUNT NUMBER := 0;
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
BEGIN
    FOR REC IN SUM_CUR LOOP
        INSERT INTO UAR_SUMMARY_EXTRCT_CNTRL_FL VALUES REC;
        GET_LEAD_BANK_RECORD(rec.COST_CENTER_CODE,
                             V_LEAD_BANK_CC_REC);
        REC.BANK_ACCOUNT_NBR := FORMAT_INPUT_FOR_FILE(REPLACE(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,'-'), '0', 17);
        INSERT INTO SUMMARY_EXTRCT_CNTRL_FL VALUES REC;
        V_COUNT := V_COUNT +1;
        IF V_COUNT = 1000 then
            COMMIT;
            V_COUNT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END LOAD_SUMMARY_EXTRCT_CNTRL_FL;

PROCEDURE LOAD_ACH_DRFTS_EXTRCT_CNTRL_FL
/*****************************************************************************
  This procedure will load the data into ACH_DRFTS_EXTRCT_CNTRL_FL_PREV from
  TEMP_ACH_DRFTS_EXTRCT_CNTRL_FL [using SRA11060 file] for next day's use

Created : 06/26/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          added column Load_date and combined MONTH, DAY AND YEAR to get date column
        : 01/29/2016 nxk927/dxv848 CCN Project....
          changed the code to avoid dublicated while inserting
        : 04/19/2016 nxk927 CCN Project....
          Inserting the data as it is, in different table and inserting the data in
          ACH_DRFTS_EXTRCT_CNTRL_FL with the bank account for the cost center as is in our database
*****************************************************************************/
IS
    CURSOR ACH_INS_CUR IS
        SELECT TACH.COST_CENTER_CODE,
               TACH.CENTURY,
               TACH.BANK_DEP_AMT,
               TACH.BANK_ACCOUNT_NBR,
               TACH.BANK_AUTO_REC_IND,
               TO_DATE(MONTH||'-'||DAY||'-'||YEAR, 'MM-DD-RRRR') TRANSACTION_DATE,
               TRUNC(SYSDATE) LOAD_DATE
          FROM TEMP_ACH_DRFTS_EXTRCT_CNTRL_FL TACH
          ---This is done to avoid loading duplicates. We don't want to insert same record again if they sent it next day.
          ---Usually they are sending the same data with the new data for a certain time
          ---this should not be sent
         WHERE NOT EXISTS  (SELECT 1
                             FROM UAR_ACH_DRFTS_EXTRCT_CNTRL_FL ACH
                            WHERE ACH.COST_CENTER_CODE          = TACH.COST_CENTER_CODE
                              AND ACH.CENTURY                   = TACH.CENTURY
                              AND ACH.TRANSACTION_DATE          = TO_DATE(MONTH||'-'||DAY||'-'||YEAR, 'MM-DD-RRRR')
                              AND ACH.BANK_DEP_AMT              = TACH.BANK_DEP_AMT
                              AND ACH.BANK_ACCOUNT_NBR          = TACH.BANK_ACCOUNT_NBR
                              AND NVL(ACH.BANK_AUTO_REC_IND,'X')= NVL(TACH.BANK_AUTO_REC_IND,'X'));
    V_COUNT NUMBER := 0;
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
BEGIN
    FOR REC IN ACH_INS_CUR LOOP
        INSERT INTO UAR_ACH_DRFTS_EXTRCT_CNTRL_FL VALUES REC;
        GET_LEAD_BANK_RECORD(rec.COST_CENTER_CODE,
                             V_LEAD_BANK_CC_REC);
        REC.BANK_ACCOUNT_NBR := FORMAT_INPUT_FOR_FILE(REPLACE(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,'-'), '0', 17);
        INSERT INTO ACH_DRFTS_EXTRCT_CNTRL_FL VALUES REC;
        V_COUNT := V_COUNT +1;
        IF V_COUNT = 1000 then
            COMMIT;
            V_COUNT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END LOAD_ACH_DRFTS_EXTRCT_CNTRL_FL;

PROCEDURE LOAD_ACH_DRFTS_EXTRCT
/*****************************************************************************
  This procedure will load the data into ACH_DRFTS_EXTRCT table from
  TEMP_LOAD_ACH_DRFTS_EXTRCT [using SRA10910 file]

Created : 08/23/2016 nxk927 CCN Project....
Changed : 
*****************************************************************************/
IS
    CURSOR ACH_INS_CUR IS
        SELECT TACH.COST_CENTER_CODE,
               TACH.CENTURY,
               TO_DATE(TACH.TRANSACTION_DATE, 'YYMMDD') TRANSACTION_DATE,
               TACH.BANK_DEP_AMT,
               TACH.BANK_ACCOUNT_NBR,
               TRUNC(SYSDATE) LOAD_DATE
          FROM TEMP_ACH_DRFTS_EXT_CTRL TACH
          ---This is done to avoid loading duplicates. We don't want to insert same record again if they sent it next day.
          ---Usually they are sending the same data with the new data for a certain time
          ---this should not be sent
         WHERE NOT EXISTS  (SELECT 1
                             FROM UAR_ACH_DRFTS_EXT_CTRL ACH
                            WHERE ACH.COST_CENTER_CODE          = TACH.COST_CENTER_CODE
                              AND ACH.CENTURY                   = TACH.CENTURY
                              AND ACH.TRANSACTION_DATE          = TO_DATE(TACH.TRANSACTION_DATE, 'YYMMDD')
                              AND ACH.BANK_DEP_AMT              = TACH.BANK_DEP_AMT
                              AND ACH.BANK_ACCOUNT_NBR          = TACH.BANK_ACCOUNT_NBR);
    V_COUNT NUMBER := 0;
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
BEGIN
    FOR REC IN ACH_INS_CUR LOOP
        INSERT INTO UAR_ACH_DRFTS_EXT_CTRL VALUES REC;
        GET_LEAD_BANK_RECORD(rec.COST_CENTER_CODE,
                             V_LEAD_BANK_CC_REC);
        REC.BANK_ACCOUNT_NBR := FORMAT_INPUT_FOR_FILE(REPLACE(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,'-'), '0', 17);
        INSERT INTO ACH_DRFTS_EXT_CTRL VALUES REC;
        V_COUNT := V_COUNT +1;
        IF V_COUNT = 1000 then
            COMMIT;
            V_COUNT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END LOAD_ACH_DRFTS_EXTRCT;

PROCEDURE LOAD_JV_EXTRCT_CNTRL_FL
/*****************************************************************************
	This procedure will load the data into JV_EXTRCT_CNTRL_FL_PREV from
  TEMP_JV_EXTRCT_CNTRL_FL [using SRA13510 file] for next day's use

Created : 06/30/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          added column Load_date and combined MONTH, DAY AND YEAR to get date column
        : 01/29/2016 nxk927/dxv848 CCN Project....
          changed the code to avoid dublicated while inserting
        : 04/19/2016 nxk927 CCN Project....
          Inserting the data as it is, in different table and inserting the data in
          JV_EXTRCT_CNTRL_FL with the bank account for the cost center as is in our database
*****************************************************************************/
IS
    CURSOR JV_CUR IS
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               CENTURY,
               TRAN_SEQNUM,
               TCODE,
               AMOUNT,
               JV_TYPE,
               CFA_SIGN,
               REFEED_TCODE,
               DR_DIV,
               DR_PRIME,
               DR_SUB,
               DR_CC,
               DR_PROJ,
               DR_OFFSET_CDE,
               CR_DIV,
               CR_PRIME,
               CR_SUB,
               CR_CC,
               CR_PROJ,
               CR_OFFSET_CDE,
               FILLER,
               TO_DATE(MONTH||'-'||DAY||'-'||YEAR, 'MM-DD-RRRR') TRANSACTION_DATE,
               TRUNC(SYSDATE) LOAD_DATE  
          FROM TEMP_JV_EXTRCT_CNTRL_FL JV
          ---This is done to avoid loading duplicates. We don't want to insert same record again if they sent it next day.
          ---Usually they are sending the same data with the new data for a certain time
          ---this should not be sent
         WHERE NOT EXISTS (SELECT 1
                             FROM UAR_JV_EXTRCT_CNTRL_FL
                            WHERE BANK_ACCOUNT_NBR     = JV.BANK_ACCOUNT_NBR
                              AND COST_CENTER_CODE     = JV.COST_CENTER_CODE
                              AND TRAN_SEQNUM          = JV.TRAN_SEQNUM
                              AND NVL(TCODE, 'XXX')    = NVL(JV.TCODE,'XXX')
                              AND AMOUNT               = JV.AMOUNT
                              AND TRANSACTION_DATE     = TO_DATE(MONTH||'-'||DAY||'-'||YEAR, 'MM-DD-RRRR')
                              AND NVL(REFEED_TCODE,'X')= NVL(JV.REFEED_TCODE,'X'));
    V_COUNT NUMBER := 0;
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
BEGIN
    FOR REC IN JV_CUR LOOP
        INSERT INTO UAR_JV_EXTRCT_CNTRL_FL VALUES REC;
        GET_LEAD_BANK_RECORD(rec.COST_CENTER_CODE,
                             V_LEAD_BANK_CC_REC);
        REC.BANK_ACCOUNT_NBR := FORMAT_INPUT_FOR_FILE(REPLACE(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,'-'), '0', 17);
        INSERT INTO JV_EXTRCT_CNTRL_FL VALUES REC;
        V_COUNT := V_COUNT +1;
        IF V_COUNT = 1000 THEN
            COMMIT;
            V_COUNT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
   WHEN OTHERS THEN
       RAISE;
END LOAD_JV_EXTRCT_CNTRL_FL;

PROCEDURE LOAD_MISCTRAN
/*****************************************************************************
	This procedure will load the data into UAR_MISCTRAN, MISCTRAN table from
  TEMP_UAR_MISCTRAN [using UAR.MISCTRAN file]

Created : 08/23/2016 nxk927 CCN Project....
Changed : 11/07/2016 jxc517 CCN Project....
          adding source bank account number from header details
          we get the max(line number) from header table prior to the line number in detail table
*****************************************************************************/
IS
    CURSOR JV_MISCTRAN IS
        SELECT COST_CENTER_CODE,
               AMOUNT,
               TO_DATE(TRANSACTION_DATE,'YYMMDD') TRANSACTION_DATE,
               TCODE,
               DISTRICT,
               AREA,
               DIVISION,
               TRAN_SEQNUM,
               DB_CR_CODE,    
               SNZ_SAM_CODE,
               TRUNC(SYSDATE) LOAD_DATE,
               TO_NUMBER(LINE_NUMBER) LINE_NUMBER
          FROM TEMP_UAR_MISCTRAN MT
          ---This is done to avoid loading duplicates. We don't want to insert same record again if they sent it next day.
          ---Usually they are sending the same data with the new data for a certain time
          ---this should not be sent
         WHERE NOT EXISTS (SELECT 1
                             FROM UAR_MISCTRAN
                            WHERE COST_CENTER_CODE     = MT.COST_CENTER_CODE
                              AND TRAN_SEQNUM          = MT.TRAN_SEQNUM
                              AND NVL(TCODE, 'AAA')    = NVL(MT.TCODE,'AAA')
                              AND AMOUNT               = MT.AMOUNT
                              AND TRANSACTION_DATE     = TO_DATE(MT.TRANSACTION_DATE,'YYMMDD')
                              AND NVL(DB_CR_CODE,'X')  = NVL(MT.DB_CR_CODE,'X')
                              AND NVL(SNZ_SAM_CODE,'A')= NVL(MT.SNZ_SAM_CODE,'A'));
    V_COUNT NUMBER := 0;
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
    V_BANK_ACCOUNT_NBR LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_SRC_BANK_ACCOUNT_NBR VARCHAR2(17);
    
    FUNCTION GET_SRC_ACCNT_NBR(IN_LINE_NUMBER     IN      NUMBER)
    RETURN VARCHAR2
    IS
        V_RET_VAL          VARCHAR2(17);
    BEGIN
        SELECT BANK_ACCOUNT_NBR_FILE
          INTO V_RET_VAL
          FROM TEMP_UAR_MISCTRAN_HDR B
         WHERE TO_NUMBER(B.LINE_NUMBER) = (SELECT MAX(TO_NUMBER(C.LINE_NUMBER))
                                             FROM TEMP_UAR_MISCTRAN_HDR C
                                            WHERE TO_NUMBER(C.LINE_NUMBER) < IN_LINE_NUMBER);
         RETURN V_RET_VAL;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN V_RET_VAL;
    END GET_SRC_ACCNT_NBR;
BEGIN
    FOR REC IN JV_MISCTRAN LOOP
        V_SRC_BANK_ACCOUNT_NBR := GET_SRC_ACCNT_NBR(REC.LINE_NUMBER);
        INSERT INTO UAR_MISCTRAN VALUES (REC.COST_CENTER_CODE,
                                         REC.AMOUNT,
                                         REC.TRANSACTION_DATE,
                                         REC.TCODE,
                                         REC.DISTRICT,
                                         REC.AREA,
                                         REC.DIVISION,
                                         REC.TRAN_SEQNUM,
                                         REC.DB_CR_CODE,    
                                         REC.SNZ_SAM_CODE,
                                         REC.LOAD_DATE,
                                         V_SRC_BANK_ACCOUNT_NBR);
        GET_LEAD_BANK_RECORD(rec.COST_CENTER_CODE,
                             V_LEAD_BANK_CC_REC);
        V_BANK_ACCOUNT_NBR := FORMAT_INPUT_FOR_FILE(REPLACE(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,'-'), '0', 17);
        INSERT INTO MISCTRAN VALUES (V_BANK_ACCOUNT_NBR,
                                     REC.COST_CENTER_CODE,
                                     REC.AMOUNT,
                                     REC.TRANSACTION_DATE,
                                     REC.TCODE,
                                     REC.TRAN_SEQNUM,
                                     REC.DB_CR_CODE,
                                     REC.SNZ_SAM_CODE,
                                     REC.LOAD_DATE,
                                     V_SRC_BANK_ACCOUNT_NBR);
        V_COUNT := V_COUNT +1;
        IF V_COUNT = 1000 THEN
            COMMIT;
            V_COUNT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
   WHEN OTHERS THEN
       RAISE;
END LOAD_MISCTRAN;

PROCEDURE EXECUTE_PROCESS(
/******************************************************************************
  This procedure is the core procedure for performing the "Store Bank
  Deposit Daily Reconciliation" process for the date passed in

Created : 06/19/2015 jxc517 CCN Project....
Changed : 10/07/2015 nxk927 CCN Project....
          changed the order to load first and run the rest of the process.
        : 04/19/2016 nxk927 CCN Project....
          removed the commented calls as we don't need them
        : 08/23/2016 nxk927 CCN Project....
          replaced old process with LOAD_ACH_DRFTS_EXTRCT and LOAD_MISCTRAN
*******************************************************************************/
IN_DATE            IN         DATE)
IS
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
    V_REF_CUR           REF_CURSOR;
    V_START_TIME        NUMBER;
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('BDP_DLY_RCNCL_PRCSS', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP();
    BEGIN
        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --load the current SUMMARY CONTROL SRA10510 file for use in next run
        LOAD_SUMMARY_EXTRCT_CNTRL_FL();
        DBMS_OUTPUT.PUT_LINE('LOAD_SUMMARY_EXTRCT_CNTRL_FL : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --load the current ACH DRAFTS SRA11060 file for use in next run
        LOAD_ACH_DRFTS_EXTRCT();
        DBMS_OUTPUT.PUT_LINE('LOAD_ACH_DRFTS_EXTRCT_CNTRL_FL : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --load the current MISCTRAN file for use in next run
        LOAD_MISCTRAN();
        DBMS_OUTPUT.PUT_LINE('LOAD_MISCTRAN : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
        
        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --Load STR_BNK_DPST_DLY_RCNCL_TBL [Mark IV SRA10001 table]
        LOAD_STR_BNK_DPST_DLY_RCNCL_TB(IN_DATE);
        DBMS_OUTPUT.PUT_LINE('LOAD_STR_BNK_DPST_DLY_RCNCL_TB : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --Generate UAR SERIAL FILE [SMIS1.SRA10060(+1) -> SMIS.SERIAL.DAT] for FTP
        GENERATE_UAR_SERIAL_FILE(IN_DATE);
        DBMS_OUTPUT.PUT_LINE('GENERATE_UAR_SERIAL_FILE : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --Generate UAR POSITION FILE [SRA12060] file using SRA10520, SRA11063, SRA13514
        GENERATE_UAR_POS_FILE(IN_DATE);
        DBMS_OUTPUT.PUT_LINE('GENERATE_UAR_POS_FILE : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('BDP_DLY_RCNCL_PRCSS', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                   'STR_BNK_DPST_DLY_RCNCL_PROCESS.EXECUTE_PROCESS',
                                   SQLERRM,
                                   '2222222222',
                                   '222222',
                                   'OTHER');
END EXECUTE_PROCESS;

PROCEDURE LOAD_OVERSHRT
/*****************************************************************************
	This procedure will load the data into UAR_OVERSHRT, OVERSHRT table from
  TEMP_UAR_OVERSHRT [using UAR.OVERSHRT file]

Created : 10/27/2016 jxc517 CCN Project....
Changed : 11/07/2016 jxc517 CCN Project....
          adding source bank account number from header details
          we get the max(line number) from header table prior to the line number in detail table
*****************************************************************************/
IS
    CURSOR CFA_OVERSHRT IS
        SELECT COST_CENTER_CODE,
               AMOUNT,
               TO_DATE(TRANSACTION_DATE,'YYMMDD') TRANSACTION_DATE,
               TCODE,
               DISTRICT,
               AREA,
               DIVISION,
               TRAN_SEQNUM,
               TRAN_CODE,    
               TO_DATE(TRAN_DATE1,'YYMMDD') TRAN_DATE1,
               UNKNOWN_FIELD,
               CODE1,
               TRUNC(SYSDATE) LOAD_DATE,
               TO_NUMBER(LINE_NUMBER) LINE_NUMBER
          FROM TEMP_UAR_OVERSHRT MT
          ---This is done to avoid loading duplicates. We don't want to insert same record again if they sent it next day.
          ---Usually they are sending the same data with the new data for a certain time
          ---this should not be sent
         WHERE NOT EXISTS (SELECT 1
                             FROM UAR_OVERSHRT
                            WHERE COST_CENTER_CODE        = MT.COST_CENTER_CODE
                              AND TRAN_SEQNUM             = MT.TRAN_SEQNUM
                              AND NVL(TCODE, 'AAA')       = NVL(MT.TCODE,'AAA')
                              AND AMOUNT                  = MT.AMOUNT
                              AND TRANSACTION_DATE        = TO_DATE(MT.TRANSACTION_DATE,'YYMMDD')
                              AND NVL(TRAN_CODE,'X')      = NVL(MT.TRAN_CODE,'X')
                              AND NVL(UNKNOWN_FIELD,'X')  = NVL(MT.UNKNOWN_FIELD,'X')
                              AND NVL(CODE1,'A')          = NVL(MT.CODE1,'A'));
    V_COUNT NUMBER := 0;
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
    V_BANK_ACCOUNT_NBR LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_SRC_BANK_ACCOUNT_NBR VARCHAR2(17);

    FUNCTION GET_SRC_ACCNT_NBR(IN_LINE_NUMBER     IN      NUMBER)
    RETURN VARCHAR2
    IS
        V_RET_VAL          VARCHAR2(17);
    BEGIN
        SELECT BANK_ACCOUNT_NBR_FILE
          INTO V_RET_VAL
          FROM TEMP_UAR_OVERSHRT_HDR B
         WHERE TO_NUMBER(B.LINE_NUMBER) = (SELECT MAX(TO_NUMBER(C.LINE_NUMBER))
                                             FROM TEMP_UAR_OVERSHRT_HDR C
                                            WHERE TO_NUMBER(C.LINE_NUMBER) < IN_LINE_NUMBER);
         RETURN V_RET_VAL;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN V_RET_VAL;
    END GET_SRC_ACCNT_NBR;

BEGIN
    FOR rec IN CFA_OVERSHRT LOOP
        V_SRC_BANK_ACCOUNT_NBR := GET_SRC_ACCNT_NBR(rec.LINE_NUMBER);
        INSERT INTO UAR_OVERSHRT VALUES (rec.COST_CENTER_CODE,
                                         rec.AMOUNT,
                                         rec.TRANSACTION_DATE,
                                         rec.TCODE,
                                         rec.DISTRICT,
                                         rec.AREA,
                                         rec.DIVISION,
                                         rec.TRAN_SEQNUM,
                                         rec.TRAN_CODE,
                                         rec.TRAN_DATE1,
                                         rec.UNKNOWN_FIELD,
                                         rec.CODE1,
                                         rec.LOAD_DATE,
                                         V_SRC_BANK_ACCOUNT_NBR);
        GET_LEAD_BANK_RECORD(rec.COST_CENTER_CODE,
                             V_LEAD_BANK_CC_REC);
        V_BANK_ACCOUNT_NBR := FORMAT_INPUT_FOR_FILE(REPLACE(V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,'-'), '0', 17);
        INSERT INTO OVERSHRT VALUES (V_BANK_ACCOUNT_NBR,
                                     rec.COST_CENTER_CODE,
                                     rec.AMOUNT,
                                     rec.TRANSACTION_DATE,
                                     rec.TCODE,
                                     rec.TRAN_SEQNUM,
                                     rec.TRAN_CODE,
                                     rec.TRAN_DATE1,
                                     rec.UNKNOWN_FIELD,
                                     rec.CODE1,
                                     rec.LOAD_DATE,
                                     V_SRC_BANK_ACCOUNT_NBR);
        V_COUNT := V_COUNT +1;
        IF V_COUNT = 1000 THEN
            COMMIT;
            V_COUNT := 0;
        END IF;
    END LOOP;
    COMMIT;
EXCEPTION
   WHEN OTHERS THEN
       RAISE;
END LOAD_OVERSHRT;

PROCEDURE GENERATE_BNK_DRFT_CRRCTN_FILE(
/******************************************************************************
  This procedure will generate UAR BANK DRAFT CORRECTION FILE [SRA12060] file using
  MISCTRAN and OVERSHRT files we receive from Corporate Treasurers Department

as per requirements document:
SRA13513 [CFA TRANS] --> SRA15010 [CFA TRANS] --> SWSD.BANK.DRAFT.CORRECTS
CFA => Cash Flow Adjustments

Created : 10/27/2016 jxc517 CCN Project....
Changed : 11/09/2016 jxc517 CCN Project....
          modified the file name from TXT to txt
Changed : 03/17/2017 nxk927 CCN Project....
          OC/RC should be '-' and OD/RD should be '+'
          combining multiple transactions into one
*******************************************************************************/
IN_DATE            IN         DATE)
IS
    CURSOR main_cur IS
        SELECT COST_CENTER_CODE,
               (CASE
                   WHEN SUM(AMOUNT) < 0 THEN
                      '-'
                   ELSE
                      '+'
               END) AMOUNT_SIGN ,
               LPAD(ABS(SUM(AMOUNT)),9,0)  AMOUNT
          FROM (SELECT COST_CENTER_CODE,
                       SUBSTR(AMOUNT, 4) * DECODE(DB_CR_CODE, 'OC', -1, 1) AS AMOUNT
                  FROM MISCTRAN
                 WHERE LOAD_DATE = IN_DATE
                 UNION
                SELECT COST_CENTER_CODE,
                       SUBSTR(AMOUNT, 4) * DECODE(SUBSTR(TRAN_CODE, 1, 2), 'RC', -1, 1) AS AMOUNT
                  FROM OVERSHRT
                 WHERE LOAD_DATE = IN_DATE)
         GROUP BY COST_CENTER_CODE
         ORDER BY COST_CENTER_CODE;

    PATH                         VARCHAR2(50) := 'BANKING_LOAD_FILES';
    UAR_BNK_DRFT_CRRCTN_FL_NM    VARCHAR2(50) := 'stores_cashflowadj_' ||
                                                 --'SWSD.BANK.DRAFT.CORRECTS_' ||
                                         TO_CHAR(IN_DATE,'RRRRMMDD') ||
                                         TO_CHAR(SYSDATE,'HH24MISS') || '.txt';
    UAR_BNK_DRFT_CRRCTN_FL       UTL_FILE.FILE_TYPE;
    V_OUT_CLOB                   CLOB;
BEGIN
    UAR_BNK_DRFT_CRRCTN_FL := UTL_FILE.FOPEN (PATH
                                           ,UAR_BNK_DRFT_CRRCTN_FL_NM
                                           ,'W' --BINARY
                                           ,32767);
    FOR rec IN main_cur LOOP
        V_OUT_CLOB := V_OUT_CLOB ||
                          rec.COST_CENTER_CODE ||                   --STORE-NO (4)
                          'C' ||                                    --ACTN-CD (1)
                          FORMAT_INPUT_FOR_FILE(' ', ' ', 18) ||    --FILLER (18 spaces)
                          rec.AMOUNT_SIGN ||                        --AMT-SIGN (1)
                          rec.AMOUNT ||                             --AMT (7 + 2 decimals = 9)
                          FORMAT_INPUT_FOR_FILE(' ', ' ', 38) ||    --FILLER (38 spaces)
                          'YGC000001' ||                            --PGM-ID (9)
                          CHR(13);
        IF V_OUT_CLOB <> EMPTY_CLOB() THEN
            UTL_FILE.PUT_LINE(UAR_BNK_DRFT_CRRCTN_FL, V_OUT_CLOB, TRUE);
            V_OUT_CLOB := NULL;
        END IF;
    END LOOP;

    UTL_FILE.FCLOSE(UAR_BNK_DRFT_CRRCTN_FL);
END GENERATE_BNK_DRFT_CRRCTN_FILE;

PROCEDURE EXECUTE_CORRECTS_PROCESS(
/******************************************************************************
  This procedure is the core procedure for performing the "Store Bank
  Deposit Daily Reconciliation" process for the date passed in

Created : 11/07/2016 jxc517 CCN Project....
Changed :
*******************************************************************************/
IN_DATE            IN         DATE)
IS
    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
    V_REF_CUR           REF_CURSOR;
    V_START_TIME        NUMBER;
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('BDP_DLY_RCNCL_PRCSS1', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP();
    BEGIN
        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --load the current OVERSHRT file for use in next run
        LOAD_OVERSHRT();
        DBMS_OUTPUT.PUT_LINE('LOAD_OVERSHRT : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

        V_START_TIME := DBMS_UTILITY.GET_TIME;
        --Generate UAR POSITION FILE [SRA12060] file using SRA10520, SRA11063, SRA13514
        GENERATE_BNK_DRFT_CRRCTN_FILE(IN_DATE);
        DBMS_OUTPUT.PUT_LINE('GENERATE_BNK_DRFT_CRRCTN_FILE : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
    END;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('BDP_DLY_RCNCL_PRCSS1', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP();
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                   'STR_BNK_DPST_DLY_RCNCL_PROCESS.EXECUTE_CORRECTS_PROCESS',
                                   SQLERRM,
                                   '2222222222',
                                   '222222',
                                   'OTHER');
END EXECUTE_CORRECTS_PROCESS;

PROCEDURE PRIME_SUB_LOAD_PROCESS
/******************************************************************************
  This procedure will load the intermediate table 
  from MISCTRAN with prime sub and banking JV/IDI details

Created : 10/10/2016 jxc517 CCN Project Team....
Changed : 11/07/2016 jxc517 CCN Project Team....
          Added code to get the Book Keeper details from source bank account number
          instead of actual account number associated with the store
        : 01/13/2017 gxg192 CCN Project Team....
          Changes to Raise the exception so that the process which is calling this procedure
          can take necessary action.
        : 01/23/2017 vxv336
          Added BOOKING_COST_CENTER and modified PRIME_SUB
        : 01/26/2017 vxv336
          Modified AMOUNT field to NUMBER with 2 decimals
*******************************************************************************/
IS
    CURSOR main_cursor IS
        SELECT MT.BANK_ACCOUNT_NBR,
               (SELECT COST_CENTER_CODE
                  FROM COST_CENTER
                 WHERE SUBSTR(UPPER(COST_CENTER_CODE), 3) = UPPER(MT.COST_CENTER_CODE)
                   AND ROWNUM < 2) AS COST_CENTER_CODE,
               MT.AMOUNT/100,
               MT.TRANSACTION_DATE,
               MT.TCODE,
               (SELECT NAME
                  FROM PRIME_SUB_HEADER
                 WHERE TCODE = MT.TCODE) TCODE_DESCRIPTION,
               MT.TRAN_SEQNUM,
               PSD.DB_CR_CODE AS DB_CR_CODE, --MT.DB_CR_CODE,
               MT.SNZ_SAM_CODE,
               MT.LOAD_DATE,
               --prime sub will be different for OC/OD
               PSD.PRIME_SUB AS PRIME_SUB, 
               BA.JV_BOOK_KEEPER_REF,
               BA.JV_BANK_SHORT_NAME,
               BA.IDI_BOOKKEEPER_REF,
               BA.IDI_BANK_SHORT_NAME,
               (SELECT CC.COST_CENTER_CODE 
                  FROM COSTCNTR.COST_CENTER CC 
                 WHERE SUBSTR(CC.COST_CENTER_CODE,-4) = NVL(PSD.PRIME_SUB_COST_CENTER, MT.COST_CENTER_CODE)) AS BOOKING_COST_CENTER
          FROM MISCTRAN MT,
               PRIME_SUB_DETAIL PSD,
               BANK_ACCOUNT BA
         WHERE MT.TCODE               = PSD.TCODE(+)
           AND MT.SOURCE_BANK_ACCOUNT = LPAD(REPLACE(BA.BANK_ACCOUNT_NBR(+),'-'), 17, 0)
           AND MT.LOAD_DATE           = TRUNC(SYSDATE)
         UNION
        SELECT OS.BANK_ACCOUNT_NBR,
               (SELECT COST_CENTER_CODE
                  FROM COST_CENTER
                 WHERE SUBSTR(UPPER(COST_CENTER_CODE), 3) = UPPER(OS.COST_CENTER_CODE)
                   AND ROWNUM < 2) AS COST_CENTER_CODE,
               OS.AMOUNT/100,
               OS.TRANSACTION_DATE,
               OS.TCODE,
               (SELECT NAME
                  FROM PRIME_SUB_HEADER
                 WHERE TCODE = OS.TCODE) TCODE_DESCRIPTION,
               OS.TRAN_SEQNUM,
               PSD.DB_CR_CODE AS DB_CR_CODE, --MT.DB_CR_CODE,
               OS.TRAN_CODE,
               OS.LOAD_DATE,
               --prime sub will be different for OC/OD
               PSD.PRIME_SUB AS PRIME_SUB, 
               BA.JV_BOOK_KEEPER_REF,
               BA.JV_BANK_SHORT_NAME,
               BA.IDI_BOOKKEEPER_REF,
               BA.IDI_BANK_SHORT_NAME,
               (SELECT CC.COST_CENTER_CODE 
                  FROM COSTCNTR.COST_CENTER CC 
                 WHERE SUBSTR(CC.COST_CENTER_CODE,-4) = NVL(PSD.PRIME_SUB_COST_CENTER, OS.COST_CENTER_CODE)) AS BOOKING_COST_CENTER
          FROM OVERSHRT OS,
               PRIME_SUB_DETAIL PSD,
               BANK_ACCOUNT BA
         WHERE OS.TCODE               = PSD.TCODE(+)
           AND OS.SOURCE_BANK_ACCOUNT = LPAD(REPLACE(BA.BANK_ACCOUNT_NBR(+),'-'), 17, 0)
           AND OS.LOAD_DATE           = TRUNC(SYSDATE);

    V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('PRIME_SUB_LOAD_PRCS', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP();
    DELETE FROM MISCTRAN_DETAILS WHERE LOAD_DATE = TRUNC(SYSDATE);
    FOR rec IN main_cursor LOOP
        INSERT INTO MISCTRAN_DETAILS VALUES rec;
    END LOOP;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('PRIME_SUB_LOAD_PRCS', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP();
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                   'STR_BNK_DPST_DLY_RCNCL_PROCESS.PRIME_SUB_LOAD_PROCESS',
                                   SQLERRM,
                                   '2222222222',
                                   '222222',
                                   'OTHER');
        RAISE;
END PRIME_SUB_LOAD_PROCESS;

END STR_BNK_DPST_DLY_RCNCL_PROCESS;