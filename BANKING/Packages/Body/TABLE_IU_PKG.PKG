create or replace PACKAGE BODY         TABLE_IU_PKG
AS
/**********************************************************
    This Package is intended to process the DMLs and DDLs on all the
  tables related to BANKING

Created : 03/13/2015 nxk927 CCN BANKING PROJECT
Changed : 01/25/2019 pxa852 CCN Project Team...
          Modified code to remove BNK_DEP_BAG_TCK_FTR_ROWTYPE_SP, BANK_DEP_BAG_TICKORD_FTR_D_SP,
          BANK_DEP_BAG_TICK_FUTURE_D_SP, BANK_DEP_BAG_TICK_FUTURE_I_SP, BANK_DEP_BAG_TICKORD_FTR_I_SP,
          BANK_DEP_BAG_TICK_FUTURE_U_SP, BANK_DEP_BAG_TICKORD_FTR_U_SP
**********************************************************/
---------------------------CURRENT ROWTYPE PROCEDURES---------------------------
PROCEDURE BANK_ACCOUNT_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_ACCOUNT record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
Changed : 12/02/2015 dxv848 CCN Project...
          Added code for Recon_bank_account_nbr which must be padded with zeros with bank_account_nbr
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_ACCOUNT%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_ACCOUNT%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'BANK_NAME' THEN
                    V_TEMP_ROW.BANK_NAME                             :=  V_ROW_VALUE;
                WHEN 'BOOK_KEEPER_NBR' THEN
                    V_TEMP_ROW.BOOK_KEEPER_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_AUTO_RECON_IND' THEN
                    V_TEMP_ROW.BANK_AUTO_RECON_IND                   :=  V_ROW_VALUE;
                WHEN 'RECON_START_DATE' THEN
                    V_TEMP_ROW.RECON_START_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'RECON_BANK_ACCOUNT_NBR' THEN
                    -- Below REGEXP_REPLACE will eliminate all characters other than digits(0-9)
                    V_TEMP_ROW.RECON_BANK_ACCOUNT_NBR                :=  LPAD(REGEXP_REPLACE(V_TEMP_ROW.BANK_ACCOUNT_NBR,'[^[:digit:]]'),16,0); 
                WHEN 'JV_BOOK_KEEPER_REF' THEN
                    V_TEMP_ROW.JV_BOOK_KEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'JV_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.JV_BANK_SHORT_NAME                    :=  V_ROW_VALUE;
                WHEN 'IDI_BOOKKEEPER_REF' THEN
                    V_TEMP_ROW.IDI_BOOKKEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'IDI_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.IDI_BANK_SHORT_NAME                   :=  V_ROW_VALUE;
                WHEN 'ROUTING_NBR' THEN
                    V_TEMP_ROW.ROUTING_NBR                           :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_ACCOUNT_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_ACCOUNT_ROWTYPE_SP;

PROCEDURE BANK_MICR_FORMAT_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_MICR_FORMAT record type

Created : 03/19/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_MICR_FORMAT%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_MICR_FORMAT%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'FORMAT_NAME' THEN
                    V_TEMP_ROW.FORMAT_NAME                           :=  V_ROW_VALUE;
                WHEN 'DJDE_FORM_PARM' THEN
                    V_TEMP_ROW.DJDE_FORM_PARM                        :=  V_ROW_VALUE;
                WHEN 'DJDE_FEED_PARM' THEN
                    V_TEMP_ROW.DJDE_FEED_PARM                        :=  V_ROW_VALUE;
                WHEN 'MICR_COST_CNTR' THEN
                    V_TEMP_ROW.MICR_COST_CNTR                        :=  V_ROW_VALUE;
                WHEN 'MICR_ROUTING_NBR' THEN
                    V_TEMP_ROW.MICR_ROUTING_NBR                      :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ACTNBR' THEN
                    V_TEMP_ROW.MICR_FORMAT_ACTNBR                    :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ID' THEN
                    V_TEMP_ROW.MICR_FORMAT_ID                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    IF V_TEMP_ROW.MICR_FORMAT_ID IS NULL THEN
        V_TEMP_ROW.MICR_FORMAT_ID := BANKING_COMMON_TOOLS.GET_NEXT_MICR_FORMAT_ID(V_TEMP_ROW.BANK_ACCOUNT_NBR, NULL);
    END IF;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_MICR_FORMAT_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_MICR_FORMAT_ROWTYPE_SP;

PROCEDURE LEAD_BANK_CC_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the LEAD_BANK_CC record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT LEAD_BANK_CC%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         LEAD_BANK_CC%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'LEAD_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.LEAD_BANK_ACCOUNT_NBR                 :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_TYPE_CODE' THEN
                    V_TEMP_ROW.BANK_TYPE_CODE                        :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'LEAD_BANK_CC_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END LEAD_BANK_CC_ROWTYPE_SP;

PROCEDURE MEMBER_BANK_CC_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the MEMBER_BANK_CC record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT MEMBER_BANK_CC%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         MEMBER_BANK_CC%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'LEAD_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.LEAD_BANK_ACCOUNT_NBR                 :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'MEMBER_STORE_NBR' THEN
                    V_TEMP_ROW.MEMBER_STORE_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM') ;
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'MEMBER_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.MEMBER_BANK_ACCOUNT_NBR               :=  V_ROW_VALUE;
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'MEMBER_BANK_CC_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END MEMBER_BANK_CC_ROWTYPE_SP;

PROCEDURE BANK_PRCCNTR_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_PRCCNTR record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_PRCCNTR%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_PRCCNTR%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'PRICE_DIST_NBR' THEN
                    V_TEMP_ROW.PRICE_DIST_NBR                        :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINT_AUTH_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_AUTH_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCCNTR_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCCNTR_ROWTYPE_SP;

PROCEDURE BANK_PRCDIST_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_PRCDIST record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_PRCDIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_PRCDIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'PRICE_DIST_NBR' THEN
                    V_TEMP_ROW.PRICE_DIST_NBR                        :=  V_ROW_VALUE;
                WHEN 'PRICE_DIST_NAME' THEN
                    V_TEMP_ROW.PRICE_DIST_NAME                       :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINT_AUTH_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_AUTH_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCDIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCDIST_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICK_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICK record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 04/23/2015 Added REORDER_SWITCH column.
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
Changed : 08/18/2015 axk326 CCN Project....
          Removed code for columns DJDE_FORM_PARM, DJDE_FEED_PARM, MICR_COST_CNTR, 
                                   MICR_ROUTING_NBR, MICR_FORMAT_ACCT_NBR, FORMAT_NAME FROM BANK_DEP_TICK table  
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICK%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICK%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DAILY_USE_ACTUAL' THEN
                    V_TEMP_ROW.DAILY_USE_ACTUAL                      :=  V_ROW_VALUE;
                WHEN 'DAILY_USE_OVERRIDE' THEN
                    V_TEMP_ROW.DAILY_USE_OVERRIDE                    :=  V_ROW_VALUE;
                WHEN 'DEP_TKTS_ONHAND_QTY' THEN
                    V_TEMP_ROW.DEP_TKTS_ONHAND_QTY                   :=  V_ROW_VALUE;
                WHEN 'YTD_DEP_TKTS_ORDERED_QTY' THEN
                    V_TEMP_ROW.YTD_DEP_TKTS_ORDERED_QTY              :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'REORDER_SWITCH' THEN
                    V_TEMP_ROW.REORDER_SWITCH                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICK_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICK_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICKOAK_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICKOAK record type

Created : 03/19/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICKOAK%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICKOAK%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'DEPOSIT_TICKET_OOAK' THEN
                    V_TEMP_ROW.DEPOSIT_TICKET_OOAK                   :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_TYPE' THEN
                    V_TEMP_ROW.DEP_BAG_TYPE                          :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_POINT' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_POINT                 :=  V_ROW_VALUE;
                WHEN 'DEPBAG_REORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_REORDER_QTY                    :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKOAK_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKOAK_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICKORD_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICKORD record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
Changed : 10/20/2015 sxt410 CCN Project....
          Changed Column Name From Extract_Date To Order_Date
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_TICK_FTR_ID column to BANK_DEP_TICKORD table
Changed : 12/12/2016 nxk927 CCN Project....
          Added arrival date to deposit order table
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICKORD%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICKORD%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'BANK_DEP_TICK_FTR_ID' THEN
                    V_TEMP_ROW.BANK_DEP_TICK_FTR_ID                  :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_PRIORITY' THEN
                    V_TEMP_ROW.DEPOSIT_ORDER_PRIORITY                :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_STATUS' THEN
                    V_TEMP_ROW.DEPOSIT_ORDER_STATUS                  :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_SEQ_NBR' THEN
                    V_TEMP_ROW.DEPOSIT_ORDER_SEQ_NBR                 :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'ARRIVAL_DATE' THEN
                    V_TEMP_ROW.ARRIVAL_DATE                            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXTRACTED_USER_ID' THEN
                    V_TEMP_ROW.EXTRACTED_USER_ID                     :=  V_ROW_VALUE;
                WHEN 'ORDER_DATE' THEN
                    V_TEMP_ROW.ORDER_DATE                            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKORD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKORD_ROWTYPE_SP;

PROCEDURE BANK_DEP_BAG_TICK_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_DEP_BAG_TICK record type

Created : 04/08/2015 jxc517 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project...
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
        : 12/13/2016 nxk927 CCN Project....
          Removed Last order date as date passed is in wrong format. We will populate it and get it fixed later from UI
        : 12/18/2018 pxa852 CCN Project Team...
          Modified code to remove bank account number column value
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_BAG_TICK%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_BAG_TICK%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DEPBAG_DAILY_USE_ACTUAL' THEN
                    V_TEMP_ROW.DEPBAG_DAILY_USE_ACTUAL               :=  V_ROW_VALUE;
                WHEN 'DEPBAG_DLY_USE_OVERRIDE' THEN
                    V_TEMP_ROW.DEPBAG_DLY_USE_OVERRIDE               :=  V_ROW_VALUE;
                WHEN 'DEPBAG_LAST_ORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_LAST_ORDER_QTY                 :=  V_ROW_VALUE;
                WHEN 'DEPBAG_ONHAND_QTY' THEN
                    V_TEMP_ROW.DEPBAG_ONHAND_QTY                     :=  V_ROW_VALUE;
                WHEN 'DEPBAG_REORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_REORDER_QTY                    :=  V_ROW_VALUE;
                WHEN 'DEPBAG_YTD_ORDERED_QTY' THEN
                    V_TEMP_ROW.DEPBAG_YTD_ORDERED_QTY                :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_POINT' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_POINT                 :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_TYPE' THEN
                    V_TEMP_ROW.DEP_BAG_TYPE                          :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_SWITCH' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_SWITCH                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_BAG_TICK_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_BAG_TICK_ROWTYPE_SP;

PROCEDURE BNK_DEP_BAG_TICKORD_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_BAG_TICKORD record type

Created : 10/19/2015 jxc517 CCN Project....
Changed : 10/20/2015 sxt410 CCN Project....
          Changed Column Name From Extract_Date To Order_Date
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_BAG_FTR_ID column to BANK_DEP_BAG_TICKORD table
Changed : 12/12/2016 nxk927 CCN Project....
          Added arrival date to deposit order table
        : 12/18/2018 pxa852 CCN Project Team...
          Modified code to remove bank account number column value
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_BAG_TICKORD%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_BAG_TICKORD%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'BANK_DEP_BAG_FTR_ID' THEN
                    V_TEMP_ROW.BANK_DEP_BAG_FTR_ID                   :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_BAG_ORDER_PRIORITY' THEN
                    V_TEMP_ROW.DEPOSIT_BAG_ORDER_PRIORITY            :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_BAG_ORDER_STATUS' THEN
                    V_TEMP_ROW.DEPOSIT_BAG_ORDER_STATUS              :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_BAG_ORDER_SEQ_NBR' THEN
                    V_TEMP_ROW.DEPOSIT_BAG_ORDER_SEQ_NBR             :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'ARRIVAL_DATE' THEN
                    V_TEMP_ROW.ARRIVAL_DATE                          :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXTRACTED_USER_ID' THEN
                    V_TEMP_ROW.EXTRACTED_USER_ID                     :=  V_ROW_VALUE;
                WHEN 'ORDER_DATE' THEN
                    V_TEMP_ROW.ORDER_DATE                            :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BNK_DEP_BAG_TICKORD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BNK_DEP_BAG_TICKORD_ROWTYPE_SP;

---------------------------FUTURE ROWTYPE PROCEDURES---------------------------
PROCEDURE BANK_ACCOUNT_FUTURE_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_ACCOUNT_FUTURE record type

Created : 04/09/2015 jxc517 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
Changed : 12/02/2015 dxv848 CCN Project...
          Added code for Recon_bank_account_nbr which must be padded with zeros with bank_account_nbr
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_ACCOUNT_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'BANK_NAME' THEN
                    V_TEMP_ROW.BANK_NAME                             :=  V_ROW_VALUE;
                WHEN 'BOOK_KEEPER_NBR' THEN
                    V_TEMP_ROW.BOOK_KEEPER_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_AUTO_RECON_IND' THEN
                    V_TEMP_ROW.BANK_AUTO_RECON_IND                   :=  V_ROW_VALUE;
                WHEN 'RECON_START_DATE' THEN
                    V_TEMP_ROW.RECON_START_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'RECON_BANK_ACCOUNT_NBR' THEN
                    -- Below REGEXP_REPLACE will eliminate all characters other than digits(0-9)
                    V_TEMP_ROW.RECON_BANK_ACCOUNT_NBR                :=  LPAD(REGEXP_REPLACE(V_TEMP_ROW.BANK_ACCOUNT_NBR,'[^[:digit:]]'),16,0);
                WHEN 'JV_BOOK_KEEPER_REF' THEN
                    V_TEMP_ROW.JV_BOOK_KEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'JV_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.JV_BANK_SHORT_NAME                    :=  V_ROW_VALUE;
                WHEN 'IDI_BOOKKEEPER_REF' THEN
                    V_TEMP_ROW.IDI_BOOKKEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'IDI_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.IDI_BANK_SHORT_NAME                   :=  V_ROW_VALUE;
                WHEN 'ROUTING_NBR' THEN
                    V_TEMP_ROW.ROUTING_NBR                           :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_ACCOUNT_FUTURE_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_ACCOUNT_FUTURE_ROWTYPE_SP;

PROCEDURE BANK_MICR_FRMT_FTR_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_MICR_FORMAT_FUTURE record type

Created : 04/09/2015 jxc517 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_MICR_FORMAT_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'FORMAT_NAME' THEN
                    V_TEMP_ROW.FORMAT_NAME                           :=  V_ROW_VALUE;
                WHEN 'DJDE_FORM_PARM' THEN
                    V_TEMP_ROW.DJDE_FORM_PARM                        :=  V_ROW_VALUE;
                WHEN 'DJDE_FEED_PARM' THEN
                    V_TEMP_ROW.DJDE_FEED_PARM                        :=  V_ROW_VALUE;
                WHEN 'MICR_COST_CNTR' THEN
                    V_TEMP_ROW.MICR_COST_CNTR                        :=  V_ROW_VALUE;
                WHEN 'MICR_ROUTING_NBR' THEN
                    V_TEMP_ROW.MICR_ROUTING_NBR                      :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ACTNBR' THEN
                    V_TEMP_ROW.MICR_FORMAT_ACTNBR                    :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ID' THEN
                    V_TEMP_ROW.MICR_FORMAT_ID                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    IF V_TEMP_ROW.MICR_FORMAT_ID IS NULL THEN
        V_TEMP_ROW.MICR_FORMAT_ID := BANKING_COMMON_TOOLS.GET_NEXT_MICR_FORMAT_ID(V_TEMP_ROW.BANK_ACCOUNT_NBR, V_TEMP_ROW.FUTURE_ID);
    END IF;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_MICR_FRMT_FTR_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_MICR_FRMT_FTR_ROWTYPE_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the LEAD_BANK_CC_FUTURE record type

Created : 05/22/2015 jxc517 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         LEAD_BANK_CC_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            --V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'LEAD_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.LEAD_BANK_ACCOUNT_NBR                 :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_TYPE_CODE' THEN
                    V_TEMP_ROW.BANK_TYPE_CODE                        :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'LEAD_BANK_CC_FUTURE_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END LEAD_BANK_CC_FUTURE_ROWTYPE_SP;

PROCEDURE MEMBER_BNK_FTRE_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the MEMBER_BANK_CC_FUTURE record type

Created : 03/13/2015 nxk927 CCN Project....
Changed : 08/12/2015 nxk927 CCN Project... 
          Made changes to accept time stamp 'MM-DD-YYYY HH12:MI:SS AM'
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         MEMBER_BANK_CC_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'LEAD_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.LEAD_BANK_ACCOUNT_NBR                 :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'MEMBER_STORE_NBR' THEN
                    V_TEMP_ROW.MEMBER_STORE_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'MEMBER_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.MEMBER_BANK_ACCOUNT_NBR               :=  V_ROW_VALUE;
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'MEMBER_BNK_FTRE_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END MEMBER_BNK_FTRE_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICK_FTR_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_DEP_TICK_FUTURE record type

Created : 08/21/2015 jxc517 CCN Project....
Changed : 12/13/2016 nxk927 CCN Project....
          Removed Last order date as date passed is in wrong format. We will populate it and get it fixed later from UI
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICK_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICK_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            --V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DAILY_USE_ACTUAL' THEN
                    V_TEMP_ROW.DAILY_USE_ACTUAL                      :=  V_ROW_VALUE;
                WHEN 'DAILY_USE_OVERRIDE' THEN
                    V_TEMP_ROW.DAILY_USE_OVERRIDE                    :=  V_ROW_VALUE;
                WHEN 'DEP_TKTS_ONHAND_QTY' THEN
                    V_TEMP_ROW.DEP_TKTS_ONHAND_QTY                   :=  V_ROW_VALUE;
                WHEN 'YTD_DEP_TKTS_ORDERED_QTY' THEN
                    V_TEMP_ROW.YTD_DEP_TKTS_ORDERED_QTY              :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY HH12:MI:SS AM');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'REORDER_SWITCH' THEN
                    V_TEMP_ROW.REORDER_SWITCH                        :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICK_FTR_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICK_FTR_ROWTYPE_SP;

---------------------------HISTORY UPDATE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_HIST_U_SP(
/*******************************************************************************
    This procedure is intended to updates records in BANK_ACCOUNT_HIST table

Created : 07/21/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_HIST%ROWTYPE)
IS
BEGIN
    UPDATE BANK_ACCOUNT_HIST
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_HIST_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_HIST_U_SP;

PROCEDURE BANK_MICR_FORMAT_HIST_U_SP(
/*******************************************************************************
    This procedure is intended to updates records in BANK_MICR_FORMAT_HIST table

Created : 07/21/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_HIST%ROWTYPE)
IS
BEGIN
    UPDATE BANK_MICR_FORMAT_HIST
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(MICR_FORMAT_ID,-1)             = NVL(IN_ROW.MICR_FORMAT_ID,NVL(MICR_FORMAT_ID,-1))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_HIST_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_HIST_U_SP;

PROCEDURE STR_MICR_FRMT_DTLS_HIST_U_SP(
/*******************************************************************************
    This procedure is intended to updates records in STORE_MICR_FORMAT_DTLS_HIST table

Created : 08/18/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     STORE_MICR_FORMAT_DTLS_HIST%ROWTYPE)
IS
BEGIN
    UPDATE STORE_MICR_FORMAT_DTLS_HIST
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(COST_CENTER_CODE,'XXX')        = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(MICR_FORMAT_ID,-1)             = NVL(IN_ROW.MICR_FORMAT_ID,NVL(MICR_FORMAT_ID,-1))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STR_MICR_FRMT_DTLS_HIST_U_SP', SUBSTR(SQLERRM,1,500));
END STR_MICR_FRMT_DTLS_HIST_U_SP;

PROCEDURE LEAD_BANK_CC_HIST_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in LEAD_BANK_CC_HIST table

Created : 07/21/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_HIST%ROWTYPE)
IS
BEGIN
    UPDATE LEAD_BANK_CC_HIST
       SET ROW = IN_ROW
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_HIST_U_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_HIST_U_SP;

PROCEDURE MEMBER_BANK_CC_HIST_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in MEMBER_BANK_CC table

Created : 07/21/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_HIST%ROWTYPE)
IS
BEGIN
    UPDATE MEMBER_BANK_CC_HIST
       SET ROW = IN_ROW
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX')   = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')          = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX')        = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_HIST_U_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_HIST_U_SP;

---------------------------CURRENT UPDATE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_ACCOUNT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT%ROWTYPE)
IS
BEGIN
    UPDATE BANK_ACCOUNT
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_U_SP;

PROCEDURE BANK_MICR_FORMAT_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_MICR_FORMAT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT%ROWTYPE)
IS
BEGIN
    UPDATE BANK_MICR_FORMAT
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(MICR_FORMAT_ID,-1)             = NVL(IN_ROW.MICR_FORMAT_ID,NVL(MICR_FORMAT_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_U_SP;

PROCEDURE STORE_MICR_FORMAT_DTLS_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in STORE_MICR_FORMAT_DTLS table

Created : 08/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     STORE_MICR_FORMAT_DTLS%ROWTYPE)
IS
BEGIN
    UPDATE STORE_MICR_FORMAT_DTLS
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX')        = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STORE_MICR_FORMAT_DTLS_U_SP', SUBSTR(SQLERRM,1,500));
END STORE_MICR_FORMAT_DTLS_U_SP;

PROCEDURE LEAD_BANK_CC_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in LEAD_BANK_CC table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC%ROWTYPE)
IS
BEGIN
    UPDATE LEAD_BANK_CC
       SET ROW = IN_ROW
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'));       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_U_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_U_SP;

PROCEDURE MEMBER_BANK_CC_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in MEMBER_BANK_CC table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC%ROWTYPE)
IS
BEGIN
    UPDATE MEMBER_BANK_CC
       SET ROW = IN_ROW
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX')      = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'));       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_U_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_U_SP;

PROCEDURE BANK_DEP_BAG_TICK_U_SP (
/*******************************************************************************
	This procedure is intended to updates records in BANK_DEP_BAG_TICK table

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW  IN   BANK_DEP_BAG_TICK%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_BAG_TICK
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX')  = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_U_SP',SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_U_SP;

PROCEDURE BANK_DEP_TICK_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICK table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICK%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_TICK
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX')  = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_U_SP;

PROCEDURE BANK_DEP_TICKORD_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICKORD table

Created : 09/01/2015 jxc517 CCN Project....
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_TICK_FTR_ID column to BANK_DEP_TICKORD table
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICKORD%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_TICKORD
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX')  = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(BANK_DEP_TICK_FTR_ID,-1)= NVL(IN_ROW.BANK_DEP_TICK_FTR_ID,NVL(BANK_DEP_TICK_FTR_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_U_SP;

PROCEDURE BANK_DEP_BAG_TICKORD_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_BAG_TICKORD table

Created : 10/19/2015 jxc517 CCN Project....
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_BAG_FTR_ID column to BANK_DEP_BAG_TICKORD table
*******************************************************************************/
IN_ROW IN     BANK_DEP_BAG_TICKORD%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_BAG_TICKORD
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX')  = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(BANK_DEP_BAG_FTR_ID,-1)  = NVL(IN_ROW.BANK_DEP_BAG_FTR_ID,NVL(BANK_DEP_BAG_FTR_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICKORD_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICKORD_U_SP;

---------------------------FUTURE UPDATE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_ACCOUNT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_ACCOUNT_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_FUTURE_U_SP;

PROCEDURE BANK_MICR_FORMAT_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_MICR_FORMAT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_MICR_FORMAT_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(MICR_FORMAT_ID,-1)             = NVL(IN_ROW.MICR_FORMAT_ID,NVL(MICR_FORMAT_ID,-1))
       AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_FUTURE_U_SP;

PROCEDURE STR_MICR_FORMAT_DTLS_FTR_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in STORE_MICR_FORMAT_DTLS_FUTURE table

Created : 08/24/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     STORE_MICR_FORMAT_DTLS_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE STORE_MICR_FORMAT_DTLS_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STR_MICR_FORMAT_DTLS_FTR_U_SP', SUBSTR(SQLERRM,1,500));
END STR_MICR_FORMAT_DTLS_FTR_U_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in LEAD_BANK_CC_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE LEAD_BANK_CC_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)                = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_FUTURE_U_SP;

PROCEDURE MEMBER_BANK_CC_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in MEMBER_BANK_CC_FUTURE table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE MEMBER_BANK_CC_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX')      = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)                = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));      
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_FUTURE_U_SP;

PROCEDURE BANK_DEP_TICK_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICK_FUTURE table

Created : 08/24/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICK_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_TICK_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_FUTURE_U_SP;

PROCEDURE BANK_DEP_TICKORD_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICKORD_FUTURE table

Created : 09/01/2015 jxc517 CCN Project....
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_TICK_FTR_ID column to BANK_DEP_TICKORD_FUTURE table
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICKORD_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_TICKORD_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1))
       AND NVL(BANK_DEP_TICK_FTR_ID,-1)= NVL(IN_ROW.BANK_DEP_TICK_FTR_ID,NVL(BANK_DEP_TICK_FTR_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_FUTURE_U_SP;

PROCEDURE BANK_DEP_TICKOAK_U_SP
/*******************************************************************************
    This procedure is intended to updates Previous records in BANK_DEP_TICKOAK table

Created : 07/31/2015 sxt410 CCN Project....
Changed : 
*******************************************************************************/
IS
BEGIN
    UPDATE BANK_DEP_TICKOAK
       SET EXPIRATION_DATE = SYSDATE
     WHERE EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKOAK_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKOAK_U_SP;

---------------------------HISTORY INSERT PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_ACCOUNT_HIST table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_ACCOUNT%ROWTYPE)
IS
    V_ROW    BANK_ACCOUNT%ROWTYPE := IN_ROW;
BEGIN
    INSERT INTO BANK_ACCOUNT_HIST VALUES V_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_ACCOUNT_HIST_U_SP(V_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_HIST_I_SP;

PROCEDURE BANK_MICR_FORMAT_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_MICR_FORMAT_HIST table

Created : 07/20/2015 nxk927/sxh487 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_MICR_FORMAT%ROWTYPE)
IS
    V_ROW    BANK_MICR_FORMAT%ROWTYPE := IN_ROW;
BEGIN
    INSERT INTO BANK_MICR_FORMAT_HIST VALUES V_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_MICR_FORMAT_HIST_U_SP(V_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_HIST_I_SP;

PROCEDURE STR_MICR_FRMT_DTLS_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into STORE_MICR_FORMAT_DTLS_HIST table

Created : 08/18/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     STORE_MICR_FORMAT_DTLS%ROWTYPE)
IS
    V_ROW    STORE_MICR_FORMAT_DTLS%ROWTYPE := IN_ROW;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, SYSDATE);
    INSERT INTO STORE_MICR_FORMAT_DTLS_HIST VALUES V_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STR_MICR_FRMT_DTLS_HIST_U_SP(V_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STR_MICR_FRMT_DTLS_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END STR_MICR_FRMT_DTLS_HIST_I_SP;

PROCEDURE LEAD_BANK_CC_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into LEAD_BANK_CC_HIST table

Created : 07/20/2015 nxk927/sxh487 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     LEAD_BANK_CC%ROWTYPE)
IS
    V_ROW    LEAD_BANK_CC%ROWTYPE := IN_ROW;
BEGIN
    INSERT INTO LEAD_BANK_CC_HIST VALUES V_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        LEAD_BANK_CC_HIST_U_SP(V_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_HIST_I_SP;

PROCEDURE MEMBER_BANK_CC_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into MEMBER_BANK_CC_HIST table

Created : 07/20/2015 nxk927/sxh487 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     MEMBER_BANK_CC%ROWTYPE)
IS
    V_ROW    MEMBER_BANK_CC%ROWTYPE := IN_ROW;
BEGIN
    INSERT INTO MEMBER_BANK_CC_HIST VALUES V_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        MEMBER_BANK_CC_HIST_U_SP(V_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_HIST_I_SP;

PROCEDURE BANK_DEP_TICK_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICK_HIST table

Created : 03/24/2015 SXT410 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICK%ROWTYPE)
IS
    V_ROW    BANK_DEP_TICK%ROWTYPE := IN_ROW;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, SYSDATE);
    INSERT INTO BANK_DEP_TICK_HIST VALUES V_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_HIST_I_SP;

PROCEDURE BANK_DEP_BAG_TICK_HIST_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into BANK_DEP_BAG_TICK_HIST table

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_BAG_TICK%ROWTYPE)
IS
    V_ROW    BANK_DEP_BAG_TICK%ROWTYPE := IN_ROW;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, SYSDATE);
    INSERT INTO BANK_DEP_BAG_TICK_HIST VALUES V_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_HIST_I_SP;

PROCEDURE BANK_DEP_TICKORD_HIST_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into BANK_DEP_TICKORD_HIST table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICKORD%ROWTYPE)
IS
    V_ROW    BANK_DEP_TICKORD%ROWTYPE := IN_ROW;
BEGIN
    INSERT INTO BANK_DEP_TICKORD_HIST VALUES V_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_HIST_I_SP;

PROCEDURE BANK_DEP_BAG_TICKORD_HIST_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into BANK_DEP_BAG_TICKORD_HIST table

Created : 10/19/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_BAG_TICKORD%ROWTYPE)
IS
    V_ROW    BANK_DEP_BAG_TICKORD%ROWTYPE := IN_ROW;
BEGIN
    INSERT INTO BANK_DEP_BAG_TICKORD_HIST VALUES V_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICKORD_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICKORD_HIST_I_SP;

---------------------------CURRENT INSERT PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_ACCOUNT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 01/15/2015 dxv848 CCN Project...
          Added code for Recon_bank_account_nbr which must be padded with zeros with bank_account_nbr.
          before insert into bank_account table
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT%ROWTYPE)
IS

V_BANK_ACCOUNT_REC BANK_ACCOUNT%ROWTYPE;
BEGIN

V_BANK_ACCOUNT_REC:=IN_ROW;
-- Below REGEXP_REPLACE will eliminate all characters other than digits(0-9)
V_BANK_ACCOUNT_REC.RECON_BANK_ACCOUNT_NBR:=LPAD(REGEXP_REPLACE(V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR,'[^[:digit:]]'),16,0);
INSERT INTO BANK_ACCOUNT VALUES V_BANK_ACCOUNT_REC;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_ACCOUNT_U_SP(V_BANK_ACCOUNT_REC);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_I_SP;

PROCEDURE BANK_MICR_FORMAT_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_MICR_FORMAT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_MICR_FORMAT VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_MICR_FORMAT_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_I_SP;

PROCEDURE STORE_MICR_FORMAT_DTLS_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into STORE_MICR_FORMAT_DTLS table

Created : 08/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     STORE_MICR_FORMAT_DTLS%ROWTYPE)
IS
BEGIN
    INSERT INTO STORE_MICR_FORMAT_DTLS VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STORE_MICR_FORMAT_DTLS_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STORE_MICR_FORMAT_DTLS_I_SP', SUBSTR(SQLERRM,1,500));
END STORE_MICR_FORMAT_DTLS_I_SP;

PROCEDURE LEAD_BANK_CC_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into LEAD_BANK_CC table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC%ROWTYPE)
IS
BEGIN
    INSERT INTO LEAD_BANK_CC VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        LEAD_BANK_CC_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_I_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_I_SP;

PROCEDURE MEMBER_BANK_CC_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into MEMBER_BANK_CC table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC%ROWTYPE)
IS
BEGIN
INSERT INTO MEMBER_BANK_CC VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        MEMBER_BANK_CC_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_I_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_I_SP;

PROCEDURE BANK_DEP_TICK_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICK table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICK%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_TICK VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_TICK_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_I_SP;

PROCEDURE BANK_DEP_BAG_TICK_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into BANK_DEP_BAG_TICK table

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW  IN   BANK_DEP_BAG_TICK%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_BAG_TICK VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_BAG_TICK_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_I_SP;

PROCEDURE BANK_DEP_TICKORD_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICKORD table

Created : 09/01/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICKORD%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_TICKORD VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_TICKORD_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_I_SP;

PROCEDURE BANK_DEP_BAG_TICKORD_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_BAG_TICKORD table

Created : 10/19/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_BAG_TICKORD%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_BAG_TICKORD VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_BAG_TICKORD_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICKORD_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICKORD_I_SP;

PROCEDURE BANK_DEP_TICKOAK_I_SP (
/*******************************************************************************
    This Procedure Is Intended To Insert Records Into Bank_Dep_Tickoak Table
    And Expires Revious Record Before Inserting New Record.

Created : 07/31/2015 sxt410 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICKOAK%ROWTYPE)
IS
BEGIN 
    TABLE_IU_PKG.BANK_DEP_TICKOAK_U_SP();

    INSERT INTO BANK_DEP_TICKOAK VALUES IN_ROW;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKOAK_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKOAK_I_SP;

---------------------------FUTURE INSERT PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_ACCOUNT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 01/15/2015 dxv848 CCN Project...
          Added code for Recon_bank_account_nbr which must be padded with zeros with bank_account_nbr.
          before insert into bank_account table
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
V_BANK_ACCOUNT_REC BANK_ACCOUNT_FUTURE%ROWTYPE;

BEGIN
    V_BANK_ACCOUNT_REC:=IN_ROW;
    -- Below REGEXP_REPLACE will eliminate all characters other than digits(0-9)
    V_BANK_ACCOUNT_REC.RECON_BANK_ACCOUNT_NBR:=LPAD(REGEXP_REPLACE(V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR,'[^[:digit:]]'),16,0);
    INSERT INTO BANK_ACCOUNT_FUTURE VALUES V_BANK_ACCOUNT_REC;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_ACCOUNT_FUTURE_U_SP(V_BANK_ACCOUNT_REC);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_FUTURE_I_SP;

PROCEDURE BANK_MICR_FORMAT_FUTURE_I_SP(
/*******************************************************************************
    This procedure is intended to insert records into BANK_MICR_FORMAT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_MICR_FORMAT_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_MICR_FORMAT_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_FUTURE_I_SP;

PROCEDURE STR_MICR_FORMAT_DTLS_FTR_I_SP(
/*******************************************************************************
    This procedure is intended to insert records into STORE_MICR_FORMAT_DTLS_FUTURE table

Created : 08/24/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     STORE_MICR_FORMAT_DTLS_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO STORE_MICR_FORMAT_DTLS_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        STR_MICR_FORMAT_DTLS_FTR_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STR_MICR_FORMAT_DTLS_FTR_I_SP', SUBSTR(SQLERRM,1,500));
END STR_MICR_FORMAT_DTLS_FTR_I_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into LEAD_BANK_CC_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO LEAD_BANK_CC_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        LEAD_BANK_CC_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_FUTURE_I_SP;

PROCEDURE MEMBER_BANK_CC_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into MEMBER_BANK_CC_FUTURE table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO MEMBER_BANK_CC_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        MEMBER_BANK_CC_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_FUTURE_I_SP;

PROCEDURE BANK_DEP_TICK_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICK_FUTURE table

Created : 08/24/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICK_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_TICK_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_TICK_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_FUTURE_I_SP;

PROCEDURE BANK_DEP_TICKORD_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICKORD_FUTURE table

Created : 09/01/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICKORD_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_TICKORD_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_TICKORD_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_FUTURE_I_SP;

---------------------------CURRENT DELETE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_ACCOUNT table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT%ROWTYPE)
IS
V_ROW          BANK_ACCOUNT%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    BANK_ACCOUNT_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    BANK_ACCOUNT_HIST_I_SP(V_ROW);
    DELETE
      FROM BANK_ACCOUNT
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_D_SP;

PROCEDURE BANK_MICR_FORMAT_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_MICR_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_MICR_FORMAT%ROWTYPE)
IS
V_ROW          BANK_MICR_FORMAT%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    BANK_MICR_FORMAT_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    BANK_MICR_FORMAT_HIST_I_SP(V_ROW);
    DELETE
      FROM BANK_MICR_FORMAT
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(MICR_FORMAT_ID,-1)      = NVL(IN_ROW.MICR_FORMAT_ID,NVL(MICR_FORMAT_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_D_SP;

PROCEDURE STORE_MICR_FORMAT_DTLS_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from STORE_MICR_FORMAT_DTLS table

Created : 08/18/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     STORE_MICR_FORMAT_DTLS%ROWTYPE)
IS
V_ROW          STORE_MICR_FORMAT_DTLS%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    STORE_MICR_FORMAT_DTLS_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    STR_MICR_FRMT_DTLS_HIST_I_SP(V_ROW);
    DELETE
      FROM STORE_MICR_FORMAT_DTLS
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STORE_MICR_FORMAT_DTLS_D_SP', SUBSTR(SQLERRM,1,500));
END STORE_MICR_FORMAT_DTLS_D_SP;

PROCEDURE LEAD_BANK_CC_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from LEAD_BANK_CC table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     LEAD_BANK_CC%ROWTYPE)
IS
V_ROW          LEAD_BANK_CC%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    LEAD_BANK_CC_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    LEAD_BANK_CC_HIST_I_SP(V_ROW);
    DELETE
      FROM LEAD_BANK_CC
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX')   = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')          = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_D_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_D_SP;

PROCEDURE MEMBER_BANK_CC_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from MEMBER_BANK_CC table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     MEMBER_BANK_CC%ROWTYPE)
IS
V_ROW          MEMBER_BANK_CC%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    MEMBER_BANK_CC_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    MEMBER_BANK_CC_HIST_I_SP(V_ROW);
    DELETE
      FROM MEMBER_BANK_CC
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX')      = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_D_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_D_SP;

PROCEDURE BANK_DEP_TICK_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_DEP_TICK table

Created : 08/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICK%ROWTYPE)
IS
V_ROW          BANK_DEP_TICK%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    BANK_DEP_TICK_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    BANK_DEP_TICK_HIST_I_SP(V_ROW);
    DELETE
      FROM BANK_DEP_TICK
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_D_SP;

PROCEDURE BANK_DEP_BAG_TICK_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_DEP_BAG_TICK table

Created : 08/13/2015 jxc517 CCN Project....
Changed : 06/05/2018 nxk927 CCN Project....
          Bags will not be deleted with the current requirement change
*******************************************************************************/
IN_ROW     IN     BANK_DEP_BAG_TICK%ROWTYPE)
IS
V_ROW          BANK_DEP_BAG_TICK%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    BANK_DEP_BAG_TICK_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    BANK_DEP_BAG_TICK_HIST_I_SP(V_ROW);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_D_SP;

PROCEDURE BANK_DEP_TICKORD_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_DEP_TICKORD table

Created : 08/13/2015 jxc517 CCN Project....
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_TICK_FTR_ID column to BANK_DEP_TICKORD table
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICKORD%ROWTYPE)
IS
V_ROW          BANK_DEP_TICKORD%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    BANK_DEP_TICKORD_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    BANK_DEP_TICKORD_HIST_I_SP(V_ROW);
    DELETE
      FROM BANK_DEP_TICKORD
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(BANK_DEP_TICK_FTR_ID,-1)= NVL(IN_ROW.BANK_DEP_TICK_FTR_ID,NVL(BANK_DEP_TICK_FTR_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_D_SP;

PROCEDURE BANK_DEP_BAG_TICKORD_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_DEP_BAG_TICKORD table

Created : 10/19/2015 jxc517 CCN Project....
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_BAG_FTR_ID column to BANK_DEP_BAG_TICKORD table
        : 06/05/2018 nxk927 CCN Project....
          Bags will not be deleted with the current requirement change
*******************************************************************************/
IN_ROW     IN     BANK_DEP_BAG_TICKORD%ROWTYPE)
IS
V_ROW          BANK_DEP_BAG_TICKORD%ROWTYPE  := IN_ROW;
V_EXPIRE_DATE  DATE := SYSDATE - INTERVAL '1' SECOND;
BEGIN
    V_ROW.EXPIRATION_DATE := NVL(IN_ROW.EXPIRATION_DATE, V_EXPIRE_DATE);
    BANK_DEP_BAG_TICKORD_I_SP(V_ROW); --This is to make sure audit gets the expiration dates properly by this update
    BANK_DEP_BAG_TICKORD_HIST_I_SP(V_ROW);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICKORD_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICKORD_D_SP;

---------------------------FUTURE DELETE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_ACCOUNT_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM BANK_ACCOUNT_FUTURE
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_FUTURE_D_SP;

PROCEDURE BANK_MICR_FORMAT_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_MICR_FORMAT_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM BANK_MICR_FORMAT_FUTURE
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(MICR_FORMAT_ID,-1)      = NVL(IN_ROW.MICR_FORMAT_ID,NVL(MICR_FORMAT_ID,-1))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_FUTURE_D_SP;

PROCEDURE STR_MICR_FORMAT_DTLS_FTR_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from STORE_MICR_FORMAT_DTLS_FUTURE table

Created : 08/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     STORE_MICR_FORMAT_DTLS_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM STORE_MICR_FORMAT_DTLS_FUTURE
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'STR_MICR_FORMAT_DTLS_FTR_D_SP', SUBSTR(SQLERRM,1,500));
END STR_MICR_FORMAT_DTLS_FTR_D_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from LEAD_BANK_CC_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM LEAD_BANK_CC_FUTURE
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX')   = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')          = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_FUTURE_D_SP;

PROCEDURE MEMBER_BANK_CC_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from MEMBER_BANK_CC_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM MEMBER_BANK_CC_FUTURE
     WHERE NVL(LEAD_BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.LEAD_BANK_ACCOUNT_NBR,NVL(LEAD_BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(LEAD_STORE_NBR,'XXX')        = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX')      = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)                = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_FUTURE_D_SP;

PROCEDURE BANK_DEP_TICK_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_DEP_TICK_FUTURE table

Created : 08/24/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICK_FUTURE%ROWTYPE)
IS

V_ROW      BANK_DEP_TICK_FUTURE%ROWTYPE  := IN_ROW;
BEGIN
    DELETE
      FROM BANK_DEP_TICK_FUTURE
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_FUTURE_D_SP;

PROCEDURE BANK_DEP_TICKORD_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_DEP_TICKORD_FUTURE table

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_TICK_FTR_ID column to BANK_DEP_TICKORD_FUTURE table
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICKORD_FUTURE%ROWTYPE)
IS

V_ROW      BANK_DEP_TICKORD_FUTURE%ROWTYPE  := IN_ROW;
BEGIN
    DELETE
      FROM BANK_DEP_TICKORD_FUTURE
     WHERE NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1))
       AND NVL(BANK_DEP_TICK_FTR_ID,-1)= NVL(IN_ROW.BANK_DEP_TICK_FTR_ID,NVL(BANK_DEP_TICK_FTR_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICKORD_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICKORD_FUTURE_D_SP;

END TABLE_IU_PKG;