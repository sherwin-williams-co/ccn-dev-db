CREATE OR REPLACE 
PACKAGE BODY         TABLE_IU_PKG 
AS
/**********************************************************
    This Package is intended to process the DMLs and DDLs on all the
  tables related to stare draft

created : 03/13/2015 nxk927 CCN BANKING PROJECT
changed :
**********************************************************/
---------------------------ROWTYPE PROCEDURES---------------------------
PROCEDURE BANK_ACCOUNT_HIST_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_ACCOUNT_HIST record type

Created : 06/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_ACCOUNT_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_ACCOUNT_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            --V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_NAME' THEN
                    V_TEMP_ROW.BANK_NAME                             :=  V_ROW_VALUE;
                WHEN 'BOOK_KEEPER_NBR' THEN
                    V_TEMP_ROW.BOOK_KEEPER_NBR                       :=  V_ROW_VALUE;
                WHEN 'STATEMENT_TYPE' THEN
                    V_TEMP_ROW.STATEMENT_TYPE                        :=  V_ROW_VALUE;
                WHEN 'BANK_AUTO_RECON_IND' THEN
                    V_TEMP_ROW.BANK_AUTO_RECON_IND                   :=  V_ROW_VALUE;
                WHEN 'RECON_START_DATE' THEN
                    V_TEMP_ROW.RECON_START_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'RECON_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.RECON_BANK_ACCOUNT_NBR                :=  V_ROW_VALUE;
                WHEN 'JV_BOOK_KEEPER_REF' THEN
                    V_TEMP_ROW.JV_BOOK_KEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'JV_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.JV_BANK_SHORT_NAME                    :=  V_ROW_VALUE;
                WHEN 'IDI_BOOKKEEPER_REF' THEN
                    V_TEMP_ROW.IDI_BOOKKEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'IDI_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.IDI_BANK_SHORT_NAME                   :=  V_ROW_VALUE;
                WHEN 'ROUTING_NBR' THEN
                    V_TEMP_ROW.ROUTING_NBR                           :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_ACCOUNT_HIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_ACCOUNT_HIST_ROWTYPE_SP;

PROCEDURE BANK_ACCOUNT_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_ACCOUNT record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_ACCOUNT%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_ACCOUNT%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_NAME' THEN
                    V_TEMP_ROW.BANK_NAME                             :=  V_ROW_VALUE;
                WHEN 'BOOK_KEEPER_NBR' THEN
                    V_TEMP_ROW.BOOK_KEEPER_NBR                       :=  V_ROW_VALUE;
                WHEN 'STATEMENT_TYPE' THEN
                    V_TEMP_ROW.STATEMENT_TYPE                        :=  V_ROW_VALUE;
                WHEN 'BANK_AUTO_RECON_IND' THEN
                    V_TEMP_ROW.BANK_AUTO_RECON_IND                   :=  V_ROW_VALUE;
                WHEN 'RECON_START_DATE' THEN
                    V_TEMP_ROW.RECON_START_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'RECON_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.RECON_BANK_ACCOUNT_NBR                :=  V_ROW_VALUE;
                WHEN 'JV_BOOK_KEEPER_REF' THEN
                    V_TEMP_ROW.JV_BOOK_KEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'JV_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.JV_BANK_SHORT_NAME                    :=  V_ROW_VALUE;
                WHEN 'IDI_BOOKKEEPER_REF' THEN
                    V_TEMP_ROW.IDI_BOOKKEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'IDI_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.IDI_BANK_SHORT_NAME                   :=  V_ROW_VALUE;
                WHEN 'ROUTING_NBR' THEN
                    V_TEMP_ROW.ROUTING_NBR                           :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_ACCOUNT_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_ACCOUNT_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICK_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICK record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 04/23/2015 Added REORDER_SWITCH column.
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICK%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICK%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DAILY_USE_ACTUAL' THEN
                    V_TEMP_ROW.DAILY_USE_ACTUAL                      :=  V_ROW_VALUE;
                WHEN 'DAILY_USE_OVERRIDE' THEN
                    V_TEMP_ROW.DAILY_USE_OVERRIDE                    :=  V_ROW_VALUE;
                WHEN 'DEP_TKTS_ONHAND_QTY' THEN
                    V_TEMP_ROW.DEP_TKTS_ONHAND_QTY                   :=  V_ROW_VALUE;
                WHEN 'YTD_DEP_TKTS_ORDERED_QTY' THEN
                    V_TEMP_ROW.YTD_DEP_TKTS_ORDERED_QTY              :=  V_ROW_VALUE;
                WHEN 'DJDE_FORM_PARM' THEN
                    V_TEMP_ROW.DJDE_FORM_PARM                        :=  V_ROW_VALUE;
                WHEN 'DJDE_FEED_PARM' THEN
                    V_TEMP_ROW.DJDE_FEED_PARM                        :=  V_ROW_VALUE;
                WHEN 'MICR_COST_CNTR' THEN
                    V_TEMP_ROW.MICR_COST_CNTR                        :=  V_ROW_VALUE;
                WHEN 'MICR_ROUTING_NBR' THEN
                    V_TEMP_ROW.MICR_ROUTING_NBR                      :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ACCT_NBR' THEN
                    V_TEMP_ROW.MICR_FORMAT_ACCT_NBR                  :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'FORMAT_NAME' THEN
                    V_TEMP_ROW.FORMAT_NAME                           :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'REORDER_SWITCH' THEN
                    V_TEMP_ROW.REORDER_SWITCH                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICK_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICK_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICKOAK_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICKOAK record type

Created : 03/19/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICKOAK%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICKOAK%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'DEPOSIT_TICKET_OOAK' THEN
                    V_TEMP_ROW.DEPOSIT_TICKET_OOAK                   :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_TYPE' THEN
                    V_TEMP_ROW.DEP_BAG_TYPE                          :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_POINT' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_POINT                 :=  V_ROW_VALUE;
                WHEN 'DEPBAG_REORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_REORDER_QTY                    :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKOAK_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKOAK_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICKORD_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICKORD record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICKORD%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICKORD%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_PRIORITY' THEN
                    V_TEMP_ROW.DEPOSIT_ORDER_PRIORITY                :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_STATUS' THEN
                    V_TEMP_ROW.DEPOSIT_ORDER_STATUS                  :=  V_ROW_VALUE;
                WHEN 'COST_CENTER' THEN
                    V_TEMP_ROW.COST_CENTER                           :=  V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_SEQ_NBR' THEN
                    V_TEMP_ROW.DEPOSIT_ORDER_SEQ_NBR                 :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'EXTRACT_DATE' THEN
                    V_TEMP_ROW.EXTRACT_DATE                          :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXTRACTED_USER_ID' THEN
                    V_TEMP_ROW.EXTRACTED_USER_ID                     :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKORD_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKORD_ROWTYPE_SP;

PROCEDURE BANK_DEPTICKORDHST_ROWTYP_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICKORD_HIST record type

Created : 03/24/2015 SXT410 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICKORD_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICKORD_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN             
                    V_TEMP_ROW.BANK_ACCOUNT_NBR          := V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN             
                    V_TEMP_ROW.COST_CENTER_CODE          := V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_PRIORITY' THEN       
                    V_TEMP_ROW.DEPOSIT_ORDER_PRIORITY    := V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_STATUS' THEN         
                    V_TEMP_ROW.DEPOSIT_ORDER_STATUS      := V_ROW_VALUE;
                WHEN 'COST_CENTER' THEN                  
                    V_TEMP_ROW.COST_CENTER               := V_ROW_VALUE;
                WHEN 'DEPOSIT_ORDER_SEQ_NBR' THEN        
                    V_TEMP_ROW.DEPOSIT_ORDER_SEQ_NBR     := V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN               
                    V_TEMP_ROW.EFFECTIVE_DATE            := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN              
                    V_TEMP_ROW.EXPIRATION_DATE           := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN        
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE     := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN           
                    V_TEMP_ROW.LAST_MAINT_USER_ID        := V_ROW_VALUE;
                WHEN 'EXTRACT_DATE' THEN                 
                    V_TEMP_ROW.EXTRACT_DATE              := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXTRACTED_USER_ID' THEN            
                    V_TEMP_ROW.EXTRACTED_USER_ID         := V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEPTICKORDHST_ROWTYP_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEPTICKORDHST_ROWTYP_SP;

PROCEDURE BANK_MICR_FORMAT_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_MICR_FORMAT record type

Created : 03/19/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_MICR_FORMAT%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_MICR_FORMAT%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'FORMAT_NAME' THEN
                    V_TEMP_ROW.FORMAT_NAME                           :=  V_ROW_VALUE;
                WHEN 'DJDE_FORM_PARM' THEN
                    V_TEMP_ROW.DJDE_FORM_PARM                        :=  V_ROW_VALUE;
                WHEN 'DJDE_FEED_PARM' THEN
                    V_TEMP_ROW.DJDE_FEED_PARM                        :=  V_ROW_VALUE;
                WHEN 'MICR_COST_CNTR' THEN
                    V_TEMP_ROW.MICR_COST_CNTR                        :=  V_ROW_VALUE;
                WHEN 'MICR_ROUTING_NBR' THEN
                    V_TEMP_ROW.MICR_ROUTING_NBR                      :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ACTNBR' THEN
                    V_TEMP_ROW.MICR_FORMAT_ACTNBR                    :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_MICR_FORMAT_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_MICR_FORMAT_ROWTYPE_SP;

PROCEDURE BANK_PRCCNTR_HIST_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_PRCCNTR_HIST record type

Created : 03/17/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_PRCCNTR_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_PRCCNTR_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'PRICE_DIST_NBR' THEN
                    V_TEMP_ROW.PRICE_DIST_NBR                        :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_AUTH_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_AUTH_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCCNTR_HIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCCNTR_HIST_ROWTYPE_SP;

PROCEDURE BANK_PRCCNTR_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_PRCCNTR record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_PRCCNTR%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_PRCCNTR%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'PRICE_DIST_NBR' THEN
                    V_TEMP_ROW.PRICE_DIST_NBR                        :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_AUTH_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_AUTH_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCCNTR_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCCNTR_ROWTYPE_SP;

PROCEDURE BANK_PRCDIST_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_PRCDIST record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_PRCDIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_PRCDIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'PRICE_DIST_NBR' THEN
                    V_TEMP_ROW.PRICE_DIST_NBR                        :=  V_ROW_VALUE;
                WHEN 'PRICE_DIST_NAME' THEN
                    V_TEMP_ROW.PRICE_DIST_NAME                       :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_AUTH_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_AUTH_ID                    :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCDIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCDIST_ROWTYPE_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the LEAD_BANK_CC_FUTURE record type

Created : 05/22/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         LEAD_BANK_CC_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            --V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_TYPE_CODE' THEN
                    V_TEMP_ROW.BANK_TYPE_CODE                        :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'LEAD_BANK_CC_FUTURE_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END LEAD_BANK_CC_FUTURE_ROWTYPE_SP;

PROCEDURE LEAD_BANK_CC_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the LEAD_BANK_CC record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT LEAD_BANK_CC%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         LEAD_BANK_CC%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_TYPE_CODE' THEN
                    V_TEMP_ROW.BANK_TYPE_CODE                        :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'LEAD_BANK_CC_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END LEAD_BANK_CC_ROWTYPE_SP;

PROCEDURE LEAD_BANK_HIST_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the LEAD_BANK_CC_HIST record type

Created : 03/13/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT LEAD_BANK_CC_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         LEAD_BANK_CC_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'BANK_TYPE_CODE' THEN
                    V_TEMP_ROW.BANK_TYPE_CODE                        :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'LEAD_BANK_HIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END LEAD_BANK_HIST_ROWTYPE_SP;

PROCEDURE MEMBER_BANK_CC_HIST_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the MEMBER_BANK_CC_HIST record type

Created : 05/22/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT MEMBER_BANK_CC_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         MEMBER_BANK_CC_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            --V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'MEMBER_STORE_NBR' THEN
                    V_TEMP_ROW.MEMBER_STORE_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'MEMBER_BANK_CC_HIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END MEMBER_BANK_CC_HIST_ROWTYPE_SP;

PROCEDURE MEMBER_BANK_CC_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the MEMBER_BANK_CC record type

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT MEMBER_BANK_CC%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         MEMBER_BANK_CC%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'MEMBER_STORE_NBR' THEN
                    V_TEMP_ROW.MEMBER_STORE_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'MEMBER_BANK_CC_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END MEMBER_BANK_CC_ROWTYPE_SP;

PROCEDURE MEMBER_BNK_FTRE_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the MEMBER_BANK_CC_FUTURE record type

Created : 03/13/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         MEMBER_BANK_CC_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NUMBER' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NUMBER                   :=  V_ROW_VALUE;
                WHEN 'LEAD_STORE_NBR' THEN
                    V_TEMP_ROW.LEAD_STORE_NBR                        :=  V_ROW_VALUE;
                WHEN 'MEMBER_STORE_NBR' THEN
                    V_TEMP_ROW.MEMBER_STORE_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_BRANCH_NBR' THEN
                    V_TEMP_ROW.BANK_BRANCH_NBR                       :=  V_ROW_VALUE;
                WHEN 'UPDATE_DATE' THEN
                    V_TEMP_ROW.UPDATE_DATE                           :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_UPD_USER_ID' THEN
                    V_TEMP_ROW.LAST_UPD_USER_ID                      :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'MEMBER_BNK_FTRE_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END MEMBER_BNK_FTRE_ROWTYPE_SP;

PROCEDURE BANK_DEP_TICK_HIST_ROWTYPE_SP (
/*******************************************************************************
    This procedure is intended to build the BANK_DEP_TICK_HIST record type

Created : 03/24/2015 SXT410 CCN Project....
Changed : 04/23/2015 SXT410 Added REORDER_SWITCH column.
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_TICK_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_TICK_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN               
                    V_TEMP_ROW.BANK_ACCOUNT_NBR            := V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN               
                    V_TEMP_ROW.COST_CENTER_CODE            := V_ROW_VALUE;
                WHEN 'DAILY_USE_ACTUAL' THEN               
                    V_TEMP_ROW.DAILY_USE_ACTUAL            := V_ROW_VALUE;
                WHEN 'DAILY_USE_OVERRIDE' THEN             
                    V_TEMP_ROW.DAILY_USE_OVERRIDE          := V_ROW_VALUE;
                WHEN 'DEP_TKTS_ONHAND_QTY' THEN            
                    V_TEMP_ROW.DEP_TKTS_ONHAND_QTY         := V_ROW_VALUE;
                WHEN 'YTD_DEP_TKTS_ORDERED_QTY' THEN       
                    V_TEMP_ROW.YTD_DEP_TKTS_ORDERED_QTY    := V_ROW_VALUE;
                WHEN 'DJDE_FORM_PARM' THEN                 
                    V_TEMP_ROW.DJDE_FORM_PARM              := V_ROW_VALUE;
                WHEN 'DJDE_FEED_PARM' THEN                 
                    V_TEMP_ROW.DJDE_FEED_PARM              := V_ROW_VALUE;
                WHEN 'MICR_COST_CNTR' THEN                 
                    V_TEMP_ROW.MICR_COST_CNTR              := V_ROW_VALUE;
                WHEN 'MICR_ROUTING_NBR' THEN               
                    V_TEMP_ROW.MICR_ROUTING_NBR            := V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ACCT_NBR' THEN           
                    V_TEMP_ROW.MICR_FORMAT_ACCT_NBR        := V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN                  
                    V_TEMP_ROW.REORDER_POINT               := V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN             
                    V_TEMP_ROW.REORDER_NUMBER_BKS          := V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN                
                    V_TEMP_ROW.IMAGES_PER_PAGE             := V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN               
                    V_TEMP_ROW.NBR_FORMS_PER_BK            := V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN            
                    V_TEMP_ROW.PART_PAPER_PER_FORM         := V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN         
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK      := V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN         
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK      := V_ROW_VALUE;
                WHEN 'FORMAT_NAME' THEN                    
                    V_TEMP_ROW.FORMAT_NAME                 := V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN                 
                    V_TEMP_ROW.EFFECTIVE_DATE              := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN                
                    V_TEMP_ROW.EXPIRATION_DATE             := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN          
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE       := TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN             
                    V_TEMP_ROW.LAST_MAINT_USER_ID          := V_ROW_VALUE;
                WHEN 'REORDER_SWITCH' THEN
                    V_TEMP_ROW.REORDER_SWITCH              := V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICK_HIST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICK_HIST_ROWTYPE_SP;

PROCEDURE BANK_DEP_BAG_TICK_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_DEP_BAG_TICK record type

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_BAG_TICK%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_BAG_TICK%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DEPBAG_DAILY_USE_ACTUAL' THEN
                    V_TEMP_ROW.DEPBAG_DAILY_USE_ACTUAL               :=  V_ROW_VALUE;
                WHEN 'DEPBAG_DLY_USE_OVERRIDE' THEN
                    V_TEMP_ROW.DEPBAG_DLY_USE_OVERRIDE               :=  V_ROW_VALUE;
                WHEN 'DEPBAG_LAST_ORDER_DATE' THEN
                    V_TEMP_ROW.DEPBAG_LAST_ORDER_DATE                :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'DEPBAG_LAST_ORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_LAST_ORDER_QTY                 :=  V_ROW_VALUE;
                WHEN 'DEPBAG_ONHAND_QTY' THEN
                    V_TEMP_ROW.DEPBAG_ONHAND_QTY                     :=  V_ROW_VALUE;
                WHEN 'DEPBAG_REORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_REORDER_QTY                    :=  V_ROW_VALUE;
                WHEN 'DEPBAG_YTD_ORDERED_QTY' THEN
                    V_TEMP_ROW.DEPBAG_YTD_ORDERED_QTY                :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_POINT' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_POINT                 :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_TYPE' THEN
                    V_TEMP_ROW.DEP_BAG_TYPE                          :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_SWITCH' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_SWITCH                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_BAG_TICK_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_BAG_TICK_ROWTYPE_SP;

PROCEDURE BNK_DEP_BAG_TIK_HST_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_DEP_BAG_TICK_HIST record type

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_DEP_BAG_TICK_HIST%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_DEP_BAG_TICK_HIST%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'COST_CENTER_CODE' THEN
                    V_TEMP_ROW.COST_CENTER_CODE                      :=  V_ROW_VALUE;
                WHEN 'DEPBAG_DAILY_USE_ACTUAL' THEN
                    V_TEMP_ROW.DEPBAG_DAILY_USE_ACTUAL               :=  V_ROW_VALUE;
                WHEN 'DEPBAG_DLY_USE_OVERRIDE' THEN
                    V_TEMP_ROW.DEPBAG_DLY_USE_OVERRIDE               :=  V_ROW_VALUE;
                WHEN 'DEPBAG_LAST_ORDER_DATE' THEN
                    V_TEMP_ROW.DEPBAG_LAST_ORDER_DATE                :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'DEPBAG_LAST_ORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_LAST_ORDER_QTY                 :=  V_ROW_VALUE;
                WHEN 'DEPBAG_ONHAND_QTY' THEN
                    V_TEMP_ROW.DEPBAG_ONHAND_QTY                     :=  V_ROW_VALUE;
                WHEN 'DEPBAG_REORDER_QTY' THEN
                    V_TEMP_ROW.DEPBAG_REORDER_QTY                    :=  V_ROW_VALUE;
                WHEN 'DEPBAG_YTD_ORDERED_QTY' THEN
                    V_TEMP_ROW.DEPBAG_YTD_ORDERED_QTY                :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_REORDER_POINT' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_POINT                 :=  V_ROW_VALUE;
                WHEN 'DEP_BAG_TYPE' THEN
                    V_TEMP_ROW.DEP_BAG_TYPE                          :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'DEP_BAG_REORDER_SWITCH' THEN
                    V_TEMP_ROW.DEP_BAG_REORDER_SWITCH                :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BNK_DEP_BAG_TIK_HST_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BNK_DEP_BAG_TIK_HST_ROWTYPE_SP;

PROCEDURE BANK_ACCOUNT_FUTURE_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_ACCOUNT_FUTURE record type

Created : 04/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_ACCOUNT_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'BANK_NAME' THEN
                    V_TEMP_ROW.BANK_NAME                             :=  V_ROW_VALUE;
                WHEN 'BOOK_KEEPER_NBR' THEN
                    V_TEMP_ROW.BOOK_KEEPER_NBR                       :=  V_ROW_VALUE;
                WHEN 'STATEMENT_TYPE' THEN
                    V_TEMP_ROW.STATEMENT_TYPE                        :=  V_ROW_VALUE;
                WHEN 'BANK_AUTO_RECON_IND' THEN
                    V_TEMP_ROW.BANK_AUTO_RECON_IND                   :=  V_ROW_VALUE;
                WHEN 'RECON_START_DATE' THEN
                    V_TEMP_ROW.RECON_START_DATE                      :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'RECON_BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.RECON_BANK_ACCOUNT_NBR                :=  V_ROW_VALUE;
                WHEN 'JV_BOOK_KEEPER_REF' THEN
                    V_TEMP_ROW.JV_BOOK_KEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'JV_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.JV_BANK_SHORT_NAME                    :=  V_ROW_VALUE;
                WHEN 'IDI_BOOKKEEPER_REF' THEN
                    V_TEMP_ROW.IDI_BOOKKEEPER_REF                    :=  V_ROW_VALUE;
                WHEN 'IDI_BANK_SHORT_NAME' THEN
                    V_TEMP_ROW.IDI_BANK_SHORT_NAME                   :=  V_ROW_VALUE;
                WHEN 'ROUTING_NBR' THEN
                    V_TEMP_ROW.ROUTING_NBR                           :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_ACCOUNT_FUTURE_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_ACCOUNT_FUTURE_ROWTYPE_SP;

PROCEDURE BANK_MICR_FRMT_FTR_ROWTYPE_SP (
/*******************************************************************************
	This procedure is intended to build the BANK_MICR_FORMAT_FUTURE record type

Created : 04/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME  IN     VARCHAR2
,IN_ROW_DATA   IN     CLOB
,OUT_ROW_TYPE     OUT BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

CURSOR TABLE_FIELDS_CUR IS
    SELECT COLUMN_NAME
           ,DATA_LENGTH COLUMN_SIZE
           ,DATA_TYPE
      FROM ALL_TAB_COLUMNS
     WHERE TABLE_NAME = IN_TABLE_NAME
     ORDER BY COLUMN_ID ASC;

    V_TEMP_ROW         BANK_MICR_FORMAT_FUTURE%ROWTYPE;
    V_ROW_VALUE        VARCHAR2(500);
    V_ROW_DATA         SYS.XMLTYPE := XMLTYPE(IN_ROW_DATA);
BEGIN
    FOR TABLE_FIELDS_REC IN TABLE_FIELDS_CUR LOOP
        IF (V_ROW_DATA.EXISTSNODE('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()') = 1) THEN
            V_ROW_VALUE := V_ROW_DATA.EXTRACT('/'|| IN_TABLE_NAME|| '/' || TABLE_FIELDS_REC.COLUMN_NAME ||'/text()').GETSTRINGVAL(); 
            V_ROW_VALUE := CCN_COMMON_TOOLS.ELIMINATE_SPECIAL_CHRCTRS(V_ROW_VALUE);
            CASE TABLE_FIELDS_REC.COLUMN_NAME
                WHEN 'BANK_ACCOUNT_NBR' THEN
                    V_TEMP_ROW.BANK_ACCOUNT_NBR                      :=  V_ROW_VALUE;
                WHEN 'FORMAT_NAME' THEN
                    V_TEMP_ROW.FORMAT_NAME                           :=  V_ROW_VALUE;
                WHEN 'DJDE_FORM_PARM' THEN
                    V_TEMP_ROW.DJDE_FORM_PARM                        :=  V_ROW_VALUE;
                WHEN 'DJDE_FEED_PARM' THEN
                    V_TEMP_ROW.DJDE_FEED_PARM                        :=  V_ROW_VALUE;
                WHEN 'MICR_COST_CNTR' THEN
                    V_TEMP_ROW.MICR_COST_CNTR                        :=  V_ROW_VALUE;
                WHEN 'MICR_ROUTING_NBR' THEN
                    V_TEMP_ROW.MICR_ROUTING_NBR                      :=  V_ROW_VALUE;
                WHEN 'MICR_FORMAT_ACTNBR' THEN
                    V_TEMP_ROW.MICR_FORMAT_ACTNBR                    :=  V_ROW_VALUE;
                WHEN 'REORDER_POINT' THEN
                    V_TEMP_ROW.REORDER_POINT                         :=  V_ROW_VALUE;
                WHEN 'REORDER_NUMBER_BKS' THEN
                    V_TEMP_ROW.REORDER_NUMBER_BKS                    :=  V_ROW_VALUE;
                WHEN 'IMAGES_PER_PAGE' THEN
                    V_TEMP_ROW.IMAGES_PER_PAGE                       :=  V_ROW_VALUE;
                WHEN 'NBR_FORMS_PER_BK' THEN
                    V_TEMP_ROW.NBR_FORMS_PER_BK                      :=  V_ROW_VALUE;
                WHEN 'PART_PAPER_PER_FORM' THEN
                    V_TEMP_ROW.PART_PAPER_PER_FORM                   :=  V_ROW_VALUE;
                WHEN 'NBR_DEP_TICKETS_PER_BK' THEN
                    V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK                :=  V_ROW_VALUE;
                WHEN 'SHEETS_OF_PAPER_PER_BK' THEN
                    V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK                :=  V_ROW_VALUE;
                WHEN 'EFFECTIVE_DATE' THEN
                    V_TEMP_ROW.EFFECTIVE_DATE                        :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'EXPIRATION_DATE' THEN
                    V_TEMP_ROW.EXPIRATION_DATE                       :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINTENANCE_DATE' THEN
                    V_TEMP_ROW.LAST_MAINTENANCE_DATE                 :=  TO_DATE(V_ROW_VALUE,'MM-DD-YYYY');
                WHEN 'LAST_MAINT_USER_ID' THEN
                    V_TEMP_ROW.LAST_MAINT_USER_ID                    :=  V_ROW_VALUE;
                WHEN 'FUTURE_ID' THEN
                    V_TEMP_ROW.FUTURE_ID                             :=  V_ROW_VALUE;
                ELSE NULL;
            END CASE;
        END IF;
    END LOOP;
    OUT_ROW_TYPE  := V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_MICR_FRMT_FTR_ROWTYPE_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_MICR_FRMT_FTR_ROWTYPE_SP;

---------------------------INSERT PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_ACCOUNT_HIST table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_ACCOUNT%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    INSERT INTO BANK_ACCOUNT_HIST VALUES (
              IN_ROW.BANK_ACCOUNT_NBR
              ,IN_ROW.EFFECTIVE_DATE
              ,NVL(IN_ROW.EXPIRATION_DATE, TRUNC(SYSDATE))
              ,IN_ROW.BANK_NAME
              ,IN_ROW.BOOK_KEEPER_NBR
              ,IN_ROW.STATEMENT_TYPE
              ,IN_ROW.BANK_AUTO_RECON_IND
              ,IN_ROW.RECON_START_DATE
              ,IN_ROW.RECON_BANK_ACCOUNT_NBR
              ,IN_ROW.JV_BOOK_KEEPER_REF
              ,IN_ROW.JV_BANK_SHORT_NAME
              ,IN_ROW.IDI_BOOKKEEPER_REF
              ,IN_ROW.IDI_BANK_SHORT_NAME
              ,IN_ROW.ROUTING_NBR
              ,TRUNC(SYSDATE)
              ,IN_USER_ID);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_HIST_I_SP;

PROCEDURE BANK_ACCOUNT_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_ACCOUNT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_ACCOUNT VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_ACCOUNT_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_I_SP;

PROCEDURE BANK_DEP_TICK_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICK table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICK%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_TICK VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_TICK_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_I_SP;

PROCEDURE BANK_DEP_TICK_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_DEP_TICK_HIST table

Created : 03/24/2015 SXT410 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_TICK%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    INSERT INTO BANK_DEP_TICK_HIST VALUES (
                IN_ROW.BANK_ACCOUNT_NBR
                ,IN_ROW.COST_CENTER_CODE
                ,IN_ROW.DAILY_USE_ACTUAL
                ,IN_ROW.DAILY_USE_OVERRIDE
                ,IN_ROW.DEP_TKTS_ONHAND_QTY
                ,IN_ROW.YTD_DEP_TKTS_ORDERED_QTY
                ,IN_ROW.DJDE_FORM_PARM
                ,IN_ROW.DJDE_FEED_PARM
                ,IN_ROW.MICR_COST_CNTR
                ,IN_ROW.MICR_ROUTING_NBR
                ,IN_ROW.MICR_FORMAT_ACCT_NBR
                ,IN_ROW.REORDER_POINT
                ,IN_ROW.REORDER_NUMBER_BKS
                ,IN_ROW.IMAGES_PER_PAGE
                ,IN_ROW.NBR_FORMS_PER_BK
                ,IN_ROW.PART_PAPER_PER_FORM
                ,IN_ROW.NBR_DEP_TICKETS_PER_BK
                ,IN_ROW.SHEETS_OF_PAPER_PER_BK
                ,IN_ROW.FORMAT_NAME
                ,IN_ROW.EFFECTIVE_DATE
                ,NVL(IN_ROW.EXPIRATION_DATE, TRUNC(SYSDATE))
                ,IN_ROW.LAST_MAINTENANCE_DATE
                ,IN_ROW.LAST_MAINT_USER_ID
                ,IN_ROW.REORDER_SWITCH
                ,IN_ROW.LAST_VW_ORDER_DATE);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_HIST_I_SP;

PROCEDURE BANK_MICR_FORMAT_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_MICR_FORMAT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_MICR_FORMAT VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_MICR_FORMAT_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_I_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into LEAD_BANK_CC_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO LEAD_BANK_CC_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        LEAD_BANK_CC_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_FUTURE_I_SP;

PROCEDURE LEAD_BANK_CC_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into LEAD_BANK_CC_HIST table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     LEAD_BANK_CC%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    INSERT INTO LEAD_BANK_CC_HIST VALUES (
              IN_ROW.BANK_ACCOUNT_NBR
              ,IN_ROW.COST_CENTER_CODE
              ,IN_ROW.EFFECTIVE_DATE
              ,NVL(IN_ROW.EXPIRATION_DATE, TRUNC(SYSDATE))
              ,IN_ROW.BANK_BRANCH_NBR
              ,IN_ROW.BANK_TYPE_CODE
              ,TRUNC(SYSDATE)
              ,IN_USER_ID);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_HIST_I_SP;

PROCEDURE LEAD_BANK_CC_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into LEAD_BANK_CC table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC%ROWTYPE)
IS
BEGIN
    INSERT INTO LEAD_BANK_CC VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        LEAD_BANK_CC_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_I_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_I_SP;

PROCEDURE MEMBER_BANK_CC_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into MEMBER_BANK_CC_FUTURE table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO MEMBER_BANK_CC_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        MEMBER_BANK_CC_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_FUTURE_I_SP;

PROCEDURE MEMBER_BANK_CC_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into MEMBER_BANK_CC_HIST table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     MEMBER_BANK_CC%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    INSERT INTO MEMBER_BANK_CC_HIST VALUES (
              IN_ROW.BANK_ACCOUNT_NUMBER
              ,IN_ROW.LEAD_STORE_NBR
              ,IN_ROW.MEMBER_STORE_NBR
              ,IN_ROW.EFFECTIVE_DATE
              ,NVL(IN_ROW.EXPIRATION_DATE, TRUNC(SYSDATE))
              ,IN_ROW.BANK_BRANCH_NBR
              ,TRUNC(SYSDATE)
              ,IN_USER_ID);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_HIST_I_SP;

PROCEDURE MEMBER_BANK_CC_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into MEMBER_BANK_CC table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC%ROWTYPE)
IS
BEGIN
    INSERT INTO MEMBER_BANK_CC VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        MEMBER_BANK_CC_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_I_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_I_SP;

PROCEDURE BANK_DEP_BAG_TICK_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into BANK_DEP_BAG_TICK table

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW  IN   BANK_DEP_BAG_TICK%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_DEP_BAG_TICK VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_DEP_BAG_TICK_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_I_SP;

PROCEDURE BANK_DEP_BAG_TICK_HIST_I_SP (
/*******************************************************************************
	This procedure is intended to insert records into BANK_DEP_BAG_TICK_HIST table

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_DEP_BAG_TICK%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    INSERT INTO BANK_DEP_BAG_TICK_HIST VALUES (
                IN_ROW.BANK_ACCOUNT_NBR
                ,IN_ROW.COST_CENTER_CODE
                ,IN_ROW.DEPBAG_DAILY_USE_ACTUAL
                ,IN_ROW.DEPBAG_DLY_USE_OVERRIDE
                ,IN_ROW.DEPBAG_LAST_ORDER_DATE
                ,IN_ROW.DEPBAG_LAST_ORDER_QTY
                ,IN_ROW.DEPBAG_ONHAND_QTY
                ,IN_ROW.DEPBAG_REORDER_QTY
                ,IN_ROW.DEPBAG_YTD_ORDERED_QTY
                ,IN_ROW.DEP_BAG_REORDER_POINT
                ,IN_ROW.DEP_BAG_TYPE
                ,IN_ROW.DEP_BAG_REORDER_SWITCH
                ,IN_ROW.EFFECTIVE_DATE
                ,NVL(IN_ROW.EXPIRATION_DATE, TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_HIST_I_SP;

PROCEDURE BANK_MICR_FORMAT_HIST_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_MICR_FORMAT_HIST table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_MICR_FORMAT%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    INSERT INTO BANK_MICR_FORMAT_HIST VALUES (
              IN_ROW.BANK_ACCOUNT_NBR
              ,IN_ROW.FORMAT_NAME
              ,IN_ROW.DJDE_FORM_PARM
              ,IN_ROW.DJDE_FEED_PARM
              ,IN_ROW.MICR_COST_CNTR
              ,IN_ROW.MICR_ROUTING_NBR
              ,IN_ROW.MICR_FORMAT_ACTNBR
              ,IN_ROW.REORDER_POINT
              ,IN_ROW.REORDER_NUMBER_BKS
              ,IN_ROW.IMAGES_PER_PAGE
              ,IN_ROW.NBR_FORMS_PER_BK
              ,IN_ROW.PART_PAPER_PER_FORM
              ,IN_ROW.NBR_DEP_TICKETS_PER_BK
              ,IN_ROW.SHEETS_OF_PAPER_PER_BK
              ,IN_ROW.EFFECTIVE_DATE
              ,NVL(IN_ROW.EXPIRATION_DATE, TRUNC(SYSDATE))
              ,IN_ROW.LAST_MAINTENANCE_DATE
              ,IN_ROW.LAST_MAINT_USER_ID
              ,TRUNC(SYSDATE)
              ,IN_USER_ID);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_HIST_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_HIST_I_SP;

PROCEDURE BANK_ACCOUNT_FUTURE_I_SP (
/*******************************************************************************
    This procedure is intended to insert records into BANK_ACCOUNT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_ACCOUNT_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_ACCOUNT_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_FUTURE_I_SP;

PROCEDURE BANK_MICR_FORMAT_FUTURE_I_SP(
/*******************************************************************************
    This procedure is intended to insert records into BANK_MICR_FORMAT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    INSERT INTO BANK_MICR_FORMAT_FUTURE VALUES IN_ROW;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        BANK_MICR_FORMAT_FUTURE_U_SP(IN_ROW);
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_FUTURE_I_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_FUTURE_I_SP;

---------------------------UPDATE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_ACCOUNT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT%ROWTYPE)
IS
BEGIN
    UPDATE BANK_ACCOUNT
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_U_SP;

PROCEDURE BANK_DEP_TICK_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICK table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_DEP_TICK%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_TICK
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')  = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(COST_CENTER_CODE,'XXX')  = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_DEP_TICK_U_SP;

PROCEDURE BANK_DEP_TICKOAK_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICKOAK table

Created : 03/19/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       BANK_DEP_TICKOAK%ROWTYPE;
BEGIN
    BANK_DEP_TICKOAK_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
        UPDATE BANK_DEP_TICKOAK
           SET ROW = V_TEMP_ROW;
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKOAK_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKOAK_U_SP;

PROCEDURE BANK_DEP_TICKORD_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_DEP_TICKORD table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       BANK_DEP_TICKORD%ROWTYPE;
BEGIN
    BANK_DEP_TICKORD_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
        UPDATE BANK_DEP_TICKORD
           SET ROW = V_TEMP_ROW
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX')                 = NVL(V_TEMP_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE))          = NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKORD_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKORD_U_SP;

PROCEDURE BANK_MICR_FORMAT_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_MICR_FORMAT table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT%ROWTYPE)
IS
BEGIN
    UPDATE BANK_MICR_FORMAT
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(FORMAT_NAME,'XXX')             = NVL(IN_ROW.FORMAT_NAME,NVL(FORMAT_NAME,'XXX'))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_U_SP;

PROCEDURE BANK_PRCCNTR_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_PRCCNTR table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       BANK_PRCCNTR%ROWTYPE;
BEGIN
    BANK_PRCCNTR_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
        UPDATE BANK_PRCCNTR
           SET ROW = V_TEMP_ROW
         WHERE NVL(PRICE_DIST_NBR,'XXX')                   = NVL(V_TEMP_ROW.PRICE_DIST_NBR,NVL(PRICE_DIST_NBR,'XXX'))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE))          = NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCCNTR_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCCNTR_U_SP;

PROCEDURE BANK_PRCDIST_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_PRCDIST table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       BANK_PRCDIST%ROWTYPE;
BEGIN
    BANK_PRCDIST_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);
        UPDATE BANK_PRCDIST
           SET ROW = V_TEMP_ROW
         WHERE NVL(PRICE_DIST_NBR,'XXX')                   = NVL(V_TEMP_ROW.PRICE_DIST_NBR,NVL(PRICE_DIST_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_PRCDIST_U_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_PRCDIST_U_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in LEAD_BANK_CC_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE LEAD_BANK_CC_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(COST_CENTER_CODE,'XXX') = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_FUTURE_U_SP;

PROCEDURE LEAD_BANK_CC_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in LEAD_BANK_CC table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC%ROWTYPE)
IS
BEGIN
    UPDATE LEAD_BANK_CC
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(COST_CENTER_CODE,'XXX')        = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_U_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_U_SP;

PROCEDURE MEMBER_BANK_CC_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in MEMBER_BANK_CC_FUTURE table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE MEMBER_BANK_CC_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(LEAD_STORE_NBR,'XXX')          = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX')        = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
       AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));      
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_FUTURE_U_SP;

PROCEDURE MEMBER_BANK_CC_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in MEMBER_BANK_CC table

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC%ROWTYPE)
IS
BEGIN
    UPDATE MEMBER_BANK_CC
       SET ROW = IN_ROW
     WHERE NVL(LEAD_STORE_NBR,'XXX')   = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
       AND NVL(MEMBER_STORE_NBR,'XXX') = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'));       
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_U_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_U_SP;

PROCEDURE BANK_DEP_BAG_TICK_U_SP (
/*******************************************************************************
	This procedure is intended to updates records in BANK_DEP_BAG_TICK table

Created : 04/08/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW  IN   BANK_DEP_BAG_TICK%ROWTYPE)
IS
BEGIN
    UPDATE BANK_DEP_BAG_TICK
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')  = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(COST_CENTER_CODE,'XXX')  = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_BAG_TICK_U_SP',SUBSTR(SQLERRM,1,500));
END BANK_DEP_BAG_TICK_U_SP;

PROCEDURE BANK_ACCOUNT_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_ACCOUNT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_ACCOUNT_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_FUTURE_U_SP;

PROCEDURE BANK_MICR_FORMAT_FUTURE_U_SP (
/*******************************************************************************
    This procedure is intended to updates records in BANK_MICR_FORMAT_FUTURE table

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_MICR_FORMAT_FUTURE
       SET ROW = IN_ROW
     WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
       AND NVL(FORMAT_NAME,'XXX')             = NVL(IN_ROW.FORMAT_NAME,NVL(FORMAT_NAME,'XXX'))
       AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
       AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_FUTURE_U_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_FUTURE_U_SP;


---------------------------DELETE PROCEDURES----------------------------
PROCEDURE BANK_ACCOUNT_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_ACCOUNT table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    BANK_ACCOUNT_HIST_I_SP(IN_ROW, IN_USER_ID);
    DELETE
      FROM BANK_ACCOUNT
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_D_SP;

PROCEDURE BANK_DEP_TICKORD_D_SP (
/*******************************************************************************
    This procedure is intended to delete records from BANK_DEP_TICKORD table

Created : 03/12/2015 nxk927 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB)
IS
    V_CODE NUMBER;
    V_ERRM VARCHAR2(500);

    V_TEMP_ROW       BANK_DEP_TICKORD%ROWTYPE;
BEGIN
    BANK_DEP_TICKORD_ROWTYPE_SP(IN_TABLE_NAME,
                            IN_ROW_DATA,
                            V_TEMP_ROW);

    DELETE
      FROM BANK_DEP_TICKORD
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX')                 = NVL(V_TEMP_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(COST_CENTER_CODE,'XXX')                 = NVL(V_TEMP_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE))          = NVL(V_TEMP_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        V_CODE  := SQLCODE;
        V_ERRM  := SUBSTR(SQLERRM,1,200);
        ERRPKG.RAISE_ERR(V_CODE, 'BANK_DEP_TICKORD_D_SP, ' || ' ' || 'IN_TABLE_NAME IS ' || IN_TABLE_NAME, V_ERRM);
END BANK_DEP_TICKORD_D_SP;

PROCEDURE BANK_MICR_FORMAT_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_MICR_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     BANK_MICR_FORMAT%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    BANK_MICR_FORMAT_HIST_I_SP(IN_ROW, IN_USER_ID);
    DELETE
      FROM BANK_MICR_FORMAT
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(FORMAT_NAME,'XXX')             = NVL(IN_ROW.FORMAT_NAME,NVL(FORMAT_NAME,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_D_SP;

PROCEDURE LEAD_BANK_CC_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from LEAD_BANK_CC table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     LEAD_BANK_CC%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    LEAD_BANK_CC_HIST_I_SP(IN_ROW, IN_USER_ID);
    DELETE
      FROM LEAD_BANK_CC
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(COST_CENTER_CODE,'XXX')        = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_D_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_D_SP;

PROCEDURE LEAD_BANK_CC_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from LEAD_BANK_CC_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM LEAD_BANK_CC_FUTURE
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(COST_CENTER_CODE,'XXX')        = NVL(IN_ROW.COST_CENTER_CODE,NVL(COST_CENTER_CODE,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
           AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_BANK_CC_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END LEAD_BANK_CC_FUTURE_D_SP;

PROCEDURE MEMBER_BANK_CC_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from MEMBER_BANK_CC table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW     IN     MEMBER_BANK_CC%ROWTYPE,
IN_USER_ID IN     VARCHAR2)
IS
BEGIN
    MEMBER_BANK_CC_HIST_I_SP(IN_ROW, IN_USER_ID);
    DELETE
      FROM MEMBER_BANK_CC
         WHERE NVL(LEAD_STORE_NBR,'XXX')          = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
           AND NVL(MEMBER_STORE_NBR,'XXX')        = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_D_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_D_SP;

PROCEDURE MEMBER_BANK_CC_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from MEMBER_BANK_CC_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM MEMBER_BANK_CC_FUTURE
         WHERE NVL(LEAD_STORE_NBR,'XXX')          = NVL(IN_ROW.LEAD_STORE_NBR,NVL(LEAD_STORE_NBR,'XXX'))
           AND NVL(MEMBER_STORE_NBR,'XXX')        = NVL(IN_ROW.MEMBER_STORE_NBR,NVL(MEMBER_STORE_NBR,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
           AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_BANK_CC_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END MEMBER_BANK_CC_FUTURE_D_SP;

PROCEDURE BANK_ACCOUNT_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_ACCOUNT_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM BANK_ACCOUNT_FUTURE
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX') = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(FUTURE_ID,-1)           = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_ACCOUNT_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_ACCOUNT_FUTURE_D_SP;

PROCEDURE BANK_MICR_FORMAT_FUTURE_D_SP (
/*******************************************************************************
	This procedure is intended to delete records from BANK_MICR_FORMAT_FUTURE table

Created : 07/13/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    DELETE
      FROM BANK_MICR_FORMAT_FUTURE
         WHERE NVL(BANK_ACCOUNT_NBR,'XXX')        = NVL(IN_ROW.BANK_ACCOUNT_NBR,NVL(BANK_ACCOUNT_NBR,'XXX'))
           AND NVL(FORMAT_NAME,'XXX')             = NVL(IN_ROW.FORMAT_NAME,NVL(FORMAT_NAME,'XXX'))
           AND NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)) = NVL(IN_ROW.EFFECTIVE_DATE,NVL(EFFECTIVE_DATE,TRUNC(SYSDATE)))
           AND NVL(FUTURE_ID,-1)                  = NVL(IN_ROW.FUTURE_ID,NVL(FUTURE_ID,-1));
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_MICR_FORMAT_FUTURE_D_SP', SUBSTR(SQLERRM,1,500));
END BANK_MICR_FORMAT_FUTURE_D_SP;


---------------------------EXPIRE PROCEDURES----------------------------

PROCEDURE EXPIRE_PREV_BANK_ACCOUNT(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_ACCOUNT_FUTURE
       SET EXPIRATION_DATE  = IN_ROW.EFFECTIVE_DATE - 1
     WHERE BANK_ACCOUNT_NBR = IN_ROW.BANK_ACCOUNT_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;

    UPDATE BANK_ACCOUNT
       SET EXPIRATION_DATE  = IN_ROW.EFFECTIVE_DATE - 1
     WHERE BANK_ACCOUNT_NBR = IN_ROW.BANK_ACCOUNT_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_BANK_ACCOUNT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_BANK_ACCOUNT;

PROCEDURE EXPIRE_PREV_LEAD_BANK_CC(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     LEAD_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE LEAD_BANK_CC_FUTURE
       SET EXPIRATION_DATE  = IN_ROW.EFFECTIVE_DATE - 1 
     WHERE BANK_ACCOUNT_NBR = IN_ROW.BANK_ACCOUNT_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;

    UPDATE LEAD_BANK_CC
       SET EXPIRATION_DATE = IN_ROW.EFFECTIVE_DATE - 1
     WHERE BANK_ACCOUNT_NBR = IN_ROW.BANK_ACCOUNT_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_LEAD_BANK_CC', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_LEAD_BANK_CC;

PROCEDURE EXPIRE_PREV_BANK_MICR_FORMAT(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     BANK_MICR_FORMAT_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE BANK_MICR_FORMAT_FUTURE
       SET EXPIRATION_DATE  = IN_ROW.EFFECTIVE_DATE - 1
     WHERE BANK_ACCOUNT_NBR = IN_ROW.BANK_ACCOUNT_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;

    UPDATE BANK_MICR_FORMAT
       SET EXPIRATION_DATE  = IN_ROW.EFFECTIVE_DATE - 1
     WHERE BANK_ACCOUNT_NBR = IN_ROW.BANK_ACCOUNT_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_BANK_MICR_FORMAT', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_BANK_MICR_FORMAT;

PROCEDURE EXPIRE_PREV_MEMBER_BANK_CC(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
BEGIN
    UPDATE MEMBER_BANK_CC_FUTURE
       SET EXPIRATION_DATE  = IN_ROW.EFFECTIVE_DATE - 1 
     WHERE MEMBER_STORE_NBR = IN_ROW.MEMBER_STORE_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;

    UPDATE MEMBER_BANK_CC
       SET EXPIRATION_DATE = IN_ROW.EFFECTIVE_DATE - 1
     WHERE MEMBER_STORE_NBR = IN_ROW.MEMBER_STORE_NBR
       AND EFFECTIVE_DATE   < IN_ROW.EFFECTIVE_DATE
       AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'EXPIRE_PREV_MEMBER_BANK_CC', SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_MEMBER_BANK_CC;

END TABLE_IU_PKG;

