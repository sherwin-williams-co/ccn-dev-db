create or replace PACKAGE BODY         DEPOSIT_BAG_MAINTENANCE_PKG AS
/**********************************************************
This Package contains all the procedures used in
deposit bag update maintenance window

Created : 07/15/2015 axk326/jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE DELETE_DEPOSIT_BAG_DTLS(
/*******************************************************************************
This procedure is intended to get the BANK_DEP_BAG_TICK record
and delete it from the table

Created : 10/19/2015 jxc517 CCN Project....
Changed : 11/16/2015 nxk927 CCN Project....
          passing bank account number and calling the delete for order before the ticket
Changed : 11/18/2015 nxk927 CCN Project....          
          changed the name of record type
*******************************************************************************/
IN_COST_CENTER_CODE     IN    VARCHAR2,
IN_BANK_ACCOUNT_NBR     IN    VARCHAR2)
IS
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
           
    CURSOR bank_dep_bag_tickord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
BEGIN
    FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
        FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur LOOP
            TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_D_SP(bank_dep_bag_tickord_rec);
        END LOOP;
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(bank_dep_bag_tick_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END DELETE_DEPOSIT_BAG_DTLS;

PROCEDURE EXPIRE_DEPOSIT_BAG_DTLS(
/*******************************************************************************
This procedure is intended to get the BANK_DEP_BAG_TICK record
and expire it from the table

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/12/2015 nxk927 CCN Project....
          passing bank account number as parameter as well and calling the delete for order before the ticket
Changed : 11/18/2015 nxk927 CCN Project....          
          changed the name of record type        
*******************************************************************************/
IN_COST_CENTER_CODE     IN    VARCHAR2,
IN_BANK_ACT_NBR         IN    VARCHAR2,
IN_EXPIRATION_DATE      IN    DATE)
IS
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACT_NBR
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_dep_bag_tickord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACT_NBR
           AND EXPIRATION_DATE IS NULL;
BEGIN
   
   FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
       FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur LOOP
           bank_dep_bag_tickord_rec.EXPIRATION_DATE := IN_EXPIRATION_DATE;
           TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tickord_rec);
       END LOOP;
       bank_dep_bag_tick_rec.EXPIRATION_DATE := IN_EXPIRATION_DATE;
       TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
   END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END EXPIRE_DEPOSIT_BAG_DTLS;

PROCEDURE EXPR_DEPOSIT_BAG_DTLS_FTR(
/*******************************************************************************
This procedure is intended to get the BANK_DEP_BAG_TICK_FUTURE record
and expire it from the table

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/12/2015 nxk927 CCN Project....
           passing bank account number as parameter
Changed : 11/18/2015 nxk927 CCN Project....          
          changed the name of record type                  
*******************************************************************************/
IN_COST_CENTER_CODE     IN    VARCHAR2,
IN_BANK_ACT_NBR         IN    VARCHAR2,
IN_FUTURE_ID            IN    NUMBER,
IN_EXPIRATION_DATE      IN    DATE)
IS
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACT_NBR
           AND FUTURE_ID        = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_dep_bag_tickord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACT_NBR
           AND FUTURE_ID        = IN_FUTURE_ID
           AND EXPIRATION_DATE IS NULL;
BEGIN
    FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
        FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur LOOP
            bank_dep_bag_tickord_rec.EXPIRATION_DATE := IN_EXPIRATION_DATE;
            TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_I_SP(bank_dep_bag_tickord_rec);
        END LOOP; 
        bank_dep_bag_tick_rec.EXPIRATION_DATE := IN_EXPIRATION_DATE;
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(bank_dep_bag_tick_rec);
    END LOOP;
    
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END EXPR_DEPOSIT_BAG_DTLS_FTR;

PROCEDURE BANK_DEP_BAG_TICK_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from BANK_DEP_BAG_TICK table

Inputs:
    IN_COST_CENTER_CODE

Created : 07/15/2015 axk326/jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Added code to support future tables
Changed : 10/22/2015 sxt410 CCN Project....
          Modified Signature To Pass Current Order Date And Future Order Date. 
Changed : 11/16/2015 nxk927 CCN Project....
          Modified the call to bring the current record 
*******************************************************************************/
IN_COST_CENTER_CODE               IN     VARCHAR2
,OUT_BANK_DEP_BAG_TICK_CUR           OUT REF_CURSOR
,OUT_BANK_DEP_BAG_TICK_FTR_CUR       OUT REF_CURSOR
,OUT_BANK_DEP_BAG_TICKORD_CUR        OUT REF_CURSOR
,OUT_BANK_DEP_BAG_TKORD_FTR_CUR      OUT REF_CURSOR)
IS
BEGIN
    OPEN OUT_BANK_DEP_BAG_TICK_CUR FOR
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
           AND TRUNC(EFFECTIVE_DATE) <= TRUNC(SYSDATE);
    OPEN OUT_BANK_DEP_BAG_TICK_FTR_CUR FOR
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
         ORDER BY FUTURE_ID;

    OPEN OUT_BANK_DEP_BAG_TICKORD_CUR FOR
        SELECT *
          FROM BANK_DEP_BAG_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = (SELECT BANK_ACCOUNT_NBR
                                     FROM BANK_DEP_BAG_TICK
                                    WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                                      AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
                                      AND TRUNC(EFFECTIVE_DATE) <= TRUNC(SYSDATE));

    OPEN OUT_BANK_DEP_BAG_TKORD_FTR_CUR FOR
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
END BANK_DEP_BAG_TICK_UI_SP;

PROCEDURE BUILD_TABLE_TYPES(
/******************************************************************************
This procedure is intended to build all the table types from input xml
for this process

Created : 07/17/2015 axk326/jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Added code to support future tables
*******************************************************************************/
    IN_XML                         IN     CLOB,
    O_BANK_DEP_BAG_TICK_REC           OUT BANK_DEP_BAG_TICK%ROWTYPE,
    O_BANK_DEP_BAG_TICK_FUTURE_REC    OUT BANK_DEP_BAG_TICK_FUTURE%ROWTYPE)
IS
    V_XML_BANK_DEP_BAG_TICK_FRAG    CLOB;
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_XML);
BEGIN
    IF (V_ROW_DATA.EXISTSNODE('/BANK_DEP_BAG_TICK_UI/BANK_DEP_BAG_TICK') = 1) THEN --Single Record
        V_XML_BANK_DEP_BAG_TICK_FRAG := V_ROW_DATA.EXTRACT('/BANK_DEP_BAG_TICK_UI/BANK_DEP_BAG_TICK').GETCLOBVAL();
    END IF;
    IF V_XML_BANK_DEP_BAG_TICK_FRAG IS NOT NULL  THEN
        IF SYS.XMLTYPE(V_XML_BANK_DEP_BAG_TICK_FRAG).EXISTSNODE('/BANK_DEP_BAG_TICK/FUTURE_ID/text()') = 1 THEN
            TABLE_IU_PKG.BNK_DEP_BAG_TCK_FTR_ROWTYPE_SP('BANK_DEP_BAG_TICK_FUTURE',
                                                        REPLACE(V_XML_BANK_DEP_BAG_TICK_FRAG,'BANK_DEP_BAG_TICK>','BANK_DEP_BAG_TICK_FUTURE>'),
                                                        O_BANK_DEP_BAG_TICK_FUTURE_REC);
        ELSE
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_ROWTYPE_SP('BANK_DEP_BAG_TICK',
                                                       V_XML_BANK_DEP_BAG_TICK_FRAG,
                                                       O_BANK_DEP_BAG_TICK_REC);
        END IF;
    END IF;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_TABLE_TYPES ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_TABLE_TYPES;

PROCEDURE DEPOSIT_BAG_CURRENT_UPSERT_SP( 
/******************************************************************************
This procedure is intended to update following table used in the
Deposit Bag Maintenance Window that are current records
    Tables: 
       BANK_DEP_BAG_TICK

Created : 08/21/2015 jxc517 CCN Project....
Changed : 11/16/2015 nxk927 CCN Project....
          added bank account number in the condition
*******************************************************************************/
    IN_BANK_DEP_BAG_TICK_REC  IN     BANK_DEP_BAG_TICK%ROWTYPE)
IS
    V_BANK_DEP_BAG_TICK_HIST_REC     BANK_DEP_BAG_TICK%ROWTYPE;
    V_BANK_DEP_BAG_TICK_REC          BANK_DEP_BAG_TICK%ROWTYPE := IN_BANK_DEP_BAG_TICK_REC;    
    V_PROC_NAME                      VARCHAR2(30) := 'DEPOSIT_BAG_CURRENT_UPSERT_SP';
BEGIN
    BEGIN
        SELECT *
          INTO V_BANK_DEP_BAG_TICK_HIST_REC
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = V_BANK_DEP_BAG_TICK_REC.COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = V_BANK_DEP_BAG_TICK_REC.BANK_ACCOUNT_NBR;
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_HIST_I_SP(V_BANK_DEP_BAG_TICK_HIST_REC);
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    V_BANK_DEP_BAG_TICK_REC.EFFECTIVE_DATE   := LEAST(NVL(V_BANK_DEP_BAG_TICK_REC.EXPIRATION_DATE, SYSDATE), SYSDATE);
    TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(V_BANK_DEP_BAG_TICK_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME || ' ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END DEPOSIT_BAG_CURRENT_UPSERT_SP;

PROCEDURE EXPIRE_PREV_CUR_DEP_BAG_DTLS(
/*******************************************************************************
    This procedure is intended to check and expire previous current deposit bag details records
    before inserting new record

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/16/2015 nxk927 CCN Project....
          pass the bank account number as a parameter
          calling the expire for order before the ticket (pushing the delete for order inside the bank_dep_bag_tick_cur loop)
        : 11/18/2015 nxk927 CCN Project....
          changing the name of record type
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2,
IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
IN_EFFECTIVE_DATE   IN     DATE)
IS
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE   = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR   = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE     <  IN_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_dep_bag_tickord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE   <  IN_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    V_PROC_NAME                VARCHAR2(30) := 'EXPIRE_PREV_CUR_DEP_BAG_DTLS';
    V_EXPIRE_DATE              DATE := IN_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
        FOR bank_dep_bag_tickord_rec IN bank_dep_bag_tickord_cur LOOP
            bank_dep_bag_tickord_rec.EXPIRATION_DATE := GREATEST(bank_dep_bag_tickord_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tickord_rec);
        END LOOP;
        bank_dep_bag_tick_rec.EXPIRATION_DATE := GREATEST(bank_dep_bag_tick_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME, SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_CUR_DEP_BAG_DTLS;

PROCEDURE EXPIRE_PREV_FTR_DEP_BAG_DTLS(
/*******************************************************************************
    This procedure is intended to check and expire previous future deposit bag details records
    before inserting new record

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/17/2015 nxk927 CCN Project.... 
          passed bank account number as parameter
          calling the expire for order before the ticket (pushing the delete for order inside the bank_dep_bag_tick_cur loop)
        : 11/18/2015 nxk927 CCN Project....
          changing the name of record type
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2,
IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
IN_EFFECTIVE_DATE   IN     DATE)
IS
    CURSOR bank_dep_bag_tick_future_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE  <  IN_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    CURSOR bank_dep_bag_tickord_ftr_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE  <  IN_EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    V_PROC_NAME                VARCHAR2(30) := 'EXPIRE_PREV_FTR_DEP_BAG_DTLS';
    V_EXPIRE_DATE              DATE := IN_EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR bank_dep_bag_tick_future_rec IN bank_dep_bag_tick_future_cur LOOP
        FOR bank_dep_bag_tickord_ftr_rec IN bank_dep_bag_tickord_ftr_cur LOOP
            bank_dep_bag_tickord_ftr_rec.EXPIRATION_DATE := GREATEST(bank_dep_bag_tickord_ftr_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
            TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_I_SP(bank_dep_bag_tickord_ftr_rec);
        END LOOP;
        bank_dep_bag_tick_future_rec.EXPIRATION_DATE := GREATEST(bank_dep_bag_tick_future_rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(bank_dep_bag_tick_future_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME, SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_FTR_DEP_BAG_DTLS;

PROCEDURE EXPIRE_PREVIOUS_DEP_BAG_DTLS(
/*******************************************************************************
    This procedure is intended to check and expire previous deposit bag details records
    before inserting new record

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/17/2015 nxk927 CCN Project.... 
          passed bank account number as parameter
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2,
IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
IN_EFFECTIVE_DATE   IN     DATE)
IS
    V_PROC_NAME                VARCHAR2(30) := 'EXPIRE_PREVIOUS_DEP_BAG_DTLS';
BEGIN
    EXPIRE_PREV_CUR_DEP_BAG_DTLS(IN_COST_CENTER_CODE,IN_BANK_ACCOUNT_NBR, IN_EFFECTIVE_DATE);
    EXPIRE_PREV_FTR_DEP_BAG_DTLS(IN_COST_CENTER_CODE, IN_BANK_ACCOUNT_NBR,IN_EFFECTIVE_DATE);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME, SUBSTR(SQLERRM,1,500));
END EXPIRE_PREVIOUS_DEP_BAG_DTLS;

PROCEDURE DEPOSIT_BAG_FUTURE_UPSERT_SP( 
/******************************************************************************
This procedure is intended to update following table used in the
Deposit Bag Maintenance Window that are future records
    Tables: 
       BANK_DEP_BAG_TICK

Created : 08/24/2015 jxc517 CCN Project....
Changed : 11/02/2015 nxk927 CCN Project.... 
          Future DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY to reset to 0
        :11/17/2015 nxk927 CCN Project.... 
         passed bank account number as parameter to EXPIRE_PREVIOUS_DEP_BAG_DTLS
*******************************************************************************/
    IN_BANK_DEP_BAG_TICK_FTR_REC IN     BANK_DEP_BAG_TICK_FUTURE%ROWTYPE)
IS
    V_BANK_DEP_BAG_TICK_FTR_REC    BANK_DEP_BAG_TICK_FUTURE%ROWTYPE := IN_BANK_DEP_BAG_TICK_FTR_REC;
    V_PROC_NAME                    VARCHAR2(30) := 'DEPOSIT_BAG_FUTURE_UPSERT_SP';
BEGIN
    EXPIRE_PREVIOUS_DEP_BAG_DTLS(V_BANK_DEP_BAG_TICK_FTR_REC.COST_CENTER_CODE,V_BANK_DEP_BAG_TICK_FTR_REC.BANK_ACCOUNT_NBR, V_BANK_DEP_BAG_TICK_FTR_REC.EFFECTIVE_DATE);
    --Future DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY to reset to 0
    V_BANK_DEP_BAG_TICK_FTR_REC.DEPBAG_ONHAND_QTY      := 0;
    V_BANK_DEP_BAG_TICK_FTR_REC.DEPBAG_YTD_ORDERED_QTY := 0;
    TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(V_BANK_DEP_BAG_TICK_FTR_REC);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME || ' ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END DEPOSIT_BAG_FUTURE_UPSERT_SP;

PROCEDURE DEPOSIT_BAG_UPDT_UI_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the Deposit Bag Update Window
    Tables: 
       BANK_DEP_BAG_TICK

Created : 07/15/2015 axk326/jxc517 CCN Project....
Changed : 08/13/2015 nxk927 CCN Project....
          removed trunc to take the time stamp
Changed : 10/20/2015 jxc517 CCN Project....
          Added code to support future tables
Changed : 11/06/2015 jxc517 CCN Project....
          Added code to get the bank account number for the store passed in
          if the new store has no bags we need to get the account number from lead/member bank cc tables
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
    V_BANK_DEP_BAG_TICK_REC         BANK_DEP_BAG_TICK%ROWTYPE;
    V_BANK_DEP_BAG_TICK_FTR_REC     BANK_DEP_BAG_TICK_FUTURE%ROWTYPE;
BEGIN
    BUILD_TABLE_TYPES(IN_ROW_DATA,
                      V_BANK_DEP_BAG_TICK_REC,
                      V_BANK_DEP_BAG_TICK_FTR_REC);
    V_BANK_DEP_BAG_TICK_REC.BANK_ACCOUNT_NBR := BANKING_COMMON_TOOLS.GET_BNK_ACCNT_NBR_FOR_CC(V_BANK_DEP_BAG_TICK_REC.COST_CENTER_CODE);
    BUSINESS_RULES_PKG.DEPOSIT_BAG_TICKET_MNTNC_BR_SP(V_BANK_DEP_BAG_TICK_REC,
                                                      V_BANK_DEP_BAG_TICK_FTR_REC);    
    IF V_BANK_DEP_BAG_TICK_REC.COST_CENTER_CODE IS NOT NULL THEN --Current Details
       DEPOSIT_BAG_CURRENT_UPSERT_SP(V_BANK_DEP_BAG_TICK_REC);
    END IF;
    IF V_BANK_DEP_BAG_TICK_FTR_REC.COST_CENTER_CODE IS NOT NULL THEN --Future Details
        DEPOSIT_BAG_FUTURE_UPSERT_SP(V_BANK_DEP_BAG_TICK_FTR_REC);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'DEPOSIT_BAG_UPDT_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END DEPOSIT_BAG_UPDT_UI_UPSERT_SP;

PROCEDURE INSERT_BANK_DEP_BAG_DTLS_FTR(
/*******************************************************************************
This procedure is intended to build the BANK_DEP_BAG_TICK_FUTURE records and insert the same

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/02/2015 nxk927 CCN Project....
          Future DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY to reset to 0
        : 11/16/2015 nxk927 CCN Project....
          get the current record not the virtual current
          and passing the bank account number
*******************************************************************************/
IN_COST_CENTER_CODE     IN    VARCHAR2,
IN_BANK_ACCOUNT_NBR     IN    VARCHAR2,
IN_FUTURE_ID            IN    NUMBER,
IN_EFFECTIVE_DATE       IN    DATE,
IN_EXPIRATION_DATE      IN    DATE)
IS
    V_BANK_DEP_BAG_FTR_PREV_REC   BANK_DEP_BAG_TICK_FUTURE%ROWTYPE;
    V_BANK_DEP_BAG_FUTURE_REC     BANK_DEP_BAG_TICK_FUTURE%ROWTYPE;
BEGIN
    BEGIN
        SELECT A.*,
               NULL FUTURE_ID
          INTO V_BANK_DEP_BAG_FTR_PREV_REC
          FROM BANK_DEP_BAG_TICK A
         WHERE COST_CENTER_CODE    = IN_COST_CENTER_CODE
           AND BANK_ACCOUNT_NBR    = IN_BANK_ACCOUNT_NBR;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    IF V_BANK_DEP_BAG_FTR_PREV_REC.COST_CENTER_CODE IS NOT NULL THEN
        V_BANK_DEP_BAG_FUTURE_REC                        := V_BANK_DEP_BAG_FTR_PREV_REC;
        V_BANK_DEP_BAG_FUTURE_REC.BANK_ACCOUNT_NBR       := IN_BANK_ACCOUNT_NBR;
        V_BANK_DEP_BAG_FUTURE_REC.EFFECTIVE_DATE         := IN_EFFECTIVE_DATE;
        V_BANK_DEP_BAG_FUTURE_REC.EXPIRATION_DATE        := IN_EXPIRATION_DATE;
        V_BANK_DEP_BAG_FUTURE_REC.FUTURE_ID              := IN_FUTURE_ID;
        --Future DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY to reset to 0
        V_BANK_DEP_BAG_FUTURE_REC.DEPBAG_ONHAND_QTY      := 0;
        V_BANK_DEP_BAG_FUTURE_REC.DEPBAG_YTD_ORDERED_QTY := 0;
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(V_BANK_DEP_BAG_FUTURE_REC);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END INSERT_BANK_DEP_BAG_DTLS_FTR;

FUNCTION GET_DEPOSIT_BAG_ORDER_SEQ_NBR(
/*******************************************************************************
This fucntion is intended to return the deposit bag ticket sequence for the cost center passed in

Created : 10/20/2015 jxc517 CCN Project....
Changed : 11/12/2015 nxk927 CCN Project....
          Added BANK_ACCOUNT_NUMBER
        : 11/16/2015 nxk927 CCN Project....
          passing the bank account number as parameter
*******************************************************************************/
IN_COST_CENTER_CODE    IN      VARCHAR2,
IN_BANK_ACCT_NBR       IN      VARCHAR2) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(10);
BEGIN
    SELECT MAX(DEPOSIT_BAG_ORDER_SEQ_NBR)
      INTO V_RETURN_VAL
      FROM (SELECT DEPOSIT_BAG_ORDER_SEQ_NBR
              FROM BANK_DEP_BAG_TICKORD_HIST
             WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCT_NBR
               AND COST_CENTER_CODE = IN_COST_CENTER_CODE
             UNION
            SELECT DEPOSIT_BAG_ORDER_SEQ_NBR
              FROM BANK_DEP_BAG_TICKORD
             WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCT_NBR
               AND COST_CENTER_CODE = IN_COST_CENTER_CODE
             UNION
            SELECT DEPOSIT_BAG_ORDER_SEQ_NBR
              FROM BANK_DEP_BAG_TICKORD_FUTURE
             WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCT_NBR
               AND COST_CENTER_CODE = IN_COST_CENTER_CODE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_DEPOSIT_BAG_ORDER_SEQ_NBR;

FUNCTION GET_DEPOSIT_BAG_FUT_ID_NBR(
/*******************************************************************************
This fucntion is intended to return the deposit bag ticket future id
for the cost center passed in

Created : 11/03/2015 nxk927 CCN Project....
Changed : 11/12/2015 nxk927 CCN Project....
          Added BANK_ACCOUNT_NUMBER
        : 11/16/2015 nxk927 CCN Project....
          passing the bank account number as parameter
*******************************************************************************/
IN_COST_CENTER_CODE    IN      VARCHAR2,
IN_BANK_ACCT_NBR       IN      VARCHAR2,
IN_FUTURE_ID           IN      NUMBER) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(10);
BEGIN
    IF IN_FUTURE_ID IS NULL THEN
       SELECT MAX(BANK_DEP_BAG_FTR_ID)
         INTO V_RETURN_VAL
         FROM BANK_DEP_BAG_TICKORD
        WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCT_NBR
          AND COST_CENTER_CODE = IN_COST_CENTER_CODE;
    ELSE
       SELECT MAX(BANK_DEP_BAG_FTR_ID)
         INTO V_RETURN_VAL
         FROM BANK_DEP_BAG_TICKORD_FUTURE
        WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCT_NBR
          AND COST_CENTER_CODE = IN_COST_CENTER_CODE
          AND FUTURE_ID        = IN_FUTURE_ID;
    END IF;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_DEPOSIT_BAG_FUT_ID_NBR;

PROCEDURE PLACE_DEPOSIT_BAG_TICKET_ORDER(
/*******************************************************************************
This procedure is intended to place a deposit bag ticket order for the store passed in

Created : 10/20/2015 jxc517 CCN Project....
Changed : 10/20/2015 sxt410 CCN Project....
          Changed Column Name From Extract_Date To Order_Date
Changed : 10/21/2015 jxc517 CCN Project....
          Added code to re-calculate the onhand, ytd deposit tickets
        : 10/21/2015 nxk927 CCN Project...
          Added call to create the deposit ticket bag order for future 
          Future DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY to reset to 0
        : 11/04/2015 nxk927 CCN Project...
          Added condition to not to update the on hand quantity if the date is not current
          Removed the business rule that was not allowing order to be placed in current if future is present
          ADDED to take the standard value from bank_dep_tickoak table if sent as null
        : 11/05/2015  nxk927 CCN Project...
          record should be only moved to history if there are changes in current or else the record should not be changed
          So moved  the DEPOSIT_BAG_CURRENT_UPSERT_SP call inside the if condition when there will be changes in current
          --removed the unwanted codes
        : 11/16/2015 nxk927 CCN Project...
          getting only current record
          passing bank account number to the function GET_DEPOSIT_BAG_ORDER_SEQ_NBR and GET_DEPOSIT_BAG_FUT_ID_NBR
        : 11/18/2015 nxk927 CCN Project...
          checking if we have virtual current while placing the order in future tab.
          if it has virtual current then replicating the same in the current table as well
          moving the file generation at the end of the process
*******************************************************************************/
IN_COST_CENTER_CODE     IN     VARCHAR2,
IN_ORDERED_DATE         IN     DATE,
IN_FUTURE_ID            IN     NUMBER,
IN_USER_ID              IN     VARCHAR2)
IS
    CURSOR bank_dep_bag_tickord_ftr_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        > NVL(IN_FUTURE_ID, 0);
    V_BANK_DEP_BAG_TICKORD                 BANK_DEP_BAG_TICKORD%ROWTYPE;
    V_BANK_DEP_BAG_TICKORD_FUTURE          BANK_DEP_BAG_TICKORD_FUTURE%ROWTYPE;
    V_BANK_DEP_BAG_TICK                    BANK_DEP_BAG_TICK%ROWTYPE;
    V_BANK_DEP_BAG_TICK_FUTURE             BANK_DEP_BAG_TICK_FUTURE%ROWTYPE;
    V_DEPBAG_REORDER_QTY                   BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY%TYPE;  
BEGIN
    IF IN_FUTURE_ID IS NULL THEN
        BEGIN
            SELECT *
              INTO V_BANK_DEP_BAG_TICK
              FROM BANK_DEP_BAG_TICK
             WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
               AND TRUNC(EFFECTIVE_DATE) <= TRUNC(SYSDATE);
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        IF V_BANK_DEP_BAG_TICK.COST_CENTER_CODE IS NOT NULL THEN
            V_BANK_DEP_BAG_TICKORD.BANK_ACCOUNT_NBR            := V_BANK_DEP_BAG_TICK.BANK_ACCOUNT_NBR;
            V_BANK_DEP_BAG_TICKORD.COST_CENTER_CODE            := V_BANK_DEP_BAG_TICK.COST_CENTER_CODE;
            V_BANK_DEP_BAG_TICKORD.BANK_DEP_BAG_FTR_ID         := NVL(GET_DEPOSIT_BAG_FUT_ID_NBR(V_BANK_DEP_BAG_TICK.COST_CENTER_CODE,V_BANK_DEP_BAG_TICK.BANK_ACCOUNT_NBR, IN_FUTURE_ID),0) + 1;
            V_BANK_DEP_BAG_TICKORD.DEPOSIT_BAG_ORDER_PRIORITY  := 100;
            V_BANK_DEP_BAG_TICKORD.DEPOSIT_BAG_ORDER_STATUS    := 'P';
            V_BANK_DEP_BAG_TICKORD.DEPOSIT_BAG_ORDER_SEQ_NBR   := NVL(GET_DEPOSIT_BAG_ORDER_SEQ_NBR(V_BANK_DEP_BAG_TICK.COST_CENTER_CODE,V_BANK_DEP_BAG_TICK.BANK_ACCOUNT_NBR),0) + 1; 
            V_BANK_DEP_BAG_TICKORD.EFFECTIVE_DATE              := V_BANK_DEP_BAG_TICK.EFFECTIVE_DATE;
            V_BANK_DEP_BAG_TICKORD.EXPIRATION_DATE             := V_BANK_DEP_BAG_TICK.EXPIRATION_DATE;
            V_BANK_DEP_BAG_TICKORD.LAST_MAINTENANCE_DATE       := TRUNC(SYSDATE);
            V_BANK_DEP_BAG_TICKORD.LAST_MAINT_USER_ID          := IN_USER_ID;
            V_BANK_DEP_BAG_TICKORD.ORDER_DATE                  := IN_ORDERED_DATE;
            V_BANK_DEP_BAG_TICKORD.EXTRACTED_USER_ID           := IN_USER_ID;
            TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(V_BANK_DEP_BAG_TICKORD);
            --DEPBAG_ONHAND_QTY will depend on book quantity. If we need different quantity we have to update the book quantity first and save it. Then place the order.
            IF IN_ORDERED_DATE = TRUNC(SYSDATE) THEN
               --record should be only moved from current to history if there are changes in current
               --the following process should only run if the order date is current
               --if the order date is future then the DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY should not be accounted
               --it will be done when the batch job runs as the date becomes current
               V_DEPBAG_REORDER_QTY                       := BANKING_COMMON_TOOLS.GET_STANDARD_VAL_DEPOSIT_ORD('DEPBAG_REORDER_QTY');
               V_BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY     := NVL(V_BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY,V_DEPBAG_REORDER_QTY);
               V_BANK_DEP_BAG_TICK.DEPBAG_ONHAND_QTY      := NVL(V_BANK_DEP_BAG_TICK.DEPBAG_ONHAND_QTY,0) + V_BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY;
               V_BANK_DEP_BAG_TICK.DEPBAG_YTD_ORDERED_QTY := NVL(V_BANK_DEP_BAG_TICK.DEPBAG_YTD_ORDERED_QTY,0) + V_BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY;
               V_BANK_DEP_BAG_TICK.DEPBAG_LAST_ORDER_DATE := IN_ORDERED_DATE;
               V_BANK_DEP_BAG_TICK.DEPBAG_LAST_ORDER_QTY  := V_BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY;
               --record should be only moved to history if there are changes in current or else the record should not be changed
               --this process below will do both the insert in history and current
               DEPOSIT_BAG_CURRENT_UPSERT_SP(V_BANK_DEP_BAG_TICK);
            END IF;
            RSA_WEB_SERVICES_PKG.CREATE_DEPOSIT_BAG_ORDER(V_BANK_DEP_BAG_TICK, IN_USER_ID);
        END IF;
    ELSE
        BEGIN
            SELECT *
              INTO V_BANK_DEP_BAG_TICK_FUTURE
              FROM BANK_DEP_BAG_TICK_FUTURE
             WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
               AND FUTURE_ID        = IN_FUTURE_ID;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        IF V_BANK_DEP_BAG_TICK_FUTURE.COST_CENTER_CODE IS NOT NULL THEN
            V_BANK_DEP_BAG_TICKORD_FUTURE.BANK_ACCOUNT_NBR            := V_BANK_DEP_BAG_TICK_FUTURE.BANK_ACCOUNT_NBR;
            V_BANK_DEP_BAG_TICKORD_FUTURE.COST_CENTER_CODE            := V_BANK_DEP_BAG_TICK_FUTURE.COST_CENTER_CODE;
            V_BANK_DEP_BAG_TICKORD_FUTURE.BANK_DEP_BAG_FTR_ID         := NVL(GET_DEPOSIT_BAG_FUT_ID_NBR(V_BANK_DEP_BAG_TICKORD_FUTURE.COST_CENTER_CODE,V_BANK_DEP_BAG_TICK_FUTURE.BANK_ACCOUNT_NBR, IN_FUTURE_ID),0) + 1;
            V_BANK_DEP_BAG_TICKORD_FUTURE.DEPOSIT_BAG_ORDER_PRIORITY  := 100;
            V_BANK_DEP_BAG_TICKORD_FUTURE.DEPOSIT_BAG_ORDER_STATUS    := 'P';
            V_BANK_DEP_BAG_TICKORD_FUTURE.DEPOSIT_BAG_ORDER_SEQ_NBR   := NVL(GET_DEPOSIT_BAG_ORDER_SEQ_NBR(V_BANK_DEP_BAG_TICK_FUTURE.COST_CENTER_CODE,V_BANK_DEP_BAG_TICK_FUTURE.BANK_ACCOUNT_NBR),0) + 1;
            V_BANK_DEP_BAG_TICKORD_FUTURE.EFFECTIVE_DATE              := V_BANK_DEP_BAG_TICK_FUTURE.EFFECTIVE_DATE;
            V_BANK_DEP_BAG_TICKORD_FUTURE.EXPIRATION_DATE             := V_BANK_DEP_BAG_TICK_FUTURE.EXPIRATION_DATE;
            V_BANK_DEP_BAG_TICKORD_FUTURE.LAST_MAINTENANCE_DATE       := TRUNC(SYSDATE);
            V_BANK_DEP_BAG_TICKORD_FUTURE.LAST_MAINT_USER_ID          := IN_USER_ID;
            V_BANK_DEP_BAG_TICKORD_FUTURE.ORDER_DATE                  := IN_ORDERED_DATE;
            V_BANK_DEP_BAG_TICKORD_FUTURE.EXTRACTED_USER_ID           := IN_USER_ID;
            V_BANK_DEP_BAG_TICKORD_FUTURE.FUTURE_ID                   := V_BANK_DEP_BAG_TICK_FUTURE.FUTURE_ID;
            TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_I_SP(V_BANK_DEP_BAG_TICKORD_FUTURE);
            /***DEPBAG_ONHAND_QTY will depend on book quantity. If we need different quantity we have to update the book quantity first and save it. Then place the order.
            For future this will start with new order as if there was "0" DEP_TKTS_ONHAND_QTY***/
            V_BANK_DEP_BAG_TICK_FUTURE.DEPBAG_ONHAND_QTY      := 0;
            V_BANK_DEP_BAG_TICK_FUTURE.DEPBAG_YTD_ORDERED_QTY := 0;
            V_BANK_DEP_BAG_TICK_FUTURE.DEPBAG_LAST_ORDER_DATE := IN_ORDERED_DATE;
            V_BANK_DEP_BAG_TICK_FUTURE.DEPBAG_LAST_ORDER_QTY  := V_BANK_DEP_BAG_TICK_FUTURE.DEPBAG_REORDER_QTY;
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_I_SP(V_BANK_DEP_BAG_TICK_FUTURE);
            BEGIN
                SELECT BANK_ACCOUNT_NBR,      
                       COST_CENTER_CODE,
                       DEPBAG_DAILY_USE_ACTUAL,
                       DEPBAG_DLY_USE_OVERRIDE,
                       DEPBAG_LAST_ORDER_DATE,
                       DEPBAG_LAST_ORDER_QTY,
                       DEPBAG_ONHAND_QTY, 
                       DEPBAG_REORDER_QTY,     
                       DEPBAG_YTD_ORDERED_QTY,
                       DEP_BAG_REORDER_POINT,
                       DEP_BAG_TYPE, 
                       DEP_BAG_REORDER_SWITCH,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE        
                  INTO V_BANK_DEP_BAG_TICK
                  FROM BANK_DEP_BAG_TICK_FUTURE
                 WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                   AND FUTURE_ID        = IN_FUTURE_ID;
            EXCEPTION
               WHEN OTHERS THEN
                   NULL;
            END;
            --checking if the record has virtual current.
            --if it has then inserting the same in the current table
            IF BANKING_COMMON_TOOLS.IS_VIRTUAL_MEMBER(IN_COST_CENTER_CODE,V_BANK_DEP_BAG_TICK_FUTURE.BANK_ACCOUNT_NBR) = 'Y' THEN
               TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(V_BANK_DEP_BAG_TICK);
               SELECT BANK_ACCOUNT_NBR,      
                      COST_CENTER_CODE,
                      BANK_DEP_BAG_FTR_ID,
                      DEPOSIT_BAG_ORDER_PRIORITY,
                      DEPOSIT_BAG_ORDER_STATUS,
                      DEPOSIT_BAG_ORDER_SEQ_NBR,
                      EFFECTIVE_DATE,
                      EXPIRATION_DATE,
                      LAST_MAINTENANCE_DATE,
                      LAST_MAINT_USER_ID,
                      ORDER_DATE,
                      EXTRACTED_USER_ID
                 INTO V_BANK_DEP_BAG_TICKORD
                 FROM BANK_DEP_BAG_TICKORD_FUTURE
                WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
                  AND BANK_ACCOUNT_NBR = V_BANK_DEP_BAG_TICK_FUTURE.BANK_ACCOUNT_NBR
                  AND FUTURE_ID        = IN_FUTURE_ID;
               TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(V_BANK_DEP_BAG_TICKORD);
            END IF;
            RSA_WEB_SERVICES_PKG.CREATE_DEPOSIT_BAG_ORDER(V_BANK_DEP_BAG_TICK, IN_USER_ID);
        END IF;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PLACE_DEPOSIT_BAG_TICKET_ORDER ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END PLACE_DEPOSIT_BAG_TICKET_ORDER;

END DEPOSIT_BAG_MAINTENANCE_PKG;