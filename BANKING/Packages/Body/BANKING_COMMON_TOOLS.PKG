create or replace PACKAGE BODY BANKING_COMMON_TOOLS
AS
/**************************************************************** 
This package will have Banking specific tools

created : 07/02/2015 sxh487 CCN Project....
changed :
*****************************************************************/
FUNCTION EXTRACT_TABLE_CLOB (
/*******************************************************************************
	This procedure will extract the required clob from passed XML clob
  and sends back the result as clob

Created : 03/30/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_TABLE_NAME IN     VARCHAR2
,IN_ROW_DATA  IN     CLOB) RETURN CLOB
IS
BEGIN
    RETURN SYS.XMLTYPE(IN_ROW_DATA).EXTRACT('/' || IN_TABLE_NAME ||'_UI_SP/'|| IN_TABLE_NAME).getCLOBVal();
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END EXTRACT_TABLE_CLOB;

PROCEDURE GET_ADDRESS_RECORD(
/******************************************************************************
  This procedure gets the address details for the cost center passed in

Created : 06/22/2015 jxc517 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_ADDRESS_RECORD           OUT ADDRESS_VW%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_ADDRESS_RECORD
      FROM ADDRESS_VW
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND ADDRESS_TYPE = 'M'
       AND EXPIRATION_DATE IS NULL
       AND ROWNUM < 2;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_ADDRESS_RECORD;

PROCEDURE GET_PHONE_RECORD(
/******************************************************************************
  This procedure gets the phone details for the cost center passed in

Created : 06/22/2015 jxc517 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_PHONE_RECORD             OUT CCN_PHONE_INFO_VW%ROWTYPE)
IS
BEGIN
    SELECT *
      INTO OUT_PHONE_RECORD
      FROM CCN_PHONE_INFO_VW
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND ROWNUM < 2;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_PHONE_RECORD;

PROCEDURE GET_STORE_MANAGER_RECORD(
/******************************************************************************
  This procedure gets the Manager details for the cost center passed in

Created : 08/07/2016 vxv339
*******************************************************************************/
IN_COST_CENTER_CODE       IN     VARCHAR2,
OUT_MANAGER_RECORD        OUT SWC_HR_GEMS_TB%ROWTYPE)
IS
BEGIN
    SELECT * 
      INTO OUT_MANAGER_RECORD
      FROM SWC_HR_GEMS_TB G1
     WHERE UPPER(G1.JOB_TITLE) IN ('MGR', 'STORE MGR')
       AND G1.ASSIG_STATUS = 'Active'
       AND G1.COST_CENTER = IN_COST_CENTER_CODE
       AND G1.LATEST_HIRE_DATE = (SELECT MIN(LATEST_HIRE_DATE)
                                    FROM SWC_HR_GEMS_TB G2
                                   WHERE UPPER(G2.COST_CENTER) = UPPER(G1.COST_CENTER)
                                     AND UPPER(G2.JOB_TITLE) IN ('MGR', 'STORE MGR')
                                     AND G2.ASSIG_STATUS = 'Active');   
    
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_STORE_MANAGER_RECORD;

PROCEDURE GET_DAD_FOR_COST_CENTER(
/******************************************************************************
  This procedure gets the DAD details for the 4 digit store number passed in

Created : 09/30/2015 jxc517 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2,
OUT_DIVISION           OUT VARCHAR2,
OUT_AREA               OUT VARCHAR2,
OUT_DISTRICT           OUT VARCHAR2)
IS
BEGIN
    SELECT DIVISION, AREA, DISTRICT
      INTO OUT_DIVISION, OUT_AREA, OUT_DISTRICT
      FROM HIERARCHY_DETAIL_VIEW
     WHERE HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY'
       AND SUBSTR(COST_CENTER_CODE, 3) = IN_COST_CENTER_CODE;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_DAD_FOR_COST_CENTER;

FUNCTION GET_BNK_ACCNT_NBR_FOR_CC(
/******************************************************************************
This procedure performs all the business rules that are applicable Account Maintenance Window

created : 06/19/2015 jxc517 CCN Project....
revised : 
*******************************************************************************/
IN_COST_CENTER_CODE IN VARCHAR2) RETURN VARCHAR2
IS
V_BANK_ACCOUNT_NBR          BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE;
BEGIN
    --Check in Lead/Independent cost centers for bank account number
    BEGIN
        SELECT LEAD_BANK_ACCOUNT_NBR
          INTO V_BANK_ACCOUNT_NBR
          FROM LEAD_BANK_CC
         WHERE LEAD_STORE_NBR = IN_COST_CENTER_CODE
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
           AND ROWNUM < 2;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    IF V_BANK_ACCOUNT_NBR IS NULL THEN
        --Check in Member cost centers for bank account number as not found in Lead/Independent
        BEGIN
            SELECT LEAD_BANK_ACCOUNT_NBR
              INTO V_BANK_ACCOUNT_NBR
              FROM LEAD_BANK_CC
             WHERE LEAD_STORE_NBR = (SELECT LEAD_STORE_NBR
                                       FROM MEMBER_BANK_CC
                                      WHERE MEMBER_STORE_NBR = IN_COST_CENTER_CODE
                                        AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE)
               AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
               AND ROWNUM < 2;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    END IF;
    RETURN V_BANK_ACCOUNT_NBR;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_BNK_ACCNT_NBR_FOR_CC;

FUNCTION GET_FTR_BNK_ACCNT_NBR_FOR_CC(
/******************************************************************************
This procedure performs all the business rules that are applicable Account Maintenance Window

created : 10/19/2015 jxc517 CCN Project....
revised : 
*******************************************************************************/
IN_COST_CENTER_CODE IN VARCHAR2) RETURN VARCHAR2
IS
V_BANK_ACCOUNT_NBR          BANK_ACCOUNT_FUTURE.BANK_ACCOUNT_NBR%TYPE;
BEGIN
    --Check in Lead/Independent cost centers for bank account number
    BEGIN
        SELECT LEAD_BANK_ACCOUNT_NBR
          INTO V_BANK_ACCOUNT_NBR
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_STORE_NBR = IN_COST_CENTER_CODE
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
           AND ROWNUM < 2;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    IF V_BANK_ACCOUNT_NBR IS NULL THEN
        --Check in Member cost centers for bank account number as not found in Lead/Independent
        BEGIN
            SELECT LEAD_BANK_ACCOUNT_NBR
              INTO V_BANK_ACCOUNT_NBR
              FROM LEAD_BANK_CC_FUTURE
             WHERE LEAD_STORE_NBR = (SELECT LEAD_STORE_NBR
                                       FROM MEMBER_BANK_CC_FUTURE
                                      WHERE MEMBER_STORE_NBR = IN_COST_CENTER_CODE
                                        AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE)
               AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
               AND ROWNUM < 2;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    END IF;
    RETURN V_BANK_ACCOUNT_NBR;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_FTR_BNK_ACCNT_NBR_FOR_CC;

FUNCTION GET_LEAD_STORE_NBR_FOR_MBR_STR(
/*******************************************************************************
  This function will get the current lead store for the passed member store

Created : 06/19/2015 sxh487/jxc517 CCN Project....
Changed : 
*******************************************************************************/
  IN_MEMBER_STORE_NBR   IN MEMBER_BANK_CC.MEMBER_STORE_NBR%TYPE) RETURN VARCHAR2
IS
    V_LEAD_STORE_NBR  MEMBER_BANK_CC.LEAD_STORE_NBR%TYPE;
BEGIN
    SELECT LEAD_STORE_NBR 
      INTO V_LEAD_STORE_NBR
      FROM MEMBER_BANK_CC
     WHERE MEMBER_STORE_NBR = IN_MEMBER_STORE_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
    RETURN V_LEAD_STORE_NBR;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_LEAD_STORE_NBR;
END GET_LEAD_STORE_NBR_FOR_MBR_STR;

FUNCTION GET_FTR_LD_STR_NBR_FOR_MBR_STR(
/*******************************************************************************
  This function will get the future lead store for the passed future member store

Created : 08/25/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
  IN_MEMBER_STORE_NBR   IN MEMBER_BANK_CC_FUTURE.MEMBER_STORE_NBR%TYPE,
  IN_FUTURE_ID          IN NUMBER) RETURN VARCHAR2
IS
    V_LEAD_STORE_NBR  MEMBER_BANK_CC_FUTURE.LEAD_STORE_NBR%TYPE;
BEGIN
    SELECT LEAD_STORE_NBR 
      INTO V_LEAD_STORE_NBR
      FROM MEMBER_BANK_CC_FUTURE
     WHERE MEMBER_STORE_NBR = IN_MEMBER_STORE_NBR
       AND FUTURE_ID        = NVL(IN_FUTURE_ID, FUTURE_ID);
    RETURN V_LEAD_STORE_NBR;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_LEAD_STORE_NBR;
END GET_FTR_LD_STR_NBR_FOR_MBR_STR;

FUNCTION GET_LEAD_BANK_CC_REC(
/***********************************************************
	This function will get the lead bank record for passed lead
  store number
  
Created : 06/08/2015 nxk927
Changed : 
************************************************************/
    IN_LEAD_STORE_NBR           IN     VARCHAR2) RETURN LEAD_BANK_CC%ROWTYPE
IS
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
BEGIN
    SELECT *
      INTO V_LEAD_BANK_CC_REC
      FROM LEAD_BANK_CC
     WHERE LEAD_STORE_NBR = IN_LEAD_STORE_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
    RETURN V_LEAD_BANK_CC_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_LEAD_BANK_CC_REC;

FUNCTION GET_UNEXP_LEAD_CC_FUTURE_REC(
/***********************************************************
	This function will return the un expired lead bank future record
  based on lead store number 
  
Created : 11/11/2015 nxk927 CCN Project....
Changed : 
************************************************************/
    IN_LEAD_STORE_NBR        IN     VARCHAR2) RETURN LEAD_BANK_CC_FUTURE%ROWTYPE
IS
    V_LEAD_BANK_CC_REC LEAD_BANK_CC_FUTURE%ROWTYPE;
BEGIN
    SELECT LEAD_BANK_ACCOUNT_NBR,
           LEAD_STORE_NBR,
           EFFECTIVE_DATE,
           EXPIRATION_DATE,
           BANK_BRANCH_NBR,
           BANK_TYPE_CODE,
           UPDATE_DATE,
           LAST_UPD_USER_ID,
           FUTURE_ID
      INTO V_LEAD_BANK_CC_REC
      FROM LEAD_BANK_CC_FUTURE
     WHERE LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
       AND EXPIRATION_DATE IS NULL;
    RETURN V_LEAD_BANK_CC_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_UNEXP_LEAD_CC_FUTURE_REC;

FUNCTION GET_LEAD_BANK_CC_HIST_REC(
/***********************************************************
	This function will get the lead bank record from current tables
  for the passed lead store number and effective date
  If not found it will try to get the details from the history tables
  based on lead store number and effective date
  
Created : 07/22/2015 sxh487/jxc517
Changed : 
************************************************************/
    IN_LEAD_STORE_NBR           IN     VARCHAR2,
    IN_EFFECTIVE_DATE           IN     LEAD_BANK_CC.EFFECTIVE_DATE%TYPE) RETURN LEAD_BANK_CC%ROWTYPE
IS
    V_LEAD_BANK_CC_REC LEAD_BANK_CC%ROWTYPE;
BEGIN
    BEGIN
        SELECT *
         INTO V_LEAD_BANK_CC_REC
         FROM LEAD_BANK_CC
        WHERE LEAD_STORE_NBR = IN_LEAD_STORE_NBR
          AND IN_EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, IN_EFFECTIVE_DATE);
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;    
    IF V_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR IS NULL THEN
        SELECT *
          INTO V_LEAD_BANK_CC_REC
          FROM LEAD_BANK_CC_HIST
         WHERE LEAD_STORE_NBR = IN_LEAD_STORE_NBR
           AND IN_EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, IN_EFFECTIVE_DATE);
    END IF;
    RETURN V_LEAD_BANK_CC_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_LEAD_BANK_CC_HIST_REC;

FUNCTION GET_LEAD_BANK_CC_FUTURE_REC(
/***********************************************************
	This function will return the lead bank future record
  based on bank account number, lead store number and future id
  
Created : 07/20/2015 jxc517 CCN Project....
Changed  : 
************************************************************/
    IN_LEAD_BANK_ACCOUNT_NBR IN     VARCHAR2,
    IN_LEAD_STORE_NBR        IN     VARCHAR2,
    IN_FUTURE_ID             IN     NUMBER) RETURN LEAD_BANK_CC_FUTURE%ROWTYPE
IS
    V_LEAD_BANK_CC_FUTURE_REC LEAD_BANK_CC_FUTURE%ROWTYPE;
BEGIN
    SELECT *
      INTO V_LEAD_BANK_CC_FUTURE_REC
      FROM LEAD_BANK_CC_FUTURE
     WHERE LEAD_BANK_ACCOUNT_NBR = IN_LEAD_BANK_ACCOUNT_NBR
       AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
       AND FUTURE_ID             = IN_FUTURE_ID;
    RETURN V_LEAD_BANK_CC_FUTURE_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_LEAD_BANK_CC_FUTURE_REC;

FUNCTION GET_BANK_ACCOUNT_REC(
/***********************************************************
	This function will get the bank account record for passed
  bank account number
  
Created : 07/23/2015 jxc517 CCN Project....
Changed : 
************************************************************/
    IN_BANK_ACCOUNT_NBR IN     VARCHAR2) RETURN BANK_ACCOUNT%ROWTYPE
IS
    V_BANK_ACCOUNT_REC BANK_ACCOUNT%ROWTYPE;
BEGIN
    SELECT *
      INTO V_BANK_ACCOUNT_REC
      FROM BANK_ACCOUNT
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
    RETURN V_BANK_ACCOUNT_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_BANK_ACCOUNT_REC;

FUNCTION GET_BANK_ACCOUNT_FUTURE_REC(
/***********************************************************
	This function will get the bank account future record for passed
  bank account number
  
Created : 07/23/2015 jxc517 CCN Project....
Changed : 
************************************************************/
    IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
    IN_FUTURE_ID        IN     NUMBER) RETURN BANK_ACCOUNT_FUTURE%ROWTYPE
IS
    V_BANK_ACCOUNT_FUTURE_REC BANK_ACCOUNT_FUTURE%ROWTYPE;
BEGIN
    SELECT *
      INTO V_BANK_ACCOUNT_FUTURE_REC
      FROM BANK_ACCOUNT_FUTURE
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND FUTURE_ID        = IN_FUTURE_ID;
    RETURN V_BANK_ACCOUNT_FUTURE_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_BANK_ACCOUNT_FUTURE_REC;

FUNCTION GET_BANK_ACCOUNT_HIST_REC(
/***********************************************************
	This function will get the bank account record from current tables
  for the passed bank account number and effective date
  If not found it will try to get the details from the history tables
  based on bank account number and effective date
  
Created : 07/22/2015 sxh487/jxc517
Changed : 
************************************************************/
    IN_BANK_ACCOUNT_NBR           IN     VARCHAR2,
    IN_EFFECTIVE_DATE             IN     BANK_ACCOUNT.EFFECTIVE_DATE%TYPE) RETURN BANK_ACCOUNT%ROWTYPE
IS
    V_BANK_ACCOUNT_REC BANK_ACCOUNT%ROWTYPE;
BEGIN
   BEGIN
       SELECT *
         INTO V_BANK_ACCOUNT_REC
         FROM BANK_ACCOUNT
        WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
          AND IN_EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, IN_EFFECTIVE_DATE);
   EXCEPTION
       WHEN OTHERS THEN
           NULL;
   END;
    IF V_BANK_ACCOUNT_REC.BANK_ACCOUNT_NBR IS NULL THEN
       SELECT *
         INTO V_BANK_ACCOUNT_REC
         FROM BANK_ACCOUNT_HIST
        WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
          AND IN_EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, IN_EFFECTIVE_DATE);
    END IF;
    
    RETURN V_BANK_ACCOUNT_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_BANK_ACCOUNT_HIST_REC;

FUNCTION IS_STORE_LEAD_EVER(
/*******************************************************************************
  This function will return 'Y' if the store passed is a lead ever

Created : 10/20/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER    IN     LEAD_BANK_CC.LEAD_STORE_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END 
      INTO V_RETURN_VAL
      FROM (SELECT LEAD_BANK_ACCOUNT_NBR
              FROM LEAD_BANK_CC
             WHERE LEAD_STORE_NBR = IN_COST_CENTER
               AND BANK_TYPE_CODE = 'L'
             UNION
            SELECT LEAD_BANK_ACCOUNT_NBR
              FROM LEAD_BANK_CC_FUTURE
             WHERE LEAD_STORE_NBR = IN_COST_CENTER
               AND BANK_TYPE_CODE = 'L');
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_STORE_LEAD_EVER;

FUNCTION GET_FUTURE_ID(
/***********************************************************
	This function will get next future id for the 
  passed bank account number

Created : 07/08/2015 nxk927/jxc517 CCN Project Team....
Changed : 
************************************************************/
IN_BANK_ACCOUNT_NBR IN VARCHAR2) RETURN NUMBER
IS
    V_FUTURE_ID NUMBER := 1;
BEGIN
    SELECT NVL(MAX(FUTURE_ID), 0) + 1
      INTO V_FUTURE_ID
      FROM BANK_ACCOUNT_FUTURE
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
    RETURN V_FUTURE_ID;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_FUTURE_ID;

FUNCTION GET_NEXT_MICR_FORMAT_ID(
/***********************************************************
	This function will get next future id for the 
  passed bank account number

Created : 07/08/2015 nxk927/jxc517 CCN Project Team....
Changed : 
************************************************************/
IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
IN_FUTURE_ID        IN     VARCHAR2) RETURN NUMBER
IS
    V_MICR_FORMAT_ID NUMBER := 1;
BEGIN
    IF IN_FUTURE_ID IS NOT NULL THEN
        SELECT NVL(MAX(MICR_FORMAT_ID),0) + 1
          INTO V_MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_FUTURE_ID;
    ELSE
        SELECT NVL(MAX(MICR_FORMAT_ID),0) + 1
          INTO V_MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
    END IF;
    RETURN V_MICR_FORMAT_ID;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_NEXT_MICR_FORMAT_ID;

FUNCTION GET_STORE_MICR_FORMAT_DTLS_REC(
/***********************************************************
	This function will get the store MICR format detail record for passed
  cost center code
  
Created : 08/18/2015 jxc517 CCN Project....
Changed : 
************************************************************/
    IN_COST_CENTER_CODE IN     VARCHAR2) RETURN STORE_MICR_FORMAT_DTLS%ROWTYPE
IS
    V_STORE_MICR_FORMAT_DTLS_REC STORE_MICR_FORMAT_DTLS%ROWTYPE;
BEGIN
    SELECT *
      INTO V_STORE_MICR_FORMAT_DTLS_REC
      FROM STORE_MICR_FORMAT_DTLS
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
    RETURN V_STORE_MICR_FORMAT_DTLS_REC;
EXCEPTION
    WHEN OTHERS THEN
        BEGIN
            SELECT *
              INTO V_STORE_MICR_FORMAT_DTLS_REC
              FROM STORE_MICR_FORMAT_DTLS
             WHERE COST_CENTER_CODE = BANKING_COMMON_TOOLS.GET_LEAD_STORE_NBR_FOR_MBR_STR(IN_COST_CENTER_CODE)
               AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
            RETURN V_STORE_MICR_FORMAT_DTLS_REC;
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
        END;
END GET_STORE_MICR_FORMAT_DTLS_REC;

FUNCTION GET_STR_MICR_FRMT_DTLS_FTR_REC(
/***********************************************************
	This function will get the store MICR format detail future record for passed
  cost center code and future id
  
Created : 08/18/2015 jxc517 CCN Project....
Changed : 
************************************************************/
    IN_COST_CENTER_CODE IN     VARCHAR2,
    IN_FUTURE_ID        IN     NUMBER) RETURN STORE_MICR_FORMAT_DTLS_FUTURE%ROWTYPE
IS
    V_STR_MICR_FORMAT_DTLS_FTR_REC STORE_MICR_FORMAT_DTLS_FUTURE%ROWTYPE;
BEGIN
    SELECT *
      INTO V_STR_MICR_FORMAT_DTLS_FTR_REC
      FROM STORE_MICR_FORMAT_DTLS_FUTURE
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND FUTURE_ID        = IN_FUTURE_ID;
    RETURN V_STR_MICR_FORMAT_DTLS_FTR_REC;
EXCEPTION
    WHEN OTHERS THEN
        BEGIN
            SELECT *
              INTO V_STR_MICR_FORMAT_DTLS_FTR_REC
              FROM STORE_MICR_FORMAT_DTLS_FUTURE
             WHERE COST_CENTER_CODE = BANKING_COMMON_TOOLS.GET_FTR_LD_STR_NBR_FOR_MBR_STR(IN_COST_CENTER_CODE, IN_FUTURE_ID)
               AND FUTURE_ID        = IN_FUTURE_ID;
            RETURN V_STR_MICR_FORMAT_DTLS_FTR_REC;
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
        END;
END GET_STR_MICR_FRMT_DTLS_FTR_REC;

FUNCTION GET_STORE_BANK_MICR_FORMAT_REC(
/***********************************************************
	This function will get the bank MICR format record for passed
  cost center code
  
Created : 08/18/2015 jxc517 CCN Project....
Changed : 
************************************************************/
    IN_BANK_ACCOUNT_NBR  IN     VARCHAR2,
    IN_MICR_FORMAT_ID    IN     NUMBER) RETURN BANK_MICR_FORMAT%ROWTYPE
IS
    V_BANK_MICR_FORMAT_REC       BANK_MICR_FORMAT%ROWTYPE;
BEGIN
    SELECT *
      INTO V_BANK_MICR_FORMAT_REC
      FROM BANK_MICR_FORMAT
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID;
    RETURN V_BANK_MICR_FORMAT_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_STORE_BANK_MICR_FORMAT_REC;

FUNCTION GET_STR_BANK_MICR_FRMT_FTR_REC(
/***********************************************************
	This function will get the bank MICR format record for passed
  cost center code and future id
  
Created : 08/18/2015 jxc517 CCN Project....
Changed : 
************************************************************/
    IN_BANK_ACCOUNT_NBR  IN     VARCHAR2,
    IN_MICR_FORMAT_ID    IN     NUMBER,
    IN_FUTURE_ID         IN     NUMBER) RETURN BANK_MICR_FORMAT_FUTURE%ROWTYPE
IS
    V_BANK_MICR_FORMAT_FUTURE_REC       BANK_MICR_FORMAT_FUTURE%ROWTYPE;
BEGIN
    SELECT *
      INTO V_BANK_MICR_FORMAT_FUTURE_REC
      FROM BANK_MICR_FORMAT_FUTURE
     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND MICR_FORMAT_ID   = IN_MICR_FORMAT_ID
       AND FUTURE_ID        = IN_FUTURE_ID;
    RETURN V_BANK_MICR_FORMAT_FUTURE_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_STR_BANK_MICR_FRMT_FTR_REC;

FUNCTION GET_MICR_FRMT_ID_FR_BA_FRMT_NM(
/***********************************************************
	This function will get next MICR format id for the passed bank account number,
  format name

Created : 08/17/2015 jxc517 CCN Project Team....
Changed : 
************************************************************/
IN_BANK_ACCOUNT_NBR IN     VARCHAR2,
IN_FORMAT_NAME      IN     VARCHAR2,
IN_FUTURE_ID        IN     NUMBER) RETURN NUMBER
IS
    V_MICR_FORMAT_ID NUMBER := NULL;
BEGIN
    IF IN_FUTURE_ID IS NULL THEN
        SELECT MAX(MICR_FORMAT_ID)
          INTO V_MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FORMAT_NAME      = IN_FORMAT_NAME;
    ELSE
        SELECT MAX(MICR_FORMAT_ID)
          INTO V_MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_FUTURE_ID
           AND FORMAT_NAME      = IN_FORMAT_NAME;
    END IF;
    RETURN V_MICR_FORMAT_ID;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_MICR_FRMT_ID_FR_BA_FRMT_NM;

FUNCTION GET_BAG_ORDER_COUNT(
/*******************************************************************************
  This function will return number of future deposit bag order placed
  for the cost center that has been passed that needs to move to current

Created : 10/30/2015 nxk927 CCN Project....
Changed : 11/17/2015 NXK927 CCN Project....
          passing bank account nummber as parameter
*******************************************************************************/
IN_COST_CENTER       IN     BANK_DEP_BAG_TICKORD.COST_CENTER_CODE%TYPE,
IN_BANK_ACCOUNT_NBR  IN     VARCHAR2,
IN_FUTURE_ID         IN     NUMBER) RETURN NUMBER
IS
    V_RETURN_VAL NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_RETURN_VAL
      FROM BANK_DEP_BAG_TICKORD_FUTURE
     WHERE COST_CENTER_CODE = IN_COST_CENTER
	     AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND FUTURE_ID        = IN_FUTURE_ID  
       AND ORDER_DATE       <= TRUNC(SYSDATE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_BAG_ORDER_COUNT;

FUNCTION GET_BAG_ORDER_COUNT(
/*******************************************************************************
  This function will return number of future deposit bag order placed
  for the cost center that has been passed that needs to move to current

Created : 10/30/2015 nxk927 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER    IN     BANK_DEP_BAG_TICKORD.COST_CENTER_CODE%TYPE,
IN_FUTURE_ID      IN     NUMBER) RETURN NUMBER
IS
    V_RETURN_VAL NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_RETURN_VAL
      FROM BANK_DEP_BAG_TICKORD_FUTURE
     WHERE COST_CENTER_CODE = IN_COST_CENTER
       AND FUTURE_ID = IN_FUTURE_ID
       AND ORDER_DATE <= TRUNC(SYSDATE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_BAG_ORDER_COUNT;

FUNCTION IS_LAST_TKT_ORDER_FOR_CURR_YTD(
/*******************************************************************************
  This function will return Y if the last order was placed in the same year. This is to check the 
  calculation for YTD to make sure we don't add last years deposit tickets orders

Created : 10/30/2015 nxk927 CCN Project....
Changed : 11/09/2015 nxk927 CCN Project....
          added to_char for the order date 
        : 11/17/2015 nxk927 CCN Project....
		      passing bank account nummber as parameter as if the bank account number is changed then the on hand quantity
          will start from zero. This will get the right on hand quantity
          --in current we may have next year's orders as well. Exclude those
*******************************************************************************/
IN_COST_CENTER      IN     BANK_DEP_TICKORD_HIST.COST_CENTER_CODE%TYPE,
IN_BANK_ACCOUNT_NBR IN     BANK_DEP_TICKORD_HIST.BANK_ACCOUNT_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN 
    SELECT CASE WHEN (TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(MAX(ORDER_DATE),'YYYY')) THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM (SELECT ORDER_DATE 
              FROM BANK_DEP_TICKORD_HIST
             WHERE COST_CENTER_CODE = IN_COST_CENTER
			   AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
            UNION
            SELECT ORDER_DATE 
              FROM BANK_DEP_TICKORD
             WHERE COST_CENTER_CODE           = IN_COST_CENTER
			   AND BANK_ACCOUNT_NBR                 = IN_BANK_ACCOUNT_NBR
               AND ORDER_DATE                <= TRUNC(SYSDATE));
               --in current we may have next year's orders as well. Exclude those
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_LAST_TKT_ORDER_FOR_CURR_YTD;

FUNCTION IS_LAST_TKT_ORDER_FOR_CURR_YTD(
/*******************************************************************************
  This function will return Y if the last order was placed in the same year. This is to check the
  calculation for YTD to make sure we don't add last years deposit tickets orders

Created : 10/30/2015 nxk927 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER    IN     BANK_DEP_TICKORD_HIST.COST_CENTER_CODE%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    SELECT CASE WHEN (TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(MAX(ORDER_DATE),'YYYY')) THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM (SELECT ORDER_DATE
              FROM BANK_DEP_TICKORD_HIST
             WHERE COST_CENTER_CODE = IN_COST_CENTER
            UNION
            SELECT ORDER_DATE
              FROM BANK_DEP_TICKORD
             WHERE COST_CENTER_CODE = IN_COST_CENTER
               AND ORDER_DATE = TO_CHAR(SYSDATE, 'YYYY'));
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_LAST_TKT_ORDER_FOR_CURR_YTD;

FUNCTION IS_LAST_BAG_ORDER_FOR_CURR_YTD(
/*******************************************************************************
  This function will return Y if the last order was placed in the same year. This is to check the 
  calculation for YTD to make sure we don't add last years deposit tickets orders

Created : 10/30/2015 nxk927 CCN Project....
Changed : 11/09/2015 nxk927 CCN Project....
          added to_char for the order date 
        : 11/17/2015 NXK927 CCN Project....
		      passing bank account nummber as parameter as if the bank account number is changed then the on hand quantity
          will start from zero. This will get the right on hand quantity
          --in current we may have next year's orders as well. Exclude those
*******************************************************************************/
IN_COST_CENTER        IN     BANK_DEP_BAG_TICKORD_HIST.COST_CENTER_CODE%TYPE,
IN_BANK_ACCOUNT_NBR   IN     BANK_DEP_BAG_TICKORD_HIST.BANK_ACCOUNT_NBR%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN 
    SELECT CASE WHEN (TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(MAX(ORDER_DATE),'YYYY')) THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM (SELECT ORDER_DATE 
              FROM BANK_DEP_BAG_TICKORD
             WHERE COST_CENTER_CODE            = IN_COST_CENTER
			   AND BANK_ACCOUNT_NBR                  = IN_BANK_ACCOUNT_NBR
               AND ORDER_DATE                 <= TRUNC(SYSDATE)
               --in current we may have next year's orders as well. Exclude those
            UNION
            SELECT ORDER_DATE 
              FROM BANK_DEP_BAG_TICKORD_HIST
             WHERE COST_CENTER_CODE            = IN_COST_CENTER
			   AND BANK_ACCOUNT_NBR                  = IN_BANK_ACCOUNT_NBR);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_LAST_BAG_ORDER_FOR_CURR_YTD;

FUNCTION IS_LAST_BAG_ORDER_FOR_CURR_YTD(
/*******************************************************************************
  This function will return Y if the last order was placed in the same year. This is to check the
  calculation for YTD to make sure we don't add last years deposit tickets orders

Created : 10/30/2015 nxk927 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER    IN     BANK_DEP_BAG_TICKORD_HIST.COST_CENTER_CODE%TYPE) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
    SELECT CASE WHEN (TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(MAX(ORDER_DATE),'YYYY')) THEN 'Y' ELSE 'N' END
      INTO V_RETURN_VAL
      FROM (SELECT ORDER_DATE
              FROM BANK_DEP_BAG_TICKORD
             WHERE COST_CENTER_CODE = IN_COST_CENTER
              AND ORDER_DATE = TO_CHAR(SYSDATE, 'YYYY')
            UNION
            SELECT ORDER_DATE
              FROM BANK_DEP_BAG_TICKORD_HIST
             WHERE COST_CENTER_CODE = IN_COST_CENTER);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_LAST_BAG_ORDER_FOR_CURR_YTD;

FUNCTION GET_TICKET_ORDER_COUNT(
/*******************************************************************************
  This function will return number of future deposit ticket order placed
  for the cost center that has been passed that needs to move to current

Created : 10/30/2015 nxk927 CCN Project....
Changed : 11/17/2015 nxk927 CCN Project....
          adding bank account number as parameter 
*******************************************************************************/
IN_COST_CENTER        IN     BANK_DEP_TICKORD.COST_CENTER_CODE%TYPE,
IN_BANK_ACCOUNT_NBR   IN     VARCHAR2,
IN_FUTURE_ID          IN     NUMBER) RETURN NUMBER
IS
    V_RETURN_VAL NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_RETURN_VAL
      FROM BANK_DEP_TICKORD_FUTURE
     WHERE COST_CENTER_CODE = IN_COST_CENTER
	   AND BANK_ACCOUNT_NBR   = IN_BANK_ACCOUNT_NBR
       AND FUTURE_ID        = IN_FUTURE_ID
       AND ORDER_DATE      <= TRUNC(SYSDATE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_TICKET_ORDER_COUNT;

FUNCTION GET_TICKET_ORDER_COUNT(
/*******************************************************************************
  This function will return number of future deposit ticket order placed
  for the cost center that has been passed that needs to move to current

Created : 10/30/2015 nxk927 CCN Project....
Changed :
*******************************************************************************/
IN_COST_CENTER    IN     BANK_DEP_TICKORD.COST_CENTER_CODE%TYPE,
IN_FUTURE_ID      IN     NUMBER) RETURN NUMBER
IS
    V_RETURN_VAL NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_RETURN_VAL
      FROM BANK_DEP_TICKORD_FUTURE
     WHERE COST_CENTER_CODE = IN_COST_CENTER
       AND FUTURE_ID        = IN_FUTURE_ID
       AND ORDER_DATE      <= TRUNC(SYSDATE);
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_TICKET_ORDER_COUNT;

FUNCTION GET_STANDARD_VAL_DEPOSIT_ORD(
/*******************************************************************************
  This function will return standard number for REORDER_NUMBER_BKS, NBR_DEP_TICKETS_PER_BK
  and DEPBAG_REORDER_QTY

Created : 11/05/2015 nxk927 CCN Project....
Changed : 11/05/2015 jxc517 CCN Project....
          Modified code to take only the active record, else it fails with SELECT *
          Added SHEETS_OF_PAPER_PER_BK for deposit tickets calcualtion
*******************************************************************************/
IN_IND		IN   VARCHAR2) RETURN NUMBER
IS
V_BANK_DEP_TICKOAK_REC  BANK_DEP_TICKOAK%ROWTYPE;
V_RETURN_VAL            NUMBER := 0;
BEGIN
    BEGIN
        SELECT *
          INTO V_BANK_DEP_TICKOAK_REC
          FROM BANK_DEP_TICKOAK
         WHERE EXPIRATION_DATE IS NULL;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    CASE IN_IND
         WHEN 'REORDER_NUMBER_BKS' THEN V_RETURN_VAL := V_BANK_DEP_TICKOAK_REC.REORDER_NUMBER_BKS;
         WHEN 'NBR_DEP_TICKETS_PER_BK' THEN V_RETURN_VAL := V_BANK_DEP_TICKOAK_REC.NBR_DEP_TICKETS_PER_BK;
         WHEN 'DEPBAG_REORDER_QTY' THEN V_RETURN_VAL := V_BANK_DEP_TICKOAK_REC.DEPBAG_REORDER_QTY;
         WHEN 'SHEETS_OF_PAPER_PER_BK' THEN V_RETURN_VAL := V_BANK_DEP_TICKOAK_REC.SHEETS_OF_PAPER_PER_BK;
         ELSE NULL;
    END CASE;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_STANDARD_VAL_DEPOSIT_ORD;

FUNCTION GET_DEPOSIT_TICKET_ONHAND_YTD(
/***********************************************************
	  This function will get the old records 
    --if present in current then will be inserted into history
    From history it will be used to update the current records for DEP_TKTS_ONHAND_QTY
    and YTD_DEP_TKTS_ORDERED_QTY as the future will have 0's. When future moves to current,
    this need to run to update the two fields
Created : 10/30/2015 NXK927
Changed : 11/09/2015 NXK927 CCN Project....
          taking data from current table rather than history if present in current
          only taking the data if there is no current data.  
        : 11/17/2015 NXK927 CCN Project....
          passing bank account nummber as parameter
          -changed the call the same proc was not called twice. removed one of the call		  
************************************************************/
    IN_COST_CENTER              IN     VARCHAR2,
	  IN_BANK_ACCOUNT_NBR         IN     VARCHAR2,
    IN_REORDER_NUMBER_BKS       IN     NUMBER,
    IN_NBR_DEP_TICKETS_PER_BK   IN     NUMBER,
    IN_FUTURE_ID                IN     NUMBER) RETURN BANK_DEP_TICK_HIST%ROWTYPE
IS
V_DEP_TICK_HIST                   BANK_DEP_TICK_HIST%ROWTYPE;
V_TICK_COUNT                      NUMBER := 0;
V_REORDER_NUMBER_BKS              NUMBER;
V_NBR_DEP_TICKETS_PER_BK          NUMBER;
BEGIN
  -- this will check if there are any records on the current bank_dep_tick table
  -- if so push it to history and delete it from current
    BEGIN  
        SELECT *
          INTO V_DEP_TICK_HIST
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
         
        TABLE_IU_PKG.BANK_DEP_TICK_D_SP(V_DEP_TICK_HIST);
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
           NULL;
    END;
    
    BEGIN    
        SELECT * 
          INTO V_DEP_TICK_HIST
          FROM BANK_DEP_TICK_HIST
         WHERE COST_CENTER_CODE = IN_COST_CENTER
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE   = (SELECT MAX(EFFECTIVE_DATE) 
                                     FROM BANK_DEP_TICK_HIST
                                    WHERE COST_CENTER_CODE = IN_COST_CENTER
                                      AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR)
           AND ROWNUM < 2;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
           NULL;
    END;   
   --checking to see if the last order placed was in current year or previous
   --if previous start with 0
   IF IS_LAST_TKT_ORDER_FOR_CURR_YTD(IN_COST_CENTER,IN_BANK_ACCOUNT_NBR) = 'N' THEN
       V_DEP_TICK_HIST.YTD_DEP_TKTS_ORDERED_QTY := 0;
   END IF;
    --Get the number of Ticket orders placed for the cost center
   V_TICK_COUNT := 0;
   V_TICK_COUNT := GET_TICKET_ORDER_COUNT(IN_COST_CENTER, IN_BANK_ACCOUNT_NBR,IN_FUTURE_ID);
   IF V_TICK_COUNT > 0 THEN
      --getting standard value incase there is null
      V_REORDER_NUMBER_BKS     := GET_STANDARD_VAL_DEPOSIT_ORD('REORDER_NUMBER_BKS'); 
      V_NBR_DEP_TICKETS_PER_BK := GET_STANDARD_VAL_DEPOSIT_ORD('NBR_DEP_TICKETS_PER_BK');
              
      V_REORDER_NUMBER_BKS     := NVL(IN_REORDER_NUMBER_BKS,V_REORDER_NUMBER_BKS);
      V_NBR_DEP_TICKETS_PER_BK := NVL(IN_NBR_DEP_TICKETS_PER_BK,V_NBR_DEP_TICKETS_PER_BK);
      --every time it comes here calculate the on hand and ytd and single count
      V_DEP_TICK_HIST.DEP_TKTS_ONHAND_QTY      := NVL(V_DEP_TICK_HIST.DEP_TKTS_ONHAND_QTY,0) + (V_REORDER_NUMBER_BKS * V_NBR_DEP_TICKETS_PER_BK);
      V_DEP_TICK_HIST.YTD_DEP_TKTS_ORDERED_QTY := NVL(V_DEP_TICK_HIST.YTD_DEP_TKTS_ORDERED_QTY,0) +  (V_REORDER_NUMBER_BKS * V_NBR_DEP_TICKETS_PER_BK);
   END IF;   
   RETURN V_DEP_TICK_HIST;
EXCEPTION
    WHEN OTHERS THEN
          RETURN NULL;   
END GET_DEPOSIT_TICKET_ONHAND_YTD;

FUNCTION GET_DEPOSIT_TICKET_ONHAND_YTD(
/***********************************************************
	  This function will get the old records
    --if present in current then will be inserted into history
    From history it will be used to update the current records for DEP_TKTS_ONHAND_QTY
    and YTD_DEP_TKTS_ORDERED_QTY as the future will have 0's. When future moves to current,
    this need to run to update the two fields
Created : 10/30/2015 NXK927
Changed :
************************************************************/
    IN_COST_CENTER              IN     VARCHAR2,
    IN_REORDER_NUMBER_BKS       IN     NUMBER,
    IN_NBR_DEP_TICKETS_PER_BK   IN     NUMBER,
    IN_FUTURE_ID                IN     NUMBER) RETURN BANK_DEP_TICK_HIST%ROWTYPE
IS
V_DEP_TICK_HIST                   BANK_DEP_TICK_HIST%ROWTYPE;
V_TICK_COUNT                      NUMBER := 0;
V_REORDER_NUMBER_BKS              NUMBER;
V_NBR_DEP_TICKETS_PER_BK          NUMBER;
BEGIN
  -- this will check if there are any records on the current bank_dep_tick table
  -- if so push it to history
  SELECT COUNT(*)
    INTO V_TICK_COUNT
    FROM BANK_DEP_TICK
    WHERE COST_CENTER_CODE = IN_COST_CENTER;

    IF V_TICK_COUNT <> 0 THEN
       SELECT *
         INTO V_DEP_TICK_HIST
         FROM BANK_DEP_TICK
        WHERE COST_CENTER_CODE = IN_COST_CENTER;
       --push it to history and delete if there are current data present
       --current records need to be pushed to history for YTD calculation to see
       --if the order placed was in current year or prev
       TABLE_IU_PKG.BANK_DEP_TICK_D_SP(V_DEP_TICK_HIST);
   END IF;

   --getting history record to calculate the current On hand quantity and YTD qauntity
   SELECT *
     INTO V_DEP_TICK_HIST
     FROM BANK_DEP_TICK_HIST
    WHERE COST_CENTER_CODE = IN_COST_CENTER
      AND EFFECTIVE_DATE   = (SELECT MAX(EFFECTIVE_DATE)
                                FROM BANK_DEP_TICK_HIST
                               WHERE COST_CENTER_CODE = IN_COST_CENTER)
      AND ROWNUM < 2;

   --checking to see if the last order placed was in current year or previous
   --if previous start with 0
   IF IS_LAST_TKT_ORDER_FOR_CURR_YTD(IN_COST_CENTER) = 'N' THEN
       V_DEP_TICK_HIST.YTD_DEP_TKTS_ORDERED_QTY := 0;
   END IF;
    --Get the number of Ticket orders placed for the cost center
   V_TICK_COUNT := 0;
   V_TICK_COUNT := GET_TICKET_ORDER_COUNT(IN_COST_CENTER, IN_FUTURE_ID);
   IF V_TICK_COUNT > 0 THEN
      --getting standard value incase there is null
      V_REORDER_NUMBER_BKS     := GET_STANDARD_VAL_DEPOSIT_ORD('REORDER_NUMBER_BKS');
      V_NBR_DEP_TICKETS_PER_BK := GET_STANDARD_VAL_DEPOSIT_ORD('NBR_DEP_TICKETS_PER_BK');

      V_REORDER_NUMBER_BKS     := NVL(IN_REORDER_NUMBER_BKS,V_REORDER_NUMBER_BKS);
      V_NBR_DEP_TICKETS_PER_BK := NVL(IN_NBR_DEP_TICKETS_PER_BK,V_NBR_DEP_TICKETS_PER_BK);
      --every time it comes here calculate the on hand and ytd and single count
      V_DEP_TICK_HIST.DEP_TKTS_ONHAND_QTY      := NVL(V_DEP_TICK_HIST.DEP_TKTS_ONHAND_QTY,0) + (V_REORDER_NUMBER_BKS * V_NBR_DEP_TICKETS_PER_BK);
      V_DEP_TICK_HIST.YTD_DEP_TKTS_ORDERED_QTY := NVL(V_DEP_TICK_HIST.YTD_DEP_TKTS_ORDERED_QTY,0) +  (V_REORDER_NUMBER_BKS * V_NBR_DEP_TICKETS_PER_BK);
   END IF;
   RETURN V_DEP_TICK_HIST;
EXCEPTION
    WHEN OTHERS THEN
          RETURN NULL;
END GET_DEPOSIT_TICKET_ONHAND_YTD;

FUNCTION GET_DEPOSIT_BAG_ONHAND_YTD(
/***********************************************************
	  This function will get the deposit bag old records
    --if in current will be moved into history
    From history to update the current records as the future will have 0's for DEPBAG_ONHAND_QTY
    and DEPBAG_YTD_ORDERED_QTY.
    When future moves to current, this need to run to update the two fields  
Created : 10/30/2015 NXK927
Changed : 11/09/2015 NXK927 CCN Project....
          taking data from current table rather than history if present in current
          only taking the data if there is no current data.  
		: 11/17/2015 NXK927 CCN Project....
          passing bank account nummber as parameter
          -changed the call the same proc was not called twice. removed one of the call
************************************************************/
    IN_COST_CENTER           IN     VARCHAR2,
    IN_BANK_ACCOUNT_NBR      IN     VARCHAR2,	
    IN_DEPBAG_REORDER_QTY    IN     NUMBER,
    IN_FUTURE_ID             IN     NUMBER) RETURN BANK_DEP_BAG_TICK_HIST%ROWTYPE
IS
V_BANK_BAG_TICK_HIST          BANK_DEP_BAG_TICK_HIST%ROWTYPE;
V_BAG_COUNT                   NUMBER := 0;
V_DEPBAG_REORDER_QTY          NUMBER;
BEGIN
   -- this will check if there are any records on the current BANK_DEP_BAG_TICK table 
   -- if so push it to history
    BEGIN
        SELECT *
          INTO V_BANK_BAG_TICK_HIST
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER
           AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR;
       --push it to history and delete if there are current data present
       --current records need to be pushed to history for YTD calculation to see
       --if the order placed was in current year or prev
        TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(V_BANK_BAG_TICK_HIST);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
           NULL;
      END;
       
       --getting history record to calculate the current On hand quantity and YTD qauntity   
       SELECT *
         INTO V_BANK_BAG_TICK_HIST
         FROM BANK_DEP_BAG_TICK_HIST
        WHERE COST_CENTER_CODE = IN_COST_CENTER
          AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
          AND EFFECTIVE_DATE   = (SELECT MAX(EFFECTIVE_DATE) 
                                    FROM BANK_DEP_BAG_TICK_HIST
                                   WHERE COST_CENTER_CODE = IN_COST_CENTER
                                     AND BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR)
          AND ROWNUM < 2;
         
   --checking to see if the last order placed was in current year or previous
   --if previous start with 0
   IF IS_LAST_BAG_ORDER_FOR_CURR_YTD(IN_COST_CENTER,IN_BANK_ACCOUNT_NBR) = 'N' THEN
       V_BANK_BAG_TICK_HIST.DEPBAG_YTD_ORDERED_QTY := 0;
   END IF;
   --Check if there are any Bag orders placed for the cost center
   V_BAG_COUNT := 0;
   V_BAG_COUNT := GET_BAG_ORDER_COUNT(IN_COST_CENTER,IN_BANK_ACCOUNT_NBR, IN_FUTURE_ID);
   IF V_BAG_COUNT > 0 THEN
      --getting standard value incase there is null
      V_DEPBAG_REORDER_QTY     := GET_STANDARD_VAL_DEPOSIT_ORD('DEPBAG_REORDER_QTY');
      V_DEPBAG_REORDER_QTY     := NVL(IN_DEPBAG_REORDER_QTY,V_DEPBAG_REORDER_QTY);
      --every time it comes here calculate the on hand and ytd and single count
      V_BANK_BAG_TICK_HIST.DEPBAG_ONHAND_QTY      := NVL(V_BANK_BAG_TICK_HIST.DEPBAG_ONHAND_QTY,0) + V_DEPBAG_REORDER_QTY;
      V_BANK_BAG_TICK_HIST.DEPBAG_YTD_ORDERED_QTY := NVL(V_BANK_BAG_TICK_HIST.DEPBAG_YTD_ORDERED_QTY,0) + V_DEPBAG_REORDER_QTY;
   END IF;   
RETURN V_BANK_BAG_TICK_HIST;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_DEPOSIT_BAG_ONHAND_YTD;

FUNCTION GET_DEPOSIT_BAG_ONHAND_YTD(
/***********************************************************
	  This function will get the deposit bag old records
    --if in current will be moved into history
    From history to update the current records as the future will have 0's for DEPBAG_ONHAND_QTY
    and DEPBAG_YTD_ORDERED_QTY.
    When future moves to current, this need to run to update the two fields
Created : 10/30/2015 NXK927
Changed :
************************************************************/
    IN_COST_CENTER           IN     VARCHAR2,
    IN_DEPBAG_REORDER_QTY    IN     NUMBER,
    IN_FUTURE_ID             IN     NUMBER) RETURN BANK_DEP_BAG_TICK_HIST%ROWTYPE
IS
V_BANK_BAG_TICK_HIST          BANK_DEP_BAG_TICK_HIST%ROWTYPE;
V_BAG_COUNT                   NUMBER := 0;
V_DEPBAG_REORDER_QTY          NUMBER;
BEGIN
   -- this will check if there are any records on the current BANK_DEP_BAG_TICK table
   -- if so push it to history
    SELECT COUNT(*)
      INTO V_BAG_COUNT
      FROM BANK_DEP_BAG_TICK
     WHERE COST_CENTER_CODE = IN_COST_CENTER;

    IF V_BAG_COUNT <> 0 THEN
       SELECT *
         INTO V_BANK_BAG_TICK_HIST
         FROM BANK_DEP_BAG_TICK
        WHERE COST_CENTER_CODE = IN_COST_CENTER;
       --push it to history and delete if there are current data present
       --current records need to be pushed to history for YTD calculation to see
       --if the order placed was in current year or prev
       TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(V_BANK_BAG_TICK_HIST);
   END IF;

   --getting history record to calculate the current On hand quantity and YTD qauntity
   SELECT *
     INTO V_BANK_BAG_TICK_HIST
     FROM BANK_DEP_BAG_TICK_HIST
    WHERE COST_CENTER_CODE = IN_COST_CENTER
      AND EFFECTIVE_DATE   = (SELECT MAX(EFFECTIVE_DATE)
                                 FROM BANK_DEP_BAG_TICK_HIST
                                WHERE COST_CENTER_CODE = IN_COST_CENTER)
      AND ROWNUM < 2;

   --checking to see if the last order placed was in current year or previous
   --if previous start with 0
   IF IS_LAST_BAG_ORDER_FOR_CURR_YTD(IN_COST_CENTER) = 'N' THEN
       V_BANK_BAG_TICK_HIST.DEPBAG_YTD_ORDERED_QTY := 0;
   END IF;
   --Check if there are any Bag orders placed for the cost center
   V_BAG_COUNT := 0;
   V_BAG_COUNT := GET_BAG_ORDER_COUNT(IN_COST_CENTER, IN_FUTURE_ID);
   IF V_BAG_COUNT > 0 THEN
      --getting standard value incase there is null
      V_DEPBAG_REORDER_QTY     := GET_STANDARD_VAL_DEPOSIT_ORD('DEPBAG_REORDER_QTY');
      V_DEPBAG_REORDER_QTY     := NVL(IN_DEPBAG_REORDER_QTY,V_DEPBAG_REORDER_QTY);
      --every time it comes here calculate the on hand and ytd and single count
      V_BANK_BAG_TICK_HIST.DEPBAG_ONHAND_QTY      := NVL(V_BANK_BAG_TICK_HIST.DEPBAG_ONHAND_QTY,0) + V_DEPBAG_REORDER_QTY;
      V_BANK_BAG_TICK_HIST.DEPBAG_YTD_ORDERED_QTY := NVL(V_BANK_BAG_TICK_HIST.DEPBAG_YTD_ORDERED_QTY,0) + V_DEPBAG_REORDER_QTY;
   END IF;
RETURN V_BANK_BAG_TICK_HIST;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_DEPOSIT_BAG_ONHAND_YTD;

FUNCTION IS_LEAD_ON_DATE_PASSED(
/***********************************************************
	  This function will check if the cost center is lead or not
    on the date passed
Created : 11/09/2015 NXK927 CCN Project....
Changed : 11/17/2017 NXK927 CCN Project....
          removed rownum < 2 as it will always get one record
************************************************************/
    IN_COST_CENTER           IN     VARCHAR2,
    IN_EFFECTIVE_DATE        IN     DATE) RETURN VARCHAR2
IS
   V_RETURN_VAL VARCHAR2(1) := 'N';
BEGIN
  -- the effective date passed must be less or greater than that of the leads
  -- effective date or else it will return 'N'. 
  -- this check is to make sure we Should never add the member to the lead whose effective date is greater than members effective date
   SELECT CASE WHEN EFFECTIVE_DATE <= IN_EFFECTIVE_DATE THEN 'Y' ELSE 'N' END
        INTO V_RETURN_VAL      
        FROM (SELECT EFFECTIVE_DATE
                FROM LEAD_BANK_CC
               WHERE LEAD_STORE_NBR = IN_COST_CENTER
                 AND BANK_TYPE_CODE = 'L'
                 AND EXPIRATION_DATE IS NULL
              UNION
              SELECT EFFECTIVE_DATE
                FROM LEAD_BANK_CC_FUTURE
               WHERE LEAD_STORE_NBR = IN_COST_CENTER
                 AND BANK_TYPE_CODE = 'L'
                 AND EXPIRATION_DATE IS NULL);
   RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;      
END IS_LEAD_ON_DATE_PASSED;

FUNCTION GET_MBR_STORE_NBR_FOR_LEAD_STR(
/*******************************************************************************
  This function will get the all the member store details for the passed member store

Created : 06/19/2015 dxv848 CCN Project....
Changed : 
*******************************************************************************/
  IN_LEAD_STORE_NBR   IN MEMBER_BANK_CC.LEAD_STORE_NBR%TYPE) RETURN MEMBER_BANK_CC%ROWTYPE
IS
    V_MEMBER_STORE_REC  MEMBER_BANK_CC%ROWTYPE;
BEGIN
    SELECT * 
      INTO V_MEMBER_STORE_REC
      FROM MEMBER_BANK_CC
     WHERE MEMBER_STORE_NBR = IN_LEAD_STORE_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
    RETURN V_MEMBER_STORE_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;    
END GET_MBR_STORE_NBR_FOR_LEAD_STR;

FUNCTION GET_LEADBANK_FOR_BANKACC_NBR(
/*******************************************************************************
  This function will get the lead_store info for the bank account.

Created : 01/21/2015 dxv848 CCN Project....
Changed : 
*******************************************************************************/
  IN_BANK_ACCOUNT_NBR   IN LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE) RETURN LEAD_BANK_CC%ROWTYPE
IS
    V_LEAD_BANK_REC  LEAD_BANK_CC%ROWTYPE;
BEGIN
    SELECT * 
      INTO V_LEAD_BANK_REC
      FROM LEAD_BANK_CC
     WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_NBR
       AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE;
    RETURN V_LEAD_BANK_REC;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_LEADBANK_FOR_BANKACC_NBR;

END BANKING_COMMON_TOOLS;