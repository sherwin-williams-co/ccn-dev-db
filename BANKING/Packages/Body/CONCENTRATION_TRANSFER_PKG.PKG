CREATE OR REPLACE PACKAGE BODY CONCENTRATION_TRANSFER_PKG
AS
/**********************************************************
  This Package is intended to be the wrapper for all banking
  related packages that are invoked from UI

Created : 06/05/2015 nxk927/jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE LEAD_BANK_FROM_SP(
/*******************************************************************************
This procedure is intended to select records from Lead bank table including the 
members from the member bank table that we will be tranferred from.

Created : 06/05/2015 nxk927/jxc517 CCN Project....
Changed : 10/29/2015 jxc517 CCN Project....
          Modified code to include order by clause for member stores based on MEMBER_STORE_NBR
*******************************************************************************/
IN_COST_CENTER_CODE    IN     VARCHAR2,
OUT_REF_CUR            OUT REF_CURSOR,
OUT_REF_CUR1           OUT REF_CURSOR)
IS
    V_LEAD_BANK_CC_REC     LEAD_BANK_CC%ROWTYPE;
BEGIN
    V_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(
               NVL(BANKING_COMMON_TOOLS.GET_LEAD_STORE_NBR_FOR_MBR_STR(IN_COST_CENTER_CODE),
                   IN_COST_CENTER_CODE));
    IF V_LEAD_BANK_CC_REC.EXPIRATION_DATE IS NOT NULL THEN
        ERRPKG.RAISE_ERR(errnums.en_str_exprd_trnsfr_err,
                         'LEAD_BANK_FROM_SP',
                         'Transfer/Make Lead process not possible from an expired Lead store - '||V_LEAD_BANK_CC_REC.lead_store_nbr);
    END IF;
    OPEN OUT_REF_CUR FOR
        SELECT LB.*,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = LB.LEAD_STORE_NBR) LEAD_CC_NAME,
               BA.BANK_NAME
          FROM LEAD_BANK_CC LB,
               BANK_ACCOUNT BA
         WHERE LEAD_STORE_NBR      = V_LEAD_BANK_CC_REC.LEAD_STORE_NBR
           AND BA.BANK_ACCOUNT_NBR = LB.LEAD_BANK_ACCOUNT_NBR;
    OPEN OUT_REF_CUR1 FOR
        SELECT MEMBER_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = MEMBER_STORE_NBR) COST_CENTER_NAME
          FROM MEMBER_BANK_CC
         WHERE LEAD_STORE_NBR  = V_LEAD_BANK_CC_REC.LEAD_STORE_NBR
           AND NVL(EXPIRATION_DATE, SYSDATE + 1) > SYSDATE
           ORDER BY MEMBER_STORE_NBR;
END LEAD_BANK_FROM_SP;

PROCEDURE LEAD_BANK_TO_SP(
/*******************************************************************************
This procedure is intended to select records from Lead bank table and the
member bank table that we will tranfer the records to.

Created : 06/05/2015 nxk927/jxc517 CCN Project....
Changed : 07/08/2015 jxc517 CCN Project....
          Added condition to throw error if the "To Cost Center" entered is not a "I"/"L"
Changed : 10/09/2015 jxc517 CCN Project....
          Remove business rule code to stop displaying "To Lead" if a future exists
          Always display the latest unexpired "To Lead" for transfer screen
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to allow current 'I' lead if he is a lead (L) in future
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2,
OUT_REF_CUR            OUT REF_CURSOR)
IS
    V_LEAD_BANK_CC_REC     LEAD_BANK_CC%ROWTYPE;
BEGIN
    IF NVL(BANKING_COMMON_TOOLS.IS_STORE_LEAD_EVER(IN_COST_CENTER_CODE), 'N') <> 'Y' THEN
        --Even for independent we should through error as transfer is not applicable for independent leads
        ERRPKG.RAISE_ERR(errnums.en_cc_not_lead_ever,
                         'LEAD_BANK_TO_SP',
                         'Cost Center entered is not a Lead ever');
    END IF;

    OPEN OUT_REF_CUR FOR
        SELECT LB.LEAD_BANK_ACCOUNT_NBR,
               LB.LEAD_STORE_NBR,
               BA.BANK_NAME,
               LB.EFFECTIVE_DATE,
               LB.EXPIRATION_DATE,
               LB.BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE) AS COST_CENTER_NAME
          FROM LEAD_BANK_CC LB,
               BANK_ACCOUNT BA
         WHERE LB.LEAD_STORE_NBR   = IN_COST_CENTER_CODE
           AND BA.BANK_ACCOUNT_NBR = LB.LEAD_BANK_ACCOUNT_NBR
           AND LB.BANK_TYPE_CODE   = 'L'
           AND LB.EXPIRATION_DATE IS NULL
        UNION
        SELECT LBF.LEAD_BANK_ACCOUNT_NBR,
               LBF.LEAD_STORE_NBR,
               BAF.BANK_NAME,
               LBF.EFFECTIVE_DATE,
               LBF.EXPIRATION_DATE,
               LBF.BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE) AS COST_CENTER_NAME
          FROM LEAD_BANK_CC_FUTURE LBF,
               BANK_ACCOUNT_FUTURE BAF
         WHERE LBF.LEAD_STORE_NBR   = IN_COST_CENTER_CODE
           AND BAF.BANK_ACCOUNT_NBR = LBF.LEAD_BANK_ACCOUNT_NBR
           AND LBF.BANK_TYPE_CODE   = 'L'
           AND LBF.EXPIRATION_DATE IS NULL;
END LEAD_BANK_TO_SP;

PROCEDURE CREATE_BANK_ACCOUNT_RECORD(
/***********************************************************
This procedure is used to update and insert bank account information

Created : 07/15/2015 nxk927/jxc517 CCN Project....
Changed : 10/13/2015 jxc517 CCN Project....
          Added logic to use the existing effective date if the IN_EFFECTIVE_DATE is passes as NULL
          This change is to make sure, for transfer the futures are not created with new effective dates for
          existing details
          :rxa457 07/31/2017 CCN Project Team... 
           removed if condition for future ID and also the Else part 
            which handles multiple futures because 
            there will always be only one future with only possible future ID as 1
************************************************************/
IN_FUTURE_ID       IN     NUMBER,
IN_BANK_ACC_NBR    IN     VARCHAR2,
IN_EFFECTIVE_DATE  IN     DATE)
IS
    V_REC                BANK_ACCOUNT_FUTURE%ROWTYPE;
BEGIN
        SELECT B.*,
               IN_FUTURE_ID AS FUTURE_ID
          INTO V_REC
          FROM BANK_ACCOUNT B
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACC_NBR;
    V_REC.EFFECTIVE_DATE := NVL(IN_EFFECTIVE_DATE, V_REC.EFFECTIVE_DATE);
    V_REC.EXPIRATION_DATE:= NULL;
    V_REC.FUTURE_ID      := IN_FUTURE_ID;
    TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_I_SP(V_REC);
EXCEPTION
   WHEN OTHERS THEN
       ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_BANK_ACCOUNT_RECORD, ' || ' ' || 'FAILED TO CREATE BANK ACCOUNT - ' || SQLERRM);
END CREATE_BANK_ACCOUNT_RECORD;

PROCEDURE CREATE_BANK_MICR_FORMAT_RECORD(
/***********************************************************
This procedure is used to update and insert bank micr format information

Created : 09/10/2015 nxk927/jxc517 CCN Project....
Changed : 10/13/2015 jxc517 CCN Project....
          Added logic to use the existing effective date if the IN_EFFECTIVE_DATE is passes as NULL
          This change is to make sure, for transfer the futures are not created with new effective dates for
          existing details
        : rxa457 07/31/2017 CCN Project Team...
          removed if condition for future ID and also the Else part which handles multiple 
           futures because there will always be only one future with only possible future ID as 1
************************************************************/
IN_FUTURE_ID       IN     NUMBER,
IN_BANK_ACC_NBR    IN     VARCHAR2,
IN_EFFECTIVE_DATE  IN     DATE)
IS
BEGIN
        FOR rec IN (SELECT BANK_ACCOUNT_NBR,
                           FORMAT_NAME,
                           DJDE_FORM_PARM,
                           DJDE_FEED_PARM,
                           MICR_COST_CNTR,
                           MICR_ROUTING_NBR,
                           MICR_FORMAT_ACTNBR,
                           EFFECTIVE_DATE,
                           EXPIRATION_DATE,
                           LAST_MAINTENANCE_DATE,
                           LAST_MAINT_USER_ID,
                           UPDATE_DATE,
                           LAST_UPD_USER_ID,
                           IN_FUTURE_ID AS FUTURE_ID,
                           MICR_FORMAT_ID
                      FROM BANK_MICR_FORMAT B
                     WHERE BANK_ACCOUNT_NBR = IN_BANK_ACC_NBR) LOOP
            rec.EFFECTIVE_DATE := NVL(IN_EFFECTIVE_DATE, rec.EFFECTIVE_DATE);
            rec.EXPIRATION_DATE:= NULL;
            rec.FUTURE_ID      := IN_FUTURE_ID;
            TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_I_SP(rec);
        END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_BANK_MICR_FORMAT_RECORD, ' || ' ' || 'FAILED TO CREATE BANK ACCOUNT - ' || SQLERRM);
END CREATE_BANK_MICR_FORMAT_RECORD;

PROCEDURE CREATE_LEAD_BANK_CC_RECORD(
/***********************************************************
This procedure is used to update and insert lead information

Created : 07/15/2015 nxk927/jxc517 CCN Project....
Changed : 10/13/2015 jxc517 CCN Project....
          Added logic to use the existing effective date if the IN_EFFECTIVE_DATE is passes as NULL
          This change is to make sure, for transfer the futures are not created with new effective dates for
          existing details
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 11/20/2015 nxk927 CCN Project....
          passing the effective as it is sent as for virtual lead we are passing the 
          effective date as null. This should take the same date from the prev record.
          This is for the virtual future
        : rxa457 07/28/2017 CCN Project Team...
          Virtual Insert calls to INSERT_BANK_DEPOSIT_DTLS_FTR and INSERT_BANK_DEP_BAG_DTLS_FTR 
           from transfer process through CREATE_TRANSFER_FUTURE_PROCESS will be skipped
        : axt754 09/13/2017 Made BANK_BRANCH_NBR as NULL, since it should not move along LEAD_STORE_NBR
************************************************************/
IN_FUTURE_ID           IN     NUMBER,
IN_TO_LEAD_CC          IN     VARCHAR2,
IN_LEAD_BANK_CC_REC    IN     LEAD_BANK_CC%ROWTYPE,
IN_EFFECTIVE_DATE      IN     DATE,
IN_USER_ID             IN     VARCHAR2)
IS
    V_REC      LEAD_BANK_CC_FUTURE%ROWTYPE;
BEGIN
    V_REC.LEAD_BANK_ACCOUNT_NBR := IN_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    V_REC.LEAD_STORE_NBR        := IN_TO_LEAD_CC;
    V_REC.EFFECTIVE_DATE        := NVL(IN_EFFECTIVE_DATE, IN_LEAD_BANK_CC_REC.EFFECTIVE_DATE);
    V_REC.EXPIRATION_DATE       := NULL;
    V_REC.BANK_BRANCH_NBR       := NULL;
    V_REC.BANK_TYPE_CODE        := 'L';
    V_REC.UPDATE_DATE           := SYSDATE;
    V_REC.LAST_UPD_USER_ID      := IN_USER_ID;
    V_REC.FUTURE_ID             := IN_FUTURE_ID;
    TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_I_SP(V_REC);
    IF  NVL(IN_EFFECTIVE_DATE,TRUNC(SYSDATE)) > TRUNC(SYSDATE) THEN
        DEPOSIT_TICKET_MAINTENANCE_PKG.INSERT_BANK_DEPOSIT_DTLS_FTR(V_REC.LEAD_STORE_NBR,
                                                                    V_REC.LEAD_BANK_ACCOUNT_NBR,
                                                                    V_REC.FUTURE_ID,
                                                                    IN_EFFECTIVE_DATE,
                                                                    V_REC.EXPIRATION_DATE,
                                                                    V_REC.BANK_TYPE_CODE);
        DEPOSIT_BAG_MAINTENANCE_PKG.INSERT_BANK_DEP_BAG_DTLS_FTR(V_REC.LEAD_STORE_NBR,
                                                                 V_REC.LEAD_BANK_ACCOUNT_NBR,
                                                                 V_REC.FUTURE_ID,
                                                                 IN_EFFECTIVE_DATE,
                                                                 V_REC.EXPIRATION_DATE);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_LEAD_BANK_CC_RECORD, ' || ' ' || 'FAILED TO CREATE LEAD - ' || SQLERRM);
END CREATE_LEAD_BANK_CC_RECORD;

PROCEDURE CREATE_MBR_BANK_CC_RECORDS(
/***********************************************************
This procedure is used to update and insert member information

Created : 07/15/2015 nxk927/jxc517 CCN Project....
Changed : 10/13/2015 jxc517 CCN Project....
          Added logic to use the existing effective date if the IN_EFFECTIVE_DATE is passes as NULL
          This change is to make sure, for transfer the futures are not created with new effective dates for
          existing details
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 09/15/2017 axt754 Made BANK_BRANCH_NBR as NULL, since it should not move along MBR_STORE_NBR
************************************************************/
IN_FUTURE_ID           IN     NUMBER,
IN_TO_LEAD_CC          IN     VARCHAR2,
IN_LEAD_BANK_CC_REC    IN     LEAD_BANK_CC%ROWTYPE,
IN_EFFECTIVE_DATE      IN     DATE,
IN_USER_ID             IN     VARCHAR2)
IS
BEGIN
    FOR rec IN (SELECT MB.*,
                       0 FUTURE_ID
                  FROM MEMBER_BANK_CC MB
                 WHERE LEAD_STORE_NBR = IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR) LOOP
        rec.LEAD_STORE_NBR   := IN_TO_LEAD_CC;
        rec.EFFECTIVE_DATE   := NVL(IN_EFFECTIVE_DATE, rec.EFFECTIVE_DATE);
        rec.EXPIRATION_DATE  := NULL; -- Assignment for understanding - it will always be null for make lead processes
        rec.UPDATE_DATE      := SYSDATE;
        rec.LAST_UPD_USER_ID := IN_USER_ID;
        rec.FUTURE_ID        := IN_FUTURE_ID;
        rec.BANK_BRANCH_NBR  := NULL;
        IF rec.MEMBER_STORE_NBR <> IN_TO_LEAD_CC THEN
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(rec);
            DEPOSIT_TICKET_MAINTENANCE_PKG.INSERT_BANK_DEPOSIT_DTLS_FTR(rec.MEMBER_STORE_NBR,
                                                                        rec.LEAD_BANK_ACCOUNT_NBR,
                                                                        rec.FUTURE_ID,
                                                                        rec.EFFECTIVE_DATE,
                                                                        rec.EXPIRATION_DATE,
                                                                        'M');
            DEPOSIT_BAG_MAINTENANCE_PKG.INSERT_BANK_DEP_BAG_DTLS_FTR(rec.MEMBER_STORE_NBR,
                                                                     rec.LEAD_BANK_ACCOUNT_NBR,
                                                                     rec.FUTURE_ID,
                                                                     rec.EFFECTIVE_DATE,
                                                                     rec.EXPIRATION_DATE);
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_MBR_BANK_CC_RECORDS, ' || ' ' || 'FAILED TO CREATE MEMBERS - ' || SQLERRM);
END CREATE_MBR_BANK_CC_RECORDS;

PROCEDURE CREATE_MAKE_LEAD_FTR_PROCESS(
/***********************************************************
This procedure will be called to make lead process to create all future tables data

Created : 09/22/2015 jxc517 CCN Project Team....
Changed : 01/15/2016 dxv848 CCN Project....
          moved EXPIRE_PREVIOUS_BANK_ACCOUNT procedure to ACC_MEM_MAIN_COMMONTOOLS package
************************************************************/
IN_FROM_LEAD_BANK_REC     IN     LEAD_BANK_CC%ROWTYPE,
IN_NEW_LEAD_CC            IN     VARCHAR2,
IN_EFFECTIVE_DATE         IN     DATE,
IN_USER_ID                IN     VARCHAR2)
IS
    V_FROM_LEAD_BANK_REC LEAD_BANK_CC%ROWTYPE := IN_FROM_LEAD_BANK_REC;
    V_FUTURE_ID          MEMBER_BANK_CC_FUTURE.FUTURE_ID%TYPE;
    V_TO_LEAD_CC         VARCHAR2(6) := IN_NEW_LEAD_CC;
BEGIN
    V_FUTURE_ID := BANKING_COMMON_TOOLS.GET_FUTURE_ID(V_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR);
    ACC_MEM_MAIN_COMMONTOOLS.EXPIRE_PREVIOUS_BANK_ACCOUNT(V_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR,
                                                         IN_EFFECTIVE_DATE,
                                                         'MAKE_LEAD');
    CREATE_BANK_ACCOUNT_RECORD(V_FUTURE_ID,
                               V_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR,
                               IN_EFFECTIVE_DATE);
    CREATE_BANK_MICR_FORMAT_RECORD(V_FUTURE_ID,
                                   V_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR,
                                   IN_EFFECTIVE_DATE);
    CREATE_LEAD_BANK_CC_RECORD(V_FUTURE_ID,
                               V_TO_LEAD_CC,
                               V_FROM_LEAD_BANK_REC,
                               IN_EFFECTIVE_DATE,
                               IN_USER_ID);
    CREATE_MBR_BANK_CC_RECORDS(V_FUTURE_ID,
                               V_TO_LEAD_CC,
                               V_FROM_LEAD_BANK_REC,
                               IN_EFFECTIVE_DATE,
                               IN_USER_ID);
EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_MAKE_LEAD_FTR_PROCESS, ' || ' ' || 'FAILED - ' || SQLERRM);
END CREATE_MAKE_LEAD_FTR_PROCESS;

PROCEDURE CREATE_MAKE_LEAD_CURR_PROCESS ( 
/******************************************************************************
	This procedure will be called to make lead process to create all current tables data

Created : 09/22/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
Changed : 10/22/2015 jxc517 CCN Project....
          When deleting a member we need to delete it's child records as well
        : 01/07/2017 mxk766 add logic to capture generated POS_ID'S which are used to
          generate files for the POS system.
        : 09/13/2017 axt754 Made BANK_BRANCH_NBR as NULL, Since it should not move along LEAD_STORE_NBR
*******************************************************************************/
IN_FROM_LEAD_BANK_REC     IN     LEAD_BANK_CC%ROWTYPE,
IN_NEW_LEAD_CC            IN     VARCHAR2,
IN_EFFECTIVE_DATE         IN     DATE,
IN_USER_ID                IN     VARCHAR2)
IS
    CURSOR lead_bank_cc_cur IS 
        SELECT *
          FROM LEAD_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR;
    CURSOR mbr_bank_cc_cur(IN_LEAD_STORE_NBR IN VARCHAR2) IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR;
    CURSOR store_micr_format_dtls_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_tick_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    CURSOR bank_dep_tickord_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICKORD
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;
    V_FROM_BANK_ACCOUNT_REC BANK_ACCOUNT%ROWTYPE;
    V_NEW_LEAD_BANK_CC_REC  LEAD_BANK_CC%ROWTYPE;

BEGIN
    V_FROM_BANK_ACCOUNT_REC := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(IN_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR,
                                                                              IN_FROM_LEAD_BANK_REC.EFFECTIVE_DATE);
    TABLE_IU_PKG.BANK_ACCOUNT_HIST_I_SP(V_FROM_BANK_ACCOUNT_REC);
    FOR lead_bank_cc_rec IN lead_bank_cc_cur LOOP
        V_NEW_LEAD_BANK_CC_REC := lead_bank_cc_rec;
        V_NEW_LEAD_BANK_CC_REC.LEAD_STORE_NBR        := IN_NEW_LEAD_CC;
        V_NEW_LEAD_BANK_CC_REC.EFFECTIVE_DATE        := SYSDATE;
        V_NEW_LEAD_BANK_CC_REC.EXPIRATION_DATE       := NULL;
        V_NEW_LEAD_BANK_CC_REC.BANK_BRANCH_NBR       := NULL;
        V_NEW_LEAD_BANK_CC_REC.UPDATE_DATE           := SYSDATE;
        V_NEW_LEAD_BANK_CC_REC.LAST_UPD_USER_ID      := IN_USER_ID;
        TABLE_IU_PKG.LEAD_BANK_CC_I_SP(V_NEW_LEAD_BANK_CC_REC);
        POS_DATA_GENERATION.POS_MASTER_SP(V_NEW_LEAD_BANK_CC_REC.LEAD_STORE_NBR);
        FOR mbr_bank_cc_rec IN mbr_bank_cc_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
            FOR rec IN store_micr_format_dtls_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_D_SP(rec);
                rec.EFFECTIVE_DATE := SYSDATE;
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(rec);
            END LOOP;
            FOR rec IN bank_dep_tick_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICK_D_SP(rec);
                rec.EFFECTIVE_DATE := SYSDATE;
                TABLE_IU_PKG.BANK_DEP_TICK_I_SP(rec);
            END LOOP;
            FOR rec IN bank_dep_tickord_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                TABLE_IU_PKG.BANK_DEP_TICKORD_D_SP(rec);
                rec.EFFECTIVE_DATE := SYSDATE;
                TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(rec);
            END LOOP;
            TABLE_IU_PKG.MEMBER_BANK_CC_D_SP(mbr_bank_cc_rec);
            DEPOSIT_TICKET_MAINTENANCE_PKG.DELETE_STORE_MICR_FORMAT_DTLS(mbr_bank_cc_rec.MEMBER_STORE_NBR, NULL, NULL);
            DEPOSIT_BAG_MAINTENANCE_PKG.DELETE_DEPOSIT_BAG_DTLS(mbr_bank_cc_rec.MEMBER_STORE_NBR);
            IF mbr_bank_cc_rec.MEMBER_STORE_NBR <> IN_NEW_LEAD_CC THEN
                mbr_bank_cc_rec.LEAD_STORE_NBR := IN_NEW_LEAD_CC;
                mbr_bank_cc_rec.EFFECTIVE_DATE := SYSDATE;
                mbr_bank_cc_rec.EXPIRATION_DATE  := NULL;
                mbr_bank_cc_rec.BANK_BRANCH_NBR  := NULL;
                mbr_bank_cc_rec.UPDATE_DATE      := SYSDATE;
                mbr_bank_cc_rec.LAST_UPD_USER_ID := IN_USER_ID;
                TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_rec);
                POS_DATA_GENERATION.POS_MASTER_SP(mbr_bank_cc_rec.MEMBER_STORE_NBR);
            END IF;
        END LOOP;
        DEPOSIT_TICKET_MAINTENANCE_PKG.DELETE_STORE_MICR_FORMAT_DTLS(lead_bank_cc_rec.LEAD_STORE_NBR, NULL, NULL);
        DEPOSIT_BAG_MAINTENANCE_PKG.DELETE_DEPOSIT_BAG_DTLS(lead_bank_cc_rec.LEAD_STORE_NBR);
        TABLE_IU_PKG.LEAD_BANK_CC_D_SP(lead_bank_cc_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_MAKE_LEAD_CURR_PROCESS ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CREATE_MAKE_LEAD_CURR_PROCESS;

PROCEDURE MAKE_LEAD_PROCESS(
/***********************************************************
This procedure is used to make a member with in a lead as "Lead" for
all the members under that lead for future

This Procdedure does the following
1) Makes the Member selected in the UI as the LEAD for future date
2) Updates the expiration date to expire the current lead and member on the date passed (effective -1)
3) Inserts the Member as the New Lead in the future table
4) Inserts all the members from the current Lead under the New lead in the future table

Created : 06/09/2015 nxk927/jxc517 CCN Project....
Changed : 09/28/2015 sxh487 Added logic to delete the future 
          and Un-Expires the current records that have a future
          if an expired member with future is transferred again
        : 01/15/2016 dxv848 CCN Project....
          moved ACCNT_MNTNC_UI_DELETE_SP and ACCNT_MNTNC_UNEXPIRE_SP
          procedures to ACC_MEM_MAIN_COMMONTOOLS package
************************************************************/
IN_MAKE_LEAD_FLAG            IN     VARCHAR2,
IN_NEW_LEAD_CC               IN     VARCHAR2,
IN_USER_ID                   IN     VARCHAR2,
IN_EFFECTIVE_DATE            IN     DATE)
IS
    V_TO_LEAD_CC                 VARCHAR2(6) := IN_NEW_LEAD_CC;
    V_FROM_LEAD_CC               VARCHAR2(6);
    V_FROM_LEAD_BANK_REC         LEAD_BANK_CC%ROWTYPE;
    V_TEMP_LEAD_BANK_ACCOUNT_NBR LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
BEGIN
    V_FROM_LEAD_CC := BANKING_COMMON_TOOLS.GET_LEAD_STORE_NBR_FOR_MBR_STR(V_TO_LEAD_CC);
    V_FROM_LEAD_BANK_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(V_FROM_LEAD_CC);
    IF NVL(IN_MAKE_LEAD_FLAG, 'N')  = 'N' THEN
       BUSINESS_RULES_PKG.MAKE_LEAD_BR_SP(V_FROM_LEAD_CC,
                                          IN_EFFECTIVE_DATE);
    END IF;
    FOR each_mbr IN (SELECT *
                       FROM MEMBER_BANK_CC_FUTURE
                      WHERE MEMBER_STORE_NBR IN (SELECT MEMBER_STORE_NBR
                                                   FROM MEMBER_BANK_CC
                                                  WHERE LEAD_STORE_NBR = V_FROM_LEAD_CC)
                      ORDER BY LEAD_BANK_ACCOUNT_NBR, FUTURE_ID) LOOP
         IF NVL(V_TEMP_LEAD_BANK_ACCOUNT_NBR, 'XXX') <> each_mbr.LEAD_BANK_ACCOUNT_NBR THEN
             V_TEMP_LEAD_BANK_ACCOUNT_NBR := each_mbr.LEAD_BANK_ACCOUNT_NBR;
             --Delete all the futures for this Bank Account
             ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(V_TEMP_LEAD_BANK_ACCOUNT_NBR, each_mbr.FUTURE_ID);
             --Re-Activate the expired records
             ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(V_FROM_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR);
        END IF;
    END LOOP;
    IF TRUNC(IN_EFFECTIVE_DATE) > TRUNC(SYSDATE) THEN
        CREATE_MAKE_LEAD_FTR_PROCESS(V_FROM_LEAD_BANK_REC, V_TO_LEAD_CC, IN_EFFECTIVE_DATE, IN_USER_ID);
    ELSE
        CREATE_MAKE_LEAD_CURR_PROCESS(V_FROM_LEAD_BANK_REC, V_TO_LEAD_CC, IN_EFFECTIVE_DATE, IN_USER_ID);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MAKE_LEAD_PROCESS, ' || ' ' || 'FAILED TO MAKE LEAD - ' || SQLERRM);
END MAKE_LEAD_PROCESS;

PROCEDURE CREATE_TRNSFR_MBR_BANK_CC_RECS(
/***********************************************************
This procedure is used to update and insert member information for transfer process

Created : 09/17/2015 jxc517 CCN Project....
Changed : 10/13/2015 jxc517 CCN Project....
          Added logic to use the existing effective date if the IN_EFFECTIVE_DATE is passes as NULL
          This change is to make sure, for transfer the futures are not created with new effective dates for
          existing details
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 07/28/2017 rxa457 CCN Project....
           Virtual Insert calls to INSERT_BANK_DEPOSIT_DTLS_FTR and INSERT_BANK_DEP_BAG_DTLS_FTR removed
           removed unused IN parameter IN_EFFECTIVE_DATE
           removed if condition for future ID and 
            also the Else part which handles multiple futures because 
            there will always be only one future with only possible future ID as 1
        : 09/15/2017 axt754 Made BANK_BRANCH_NBR as NULL, since it should not move along MBR_STORE_NBR
************************************************************/
IN_FUTURE_ID           IN     NUMBER,
IN_LEAD_BANK_CC_REC    IN     LEAD_BANK_CC%ROWTYPE,
IN_USER_ID             IN     VARCHAR2)
IS
BEGIN
        FOR rec IN (SELECT MB.*,
                           0 FUTURE_ID
                      FROM MEMBER_BANK_CC MB
                     WHERE LEAD_STORE_NBR = IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR) LOOP
            rec.UPDATE_DATE      := SYSDATE;
            rec.LAST_UPD_USER_ID := IN_USER_ID;
            rec.FUTURE_ID        := IN_FUTURE_ID;
            rec.BANK_BRANCH_NBR  := NULL;
            TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(rec);
        END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_TRNSFR_MBR_BANK_CC_RECS, ' || ' ' || 'FAILED TO CREATE MEMBERS - ' || SQLERRM);
END CREATE_TRNSFR_MBR_BANK_CC_RECS;

PROCEDURE CREATE_TRANSFER_FUTURE_PROCESS(
/***********************************************************
This procedure will be called to transfer process to create all future tables data

Created : 09/16/2015 axk326 CCN Project Team....
Changed : 
************************************************************/
IN_MEMBER_BANK_CC_REC   IN     MEMBER_BANK_CC%ROWTYPE,
IN_TO_LEAD_BANK_REC     IN     LEAD_BANK_CC%ROWTYPE,
OUT_FUTURE_ID              OUT NUMBER)
IS
    V_FUTURE_ID               MEMBER_BANK_CC_FUTURE.FUTURE_ID%TYPE;
    V_TO_LEAD_BANK_REC        LEAD_BANK_CC%ROWTYPE := IN_TO_LEAD_BANK_REC;
BEGIN
    V_FUTURE_ID := BANKING_COMMON_TOOLS.GET_FUTURE_ID(V_TO_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR);
    CREATE_BANK_ACCOUNT_RECORD(V_FUTURE_ID,
                               V_TO_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR,
                               NULL);
    CREATE_BANK_MICR_FORMAT_RECORD(V_FUTURE_ID,
                                   V_TO_LEAD_BANK_REC.LEAD_BANK_ACCOUNT_NBR,
                                   NULL);
    CREATE_LEAD_BANK_CC_RECORD(V_FUTURE_ID,
                               V_TO_LEAD_BANK_REC.LEAD_STORE_NBR,
                               V_TO_LEAD_BANK_REC,
                               NULL,
                               IN_MEMBER_BANK_CC_REC.LAST_UPD_USER_ID);
    CREATE_TRNSFR_MBR_BANK_CC_RECS(V_FUTURE_ID,
                                   V_TO_LEAD_BANK_REC,
                                   IN_MEMBER_BANK_CC_REC.LAST_UPD_USER_ID);
    OUT_FUTURE_ID := V_FUTURE_ID;
EXCEPTION
    WHEN OTHERS THEN
       ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_TRANSFER_FUTURE_PROCESS, ' || ' ' || 'FAILED - ' || SQLERRM);
END CREATE_TRANSFER_FUTURE_PROCESS;

FUNCTION GET_EFFECTIVE_DATE_FOR_MBR(
/*******************************************************************************
This function will return the effective date provided in the XML for the passed member store

Created : 09/16/2015 axk326 CCN Project....
Changed : 
*******************************************************************************/
    IN_XML              IN     XMLTYPE,
    IN_MEMBER_STORE_NBR IN     VARCHAR2) RETURN DATE
IS
    V_RETURN_VAL DATE;
BEGIN
    SELECT TO_DATE(EFFECTIVE_DATE,'MM-DD-YYYY HH12:MI:SS AM')
      INTO V_RETURN_VAL
      FROM XMLTABLE ('/MEMBER_TRANSFER_UI/MEMBER_STORES/MEMBER'
                     PASSING IN_XML
                     COLUMNS MEMBER_STORE_NBR VARCHAR2(6) PATH 'MEMBER_STORE_NBR/text()',
                             EFFECTIVE_DATE VARCHAR2(24) PATH 'EFFECTIVE_DATE/text()')
     WHERE MEMBER_STORE_NBR = IN_MEMBER_STORE_NBR;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_EFFECTIVE_DATE_FOR_MBR;

PROCEDURE CREATE_TRNSFR_MBR_BANK_CC_REC(
/***********************************************************
This procedure is used to update and insert member information for transfer process

Created : 09/17/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
Changed : 10/26/2015 jxc517 CCN Project....
          Code has been changed to remove business rules for member while transfer/make lead process
          reaason beign the data from where the members are moving is not updated yet
        : 09/15/2017 axt754 Made BANK_BRANCH_NBR as NULL, since it should not move along MBR_STORE_NBR
************************************************************/
IN_FUTURE_ID           IN     NUMBER,
IN_MBR_BANK_CC_REC     IN     MEMBER_BANK_CC%ROWTYPE)
IS
    V_REC                           MEMBER_BANK_CC_FUTURE%ROWTYPE;
BEGIN
    V_REC.LEAD_BANK_ACCOUNT_NBR    := IN_MBR_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR;
    V_REC.LEAD_STORE_NBR           := IN_MBR_BANK_CC_REC.LEAD_STORE_NBR;
    V_REC.MEMBER_STORE_NBR         := IN_MBR_BANK_CC_REC.MEMBER_STORE_NBR;
    V_REC.EFFECTIVE_DATE           := IN_MBR_BANK_CC_REC.EFFECTIVE_DATE;
    V_REC.EXPIRATION_DATE          := IN_MBR_BANK_CC_REC.EXPIRATION_DATE;
    V_REC.MEMBER_BANK_ACCOUNT_NBR  := IN_MBR_BANK_CC_REC.MEMBER_BANK_ACCOUNT_NBR;
    V_REC.BANK_BRANCH_NBR          := NULL;
    V_REC.UPDATE_DATE              := IN_MBR_BANK_CC_REC.UPDATE_DATE;
    V_REC.LAST_UPD_USER_ID         := IN_MBR_BANK_CC_REC.LAST_UPD_USER_ID;
    V_REC.FUTURE_ID                := IN_FUTURE_ID;
    TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(V_REC);
    DEPOSIT_TICKET_MAINTENANCE_PKG.INSERT_BANK_DEPOSIT_DTLS_FTR(V_REC.MEMBER_STORE_NBR,
                                                                V_REC.LEAD_BANK_ACCOUNT_NBR,
                                                                V_REC.FUTURE_ID,
                                                                V_REC.EFFECTIVE_DATE,
                                                                V_REC.EXPIRATION_DATE,
                                                                'M');
    DEPOSIT_BAG_MAINTENANCE_PKG.INSERT_BANK_DEP_BAG_DTLS_FTR(V_REC.MEMBER_STORE_NBR,
                                                             V_REC.LEAD_BANK_ACCOUNT_NBR,
                                                             V_REC.FUTURE_ID,
                                                             V_REC.EFFECTIVE_DATE,
                                                             V_REC.EXPIRATION_DATE);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_TRNSFR_MBR_BANK_CC_REC, ' || ' ' || 'FAILED TO CREATE MEMBERS - ' || SQLERRM);
END CREATE_TRNSFR_MBR_BANK_CC_REC;

FUNCTION IS_FTR_LEAD_EXISTS(
/***********************************************************
This function will return "Y" if a future lead exisst fro the date passed in,
else it returns "N"

Created : 10/09/2015 jxc517 CCN Project....
Changed : 11/24/2015 nxk927 CCN Project....
          changed the name as the requirement changed
************************************************************/
IN_REC        IN     MEMBER_BANK_CC%ROWTYPE,
OUT_FUTURE_ID    OUT NUMBER) RETURN VARCHAR2
IS
    V_RETURN_VAL     VARCHAR2(1) := 'N';
BEGIN
    SELECT FUTURE_ID
      INTO OUT_FUTURE_ID
      FROM LEAD_BANK_CC_FUTURE
     WHERE LEAD_STORE_NBR        = IN_REC.LEAD_STORE_NBR
       AND LEAD_BANK_ACCOUNT_NBR = IN_REC.LEAD_BANK_ACCOUNT_NBR
       AND EXPIRATION_DATE IS NULL;
       --AND IN_REC.EFFECTIVE_DATE BETWEEN EFFECTIVE_DATE AND NVL(EXPIRATION_DATE, IN_REC.EFFECTIVE_DATE);
    IF OUT_FUTURE_ID IS NOT NULL THEN
        V_RETURN_VAL := 'Y';
    END IF;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END IS_FTR_LEAD_EXISTS;

PROCEDURE LEAD_TRANSFER_PROCESS(
/***********************************************************
This procedure is used to transfer member from one lead to another

This Procdedure does the following
1) Makes the new lead selected in the UI as the LEAD
2) Deletes all the members from the Old Lead and pushes to history
3) Deletes the current lead from the Lead table and pushes to history
4) Inserts the new cost center as the New Lead
5) Inserts all the members from the old Lead under the New lead

Created : 06/09/2015 nxk927/jxc517 CCN Project....
Changed : 08/13/2015 nxk927 removed trunc from trunc(sysdate) to accept the time stamp
        : 09/16/2015 axk326 CCN Project....
          Added Effective_Date for Member cost center transfer process
        : 09/28/2015 sxh487 Added logic to delete the future 
          and Un-Expires the current records that have a future
          if an expired member with future is transferred again
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures          
Changed : 10/23/2015 jxc517 CCN Project....
          Code has been changed to deal with below scenario
          Perform a transfer from A to B, then select B (which has a virtual future) and do another transfer
          from B to C - members should sync in current and future of the member tables
Changed : 10/22/2015 jxc517 CCN Project....
          When deleting a member we need to delete it's child records as well
Changed : 10/26/2015 jxc517 CCN Project....
          Code has been changed to remove business rules for member while transfer/make lead process
          reaason beign the data from where the members are moving is not updated yet
Changed : 11/09/2015 jxc517 CCN Project....
          Code has been changed to wipe out the sub account details for the member being transferred
Changed : 11/11/2015 nxk927 CCN Project....
          check if the lead is expired. If expired pull the unexpired lead record from future table         
Changed : 11/12/2015 nxk927 CCN Project....
          if lead is virtual and new record inserted in current then insert in virtual as well
        : 01/15/2016 dxv848 CCN Project....
          moved ACCNT_MNTNC_UI_DELETE_SP, ACCNT_MNTNC_UNEXPIRE_SP, ACCNT_MNTNC_EXP_DELETE_SP,
          ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP procedures to ACC_MEM_MAIN_COMMONTOOLS package
        : 01/07/2017 mxk766 add logic to generate files for the POS system.
Changed : rxa457 07/31/2017 CCN Project Team...
          Call to IS_REAL_FUTURE_BANK_ACCOUNT changed as VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_REAL_FUTURE_BANK_ACCOUNT 
           from "ACC_MEM_MAIN_COMMONTOOLS.IS_REAL_FUTURE_BANK_ACCOUNT"
************************************************************/
IN_TRANSFER_FLAG          IN VARCHAR2,
IN_XML                    CLOB)
IS
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_USER_ID                       VARCHAR2(6);
    V_FROM_LEAD_CC                  VARCHAR2(6); 
    V_TO_LEAD_CC                    VARCHAR2(6);
    V_FROM_LEAD_BANK_CC_REC         LEAD_BANK_CC%ROWTYPE;
    V_FROM_BANK_ACCOUNT_REC         BANK_ACCOUNT%ROWTYPE;
    V_TO_LEAD_BANK_CC_REC           LEAD_BANK_CC%ROWTYPE;
    V_TO_LEAD_BANK_CC_FUT_REC       LEAD_BANK_CC_FUTURE%ROWTYPE;
    V_MEMBER_BANK_CC_REC            MEMBER_BANK_CC%ROWTYPE;
    V_MEMBER_BANK_CC_FUT_REC        MEMBER_BANK_CC_FUTURE%ROWTYPE;
    V_EXPIRE_DATE                   DATE;
    V_TEMP_EFFECTIVE_DATE           DATE;
    V_FUTURE_ID                     NUMBER;
    V_TEMP_LEAD_BANK_ACCOUNT_NBR    LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_MBR_BANK_CC_TAB               TABLE_IU_PKG.MEMBER_BANK_CC_TAB_TYPE;
    V_LEAD_BANK_ACCOUNT_NBR         LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;

BEGIN
    IF NVL(IN_TRANSFER_FLAG, 'N') = 'N' THEN
       BUSINESS_RULES_PKG.LEAD_TRANSFER_BR_SP(IN_XML);
    END IF;
    IF (V_ROW_DATA.EXISTSNODE('/MEMBER_TRANSFER_UI/USER_ID/text()') = 1) THEN
        V_USER_ID := V_ROW_DATA.EXTRACT('/MEMBER_TRANSFER_UI/USER_ID/text()').GETSTRINGVAL();  
    END IF;
    IF (V_ROW_DATA.EXISTSNODE('/MEMBER_TRANSFER_UI/FROM_LEAD_CC/text()') = 1) THEN
        V_FROM_LEAD_CC := V_ROW_DATA.EXTRACT('/MEMBER_TRANSFER_UI/FROM_LEAD_CC/text()').GETSTRINGVAL();  
    END IF;
    IF (V_ROW_DATA.EXISTSNODE('/MEMBER_TRANSFER_UI/TO_LEAD_CC/text()') = 1) THEN
        V_TO_LEAD_CC := V_ROW_DATA.EXTRACT('/MEMBER_TRANSFER_UI/TO_LEAD_CC/text()').GETSTRINGVAL();  
    END IF;
    V_TO_LEAD_BANK_CC_REC     := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(V_TO_LEAD_CC);
    --IF the Lead is expired then we have to get the new record from future
    IF V_TO_LEAD_BANK_CC_REC.EXPIRATION_DATE IS NOT NULL THEN 
       V_TO_LEAD_BANK_CC_FUT_REC                   := BANKING_COMMON_TOOLS.GET_UNEXP_LEAD_CC_FUTURE_REC(V_TO_LEAD_CC);
    END IF;
    --If it satisfies the above condition as the previous rec was expired then we will use the LEAD_BANK_ACCOUNT_NBR from future
    V_LEAD_BANK_ACCOUNT_NBR := NVL(V_TO_LEAD_BANK_CC_FUT_REC.LEAD_BANK_ACCOUNT_NBR, V_TO_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
    V_FROM_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(V_FROM_LEAD_CC);
    V_FROM_BANK_ACCOUNT_REC := BANKING_COMMON_TOOLS.GET_BANK_ACCOUNT_HIST_REC(V_FROM_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR,
                                                                              V_FROM_LEAD_BANK_CC_REC.EFFECTIVE_DATE);
    TABLE_IU_PKG.BANK_ACCOUNT_HIST_I_SP(V_FROM_BANK_ACCOUNT_REC);
    TABLE_IU_PKG.LEAD_BANK_CC_HIST_I_SP(V_FROM_LEAD_BANK_CC_REC);
    --Delete and Un-Expire the LEAD for another Transfer
    FOR each_lead IN (SELECT *
                       FROM LEAD_BANK_CC_FUTURE
                      WHERE LEAD_STORE_NBR IN (SELECT MEMBER_STORE_NBR
                                                 FROM MEMBER_BANK_CC
                                                WHERE LEAD_STORE_NBR = V_FROM_LEAD_CC
                                                  AND EXPIRATION_DATE IS NOT NULL
                                                  AND MEMBER_STORE_NBR IN
                                                              (SELECT MEMBER_STORE_NBR
                                                                 FROM XMLTABLE ('/MEMBER_TRANSFER_UI/MEMBER_STORES/MEMBER'
                                                                      PASSING V_ROW_DATA
                                                                      COLUMNS MEMBER_STORE_NBR VARCHAR2(6) PATH 'MEMBER_STORE_NBR/text()')))) LOOP
        IF NVL(V_TEMP_LEAD_BANK_ACCOUNT_NBR, 'XXX') <> each_lead.LEAD_BANK_ACCOUNT_NBR THEN
           V_TEMP_LEAD_BANK_ACCOUNT_NBR := each_lead.LEAD_BANK_ACCOUNT_NBR;
           --Delete all the futures for this Bank Account
           ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UI_DELETE_SP(V_TEMP_LEAD_BANK_ACCOUNT_NBR, each_lead.FUTURE_ID);
           --Re-Activate all the expired records
           ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_UNEXPIRE_SP(V_FROM_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR);
        END IF;
    END LOOP;
    
    FOR each_mbr IN (SELECT *
                       FROM MEMBER_BANK_CC_FUTURE
                      WHERE MEMBER_STORE_NBR IN (SELECT MEMBER_STORE_NBR
                                                   FROM MEMBER_BANK_CC
                                                  WHERE LEAD_STORE_NBR = V_FROM_LEAD_CC
                                                    AND EXPIRATION_DATE IS NOT NULL
                                                    AND MEMBER_STORE_NBR IN
                                                                   (SELECT MEMBER_STORE_NBR
                                                                      FROM XMLTABLE ('/MEMBER_TRANSFER_UI/MEMBER_STORES/MEMBER'
                                                                           PASSING V_ROW_DATA
                                                                           COLUMNS MEMBER_STORE_NBR VARCHAR2(6) PATH 'MEMBER_STORE_NBR/text()')))) LOOP
        
        --Delete all the futures for this member store
        ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_EXP_DELETE_SP(each_mbr.LEAD_BANK_ACCOUNT_NBR, each_mbr.LEAD_STORE_NBR, each_mbr.MEMBER_STORE_NBR, each_mbr.FUTURE_ID);
        --Re-Activate the expired records that are non CC related
        ACC_MEM_MAIN_COMMONTOOLS.ACCNT_MNTNC_TRNSFR_UNEXPIRE_SP(V_FROM_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR, V_FROM_LEAD_CC, each_mbr.MEMBER_STORE_NBR);
    END LOOP;
    
    FOR rec IN (SELECT A.*
                  FROM MEMBER_BANK_CC A,
                       (SELECT *
                          FROM XMLTABLE ('/MEMBER_TRANSFER_UI/MEMBER_STORES/MEMBER'
                               PASSING V_ROW_DATA
                               COLUMNS MEMBER_STORE_NBR VARCHAR2(6) PATH 'MEMBER_STORE_NBR/text()',
                                       EFFECTIVE_DATE VARCHAR2(24) PATH 'EFFECTIVE_DATE/text()')) B
                 WHERE A.LEAD_BANK_ACCOUNT_NBR = V_FROM_LEAD_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR
                   AND A.LEAD_STORE_NBR        = V_FROM_LEAD_BANK_CC_REC.LEAD_STORE_NBR
                   AND A.MEMBER_STORE_NBR      =  B.MEMBER_STORE_NBR
                 ORDER BY B.EFFECTIVE_DATE) LOOP
        V_MEMBER_BANK_CC_REC      := rec;
        rec.EFFECTIVE_DATE        := GET_EFFECTIVE_DATE_FOR_MBR(V_ROW_DATA, rec.MEMBER_STORE_NBR);
        V_EXPIRE_DATE := rec.EFFECTIVE_DATE - INTERVAL '1' SECOND;
        V_MEMBER_BANK_CC_REC.EXPIRATION_DATE := V_EXPIRE_DATE;
        DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(rec.MEMBER_STORE_NBR,
                                                                     NULL, --bank account number
                                                                     NULL, --micr format id
                                                                     V_EXPIRE_DATE); --store MICR formats needs to be expired for these members
        DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(rec.MEMBER_STORE_NBR,
                                                            V_EXPIRE_DATE);
        rec.LEAD_BANK_ACCOUNT_NBR   := V_LEAD_BANK_ACCOUNT_NBR;
        rec.LEAD_STORE_NBR          := V_TO_LEAD_CC;
        rec.MEMBER_BANK_ACCOUNT_NBR := NULL; --wipe out the sub account details for the member being transferred
        rec.EXPIRATION_DATE         := NULL; --this anyways will be null, but just for understanding, else transfer will fail
        rec.UPDATE_DATE             := TRUNC(SYSDATE);
        rec.LAST_UPD_USER_ID        := V_USER_ID;
        IF TRUNC(NVL(V_TEMP_EFFECTIVE_DATE, SYSDATE)) <> TRUNC(rec.EFFECTIVE_DATE) THEN
            V_TEMP_EFFECTIVE_DATE := rec.EFFECTIVE_DATE;
            IF IS_FTR_LEAD_EXISTS(rec, V_FUTURE_ID) = 'N' THEN
                CREATE_TRANSFER_FUTURE_PROCESS(rec, V_TO_LEAD_BANK_CC_REC, V_FUTURE_ID);
            END IF;
        END IF;
        IF TRUNC(rec.EFFECTIVE_DATE) = TRUNC(SYSDATE)THEN
            --insert Bank Account and Lead into history as we are going to insert members into history
            TABLE_IU_PKG.MEMBER_BANK_CC_D_SP(V_MEMBER_BANK_CC_REC); --member needs to be removed from old lead
            DEPOSIT_TICKET_MAINTENANCE_PKG.DELETE_STORE_MICR_FORMAT_DTLS(V_MEMBER_BANK_CC_REC.MEMBER_STORE_NBR, NULL, NULL);
            DEPOSIT_BAG_MAINTENANCE_PKG.DELETE_DEPOSIT_BAG_DTLS(V_MEMBER_BANK_CC_REC.MEMBER_STORE_NBR);
            --member needs to be removed from old leads virtual future
            --so check if there is a virtual future out there for this members lead bank accunt
            --if there exists one, delete all those member details from the future as well
            IF VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_REAL_FUTURE_BANK_ACCOUNT(V_MEMBER_BANK_CC_REC.LEAD_BANK_ACCOUNT_NBR) = 'N' THEN
                MEMBER_MAINTENANCE_PKG.MBR_MNTNC_UI_DELETE_SP(V_MEMBER_BANK_CC_REC, 1);
            END IF;
            TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(rec); --member needs to be added to new lead
            V_TO_LEAD_BANK_CC_FUT_REC := BANKING_COMMON_TOOLS.GET_UNEXP_LEAD_CC_FUTURE_REC(V_TO_LEAD_CC);
            --checking if the lead store is present in future table
            IF V_TO_LEAD_BANK_CC_FUT_REC.LEAD_STORE_NBR IS NOT NULL  --IF the future record is present then 
               AND V_TO_LEAD_BANK_CC_REC.EXPIRATION_DATE IS NULL  THEN--checking if the lead is a virtual
               SELECT M.*,
                      V_TO_LEAD_BANK_CC_FUT_REC.FUTURE_ID FUTURE_ID
                 INTO V_MEMBER_BANK_CC_FUT_REC
                 FROM MEMBER_BANK_CC M
                WHERE MEMBER_STORE_NBR  = rec.MEMBER_STORE_NBR
                  AND LEAD_STORE_NBR    = rec.LEAD_STORE_NBR; 
               TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(V_MEMBER_BANK_CC_FUT_REC);
                   --member needs to be added to new lead in future if the lead is a virtual  
            END IF;
        ELSIF TRUNC(rec.EFFECTIVE_DATE) > TRUNC(SYSDATE) THEN
            --by the time it comes here all the futures for this member gets deleted
            V_MBR_BANK_CC_TAB.DELETE();
            V_MBR_BANK_CC_TAB(1) := V_MEMBER_BANK_CC_REC;
            MEMBER_MAINTENANCE_PKG.MEMBER_MNTNC_CURRENT_UPSERT_SP(V_MBR_BANK_CC_TAB); --member needs to be expired for old lead
            CREATE_TRNSFR_MBR_BANK_CC_REC(V_FUTURE_ID, rec);
        END IF;

       POS_DATA_GENERATION.POS_MASTER_SP(rec.MEMBER_STORE_NBR);

    END LOOP;
EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_TRANSFER_PROCESS ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END LEAD_TRANSFER_PROCESS;

END CONCENTRATION_TRANSFER_PKG;
