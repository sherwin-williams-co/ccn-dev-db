create or replace PACKAGE BODY         DEPOSITS_DAILY_LOAD
AS
/**************************************************************** 
This package will load the new CCN BANKING Oracle Database
with the files for deposit ticket and deposit bags along with their orders

Created : 11/11/2015 jxc517 CCN Project....
Changed :
*****************************************************************/

PROCEDURE TRUNCATE_TABLE(
/*****************************************************************************
    This procedure will truncate all loaded data for the table passed in.

Created : 11/11/2015 jxc517 CCN Project....
Changed :
*****************************************************************************/
IN_TABLE_NAME IN VARCHAR2)
IS
    CURSOR C_CONSTRAINTS IS
        SELECT CONSTRAINT_NAME, TABLE_NAME
          FROM USER_CONSTRAINTS
         WHERE R_CONSTRAINT_NAME IN (SELECT CONSTRAINT_NAME
                                       FROM USER_CONSTRAINTS
                                      WHERE TABLE_NAME = IN_TABLE_NAME);
BEGIN
    FOR rec IN C_CONSTRAINTS LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE ' || rec.TABLE_NAME || ' DISABLE CONSTRAINT ' || rec.CONSTRAINT_NAME;
    END LOOP;
    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || IN_TABLE_NAME;
    FOR rec IN C_CONSTRAINTS LOOP
        EXECUTE IMMEDIATE 'ALTER TABLE ' || rec.TABLE_NAME || ' ENABLE CONSTRAINT ' || rec.CONSTRAINT_NAME;
    END LOOP;        
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END TRUNCATE_TABLE;

PROCEDURE TRUNCATE_DEPOSIT_TBS
/*****************************************************************************
    This procedure will truncate all loaded data for deposit tickets/bags
    before reloading data 

Created : 11/11/2015 jxc517 CCN Project....
Changed : 
*****************************************************************************/
IS
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE ERROR_LOG WHEN MODULE IN (''LOAD_BANK_DEP_BAG_TICK'',''LOAD_BANK_DEP_BAG_TICKORD'',''LOAD_BANK_DEP_TICK'',''LOAD_BANK_DEP_TICKORD'')';
    TRUNCATE_TABLE('BANK_DEP_TICKORD');
    TRUNCATE_TABLE('BANK_DEP_TICKORD_HIST');
    TRUNCATE_TABLE('BANK_DEP_TICKORD_FUTURE');
    TRUNCATE_TABLE('BANK_DEP_BAG_TICKORD');
    TRUNCATE_TABLE('BANK_DEP_BAG_TICKORD_HIST');
    TRUNCATE_TABLE('BANK_DEP_BAG_TICKORD_FUTURE');
    TRUNCATE_TABLE('BANK_DEP_TICK');
    TRUNCATE_TABLE('BANK_DEP_TICK_HIST');
    TRUNCATE_TABLE('BANK_DEP_TICK_FUTURE');
	  TRUNCATE_TABLE('BANK_DEP_BAG_TICK');
	  TRUNCATE_TABLE('BANK_DEP_BAG_TICK_HIST');
    TRUNCATE_TABLE('BANK_DEP_BAG_TICK_FUTURE');
	  --truncate temporary intermediate tables as they will be reloaded in next step
    TRUNCATE_TABLE('BANK_DEP_TICKORD_DLY_T');
    TRUNCATE_TABLE('BANK_DEP_BAG_TICKORD_DLY_T');
    TRUNCATE_TABLE('BANK_DEP_TICK_DLY_T');
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END TRUNCATE_DEPOSIT_TBS;

PROCEDURE LOAD_TEMP_TABLES
/******************************************************************
   This Procedure loads the intermediate tables that are used in this process

Created : 11/11/2015 jxc517 CCN Project....
Changed : 
******************************************************************/
IS
BEGIN
      INSERT INTO BANK_DEP_TICK_DLY_T
          SELECT BANK_ACCOUNT_NBR,
                 COST_CENTER_CODE,
                 DAILY_USE_ACTUAL,
                 DAILY_USE_OVERRIDE,
                 DEP_TKTS_ONHAND_QTY,
                 YTD_DEP_TKTS_ORDERED_QTY,
                 DJDE_FORM_PARM,
                 DJDE_FEED_PARM,
                 MICR_COST_CNTR,
                 MICR_ROUTING_NBR,
                 MICR_FORMAT_ACCT_NBR,
                 REORDER_POINT,
                 REORDER_NUMBER_BKS,
                 IMAGES_PER_PAGE,
                 NBR_FORMS_PER_BK,
                 PART_PAPER_PER_FORM,
                 NBR_DEP_TICKETS_PER_BK,
                 SHEETS_OF_PAPER_PER_BK,
                 FORMAT_NAME,
                 DEPBAG_DAILY_USE_ACTUAL,
                 DEPBAG_DLY_USE_OVERRIDE,
                 DEPBAG_ONHAND_QTY,
                 DEPBAG_YTD_ORDERED_QTY,
                 DEPBAG_LAST_ORDER_DATE,
                 DEPBAG_LAST_ORDER_QTY,
                 DEP_BAG_TYPE,
                 DEP_BAG_REORDER_POINT,
                 DEPBAG_REORDER_QTY,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID
          FROM TEMP_DEP_TICK_DLY;
      COMMIT;
      INSERT INTO BANK_DEP_TICKORD_DLY_T
          SELECT BANK_ACCOUNT_NBR,
                 COST_CENTER_CODE,
                 DEPOSIT_ORDER_PRIORITY,
                 DEPOSIT_ORDER_STATUS,
                 COST_CENTER,
                 DEPOSIT_ORDER_SEQ_NBR,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID,
                 ORDER_DATE,
                 EXTRACTED_USER_ID 
            FROM TEMP_DEP_TICKORD_DLY;
      COMMIT;
      INSERT INTO BANK_DEP_BAG_TICKORD_DLY_T
          SELECT BANK_ACCOUNT_NBR,
                 COST_CENTER_CODE,
                 NULL,
                 NULL,
                 COST_CENTER,
                 NULL,
                 EFFECTIVE_DATE,
                 DECODE(EXPIRATION_DATE, '00000000', EXPIRATION_DATE, GREATEST(EXPIRATION_DATE, EFFECTIVE_DATE)) EXPIRATION_DATE,
                 LAST_MAINTENANCE_DATE,
                 LAST_MAINT_USER_ID,
                 ORDER_DATE,
                 EXTRACTED_USER_ID 
            FROM TEMP_DEP_TICKORD_DLY;
      COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_TEMP_TABLES', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_TEMP_TABLES;

FUNCTION GET_EXPIRATION_DATE(
/******************************************************************
   This Procedure gets the expiration date based on passed effective, expiration
   and previous records effective dates

Created : 11/11/2015 jxc517 CCN Project....
Changed :
******************************************************************/
IN_EFFECTIVE_DATE      IN    VARCHAR2,
IN_EXPIRATION_DATE     IN    VARCHAR2,
IN_PREV_EFFECTIVE_DATE IN    DATE) RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(8);
BEGIN
    SELECT GREATEST(LEAST(DECODE(IN_EXPIRATION_DATE,
                                 '00000000',
                                 TO_CHAR(IN_PREV_EFFECTIVE_DATE - 1, 'RRRRMMDD'),
                                 IN_EXPIRATION_DATE),
                          TO_CHAR(IN_PREV_EFFECTIVE_DATE - 1, 'RRRRMMDD')),
                    IN_EFFECTIVE_DATE)
      INTO V_RETURN_VALUE
      FROM DUAL;
    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_EXPIRATION_DATE;

PROCEDURE LOAD_BANK_DEP_TICK
/*******************************************************************************
    This procedure will load data into BANK_DEP_TICK from BANK_DEP_TICK_DLY_T table.

Created : 11/11/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IS
    CURSOR bank_dep_tick_cur IS
        SELECT *
          FROM BANK_DEP_TICK_DLY_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM BANK_DEP_TICK_DLY_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR bank_dep_tick_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICK_DLY_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_TEMP_ROW                  BANK_DEP_TICK%ROWTYPE;
    V_BANK_ACCOUNT_NBR          LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_COMMIT                    NUMBER := 0;
    V_PREV_BANK_ACCOUNT_NBR     BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_LEAD_STORE_NBR       MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_EFFECTIVE_DATE       DATE;
BEGIN
    FOR rec IN bank_dep_tick_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_LEAD_STORE_NBR = rec.COST_CENTER_CODE THEN
                UPDATE BANK_DEP_TICK_DLY_T
                   SET EXPIRATION_DATE  = DEPOSITS_DAILY_LOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_LEAD_STORE_NBR     := rec.COST_CENTER_CODE;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICK_DLY_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR REC IN bank_dep_tick_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE         := REC.COST_CENTER_CODE;
            V_TEMP_ROW.DAILY_USE_ACTUAL         := REC.DAILY_USE_ACTUAL;
            V_TEMP_ROW.DAILY_USE_OVERRIDE       := REC.DAILY_USE_OVERRIDE;
            V_TEMP_ROW.DEP_TKTS_ONHAND_QTY      := REC.DEP_TKTS_ONHAND_QTY;
            V_TEMP_ROW.YTD_DEP_TKTS_ORDERED_QTY := REC.YTD_DEP_TKTS_ORDERED_QTY;
            V_TEMP_ROW.REORDER_POINT            := REC.REORDER_POINT;  
            V_TEMP_ROW.REORDER_NUMBER_BKS       := REC.REORDER_NUMBER_BKS;
            V_TEMP_ROW.IMAGES_PER_PAGE          := REC.IMAGES_PER_PAGE;
            V_TEMP_ROW.NBR_FORMS_PER_BK         := REC.NBR_FORMS_PER_BK;
            V_TEMP_ROW.PART_PAPER_PER_FORM      := REC.PART_PAPER_PER_FORM;
            V_TEMP_ROW.NBR_DEP_TICKETS_PER_BK   := REC.NBR_DEP_TICKETS_PER_BK;
            V_TEMP_ROW.SHEETS_OF_PAPER_PER_BK   := REC.SHEETS_OF_PAPER_PER_BK;
            V_TEMP_ROW.EFFECTIVE_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EXPIRATION_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINTENANCE_DATE    := NVL(TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.LAST_MAINTENANCE_DATE), 'RRRRMMDD'),
                                                       V_TEMP_ROW.EFFECTIVE_DATE);
            V_TEMP_ROW.LAST_MAINT_USER_ID       := REC.LAST_MAINT_USER_ID;

            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_TICK');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICK - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                              IF V_TEMP_ROW.EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_TICK VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_TICK_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_TICK_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_TICK - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
            V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_TICK - 2');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICK', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_TICK;

PROCEDURE LOAD_BANK_DEP_BAG_TICK
/*******************************************************************************
    This procedure will load data into BANK_DEP_BAG_TICK from BANK_DEP_TICK_DLY_T table.

Created : 11/11/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IS
    CURSOR bank_dep_bag_tick_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICK_DLY_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_TEMP_ROW         BANK_DEP_BAG_TICK%ROWTYPE;
    V_BANK_ACCOUNT_NBR LEAD_BANK_CC.LEAD_BANK_ACCOUNT_NBR%TYPE;
    V_COMMIT           NUMBER := 0;
BEGIN
    FOR REC IN bank_dep_bag_tick_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR         := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE         := REC.COST_CENTER_CODE;
            V_TEMP_ROW.DEPBAG_DAILY_USE_ACTUAL  := REC.DEPBAG_DAILY_USE_ACTUAL;
            V_TEMP_ROW.DEPBAG_DLY_USE_OVERRIDE  := REC.DEPBAG_DLY_USE_OVERRIDE;
            V_TEMP_ROW.DEPBAG_LAST_ORDER_DATE   := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.DEPBAG_LAST_ORDER_DATE), 'RRRRMMDD');
            V_TEMP_ROW.DEPBAG_LAST_ORDER_QTY    := REC.DEPBAG_LAST_ORDER_QTY;
            V_TEMP_ROW.DEPBAG_ONHAND_QTY        := REC.DEPBAG_ONHAND_QTY;
            V_TEMP_ROW.DEPBAG_REORDER_QTY       := REC.DEPBAG_REORDER_QTY;
            V_TEMP_ROW.DEPBAG_YTD_ORDERED_QTY   := REC.DEPBAG_YTD_ORDERED_QTY;
            V_TEMP_ROW.DEP_BAG_REORDER_POINT    := REC.DEP_BAG_REORDER_POINT;
            V_TEMP_ROW.DEP_BAG_TYPE             := REC.DEP_BAG_TYPE;
            V_TEMP_ROW.DEP_BAG_REORDER_SWITCH   := NULL; --REC.DEP_BAG_REORDER_SWITCH;
            V_TEMP_ROW.EFFECTIVE_DATE           := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE          := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(REC.EXPIRATION_DATE), 'RRRRMMDD');
            
            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', 'Invalid Bank Account Number', REC.BANK_ACCOUNT_NBR, REC.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                              IF V_TEMP_ROW.EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_BAG_TICK VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_BAG_TICK_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_BAG_TICK_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
            V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), REC.COST_CENTER_CODE, 'BANK_DEP_BAG_TICK - 2');
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICK', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_BAG_TICK;

PROCEDURE LOAD_BANK_DEP_TICKORD
/*****************************************************************************
    This Procedure will load the BANK_DEP_TICKORD table from data  
    file from TEMP_BANK_DEP_TICKORD table

Created : 11/11/2015 jxc517 CCN Project....
Changed : 
******************************************************************************/
IS
    CURSOR dep_tick_ord_cur IS
        SELECT *
          FROM BANK_DEP_TICKORD_DLY_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM BANK_DEP_TICKORD_DLY_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR dep_tick_ord_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_TICKORD_DLY_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_COMMIT                    INTEGER := 0;
    V_TEMP_ROW                  BANK_DEP_TICKORD%ROWTYPE;
    V_PREV_BANK_ACCOUNT_NBR     BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_LEAD_STORE_NBR       MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_EFFECTIVE_DATE       DATE;
BEGIN
    FOR rec IN dep_tick_ord_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_LEAD_STORE_NBR = rec.COST_CENTER_CODE THEN
                UPDATE BANK_DEP_TICKORD_DLY_T
                   SET EXPIRATION_DATE  = DEPOSITS_DAILY_LOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_LEAD_STORE_NBR     := rec.COST_CENTER_CODE;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD_DLY_T');
        END;
    END LOOP;  
    COMMIT;
    V_COMMIT := 0;
    FOR rec IN dep_tick_ord_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE       := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.COST_CENTER_CODE);
            V_TEMP_ROW.BANK_DEP_TICK_FTR_ID   := 1;
            V_TEMP_ROW.DEPOSIT_ORDER_PRIORITY := rec.DEPOSIT_ORDER_PRIORITY;
            V_TEMP_ROW.DEPOSIT_ORDER_STATUS   := rec.DEPOSIT_ORDER_STATUS;
            V_TEMP_ROW.DEPOSIT_ORDER_SEQ_NBR  := rec.DEPOSIT_ORDER_SEQ_NBR;
            V_TEMP_ROW.EFFECTIVE_DATE         := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE        := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINTENANCE_DATE  := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LAST_MAINTENANCE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINT_USER_ID     := rec.LAST_MAINT_USER_ID;
            V_TEMP_ROW.ORDER_DATE             := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORDER_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXTRACTED_USER_ID      := rec.EXTRACTED_USER_ID;
            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                              IF V_TEMP_ROW.EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_TICKORD VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_TICKORD_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_TICKORD_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL ;
            V_COMMIT := V_COMMIT + 1;
            IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_TICKORD - 2');
        END;
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_TICKORD', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_TICKORD; 

PROCEDURE LOAD_BANK_DEP_BAG_TICKORD
/*****************************************************************************
    This Procedure will load the BANK_DEP_BAG_TICKORD table from data  
    file from TEMP_BANK_DEP_TICKORD table

Created : 11/11/2015 jxc517 CCN Project....
Changed : 
******************************************************************************/
IS
    CURSOR dep_bag_tick_ord_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_DLY_T
         WHERE (BANK_ACCOUNT_NBR, COST_CENTER_CODE) IN (SELECT BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                          FROM BANK_DEP_BAG_TICKORD_DLY_T
                                                         GROUP BY BANK_ACCOUNT_NBR, COST_CENTER_CODE
                                                        HAVING COUNT(*) > 1)
         ORDER BY BANK_ACCOUNT_NBR, COST_CENTER_CODE, EFFECTIVE_DATE DESC, EXPIRATION_DATE;
    CURSOR dep_bag_tick_ord_temp_cur IS
        SELECT A.*,
               B.BANK_ACCOUNT_NBR ACTL_BANK_ACCOUNT_NBR,
               B.EFFECTIVE_DATE   ACTL_EFFECTIVE_DATE,
               B.EXPIRATION_DATE  ACTL_EXPIRATION_DATE,
               B.BANK_TYPE_CODE
          FROM BANK_DEP_BAG_TICKORD_DLY_T A,
               (SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       LEAD_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE
                  FROM LEAD_BANK_CC_HIST
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR BANK_ACCOUNT_NBR,
                       MEMBER_STORE_NBR COST_CENTER_CODE,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE
                  FROM MEMBER_BANK_CC_HIST) B
         WHERE A.COST_CENTER_CODE = B.COST_CENTER_CODE(+)
         ORDER BY A.COST_CENTER_CODE, B.EFFECTIVE_DATE;
    V_COMMIT                    INTEGER := 0;
    V_TEMP_ROW                  BANK_DEP_BAG_TICKORD%ROWTYPE;
    V_PREV_BANK_ACCOUNT_NBR     BANK_ACCOUNT_T.BANK_ACCOUNT_NBR%TYPE := 'ZZZZZZ';
    V_PREV_LEAD_STORE_NBR       MEMBER_BANK_CC_T.LEAD_STORE_NBR%TYPE := 'YYYYYY';
    V_PREV_EFFECTIVE_DATE       DATE;
BEGIN
    FOR rec IN dep_bag_tick_ord_cur LOOP
        BEGIN
            IF V_PREV_BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR AND V_PREV_LEAD_STORE_NBR = rec.COST_CENTER_CODE THEN
                UPDATE BANK_DEP_BAG_TICKORD_DLY_T
                   SET EXPIRATION_DATE  = DEPOSITS_DAILY_LOAD.GET_EXPIRATION_DATE(EFFECTIVE_DATE, EXPIRATION_DATE, V_PREV_EFFECTIVE_DATE)
                 WHERE BANK_ACCOUNT_NBR = rec.BANK_ACCOUNT_NBR
                   AND COST_CENTER_CODE = rec.COST_CENTER_CODE
                   AND EFFECTIVE_DATE   = rec.EFFECTIVE_DATE
                   AND EXPIRATION_DATE  = rec.EXPIRATION_DATE;
            END IF;
            V_COMMIT := V_COMMIT + 1;
           IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
            V_PREV_BANK_ACCOUNT_NBR   := rec.BANK_ACCOUNT_NBR;
            V_PREV_LEAD_STORE_NBR     := rec.COST_CENTER_CODE;
            V_PREV_EFFECTIVE_DATE     := TO_DATE(rec.EFFECTIVE_DATE,'RRRRMMDD');
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICKORD_DLY_T');
        END;
    END LOOP;  
   COMMIT;
    V_COMMIT := 0;
    FOR rec IN dep_bag_tick_ord_temp_cur LOOP
        BEGIN
            V_TEMP_ROW.BANK_ACCOUNT_NBR           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.BANK_ACCOUNT_NBR);
            V_TEMP_ROW.COST_CENTER_CODE           := CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.COST_CENTER_CODE);
            V_TEMP_ROW.BANK_DEP_BAG_FTR_ID        := 1;
            V_TEMP_ROW.DEPOSIT_BAG_ORDER_PRIORITY := rec.DEPOSIT_BAG_ORDER_PRIORITY;
            V_TEMP_ROW.DEPOSIT_BAG_ORDER_STATUS   := rec.DEPOSIT_BAG_ORDER_STATUS;
            V_TEMP_ROW.DEPOSIT_BAG_ORDER_SEQ_NBR  := rec.DEPOSIT_BAG_ORDER_SEQ_NBR;
            V_TEMP_ROW.EFFECTIVE_DATE             := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EFFECTIVE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXPIRATION_DATE            := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.EXPIRATION_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINTENANCE_DATE      := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.LAST_MAINTENANCE_DATE), 'RRRRMMDD');
            V_TEMP_ROW.LAST_MAINT_USER_ID         := rec.LAST_MAINT_USER_ID;
            V_TEMP_ROW.ORDER_DATE                 := TO_DATE(CCN_COMMON_TOOLS.VALIDATE_DATA_BEFORE_LOAD(rec.ORDER_DATE), 'RRRRMMDD');
            V_TEMP_ROW.EXTRACTED_USER_ID          := rec.EXTRACTED_USER_ID;
            IF V_TEMP_ROW.BANK_ACCOUNT_NBR LIKE '%@%' THEN 
                 ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICKORD', 'Invalid Bank Account Number', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICKORD');
            ELSE
                BEGIN
                    IF REC.ACTL_BANK_ACCOUNT_NBR IS NULL THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICKORD', 'Cost Center not a Lead/Member as of effective date', NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICKORD - 0');
                    ELSE
                        IF V_TEMP_ROW.EFFECTIVE_DATE BETWEEN REC.ACTL_EFFECTIVE_DATE AND NVL(REC.ACTL_EXPIRATION_DATE, V_TEMP_ROW.EFFECTIVE_DATE) 
                           OR REC.ACTL_EFFECTIVE_DATE > V_TEMP_ROW.EFFECTIVE_DATE THEN
                            V_TEMP_ROW.EFFECTIVE_DATE   := GREATEST(V_TEMP_ROW.EFFECTIVE_DATE, REC.ACTL_EFFECTIVE_DATE);
                            V_TEMP_ROW.BANK_ACCOUNT_NBR := REC.ACTL_BANK_ACCOUNT_NBR;
                              IF V_TEMP_ROW.EXPIRATION_DATE IS NULL THEN
                                BEGIN
                                    INSERT INTO BANK_DEP_BAG_TICKORD VALUES V_TEMP_ROW;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        IF V_TEMP_ROW.EXPIRATION_DATE IS NOT NULL THEN
                                            INSERT INTO BANK_DEP_BAG_TICKORD_HIST VALUES V_TEMP_ROW;
                                        END IF;
                                END;
                            ELSE
                                V_TEMP_ROW.EXPIRATION_DATE  := LEAST(NVL(V_TEMP_ROW.EXPIRATION_DATE, REC.ACTL_EXPIRATION_DATE), REC.ACTL_EXPIRATION_DATE);
                                INSERT INTO BANK_DEP_BAG_TICKORD_HIST VALUES V_TEMP_ROW;
                            END IF;
                        END IF;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICKORD - 1');
                END;
            END IF;
            V_TEMP_ROW := NULL ;
          V_COMMIT := V_COMMIT + 1;
           IF V_COMMIT > 500 THEN
                COMMIT;
                V_COMMIT := 0;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICKORD', SQLERRM, NVL(rec.BANK_ACCOUNT_NBR,'000000000'), rec.COST_CENTER_CODE, 'BANK_DEP_BAG_TICKORD - 2');
        END;
    END LOOP;
   COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'LOAD_BANK_DEP_BAG_TICKORD', SQLERRM, '0000000000', '000000', '0000000000');
END LOAD_BANK_DEP_BAG_TICKORD; 

PROCEDURE BANK_DEPOSITS_DAILY_LOAD_SP
/******************************************************************
This Procedure is a wrapper for the Initial Load of the BANK DEPOSIT tables
    * Deletes store drafts tables related to deposit ticket and deposit bags
    * Loads store drafts tables related to deposit ticket and deposit bags

Created : 11/11/2015 jxc517 CCN Project....
Changed :
******************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN
    --Load data from external table to intermediate table as indexes are not possible on external table
      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Loading Temporary Tables';
      LOAD_TEMP_TABLES();
      DBMS_OUTPUT.PUT_LINE('Temporary Tables loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_TICK Table ';
      LOAD_BANK_DEP_TICK();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_TICK loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_BAG_TICK Table ';
      LOAD_BANK_DEP_BAG_TICK();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_BAG_TICK loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_TICKORD Table ';
      LOAD_BANK_DEP_TICKORD();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_TICKORD loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

      V_START_TIME := DBMS_UTILITY.GET_TIME;
      V_CONTEXT := 'Load BANK_DEP_BAG_TICKORD Table ';
      LOAD_BANK_DEP_BAG_TICKORD();
      DBMS_OUTPUT.PUT_LINE('BANK_DEP_BAG_TICKORD loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'BANK_DEPOSITS_DAILY_LOAD_SP', SQLERRM, '0000000000', '0000000000', '0000000000');
END BANK_DEPOSITS_DAILY_LOAD_SP;

PROCEDURE DEPOSITS_DAILY_LOAD_SP
/******************************************************************
This Procedure is a wrapper for the Initial Load of the BANK DEPOSIT tables
    * Deletes store drafts tables related to deposit ticket and deposit bags
    * Loads store drafts tables related to deposit ticket and deposit bags

NOTE: Never touch store micrs as part of this batch (confirmed from Keith)
as the maintenance for those will be done in our system

Created : 11/11/2015 jxc517 CCN Project....
Changed :
******************************************************************/
AS
    V_CONTEXT    VARCHAR2(200);
    V_START_TIME NUMBER;
BEGIN
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Truncate BANKING Tables ';
     TRUNCATE_DEPOSIT_TBS();
     DBMS_OUTPUT.PUT_LINE('Truncating completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     V_START_TIME := DBMS_UTILITY.GET_TIME;
     BANK_DEPOSITS_DAILY_LOAD_SP();
     DBMS_OUTPUT.PUT_LINE('Load completed in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
EXCEPTION
    WHEN OTHERS THEN
         ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DEPOSITS_DAILY_LOAD_SP', SQLERRM, '000000', '0000000',  '0000000');
END DEPOSITS_DAILY_LOAD_SP;

END DEPOSITS_DAILY_LOAD;

