CREATE OR REPLACE PACKAGE BODY DPST_BAGS_UPDATE_BATCH_PKG
AS
/**********************************************************
  This Package contains procedured to update the deposit bag tickets on a daily
  basis based on the files we recieve from POS

Created : 10/20/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE PROCESS
/******************************************************************************
  This procedure will update the deposit bag tickets on a daily
  basis based on the files we recieve from POS

Created : 10/20/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          Added code to reset ytd deposit tickets on january 1st of every year
Changed : 11/04/2015 nxk927 CCN Project....
          added update for the orders that reach today's date         
*******************************************************************************/
IS
V_BATCH_NUMBER              BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS              BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('DPST_BAGS_UPDT_BTCH', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        IF TO_CHAR(SYSDATE,'DDMON') = '01JAN' THEN
            FOR rec IN (SELECT * FROM BANK_DEP_BAG_TICK) LOOP
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_HIST_I_SP(rec);
                rec.DEPBAG_YTD_ORDERED_QTY := 0;
                rec.EFFECTIVE_DATE  := LEAST(NVL(rec.EXPIRATION_DATE, SYSDATE), SYSDATE);
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(rec);
            END LOOP;
        END IF;
        FOR rec IN (SELECT COST_CENTER_CODE, SUM(TO_NUMBER(POS_COUNT)) POS_COUNT
                      FROM TEMP_DPST_TCKT_POS_CNTS
                     GROUP BY COST_CENTER_CODE
                     HAVING SUM(TO_NUMBER(POS_COUNT)) > 0) LOOP
            BEGIN
               --TBD as we have multiple records in this file for a store
                UPDATE BANK_DEP_BAG_TICK
                   SET DEPBAG_ONHAND_QTY      = DEPBAG_ONHAND_QTY - rec.POS_COUNT
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
        FOR rec IN (SELECT *
                      FROM BANK_DEP_BAG_TICKORD
                     WHERE COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                                  FROM BANK_DEP_BAG_TICK
                                                 WHERE DEPBAG_ONHAND_QTY <= DEP_BAG_REORDER_POINT)) LOOP
            BEGIN
                DEPOSIT_BAG_MAINTENANCE_PKG.PLACE_DEPOSIT_BAG_TICKET_ORDER(rec.COST_CENTER_CODE,
                                                                           TRUNC(SYSDATE),
                                                                           NULL,
                                                                           'BATCH');
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
        FOR rec IN (SELECT *
                      FROM BANK_DEP_BAG_TICKORD
                     WHERE ORDER_DATE = TRUNC(SYSDATE)) LOOP
            --This will update all the deposit bag if the order hits today's date
            BEGIN
                UPDATE BANK_DEP_BAG_TICK
                   SET DEPBAG_ONHAND_QTY      = DEPBAG_ONHAND_QTY + (NVL(DEPBAG_REORDER_QTY,200)),
                       DEPBAG_YTD_ORDERED_QTY = DEPBAG_YTD_ORDERED_QTY + (NVL(DEPBAG_REORDER_QTY,200))
                 WHERE COST_CENTER_CODE       = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('DPST_BAGS_UPDT_BTCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;

END DPST_BAGS_UPDATE_BATCH_PKG;

