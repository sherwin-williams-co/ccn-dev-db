CREATE OR REPLACE PACKAGE BODY DPST_BAGS_UPDATE_BATCH_PKG
AS
/**********************************************************
  This Package contains procedured to update the deposit bag tickets on a daily
  basis based on the files we recieve from POS

Created : 10/20/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE PROCESS
/******************************************************************************
  This procedure will update the deposit bag tickets on a daily
  basis based on the files we recieve from POS

Created : 10/20/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          Added code to reset ytd deposit tickets on january 1st of every year
Changed : 11/04/2015 nxk927 CCN Project....
          added update for the orders that reach today's date 
        : 11/05/2015 nxk927 CCN Project....
          added LAST_MAINT_USER_ID <> 'BATCH' so there won't be multiple updates  
*******************************************************************************/
IS
V_BATCH_NUMBER              BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS              BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_DEPBAG_REORDER_QTY        BANK_DEP_BAG_TICK.DEPBAG_REORDER_QTY%TYPE; 
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('DPST_BAGS_UPDT_BTCH', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        IF TO_CHAR(SYSDATE,'DDMON') = '01JAN' THEN
            FOR rec IN (SELECT * FROM BANK_DEP_BAG_TICK) LOOP
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_HIST_I_SP(rec);
                rec.DEPBAG_YTD_ORDERED_QTY := 0;
                rec.EFFECTIVE_DATE  := LEAST(NVL(rec.EXPIRATION_DATE, SYSDATE), SYSDATE);
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(rec);
            END LOOP;
        END IF;
        FOR rec IN (SELECT COST_CENTER_CODE, SUM(TO_NUMBER(POS_COUNT)) POS_COUNT
                      FROM TEMP_DPST_TCKT_POS_CNTS
                     GROUP BY COST_CENTER_CODE
                     HAVING SUM(TO_NUMBER(POS_COUNT)) > 0) LOOP
            BEGIN
               --TBD as we have multiple records in this file for a store
                UPDATE BANK_DEP_BAG_TICK
                   SET DEPBAG_ONHAND_QTY      = NVL(DEPBAG_ONHAND_QTY,0) - rec.POS_COUNT
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
        FOR rec IN (SELECT *
                      FROM BANK_DEP_BAG_TICKORD
                     WHERE COST_CENTER_CODE IN (SELECT COST_CENTER_CODE
                                                  FROM BANK_DEP_BAG_TICK
                                                 WHERE DEPBAG_ONHAND_QTY <= DEP_BAG_REORDER_POINT)) LOOP
            BEGIN
                DEPOSIT_BAG_MAINTENANCE_PKG.PLACE_DEPOSIT_BAG_TICKET_ORDER(rec.COST_CENTER_CODE,
                                                                           TRUNC(SYSDATE),
                                                                           NULL,
                                                                           'BATCH');
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
        V_DEPBAG_REORDER_QTY                       := BANKING_COMMON_TOOLS.GET_STANDARD_VAL_DEPOSIT_ORD('DEPBAG_REORDER_QTY');
        FOR rec IN (SELECT *
                      FROM BANK_DEP_BAG_TICKORD
                     WHERE ORDER_DATE = TRUNC(SYSDATE)
                       AND LAST_MAINT_USER_ID <> 'BATCH') LOOP --exclude batch as is already taken care before this call
            --This will update all the deposit bag if the order hits today's date
            BEGIN
                UPDATE BANK_DEP_BAG_TICK
                   SET DEPBAG_ONHAND_QTY      = NVL(DEPBAG_ONHAND_QTY,0) + (NVL(DEPBAG_REORDER_QTY,V_DEPBAG_REORDER_QTY)),
                       DEPBAG_YTD_ORDERED_QTY = NVL(DEPBAG_YTD_ORDERED_QTY,0) + (NVL(DEPBAG_REORDER_QTY,V_DEPBAG_REORDER_QTY))
                 WHERE COST_CENTER_CODE       = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('DPST_BAGS_UPDT_BTCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;


PROCEDURE UPDATE_BAGORDER_TRACK_NUM(
/*******************************************************************************
THIS PROCEDURE IS INTENDED TO UPDATE THE TRACING NUMBER INFORMATION FOR AN ORDER ID.

CREATED : 06/21/2016 MXK766 CCN PROJECT....
CHANGED : 
*******************************************************************************/
IN_LOAD_DATE IN VARCHAR2) 
IS

  V_CREATE_DT DATE               := TO_DATE(IN_LOAD_DATE, 'MM/DD/YYYY');  
  V_BANK_DEP_BAG_TICKORD_REC     BANK_DEP_BAG_TICKORD%ROWTYPE;
  V_BANK_DEP_BAG_TICKORD_FUT_REC BANK_DEP_BAG_TICKORD_FUTURE%ROWTYPE;
  V_BANK_DEP_BAG_TICKORD_HIS_REC BANK_DEP_BAG_TICKORD_HIST%ROWTYPE;
  V_BAGORDER_TRACKING_T_REC      BAGORDER_TRACKING_T%ROWTYPE;
BEGIN

  /**
  STEP 1: READ THE DATA FROM THE EXTERNAL TABLE AND LOAD IT INTO A BAGORDER_TRACKING_T
  STEP 2: USE THE RECORDS THAT GOT INTO BAGORDER_TRACKING_T AND UPDATE THE ORDER_TRACKING_NUMBER 
  IN BANK_DEP_TICKORD, BANK_DEP_TICKORD AND BANK_DEP_TICKORD BASED ON THE EXTERNAL_ORDER_ID_GUI
  **/

     --INSERTING DATA INTO TEMPORARY HOLDING TABLE.

    FOR REC IN (SELECT ORDER_ID, ORDER_TRACKING_NUMBER,EXTERNAL_ORDER_ID_GUI,V_CREATE_DT AS CREATE_DT FROM TEMP_BAGORDER_TRACKING) LOOP		    
        V_BAGORDER_TRACKING_T_REC := REC;      
        BEGIN
            INSERT INTO BAGORDER_TRACKING_T VALUES V_BAGORDER_TRACKING_T_REC;
        EXCEPTION
        WHEN OTHERS THEN
            IF INSTR(SQLERRM, 'KUP-04040') > 0 THEN
                ERRPKG.RAISE_ERR(-20001, 'ERROR IN UPDATE_BAGORDER_TRACK_NUM. ISSUES WITH THE FILE. KUP-04040 ' || SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
            ELSE
                ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.UPDATE_BAGORDER_TRACK_NUM', SQLERRM, NULL , NULL, 'BAGORDER_TRACKING_T');
            END IF;
        END;
    END LOOP;
  --LOOPING FOR THE INSERTED RECORDS THAT GOT LOADED AND UPDATING THE TARGET TABLES GIVEN BELOW.

  FOR REC IN (SELECT * FROM BAGORDER_TRACKING_T WHERE CREATE_DT = V_CREATE_DT) LOOP
  
      FOR REC2 IN (SELECT * FROM BANK_DEP_BAG_TICKORD T1 WHERE T1.EXTERNAL_ORDER_ID_GUI = REC.EXTERNAL_ORDER_ID_GUI)
      LOOP 
          V_BANK_DEP_BAG_TICKORD_REC := REC2;
          V_BANK_DEP_BAG_TICKORD_REC.ORDER_TRACKING_NUMBER := REC.ORDER_TRACKING_NUMBER;		
          TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_U_SP(V_BANK_DEP_BAG_TICKORD_REC); 
      END LOOP;

      FOR REC3 IN (SELECT * FROM BANK_DEP_BAG_TICKORD_FUTURE T1 WHERE T1.EXTERNAL_ORDER_ID_GUI = REC.EXTERNAL_ORDER_ID_GUI)
      LOOP 
          V_BANK_DEP_BAG_TICKORD_FUT_REC := REC3;
          V_BANK_DEP_BAG_TICKORD_FUT_REC.ORDER_TRACKING_NUMBER := REC.ORDER_TRACKING_NUMBER;
          TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_U_SP(V_BANK_DEP_BAG_TICKORD_FUT_REC); 
      END LOOP; 

      FOR REC4 IN (SELECT * FROM BANK_DEP_BAG_TICKORD_HIST T1 WHERE T1.EXTERNAL_ORDER_ID_GUI = REC.EXTERNAL_ORDER_ID_GUI)
      LOOP 
          V_BANK_DEP_BAG_TICKORD_HIS_REC := REC4;
          V_BANK_DEP_BAG_TICKORD_HIS_REC.ORDER_TRACKING_NUMBER := REC.ORDER_TRACKING_NUMBER;		
          TABLE_IU_PKG.BANK_BAG_TICKORD_HIST_U_SP(V_BANK_DEP_BAG_TICKORD_HIS_REC);
      END LOOP; 
  
  END LOOP;

  --DO A COMMIT AFTER ALL THE PROCESS IS DONE.

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    --ROLLBACK THE OPERATION IN CASE OF ANY FAILURE AND RAISE AN EXCEPTION WHICH WILL TRIGGER AN EMAIL.
    ROLLBACK;
    IF INSTR(SQLERRM, 'KUP-04040') > 0 THEN
      ERRPKG.RAISE_ERR(-20001,
                       'ERROR IN UPDATE_BAGORDER_TRACK_NUM. ISSUES WITH THE FILE. ' ||
                       SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
    ELSE
      ERRPKG.RAISE_ERR(-20002,
                       'ERROR IN UPDATE_BAGORDER_TRACK_NUM ' ||
                       SUBSTR(SQLERRM, 1, 500) || ' IN OTHERS ');
    END IF;
END UPDATE_BAGORDER_TRACK_NUM; 

END DPST_BAGS_UPDATE_BATCH_PKG;

