create or replace PACKAGE BODY DPST_BAGS_UPDATE_BATCH_PKG
AS
/**********************************************************
  This Package contains procedured to update the deposit bag tickets on a daily
  basis based on the files we recieve from POS

Created : 10/20/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE PROCESS(
/******************************************************************************
  This procedure will update the deposit bag tickets on a daily
  basis based on the files we recieve from POS

Created : 10/20/2015 jxc517 CCN Project....
Changed : 10/21/2015 jxc517 CCN Project....
          Added code to reset ytd deposit tickets on january 1st of every year
Changed : 11/04/2015 nxk927 CCN Project....
          added update for the orders that reach today's date 
        : 11/05/2015 nxk927 CCN Project....
          added LAST_MAINT_USER_ID <> 'BATCH' so there won't be multiple updates  
Changed : 08/19/2016 nxk927 CCN project....
          changed signature. Added servername and logfile name
Changed : 08/26/2016 nxk927 CCN project....
          added commit for each loop, pulling distinct cost center 
          to place the order
        : 12/13/2016 nxk927 CCN project....
          Removing unwanted calculation as the calculation for the onhand quantity and ytd quantity will happen
          as the order is placed.
        : 12/14/2016 jxc517 CCN project Team....
          Arrival date should be batch order date + 5, from UI it should be the date passed
        : 01/13/2017 nxk927 CCN project....
          YTD Order count be updated on first week day of the year
*******************************************************************************/
IN_SERVER_NAME  IN VARCHAR2,
IN_LOGFILE      IN VARCHAR2)
IS
V_BATCH_NUMBER              BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS              BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_FIRSTWEEK_DAY             DATE;
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('DPST_BAGS_UPDT_BTCH', V_BATCH_NUMBER, IN_SERVER_NAME,IN_LOGFILE);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        V_FIRSTWEEK_DAY := BANKING_COMMON_TOOLS.GENERATE_FIRST_WEEKDAY(TRUNC(SYSDATE,'YYYY'));
        IF TO_CHAR(SYSDATE,'DDMON') = TO_CHAR(V_FIRSTWEEK_DAY,'DDMON') THEN
           FOR rec IN (SELECT * FROM BANK_DEP_BAG_TICK) LOOP
               TABLE_IU_PKG.BANK_DEP_BAG_TICK_HIST_I_SP(rec);
               rec.DEPBAG_YTD_ORDERED_QTY := 0;
               rec.EFFECTIVE_DATE  := LEAST(NVL(rec.EXPIRATION_DATE, SYSDATE), SYSDATE);
               TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(rec);
               COMMIT;
           END LOOP;
        END IF;
        FOR rec IN (SELECT COST_CENTER_CODE, SUM(TO_NUMBER(POS_COUNT)) POS_COUNT
                      FROM TEMP_DPST_TCKT_POS_CNTS
                     GROUP BY COST_CENTER_CODE
                     HAVING SUM(TO_NUMBER(POS_COUNT)) > 0) LOOP
            BEGIN
               --TBD as we have multiple records in this file for a store
                UPDATE BANK_DEP_BAG_TICK
                   SET DEPBAG_ONHAND_QTY      = NVL(DEPBAG_ONHAND_QTY,0) - rec.POS_COUNT
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
            COMMIT;
        END LOOP;
        FOR rec IN (SELECT DISTINCT COST_CENTER_CODE
                      FROM BANK_DEP_BAG_TICK
                     WHERE DEPBAG_ONHAND_QTY <= DEP_BAG_REORDER_POINT) LOOP
            BEGIN
                DEPOSIT_BAG_MAINTENANCE_PKG.PLACE_DEPOSIT_BAG_TICKET_ORDER(rec.COST_CENTER_CODE,
                                                                           TRUNC(SYSDATE) + 5, --arrival date from batch = order date + 5
                                                                           NULL,
                                                                           'BATCH');

            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('DPST_BAGS_UPDT_BTCH', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'DPST_BAGS_UPDATE_BATCH_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;

PROCEDURE INTRM_DPST_BAG_PROCESS(
/******************************************************************************
  This procedure will update the deposit tickets on a daily
  basis based on the files we recieve from POS

Created : 09/06/2016 nxk927 CCN Project....
Changed : 11/16/2016 nxk927 CCN Project....
          Grouping by just cost center. 
          The interim deposit will be cosidered 1 per cost center
*******************************************************************************/
IN_SERVER_NAME  IN VARCHAR2,
IN_LOGFILE      IN VARCHAR2
)IS
V_BATCH_NUMBER                 BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS                 BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('INTRM_DPST_BAG_PROC', V_BATCH_NUMBER,IN_SERVER_NAME,IN_LOGFILE);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        FOR rec IN (SELECT DISTINCT COST_CENTER_CODE
                      FROM TEMP_INTERIM_DEPST) LOOP
            BEGIN
                UPDATE BANK_DEP_BAG_TICK
                   SET DEPBAG_ONHAND_QTY      = NVL(DEPBAG_ONHAND_QTY,0) - 1
                 WHERE SUBSTR(COST_CENTER_CODE, 3) = rec.COST_CENTER_CODE;
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'INTRM_DPST_BAG_PROC', SQLERRM, '1111111111111111' , rec.COST_CENTER_CODE, 'BANK_ACCOUNT');
            END;
            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('INTRM_DPST_BAG_PROC', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'INTRM_DPST_BAG_PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END INTRM_DPST_BAG_PROCESS;

END DPST_BAGS_UPDATE_BATCH_PKG;