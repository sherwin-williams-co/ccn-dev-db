create or replace PACKAGE BODY FUTURE_TO_CURRENT_PKG
AS
/**********************************************************
  This Package contains procedured to move the future table records into
  current tables

Created : 05/26/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE CREATE_CURRENT_FROM_FUTURE ( 
/******************************************************************************
	This procedure performs the core process 
  to create current records from passed future records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 10/30/2015 nxk927 CCN Project....
          Code has been changed to deal with Deposit Bag order futures and Deposit ticket order future
          calculation DEPBAG_ONHAND_QTY and DEPBAG_YTD_ORDERED_QTY from history.
Changed : 11/03/2015 jxc517 CCN Project....
          Added BANK_DEP_TICK_FTR_ID column to BANK_DEP_TICKORD_HIST, BANK_DEP_TICKORD, BANK_DEP_TICKORD_FUTURE table
          Added BANK_DEP_BAG_FTR_ID column to BANK_DEP_BAG_TICKORD_HIST, BANK_DEP_BAG_TICKORD, BANK_DEP_BAG_TICKORD_FUTURE table
Changed : 11/09/2015 nxk927 CCN Project....
          Code has been changed to move the Deposit Bag order futures and Deposit ticket order future cursor inside the 
          Deposit Bag futures and Deposit ticket future cursors
          It needs to loop each time there is a record in orders.
        : 11/18/2015 nxk927 CCN Project
          --passing bank account number as well. 
          if the lead account changes the on hand quantity and YTD should start with zero.
        : 11/24/2015 nxk927 CCN Project
          only considering those records that needs to be moved as/before today
          moved the procedure from Account Maintenance pkg to future to current pkg
*******************************************************************************/
    IN_BANK_ACCOUNT_FTR_REC     IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
V_BANK_DEP_TICK_REC      BANK_DEP_TICK_HIST%ROWTYPE;
V_BANK_DEP_BAG_TICK_REC  BANK_DEP_BAG_TICK_HIST%ROWTYPE;
    --cursor to get all the bank account records for the bank account, future id passed
    CURSOR bank_account_ftr_cur IS 
        SELECT BANK_ACCOUNT_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_NAME,
               BOOK_KEEPER_NBR,
               BANK_AUTO_RECON_IND,
               RECON_START_DATE,
               RECON_BANK_ACCOUNT_NBR,
               JV_BOOK_KEEPER_REF,
               JV_BANK_SHORT_NAME,
               IDI_BOOKKEEPER_REF,
               IDI_BANK_SHORT_NAME,
               ROUTING_NBR,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM BANK_ACCOUNT_FUTURE
         WHERE BANK_ACCOUNT_NBR       = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID              = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID
           AND TRUNC(EFFECTIVE_DATE) <= TRUNC(SYSDATE);

    --cursor to get all the bank micr details for the bank account, future id passed
    CURSOR bank_micr_format_ftr_cur IS 
        SELECT BANK_ACCOUNT_NBR,
               FORMAT_NAME,
               DJDE_FORM_PARM,
               DJDE_FEED_PARM,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACTNBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               UPDATE_DATE,
               LAST_UPD_USER_ID,
               MICR_FORMAT_ID
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR       = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID              = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the lead details for the bank account, future id passed
    CURSOR lead_bank_cc_ftr_cur IS 
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               BANK_BRANCH_NBR,
               BANK_TYPE_CODE,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID
           AND TRUNC(EFFECTIVE_DATE) <= TRUNC(SYSDATE);

    --cursor to get all the member details for the bank account, lead store, future id passed
    CURSOR mbr_bank_cc_ftr_cur(IN_LEAD_BANK_CC_REC IN LEAD_BANK_CC%ROWTYPE) IS 
        SELECT LEAD_BANK_ACCOUNT_NBR,
               LEAD_STORE_NBR,
               MEMBER_STORE_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               MEMBER_BANK_ACCOUNT_NBR,
               BANK_BRANCH_NBR,
               UPDATE_DATE,
               LAST_UPD_USER_ID
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_BANK_CC_REC.LEAD_STORE_NBR
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID
           AND TRUNC(EFFECTIVE_DATE) <= TRUNC(SYSDATE);

    --cursor to get all the store micr details for the bank account, micr format id, future id passed
    CURSOR store_micr_format_dtls_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               MICR_FORMAT_ID,
               COST_CENTER_CODE,
               MICR_COST_CNTR,
               MICR_ROUTING_NBR,
               MICR_FORMAT_ACCT_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit ticket details for the store, future id passed
    CURSOR bank_dep_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DAILY_USE_ACTUAL,
               DAILY_USE_OVERRIDE,
               DEP_TKTS_ONHAND_QTY,
               YTD_DEP_TKTS_ORDERED_QTY,
               REORDER_POINT,
               REORDER_NUMBER_BKS,
               IMAGES_PER_PAGE,
               NBR_FORMS_PER_BK,
               PART_PAPER_PER_FORM,
               NBR_DEP_TICKETS_PER_BK,
               SHEETS_OF_PAPER_PER_BK,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               REORDER_SWITCH,
               LAST_VW_ORDER_DATE
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit ticket details for the store, future id passed
    CURSOR bank_dep_tick_ord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               BANK_DEP_TICK_FTR_ID,
               DEPOSIT_ORDER_PRIORITY,
               DEPOSIT_ORDER_STATUS,
               DEPOSIT_ORDER_SEQ_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               ORDER_DATE,
               EXTRACTED_USER_ID
          FROM BANK_DEP_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit bag ticket details for the store, future id passed
    CURSOR bank_dep_bag_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               DEPBAG_DAILY_USE_ACTUAL,
               DEPBAG_DLY_USE_OVERRIDE,
               DEPBAG_LAST_ORDER_DATE,
               DEPBAG_LAST_ORDER_QTY,
               DEPBAG_ONHAND_QTY,
               DEPBAG_REORDER_QTY,
               DEPBAG_YTD_ORDERED_QTY,
               DEP_BAG_REORDER_POINT,
               DEP_BAG_TYPE,
               DEP_BAG_REORDER_SWITCH,
               EFFECTIVE_DATE,
               EXPIRATION_DATE
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the bank deposit bag ticket order details for the store, future id passed
    CURSOR bank_dep_bag_tick_ord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS 
        SELECT BANK_ACCOUNT_NBR,
               COST_CENTER_CODE,
               BANK_DEP_BAG_FTR_ID,
               DEPOSIT_BAG_ORDER_PRIORITY,
               DEPOSIT_BAG_ORDER_STATUS,
               DEPOSIT_BAG_ORDER_SEQ_NBR,
               EFFECTIVE_DATE,
               EXPIRATION_DATE,
               LAST_MAINTENANCE_DATE,
               LAST_MAINT_USER_ID,
               ORDER_DATE,
               EXTRACTED_USER_ID
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

BEGIN
    --loop through the future bank account records and build the current bank account record
    FOR bank_account_rec IN bank_account_ftr_cur LOOP --loops only once for that future id
        TABLE_IU_PKG.BANK_ACCOUNT_I_SP(bank_account_rec);

        --loop through the future bank micr records and build the current bank micr records
        FOR bank_micr_format_rec IN bank_micr_format_ftr_cur LOOP
            TABLE_IU_PKG.BANK_MICR_FORMAT_I_SP(bank_micr_format_rec);
        END LOOP; --bank_micr_format_ftr_cur

        --loop through the future lead records and build the current lead records
        FOR lead_bank_cc_rec IN lead_bank_cc_ftr_cur LOOP
            TABLE_IU_PKG.LEAD_BANK_CC_I_SP(lead_bank_cc_rec);

            --loop through the future bank deposit tickets for that lead and build the current bank deposit tickets
            FOR bank_dep_tick_rec IN bank_dep_tick_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                --loop through the future bank deposit bag tickets order for that lead and build the current bank deposit tickets orders
                --Need to loop through every time there is an order
                FOR bank_dep_tick_ord_ftr_rec IN bank_dep_tick_ord_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                    --passing bank account number as well. if the lead account changes the on hand quantity and YTD should start with zero.
                    V_BANK_DEP_TICK_REC                        := BANKING_COMMON_TOOLS.GET_DEPOSIT_TICKET_ONHAND_YTD(lead_bank_cc_rec.LEAD_STORE_NBR,lead_bank_cc_rec.LEAD_BANK_ACCOUNT_NBR,bank_dep_tick_rec.REORDER_NUMBER_BKS,bank_dep_tick_rec.NBR_DEP_TICKETS_PER_BK,IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID);
                    bank_dep_tick_rec.DEP_TKTS_ONHAND_QTY      := NVL(V_BANK_DEP_TICK_REC.DEP_TKTS_ONHAND_QTY,0);
                    bank_dep_tick_rec.YTD_DEP_TKTS_ORDERED_QTY := NVL(V_BANK_DEP_TICK_REC.YTD_DEP_TKTS_ORDERED_QTY,0); 
                    TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
                    TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tick_ord_ftr_rec);
                 END LOOP; --bank_dep_tick_ord_ftr_cur
            END LOOP; --bank_dep_tick_ftr_cur

            --loop through the future bank deposit bag tickets for that lead and build the current bank deposit tickets
            FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                --loop through the future bank deposit bag order for that lead and build the current bank deposit bag orders
                --Need to loop through every time there is an order
                FOR bank_dep_bag_tick_ord_ftr_rec IN bank_dep_bag_tick_ord_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                    --passing bank account number as well. if the lead account changes the on hand quantity and YTD should start with zero.
                    V_BANK_DEP_BAG_TICK_REC                      := BANKING_COMMON_TOOLS.GET_DEPOSIT_BAG_ONHAND_YTD(lead_bank_cc_rec.LEAD_STORE_NBR, lead_bank_cc_rec.LEAD_BANK_ACCOUNT_NBR,bank_dep_bag_tick_rec.DEPBAG_REORDER_QTY,IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID);
                    bank_dep_bag_tick_rec.DEPBAG_ONHAND_QTY      := NVL(V_BANK_DEP_BAG_TICK_REC.DEPBAG_ONHAND_QTY,0);
                    bank_dep_bag_tick_rec.DEPBAG_YTD_ORDERED_QTY := NVL(V_BANK_DEP_BAG_TICK_REC.DEPBAG_YTD_ORDERED_QTY,0); 
                    TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
                    TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tick_ord_ftr_rec);
                END LOOP; --bank_dep_bag_tick_ord_ftr_cur
            END LOOP; --bank_dep_bag_tick_ftr_cur
            
            --loop through the future stor micr records and build the current store micr records
            FOR str_micr_format_rec IN store_micr_format_dtls_ftr_cur(lead_bank_cc_rec.LEAD_STORE_NBR) LOOP
                TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(str_micr_format_rec);
            END LOOP; --store_micr_format_dtls_ftr_cur
            
            --loop through the future member details for that lead and build the current member details
            FOR mbr_bank_cc_rec IN mbr_bank_cc_ftr_cur(lead_bank_cc_rec) LOOP
                TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(mbr_bank_cc_rec);

                --loop through the future bank deposit tickets for that member and build the current bank deposit tickets
                FOR bank_dep_tick_rec IN bank_dep_tick_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    --loop through the future bank deposit bag tickets order for that member and build the current bank deposit tickets orders
                    --Need to loop through every time there is an order
                    FOR bank_dep_tick_ord_ftr_rec IN bank_dep_tick_ord_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                        --passing bank account number as well. if the lead account changes the on hand quantity and YTD should start with zero.
                        V_BANK_DEP_TICK_REC                        := BANKING_COMMON_TOOLS.GET_DEPOSIT_TICKET_ONHAND_YTD(mbr_bank_cc_rec.MEMBER_STORE_NBR,mbr_bank_cc_rec.LEAD_BANK_ACCOUNT_NBR, bank_dep_tick_rec.REORDER_NUMBER_BKS,bank_dep_tick_rec.NBR_DEP_TICKETS_PER_BK,IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID);
                        bank_dep_tick_rec.DEP_TKTS_ONHAND_QTY      := NVL(V_BANK_DEP_TICK_REC.DEP_TKTS_ONHAND_QTY,0);
                        bank_dep_tick_rec.YTD_DEP_TKTS_ORDERED_QTY := NVL(V_BANK_DEP_TICK_REC.YTD_DEP_TKTS_ORDERED_QTY,0); 
                        TABLE_IU_PKG.BANK_DEP_TICK_I_SP(bank_dep_tick_rec);
                        TABLE_IU_PKG.BANK_DEP_TICKORD_I_SP(bank_dep_tick_ord_ftr_rec);
                    END LOOP; --bank_dep_tick_ord_ftr_cur
                END LOOP; --bank_dep_tick_ftr_cur

                --loop through the future bank deposit bag tickets for that member and build the current bank deposit tickets
                FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    --loop through the future bank deposit bag order for that member and build the current bank deposit bag orders
                    --Need to loop through every time there is an order
                    FOR bank_dep_bag_tick_ord_ftr_rec IN bank_dep_bag_tick_ord_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                        --passing bank account number as well. if the lead account changes the on hand quantity and YTD should start with zero.
                        V_BANK_DEP_BAG_TICK_REC                      := BANKING_COMMON_TOOLS.GET_DEPOSIT_BAG_ONHAND_YTD(mbr_bank_cc_rec.MEMBER_STORE_NBR, mbr_bank_cc_rec.LEAD_BANK_ACCOUNT_NBR,bank_dep_bag_tick_rec.DEPBAG_REORDER_QTY,IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID);
                        bank_dep_bag_tick_rec.DEPBAG_ONHAND_QTY      := NVL(V_BANK_DEP_BAG_TICK_REC.DEPBAG_ONHAND_QTY,0);
                        bank_dep_bag_tick_rec.DEPBAG_YTD_ORDERED_QTY := NVL(V_BANK_DEP_BAG_TICK_REC.DEPBAG_YTD_ORDERED_QTY,0);
                        TABLE_IU_PKG.BANK_DEP_BAG_TICK_I_SP(bank_dep_bag_tick_rec);
                        TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_I_SP(bank_dep_bag_tick_ord_ftr_rec);
                    END LOOP; --bank_dep_bag_tick_ord_ftr_cur
                END LOOP; --bank_dep_bag_tick_ftr_cur
                
                --loop through the future stor micr records and build the current store micr records
                FOR str_micr_format_rec IN store_micr_format_dtls_ftr_cur(mbr_bank_cc_rec.MEMBER_STORE_NBR) LOOP
                    TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_I_SP(str_micr_format_rec);
                END LOOP; --store_micr_format_dtls_ftr_cur
            END LOOP; --mbr_bank_cc_ftr_cur
        END LOOP; --lead_bank_cc_ftr_cur
    END LOOP; --bank_account_ftr_cur
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CREATE_CURRENT_FROM_FUTURE ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CREATE_CURRENT_FROM_FUTURE;

PROCEDURE FUTURE_TO_CURR_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for  delete process for future records

Created : 07/13/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 10/30/2015 nxk927 CCN Project....
          Code has been changed to deal with Deposit Bag order futures and Deposit ticket order future
Changed : 11/04/2015 jxc517 CCN Project....
          Code changed to triger future to current process if any of these virtual futures
          members/leads reached the time to move from future to current
        : 11/09/2015 nxk927/jxc517 CCN Project....
          moved future to current call outside as it didn't run until we have a real 
          bank future.
        : 11/19/2015 nxk927 CCN Project....
          getting only those records that need to move from future to current as/before today
          check added to see if there are any child record present. 
          moved the deletion of str_micr_format_ftr records from outside to inner loop.
          removed the filter with micr format id for store_micr_format_dtls_ftr_cur
*******************************************************************************/
    IN_BANK_ACCOUNT_FTR_REC     IN     BANK_ACCOUNT_FUTURE%ROWTYPE)
IS
    --cursor to get all the lead records for the bank account, future id passed
    CURSOR lead_bank_cc_ftr_cur IS 
        SELECT *
          FROM LEAD_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND EFFECTIVE_DATE       <= TRUNC(SYSDATE)
           AND FUTURE_ID             = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the member records for the bank account, lead store, future id passed
    CURSOR mbr_bank_cc_ftr_cur(IN_LEAD_BANK_CC_FTR_REC IN LEAD_BANK_CC_FUTURE%ROWTYPE) IS 
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_BANK_CC_FTR_REC.LEAD_STORE_NBR
           AND EFFECTIVE_DATE       <= TRUNC(SYSDATE)
           AND FUTURE_ID             = IN_LEAD_BANK_CC_FTR_REC.FUTURE_ID;

    --cursor to get all the bank micr records for the bank account, future id passed
    CURSOR bank_micr_format_ftr_cur IS 
        SELECT *
          FROM BANK_MICR_FORMAT_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the store micr records for the bank account, micr format id, future id passed
    CURSOR store_micr_format_dtls_ftr_cur(IN_COST_CENTER_CODE IN VARCHAR2) IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
           AND COST_CENTER_CODE = IN_COST_CENTER_CODE          
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit ticket records for the store, future id passed
    CURSOR bank_dep_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit bag ticket records for the store, future id passed
    CURSOR bank_dep_bag_tick_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit ticket orders records for the store, future id passed
    CURSOR bank_dep_tickord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    --cursor to get all the deposit bag ticket orders records for the store, future id passed
    CURSOR bank_dep_bag_tickord_ftr_cur(IN_COST_CENTER_CODE VARCHAR2) IS
        SELECT *
          FROM BANK_DEP_BAG_TICKORD_FUTURE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
           AND FUTURE_ID        = IN_BANK_ACCOUNT_FTR_REC.FUTURE_ID;

    V_COUNT NUMBER := 0;

BEGIN
    IF ACCOUNT_MAINTENANCE_PKG.IS_REAL_FUTURE_BANK_ACCOUNT(IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR) = 'N' THEN
       --below query will check if any of these virtual futures members/leads reached the
       --time to move from future to current
       BEGIN
           SELECT COUNT(*)
             INTO V_COUNT
             FROM (
              --below query checkes if member is active in future, it's effective date is <= batch date
              --and that lead does not exist in current (as current to history batch already deleted it from current)
                   SELECT 1
                     FROM LEAD_BANK_CC_FUTURE A
                    WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
                      AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
                      AND NOT EXISTS (SELECT 1
                                        FROM LEAD_BANK_CC
                                       WHERE LEAD_STORE_NBR = A.LEAD_STORE_NBR)
                   UNION
                    --below query checkes if member is active in future, it's effective date is <= batch date
                    --and that member does not exist in current (as current to history batch already deleted it from current)
                  SELECT 1
                    FROM MEMBER_BANK_CC_FUTURE B
                   WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR
                     AND EFFECTIVE_DATE <= TRUNC(SYSDATE)
                     AND NOT EXISTS (SELECT 1
                                       FROM MEMBER_BANK_CC
                                      WHERE MEMBER_STORE_NBR = B.MEMBER_STORE_NBR));
       EXCEPTION
           WHEN OTHERS THEN
              NULL;
       END;
       IF V_COUNT = 0 THEN
          --exit out the process without doing anything, if the future record came for deletion is a virtual future
          --NOTE: return should happen only from batch not from UI deletion processes
          RETURN;
       END IF;
    END IF;
    --below call will create the current records from future records
    CREATE_CURRENT_FROM_FUTURE(IN_BANK_ACCOUNT_FTR_REC);

    --get all the lead bank cc details for this future and loop through
    FOR lead_bank_cc_ftr_rec IN lead_bank_cc_ftr_cur LOOP
         --getting the count if there are any more members transfering in future for the same lead
         --this check is to see if there are any member present for the same lead for future date.
        SELECT COUNT(*)
          INTO V_COUNT
          FROM MEMBER_BANK_CC_FUTURE
         WHERE LEAD_STORE_NBR = lead_bank_cc_ftr_rec.LEAD_STORE_NBR
           AND TRUNC(EFFECTIVE_DATE) > TRUNC(SYSDATE);

        --for each lead bakn, check if there is a child member banks attched to it
        --if so, get that child member bank details and delete those child future records first
        FOR mbr_bank_cc_ftr_rec IN mbr_bank_cc_ftr_cur(lead_bank_cc_ftr_rec) LOOP

            --for this member store, get the bank deposit ticket order details
            --if found, delete those child records first
            FOR bank_dep_tickord_ftr_rec IN bank_dep_tickord_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP
                --now delete the bank deposit ticket details from the future
                TABLE_IU_PKG.BANK_DEP_TICKORD_FUTURE_D_SP(bank_dep_tickord_ftr_rec);
            END LOOP; --bank_dep_tickord_cur

            FOR bank_dep_bag_tickord_ftr_rec IN bank_dep_bag_tickord_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP

                --now delete the bank deposit bag ticket details from the future
                TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_D_SP(bank_dep_bag_tickord_ftr_rec);
            END LOOP; --bank_dep_bag_tickord_cur

            --for this member store, get the bank deposit ticket details
            --if found, delete those child records first
            FOR bank_dep_tick_ftr_rec IN bank_dep_tick_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP
                --now delete the bank deposit ticket details from the future
                TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_ftr_rec);
            END LOOP; --bank_dep_tick_cur

            FOR bank_dep_bag_tick_ftr_rec IN bank_dep_bag_tick_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP
                --now delete the bank deposit bag ticket details from the future
                TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_D_SP(bank_dep_bag_tick_ftr_rec);
            END LOOP; --bank_dep_bag_tick_cur

            --if so, get that store micr details and delete those child future records first
            FOR str_micr_format_ftr_rec IN store_micr_format_dtls_ftr_cur(mbr_bank_cc_ftr_rec.MEMBER_STORE_NBR) LOOP
                --now delete the store micr format details from the future that the member is attached with
                TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_D_SP(str_micr_format_ftr_rec);
            END LOOP; --store_micr_format_dtls_cur

            --this check is to make sure if we have any future members for the same lead. If we have then to keep it identical
            --this will have to be in the future as well
            IF V_COUNT = 0 THEN
               --now delete the member bank details from the future if there are no other members in the future for same lead
               TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_D_SP(mbr_bank_cc_ftr_rec);
            END IF;
        END LOOP; --mbr_bank_cc_cur

        --this check is to see if there are any member present for the same lead.
        --If not then delete the bank future rec
        IF V_COUNT = 0 THEN
           --for this lead store, get the bank deposit ticket order details
           --if found, delete those child records first
            FOR bank_dep_tickord_ftr_rec IN bank_dep_tickord_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP
                --now delete the bank deposit ticket details from the future
                TABLE_IU_PKG.BANK_DEP_TICKORD_FUTURE_D_SP(bank_dep_tickord_ftr_rec);
             END LOOP; --bank_dep_tickord_cur

             FOR bank_dep_bag_tickord_ftr_rec IN bank_dep_bag_tickord_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP
                 --now delete the bank deposit bag ticket details from the future
                 TABLE_IU_PKG.BANK_DEP_BAG_TICKORD_FTR_D_SP(bank_dep_bag_tickord_ftr_rec);
             END LOOP; --bank_dep_bag_tickord_cur

             --for this lead store, get the bank deposit ticket details
             --if found, delete those child records first
             FOR bank_dep_tick_ftr_rec IN bank_dep_tick_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP
                 --now delete the bank deposit ticket details from the future
                 TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_ftr_rec);
             END LOOP; --bank_dep_tick_cur

             FOR bank_dep_bag_tick_ftr_rec IN bank_dep_bag_tick_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP
                 --now delete the bank deposit ticket bag details from the future
                 TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_D_SP(bank_dep_bag_tick_ftr_rec);
             END LOOP; --bank_dep_bag_tick_cur

             FOR str_micr_format_ftr_rec IN store_micr_format_dtls_ftr_cur(lead_bank_cc_ftr_rec.LEAD_STORE_NBR) LOOP
                 --now delete the store micr format details from the future
                 TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_D_SP(str_micr_format_ftr_rec);
             END LOOP; --store_micr_format_dtls_cur

            --now delete the lead bank details from the future
            TABLE_IU_PKG.LEAD_BANK_CC_FUTURE_D_SP(lead_bank_cc_ftr_rec);
        END IF;
    END LOOP; --lead_bank_cc_cur
    
    SELECT COUNT(*)
      INTO V_COUNT 
      FROM LEAD_BANK_CC_FUTURE
     WHERE LEAD_BANK_ACCOUNT_NBR = IN_BANK_ACCOUNT_FTR_REC.BANK_ACCOUNT_NBR;
    --this check is to see if there are any lead present. If not then delete the bank future rec
    IF V_COUNT = 0 THEN 
        --get all the bank micr details for this future and loop through
        FOR bank_micr_format_ftr_rec IN bank_micr_format_ftr_cur LOOP
            --now delete the bank micr details from the future
            TABLE_IU_PKG.BANK_MICR_FORMAT_FUTURE_D_SP(bank_micr_format_ftr_rec);
        END LOOP; --bank_micr_format_cur

        --now delete the bank account details from the future
        TABLE_IU_PKG.BANK_ACCOUNT_FUTURE_D_SP(IN_BANK_ACCOUNT_FTR_REC);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'FUTURE_TO_CURR_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END FUTURE_TO_CURR_DELETE_SP;

PROCEDURE PROCESS
/******************************************************************************
  This procedure will move the future table records into current tables
  Tables:
      BANK_ACCOUNT
      LEAD_BANK_CC
      MEMBER_BANK_CC
      BANK_MICR_FORMAT

Created : 05/26/2015 jxc517 CCN Project....
Changed : 11/02/2015 jxc517 CCN Project....
          Batch process was changed not to send the future to current details back to audit again
          These details were already sent when the actual future dated transaction was performed
Changed : 11/09/2015 jxc517 CCN Project....
          Batch process was changed not to handle below scenario
          If any Future is created after the final Audit for that day run(say at 6pm),
          then we need to send this in the next Audit as current records otherwise the 
          batch will Delete them and mark them as complete
        : 11/24/2015 nxk927 CCN Project....
          changed the call for future to current from its private procedure
          FUTURE_TO_CURR_DELETE_SP
*******************************************************************************/
IS
V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_START_DATE        DATE := SYSDATE;
V_END_DATE          DATE;
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('FUTR_TO_CURR_LOAD', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        FOR rec IN (SELECT *
                      FROM BANK_ACCOUNT_FUTURE
                     WHERE EFFECTIVE_DATE <= TRUNC(SYSDATE)) LOOP
            BEGIN
                FUTURE_TO_CURR_DELETE_SP(rec);
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'FUTURE_TO_CURRENT_PKG.PROCESS', SQLERRM, rec.BANK_ACCOUNT_NBR, '111111', 'BANK_ACCOUNT');
            END;
        END LOOP;
        --Below AUDIT_LOG table update makes sure we mark all the future to current moved records as sent for audit
        --we should not send them back again as these details were already sent when the future dated transaction was processed
        V_END_DATE := SYSDATE;
        UPDATE AUDIT_LOG
           SET AUDIT_REC_FLAG = 'R'
         WHERE TRANSACTION_DATE BETWEEN V_START_DATE AND V_END_DATE
           AND AUDIT_REC_FLAG IS NULL;
        --Loop through all the futures created after previous batch having records effective date as today
        FOR rec IN (SELECT DISTINCT TABLE_NAME,
                                    TRANSACTION_ID
                      FROM AUDIT_LOG
                     WHERE AUDIT_REC_FLAG IS NULL
                       AND TABLE_NAME LIKE '%FUTURE'
                       AND TABLE_ROW_DATA LIKE '%<EFFECTIVE_DATE>'||TO_CHAR(SYSDATE, 'RRRRMMDD')||'</EFFECTIVE_DATE>%'
                       AND TRANSACTION_DATE >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                                  FROM BATCH_JOB
                                                 WHERE BATCH_JOB_NAME = 'BANKING_AUDIT_LOG')) LOOP
            --mark it as not sent, else it will never go back to audit
            UPDATE AUDIT_LOG
               SET AUDIT_REC_FLAG = NULL
             WHERE TRANSACTION_DATE BETWEEN V_START_DATE AND V_END_DATE
               AND TABLE_NAME = rec.TABLE_NAME
               --below condition uses INSTR to get the transaction_id from 1st charater till second from last "|"
               AND TRANSACTION_ID = SUBSTR(rec.TRANSACTION_ID, 1, INSTR(rec.TRANSACTION_ID, '|', -1, 2))
               AND AUDIT_REC_FLAG = 'R';
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('FUTR_TO_CURR_LOAD', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'FUTURE_TO_CURRENT_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;

END FUTURE_TO_CURRENT_PKG;