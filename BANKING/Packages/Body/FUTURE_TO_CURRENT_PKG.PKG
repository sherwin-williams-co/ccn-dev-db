CREATE OR REPLACE PACKAGE BODY FUTURE_TO_CURRENT_PKG
AS
/**********************************************************
  This Package contains procedured to move the future table records into
  current tables

Created : 05/26/2015 jxc517 CCN Project....
Changed :
**********************************************************/
PROCEDURE PROCESS
/******************************************************************************
  This procedure will move the future table records into current tables
  Tables:
      BANK_ACCOUNT
      LEAD_BANK_CC
      MEMBER_BANK_CC
      BANK_MICR_FORMAT

Created : 05/26/2015 jxc517 CCN Project....
Changed : 11/02/2015 jxc517 CCN Project....
          Batch process was changed not to send the future to current details back to audit again
          These details were already sent when the actual future dated transaction was performed
Changed : 11/09/2015 jxc517 CCN Project....
          Batch process was changed not to handle below scenario
          If any Future is created after the final Audit for that day run(say at 6pm),
          then we need to send this in the next Audit as current records otherwise the 
          batch will Delete them and mark them as complete
*******************************************************************************/
IS
V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
V_START_DATE        DATE := SYSDATE;
V_END_DATE          DATE;
BEGIN
    CCN_BATCH_PKG.INSERT_BATCH_JOB('FUTR_TO_CURR_LOAD', V_BATCH_NUMBER);
    CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        FOR rec IN (SELECT *
                      FROM BANK_ACCOUNT_FUTURE
                     WHERE EFFECTIVE_DATE <= TRUNC(SYSDATE)) LOOP
            BEGIN
                ACCOUNT_MAINTENANCE_PKG.ACCNT_MNTNC_FUTURE_DELETE_SP(rec, 'Y'); --Y here say's to move future to current
            EXCEPTION
                WHEN OTHERS THEN
                    ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'FUTURE_TO_CURRENT_PKG.PROCESS', SQLERRM, rec.BANK_ACCOUNT_NBR, '111111', 'BANK_ACCOUNT');
            END;
        END LOOP;
        --Below AUDIT_LOG table update makes sure we mark all the future to current moved records as sent for audit
        --we should not send them back again as these details were already sent when the future dated transaction was processed
        V_END_DATE := SYSDATE;
        UPDATE AUDIT_LOG
           SET AUDIT_REC_FLAG = 'R'
         WHERE TRANSACTION_DATE BETWEEN V_START_DATE AND V_END_DATE
           AND AUDIT_REC_FLAG IS NULL;
        --Loop through all the futures created after previous batch having records effective date as today
        FOR rec IN (SELECT DISTINCT TABLE_NAME,
                                    TRANSACTION_ID
                      FROM AUDIT_LOG
                     WHERE AUDIT_REC_FLAG IS NULL
                       AND TABLE_NAME LIKE '%FUTURE'
                       AND TABLE_ROW_DATA LIKE '%<EFFECTIVE_DATE>'||TO_CHAR(SYSDATE, 'RRRRMMDD')||'</EFFECTIVE_DATE>%'
                       AND TRANSACTION_DATE >= (SELECT MAX(BATCH_JOB_LAST_RUN_DATE)
                                                  FROM BATCH_JOB
                                                 WHERE BATCH_JOB_NAME = 'BANKING_AUDIT_LOG')) LOOP
            --mark it as not sent, else it will never go back to audit
            UPDATE AUDIT_LOG
               SET AUDIT_REC_FLAG = NULL
             WHERE TRANSACTION_DATE BETWEEN V_START_DATE AND V_END_DATE
               AND TABLE_NAME = rec.TABLE_NAME
               --below condition uses INSTR to get the transaction_id from 1st charater till second from last "|"
               AND TRANSACTION_ID = SUBSTR(rec.TRANSACTION_ID, 1, INSTR(rec.TRANSACTION_ID, '|', -1, 2))
               AND AUDIT_REC_FLAG = 'R';
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            V_TRANS_STATUS := 'ERROR';
            ROLLBACK;
    END;
    COMMIT;
    CCN_BATCH_PKG.UPDATE_BATCH_JOB('FUTR_TO_CURR_LOAD', V_BATCH_NUMBER, V_TRANS_STATUS);
    CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE, 'FUTURE_TO_CURRENT_PKG.PROCESS', SQLERRM, '1111111111', '111111', 'OTHER');
END PROCESS;

END FUTURE_TO_CURRENT_PKG;

