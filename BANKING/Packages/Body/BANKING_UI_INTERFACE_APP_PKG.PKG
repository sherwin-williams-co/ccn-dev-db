create or replace PACKAGE BODY         BANKING_UI_INTERFACE_APP_PKG
AS
/**********************************************************
  This Package is intended to be the wrapper for all banking
  related packages that are invoked from UI

Created : 03/30/2015 jxc517 CCN Project....
Changed :
**********************************************************/
FUNCTION GET_FUTURE_ID(
/***********************************************************
	This procedure will be called from UI to get the future id 

Created : 07/23/2015 jxc517 CCN Project Team....
Changed : 
************************************************************/
IN_BANK_ACCOUNT_NBR IN VARCHAR2) RETURN NUMBER
IS
BEGIN
    RETURN BANKING_COMMON_TOOLS.GET_FUTURE_ID(IN_BANK_ACCOUNT_NBR);
END GET_FUTURE_ID;

PROCEDURE ACCOUNT_MAINTENACE_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from banking
  account maintenance related tables

Inputs:
    IN_BANK_ACCOUNT_NBR
    IN_COST_CENTER_CODE

Created : 03/30/2015 jxc517 CCN Project....
Changed : 10/19/2015 jxc517 CCN Project....
          If a store contains future but not current, throw a different error asking
          user to search based on the bank account number instead of store number
*******************************************************************************/
IN_BANK_ACCOUNT_NBR           IN     VARCHAR2
,IN_COST_CENTER_CODE          IN     VARCHAR2
,OUT_BANK_ACCOUNT_REF_CUR        OUT REF_CURSOR
,OUT_BANK_ACCOUNT_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_LEAD_CC_REF_CUR        OUT REF_CURSOR
,OUT_BANK_LEAD_CC_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FORMAT_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FRMT_FTR_REF_CUR  OUT REF_CURSOR)
IS
    V_BANK_ACCOUNT_NBR          BANK_ACCOUNT.BANK_ACCOUNT_NBR%TYPE := IN_BANK_ACCOUNT_NBR;
BEGIN
    IF V_BANK_ACCOUNT_NBR IS NULL THEN
        V_BANK_ACCOUNT_NBR := BANKING_COMMON_TOOLS.GET_BNK_ACCNT_NBR_FOR_CC(IN_COST_CENTER_CODE);
        --Raise error as no where found
        IF V_BANK_ACCOUNT_NBR IS NULL THEN
            V_BANK_ACCOUNT_NBR := BANKING_COMMON_TOOLS.GET_FTR_BNK_ACCNT_NBR_FOR_CC(IN_COST_CENTER_CODE);
            IF V_BANK_ACCOUNT_NBR IS NULL THEN
                ERRPKG.RAISE_ERR(errnums.en_accnt_nbr_not_avlbl_for_cc,
                                 'ACCOUNT_MAINTENACE_UI_SP',
                                 'Bank Account Number not found for the cost center provided');
            ELSE
                ERRPKG.RAISE_ERR(errnums.en_accnt_nbr_not_avlbl_for_cc,
                                 'ACCOUNT_MAINTENACE_UI_SP',
                                 'Current Bank Account Number not found for the cost center provided, Please search using bank account number ');            
            END IF;
        END IF;
    END IF;
    ACCOUNT_MAINTENANCE_PKG.ACCOUNT_MAINTENACE_UI_SP(V_BANK_ACCOUNT_NBR,
                                                     OUT_BANK_ACCOUNT_REF_CUR,
                                                     OUT_BANK_ACCOUNT_FTR_REF_CUR,
                                                     OUT_BANK_LEAD_CC_REF_CUR,
                                                     OUT_BANK_LEAD_CC_FTR_REF_CUR,
                                                     OUT_BANK_MICR_FORMAT_REF_CUR,
                                                     OUT_BANK_MICR_FRMT_FTR_REF_CUR);
END ACCOUNT_MAINTENACE_UI_SP;

PROCEDURE BANK_DEP_TICK_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from BANK_DEP_TICK table

Inputs:
    IN_COST_CENTER_CODE

Created : 05/20/2015 jxc517 CCN Project....
Changed : 08/21/2015 jxc517 CCN Project....
          Modified signature to pass future details also to allow future maintenance
*******************************************************************************/
IN_COST_CENTER_CODE           IN     VARCHAR2
,OUT_BANK_DEP_TICK_REF_CUR       OUT REF_CURSOR
,OUT_BANK_ACCOUNT_REF_CUR        OUT REF_CURSOR
,OUT_BANK_MICR_FORMAT_REF_CUR    OUT REF_CURSOR
,OUT_BANK_DEP_TICK_FTR_REF_CUR   OUT REF_CURSOR
,OUT_BANK_ACCOUNT_FTR_REF_CUR    OUT REF_CURSOR
,OUT_BANK_MICR_FRMT_FTR_REF_CUR  OUT REF_CURSOR)
IS
BEGIN
    DEPOSIT_TICKET_MAINTENANCE_PKG.DEPOSIT_TICKET_MNTNC_UI_SP(IN_COST_CENTER_CODE,
                                                              OUT_BANK_DEP_TICK_REF_CUR,
                                                              OUT_BANK_ACCOUNT_REF_CUR,
                                                              OUT_BANK_MICR_FORMAT_REF_CUR,
                                                              OUT_BANK_DEP_TICK_FTR_REF_CUR,
                                                              OUT_BANK_ACCOUNT_FTR_REF_CUR,
                                                              OUT_BANK_MICR_FRMT_FTR_REF_CUR);
END BANK_DEP_TICK_UI_SP;

PROCEDURE BANK_DEP_BAG_TICK_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from BANK_DEP_BAG_TICK table

Inputs:
    IN_COST_CENTER_CODE

Created : 05/20/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2
,OUT_REF_CUR           OUT REF_CURSOR)
IS
BEGIN
    DEPOSIT_BAG_MAINTENANCE_PKG.BANK_DEP_BAG_TICK_UI_SP(IN_COST_CENTER_CODE, OUT_REF_CUR);
END BANK_DEP_BAG_TICK_UI_SP;

PROCEDURE MEMBER_CC_MAINTENACE_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from member
  cost center maintenance related tables

Inputs:
    IN_COST_CENTER_CODE

Created : 05/22/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE          IN     VARCHAR2
,OUT_BANK_MBR_CC_REF_CUR         OUT REF_CURSOR
,OUT_BANK_MBR_CC_FTR_REF_CUR     OUT REF_CURSOR)
IS
BEGIN
    MEMBER_MAINTENANCE_PKG.MEMBER_CC_MAINTENACE_UI_SP(IN_COST_CENTER_CODE,
                                                      OUT_BANK_MBR_CC_REF_CUR,
                                                      OUT_BANK_MBR_CC_FTR_REF_CUR);
END MEMBER_CC_MAINTENACE_UI_SP;

PROCEDURE BANK_HISTORY_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from the
  history of the cost center (Independent/Lead/Member) passed

Inputs:
    IN_COST_CENTER_CODE

Created : 06/05/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE IN     VARCHAR2
,OUT_REF_CUR           OUT REF_CURSOR)
IS
BEGIN
    --Testing : '799807' Lead, '708225' Member
    OPEN OUT_REF_CUR FOR
        --History Bank Account Details joined with history tables
        SELECT B.BANK_ACCOUNT_NBR,
               T.MEMBER_BANK_ACCOUNT_NBR,
               T.BANK_BRANCH_NBR,
               T.BANK_TYPE_CODE,
               T.EFFECTIVE_DATE,
               T.EXPIRATION_DATE,
               B.EFFECTIVE_DATE BANK_EFFECTIVE_DATE,
               B.EXPIRATION_DATE BANK_EXPIRATION_DATE,
               B.BANK_NAME,
               B.BOOK_KEEPER_NBR,
               B.BANK_AUTO_RECON_IND
          FROM BANK_ACCOUNT_HIST B,
               --history LEAD union history MEMBER
               (SELECT LEAD_BANK_ACCOUNT_NBR,
                       NULL MEMBER_BANK_ACCOUNT_NBR,
                       BANK_BRANCH_NBR,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE,
                       NULL FUTURE_ID
                  FROM LEAD_BANK_CC_HIST
                 WHERE LEAD_STORE_NBR = IN_COST_CENTER_CODE
                 UNION
                SELECT LEAD_BANK_ACCOUNT_NBR,
                       MEMBER_BANK_ACCOUNT_NBR,
                       BANK_BRANCH_NBR,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE,
                       NULL FUTURE_ID
                  FROM MEMBER_BANK_CC_HIST
                 WHERE MEMBER_STORE_NBR = IN_COST_CENTER_CODE) T
         WHERE T.LEAD_BANK_ACCOUNT_NBR = B.BANK_ACCOUNT_NBR
           AND NVL(T.EFFECTIVE_DATE,TRUNC(SYSDATE)) BETWEEN B.EFFECTIVE_DATE AND NVL(B.EXPIRATION_DATE,TRUNC(SYSDATE))
         UNION
        --Current Bank Account Details joined with current tables
        SELECT B.BANK_ACCOUNT_NBR,
               T.MEMBER_BANK_ACCOUNT_NBR,
               T.BANK_BRANCH_NBR,
               T.BANK_TYPE_CODE,
               T.EFFECTIVE_DATE,
               T.EXPIRATION_DATE,
               B.EFFECTIVE_DATE BANK_EFFECTIVE_DATE,
               B.EXPIRATION_DATE BANK_EXPIRATION_DATE,
               B.BANK_NAME,
               B.BOOK_KEEPER_NBR,
               B.BANK_AUTO_RECON_IND
          FROM BANK_ACCOUNT B,
               --current LEAD union current MEMBER
               (SELECT LEAD_BANK_ACCOUNT_NBR,
                       NULL MEMBER_BANK_ACCOUNT_NBR,
                       BANK_BRANCH_NBR,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE,
                       NULL FUTURE_ID
                  FROM LEAD_BANK_CC
                 WHERE LEAD_STORE_NBR = IN_COST_CENTER_CODE
                  UNION
                SELECT LEAD_BANK_ACCOUNT_NBR,
                       MEMBER_BANK_ACCOUNT_NBR,
                       BANK_BRANCH_NBR,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE,
                       NULL FUTURE_ID
                  FROM MEMBER_BANK_CC
                 WHERE MEMBER_STORE_NBR = IN_COST_CENTER_CODE) T
         WHERE T.LEAD_BANK_ACCOUNT_NBR = B.BANK_ACCOUNT_NBR
         UNION
        --Future Bank Account Details joined with future tables
        SELECT B.BANK_ACCOUNT_NBR,
               T.MEMBER_BANK_ACCOUNT_NBR,
               T.BANK_BRANCH_NBR,
               T.BANK_TYPE_CODE,
               T.EFFECTIVE_DATE,
               T.EXPIRATION_DATE,
               B.EFFECTIVE_DATE BANK_EFFECTIVE_DATE,
               B.EXPIRATION_DATE BANK_EXPIRATION_DATE,
               B.BANK_NAME,
               B.BOOK_KEEPER_NBR,
               B.BANK_AUTO_RECON_IND
          FROM BANK_ACCOUNT_FUTURE B,
               --future LEAD union future MEMBER
               (SELECT LEAD_BANK_ACCOUNT_NBR,
                       NULL MEMBER_BANK_ACCOUNT_NBR,
                       BANK_BRANCH_NBR,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       BANK_TYPE_CODE,
                       FUTURE_ID
                  FROM LEAD_BANK_CC_FUTURE
                 WHERE LEAD_STORE_NBR = IN_COST_CENTER_CODE
                  UNION
                SELECT LEAD_BANK_ACCOUNT_NBR,
                       MEMBER_BANK_ACCOUNT_NBR,
                       BANK_BRANCH_NBR,
                       EFFECTIVE_DATE,
                       EXPIRATION_DATE,
                       'M' BANK_TYPE_CODE,
                       FUTURE_ID
                  FROM MEMBER_BANK_CC_FUTURE
                 WHERE MEMBER_STORE_NBR = IN_COST_CENTER_CODE) T
         WHERE T.LEAD_BANK_ACCOUNT_NBR = B.BANK_ACCOUNT_NBR
           AND B.FUTURE_ID             = T.FUTURE_ID
         ORDER BY EFFECTIVE_DATE;
END BANK_HISTORY_UI_SP;

PROCEDURE BANK_DEP_TICK_OAK_UI_SP (
/*******************************************************************************
    This procedure is intended to RETURN a ref cursor with data from BANK_DEP_TICKOAK table

Created : 07/31/2015 sxt410 CCN Project....
Changed : 
*******************************************************************************/
OUT_BANK_DEP_TICKOAK_REF_CUR    OUT REF_CURSOR)
IS
BEGIN
    BANK_DEP_TICKOAK_PKG.BANK_DEP_TICKOAK_UI_SP ( OUT_BANK_DEP_TICKOAK_REF_CUR );
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_OAK_UI_SP ' || SUBSTR(SQLERRM,1,500));
                                                                  
END BANK_DEP_TICK_OAK_UI_SP;

PROCEDURE ACCNT_MNTNC_UI_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the Account Maintenance Window
    Tables: 
       BANK_ACCOUNT
       BANK_ACCOUNT_FUTURE
       LEAD_BANK_CC
       LEAD_BANK_CC_FUTURE
       BANK_MICR_FORMAT
       BANK_MICR_FORMAT_FUTURE

<?xml version="1.0" encoding="UTF-8" ?>
<ACCOUNT_MAINTENANCE_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
    <BANK_ACCOUNT>
        <BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</BANK_ACCOUNT_NBR>
        <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
        <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
        <BANK_NAME>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</BANK_NAME>
        <BOOK_KEEPER_NBR>XX</BOOK_KEEPER_NBR>
        <STATEMENT_TYPE>XX</STATEMENT_TYPE>
        <BANK_AUTO_RECON_IND>X</BANK_AUTO_RECON_IND>
        <RECON_START_DATE>MM-DD-RRRR</RECON_START_DATE>
        <RECON_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</RECON_BANK_ACCOUNT_NBR>
        <JV_BOOK_KEEPER_REF>XXXXXX</JV_BOOK_KEEPER_REF>
        <JV_BANK_SHORT_NAME>XXXXXX</JV_BANK_SHORT_NAME>
        <IDI_BOOKKEEPER_REF>XXXXXX</IDI_BOOKKEEPER_REF>
        <IDI_BANK_SHORT_NAME>XXXXXX</IDI_BANK_SHORT_NAME>
        <ROUTING_NBR>XXXXXXXXX</ROUTING_NBR>
        <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
        <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
        <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
    </BANK_ACCOUNT>
    <LEAD_BANK_CC>
        <LEAD_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</LEAD_BANK_ACCOUNT_NBR>
        <LEAD_STORE_NBR>XXXXXX</LEAD_STORE_NBR>
        <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
        <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
        <BANK_BRANCH_NBR>XXXXXXXX</BANK_BRANCH_NBR>
        <BANK_TYPE_CODE>X</BANK_TYPE_CODE>
        <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
        <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
        <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
    </LEAD_BANK_CC>
    <BANK_MICR_FORMAT_TABLE>
        <BANK_MICR_FORMAT>
            <BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</BANK_ACCOUNT_NBR>
            <FORMAT_NAME>XXXXXX</FORMAT_NAME>
            <DJDE_FORM_PARM>XXXXXX</DJDE_FORM_PARM>
            <DJDE_FEED_PARM>XXXXX</DJDE_FEED_PARM>
            <MICR_COST_CNTR>XXXXXXXX</MICR_COST_CNTR>
            <MICR_ROUTING_NBR>XXXXXXXXXXX</MICR_ROUTING_NBR>
            <MICR_FORMAT_ACTNBR>XXXXXXXXXXXXXXXXX</MICR_FORMAT_ACTNBR>
            <REORDER_POINT>XXXXX</REORDER_POINT>
            <REORDER_NUMBER_BKS>XXXXX</REORDER_NUMBER_BKS>
            <IMAGES_PER_PAGE>X</IMAGES_PER_PAGE>
            <NBR_FORMS_PER_BK>XXXXX</NBR_FORMS_PER_BK>
            <PART_PAPER_PER_FORM>X</PART_PAPER_PER_FORM>
            <NBR_DEP_TICKETS_PER_BK>XXXXX</NBR_DEP_TICKETS_PER_BK>
            <SHEETS_OF_PAPER_PER_BK>XXXXX</SHEETS_OF_PAPER_PER_BK>
            <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
            <LAST_MAINTENANCE_DATE>MM-DD-RRRR</LAST_MAINTENANCE_DATE>
            <LAST_MAINT_USER_ID>XXXXXX</LAST_MAINT_USER_ID>
            <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
            <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
            <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
        </BANK_MICR_FORMAT>
        <BANK_MICR_FORMAT>
            <BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</BANK_ACCOUNT_NBR>
            <FORMAT_NAME>XXXXXX</FORMAT_NAME>
            <DJDE_FORM_PARM>XXXXXX</DJDE_FORM_PARM>
            <DJDE_FEED_PARM>XXXXX</DJDE_FEED_PARM>
            <MICR_COST_CNTR>XXXXXXXX</MICR_COST_CNTR>
            <MICR_ROUTING_NBR>XXXXXXXXXXX</MICR_ROUTING_NBR>
            <MICR_FORMAT_ACTNBR>XXXXXXXXXXXXXXXXX</MICR_FORMAT_ACTNBR>
            <REORDER_POINT>XXXXX</REORDER_POINT>
            <REORDER_NUMBER_BKS>XXXXX</REORDER_NUMBER_BKS>
            <IMAGES_PER_PAGE>X</IMAGES_PER_PAGE>
            <NBR_FORMS_PER_BK>XXXXX</NBR_FORMS_PER_BK>
            <PART_PAPER_PER_FORM>X</PART_PAPER_PER_FORM>
            <NBR_DEP_TICKETS_PER_BK>XXXXX</NBR_DEP_TICKETS_PER_BK>
            <SHEETS_OF_PAPER_PER_BK>XXXXX</SHEETS_OF_PAPER_PER_BK>
            <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
            <LAST_MAINTENANCE_DATE>MM-DD-RRRR</LAST_MAINTENANCE_DATE>
            <LAST_MAINT_USER_ID>XXXXXX</LAST_MAINT_USER_ID>
            <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
            <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
            <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
        </BANK_MICR_FORMAT>
    </BANK_MICR_FORMAT_TABLE>
</ACCOUNT_MAINTENANCE_UI>

Created : 05/18/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
BEGIN
    ACCOUNT_MAINTENANCE_PKG.ACCNT_MNTNC_UI_UPSERT_SP(IN_ROW_DATA);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_UPSERT_SP;

PROCEDURE MEMBER_MNTNC_UI_UPSERT_SP(
/******************************************************************************
This procedure is intended to update following tables used in the Member Maintenance Window
    Tables: 
       MEMBER_BANK_CC
       MEMBER_BANK_CC_FUTURE

<?xml version="1.0" encoding="UTF-8" ?>
<MEMBER_CC_MAINTENANCE_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
    <MEMBER_BANK_CC_TABLE>
        <MEMBER_BANK_CC>
            <LEAD_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</LEAD_BANK_ACCOUNT_NBR>
            <LEAD_STORE_NBR>XXXXXX</LEAD_STORE_NBR>
            <MEMBER_STORE_NBR>XXXXXX</MEMBER_STORE_NBR>
            <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
            <MEMBER_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</MEMBER_BANK_ACCOUNT_NBR>
            <BANK_BRANCH_NBR>XXXXXXXX</BANK_BRANCH_NBR>
            <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
            <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
            <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
        </MEMBER_BANK_CC>    
        <MEMBER_BANK_CC>
            <LEAD_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</LEAD_BANK_ACCOUNT_NBR>
            <LEAD_STORE_NBR>XXXXXX</LEAD_STORE_NBR>
            <MEMBER_STORE_NBR>XXXXXX</MEMBER_STORE_NBR>
            <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
            <MEMBER_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</MEMBER_BANK_ACCOUNT_NBR>
            <BANK_BRANCH_NBR>XXXXXXXX</BANK_BRANCH_NBR>
            <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
            <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
            <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
        </MEMBER_BANK_CC>  
        <MEMBER_BANK_CC>
            <LEAD_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</LEAD_BANK_ACCOUNT_NBR>
            <LEAD_STORE_NBR>XXXXXX</LEAD_STORE_NBR>
            <MEMBER_STORE_NBR>XXXXXX</MEMBER_STORE_NBR>
            <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
            <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
            <MEMBER_BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</MEMBER_BANK_ACCOUNT_NBR>
            <BANK_BRANCH_NBR>XXXXXXXX</BANK_BRANCH_NBR>
            <UPDATE_DATE>MM-DD-RRRR</UPDATE_DATE>
            <LAST_UPD_USER_ID>XXXXXXXX</LAST_UPD_USER_ID>
            <FUTURE_ID>XXXXXXXXXXXXXXXXXXXXXX</FUTURE_ID>
        </MEMBER_BANK_CC>
    </MEMBER_BANK_CC_TABLE>
</MEMBER_CC_MAINTENANCE_UI>

Created : 07/10/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
    V_COUNT                         INTEGER;
    V_XML_MEMBER_BANK_CC_FRAG       CLOB;
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_ROW_DATA);
    V_TEMP_ROW                      MEMBER_BANK_CC%ROWTYPE;
BEGIN
    MEMBER_MAINTENANCE_PKG.MEMBER_MNTNC_UI_UPSERT_SP(IN_ROW_DATA);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_MNTNC_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500));
END MEMBER_MNTNC_UI_UPSERT_SP;

PROCEDURE DEPOSIT_TICKET_UI_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the Deposit Ticket Window
    Tables: 
       BANK_DEP_TICK

<?xml version="1.0" encoding="UTF-8" ?>
<BANK_DEP_TICK_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
    <BANK_DEP_TICK>
        <BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</BANK_ACCOUNT_NBR>
        <COST_CENTER_CODE>XXXXXX</COST_CENTER_CODE>
        <DAILY_USE_ACTUAL>XXX</DAILY_USE_ACTUAL>
        <DAILY_USE_OVERRIDE>XXX</DAILY_USE_OVERRIDE>
        <DEP_TKTS_ONHAND_QTY>XXXXX</DEP_TKTS_ONHAND_QTY>
        <YTD_DEP_TKTS_ORDERED_QTY>XXXXX</YTD_DEP_TKTS_ORDERED_QTY>
        <REORDER_POINT>XXXXX</REORDER_POINT>
        <REORDER_NUMBER_BKS>XXXXX</REORDER_NUMBER_BKS>
        <IMAGES_PER_PAGE>X</IMAGES_PER_PAGE>
        <NBR_FORMS_PER_BK>XXXXX</NBR_FORMS_PER_BK>
        <PART_PAPER_PER_FORM>X</PART_PAPER_PER_FORM>
        <NBR_DEP_TICKETS_PER_BK>XXXXX</NBR_DEP_TICKETS_PER_BK>
        <SHEETS_OF_PAPER_PER_BK>XXXXX</SHEETS_OF_PAPER_PER_BK>
        <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
        <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
        <LAST_MAINTENANCE_DATE>MM-DD-RRRR</LAST_MAINTENANCE_DATE>
        <LAST_MAINT_USER_ID>XXXXXX</LAST_MAINT_USER_ID>
        <REORDER_SWITCH>X</REORDER_SWITCH>
        <LAST_VW_ORDER_DATE>MM-DD-RRRR</LAST_VW_ORDER_DATE>
        <MICR_FORMAT_ID>XX</MICR_FORMAT_ID>
        <FUTURE_ID>X</FUTURE_ID>
    </BANK_DEP_TICK>
</BANK_DEP_TICK_UI>

Created : 05/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
BEGIN
    DEPOSIT_TICKET_MAINTENANCE_PKG.DEPOSIT_TKT_MNTNC_UI_UPSERT_SP(IN_ROW_DATA);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'DEPOSIT_TICKET_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END DEPOSIT_TICKET_UI_UPSERT_SP;

PROCEDURE PLACE_DEPOSIT_TICKET_ORDER(
/*******************************************************************************
This procedure is intended to place a deposit ticket order for the store passed in

Created : 08/31/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE     IN     VARCHAR2,
IN_ORDERED_DATE         IN     DATE,
IN_FUTURE_ID            IN     NUMBER,
IN_USER_ID              IN     VARCHAR2)
IS
BEGIN
    DEPOSIT_TICKET_MAINTENANCE_PKG.PLACE_DEPOSIT_TICKET_ORDER(IN_COST_CENTER_CODE,
                                                              IN_ORDERED_DATE,
                                                              IN_FUTURE_ID,
                                                              IN_USER_ID);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'PLACE_DEPOSIT_TICKET_ORDER ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END PLACE_DEPOSIT_TICKET_ORDER;

PROCEDURE DEPOSIT_BAG_UPDT_UI_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following tables used in the Deposit Bag Update Window
    Tables: 
       BANK_DEP_BAG_TICK

<?xml version="1.0" encoding="UTF-8" ?>
<BANK_DEP_BAG_TICK_UI xmlns:xsi="http://www.w3.org/2001/XMLSchema" xsi:nonamespaceSchemaLocation="http://www.oracle.com/Employee.xsd">
    <BANK_DEP_BAG_TICK>
        <BANK_ACCOUNT_NBR>XXXXXXXXXXXXXXXX</BANK_ACCOUNT_NBR>
        <COST_CENTER_CODE>XXXXXX</COST_CENTER_CODE>
        <DEPBAG_DAILY_USE_ACTUAL>XXXXX</DEPBAG_DAILY_USE_ACTUAL>
        <DEPBAG_DLY_USE_OVERRIDE>XXXXX</DEPBAG_DLY_USE_OVERRIDE>
        <DEPBAG_LAST_ORDER_DATE>MM-DD-RRRR</DEPBAG_LAST_ORDER_DATE>
        <DEPBAG_LAST_ORDER_QTY>XXXXX</DEPBAG_LAST_ORDER_QTY>
        <DEPBAG_ONHAND_QTY>XXXXX</DEPBAG_ONHAND_QTY>
        <DEPBAG_REORDER_QTY>XXXXX</DEPBAG_REORDER_QTY>
        <DEPBAG_YTD_ORDERED_QTY>XXXXX</DEPBAG_YTD_ORDERED_QTY>
        <DEP_BAG_REORDER_POINT>XXXXX</DEP_BAG_REORDER_POINT>
        <DEP_BAG_TYPE>X</DEP_BAG_TYPE>
        <DEP_BAG_REORDER_SWITCH>X</DEP_BAG_REORDER_SWITCH>
        <EFFECTIVE_DATE>MM-DD-RRRR</EFFECTIVE_DATE>
        <EXPIRATION_DATE>MM-DD-RRRR</EXPIRATION_DATE>
    </BANK_DEP_BAG_TICK>
</BANK_DEP_BAG_TICK_UI>

Created : 05/21/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
BEGIN
    DEPOSIT_BAG_MAINTENANCE_PKG.DEPOSIT_BAG_UPDT_UI_UPSERT_SP(IN_ROW_DATA);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'DEPOSIT_BAG_UPDT_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END DEPOSIT_BAG_UPDT_UI_UPSERT_SP;

PROCEDURE BANK_DEP_TICK_OAK_UI_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to insert into following tables used in the 
Bank Deposit Ticket Oak Window.
    Tables: 
       BANK_DEP_TICKOAK

Created : 07/31/2015 sxt410 CCN Project....
Changed : 
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
BEGIN
    BANK_DEP_TICKOAK_PKG.BANK_DEP_TICKOAK_UI_UPSERT_SP(IN_ROW_DATA);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BANK_DEP_TICK_OAK_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BANK_DEP_TICK_OAK_UI_UPSERT_SP;

PROCEDURE LEAD_BANK_FROM_SP(
/*******************************************************************************
This procedure is intended to select records from Lead bank table including the 
members from the member bank table that we will be tranferred from.

Created : 07/08/2015 nxk927/jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE    IN     VARCHAR2,
OUT_REF_CUR            OUT REF_CURSOR,
OUT_REF_CUR1           OUT REF_CURSOR)
IS
BEGIN
    CONCENTRATION_TRANSFER_PKG.LEAD_BANK_FROM_SP(IN_COST_CENTER_CODE,
                                                 OUT_REF_CUR,
                                                 OUT_REF_CUR1);
END LEAD_BANK_FROM_SP;

PROCEDURE LEAD_BANK_TO_SP(
/*******************************************************************************
This procedure is intended to select records from Lead bank table and the
member bank table that we will tranfer the records to.

Created : 07/08/2015 nxk927/jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_COST_CENTER_CODE    IN     VARCHAR2,
OUT_REF_CUR            OUT REF_CURSOR)
IS
BEGIN
   CONCENTRATION_TRANSFER_PKG.LEAD_BANK_TO_SP(IN_COST_CENTER_CODE,
                                              OUT_REF_CUR);
END LEAD_BANK_TO_SP;

PROCEDURE LEAD_TRANSFER_PROCESS(
/***********************************************************
This procedure is used to transfer member from one lead to another

This Procdedure does the following
1) Makes the new lead selected in the UI as the LEAD
2) Deletes the current lead from the Lead table and pushes to history
3) Deletes all the members from the Old Lead and pushes to history
4) Inserts the new cost center as the New Lead
5) Inserts all the members from the old Lead under the New lead

EXAMPLE INPUT:
<?XML VERSION="1.0" ENCODING="UTF-8"?>
<MEMBER_TRANSFER_UI>
    <USER_ID>XXXXXX</USER_ID>
    <FROM_LEAD_CC>701234</FROM_LEAD_CC>
    <TO_LEAD_CC>705678</TO_LEAD_CC>
    <MEMBER_STORES>
      <MEMBER>
         <MEMBER_STORE_NBR>701451</MEMBER_STORE_NBR>
         <EFFECTIVE_DATE>MM-DD-RRRR HH:MI:SS AM</EFFECTIVE_DATE>
      </MEMBER>
      <MEMBER>
         <MEMBER_STORE_NBR>702000</MEMBER_STORE_NBR>
         <EFFECTIVE_DATE>MM-DD-RRRR HH:MI:SS AM</EFFECTIVE_DATE></MEMBER>
    </MEMBER_STORE>
</MEMBER_TRANSFER_UI>

Created : 07/08/2015 nxk927/jxc517 CCN Project....
Changed : 09/14/2015 axk326 CCN Project....
          Added EFFECTIVE_DATE node to the XML
Changed : 09/29/2015 sxh487 Added an IN_TRANSFER_FLAG to bypass the
          Warning message which states that "this process will delete 
          all Futures". This Needs to be a 'Y' if the user hits the 'OK' button
          to proceed with the process 
************************************************************/
IN_TRANSFER_FLAG          IN VARCHAR2,
IN_XML                    CLOB)
IS
BEGIN
    CONCENTRATION_TRANSFER_PKG.LEAD_TRANSFER_PROCESS(IN_TRANSFER_FLAG,IN_XML);
EXCEPTION
   WHEN OTHERS THEN
     ERRPKG.RAISE_ERR(SQLCODE, 'LEAD_TRANSFER_PROCESS, ' || ' ' || 'FAILED TO TRANSFER TO NEW LEAD - ' || SQLERRM);
END LEAD_TRANSFER_PROCESS;

PROCEDURE MAKE_LEAD_PROCESS(
/***********************************************************
This procedure is used to make a member with in a lead as "L" for
all the members under that lead

This Procdedure does the following
1) Makes the Member selected in the UI as the LEAD
2) Deletes the current lead from the Lead table and pushes to history
3) Deletes all the members from the Old Lead and pushes to history
4) Inserts the Member as the New Lead
5) Inserts all the members from the old Lead under the New lead

Created : 07/08/2015 nxk927/jxc517 CCN Project....
Changed : 09/29/2015 sxh487 Added an IN_MAKE_LEAD_FLAG to bypass the
          Warning message which states that "this process will delete 
          all Futures". This Needs to be a 'Y' if the user hits the 'OK' button
          to proceed with the process 
************************************************************/
IN_MAKE_LEAD_FLAG           IN     VARCHAR2,
IN_NEW_LEAD_CC              IN     VARCHAR2,
IN_USER_ID                  IN     VARCHAR2,
IN_EFFECTIVE_DATE           IN     DATE)
IS
BEGIN
   CONCENTRATION_TRANSFER_PKG.MAKE_LEAD_PROCESS(IN_MAKE_LEAD_FLAG,
                                                IN_NEW_LEAD_CC,
                                                IN_USER_ID,
                                                IN_EFFECTIVE_DATE);
EXCEPTION
  WHEN OTHERS THEN
    ERRPKG.RAISE_ERR(SQLCODE, 'MAKE_LEAD_PROCESS, ' || ' ' || 'FAILED TO MAKE LEAD - ' || SQLERRM);
END MAKE_LEAD_PROCESS;

PROCEDURE ACCNT_MNTNC_UI_DELETE_SP(
/***********************************************************
This procedure is used to delete the bank accounts future records
based on the future id and bank account number that are passed as inputs

Created : 07/13/2015 jxc517 CCN Project....
Changed :
************************************************************/
    IN_BANK_ACCOUNT_NUMBER  IN  VARCHAR2,
    IN_FUTURE_ID            IN  NUMBER)
IS
BEGIN
    NULL;
    /*ACCOUNT_MAINTENANCE_PKG.ACCNT_MNTNC_UI_DELETE_SP(IN_BANK_ACCOUNT_NUMBER,
                                                     IN_FUTURE_ID);*/
EXCEPTION
  WHEN OTHERS THEN
    ERRPKG.RAISE_ERR(SQLCODE, 'ACCNT_MNTNC_UI_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END ACCNT_MNTNC_UI_DELETE_SP;

END BANKING_UI_INTERFACE_APP_PKG;