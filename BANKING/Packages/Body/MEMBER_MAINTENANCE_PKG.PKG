create or replace PACKAGE BODY MEMBER_MAINTENANCE_PKG
AS
/**********************************************************
This Package contains all the procedures used in
member cost center maintenance window

Created : 07/09/2015 jxc517 CCN Project....
Changed : rxa457 07/31/2017 CCN Project....
          Procedure UPDT_VIRTUAL_FTR_MBR_STR_DTLS removed and moved to VIRTUAL_FUTURE_MAINTENANCE_PKG
**********************************************************/
PROCEDURE MEMBER_CC_MAINTENACE_UI_SP (
/*******************************************************************************
	This procedure is intended to RETURN a ref cursor with data from member
  cost center maintenance related tables

Inputs:
    IN_COST_CENTER_CODE

Created : 07/09/2015 jxc517 CCN Project....
Changed : 11/16/2015 nxk927 CCN Project....
          passing only current record
        : 02/09/2016 nxk927 CCN Project....
          pulling the member's future lead cc for the future tab instead 
          of current lead 
        : 08/18/2017 rxv940 CCN Project Team...
          To enable addition of new members for a Lead without any members
          Outer Join condition missing on Mb.effective in OUT_BANK_MBR_CC_REF_CUR.
          This will also require UI changes to handle NULL Member Store number passed
*******************************************************************************/
IN_COST_CENTER_CODE          IN      VARCHAR2,
OUT_BANK_MBR_CC_REF_CUR         OUT REF_CURSOR,
OUT_BANK_MBR_CC_FTR_REF_CUR     OUT REF_CURSOR)
IS
    V_LEAD_BANK_CC_REC     LEAD_BANK_CC%ROWTYPE;
BEGIN
    V_LEAD_BANK_CC_REC := BANKING_COMMON_TOOLS.GET_LEAD_BANK_CC_REC(
               NVL(BANKING_COMMON_TOOLS.GET_LEAD_STORE_NBR_FOR_MBR_STR(IN_COST_CENTER_CODE),
                   IN_COST_CENTER_CODE));
    --If he is not a lead nor a member currently, he might be a lead in future. . .so used NVL() in below query
    OPEN OUT_BANK_MBR_CC_REF_CUR FOR
        SELECT DISTINCT
               LB.LEAD_BANK_ACCOUNT_NBR,
               LB.LEAD_STORE_NBR,
               BA.BANK_NAME,
               LB.BANK_TYPE_CODE,
               LB.EFFECTIVE_DATE,
               LB.EXPIRATION_DATE,
               LB.BANK_BRANCH_NBR,
               MB.MEMBER_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = MB.MEMBER_STORE_NBR) COST_CENTER_NAME,
               MB.EFFECTIVE_DATE MBR_EFFECTIVE_DATE,
               MB.EXPIRATION_DATE MBR_EXPIRATION_DATE,
               MB.BANK_BRANCH_NBR MBR_BANK_BRANCH_NBR,
               MB.MEMBER_BANK_ACCOUNT_NBR MBR_BANK_ACCOUNT_NBR,
               NULL UPDATE_DATE,
               NULL LAST_UPD_USER_ID
          FROM LEAD_BANK_CC LB,
               MEMBER_BANK_CC MB,
               BANK_ACCOUNT BA
         WHERE LB.LEAD_STORE_NBR        = NVL(V_LEAD_BANK_CC_REC.LEAD_STORE_NBR, IN_COST_CENTER_CODE) --'701369'
           AND (LB.LEAD_STORE_NBR       = MB.LEAD_STORE_NBR(+) AND NVL(MB.EXPIRATION_DATE, SYSDATE + 1) > SYSDATE)
           AND LB.LEAD_BANK_ACCOUNT_NBR = BA.BANK_ACCOUNT_NBR(+)
           AND NVL(TRUNC(MB.EFFECTIVE_DATE),TRUNC(SYSDATE)) <= TRUNC(SYSDATE)
         ORDER BY MB.MEMBER_STORE_NBR;
   
    --getting the future lead for the member bank passed
    V_LEAD_BANK_CC_REC.LEAD_STORE_NBR := BANKING_COMMON_TOOLS.GET_FTR_LD_STR_NBR_FOR_MBR_STR(IN_COST_CENTER_CODE, NULL);
    OPEN OUT_BANK_MBR_CC_FTR_REF_CUR FOR
        SELECT DISTINCT
               LBF.LEAD_BANK_ACCOUNT_NBR,
               LBF.LEAD_STORE_NBR,
               BAF.BANK_NAME,
               LBF.BANK_TYPE_CODE,
               LBF.EFFECTIVE_DATE,
               LBF.EXPIRATION_DATE,
               LBF.BANK_BRANCH_NBR,
               MBF.MEMBER_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = MBF.MEMBER_STORE_NBR) COST_CENTER_NAME,
               MBF.EFFECTIVE_DATE MBR_EFFECTIVE_DATE,
               MBF.EXPIRATION_DATE MBR_EXPIRATION_DATE,
               MBF.BANK_BRANCH_NBR MBR_BANK_BRANCH_NBR,
               MBF.MEMBER_BANK_ACCOUNT_NBR MBR_BANK_ACCOUNT_NBR,
               MBF.UPDATE_DATE,
               MBF.LAST_UPD_USER_ID,
               LBF.FUTURE_ID
          FROM LEAD_BANK_CC_FUTURE LBF,
               MEMBER_BANK_CC_FUTURE MBF,
               BANK_ACCOUNT_FUTURE BAF
         WHERE LBF.LEAD_STORE_NBR        = NVL(V_LEAD_BANK_CC_REC.LEAD_STORE_NBR, IN_COST_CENTER_CODE) --'701369', '707010'
           AND LBF.LEAD_BANK_ACCOUNT_NBR = MBF.LEAD_BANK_ACCOUNT_NBR(+)
           AND LBF.LEAD_STORE_NBR        = MBF.LEAD_STORE_NBR(+)
           AND LBF.FUTURE_ID             = MBF.FUTURE_ID(+)
           AND LBF.LEAD_BANK_ACCOUNT_NBR = BAF.BANK_ACCOUNT_NBR(+)
           AND LBF.FUTURE_ID             = BAF.FUTURE_ID(+)
         UNION
        SELECT DISTINCT
               LBF.LEAD_BANK_ACCOUNT_NBR,
               LBF.LEAD_STORE_NBR,
               BAF.BANK_NAME,
               LBF.BANK_TYPE_CODE,
               LBF.EFFECTIVE_DATE,
               LBF.EXPIRATION_DATE,
               LBF.BANK_BRANCH_NBR,
               MBF.MEMBER_STORE_NBR,
               (SELECT COST_CENTER_NAME
                  FROM COST_CENTER
                 WHERE COST_CENTER_CODE = MBF.MEMBER_STORE_NBR) COST_CENTER_NAME,
               MBF.EFFECTIVE_DATE MBR_EFFECTIVE_DATE,
               MBF.EXPIRATION_DATE MBR_EXPIRATION_DATE,
               MBF.BANK_BRANCH_NBR MBR_BANK_BRANCH_NBR,
               MBF.MEMBER_BANK_ACCOUNT_NBR MBR_BANK_ACCOUNT_NBR,
               MBF.UPDATE_DATE,
               MBF.LAST_UPD_USER_ID,
               LBF.FUTURE_ID
          FROM LEAD_BANK_CC_FUTURE LBF,
               MEMBER_BANK_CC_FUTURE MBF,
               BANK_ACCOUNT_FUTURE BAF
         WHERE LBF.LEAD_STORE_NBR        = IN_COST_CENTER_CODE
           AND LBF.LEAD_BANK_ACCOUNT_NBR = MBF.LEAD_BANK_ACCOUNT_NBR(+)
           AND LBF.LEAD_STORE_NBR        = MBF.LEAD_STORE_NBR(+)
           AND LBF.FUTURE_ID             = MBF.FUTURE_ID(+)
           AND LBF.LEAD_BANK_ACCOUNT_NBR = BAF.BANK_ACCOUNT_NBR(+)
           AND LBF.FUTURE_ID             = BAF.FUTURE_ID(+)
         ORDER BY EFFECTIVE_DATE, MEMBER_STORE_NBR;
END MEMBER_CC_MAINTENACE_UI_SP;

PROCEDURE BUILD_TABLE_TYPES(
/******************************************************************************
    This procedure is intended to build all the table types from input xml
    for this process

Created : 07/09/2015 jxc517 CCN Project....
Changed : 12/14/2016 jxc517 CCN Project Team....
          We should not fire any validation/do anything with the virtual members in the future tab
          even if they are passed from UI
*******************************************************************************/
    IN_XML                     IN     CLOB,
    O_MBR_BANK_CC_TAB             OUT TABLE_IU_PKG.MEMBER_BANK_CC_TAB_TYPE,
    O_MBR_BANK_CC_FUTURE_TAB      OUT TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_TAB_TYPE)
IS
    V_COUNT                         INTEGER;
    V_XML_MEMBER_BANK_CC_FRAG       CLOB;
    V_ROW_DATA                      XMLTYPE := SYS.XMLTYPE(IN_XML);
    V_MEMBER_BANK_CC_REC            MEMBER_BANK_CC%ROWTYPE;
    V_MEMBER_BANK_CC_FUTURE_REC     MEMBER_BANK_CC_FUTURE%ROWTYPE;
BEGIN
    IF IN_XML IS NOT NULL THEN
        V_COUNT := 1;
        WHILE V_ROW_DATA.EXISTSNODE('/MEMBER_CC_MAINTENANCE_UI/MEMBER_BANK_CC_TABLE/MEMBER_BANK_CC' || '[' || V_COUNT || ']') = 1 LOOP
            V_XML_MEMBER_BANK_CC_FRAG := V_ROW_DATA.EXTRACT('/MEMBER_CC_MAINTENANCE_UI/MEMBER_BANK_CC_TABLE/MEMBER_BANK_CC' || '[' || V_COUNT || ']').GETCLOBVAL();
            IF V_XML_MEMBER_BANK_CC_FRAG IS NOT NULL THEN
                IF SYS.XMLTYPE(V_XML_MEMBER_BANK_CC_FRAG).EXISTSNODE('/MEMBER_BANK_CC/FUTURE_ID/text()') = 1 THEN --Future Record
                    TABLE_IU_PKG.MEMBER_BNK_FTRE_ROWTYPE_SP('MEMBER_BANK_CC_FUTURE'
                                                            ,REPLACE(V_XML_MEMBER_BANK_CC_FRAG,'MEMBER_BANK_CC>','MEMBER_BANK_CC_FUTURE>')
                                                            ,V_MEMBER_BANK_CC_FUTURE_REC);
                    --We should not do anything to the virtual records through member maintenance future tab
                    IF TRUNC(V_MEMBER_BANK_CC_FUTURE_REC.EFFECTIVE_DATE) > TRUNC(SYSDATE) THEN
                        O_MBR_BANK_CC_FUTURE_TAB(NVL(O_MBR_BANK_CC_FUTURE_TAB.LAST, 0) +1) := V_MEMBER_BANK_CC_FUTURE_REC;
                    END IF;
                ELSE --Current Record
                    TABLE_IU_PKG.MEMBER_BANK_CC_ROWTYPE_SP('MEMBER_BANK_CC'
                                                           ,V_XML_MEMBER_BANK_CC_FRAG
                                                           ,V_MEMBER_BANK_CC_REC);
                    O_MBR_BANK_CC_TAB(NVL(O_MBR_BANK_CC_TAB.LAST, 0) +1) := V_MEMBER_BANK_CC_REC;
                END IF;
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP; 
    END IF;
EXCEPTION
    WHEN OTHERS THEN                        
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_TABLE_TYPES ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_TABLE_TYPES;

PROCEDURE MEMBER_MNTNC_CURRENT_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following table used in the
Member CC Maintenance Window that are current records
    Tables: 
       MEMBER_BANK_CC

Created : 07/10/2015 jxc517 CCN Project....
Changed : 10/14/2015 jxc517 CCN Project....
          Code has been changed to deal with virtual futures
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
        : 01/07/2017 mxk766 add logic to generate files for the POS system.
        : rxa457 07/31/2017 CCN Project Team...
          calls to IS_VIRTUAL_FTR_MBR_STR and UPDT_VIRTUAL_FTR_MBR_STR_DTLS changed..
          IS_VIRTUAL_FTR_MBR_STR fucntion moved to VIRTUAL_FUTURE_MAINTENANCE_PKG; and UPDT_VIRTUAL_FTR_MBR_STR_DTLS moved to VIRTUAL_FUTURE_MAINTENANCE_PKG as "VRTL_FTR_MBR_BANK_CC_UPDT"
Modified: 11/07/2017 bxa919 CCN Project Team...
          Removed call for POS_MASTER_SP
*******************************************************************************/
    IN_MBR_BANK_CC_TAB IN TABLE_IU_PKG.MEMBER_BANK_CC_TAB_TYPE)
IS
    V_INDEX        NUMBER := 0;

BEGIN
    V_INDEX := IN_MBR_BANK_CC_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        IF IN_MBR_BANK_CC_TAB(V_INDEX).EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(IN_MBR_BANK_CC_TAB(V_INDEX).MEMBER_STORE_NBR,
                                                                         NULL, --bank account number
                                                                         NULL, --micr format id
                                                                         IN_MBR_BANK_CC_TAB(V_INDEX).EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(IN_MBR_BANK_CC_TAB(V_INDEX).MEMBER_STORE_NBR,
                                                                IN_MBR_BANK_CC_TAB(V_INDEX).EXPIRATION_DATE);
        END IF;
        TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(IN_MBR_BANK_CC_TAB(V_INDEX));
        IF VIRTUAL_FUTURE_MAINTENANCE_PKG.IS_VIRTUAL_FTR_MBR_STR(IN_MBR_BANK_CC_TAB(V_INDEX)) = 'Y' THEN
           VIRTUAL_FUTURE_MAINTENANCE_PKG.VRTL_FTR_MBR_BANK_CC_UPDT(IN_MBR_BANK_CC_TAB(V_INDEX));
        END IF;
        /* Removed POS_MASTER_SP() call as a part of polling Changes*/
        V_INDEX := IN_MBR_BANK_CC_TAB.NEXT(V_INDEX);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_MNTNC_CURRENT_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END MEMBER_MNTNC_CURRENT_UPSERT_SP;

PROCEDURE EXPIRE_PREV_CUR_MEMBER_BANK_CC(
/*******************************************************************************
    This procedure is intended to check and expire previous current records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
    CURSOR member_bank_cc_cur IS
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE MEMBER_STORE_NBR = IN_ROW.MEMBER_STORE_NBR
           AND EFFECTIVE_DATE  < IN_ROW.EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    V_PROC_NAME                VARCHAR2(30) := 'EXPIRE_PREV_CUR_MEMBER_BANK_CC';
    V_EXPIRE_DATE              DATE := IN_ROW.EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR rec IN member_bank_cc_cur LOOP
        rec.EXPIRATION_DATE := GREATEST(rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPIRE_STORE_MICR_FORMAT_DTLS(rec.MEMBER_STORE_NBR,
                                                                         NULL, --bank account number
                                                                         NULL, --micr format id
                                                                         rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPIRE_DEPOSIT_BAG_DTLS(rec.MEMBER_STORE_NBR,
                                                                rec.EXPIRATION_DATE);
        END IF;
        TABLE_IU_PKG.MEMBER_BANK_CC_I_SP(rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME, SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_CUR_MEMBER_BANK_CC;

PROCEDURE EXPIRE_PREV_FTR_MEMBER_BANK_CC(
/*******************************************************************************
    This procedure is intended to check and expire previous future records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 10/20/2015 jxc517 CCN Project....
          Code has been changed to deal with Deposit Bag futures
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
    CURSOR member_bank_cc_future_cur IS
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE MEMBER_STORE_NBR = IN_ROW.MEMBER_STORE_NBR
           AND EFFECTIVE_DATE  < IN_ROW.EFFECTIVE_DATE
           AND EXPIRATION_DATE IS NULL;
    V_PROC_NAME                VARCHAR2(30) := 'EXPIRE_PREV_FTR_MEMBER_BANK_CC';
    V_EXPIRE_DATE              DATE := IN_ROW.EFFECTIVE_DATE - INTERVAL '1' SECOND;
BEGIN
    FOR rec IN member_bank_cc_future_cur LOOP
        rec.EXPIRATION_DATE := GREATEST(rec.EFFECTIVE_DATE, V_EXPIRE_DATE);
        IF rec.EXPIRATION_DATE IS NOT NULL THEN
            DEPOSIT_TICKET_MAINTENANCE_PKG.EXPR_STR_MICR_FRMT_DTLS_FTR(rec.MEMBER_STORE_NBR,
                                                                       NULL, --bank account number
                                                                       NULL, --micr format id
                                                                       rec.FUTURE_ID,
                                                                       rec.EXPIRATION_DATE);
            DEPOSIT_BAG_MAINTENANCE_PKG.EXPR_DEPOSIT_BAG_DTLS_FTR(rec.MEMBER_STORE_NBR,
                                                                  rec.FUTURE_ID,
                                                                  rec.EXPIRATION_DATE);
        END IF;
        TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME, SUBSTR(SQLERRM,1,500));
END EXPIRE_PREV_FTR_MEMBER_BANK_CC;

PROCEDURE EXPIRE_PREVIOUS_MEMBER_BANK_CC(
/*******************************************************************************
    This procedure is intended to check and expire previous records
    before inserting new record

Created : 07/09/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
IN_ROW IN     MEMBER_BANK_CC_FUTURE%ROWTYPE)
IS
    V_PROC_NAME                VARCHAR2(30) := 'EXPIRE_PREVIOUS_MEMBER_BANK_CC';
BEGIN
    EXPIRE_PREV_CUR_MEMBER_BANK_CC(IN_ROW);
    EXPIRE_PREV_FTR_MEMBER_BANK_CC(IN_ROW);
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, V_PROC_NAME, SUBSTR(SQLERRM,1,500));
END EXPIRE_PREVIOUS_MEMBER_BANK_CC;

PROCEDURE MEMBER_MNTNC_FUTURE_UPSERT_SP ( 
/******************************************************************************
This procedure is intended to update following table used in the
Member CC Maintenance Window that are future records
    Tables: 
       MEMBER_BANK_CC_FUTURE
Expire following tables used in the Member CC Maintenance Window that are current records
    Tables: 
       MEMBER_BANK_CC

Created : 07/10/2015 jxc517 CCN Project....
Changed : 10/08/2015 jxc517 CCN Project....
          bug on 10/07/2015 in JIRA requires future dated deposit ticket and store MICR
          details insertion not valid for new futures that are getting created
*******************************************************************************/
    IN_MBR_BANK_CC_FUTURE_TAB         IN TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_TAB_TYPE)
IS
    V_INDEX    NUMBER := 0;
BEGIN
    V_INDEX := IN_MBR_BANK_CC_FUTURE_TAB.FIRST;
    WHILE V_INDEX IS NOT NULL LOOP
        EXPIRE_PREVIOUS_MEMBER_BANK_CC(IN_MBR_BANK_CC_FUTURE_TAB(V_INDEX));
        TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_I_SP(IN_MBR_BANK_CC_FUTURE_TAB(V_INDEX));
        V_INDEX := IN_MBR_BANK_CC_FUTURE_TAB.NEXT(V_INDEX);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_MNTNC_FUTURE_UPSERT_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END MEMBER_MNTNC_FUTURE_UPSERT_SP;

PROCEDURE MEMBER_MNTNC_UI_UPSERT_SP(
/******************************************************************************
This procedure is intended to update following tables used in the Mamber Maintenance Window
    Tables: 
       MEMBER_BANK_CC
       MEMBER_BANK_CC_FUTURE

Created : 07/10/2015 jxc517 CCN Project....
Changed :
*******************************************************************************/
    IN_ROW_DATA  IN  CLOB)
IS
    V_MBR_BANK_CC_TAB                TABLE_IU_PKG.MEMBER_BANK_CC_TAB_TYPE;
    V_MBR_BANK_CC_FUTURE_TAB         TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_TAB_TYPE;
BEGIN
    /*
    We should never update status of a lead in any process, as that has to be done prior to coming here from
    Account Maintenance Screen which creates a new future
    */
    --Below code runs once per tab, which means we run either current or future tab at a time but not both at the same time
    BUILD_TABLE_TYPES(IN_ROW_DATA,
                      V_MBR_BANK_CC_TAB,
                      V_MBR_BANK_CC_FUTURE_TAB);
    BUSINESS_RULES_PKG.MEMBER_MAINTENANCE_BR_SP(V_MBR_BANK_CC_TAB,
                                                V_MBR_BANK_CC_FUTURE_TAB);
    IF V_MBR_BANK_CC_TAB.COUNT > 0 THEN --Current Details
        MEMBER_MNTNC_CURRENT_UPSERT_SP(V_MBR_BANK_CC_TAB);
    END IF;
    IF V_MBR_BANK_CC_FUTURE_TAB.COUNT > 0 THEN --Future Details
        MEMBER_MNTNC_FUTURE_UPSERT_SP(V_MBR_BANK_CC_FUTURE_TAB);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MEMBER_MNTNC_UI_UPSERT_SP ' || SUBSTR(SQLERRM,1,500));
END MEMBER_MNTNC_UI_UPSERT_SP;

PROCEDURE MBR_MNTNC_CURRENT_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Member Maintenance Window,
  delete process for current records

Created : 10/23/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_MEMBER_STORE_NBR  IN     VARCHAR2,
    IN_LEAD_STORE_NBR    IN     VARCHAR2)
IS
    CURSOR mbr_bank_cc_cur IS 
        SELECT *
          FROM MEMBER_BANK_CC
         WHERE MEMBER_STORE_NBR    = IN_MEMBER_STORE_NBR
           AND LEAD_STORE_NBR      = IN_LEAD_STORE_NBR;
    CURSOR store_micr_format_dtls_cur IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_tick_cur IS
        SELECT *
          FROM BANK_DEP_TICK
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
    CURSOR bank_dep_bag_tick_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR;
BEGIN
    FOR mbr_bank_cc_rec IN mbr_bank_cc_cur LOOP
        FOR bank_dep_tick_rec IN bank_dep_tick_cur LOOP
            TABLE_IU_PKG.BANK_DEP_TICK_D_SP(bank_dep_tick_rec);
        END LOOP;
        FOR bank_dep_bag_tick_rec IN bank_dep_bag_tick_cur LOOP
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_D_SP(bank_dep_bag_tick_rec);
        END LOOP;
        FOR store_micr_format_dtls_rec IN store_micr_format_dtls_cur LOOP
            TABLE_IU_PKG.STORE_MICR_FORMAT_DTLS_D_SP(store_micr_format_dtls_rec);
        END LOOP;        
        TABLE_IU_PKG.MEMBER_BANK_CC_D_SP(mbr_bank_cc_rec);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MBR_MNTNC_CURRENT_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END MBR_MNTNC_CURRENT_DELETE_SP;

PROCEDURE MBR_MNTNC_FUTURE_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Member Maintenance Window,
  delete process for future records

Created : 10/23/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_MEMBER_STORE_NBR  IN     VARCHAR2,
    IN_LEAD_STORE_NBR    IN     VARCHAR2,
    IN_FUTURE_ID         IN     NUMBER)
IS
    --cursor to get all the store micr records for the bank account, micr format id, future id passed
    CURSOR store_micr_format_dtls_ftr_cur IS 
        SELECT *
          FROM STORE_MICR_FORMAT_DTLS_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        >= IN_FUTURE_ID;

    --cursor to get all the member records for the bank account, lead store, future id passed
    CURSOR mbr_bank_cc_ftr_cur IS 
        SELECT *
          FROM MEMBER_BANK_CC_FUTURE
         WHERE MEMBER_STORE_NBR      = IN_MEMBER_STORE_NBR
           AND LEAD_STORE_NBR        = IN_LEAD_STORE_NBR
           AND FUTURE_ID             >= IN_FUTURE_ID;

    --cursor to get all the deposit ticket records for the store, future id passed
    CURSOR bank_dep_tick_ftr_cur IS
        SELECT *
          FROM BANK_DEP_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        >= IN_FUTURE_ID;

    --cursor to get all the deposit bag ticket records for the store, future id passed
    CURSOR bank_dep_bag_tick_ftr_cur IS
        SELECT *
          FROM BANK_DEP_BAG_TICK_FUTURE
         WHERE COST_CENTER_CODE = IN_MEMBER_STORE_NBR
           AND FUTURE_ID        >= IN_FUTURE_ID;

BEGIN
    --for each lead bakn, check if there is a child member banks attched to it
    --if so, get that child member bank details and delete those child future records first
    FOR mbr_bank_cc_ftr_rec IN mbr_bank_cc_ftr_cur LOOP

        --for this member store, get the bank deposit ticket details
        --if found, delete those child records first
        FOR bank_dep_tick_ftr_rec IN bank_dep_tick_ftr_cur LOOP
            --now delete the bank deposit ticket details from the future
            TABLE_IU_PKG.BANK_DEP_TICK_FUTURE_D_SP(bank_dep_tick_ftr_rec);
        END LOOP; --bank_dep_tick_cur

        FOR bank_dep_bag_tick_ftr_rec IN bank_dep_bag_tick_ftr_cur LOOP

            --now delete the bank deposit bag ticket details from the future
            TABLE_IU_PKG.BANK_DEP_BAG_TICK_FUTURE_D_SP(bank_dep_bag_tick_ftr_rec);
        END LOOP; --bank_dep_bag_tick_cur

        FOR store_micr_format_dtls_ftr_rec IN store_micr_format_dtls_ftr_cur LOOP

            --now delete the bank deposit bag ticket details from the future
            TABLE_IU_PKG.STR_MICR_FORMAT_DTLS_FTR_D_SP(store_micr_format_dtls_ftr_rec);
        END LOOP; --bank_dep_bag_tick_cur

        --now delete the member bank details from the future
        TABLE_IU_PKG.MEMBER_BANK_CC_FUTURE_D_SP(mbr_bank_cc_ftr_rec);
    END LOOP; --mbr_bank_cc_cur
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MBR_MNTNC_FUTURE_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END MBR_MNTNC_FUTURE_DELETE_SP;

PROCEDURE MBR_MNTNC_UI_DELETE_SP ( 
/******************************************************************************
	This procedure performs the core process for Member Maintenance Window,
  delete process

Created : 10/23/2015 jxc517 CCN Project....
Changed : 
*******************************************************************************/
    IN_MEMBER_BANK_CC_REC   IN  MEMBER_BANK_CC%ROWTYPE,
    IN_FUTURE_ID            IN  NUMBER)
IS
BEGIN
    IF IN_FUTURE_ID IS NOT NULL THEN --deleting from a future record
        MBR_MNTNC_FUTURE_DELETE_SP(IN_MEMBER_BANK_CC_REC.MEMBER_STORE_NBR,
                                   IN_MEMBER_BANK_CC_REC.LEAD_STORE_NBR,
                                   IN_FUTURE_ID);
    ELSE --deleting from a current record
        MBR_MNTNC_FUTURE_DELETE_SP(IN_MEMBER_BANK_CC_REC.MEMBER_STORE_NBR,
                                   IN_MEMBER_BANK_CC_REC.LEAD_STORE_NBR,
                                   1);
        MBR_MNTNC_CURRENT_DELETE_SP(IN_MEMBER_BANK_CC_REC.MEMBER_STORE_NBR,
                                    IN_MEMBER_BANK_CC_REC.LEAD_STORE_NBR);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'MBR_MNTNC_UI_DELETE_SP ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END MBR_MNTNC_UI_DELETE_SP;

END MEMBER_MAINTENANCE_PKG;