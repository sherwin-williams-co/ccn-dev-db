create or replace PACKAGE BODY CUSTOMER_DEPOSITS_DAILY_LOAD
/****************************************************************
This package will load the customer deposits from pnp
created : 09/08/2017 sxh487 ccn project....
changed : 02/08/2019 pxa852 CCN Project Team...
          Modified code to inlcude new table that was created as part of new data model
*****************************************************************/
AS

PROCEDURE LOAD_POS_CSTMR_DEP_LOAD_STATUS(
/****************************************************************************
This procedure is used to load the POSXML POS_CSTMR_DEP_LOAD_STATUS 
with data extracted from new interface tables with the runcyle information
Created : 09/26/2017 sxh487 CCN Project....
*****************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
AS

BEGIN
   INSERT INTO POS_CSTMR_DEP_LOAD_STATUS
   SELECT CH.*,
          SYSDATE LOAD_DATE
     FROM PNP_CCN_LOAD_STATUS CH
    WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;

   DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || SQL%ROWCOUNT);
   COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_POS_CSTMR_DEP_LOAD_STATUS',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    'POS_CSTMR_DEP_LOAD_STATUS');
END LOAD_POS_CSTMR_DEP_LOAD_STATUS;

PROCEDURE LOAD_CUST_DEP_CCN_HEADERS_T(
/*****************************************************************************
LOAD_CUST_DEP_CCN_CCN_HEADERS_T

This procedure will load the CCN_HEADERS_T table from pnp.ccn_headers table.
   For performance improvement, data loaded in temp tables

created : 09/27/2017 sxh487 ccn project....
Changed : 05/29/2019 sxs484 CCN project
          ASP-1255 Added reference to 6 chars cost center PNP_CCN_HEADERS.STORECCN.
          Removed reference to 4 chars PNP_CCN_HEADERS.STORE_NO.
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
   CURSOR CUR_CCN_HEADERS_T IS
      SELECT BOOK_YR,
             BOOK_MO,
             BOOK_PERIOD,
             RLS_RUN_CYCLE,
             TRAN_DATE,
             STORECCN,
             TERMNBR,
             TRANID,
             TRANNBR,
             TERMCTLNBR,
             TRAN_TOTAL,
             ACCTNBR,
             JOBNBR,
             PONBR,
             BILLCONTACT,
             BILLNM,
             BILLADDR1,
             BILLADDR2,
             BILLCITY,
             BILLST,
             BILLZIP,
             BILLCNTRY,
             BILLPHONE,
             TERRNBR,
             CUSTTYPNBR,
             ORDERDT,
             BATCH_GUID,
             TRAN_GUID,
             TRAN_TIMESTAMP,
             EMP_NO,
             CTL_DT,
             REASON_CODE,
             INST_PAYMENT,
             INST_RETAINAGE,
             SHIPNM,
             CUSTOMER_NAME,
             POS_VERSION_NUMBER,
             ORIGDT,
             ORIGTERM,
             ORIGTRAN             
        FROM PNP_CCN_HEADERS
       WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;
   --variable declaration
   V_COMMIT           NUMBER := 0;
BEGIN

   FOR REC IN CUR_CCN_HEADERS_T LOOP
      BEGIN
         INSERT INTO CCN_HEADERS_T VALUES REC;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
             ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                         'LOAD_CUST_DEP_CCN_HEADERS_T',
                                         SQLERRM,
                                         '000000',
                                         '000000000',
                                         'CCN_HEADERS_T');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUST_DEP_CCN_HEADERS_T',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUST_DEP_CCN_HEADERS_T;

PROCEDURE LOAD_CUST_DEP_SALES_LINES_T(
/*****************************************************************************
LOAD_CUST_DEP_SALES_LINES_T

This procedure will load the CCN_SALES_LINES_T table from pnp.SALES_LINES table.
   For performance improvement, data loaded in temp tables

created : 05/29/2018 sxh487 ccn project....
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
   CURSOR CUR_CCN_SALES_LINES_T IS
      SELECT RLS_RUN_CYCLE,
             ALPHALVL,
             CONTROLNBR,
             CORR,
             EXTENDED_PRICE,
             FLOORPR,
             LINENBR,
             NSPR,
             OVRFLOORPR,
             PAYCD,
             PR,
             PRLOCATION,
             PRODDESCR,
             PRODID1,
             PRODID2,
             PRODID3,
             PRODNBR,
             PRODSZ,
             PROJSLS,
             QTY,
             SALESNBR,
             SEQNBR,
             SPLIT,
             SRCPCTOFF,
             SRCPRLTYP,
             SRCPRLVL,
             SRCPROD,
             SRCVERSION,
             TAXABLE,
             TAXPRODNBR,
             TAXSTATUS,
             TRAN_GUID,
             GUID,
             NON_MERCHANDISE,
             RUN_CYCLE,
             BOOK_PERIOD,
             LINE_VERSION,
             LAST_UPDATE_TS,
             UPDATED_BY,
             CHANGE_EVENT_GUID,
             LISTPR,
             BOMWORKINGGALLONS,
             BOMWORKINGGALLONSPRICE,
             ID,
             MFGID,
             PRODNOF,
             SZDESCR,
             STAGED_TS,
             SGR_GALLON_FACTOR,
             SGR_EFFECTIVE_DATE,
             GALLONS,
             CLASS_NUMBER,
             PRODUCT_DEPARTMENT_CODE,
             PRODUCT_DEPARTMENT_DESC,
             PRODUCT_SUB_DEPARTMENT_CODE,
             PRODUCT_SUB_DEPARTMENT_DESC,
             PRODUCT_CATEGORY_CODE,
             PRODUCT_CATEGORY_DESC,
             NON_MERCH_CODE,
             NON_MERCH_DESCR,
             MPF_PRODNBR,
             PRIME,
             SUB,
             MPF_SIZE_CODE,
             MPF_SIZE_SHORT_DESC,
             PURCHASE_CODE,
             PRODUCT_CORE_ID,
             ECOMMERCE_ID
        FROM PNP_CCN_SALES_LINES
       WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;
   --variable declaration
   V_COMMIT               NUMBER := 0;
BEGIN

   FOR REC IN CUR_CCN_SALES_LINES_T LOOP
      BEGIN
         INSERT INTO CCN_SALES_LINES_T VALUES REC;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
             ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                         'LOAD_CUST_DEP_SALES_LINES_T',
                                         SQLERRM,
                                         '000000',
                                         '000000000',
                                         'CCN_SALES_LINES_T');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUST_DEP_SALES_LINES_T',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUST_DEP_SALES_LINES_T;

PROCEDURE LOAD_CUSTOMER_DEPOSIT_HDR(
/*****************************************************************************
LOAD_CUSTOMER_DEPOSIT_HDR

This procedure will load the customer_deposit_header table from pnp legacy idms database.

created : 03/05/2018 sxh487 ccn project....
changed : 05/29/2018 sxh487 Added NON_MERCH_CODE ='05' for line item amount
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS

--variable declaration
V_DATE                       DATE := TRUNC(SYSDATE);

   CURSOR TEMP_CUR IS
      SELECT DISTINCT 
             ACCTNBR AS CUSTOMER_ACCOUNT_NUMBER,
             CUSTOMER_NAME,
             BILLNM,
             BILLCONTACT,
             BILLADDR1,
             BILLADDR2,
             BILLCITY,
             BILLZIP,
             BILLPHONE,
             RLS_RUN_CYCLE
        FROM CCN_HEADERS_T H
       WHERE H.RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
         AND EXISTS (SELECT 1
                       FROM CCN_SALES_LINES_T S
                      WHERE H.TRAN_GUID = S.TRAN_GUID
                        AND S.NON_MERCH_CODE = COMMON_TOOLS.G_NON_MERCH_CODE);
   --variable declaration
   V_COMMIT         NUMBER := 0;
   V_TEMP_ROW       CUSTOMER_DEPOSIT_HEADER%ROWTYPE;
   V_HDR_REC        CUSTOMER_DEPOSIT_HEADER%ROWTYPE;
BEGIN
   FOR REC IN TEMP_CUR LOOP
        V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER  := REC.CUSTOMER_ACCOUNT_NUMBER;
        V_TEMP_ROW.CUSTOMER_NAME            := REC.CUSTOMER_NAME; 
        V_TEMP_ROW.BILLCONTACT              := REC.BILLCONTACT;
        V_TEMP_ROW.BILLNM                   := REC.BILLNM;
        V_TEMP_ROW.BILLADDR1                := REC.BILLADDR1;
        V_TEMP_ROW.BILLADDR2                := REC.BILLADDR2;
        V_TEMP_ROW.BILLCITY                 := REC.BILLCITY;
        V_TEMP_ROW.BILLZIP                  := REC.BILLZIP;
        V_TEMP_ROW.BILLPHONE                := REC.BILLPHONE;
        V_TEMP_ROW.RLS_RUN_CYCLE            := REC.RLS_RUN_CYCLE;
        V_TEMP_ROW.LOAD_DATE                := V_DATE;

        TABLE_IU_PKG.CUST_DEPOSIT_HEADER_I_SP(V_TEMP_ROW);    
        V_TEMP_ROW := NULL;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
           COMMIT;
           V_COMMIT := 0;
        END IF;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUSTOMER_DEPOSIT_HDR',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUSTOMER_DEPOSIT_HDR;

FUNCTION GET_LAST_BAL_FOR_INCORRECT_ORDER(
/*******************************************************************
This function will return the net balance before current transaction
till the incorrect transaction date

Created : 05/15/2019 sxh487/sxs484
********************************************************************/
IN_CUST_ACCOUNT_NBR IN CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_ACCOUNT_NUMBER%TYPE,
IN_TRANSACTION_DATE IN CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_DATE%TYPE) 
    RETURN NUMBER
IS
  V_CUSTOMER_NET_BALANCE     CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_NET_BALANCE%TYPE := 0;
BEGIN
    SELECT NVL(CUSTOMER_NET_BALANCE, 0)
        INTO V_CUSTOMER_NET_BALANCE
        FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL
       WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUST_ACCOUNT_NBR
         AND TRAN_TIMESTAMP = (SELECT MAX(TRAN_TIMESTAMP)
                                    FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL
                                   WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUST_ACCOUNT_NBR
                                     AND TRANSACTION_DATE < IN_TRANSACTION_DATE);

     RETURN V_CUSTOMER_NET_BALANCE;
EXCEPTION
    WHEN OTHERS THEN
          RETURN V_CUSTOMER_NET_BALANCE;
END GET_LAST_BAL_FOR_INCORRECT_ORDER;

PROCEDURE INCORRECT_ORDER_NET_BAL_UPDATE(
/*******************************************************************************
INCORRECT_ORDER_NET_BAL_UPDATE

This procedure is intended to recalculate net balance due to incorrect order from POS
where a Redemption comes before a Deposit

created : 05/10/2019 sxh487/sxs484 
changed :

*******************************************************************************/
IN_CUST_ACCOUNT_NBR IN CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_ACCOUNT_NUMBER%TYPE,
IN_TRANSACTION_DATE IN CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_DATE%TYPE) IS

    CURSOR Account_det_cur IS
           SELECT D.*, ROWID 
             FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL D 
            WHERE D.CUSTOMER_ACCOUNT_NUMBER = IN_CUST_ACCOUNT_NBR
              AND TRANSACTION_DATE >= IN_TRANSACTION_DATE
            ORDER BY D.TRAN_TIMESTAMP;

   V_NET_BAL  NUMBER:= 0;  
BEGIN
    V_NET_BAL  := GET_LAST_BAL_FOR_INCORRECT_ORDER(IN_CUST_ACCOUNT_NBR, IN_TRANSACTION_DATE);
    FOR rec IN Account_det_cur LOOP
        V_NET_BAL  := V_NET_BAL + rec.CSTMR_DPST_SALES_LN_ITM_AMT;
        UPDATE CUSTOMER_DEPOSIT_TRANSACTION_DTL
           SET CUSTOMER_NET_BALANCE    = V_NET_BAL
         WHERE ROWID = rec.ROWID
           AND CUSTOMER_NET_BALANCE <> V_NET_BAL;
    END LOOP;
EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'INCORRECT_ORDER_NET_BAL_UPDATE',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END INCORRECT_ORDER_NET_BAL_UPDATE;

PROCEDURE CUST_DEP_RED_ORIGINAL_DTLS_UPD(
/*****************************************************************************
This procedure will find if there are any Redemptions with out deposits then tie back that redemption to the deposit.

created : 01/17/2019 pxa852 ccn project....
changed : 02/06/2019 pxa852 CCN Project Team...
          Modified code to include new table that was created as part of data model change
          05/14/2019 sxh487/sxs484 Removed the transaction date check as the data received from POS
          can have a date that is after the current transaction date
******************************************************************************/
IN_CUSTOMER_ACCOUNT_NUMBER IN CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_ACCOUNT_NUMBER%TYPE,
IN_TRANSACTION_DATE        IN CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_DATE%TYPE)
IS
   CURSOR TEMP_CUR IS
      SELECT *
        FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL
       WHERE CUSTOMER_ACCOUNT_NUMBER      = IN_CUSTOMER_ACCOUNT_NUMBER
         --AND TRANSACTION_DATE             <= IN_TRANSACTION_DATE
         AND TRANSACTION_TYPE             = 'REDEMPTION'
         AND ORGNL_DEPOSIT_TERMINAL_NBR IS NULL
         AND CLOSED_DATE IS NULL
       ORDER BY TRAN_TIMESTAMP;

V_UPD_NET_BAL_flag VARCHAR2(1) := 'N';
BEGIN
     FOR rec IN TEMP_CUR LOOP
         V_UPD_NET_BAL_flag := 'Y';
         CUSTOMER_DEPOSIT_MAINT_PKG.ORIG_DEP_REM_BAL_UPD(rec.CSTMR_DPST_SALES_LN_ITM_AMT,
                                                         rec.CUSTOMER_ACCOUNT_NUMBER,
                                                         IN_TRANSACTION_DATE,
                                                         rec.ORGNL_DEPOSIT_TRANSACTION_NBR,
                                                         rec.ORGNL_DEPOSIT_TERMINAL_NBR,
                                                         rec.ORGNL_DEPOSIT_TRANSACTION_DATE);
         TABLE_IU_PKG.CUST_DEPOSIT_TRAN_DTLS_I_SP(rec);
     END LOOP;
    
     --Setting up the flag so that net balance needs to be recalculated only for incorrect order of transaction date as we receive from POS
     --Need not recalculate if the transaction date is in the right order
     IF V_UPD_NET_BAL_flag = 'Y' THEN
        --re-calculate the net balance after the tie-back
        INCORRECT_ORDER_NET_BAL_UPDATE(IN_CUSTOMER_ACCOUNT_NUMBER, IN_TRANSACTION_DATE);
     END IF;
EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'CUST_DEP_RED_ORIGINAL_DTLS_UPD',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END CUST_DEP_RED_ORIGINAL_DTLS_UPD;

PROCEDURE LOAD_CUSTOMER_DEPOSIT_TRANSACTION_HDR(
/*****************************************************************************
LOAD_CUSTOMER_DEPOSIT_TRANSACTION_HDR

This procedure will load the customer_deposit_transaction_hdr table from pnp legacy idms database.
This table will have a unique combination of cost center code, customer account number and gl division.

Created : 02/06/2019 pxa852 ccn project....
Changed : 05/29/2019 sxs484 CCN project
          ASP-1255 Updated reference of 4 chars CCN_HEADERS_T.STORE_NO           
          to 6 chars CCN_HEADERS_T.STORECCN.
Changed : 09/10/2019 sxc403 CCN Project 
          CCNCD-4  Debugged the insert into Error_Log table so that null values of local vars are no 
          longer used instead values are derived directly from the cursor.   
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
   CURSOR TEMP_CUR IS
      SELECT STORECCN  AS COST_CENTER_CODE,
             TERMNBR   AS TERMINAL_NUMBER,
             ACCTNBR   AS CUSTOMER_ACCOUNT_NUMBER,
             RLS_RUN_CYCLE
        FROM CCN_HEADERS_T H
       WHERE H.RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
         AND EXISTS (SELECT 1
                       FROM CCN_SALES_LINES_T S
                      WHERE H.TRAN_GUID = S.TRAN_GUID
                        AND S.NON_MERCH_CODE = COMMON_TOOLS.G_NON_MERCH_CODE);
   --variable declaration
   V_TEMP_ROW       CUSTOMER_DEPOSIT_TRANSACTION_HDR%ROWTYPE;
   V_COMMIT         NUMBER := 0;

BEGIN
    FOR REC IN TEMP_CUR LOOP
      BEGIN
         V_TEMP_ROW.COST_CENTER_CODE            :=  COMMON_TOOLS.COST_CENTER_LOOK_UP_FNC(REC.COST_CENTER_CODE);
         V_TEMP_ROW.TERMINAL_NUMBER             :=  REC.TERMINAL_NUMBER;
         V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER     :=  REC.CUSTOMER_ACCOUNT_NUMBER;
         TABLE_IU_PKG.CUST_DEP_TRANS_HDR_I_SP(V_TEMP_ROW);

         V_TEMP_ROW := NULL;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
              ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                          'LOAD_CUST_DEP_TRANS_HEADER',
                                          SQLERRM,
                                          REC.COST_CENTER_CODE,
                                          REC.CUSTOMER_ACCOUNT_NUMBER,
                                          'LOAD_CUST_DEP_TRANS_HEADER');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
       ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUST_DEP_TRANS_HEADER',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUSTOMER_DEPOSIT_TRANSACTION_HDR;

PROCEDURE LOAD_CUSTOMER_DEPOSIT_DETAILS(
/*****************************************************************************
LOAD_CUSTOMER_DEPOSIT_TRANSACTION_DTL

This procedure will load the CUSTOMER_DEPOSIT_TRANSACTION_DTL table from pnp legacy idms database.

created : 09/08/2017 sxh487 ccn project....
changed : 01/26/2018 sxh487 Added logic to get the last cumulative total for calculating the 
          net balance
        : 03/20/2018 sxh487 Added logic to add records in CUST_DEP_CREDIT_DETAILS and CUST_DEP_REDEMPTION_DETAILS 
        : 05/29/2018 sxh487 Added NON_MERCH_CODE ='05' for line item amount
        : 08/22/2018 sxh487 Removed the total_sales field population as it is not being used
        : 11/06/2018 sxg151 Rename column's to (ORGNL_DEPOSIT_TRANSACTION_NBR,ORGNL_DEPOSIT_TERMINAL_NBR,ORGNL_DEPOSIT_TRANSACTION_DATE)
        : 11/30/2018 sxg151 Added the new field population here to make sure daily load won't fail
        : 01/16/2018 pxa852/sxh487 CCN Project Team...
          Modified code to look back if there is any redemption for the desposit that came in today and tie back that redemption to the deposit.
        : 02/06/2019 pxa852 CCN Project Team...
          Modified code to populate credit and redemption details into new table that was created as part of new data model
          Populating orginals of redemption with orginals from POS.
          If the redmeption originals(Deposit) account does not match with the redemption account,generating a report to CCN oracle team.
          If the redemption came before deposit with some invalid originals (example '99999' or '88888' or '77777') then loading originals with null values.
        : 05/31/2019 sxs484 CCN project
          ASP-1255 Updated reference of 4 chars COST_CENTER_CODE CCN_HEADERS_T.STORE_NO           
          to 6 chars CCN_HEADERS_T.STORECCN.  
Changed : 09/10/2019 sxc403 CCN Project 
          CCNCD-4  Debugged the insert into Error_Log table so that null values of local vars are no 
          longer used instead values are derived directly from the cursor.
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
--variable declaration
    CURSOR TEMP_CUR IS
      SELECT HDR.*,
             ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ACCOUNT_NUMBER ORDER BY  TRAN_TIMESTAMP, TERMINAL_NUMBER) AS RNUM
        FROM (SELECT DISTINCT STORECCN  AS COST_CENTER_CODE,
                     TRAN_DATE AS TRANSACTION_DATE,
                     TERMNBR   AS TERMINAL_NUMBER,
                     TRANNBR   AS TRANSACTION_NUMBER,
                     ACCTNBR   AS CUSTOMER_ACCOUNT_NUMBER,
                     RLS_RUN_CYCLE,
                     TRAN_GUID AS TRANSACTION_GUID,
                     TRANID    AS POS_TRANSACTION_CODE,
                     TRAN_TIMESTAMP
                 FROM CCN_HEADERS_T H
                WHERE H.RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
                  AND EXISTS (SELECT 1
                                FROM CCN_SALES_LINES_T S
                               WHERE H.TRAN_GUID = S.TRAN_GUID
                                AND S.NON_MERCH_CODE = COMMON_TOOLS.G_NON_MERCH_CODE)) HDR;

   --variable declaration
   V_TEMP_ROW       CUSTOMER_DEPOSIT_TRANSACTION_DTL%ROWTYPE;
   V_COMMIT         NUMBER := 0;
   V_CUM_AMT        NUMBER := 0;
   V_ORIG_DEP_NBR   CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_NUMBER%TYPE;
   V_ORIG_TERM_NBR  CUSTOMER_DEPOSIT_TRANSACTION_DTL.TERMINAL_NUMBER%TYPE;
   V_ORIG_TRAN_DATE CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_DATE%TYPE;
   V_LOAD_DATE      DATE := SYSDATE;
BEGIN
   FOR REC IN TEMP_CUR LOOP
      BEGIN
         V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT :=   COMMON_TOOLS.GET_SALES_LINE_AMOUNT(REC.TRANSACTION_GUID, REC.RLS_RUN_CYCLE);
         V_TEMP_ROW.COST_CENTER_CODE            :=   COMMON_TOOLS.COST_CENTER_LOOK_UP_FNC(REC.COST_CENTER_CODE);
         V_TEMP_ROW.TRANSACTION_DATE            :=   REC.TRANSACTION_DATE;
         V_TEMP_ROW.TERMINAL_NUMBER             :=   REC.TERMINAL_NUMBER;
         V_TEMP_ROW.TRANSACTION_NUMBER          :=   REC.TRANSACTION_NUMBER;
         V_TEMP_ROW.TRANSACTION_GUID            :=   REC.TRANSACTION_GUID;
         V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER     :=   REC.CUSTOMER_ACCOUNT_NUMBER;
         V_TEMP_ROW.POS_TRANSACTION_CODE        :=   REC.POS_TRANSACTION_CODE;
         V_TEMP_ROW.TRAN_TIMESTAMP              :=   REC.TRAN_TIMESTAMP;
         V_TEMP_ROW.TRANSACTION_TYPE            :=   CASE WHEN V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT > 0 THEN
                                                            'DEPOSIT'
                                                       WHEN V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT < 0 THEN
                                                            'REDEMPTION'
                                                       ELSE 'NA'
                                                  END;
         V_CUM_AMT                             :=  (CASE WHEN REC.RNUM = 1 THEN
                                                       COMMON_TOOLS.FNC_GET_LATEST_CUM_AMT(REC.CUSTOMER_ACCOUNT_NUMBER)
                                                    ELSE
                                                        V_CUM_AMT
                                                    END)  + V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT;
         V_TEMP_ROW.CUSTOMER_NET_BALANCE        :=  V_CUM_AMT;
         V_TEMP_ROW.RLS_RUN_CYCLE               :=  REC.RLS_RUN_CYCLE;
         V_TEMP_ROW.LOAD_DATE                   :=  V_LOAD_DATE;
         V_TEMP_ROW.GL_DIVISION                 :=  COMMON_TOOLS.GET_GL_DIVISION(V_TEMP_ROW.COST_CENTER_CODE);
         V_TEMP_ROW.CUST_DEP_TRANS_DETAIL_SEQ   :=  CUST_DEP_DETAIL_ID.NEXTVAL;

         IF V_TEMP_ROW.TRANSACTION_TYPE = 'DEPOSIT' THEN
            V_TEMP_ROW.DEPOSIT_REMAINING_BAL          := V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT;
            TABLE_IU_PKG.CUST_DEPOSIT_TRAN_DTLS_I_SP(V_TEMP_ROW);
            CUST_DEP_RED_ORIGINAL_DTLS_UPD(V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER, V_TEMP_ROW.TRANSACTION_DATE);
          ELSIF V_TEMP_ROW.TRANSACTION_TYPE = 'REDEMPTION' THEN
                CUSTOMER_DEPOSIT_MAINT_PKG.ORIG_DEP_REM_BAL_UPD(V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT, REC.CUSTOMER_ACCOUNT_NUMBER, REC.TRANSACTION_DATE,
                                                                V_ORIG_DEP_NBR, V_ORIG_TERM_NBR, V_ORIG_TRAN_DATE);
                V_TEMP_ROW.ORGNL_DEPOSIT_TERMINAL_NBR     := V_ORIG_TERM_NBR;
                V_TEMP_ROW.ORGNL_DEPOSIT_TRANSACTION_NBR  := V_ORIG_DEP_NBR;
                V_TEMP_ROW.ORGNL_DEPOSIT_TRANSACTION_DATE := V_ORIG_TRAN_DATE;

                TABLE_IU_PKG.CUST_DEPOSIT_TRAN_DTLS_I_SP(V_TEMP_ROW);
         ELSE
           NULL;
         END IF;

         V_TEMP_ROW := NULL;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
              ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                          'LOAD_CUSTOMER_DEPOSIT_TRANSACTION_DTL',
                                          SQLERRM,
                                          REC.COST_CENTER_CODE,
                                          REC.CUSTOMER_ACCOUNT_NUMBER,
                                          'CUSTOMER_DEPOSIT_TRANSACTION_DTL');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUSTOMER_DEPOSIT_TRANSACTION_DTL',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUSTOMER_DEPOSIT_DETAILS;

PROCEDURE CSTMR_DEPOSIT_DLY_LOAD_SP
/******************************************************************
CSTMR_DEPOSIT_DLY_LOAD_SP

This procedure is a wrapper for the daily load of the customer deposit tables
   * loads all the customer deposit tables

created : 09/08/2017 sxh487 ccn project....
changed : 02/06/2018 sxh487 Added the Header load
changed : 01/17/2019 sxg151 CCN project...
        : ASP-1202 Replaced CUST_DEP_BATCH_PKG.INSERT_BATCH_JOB/UPDATE_BATCH_JOB To CCN_BATCH_PKG.INSERT_BATCH_JOB/UPDATE_BATCH_JOB
          Added CCN_BATCH_PKG.LOCK_DATABASE_SP(),CCN_BATCH_PKG.UNLOCK_DATABASE_SP()
        : 02/12/2019 pxa852 CCN Project Team...
          Modified code to remove accum process as we are not using it.
        : 03/26/2019 ASP-1207 mxs216 CCN Project....
          Updated varibale declaration referencing CCN_BATCH_PKG.BATCH_JOB_TYPE
******************************************************************/
AS
    V_CONTEXT           VARCHAR2(200);
    V_START_TIME        NUMBER;
    V_BATCH_NUMBER      CCN_BATCH_PKG.BATCH_JOB_TYPE.BATCH_JOB_NUMBER%TYPE;
    V_TRANS_STATUS      CCN_BATCH_PKG.BATCH_JOB_TYPE.TRANS_STATUS%TYPE := 'SUCCESSFUL';
    V_RLS_RUN_CYCLE     POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE;
BEGIN
     CCN_BATCH_PKG.INSERT_BATCH_JOB('CUS_DEP_DLY_LOAD_SP', V_BATCH_NUMBER);
     CCN_BATCH_PKG.LOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION;
     V_RLS_RUN_CYCLE := COMMON_TOOLS.GET_CURR_RUNCYCLE;
     --load data from pnp to customer deposits intermediate tables
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load POS_CCN_LOAD_STATUS Table ';
     LOAD_POS_CSTMR_DEP_LOAD_STATUS( V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.PUT_LINE('POS_CSTMR_DEP_LOAD_STATUS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUST_DEP_CCN_HEADERS_T Table';
     LOAD_CUST_DEP_CCN_HEADERS_T(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUST_DEP_CCN_HEADERS_T loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUST_DEP_CCN_SALES_LINES_T Table';
     LOAD_CUST_DEP_SALES_LINES_T(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUST_DEP_CCN_SALES_LINES_T loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUSTOMER_DEPOSIT HEADER Table';
     LOAD_CUSTOMER_DEPOSIT_HDR( V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUSTOMER_DEPOSIT HEADER loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

          --load data from pnp to CUSTOMER_DEPOSIT_TRANSACTION_HDR table
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUSTOMER_DEPOSIT_TRANSACTION_HDR Table ';
     LOAD_CUSTOMER_DEPOSIT_TRANSACTION_HDR(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.PUT_LINE('CUSTOMER_DEPOSIT_TRANSACTION_HDR loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     --load data from pnp to CUSTOMER_DEPOSIT_TRANSACTION_DTL table
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUSTOMER_DEPOSIT_TRANSACTION_DTL Table ';
     LOAD_CUSTOMER_DEPOSIT_DETAILS(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.PUT_LINE('CUSTOMER_DEPOSIT_TRANSACTION_DTL loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     CCN_BATCH_PKG.UPDATE_BATCH_JOB('CUS_DEP_DLY_LOAD_SP', V_BATCH_NUMBER, V_TRANS_STATUS);
     CCN_BATCH_PKG.UNLOCK_DATABASE_SP(); -- PRAGMA AUTONOMOUS_TRANSACTION; 
EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CSTMR_DEPOSIT_DLY_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END CSTMR_DEPOSIT_DLY_LOAD_SP;

END CUSTOMER_DEPOSITS_DAILY_LOAD;