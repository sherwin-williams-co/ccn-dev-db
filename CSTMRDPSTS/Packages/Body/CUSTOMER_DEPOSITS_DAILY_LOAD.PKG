create or replace PACKAGE BODY CUSTOMER_DEPOSITS_DAILY_LOAD
/****************************************************************
This package will load the customer deposits from pnp
created : 09/08/2017 sxh487 ccn project....
changed :
*****************************************************************/
AS

PROCEDURE LOAD_POS_CSTMR_DEP_LOAD_STATUS(
/****************************************************************************
This procedure is used to load the POSXML POS_CSTMR_DEP_LOAD_STATUS 
with data extracted from new interface tables with the runcyle information
Created : 09/26/2017 sxh487 CCN Project....
*****************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
AS

BEGIN
   INSERT INTO POS_CSTMR_DEP_LOAD_STATUS
   SELECT CH.*,
          SYSDATE LOAD_DATE
     FROM PNP.CCN_LOAD_STATUS CH
    WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;

   DBMS_OUTPUT.PUT_LINE('Total rows inserted ' || SQL%ROWCOUNT);
   COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_POS_CSTMR_DEP_LOAD_STATUS',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    'POS_CSTMR_DEP_LOAD_STATUS');
END LOAD_POS_CSTMR_DEP_LOAD_STATUS;

PROCEDURE LOAD_CUST_DEP_CCN_ACCUMS_T(
/*****************************************************************************
LOAD_CUST_DEP_CCN_ACCUMS_T

This procedure will load the cust_dep_ccn_accums_t table from pnp.ccn_accums table.
   For performance improvement, data loaded in temp tables

created : 09/27/2017 sxh487 ccn project....
changed : 05/29/2018 sxh487 Added NON_MERCH_CODE ='05' for line item amount
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
   CURSOR CUR_CCN_ACCUMS_T IS
      SELECT *
        FROM PNP.CCN_ACCUMS ACC
       WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;
                       
   --variable declaration
   V_COMMIT           NUMBER := 0;
   V_CCN_ACCUMS_T     CUST_DEP_CCN_ACCUMS_T%ROWTYPE;
   V_DATE             DATE := TRUNC(SYSDATE);
BEGIN

   FOR REC IN CUR_CCN_ACCUMS_T LOOP
      BEGIN
         V_CCN_ACCUMS_T.TRANSACTION_GUID         :=   REC.TRAN_GUID;
         V_CCN_ACCUMS_T.AMT                      :=   REC.AMT;
         V_CCN_ACCUMS_T.ACCUM_ID                 :=   REC.ACCUM_ID;
         V_CCN_ACCUMS_T.RLS_RUN_CYCLE            :=   IN_RLS_RUN_CYCLE;
         V_CCN_ACCUMS_T.LOAD_DATE                :=   V_DATE;
         
         INSERT INTO CUST_DEP_CCN_ACCUMS_T VALUES V_CCN_ACCUMS_T;

         V_CCN_ACCUMS_T := NULL;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
             ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                         'LOAD_CUST_DEP_CCN_ACCUMS_T',
                                         SQLERRM,
                                         '000000',
                                         '000000000',
                                         'CUST_DEP_CCN_ACCUMS_T');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUST_DEP_CCN_ACCUMS_T',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUST_DEP_CCN_ACCUMS_T;

PROCEDURE LOAD_CUST_DEP_CCN_HEADERS_T(
/*****************************************************************************
LOAD_CUST_DEP_CCN_CCN_HEADERS_T

This procedure will load the CCN_HEADERS_T table from pnp.ccn_headers table.
   For performance improvement, data loaded in temp tables

created : 09/27/2017 sxh487 ccn project....
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
   CURSOR CUR_CCN_HEADERS_T IS
      SELECT BOOK_YR,
             BOOK_MO,
             BOOK_PERIOD,
             RLS_RUN_CYCLE,
             TRAN_DATE,
             STORE_NO,
             TERMNBR,
             TRANID,
             TRANNBR,
             TERMCTLNBR,
             TRAN_TOTAL,
             ACCTNBR,
             JOBNBR,
             PONBR,
             BILLCONTACT,
             BILLNM,
             BILLADDR1,
             BILLADDR2,
             BILLCITY,
             BILLST,
             BILLZIP,
             BILLCNTRY,
             BILLPHONE,
             TERRNBR,
             CUSTTYPNBR,
             ORDERDT,
             BATCH_GUID,
             TRAN_GUID,
             TRAN_TIMESTAMP,
             EMP_NO,
             CTL_DT,
             REASON_CODE,
             INST_PAYMENT,
             INST_RETAINAGE,
             SHIPNM,
             CUSTOMER_NAME,
             POS_VERSION_NUMBER,
             ORIGDT,
             ORIGTERM,
             ORIGTRAN
        FROM PNP.CCN_HEADERS
       WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;
                       
   --variable declaration
   V_COMMIT           NUMBER := 0;
BEGIN

   FOR REC IN CUR_CCN_HEADERS_T LOOP
      BEGIN
         INSERT INTO CCN_HEADERS_T VALUES REC;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
             ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                         'LOAD_CUST_DEP_CCN_HEADERS_T',
                                         SQLERRM,
                                         '000000',
                                         '000000000',
                                         'CCN_HEADERS_T');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUST_DEP_CCN_HEADERS_T',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUST_DEP_CCN_HEADERS_T;

PROCEDURE LOAD_CUST_DEP_SALES_LINES_T(
/*****************************************************************************
LOAD_CUST_DEP_SALES_LINES_T

This procedure will load the CCN_SALES_LINES_T table from pnp.SALES_LINES table.
   For performance improvement, data loaded in temp tables

created : 05/29/2018 sxh487 ccn project....
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS
   CURSOR CUR_CCN_SALES_LINES_T IS
      SELECT RLS_RUN_CYCLE,
             ALPHALVL,
             CONTROLNBR,
             CORR,
             EXTENDED_PRICE,
             FLOORPR,
             LINENBR,
             NSPR,
             OVRFLOORPR,
             PAYCD,
             PR,
             PRLOCATION,
             PRODDESCR,
             PRODID1,
             PRODID2,
             PRODID3,
             PRODNBR,
             PRODSZ,
             PROJSLS,
             QTY,
             SALESNBR,
             SEQNBR,
             SPLIT,
             SRCPCTOFF,
             SRCPRLTYP,
             SRCPRLVL,
             SRCPROD,
             SRCVERSION,
             TAXABLE,
             TAXPRODNBR,
             TAXSTATUS,
             TRAN_GUID,
             GUID,
             NON_MERCHANDISE,
             RUN_CYCLE,
             BOOK_PERIOD,
             LINE_VERSION,
             LAST_UPDATE_TS,
             UPDATED_BY,
             CHANGE_EVENT_GUID,
             LISTPR,
             BOMWORKINGGALLONS,
             BOMWORKINGGALLONSPRICE,
             ID,
             MFGID,
             PRODNOF,
             SZDESCR,
             STAGED_TS,
             SGR_GALLON_FACTOR,
             SGR_EFFECTIVE_DATE,
             GALLONS,
             CLASS_NUMBER,
             PRODUCT_DEPARTMENT_CODE,
             PRODUCT_DEPARTMENT_DESC,
             PRODUCT_SUB_DEPARTMENT_CODE,
             PRODUCT_SUB_DEPARTMENT_DESC,
             PRODUCT_CATEGORY_CODE,
             PRODUCT_CATEGORY_DESC,
             NON_MERCH_CODE,
             NON_MERCH_DESCR,
             MPF_PRODNBR,
             PRIME,
             SUB,
             MPF_SIZE_CODE,
             MPF_SIZE_SHORT_DESC,
             PURCHASE_CODE,
             PRODUCT_CORE_ID,
             ECOMMERCE_ID
        FROM PNP.CCN_SALES_LINES
       WHERE RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE;
                       
   --variable declaration
   V_COMMIT               NUMBER := 0;
BEGIN

   FOR REC IN CUR_CCN_SALES_LINES_T LOOP
      BEGIN
         INSERT INTO CCN_SALES_LINES_T VALUES REC;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
             ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                         'LOAD_CUST_DEP_SALES_LINES_T',
                                         SQLERRM,
                                         '000000',
                                         '000000000',
                                         'CCN_SALES_LINES_T');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUST_DEP_SALES_LINES_T',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUST_DEP_SALES_LINES_T;

PROCEDURE LOAD_CUSTOMER_DEPOSIT_HDR(
/*****************************************************************************
LOAD_CUSTOMER_DEPOSIT_HDR

This procedure will load the customer_deposit_header table from pnp legacy idms database.

created : 03/05/2018 sxh487 ccn project....
changed : 05/29/2018 sxh487 Added NON_MERCH_CODE ='05' for line item amount
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS

--variable declaration
V_DATE                       DATE := TRUNC(SYSDATE);

   CURSOR TEMP_CUR IS
      SELECT DISTINCT 
             ACCTNBR AS CUSTOMER_ACCOUNT_NUMBER,
             CUSTOMER_NAME,
             BILLNM,
             BILLCONTACT,
             BILLADDR1,
             BILLADDR2,
             BILLCITY,
             BILLZIP,
             BILLPHONE,
             RLS_RUN_CYCLE
        FROM CCN_HEADERS_T H
       WHERE H.RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
         AND EXISTS (SELECT 1
                       FROM CCN_SALES_LINES_T S
                      WHERE H.TRAN_GUID = S.TRAN_GUID
                        AND S.NON_MERCH_CODE = COMMON_TOOLS.G_NON_MERCH_CODE);

   --variable declaration
   V_COMMIT         NUMBER := 0;
   V_TEMP_ROW       CUSTOMER_DEPOSIT_HEADER%ROWTYPE;
   V_HDR_REC        CUSTOMER_DEPOSIT_HEADER%ROWTYPE;
BEGIN
   FOR REC IN TEMP_CUR LOOP
        V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER  := REC.CUSTOMER_ACCOUNT_NUMBER;
        V_TEMP_ROW.CUSTOMER_NAME            := REC.CUSTOMER_NAME; 
        V_TEMP_ROW.BILLCONTACT              := REC.BILLCONTACT;
        V_TEMP_ROW.BILLNM                   := REC.BILLNM;
        V_TEMP_ROW.BILLADDR1                := REC.BILLADDR1;
        V_TEMP_ROW.BILLADDR2                := REC.BILLADDR2;
        V_TEMP_ROW.BILLCITY                 := REC.BILLCITY;
        V_TEMP_ROW.BILLZIP                  := REC.BILLZIP;
        V_TEMP_ROW.BILLPHONE                := REC.BILLPHONE;
        V_TEMP_ROW.RLS_RUN_CYCLE            := REC.RLS_RUN_CYCLE;
        V_TEMP_ROW.LOAD_DATE                := V_DATE;
        
        TABLE_IU_PKG.CUST_DEPOSIT_HEADER_I_SP(V_TEMP_ROW);    
        V_TEMP_ROW := NULL;
        V_COMMIT := V_COMMIT + 1;
        IF V_COMMIT > 500 THEN
           COMMIT;
           V_COMMIT := 0;
        END IF;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUSTOMER_DEPOSIT_HDR',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUSTOMER_DEPOSIT_HDR;

PROCEDURE LOAD_CUSTOMER_DEPOSIT_DETAILS(
/*****************************************************************************
LOAD_CUSTOMER_DEPOSIT_DETAILS

This procedure will load the customer_deposit_details table from pnp legacy idms database.

created : 09/08/2017 sxh487 ccn project....
changed : 01/26/2018 sxh487 Added logic to get the last cumulative total for calculating the 
          net balance
        : 03/20/2018 sxh487 Added logic to add records in CUST_DEP_CREDIT_DETAILS and CUST_DEP_REDEMPTION_DETAILS 
        : 05/29/2018 sxh487 Added NON_MERCH_CODE ='05' for line item amount
        : 08/22/2018 sxh487 Removed the total_sales field population as it is not being used
        : 11/06/2018 sxg151 Rename column's to (ORGNL_DEPOSIT_TRANSACTION_NBR,ORGNL_DEPOSIT_TERMINAL_NBR,ORGNL_DEPOSIT_TRANSACTION_DATE)
******************************************************************************/
IN_RLS_RUN_CYCLE POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE)
IS

--variable declaration
   CURSOR TEMP_CUR IS
      SELECT STORE_NO  AS COST_CENTER_CODE,
             TRAN_DATE AS TRANSACTION_DATE,
             TERMNBR   AS TERMINAL_NUMBER,
             TRANNBR   AS TRANSACTION_NUMBER,
             TRAN_GUID AS TRANSACTION_GUID,
             ACCTNBR   AS CUSTOMER_ACCOUNT_NUMBER,
             TRANID    AS POS_TRANSACTION_CODE,
             TRAN_TIMESTAMP,
             RLS_RUN_CYCLE,
             ROW_NUMBER() OVER (PARTITION BY ACCTNBR ORDER BY  TRAN_TIMESTAMP, TERMNBR) AS RNUM
        FROM CCN_HEADERS_T H
       WHERE H.RLS_RUN_CYCLE = IN_RLS_RUN_CYCLE
         AND EXISTS (SELECT 1
                       FROM CCN_SALES_LINES_T S
                      WHERE H.TRAN_GUID = S.TRAN_GUID
                        AND S.NON_MERCH_CODE = COMMON_TOOLS.G_NON_MERCH_CODE);
       
   --variable declaration
   V_TEMP_ROW       CUSTOMER_DEPOSIT_DETAILS%ROWTYPE;
   V_CREDIT_ROW     CUST_DEP_CREDIT_DETAILS%ROWTYPE;
   V_REDEMPTION_ROW CUST_DEP_REDEMPTION_DETAILS%ROWTYPE;
   V_COMMIT         NUMBER := 0;
   V_CUM_AMT        NUMBER := 0;
   V_ORIG_DEP_NBR   CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_NUMBER%TYPE;
   V_ORIG_TERM_NBR  CUSTOMER_DEPOSIT_DETAILS.TERMINAL_NUMBER%TYPE;
   V_ORIG_TRAN_DATE CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_DATE%TYPE;
   V_LOAD_DATE      DATE := SYSDATE;
BEGIN
   FOR REC IN TEMP_CUR LOOP
      BEGIN
         V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT :=   COMMON_TOOLS.GET_SALES_LINE_AMOUNT(REC.TRANSACTION_GUID, REC.RLS_RUN_CYCLE);
         V_TEMP_ROW.COST_CENTER_CODE            :=   COMMON_TOOLS.COST_CENTER_LOOK_UP_FNC(REC.COST_CENTER_CODE);
         V_TEMP_ROW.TRANSACTION_DATE            :=   REC.TRANSACTION_DATE;
         V_TEMP_ROW.TERMINAL_NUMBER             :=   REC.TERMINAL_NUMBER;
         V_TEMP_ROW.TRANSACTION_NUMBER          :=   REC.TRANSACTION_NUMBER;
         V_TEMP_ROW.TRANSACTION_GUID            :=   REC.TRANSACTION_GUID;
         V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER     :=   REC.CUSTOMER_ACCOUNT_NUMBER;
         V_TEMP_ROW.POS_TRANSACTION_CODE        :=   REC.POS_TRANSACTION_CODE;
         V_TEMP_ROW.TRAN_TIMESTAMP              :=   REC.TRAN_TIMESTAMP;
         V_TEMP_ROW.TRANSACTION_TYPE            :=   CASE WHEN V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT > 0 THEN 
                                                            'DEPOSIT'
                                                       WHEN V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT < 0 THEN 
                                                            'REDEMPTION'
                                                       ELSE 'NA'
                                                  END;
         V_CUM_AMT                             :=  (CASE WHEN REC.RNUM = 1 THEN
                                                       COMMON_TOOLS.FNC_GET_LATEST_CUM_AMT(REC.CUSTOMER_ACCOUNT_NUMBER)
                                                    ELSE
                                                        V_CUM_AMT
                                                    END)  + V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT;
         V_TEMP_ROW.CUSTOMER_NET_BALANCE        :=  V_CUM_AMT;
         V_TEMP_ROW.GL_DIVISION                 :=  COMMON_TOOLS.GET_GL_DIVISION(V_TEMP_ROW.COST_CENTER_CODE);
         V_TEMP_ROW.RLS_RUN_CYCLE               :=  REC.RLS_RUN_CYCLE;
         V_TEMP_ROW.LOAD_DATE                   :=  V_LOAD_DATE;

         TABLE_IU_PKG.CUST_DEP_DET_I_SP(V_TEMP_ROW);
         IF V_TEMP_ROW.TRANSACTION_TYPE = 'DEPOSIT' THEN
            V_CREDIT_ROW.CREDIT_ID                := SEQ_CREDIT_ID.nextval;
            V_CREDIT_ROW.COST_CENTER_CODE         := V_TEMP_ROW.COST_CENTER_CODE;
            V_CREDIT_ROW.CUSTOMER_ACCOUNT_NUMBER  := V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER;
            V_CREDIT_ROW.TRANSACTION_NUMBER       := V_TEMP_ROW.TRANSACTION_NUMBER;
            V_CREDIT_ROW.TRANSACTION_DATE         := V_TEMP_ROW.TRANSACTION_DATE;
            V_CREDIT_ROW.TERMINAL_NUMBER          := V_TEMP_ROW.TERMINAL_NUMBER;           
            V_CREDIT_ROW.DEPOSIT_REMAINING_BAL    := V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT;
            V_CREDIT_ROW.TRAN_TIMESTAMP           := V_TEMP_ROW.TRAN_TIMESTAMP;
            V_CREDIT_ROW.LOAD_DATE                := V_LOAD_DATE;
            
            TABLE_IU_PKG.CUST_DEPOSIT_CREDIT_I_SP(V_CREDIT_ROW);
         ELSIF V_TEMP_ROW.TRANSACTION_TYPE = 'REDEMPTION' THEN
               CUSTOMER_DEPOSIT_MAINT_PKG.ORIG_DEP_REM_BAL_UPD( V_TEMP_ROW.CSTMR_DPST_SALES_LN_ITM_AMT, REC.CUSTOMER_ACCOUNT_NUMBER, REC.TRANSACTION_DATE, V_ORIG_DEP_NBR, V_ORIG_TERM_NBR, V_ORIG_TRAN_DATE);
               V_REDEMPTION_ROW.REDEMPTION_ID                  := SEQ_REDEMPTION_ID.nextval;
               V_REDEMPTION_ROW.COST_CENTER_CODE               := V_TEMP_ROW.COST_CENTER_CODE;
               V_REDEMPTION_ROW.CUSTOMER_ACCOUNT_NUMBER        := V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER;
               V_REDEMPTION_ROW.TRANSACTION_NUMBER             := V_TEMP_ROW.TRANSACTION_NUMBER;
               V_REDEMPTION_ROW.TRANSACTION_DATE               := V_TEMP_ROW.TRANSACTION_DATE;
               V_REDEMPTION_ROW.TERMINAL_NUMBER                := V_TEMP_ROW.TERMINAL_NUMBER;
               V_REDEMPTION_ROW.ORGNL_DEPOSIT_TRANSACTION_NBR  := V_ORIG_DEP_NBR;
               V_REDEMPTION_ROW.ORGNL_DEPOSIT_TERMINAL_NBR     := V_ORIG_TERM_NBR;
               V_REDEMPTION_ROW.ORGNL_DEPOSIT_TRANSACTION_DATE := V_ORIG_TRAN_DATE;
               V_REDEMPTION_ROW.TRAN_TIMESTAMP                 := V_TEMP_ROW.TRAN_TIMESTAMP;
               V_REDEMPTION_ROW.LOAD_DATE                      := V_LOAD_DATE;
               
               TABLE_IU_PKG.CUST_DEPOSIT_REDEMPTION_I_SP(V_REDEMPTION_ROW);
         ELSE
           NULL;
         END IF; 
         
         V_TEMP_ROW := NULL;
         V_COMMIT := V_COMMIT + 1;
         IF V_COMMIT > 500 THEN
            COMMIT;
            V_COMMIT := 0;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
              ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                          'LOAD_CUSTOMER_DEPOSIT_DETAILS',
                                          SQLERRM,
                                          V_TEMP_ROW.COST_CENTER_CODE,
                                          V_TEMP_ROW.CUSTOMER_ACCOUNT_NUMBER,
                                          'CUSTOMER_DEPOSIT_DETAILS');
      END;
   END LOOP;
   COMMIT;

EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'LOAD_CUSTOMER_DEPOSIT_DETAILS',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END LOAD_CUSTOMER_DEPOSIT_DETAILS;

PROCEDURE CSTMR_DEPOSIT_DLY_LOAD_SP
/******************************************************************
CSTMR_DEPOSIT_DLY_LOAD_SP

This procedure is a wrapper for the daily load of the customer deposit tables
   * loads all the customer deposit tables

created : 09/08/2017 sxh487 ccn project....
changed : 02/06/2018 sxh487 Added the Header load
******************************************************************/
AS
   V_CONTEXT    VARCHAR2(200);
   V_START_TIME NUMBER;
   V_BATCH_NUMBER      BATCH_JOB.BATCH_JOB_NUMBER%TYPE;
   V_TRANS_STATUS      BATCH_JOB.TRANS_STATUS%TYPE := 'SUCCESSFUL';
   V_RLS_RUN_CYCLE     POS_CSTMR_DEP_LOAD_STATUS.RLS_RUN_CYCLE%TYPE;
BEGIN
     CUST_DEP_BATCH_PKG.INSERT_BATCH_JOB('CUS_DEP_DLY_LOAD_SP', V_BATCH_NUMBER);
     V_RLS_RUN_CYCLE := COMMON_TOOLS.GET_CURR_RUNCYCLE;
     --load data from pnp to customer deposits intermediate tables
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load POS_CCN_LOAD_STATUS Table ';
     LOAD_POS_CSTMR_DEP_LOAD_STATUS( V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.PUT_LINE('POS_CSTMR_DEP_LOAD_STATUS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
        
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUST_DEP_CCN_ACCUMS_T Table';
     LOAD_CUST_DEP_CCN_ACCUMS_T(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUST_DEP_CCN_ACCUMS_T loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
  
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUST_DEP_CCN_HEADERS_T Table';
     LOAD_CUST_DEP_CCN_HEADERS_T(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUST_DEP_CCN_HEADERS_T loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
  
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUST_DEP_CCN_SALES_LINES_T Table';
     LOAD_CUST_DEP_SALES_LINES_T(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUST_DEP_CCN_SALES_LINES_T loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
     
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUSTOMER_DEPOSIT HEADER Table';
     LOAD_CUSTOMER_DEPOSIT_HDR( V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.put_line('CUSTOMER_DEPOSIT HEADER loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');
  
     --load data from pnp to customer_deposit_details table
     V_START_TIME := DBMS_UTILITY.GET_TIME;
     V_CONTEXT := 'Load CUSTOMER_DEPOSIT_DETAILS Table ';
     LOAD_CUSTOMER_DEPOSIT_DETAILS(V_RLS_RUN_CYCLE);
     DBMS_OUTPUT.PUT_LINE('CUSTOMER_DEPOSIT_DETAILS loaded in : '|| (DBMS_UTILITY.GET_TIME - V_START_TIME)/100 || ' Seconds');

     CUST_DEP_BATCH_PKG.UPDATE_BATCH_JOB('CUS_DEP_DLY_LOAD_SP', V_BATCH_NUMBER, V_TRANS_STATUS);
EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP(SQLCODE,
                                    'CSTMR_DEPOSIT_DLY_LOAD_SP',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END CSTMR_DEPOSIT_DLY_LOAD_SP;

END CUSTOMER_DEPOSITS_DAILY_LOAD;