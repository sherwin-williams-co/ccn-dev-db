create or replace PACKAGE BODY CUSTOMER_DEPOSIT_MAINT_PKG AS 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

created : 09/27/2017 sxh487 CCN project.....
************************************************************/

PROCEDURE BUILD_UI_TABLE_TYPES(
/******************************************************************************
    This procedure is intended to build all the table types from input xml
    for this process

Created : 09/05/2018 sxh487 CCN Project....
Changed :
*******************************************************************************/
    IN_XML                     IN     CLOB,
    O_CUST_DEP_DETAILS_TAB        OUT TABLE_IU_PKG.CUST_DETAILS_TAB_TYPE)
IS
    V_COUNT                    INTEGER;
    V_CUST_DEP_DET_frag        CLOB;
    V_CUST_DEP_DET_rec         CUSTOMER_DEPOSIT_DETAILS%ROWTYPE;
    V_ROW_DATA                 XMLTYPE := SYS.XMLTYPE(IN_XML);
BEGIN
    IF IN_XML IS NOT NULL THEN
        V_COUNT := 1;
        WHILE V_ROW_DATA.EXISTSNODE('//'|| 'CUSTOMER_DEPOSIT_DETAILS'||'[' ||V_COUNT|| ']') = 1 LOOP
            V_CUST_DEP_DET_frag := V_ROW_DATA.EXTRACT('//'||'CUSTOMER_DEPOSIT_DETAILS' ||'[' || V_COUNT || ']').GETCLOBVAL();
            IF V_CUST_DEP_DET_frag IS NOT NULL THEN
               TABLE_IU_PKG.CUST_DEP_DETAILS_ROWTYPE_SP( 'CUSTOMER_DEPOSIT_DETAILS',
                                                          V_CUST_DEP_DET_frag,
                                                          V_CUST_DEP_DET_rec);
                    O_CUST_DEP_DETAILS_TAB(NVL(O_CUST_DEP_DETAILS_TAB.LAST, 0) +1) := V_CUST_DEP_DET_rec;
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'BUILD_UI_TABLE_TYPES ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END BUILD_UI_TABLE_TYPES;

PROCEDURE CUST_DEP_NET_BAL_UPD_SP(
/*******************************************************************************
CUST_DEP_NET_BAL_UPD_SP

This procedure is intended to update customer_deposit_details records
created : 09/05/2018 sxh487 -- ccn coding project....
changed :

*******************************************************************************/
IN_CUST_DETAILS_CORR_REC   IN     CUSTOMER_DEPOSIT_DETAILS%ROWTYPE)
IS

CURSOR ALL_OPEN_TRANS IS
        SELECT a.*,
               ROWID
          FROM CUSTOMER_DEPOSIT_DETAILS a
         WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUST_DETAILS_CORR_REC.CUSTOMER_ACCOUNT_NUMBER
           AND TRAN_TIMESTAMP >= IN_CUST_DETAILS_CORR_REC.TRAN_TIMESTAMP
           AND CLOSED_DATE IS NULL
         ORDER BY TRAN_TIMESTAMP;

  V_NET_BAL      CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_NET_BALANCE%TYPE;
  V_PREV_BAL     CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_NET_BALANCE%TYPE:=0;
BEGIN
     FOR each_rec IN ALL_OPEN_TRANS LOOP
         --get the previous records's net balance
         BEGIN
             SELECT DISTINCT LAST_VALUE(CUSTOMER_NET_BALANCE)
                    OVER (ORDER BY TRAN_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
               INTO V_PREV_BAL
               FROM CUSTOMER_DEPOSIT_DETAILS a
              WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUST_DETAILS_CORR_REC.CUSTOMER_ACCOUNT_NUMBER
                AND TRAN_TIMESTAMP < IN_CUST_DETAILS_CORR_REC.TRAN_TIMESTAMP
                AND CLOSED_DATE IS NULL;
         EXCEPTION
             WHEN OTHERS THEN
                NULL;
         END;
          V_NET_BAL := V_PREV_BAL + each_rec.CSTMR_DPST_SALES_LN_ITM_AMT;

          --Re-calculating the Net balance (running total)
          UPDATE CUSTOMER_DEPOSIT_DETAILS
             SET CUSTOMER_NET_BALANCE    = V_NET_BAL
           WHERE ROWID = each_rec.ROWID;
     END LOOP;
EXCEPTION

    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUST_DEP_NET_BAL_UPD_SP', SUBSTR(SQLERRM,1,500));
END CUST_DEP_NET_BAL_UPD_SP;

PROCEDURE ORIG_DEP_REM_BAL_UPD(
/**********************************************************
This function updates the original references for a Redemption
and updates the Deposit with remaining balance
 
Created : 03/26/2018 SXH487
**********************************************************/
IN_TOTAL_SALES             IN     CUSTOMER_DEPOSIT_DETAILS.TOTAL_SALES%TYPE, 
IN_CUSTOMER_ACCOUNT_NUMBER IN     CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_ACCOUNT_NUMBER%TYPE, 
IN_TRANSACTION_DATE        IN     CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_DATE%TYPE,
OUT_TRANSACTION_NUMBER        OUT CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_NUMBER%TYPE,
OUT_TERMINAL_NUMBER           OUT CUSTOMER_DEPOSIT_DETAILS.TERMINAL_NUMBER%TYPE,
OUT_TRANSACTION_DATE          OUT CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_DATE%TYPE
)
IS
    CURSOR ALL_DEPS IS
        SELECT a.*, rowid, count(*) over () TOT_DEP_CNT
          FROM CUST_DEP_CREDIT_DETAILS a
         WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUSTOMER_ACCOUNT_NUMBER
           AND TRANSACTION_DATE <= IN_TRANSACTION_DATE
           AND DEPOSIT_REMAINING_BAL > 0
           ORDER BY TRAN_TIMESTAMP;
    
    V_CNT           NUMBER :=0;
    V_DEP_REM_BAL   CUST_DEP_CREDIT_DETAILS.DEPOSIT_REMAINING_BAL%TYPE;
    V_TOTAL_SALES   CUSTOMER_DEPOSIT_DETAILS.TOTAL_SALES%TYPE := -(IN_TOTAL_SALES);
BEGIN  
    FOR each_dep IN ALL_DEPS LOOP
        V_CNT := V_CNT +1;
        OUT_TRANSACTION_NUMBER := each_dep.TRANSACTION_NUMBER;
        OUT_TERMINAL_NUMBER    := each_dep.TERMINAL_NUMBER;
        OUT_TRANSACTION_DATE   := each_dep.TRANSACTION_DATE;
        V_DEP_REM_BAL          := NULL;

        --if the redemption is greater than the balance on the deposit
        --then update the Deposit with -ve bal
        IF V_TOTAL_SALES > each_dep.DEPOSIT_REMAINING_BAL THEN
           --update only the last DEPOSIT with remaining balance       
           IF V_CNT = each_dep.TOT_DEP_CNT THEN
              V_DEP_REM_BAL := each_dep.DEPOSIT_REMAINING_BAL - V_TOTAL_SALES;
           ELSE
              V_DEP_REM_BAL :=0;
           END IF;
           V_TOTAL_SALES   := V_TOTAL_SALES - each_dep.DEPOSIT_REMAINING_BAL;
        ELSE
            V_DEP_REM_BAL := each_dep.DEPOSIT_REMAINING_BAL - V_TOTAL_SALES;
            V_TOTAL_SALES := 0;
        END IF;
        UPDATE CUST_DEP_CREDIT_DETAILS
           SET DEPOSIT_REMAINING_BAL = V_DEP_REM_BAL
          WHERE ROWID      = each_dep.rowid;

        IF V_TOTAL_SALES = 0 THEN
            EXIT;
        END IF;
    END LOOP;
END ORIG_DEP_REM_BAL_UPD;

PROCEDURE CUSTOMER_DEPOSIT_HDR_UPSERT_SP(
/*******************************************************************************
This procedure takes XML for CUSTOMER_DEPOSIT_HEADER information
and Inserts/Updates the DB with the information from UI

<?xml version="1.0" encoding="UTF-8"?>
<CUSTOMER_DEPOSIT_UI>
  <CUSTOMER_DEPOSIT_HEADER>
    <CUSTOMER_ACCOUNT_NUMBER>100046887</CUSTOMER_ACCOUNT_NUMBER>
    <CUSTOMER_NAME></CUSTOMER_NAME>
    <BILLCONTACT></BILLCONTACT>
    <BILLNM></BILLNM>
    <BILLADDR1></BILLADDR1>
    <BILLADDR2></BILLADDR2>
    <BILLCITY></BILLCITY>
    <BILLZIP></BILLZIP>
    <BILLPHONE></BILLPHONE>
    <RLS_RUN_CYCLE></RLS_RUN_CYCLE>
    <LOAD_DATE></LOAD_DATE>
    <REFERENCE_NUMBER>xxx</REFERENCE_NUMBER>
    <CLEARED_REASON>xxx</CLEARED_REASON>
    <NOTES>xxx</NOTES>
    <CLOSED_DATE>05-03-2018</CLOSED_DATE>
  </CUSTOMER_DEPOSIT_HEADER>
 <CUSTOMER_DEPOSIT_UI>

This proceduere does the following
1) Inserts the current record from CUSTOMER_DEPOSIT_HEADER into CUST_DEP_HDR_CLOSING_HIST
2) Updates the CUSTOMER_DEPOSIT_HEADER with the changes from UI for closed date
created : 05/04/2018 sxh487 -- CCN Project Team
******************************************************************************/
IN_TABLE_NAME       IN VARCHAR2,
IN_CUST_HEADERXML   IN CLOB)
IS
    V_XML                       SYS.XMLTYPE := XMLTYPE(IN_CUST_HEADERXML);
    V_CUSTOMER_DEPOSIT_HDR_frag CLOB;
    V_CUST_DEP_HDR_rec          CUSTOMER_DEPOSIT_HEADER%ROWTYPE;
    v_det_row                   CUSTOMER_DEPOSIT_DETAILS%ROWTYPE;
    V_COUNT                     NUMBER := 1;
BEGIN
   WHILE V_XML.EXISTSNODE('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME||'[' ||V_COUNT|| ']') = 1 LOOP
         V_CUSTOMER_DEPOSIT_HDR_frag := V_XML.EXTRACT('//'||IN_TABLE_NAME ||'[' || V_COUNT || ']').GETCLOBVAL();
         TABLE_IU_PKG.CUST_DEPOSIT_HDR_ROWTYPE_SP(IN_TABLE_NAME,
                                                  V_CUSTOMER_DEPOSIT_HDR_frag,
                                                  V_CUST_DEP_HDR_rec);

         TABLE_IU_PKG.CUST_DEPOSIT_HEADER_I_SP(V_CUST_DEP_HDR_rec);

         FOR each_rec IN( SELECT * FROM CUSTOMER_DEPOSIT_DETAILS WHERE CUSTOMER_ACCOUNT_NUMBER = V_CUST_DEP_HDR_rec.CUSTOMER_ACCOUNT_NUMBER AND CLOSED_DATE IS NULL)
         LOOP
             --update the CUSTOMER_DEPOSIT_DETAILS with closed date
             v_det_row := each_rec;
             v_det_row := each_rec;
             v_det_row.REFERENCE_NUMBER := V_CUST_DEP_HDR_rec.REFERENCE_NUMBER;
             v_det_row.CLEARED_REASON    := V_CUST_DEP_HDR_rec.CLEARED_REASON;
             v_det_row.NOTES             := V_CUST_DEP_HDR_rec.NOTES;
             v_det_row.CLOSED_DATE       := V_CUST_DEP_HDR_rec.CLOSED_DATE;
             TABLE_IU_PKG.CUST_DEP_DET_I_SP(v_det_row);
         END LOOP;
         V_COUNT := V_COUNT + 1;
   END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUSTOMER_DEPOSIT_HDR_UPSERT_SP', SUBSTR(SQLERRM,1,500));
END CUSTOMER_DEPOSIT_HDR_UPSERT_SP;

PROCEDURE CHECK_CHANGED_RECORDS(
/******************************************************************************
This procedure is intended to check if any record's sales amount changed from UI

Created : 09/07/2018 sxh487 CCN Project....
*******************************************************************************/
  IN_CUST_DEP_DET_DB_REC     IN     CUSTOMER_DEPOSIT_DETAILS%ROWTYPE,
  IO_CUST_DEP_DET_UI_TAB     IN OUT TABLE_IU_PKG.CUST_DETAILS_TAB_TYPE)
IS
    V_INDEX        NUMBER := IO_CUST_DEP_DET_UI_TAB.FIRST;

BEGIN
    WHILE V_INDEX IS NOT NULL LOOP
       IF NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).COST_CENTER_CODE, 'X')                           = NVL(IN_CUST_DEP_DET_DB_REC.COST_CENTER_CODE, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TRANSACTION_DATE, TRUNC(SYSDATE))                = NVL(IN_CUST_DEP_DET_DB_REC.TRANSACTION_DATE, TRUNC(SYSDATE)) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TERMINAL_NUMBER, 'X')                            = NVL(IN_CUST_DEP_DET_DB_REC.TERMINAL_NUMBER, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TRANSACTION_NUMBER, 'X')                         = NVL(IN_CUST_DEP_DET_DB_REC.TRANSACTION_NUMBER, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TRANSACTION_GUID, 'X')                           = NVL(IN_CUST_DEP_DET_DB_REC.TRANSACTION_GUID, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).CUSTOMER_ACCOUNT_NUMBER, 'X')                    = NVL(IN_CUST_DEP_DET_DB_REC.CUSTOMER_ACCOUNT_NUMBER, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).POS_TRANSACTION_CODE, 'X')                       = NVL(IN_CUST_DEP_DET_DB_REC.POS_TRANSACTION_CODE, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TRAN_TIMESTAMP, TRUNC(SYSDATE))                  = NVL(IN_CUST_DEP_DET_DB_REC.TRAN_TIMESTAMP, TRUNC(SYSDATE)) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TRANSACTION_TYPE, 'X')                           = NVL(IN_CUST_DEP_DET_DB_REC.TRANSACTION_TYPE, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).TOTAL_SALES, 0)                                  = NVL(IN_CUST_DEP_DET_DB_REC.TOTAL_SALES, 0) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).CUSTOMER_NET_BALANCE, 0)                         = NVL(IN_CUST_DEP_DET_DB_REC.CUSTOMER_NET_BALANCE, 0) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).LOAD_DATE, TRUNC(SYSDATE))                       = NVL(IN_CUST_DEP_DET_DB_REC.LOAD_DATE, TRUNC(SYSDATE)) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).RLS_RUN_CYCLE, 0)                                = NVL(IN_CUST_DEP_DET_DB_REC.RLS_RUN_CYCLE, 0) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).ADJUSTED_DATE, TRUNC(SYSDATE))                   = NVL(IN_CUST_DEP_DET_DB_REC.ADJUSTED_DATE, TRUNC(SYSDATE)) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).REFERENCE_NUMBER, 'X')                           = NVL(IN_CUST_DEP_DET_DB_REC.REFERENCE_NUMBER, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).CLEARED_REASON, 'X')                             = NVL(IN_CUST_DEP_DET_DB_REC.CLEARED_REASON, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).NOTES, 'X')                                      = NVL(IN_CUST_DEP_DET_DB_REC.NOTES, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).CLOSED_DATE, TRUNC(SYSDATE))                     = NVL(IN_CUST_DEP_DET_DB_REC.CLOSED_DATE, TRUNC(SYSDATE)) AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).GL_DIVISION, 'X')                                = NVL(IN_CUST_DEP_DET_DB_REC.GL_DIVISION, 'X') AND
          NVL(IO_CUST_DEP_DET_UI_TAB(V_INDEX).CSTMR_DPST_SALES_LN_ITM_AMT, 0)                  = NVL(IN_CUST_DEP_DET_DB_REC.CSTMR_DPST_SALES_LN_ITM_AMT, 0) THEN
             IO_CUST_DEP_DET_UI_TAB.DELETE(V_INDEX);

          END IF;

          V_INDEX := IO_CUST_DEP_DET_UI_TAB.NEXT(V_INDEX);

    END LOOP;

EXCEPTION

    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CHECK_CHANGED_RECORDS ' || SUBSTR(SQLERRM,1,500) || ' IN OTHERS ' );
END CHECK_CHANGED_RECORDS;

PROCEDURE CUSTOMER_DEPOSIT_DET_UPSERT_SP(
/*******************************************************************************
This procedure takes XML for CUSTOMER_DEPOSIT_DETAILS information
and Inserts/Updates the DB with the information from UI

<?xml version="1.0" encoding="UTF-8"?>
<CUSTOMER_DEPOSIT_UI>
  <CUSTOMER_DEPOSIT_DETAILS>
    <CUSTOMER_ACCOUNT_NUMBER>100001932</CUSTOMER_ACCOUNT_NUMBER>
    <CSTMR_DPST_SALES_LN_ITM_AMT>200</CSTMR_DPST_SALES_LN_ITM_AMT>
    <ADJUSTED_DATE></ADJUSTED_DATE>
    <REFERENCE_NUMBER></REFERENCE_NUMBER>
    <CLEARED_REASON></CLEARED_REASON>
    <NOTES></NOTES>
    <CLOSED_DATE></CLOSED_DATE>
    <COST_CENTER_CODE>701975</COST_CENTER_CODE>
    <TRANSACTION_TYPE>REDEMPTION</TRANSACTION_TYPE>
    <TOTAL_SALES></TOTAL_SALES>
    <CUSTOMER_NET_BALANCE>100</CUSTOMER_NET_BALANCE>
    <TRANSACTION_DATE>03-01-2016</TRANSACTION_DATE>
    <TERMINAL_NUMBER>18458</TERMINAL_NUMBER>
    <TRANSACTION_NUMBER>7914</TRANSACTION_NUMBER>
    <TRAN_TIMESTAMP>03-01-2016 11:09:33</TRAN_TIMESTAMP>
    <TRANSACTION_GUID>AE645392FD87A6B3E511C7DFBCC8C6FC</TRANSACTION_GUID>
    <POS_TRANSACTION_CODE>19</POS_TRANSACTION_CODE>
    <LOAD_DATE>08-28-2018</LOAD_DATE>
    <RLS_RUN_CYCLE>1234</RLS_RUN_CYCL>
    <GL_DIVISION>A100</GL_DIVISION>
  </CUSTOMER_DEPOSIT_DETAILS>
  <CUSTOMER_DEPOSIT_DETAILS>
       <CUSTOMER_ACCOUNT_NUMBER>100001932</CUSTOMER_ACCOUNT_NUMBER>
       <CSTMR_DPST_SALES_LN_ITM_AMT>100</CSTMR_DPST_SALES_LN_ITM_AMT>
       <ADJUSTED_DATE></ADJUSTED_DATE>
       <REFERENCE_NUMBER></REFERENCE_NUMBER>
       <CLEARED_REASON></CLEARED_REASON>
       <NOTES></NOTES>
       <CLOSED_DATE></CLOSED_DATE>
       <COST_CENTER_CODE>701975</COST_CENTER_CODE>
       <TRANSACTION_TYPE>REDEMPTION</TRANSACTION_TYPE>
       <TOTAL_SALES></TOTAL_SALES>
       <CUSTOMER_NET_BALANCE>100</CUSTOMER_NET_BALANCE>
       <TRANSACTION_DATE>03-05-2016</TRANSACTION_DATE>
       <TERMINAL_NUMBER>10604</TERMINAL_NUMBER>
       <TRANSACTION_NUMBER>79621</TRANSACTION_NUMBER>
       <TRAN_TIMESTAMP>03-05-2016 08:18:03</TRAN_TIMESTAMP>
       <TRANSACTION_GUID>A8F585E590BF648FE511D4E2285FECB0</TRANSACTION_GUID>
       <POS_TRANSACTION_CODE>41</POS_TRANSACTION_CODE>
       <LOAD_DATE>08-28-2018</LOAD_DATE>
       <RLS_RUN_CYCLE>1234</RLS_RUN_CYCL>
       <GL_DIVISION>A100</GL_DIVISION>
     </CUSTOMER_DEPOSIT_DETAILS>
</CUSTOMER_DEPOSIT_UI>
created : 05/04/2018 sxh487 -- CCN Project Team
******************************************************************************/
IN_TABLE_NAME       IN VARCHAR2,
IN_CUST_DETAIL_XML  IN CLOB)
IS
    V_XML                       SYS.XMLTYPE := XMLTYPE(IN_CUST_DETAIL_XML);
    V_COUNT                     NUMBER := 1;
    V_CUST_DETAILS_UI_TAB       TABLE_IU_PKG.CUST_DETAILS_TAB_TYPE;
    V_CUSTOMER_ACCOUNT_NUMBER   CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_ACCOUNT_NUMBER%TYPE;
    V_INDEX                     NUMBER := 0;

 CURSOR all_db_recs IS
  SELECT *
    FROM CUSTOMER_DEPOSIT_DETAILS a
   WHERE CUSTOMER_ACCOUNT_NUMBER = V_CUSTOMER_ACCOUNT_NUMBER
     ORDER BY TRAN_TIMESTAMP;
BEGIN

       IF (V_XML.EXISTSNODE('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME ||'[' || V_COUNT ||']'||'/CUSTOMER_ACCOUNT_NUMBER/text()') = 1) THEN
           V_CUSTOMER_ACCOUNT_NUMBER := V_XML.EXTRACT('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME ||'[' || V_COUNT ||']'||'/CUSTOMER_ACCOUNT_NUMBER/text()').GETSTRINGVAL();
       END IF;

       BUILD_UI_TABLE_TYPES(IN_CUST_DETAIL_XML, V_CUST_DETAILS_UI_TAB);

       FOR rec IN all_db_recs LOOP
           CHECK_CHANGED_RECORDS(rec, V_CUST_DETAILS_UI_TAB);
       END LOOP;

       --process changed amount records
       V_INDEX := V_CUST_DETAILS_UI_TAB.FIRST;
       WHILE V_INDEX IS NOT NULL LOOP
           TABLE_IU_PKG.CUST_DEP_DET_I_SP(V_CUST_DETAILS_UI_TAB(V_INDEX));
           --Net balance update
           CUST_DEP_NET_BAL_UPD_SP(V_CUST_DETAILS_UI_TAB(V_INDEX));
           V_INDEX := V_CUST_DETAILS_UI_TAB.NEXT(V_INDEX);
       END LOOP;
       V_COUNT := V_COUNT + 1;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUSTOMER_DEPOSIT_DET_UPSERT_SP', SUBSTR(SQLERRM,1,500));
END CUSTOMER_DEPOSIT_DET_UPSERT_SP;

PROCEDURE CUSTOMER_DEPOSIT_UPSERT_SP(
/******************************************************************************
This is a wrapper for the upsert procedure
created : 05/04/2018 sxh487 -- CCN Project Team
******************************************************************************/
IN_CUST_HEADERXML   IN CLOB,
IN_CUST_DETAIL_XML  IN CLOB)
IS
BEGIN
    IF IN_CUST_HEADERXML IS NOT NULL THEN
      CUSTOMER_DEPOSIT_HDR_UPSERT_SP('CUSTOMER_DEPOSIT_HEADER', IN_CUST_HEADERXML);
    END IF;
    IF IN_CUST_DETAIL_XML IS NOT NULL THEN
       CUSTOMER_DEPOSIT_DET_UPSERT_SP('CUSTOMER_DEPOSIT_DETAILS', IN_CUST_DETAIL_XML);
    END IF;
END CUSTOMER_DEPOSIT_UPSERT_SP;

END CUSTOMER_DEPOSIT_MAINT_PKG;