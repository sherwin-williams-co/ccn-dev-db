create or replace PACKAGE BODY CUSTOMER_DEPOSIT_MAINT_PKG AS 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

created : 09/27/2017 sxh487 CCN project.....
************************************************************/

FUNCTION  GET_LAST_VALUE_NET_BAL(
/*******************************************************************************
GET_LAST_VALUE_NET_BAL

This procedure is intended to update customer_deposit_details records
created : 09/05/2018 sxh487 -- ccn coding project....
changed :

*******************************************************************************/
    IN_CUSTOMER_ACCOUNT_NUMBER    IN     CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_ACCOUNT_NUMBER%TYPE)
RETURN NUMBER
IS
    V_PREV_BAL     CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_NET_BALANCE%TYPE:=0;
BEGIN
      SELECT NVL(CUSTOMER_NET_BALANCE, 0)
        INTO V_PREV_BAL
        FROM CUSTOMER_DEPOSIT_DETAILS
       WHERE TRANSACTION_SQ_ID = (SELECT MAX(TRANSACTION_SQ_ID)
                                    FROM CUSTOMER_DEPOSIT_DETAILS
                                   WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUSTOMER_ACCOUNT_NUMBER
                                     AND CLOSED_DATE IS NULL);

    RETURN V_PREV_BAL;
EXCEPTION
    WHEN OTHERS THEN
       RETURN V_PREV_BAL;
END GET_LAST_VALUE_NET_BAL;

PROCEDURE ORIG_DEP_REM_BAL_UPD(
/**********************************************************
This function updates the original references for a Redemption
and updates the Deposit with remaining balance
 
Created : 03/26/2018 SXH487
Changed : 11/26/2018 ASP-1150 : Renamed input variable name( TOTAL_SALES to CSTMR_DPST_SALES_LN_ITM_AMT)
        : 01/11/2019 pxa852 CCN Project Team...
          Modified code to use new table CUST_DEP_CRD_RED_DETAILS and update the deposit remaining balance
**********************************************************/
    IN_CSTMR_DPST_SALES_LN_ITM_AMT IN      CUSTOMER_DEPOSIT_DETAILS.CSTMR_DPST_SALES_LN_ITM_AMT%TYPE,
    IN_CUSTOMER_ACCOUNT_NUMBER     IN      CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_ACCOUNT_NUMBER%TYPE,
    IN_TRANSACTION_DATE            IN      CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_DATE%TYPE,
    OUT_TRANSACTION_NUMBER            OUT  CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_NUMBER%TYPE,
    OUT_TERMINAL_NUMBER               OUT  CUSTOMER_DEPOSIT_DETAILS.TERMINAL_NUMBER%TYPE,
    OUT_TRANSACTION_DATE              OUT  CUSTOMER_DEPOSIT_DETAILS.TRANSACTION_DATE%TYPE
)
IS
    CURSOR ALL_DEPS IS
        SELECT CDD.TRANSACTION_NUMBER,CDD.TERMINAL_NUMBER, CDD.TRANSACTION_DATE,cr.*,
               count(*) over () TOT_DEP_CNT
          FROM CUST_DEP_CRD_RED_DETAILS cr, CUSTOMER_DEPOSIT_DETAILS cdd
         WHERE cdd.CUSTOMER_ACCOUNT_NUMBER = IN_CUSTOMER_ACCOUNT_NUMBER
           AND cdd.TRANSACTION_TYPE <> 'REDEMPTION'
           AND cr.TRANSACTION_SQ_ID = cdd.TRANSACTION_SQ_ID
           AND cdd.TRANSACTION_DATE <= IN_TRANSACTION_DATE
           AND cr.DEPOSIT_REMAINING_BAL > 0
           ORDER BY cdd.TRAN_TIMESTAMP;

    V_CNT                           NUMBER :=0;
    V_DEP_REM_BAL                   CUST_DEP_CRD_RED_DETAILS.DEPOSIT_REMAINING_BAL%TYPE;
    V_CSTMR_DPST_SALES_LN_ITM_AMT   CUSTOMER_DEPOSIT_DETAILS.CSTMR_DPST_SALES_LN_ITM_AMT%TYPE := -(IN_CSTMR_DPST_SALES_LN_ITM_AMT);
BEGIN  
    FOR each_dep IN ALL_DEPS LOOP
        V_CNT := V_CNT +1;
        OUT_TRANSACTION_NUMBER := each_dep.TRANSACTION_NUMBER;
        OUT_TERMINAL_NUMBER    := each_dep.TERMINAL_NUMBER;
        OUT_TRANSACTION_DATE   := each_dep.TRANSACTION_DATE;
        V_DEP_REM_BAL          := NULL;
        --if the redemption is greater than the balance on the deposit
        --then update the Deposit with -ve bal
        IF V_CSTMR_DPST_SALES_LN_ITM_AMT > each_dep.DEPOSIT_REMAINING_BAL THEN
           --update only the last DEPOSIT with remaining balance       
           IF V_CNT = each_dep.TOT_DEP_CNT THEN
              V_DEP_REM_BAL := each_dep.DEPOSIT_REMAINING_BAL - V_CSTMR_DPST_SALES_LN_ITM_AMT;
           ELSE
              V_DEP_REM_BAL :=0;
           END IF;
           V_CSTMR_DPST_SALES_LN_ITM_AMT   := V_CSTMR_DPST_SALES_LN_ITM_AMT - each_dep.DEPOSIT_REMAINING_BAL;
        ELSE
            V_DEP_REM_BAL := each_dep.DEPOSIT_REMAINING_BAL - V_CSTMR_DPST_SALES_LN_ITM_AMT;
            V_CSTMR_DPST_SALES_LN_ITM_AMT := 0;
        END IF;
        UPDATE CUST_DEP_CRD_RED_DETAILS
           SET DEPOSIT_REMAINING_BAL   = V_DEP_REM_BAL
          WHERE TRANSACTION_SQ_ID      = each_dep.TRANSACTION_SQ_ID;

        IF V_CSTMR_DPST_SALES_LN_ITM_AMT = 0 THEN
            EXIT;
        END IF;
    END LOOP;
END ORIG_DEP_REM_BAL_UPD;

PROCEDURE CUSTOMER_DEPOSIT_HDR_UPSERT_SP(
/*******************************************************************************
This procedure takes XML for CUSTOMER_DEPOSIT_HEADER information
and Inserts/Updates the DB with the information from UI

<?xml version="1.0" encoding="UTF-8"?>
<CUSTOMER_DEPOSIT_UI>
  <CUSTOMER_DEPOSIT_HEADER>
    <CUSTOMER_ACCOUNT_NUMBER>100046887</CUSTOMER_ACCOUNT_NUMBER>
    <CUSTOMER_NAME></CUSTOMER_NAME>
    <BILLCONTACT></BILLCONTACT>
    <BILLNM></BILLNM>
    <BILLADDR1></BILLADDR1>
    <BILLADDR2></BILLADDR2>
    <BILLCITY></BILLCITY>
    <BILLZIP></BILLZIP>
    <BILLPHONE></BILLPHONE>
    <RLS_RUN_CYCLE></RLS_RUN_CYCLE>
    <LOAD_DATE></LOAD_DATE>
    <REFERENCE_NUMBER>xxx</REFERENCE_NUMBER>
    <CLEARED_REASON>xxx</CLEARED_REASON>
    <NOTES>xxx</NOTES>
    <CLOSED_DATE>05-03-2018</CLOSED_DATE>
  </CUSTOMER_DEPOSIT_HEADER>
 <CUSTOMER_DEPOSIT_UI>

This proceduere does the following
1) Inserts the current record from CUSTOMER_DEPOSIT_HEADER into CUST_DEP_HDR_CLOSING_HIST
2) Updates the CUSTOMER_DEPOSIT_HEADER with the changes from UI for closed date
created : 05/04/2018 sxh487 -- CCN Project Team
******************************************************************************/
    IN_TABLE_NAME          IN      VARCHAR2,
    IN_CUST_HEADER_XML     IN      CLOB,
    OUT_HDR_CUST_ACNT_NBR     OUT  VARCHAR2)
IS
CURSOR ALL_DEPS (p_acct_nbr IN CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_ACCOUNT_NUMBER%TYPE) IS
    SELECT *
      FROM CUSTOMER_DEPOSIT_DETAILS 
     WHERE CUSTOMER_ACCOUNT_NUMBER = p_acct_nbr
       AND CLOSED_DATE IS NULL;

     V_XML                       SYS.XMLTYPE := XMLTYPE(IN_CUST_HEADER_XML);
     V_CUSTOMER_DEPOSIT_HDR_frag CLOB;
     V_CUST_DEP_HDR_rec          CUSTOMER_DEPOSIT_HEADER%ROWTYPE;
     v_det_row                   CUSTOMER_DEPOSIT_DETAILS%ROWTYPE;
BEGIN
    IF V_XML.EXISTSNODE('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME) = 1  THEN
       V_CUSTOMER_DEPOSIT_HDR_frag := V_XML.EXTRACT('//'||IN_TABLE_NAME ).GETCLOBVAL();
    END IF;
    TABLE_IU_PKG.CUST_DEPOSIT_HDR_ROWTYPE_SP(IN_TABLE_NAME,
                                             V_CUSTOMER_DEPOSIT_HDR_frag,
                                             V_CUST_DEP_HDR_rec);
    TABLE_IU_PKG.CUST_DEPOSIT_HEADER_I_SP(V_CUST_DEP_HDR_rec);
    FOR each_rec IN ALL_DEPS (V_CUST_DEP_HDR_rec.CUSTOMER_ACCOUNT_NUMBER) LOOP
         --update the CUSTOMER_DEPOSIT_DETAILS with closed date
         v_det_row := each_rec;
         v_det_row := each_rec;
         v_det_row.REFERENCE_NUMBER := V_CUST_DEP_HDR_rec.REFERENCE_NUMBER;
         v_det_row.CLEARED_REASON    := V_CUST_DEP_HDR_rec.CLEARED_REASON;
         v_det_row.NOTES             := V_CUST_DEP_HDR_rec.NOTES;
         v_det_row.CLOSED_DATE       := V_CUST_DEP_HDR_rec.CLOSED_DATE;
         TABLE_IU_PKG.CUST_DEP_DET_I_SP(v_det_row);
    END LOOP;
OUT_HDR_CUST_ACNT_NBR := v_det_row.CUSTOMER_ACCOUNT_NUMBER;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUSTOMER_DEPOSIT_HDR_UPSERT_SP', SUBSTR(SQLERRM,1,500));
END CUSTOMER_DEPOSIT_HDR_UPSERT_SP;

PROCEDURE CUSTOMER_DEPOSIT_DET_UPSERT_SP(
/*******************************************************************************
This procedure takes XML for CUSTOMER_DEPOSIT_DETAILS information 
and Inserts/Updates the DB with the information from UI

<?xml version="1.0" encoding="UTF-8"?>
<CUSTOMER_DEPOSIT_UI>
  <CUSTOMER_DEPOSIT_DETAILS>
    <CUSTOMER_ACCOUNT_NUMBER>100001932</CUSTOMER_ACCOUNT_NUMBER>
    <CSTMR_DPST_SALES_LN_ITM_AMT>200</CSTMR_DPST_SALES_LN_ITM_AMT>
    <ADJUSTED_DATE></ADJUSTED_DATE>
    <REFERENCE_NUMBER></REFERENCE_NUMBER>
    <CLEARED_REASON></CLEARED_REASON>
    <NOTES></NOTES>
    <CLOSED_DATE></CLOSED_DATE>
    <COST_CENTER_CODE>701975</COST_CENTER_CODE>
    <TRANSACTION_TYPE>REDEMPTION</TRANSACTION_TYPE>
    <CUSTOMER_NET_BALANCE>100</CUSTOMER_NET_BALANCE>
    <TRANSACTION_DATE>03-01-2016</TRANSACTION_DATE>
    <TERMINAL_NUMBER>18458</TERMINAL_NUMBER>
    <TRANSACTION_NUMBER>7914</TRANSACTION_NUMBER>
    <TRAN_TIMESTAMP>03-01-2016 11:09:33</TRAN_TIMESTAMP>
    <TRANSACTION_GUID>AE645392FD87A6B3E511C7DFBCC8C6FC</TRANSACTION_GUID>
    <POS_TRANSACTION_CODE>19</POS_TRANSACTION_CODE>
    <LOAD_DATE>08-28-2018</LOAD_DATE>
    <RLS_RUN_CYCLE>1234</RLS_RUN_CYCL>
    <GL_DIVISION>A100</GL_DIVISION>
  </CUSTOMER_DEPOSIT_DETAILS>
  <CUSTOMER_DEPOSIT_DETAILS>
       <CUSTOMER_ACCOUNT_NUMBER>100001932</CUSTOMER_ACCOUNT_NUMBER>
       <CSTMR_DPST_SALES_LN_ITM_AMT>100</CSTMR_DPST_SALES_LN_ITM_AMT>
       <ADJUSTED_DATE></ADJUSTED_DATE>
       <REFERENCE_NUMBER></REFERENCE_NUMBER>
       <CLEARED_REASON></CLEARED_REASON>
       <NOTES></NOTES>
       <CLOSED_DATE></CLOSED_DATE>
       <COST_CENTER_CODE>701975</COST_CENTER_CODE>
       <TRANSACTION_TYPE>REDEMPTION</TRANSACTION_TYPE>
       <CUSTOMER_NET_BALANCE>100</CUSTOMER_NET_BALANCE>
       <TRANSACTION_DATE>03-05-2016</TRANSACTION_DATE>
       <TERMINAL_NUMBER>10604</TERMINAL_NUMBER>
       <TRANSACTION_NUMBER>79621</TRANSACTION_NUMBER>
       <TRAN_TIMESTAMP>03-05-2016 08:18:03</TRAN_TIMESTAMP>
       <TRANSACTION_GUID>A8F585E590BF648FE511D4E2285FECB0</TRANSACTION_GUID>
       <POS_TRANSACTION_CODE>41</POS_TRANSACTION_CODE>
       <LOAD_DATE>08-28-2018</LOAD_DATE>
       <RLS_RUN_CYCLE>1234</RLS_RUN_CYCLE>
       <GL_DIVISION>A100</GL_DIVISION>
     </CUSTOMER_DEPOSIT_DETAILS>
</CUSTOMER_DEPOSIT_UI>
created : 05/04/2018 sxh487 -- CCN Project Team
******************************************************************************/
    IN_TABLE_NAME           IN     VARCHAR2,
    IN_CUST_DETAIL_XML      IN     CLOB,
    IN_HDR_CUST_ACNT_NBR    IN     VARCHAR)
IS
    V_XML                       SYS.XMLTYPE := XMLTYPE(IN_CUST_DETAIL_XML);
    V_COUNT                     NUMBER := 1;
    V_CUSTOMER_ACCOUNT_NUMBER   CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_ACCOUNT_NUMBER%TYPE;
    V_NET_BAL                   CUSTOMER_DEPOSIT_DETAILS.CUSTOMER_NET_BALANCE%TYPE;
    V_CUST_DEP_DET_frag         CLOB;
    V_CUST_DEP_DET_rec          CUSTOMER_DEPOSIT_DETAILS%ROWTYPE;
BEGIN
    IF (V_XML.EXISTSNODE('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME ||'[' || V_COUNT ||']'||'/CUSTOMER_ACCOUNT_NUMBER/text()') = 1) THEN
        V_CUSTOMER_ACCOUNT_NUMBER := V_XML.EXTRACT('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME ||'[' || V_COUNT ||']'||'/CUSTOMER_ACCOUNT_NUMBER/text()').GETSTRINGVAL();
    END IF;
    -- Get the Last Net Balance 
    V_NET_BAL := GET_LAST_VALUE_NET_BAL(V_CUSTOMER_ACCOUNT_NUMBER);   
    IF IN_CUST_DETAIL_XML IS NOT NULL THEN
        WHILE V_XML.EXISTSNODE('//'|| 'CUSTOMER_DEPOSIT_DETAILS'||'[' ||V_COUNT|| ']') = 1 LOOP   
            V_CUST_DEP_DET_frag := V_XML.EXTRACT('//'||'CUSTOMER_DEPOSIT_DETAILS' ||'[' || V_COUNT || ']').GETCLOBVAL();
            IF V_CUST_DEP_DET_frag IS NOT NULL THEN 
               TABLE_IU_PKG.CUST_DEP_DETAILS_ROWTYPE_SP('CUSTOMER_DEPOSIT_DETAILS',
                                                         V_CUST_DEP_DET_frag,
                                                         V_CUST_DEP_DET_rec);
               V_NET_BAL := V_NET_BAL + V_CUST_DEP_DET_rec.CSTMR_DPST_SALES_LN_ITM_AMT;
               V_CUST_DEP_DET_rec.CUSTOMER_NET_BALANCE := V_NET_BAL;
               -- Call Business rule to check header and detail account numbers 
               BUSINESS_RULES_PKG.VALIDATE_HDR_DET_ACCT_NBR(IN_HDR_CUST_ACNT_NBR,V_CUST_DEP_DET_rec.CUSTOMER_ACCOUNT_NUMBER);
               TABLE_IU_PKG.CUST_DEP_DET_I_SP(V_CUST_DEP_DET_rec);
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP; 
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUSTOMER_DEPOSIT_DET_UPSERT_SP', SUBSTR(SQLERRM,1,500));
END CUSTOMER_DEPOSIT_DET_UPSERT_SP;

PROCEDURE CUSTOMER_DEPOSIT_UPSERT_SP(
/******************************************************************************
This is a wrapper for the upsert procedure
created : 05/04/2018 sxh487 -- CCN Project Team
******************************************************************************/
    IN_CUST_HEADER_XML  IN CLOB,
    IN_CUST_DETAIL_XML  IN CLOB)
IS
    V_HDR_CUST_ACNT_NBR  CUSTOMER_DEPOSIT_HEADER.CUSTOMER_ACCOUNT_NUMBER%TYPE;
BEGIN
    IF IN_CUST_HEADER_XML IS NOT NULL THEN
        CUSTOMER_DEPOSIT_HDR_UPSERT_SP('CUSTOMER_DEPOSIT_HEADER', IN_CUST_HEADER_XML, V_HDR_CUST_ACNT_NBR);
    END IF;
    IF IN_CUST_DETAIL_XML IS NOT NULL THEN
        CUSTOMER_DEPOSIT_DET_UPSERT_SP('CUSTOMER_DEPOSIT_DETAILS', IN_CUST_DETAIL_XML, V_HDR_CUST_ACNT_NBR);
    END IF;
END CUSTOMER_DEPOSIT_UPSERT_SP;

END CUSTOMER_DEPOSIT_MAINT_PKG;