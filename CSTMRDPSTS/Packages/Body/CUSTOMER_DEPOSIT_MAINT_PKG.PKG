create or replace PACKAGE BODY CUSTOMER_DEPOSIT_MAINT_PKG AS 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

created : 09/27/2017 sxh487 CCN project.....
************************************************************/

FUNCTION  GET_LAST_VALUE_NET_BAL(
/*******************************************************************************
GET_LAST_VALUE_NET_BAL

This procedure is intended to update CUSTOMER_DEPOSIT_TRANSACTION_DTL records
created : 09/05/2018 sxh487 -- ccn coding project....
changed : 02/06/2019 pxa852 CCN Project Team...
          Modified code to replace old table with new table that is created as part of new data model
*******************************************************************************/
    IN_CUSTOMER_ACCOUNT_NUMBER    IN     CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_ACCOUNT_NUMBER%TYPE)
RETURN NUMBER
IS
    V_PREV_BAL     CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_NET_BALANCE%TYPE:=0;
BEGIN
      SELECT NVL(CUSTOMER_NET_BALANCE, 0)
        INTO V_PREV_BAL
        FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL
       WHERE TRAN_TIMESTAMP = (SELECT MAX(TRAN_TIMESTAMP)
                                    FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL
                                   WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUSTOMER_ACCOUNT_NUMBER
                                     AND CLOSED_DATE IS NULL);

    RETURN V_PREV_BAL;
EXCEPTION
    WHEN OTHERS THEN
       RETURN V_PREV_BAL;
END GET_LAST_VALUE_NET_BAL;

PROCEDURE CUST_DEP_REDEMPTION_ORGNLS_UPD(
/*******************************************************************************
MANUAL_RED_DEP_REM_BAL_UPD

This procedure is intended to update the originals of redemption for a manual deposit
created : 01/08/2019 pxa852 CCN Project Team...
changed :
*******************************************************************************/
    IN_MANUAL_DEP_ROW    IN     CUSTOMER_DEPOSIT_TRANSACTION_DTL%ROWTYPE)
IS
    V_REDEMPTION_ROW            CUSTOMER_DEPOSIT_TRANSACTION_DTL%ROWTYPE;
BEGIN
     BEGIN
          SELECT *
            INTO V_REDEMPTION_ROW
            FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL
           WHERE CUSTOMER_ACCOUNT_NUMBER = IN_MANUAL_DEP_ROW.CUSTOMER_ACCOUNT_NUMBER
             AND COST_CENTER_CODE        = IN_MANUAL_DEP_ROW.COST_CENTER_CODE
             AND TRANSACTION_DATE        = IN_MANUAL_DEP_ROW.TRANSACTION_DATE
             AND TERMINAL_NUMBER         = IN_MANUAL_DEP_ROW.TERMINAL_NUMBER
             AND TRANSACTION_NUMBER      = IN_MANUAL_DEP_ROW.TRANSACTION_NUMBER
             AND CLOSED_DATE IS NULL;
     EXCEPTION
         WHEN OTHERS THEN
             V_REDEMPTION_ROW := NULL;
     END;
     IF V_REDEMPTION_ROW.CUSTOMER_ACCOUNT_NUMBER IS NOT NULL AND V_REDEMPTION_ROW.ORGNL_DEPOSIT_TERMINAL_NBR IS NULL THEN
        V_REDEMPTION_ROW.ORGNL_DEPOSIT_TERMINAL_NBR     := IN_MANUAL_DEP_ROW.TERMINAL_NUMBER;
        V_REDEMPTION_ROW.ORGNL_DEPOSIT_TRANSACTION_NBR  := IN_MANUAL_DEP_ROW.TRANSACTION_NUMBER;
        V_REDEMPTION_ROW.ORGNL_DEPOSIT_TRANSACTION_DATE := IN_MANUAL_DEP_ROW.TRANSACTION_DATE;
        TABLE_IU_PKG.CUST_DEPOSIT_TRAN_DTLS_I_SP(V_REDEMPTION_ROW);
     END IF;

EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUST_DEP_RED_ORGNL_UPD', SUBSTR(SQLERRM,1,500));
END CUST_DEP_REDEMPTION_ORGNLS_UPD;

PROCEDURE CUST_DEP_REM_BAL_UPD(
/**********************************************************
This procedure updates the deposit remianing balance.
If a redmeption comes with originals, pass those original values to get the deposit record
and update the deposit remaining balance of that deposit.

Created : 02/13/2019 pxa852 CCN Project Team...
Changed :
**********************************************************/
    IN_ORGNL_TRAN_ROW    IN      CUSTOMER_DEPOSIT_TRANSACTION_DTL%ROWTYPE
)
IS
BEGIN
    UPDATE CUSTOMER_DEPOSIT_TRANSACTION_DTL DTL
       SET DTL.DEPOSIT_REMAINING_BAL = DTL.CSTMR_DPST_SALES_LN_ITM_AMT + IN_ORGNL_TRAN_ROW.CSTMR_DPST_SALES_LN_ITM_AMT
      WHERE DTL.TRANSACTION_NUMBER   = IN_ORGNL_TRAN_ROW.ORGNL_DEPOSIT_TRANSACTION_NBR
        AND DTL.TERMINAL_NUMBER      = IN_ORGNL_TRAN_ROW.ORGNL_DEPOSIT_TERMINAL_NBR
        AND DTL.TRANSACTION_DATE     = IN_ORGNL_TRAN_ROW.ORGNL_DEPOSIT_TRANSACTION_DATE
        AND DTL.TRANSACTION_TYPE     = 'DEPOSIT'
        AND DTL.CLOSED_DATE IS NULL;
EXCEPTION
   WHEN OTHERS THEN
        ERRPKG.INSERT_ERROR_LOG_SP( SQLCODE,
                                    'CUST_DEP_REM_BAL_UPD',
                                    SQLERRM,
                                    '000000',
                                    '000000000',
                                    '000000000');
END CUST_DEP_REM_BAL_UPD;

PROCEDURE ORIG_DEP_REM_BAL_UPD(
/**********************************************************
This function updates the original references for a Redemption
and updates the Deposit with remaining balance
 
Created : 03/26/2018 SXH487
Changed : 11/26/2018 ASP-1150 : Renamed input variable name( TOTAL_SALES to CSTMR_DPST_SALES_LN_ITM_AMT)
        : 02/06/2019 pxa852 CCN Project Team...
          Modified code to replace old table with new table that is created as part of new data model
**********************************************************/
    IN_CSTMR_DPST_SALES_LN_ITM_AMT IN      CUSTOMER_DEPOSIT_TRANSACTION_DTL.CSTMR_DPST_SALES_LN_ITM_AMT%TYPE,
    IN_CUSTOMER_ACCOUNT_NUMBER     IN      CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_ACCOUNT_NUMBER%TYPE,
    IN_TRANSACTION_DATE            IN      CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_DATE%TYPE,
    OUT_TRANSACTION_NUMBER            OUT  CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_NUMBER%TYPE,
    OUT_TERMINAL_NUMBER               OUT  CUSTOMER_DEPOSIT_TRANSACTION_DTL.TERMINAL_NUMBER%TYPE,
    OUT_TRANSACTION_DATE              OUT  CUSTOMER_DEPOSIT_TRANSACTION_DTL.TRANSACTION_DATE%TYPE
)
IS
    CURSOR ALL_DEPS IS
        SELECT a.*, rowid, count(*) over () TOT_DEP_CNT
          FROM CUSTOMER_DEPOSIT_TRANSACTION_DTL a
         WHERE CUSTOMER_ACCOUNT_NUMBER = IN_CUSTOMER_ACCOUNT_NUMBER
           AND TRANSACTION_DATE <= IN_TRANSACTION_DATE
           AND TRANSACTION_TYPE <> 'REDEMPTION'
           AND DEPOSIT_REMAINING_BAL > 0
           AND CLOSED_DATE IS NULL
           ORDER BY TRAN_TIMESTAMP;

    V_CNT                           NUMBER :=0;
    V_DEP_REM_BAL                   CUSTOMER_DEPOSIT_TRANSACTION_DTL.DEPOSIT_REMAINING_BAL%TYPE;
    V_CSTMR_DPST_SALES_LN_ITM_AMT   CUSTOMER_DEPOSIT_TRANSACTION_DTL.CSTMR_DPST_SALES_LN_ITM_AMT%TYPE := -(IN_CSTMR_DPST_SALES_LN_ITM_AMT);
BEGIN  
    FOR each_dep IN ALL_DEPS LOOP
        V_CNT := V_CNT +1;
        OUT_TRANSACTION_NUMBER := each_dep.TRANSACTION_NUMBER;
        OUT_TERMINAL_NUMBER    := each_dep.TERMINAL_NUMBER;
        OUT_TRANSACTION_DATE   := each_dep.TRANSACTION_DATE;
        V_DEP_REM_BAL          := NULL;

        --if the redemption is greater than the balance on the deposit
        --then update the Deposit with -ve bal
        IF V_CSTMR_DPST_SALES_LN_ITM_AMT > each_dep.DEPOSIT_REMAINING_BAL THEN
           --update only the last DEPOSIT with remaining balance       
           IF V_CNT = each_dep.TOT_DEP_CNT THEN
              V_DEP_REM_BAL := each_dep.DEPOSIT_REMAINING_BAL - V_CSTMR_DPST_SALES_LN_ITM_AMT;
           ELSE
              V_DEP_REM_BAL :=0;
           END IF;
           V_CSTMR_DPST_SALES_LN_ITM_AMT   := V_CSTMR_DPST_SALES_LN_ITM_AMT - each_dep.DEPOSIT_REMAINING_BAL;
        ELSE
            V_DEP_REM_BAL := each_dep.DEPOSIT_REMAINING_BAL - V_CSTMR_DPST_SALES_LN_ITM_AMT;
            V_CSTMR_DPST_SALES_LN_ITM_AMT := 0;
        END IF;
        UPDATE CUSTOMER_DEPOSIT_TRANSACTION_DTL
           SET DEPOSIT_REMAINING_BAL = V_DEP_REM_BAL
          WHERE ROWID      = each_dep.rowid;

        IF V_CSTMR_DPST_SALES_LN_ITM_AMT = 0 THEN
            EXIT;
        END IF;
    END LOOP;
END ORIG_DEP_REM_BAL_UPD;

PROCEDURE CUSTOMER_DEPOSIT_DET_UPSERT_SP(
/*******************************************************************************
This procedure takes XML for CUSTOMER_DEPOSIT_TRANSACTION_DTL information
and Inserts/Updates the DB with the information from UI

<?xml version="1.0" encoding="UTF-8"?>
<CUSTOMER_DEPOSIT_UI>
    <CUSTOMER_DEPOSIT_TRANSACTION_DTL>
        <COST_CENTER_CODE>707149</COST_CENTER_CODE>
        <TRANSACTION_DATE>02-07-2019</TRANSACTION_DATE>
        <TERMINAL_NUMBER>14103</TERMINAL_NUMBER>
        <TRANSACTION_NUMBER>92458</TRANSACTION_NUMBER>
        <TRANSACTION_GUID>95EE8A9BA5E30F8AE7116E9D40A8EE47</TRANSACTION_GUID>
        <CUSTOMER_ACCOUNT_NUMBER>320224215</CUSTOMER_ACCOUNT_NUMBER>
        <POS_TRANSACTION_CODE>31</POS_TRANSACTION_CODE>
        <TRAN_TIMESTAMP></TRAN_TIMESTAMP>
        <TRANSACTION_TYPE>MANUAL</TRANSACTION_TYPE>
        <CSTMR_DPST_SALES_LN_ITM_AMT>100</CSTMR_DPST_SALES_LN_ITM_AMT>
        <DEPOSIT_REMAINING_BAL></DEPOSIT_REMAINING_BAL>
        <CLOSED_DATE></CLOSED_DATE>
        <REFERENCE_NUMBER></REFERENCE_NUMBER>
        <CLEARED_REASON></CLEARED_REASON>
        <NOTES></NOTES>
        <RLS_RUN_CYCLE></RLS_RUN_CYCLE>
       <LOAD_DATE></LOAD_DATE>
       <ADJUSTED_DATE></ADJUSTED_DATE>
       <GL_DIVISION></GL_DIVISION>
    </CUSTOMER_DEPOSIT_TRANSACTION_DTL>
</CUSTOMER_DEPOSIT_UI>
created : 05/04/2018 sxh487 -- CCN Project Team
Modified: 02/06/2019 pxa852 CCN Project Team...
          Modified code to replace old table with new table that is created as part of new data model
          We will continue to track the deposit remaining balance and associate a redemption with an original deposit in our daily load.
          For any Correction
              Manual Redemption - we will tie back the original deposit transaction number to this manual redemption
              Manual Deposit - we will make the deposit remaining balance as 0 and we will tie-back the original redemption to this Manual deposit if the originals are null
                              (so that this should not be tied back to the next deposit coming in later)
******************************************************************************/
    IN_TABLE_NAME           IN     VARCHAR2,
    IN_CUST_DETAIL_XML      IN     CLOB,
    IN_HDR_CUST_ACNT_NBR    IN     VARCHAR)
IS
    V_XML                       SYS.XMLTYPE := XMLTYPE(IN_CUST_DETAIL_XML);
    V_COUNT                     NUMBER := 1;
    V_CUSTOMER_ACCOUNT_NUMBER   CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_ACCOUNT_NUMBER%TYPE;
    V_NET_BAL                   CUSTOMER_DEPOSIT_TRANSACTION_DTL.CUSTOMER_NET_BALANCE%TYPE;
    V_CUST_DEP_DET_frag         CLOB;
    V_CUST_DEP_DET_rec          CUSTOMER_DEPOSIT_TRANSACTION_DTL%ROWTYPE;
BEGIN
    --it come here only if a transaction is manual deposit/manual redemption
    IF (V_XML.EXISTSNODE('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME ||'[' || V_COUNT ||']'||'/CUSTOMER_ACCOUNT_NUMBER/text()') = 1) THEN
        V_CUSTOMER_ACCOUNT_NUMBER := V_XML.EXTRACT('/CUSTOMER_DEPOSIT_UI/'|| IN_TABLE_NAME ||'[' || V_COUNT ||']'||'/CUSTOMER_ACCOUNT_NUMBER/text()').GETSTRINGVAL();
    END IF;
    -- Get the Last Net Balance 
    V_NET_BAL := GET_LAST_VALUE_NET_BAL(V_CUSTOMER_ACCOUNT_NUMBER);
    IF IN_CUST_DETAIL_XML IS NOT NULL THEN
        WHILE V_XML.EXISTSNODE('//'|| 'CUSTOMER_DEPOSIT_TRANSACTION_DTL'||'[' ||V_COUNT|| ']') = 1 LOOP
            V_CUST_DEP_DET_frag := V_XML.EXTRACT('//'||'CUSTOMER_DEPOSIT_TRANSACTION_DTL' ||'[' || V_COUNT || ']').GETCLOBVAL();
            IF V_CUST_DEP_DET_frag IS NOT NULL THEN 
               TABLE_IU_PKG.CUST_DEP_DETAILS_ROWTYPE_SP('CUSTOMER_DEPOSIT_TRANSACTION_DTL',
                                                         V_CUST_DEP_DET_frag,
                                                         V_CUST_DEP_DET_rec);
               V_NET_BAL := V_NET_BAL + V_CUST_DEP_DET_rec.CSTMR_DPST_SALES_LN_ITM_AMT;
               V_CUST_DEP_DET_rec.CUSTOMER_NET_BALANCE := V_NET_BAL;
               --hard coding transaction type to 'MANUAL' if user enter anything by mistake
               V_CUST_DEP_DET_rec.TRANSACTION_TYPE     := 'MANUAL';
               IF V_CUST_DEP_DET_rec.CSTMR_DPST_SALES_LN_ITM_AMT > 0 THEN
                  --deposit remaining balace is always zero for a manual deposit
                  V_CUST_DEP_DET_rec.DEPOSIT_REMAINING_BAL := 0;
                  --This procedure will tie-back the original redemption to this Manual deposit if the originals are null
                  CUST_DEP_REDEMPTION_ORGNLS_UPD (V_CUST_DEP_DET_rec);
               ELSE
                  --for a manual redemption, passing terminal number, transaction number and transaction date to originals
                  --Deposit Remaining balance will always be null for a manual redemption
                  V_CUST_DEP_DET_rec.ORGNL_DEPOSIT_TERMINAL_NBR     :=  V_CUST_DEP_DET_rec.TERMINAL_NUMBER;
                  V_CUST_DEP_DET_rec.ORGNL_DEPOSIT_TRANSACTION_NBR  :=  V_CUST_DEP_DET_rec.TRANSACTION_NUMBER;
                  V_CUST_DEP_DET_rec.ORGNL_DEPOSIT_TRANSACTION_DATE :=  V_CUST_DEP_DET_rec.TRANSACTION_DATE;
               END IF;
               -- Call Business rule to check header and detail account numbers 
               BUSINESS_RULES_PKG.VALIDATE_HDR_DET_ACCT_NBR(IN_HDR_CUST_ACNT_NBR,V_CUST_DEP_DET_rec.CUSTOMER_ACCOUNT_NUMBER);
               TABLE_IU_PKG.CUST_DEP_DET_I_SP(V_CUST_DEP_DET_rec);
            END IF;
            V_COUNT := V_COUNT + 1;
        END LOOP; 
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ERRPKG.RAISE_ERR(SQLCODE, 'CUSTOMER_DEPOSIT_DET_UPSERT_SP', SUBSTR(SQLERRM,1,500));
END CUSTOMER_DEPOSIT_DET_UPSERT_SP;

PROCEDURE CUSTOMER_DEPOSIT_UPSERT_SP(
/******************************************************************************
This is a wrapper for the upsert procedure
created : 05/04/2018 sxh487 -- CCN Project Team
Modified: 02/07/2019 pxa852 CCN Project Team...
          Modified code to remove header upsert process
******************************************************************************/
    IN_CUST_DETAIL_XML  IN CLOB)
IS
    V_HDR_CUST_ACNT_NBR  CUSTOMER_DEPOSIT_HEADER.CUSTOMER_ACCOUNT_NUMBER%TYPE;
BEGIN
    IF IN_CUST_DETAIL_XML IS NOT NULL THEN
        CUSTOMER_DEPOSIT_DET_UPSERT_SP('CUSTOMER_DEPOSIT_TRANSACTION_DTL', IN_CUST_DETAIL_XML, V_HDR_CUST_ACNT_NBR);
    END IF;
END CUSTOMER_DEPOSIT_UPSERT_SP;

END CUSTOMER_DEPOSIT_MAINT_PKG;