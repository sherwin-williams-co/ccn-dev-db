create or replace PACKAGE body ERRPKG
/*********************************************************** 
This package will hold all procedures/functions used to process business
and system errors throughout the entire CCN applications

created : 09/27/2017 sxh487 CCN Project....
changed :

************************************************************/
IS
PROCEDURE raise_err (
/*********************************************************** 
This procedure will raise errors to the calling procedure/application
depending on the error number input data. 

created : 09/27/2017 sxh487 CCN Project....
changed :

************************************************************/
err_in     IN INTEGER, 
err_proc_in IN VARCHAR2,
err_text_in IN VARCHAR2 := NULL) 
IS
BEGIN
    --this is just an example of how procedure can be used
    IF err_in BETWEEN -20998 AND -20000 THEN
        RAISE_APPLICATION_ERROR (err_in, errtext(err_in, err_proc_in, err_text_in));
    ELSIF err_in IN (100, -1403) THEN
        RAISE NO_DATA_FOUND;
    ELSIF err_in = -20999 THEN
        RAISE_APPLICATION_ERROR (err_in, errtext(err_in, err_proc_in, err_text_in));
    ELSE
        EXECUTE IMMEDIATE('DECLARE myexc EXCEPTION; ' ||
                          ' PRAGMA EXCEPTION_INIT (myexc, ' || TO_CHAR (err_in) || ');' ||
                          'BEGIN RAISE myexc; END;');
    END IF;
END;

FUNCTION errtext(
/*********************************************************** 
This function will determine correct message to be returned
depending on the error number input data. 

created : 09/27/2017 sxh487 CCN Project....
changed :

************************************************************/
err_in      IN     INTEGER,
err_proc_in IN     VARCHAR2,
err_text_in IN     VARCHAR2 := NULL) RETURN VARCHAR2 is
   v_return_str VARCHAR2(32000) := 'no message';
BEGIN
    v_return_str := err_proc_in || ' ' ||err_text_in; 
    IF err_in = -20000 THEN
        v_return_str := ' IN PROCEDURE ' || err_proc_in || ' ' || err_text_in ||
                        ' This error is not in the scope of defined numeric error';
    END IF; 
    IF err_in = -20999 THEN
        v_return_str := ' IN PROCEDURE ' || err_proc_in || ' ' || err_text_in ||
                        ' Error has occured which is undefined in error handling package';
    END IF;
    RETURN(v_return_str);
 END errtext;

PROCEDURE INSERT_ERROR_LOG_SP  (
/*******************************************************************************
This Procedure logs Processing Errors to the ERROR_LOG Table
  
created : 09/27/2017 sxh487 CCN Project....
changed :
*******************************************************************************/
    in_code                      IN   VARCHAR2
   ,in_proc                      IN   VARCHAR2
   ,in_errm                      IN   VARCHAR2  
   ,in_cost_center_code               IN   VARCHAR2
   ,in_customer_account_number   IN   VARCHAR2
   ,in_table_name                IN     VARCHAR2
   )
IS
   PRAGMA autonomous_transaction;
BEGIN
    INSERT INTO ERROR_LOG VALUES(ERROR_LOG_SEQ.NEXTVAL,
                                 SUBSTR(in_customer_account_number, 1, 16),
                                 SYSDATE,
                                 SUBSTR(in_proc, 1, 200),
                                 SUBSTR(in_errm, 1, 4000),
                                 NULL,
                                 in_code,
                                 SUBSTR(in_cost_center_code, 1, 6),
                                 SUBSTR(in_table_name, 1, 30));
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(' INSERT_ERROR_LOG_SP Failed '|| SUBSTR(sqlerrm, 1, 200));
END INSERT_ERROR_LOG_SP;

PROCEDURE STORE_WARNINGS(
/*******************************************************************************
  This Procedure logs Processing Warnings into the Memory Table
  
Created : 09/27/2017 sxh487 CCN Project....
Changed :
*******************************************************************************/
   err_Code IN VARCHAR2,
   err_Msg  IN VARCHAR2)
IS
   V_INDEX NUMBER;
BEGIN
   --Below two statements will store the passed inputs into the memory ERROR_WARNINGS_TABLE
   --this should be stored on top of the 
   V_INDEX := NVL(ERROR_WARNINGS_TABLE.LAST,0)+1;
   ERRPKG.ERROR_WARNINGS_TABLE(V_INDEX).ERR_CODE := err_Code;
   ERRPKG.ERROR_WARNINGS_TABLE(V_INDEX).ERR_MSG := err_Msg;
EXCEPTION
   WHEN OTHERS THEN
      dbms_output.put_line(' STORE_WARNINGS Failed '|| substr(sqlerrm, 1, 200));
END STORE_WARNINGS;

PROCEDURE RAISE_WARNINGS
/*******************************************************************************
  This Procedure raises first of the stored Warnings from the Memory Table
  
Created : 09/27/2017 sxh487 CCN Project....
Changed :
*******************************************************************************/
IS
   v_err_Code VARCHAR2(100);
   v_err_Msg  VARCHAR2(500);
BEGIN
   FOR i IN 1..ERROR_WARNINGS_TABLE.COUNT LOOP
      v_err_Code := ERROR_WARNINGS_TABLE(i).ERR_CODE;
      v_err_Msg  := ERROR_WARNINGS_TABLE(i).ERR_MSG;
      --clear off all the warnings for the next process to use it
      ERROR_WARNINGS_TABLE.DELETE;
      --This explicit commit is to make sure all the DML's done so far gets committed to the database
      COMMIT;
      --raise the first of the stored warning message
      errpkg.raise_err(v_err_Code, v_err_Msg);
      EXIT;
   END LOOP;
--Please NOTE that exception is not needed as we need to throw it to the calling procedure as it is
END RAISE_WARNINGS;

END ERRPKG;