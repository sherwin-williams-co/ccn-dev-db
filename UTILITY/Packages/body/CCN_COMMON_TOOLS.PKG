create or replace PACKAGE BODY CCN_COMMON_TOOLS AS 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

-	DATE_BLANK(in_date)
created : 08/24/2010 kdp 
revised : 05/30/2013 mdh EXPIRE_DATA_SP changes.
************************************************************/

  g_key     RAW(32767)  := UTL_RAW.cast_to_raw('12345678');
  g_pad_chr VARCHAR2(1) := '~';

FUNCTION COMPUTE_EXPIRATION_DATE
/******************************************************************************
	COMPUTE_EXPIRATOIN_DATE (in_date)
  
		This function will be used to read in a date and subtract one day
    from that date (effective) and return a new date (expiration) which
    is one day prior.
    
    The an input date must be passed.  
    This function will return a new (expiration) date. 

created : 12/04/2012 mdh Cost Center Nucleus project.....
revised:
******************************************************************************/
  ( in_date  IN  date 
   ) RETURN date 
   IS 

v_return_date date ;
v_curr_date date := sysdate;
v_code number;
v_errm varchar(500);

BEGIN
 	IF in_date IS NOT NULL THEN
    	v_return_date := in_date - 1; -- input date minus 1 day
	ELSE
		v_return_date := v_curr_date - 1;  -- default date
	END IF; 
	RETURN(v_return_date);
   
END COMPUTE_EXPIRATION_DATE;

FUNCTION DATE_BLANK
/**********************************************************
	DATE_BLANK(in_date)
		blank Date function to fill in default date to an oracle NULL for insert into tables
		this is created since oracle cannot handle blank strings being converted to 
		date fields

created : 08/24/2010 kdp Payroll reporting project.....
**********************************************************/
    (in_date IN varchar2)
    RETURN varchar2
IS 

v_return_date VARCHAR2(12);

BEGIN
	IF ascii(in_date) = '32' THEN
    	v_return_date := ''; -- default date
	ELSE
		v_return_date := in_date;
	END IF; 
	
	RETURN(v_return_date);
   
END DATE_BLANK;

FUNCTION ELIMINATE_SPECIAL_CHRCTRS(
/**********************************************************
This function will replace special characters from input text


parameters:

IO_TEXT_STRING  IN OUT

created : 08/08/2013 CCN Project
**********************************************************/
IO_TEXT_STRING    IN    VARCHAR2) RETURN VARCHAR2
IS
   V_TEXT_STRING VARCHAR2(32000) := IO_TEXT_STRING;
BEGIN
   --Replaces &lt; with <
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&lt;','<');
   --Replaces &gt; with >
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&gt;','>');
   --Replaces &amp; with &
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&amp;','&');
   --Replaces &quot; with "
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&quot;','"');
   --Replaces &apos; with '
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&apos;','''');
   RETURN V_TEXT_STRING;
END ELIMINATE_SPECIAL_CHRCTRS;

FUNCTION IS_AUTHORIZED_USER(
/**********************************************************
This function will authorize the user based on SECURITY_MATRIX table


parameters:

IN  IN_USER_ID
IN  IN_APP_CODE
OUT  OUT_REF_CURSOR

created : 09/04/2013 CCN Project
modified: 08/27/2014 jxc517 CCN Project
**********************************************************/
IN_USER_ID      IN     VARCHAR2,
IN_APP_CODE     IN     VARCHAR2,
OUT_REF_CURSOR     OUT REF_CURSOR) RETURN BOOLEAN
IS
   V_USER_ID   SECURITY_MATRIX.USER_ID%TYPE;
   V_ROLE_CODE ROLE_DETAILS.ROLE_CODE%TYPE;
BEGIN
   SELECT USER_ID,
          ROLE_CODE
     INTO V_USER_ID,
          V_ROLE_CODE
     FROM SECURITY_MATRIX SM
    WHERE UPPER(USER_ID)   = UPPER(IN_USER_ID)
      AND UPPER(ROLE_CODE) LIKE IN_APP_CODE||'%' --= UPPER(IN_ROLE_CODE)
      AND EXISTS (SELECT 1
                    FROM ROLE_DETAILS
                   WHERE ROLE_CODE = SM.ROLE_CODE
                     --AND (ADMIN_FLAG = 'Y' OR INSERT_FLAG = 'Y')
                     );

   IF V_USER_ID IS NOT NULL THEN
      OPEN OUT_REF_CURSOR FOR
          SELECT ROLE_CODE,
                 ROLE_DESCRIPTION,
                 ADMIN_FLAG,
                 INSERT_FLAG,
                 UPDATE_FLAG,
                 SELECT_FLAG,
                 EXTRACT(USER_RULES,'/USER_RULES').getClobVal() USER_RULES,
                 EXTRACT(USER_RULES_DESCRIPTION,'/USER_RULES_DESCRIPTION').getClobVal() USER_RULES_DESCRIPTION
            FROM ROLE_DETAILS
           WHERE ROLE_CODE = V_ROLE_CODE;
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to return false if no records found
      RETURN FALSE;
END IS_AUTHORIZED_USER;

FUNCTION BUILD_TAG(
/******************************************************************************
BUILD_TAG

This function will build the tag based on passed input parameters

******************************************************************************/
                      IN_VALUE     IN VARCHAR2,
                      IN_TAG_NAME  IN VARCHAR2,
                      IN_DATE_FLAG IN VARCHAR2 DEFAULT 'N')
   RETURN VARCHAR2 IS
BEGIN
      IF IN_VALUE IS NULL THEN
         RETURN '<' || IN_TAG_NAME || '/>';
      END IF;
      IF IN_DATE_FLAG = 'N' THEN
         RETURN '<' || IN_TAG_NAME || '>' || TRIM(IN_VALUE) || '</' || IN_TAG_NAME || '>';
      ELSE
         RETURN '<' || IN_TAG_NAME || '>' || TO_CHAR(TO_DATE(TRIM(IN_VALUE),'RRRRMMDD'),'MM-DD-RRRR') || '</' || IN_TAG_NAME || '>';
      END IF;
END BUILD_TAG;

FUNCTION CONVERT_SPECIAL_CHRCTRS(
/**********************************************************
This function will build special characters from input text

parameters:

IO_TEXT_STRING  IN

created : 03/04/2014 CCN Project
**********************************************************/
IO_TEXT_STRING    IN    VARCHAR2) RETURN VARCHAR2
IS
   V_TEXT_STRING VARCHAR2(32000) := IO_TEXT_STRING;
BEGIN
   --Replaces &lt; from <
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'<','&lt;');
   --Replaces &gt; from >
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'>','&gt;');
   --Replaces &amp; from &
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&','&amp;');
   --Replaces &quot; from "
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'"','&quot;');
   --Replaces &apos; from '
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'''','&apos;');
   RETURN V_TEXT_STRING;
END CONVERT_SPECIAL_CHRCTRS;

FUNCTION EXECUTE_UNIX_COMMAND(
/**********************************************************
This function will build special characters from input text

parameters:

IN_UNIX_COMMAND  IN - Command to be executed

created : 03/13/2014 CCN Project
**********************************************************/
IN_UNIX_COMMAND VARCHAR2,
IN_DIRECTORY    VARCHAR2 DEFAULT 'CCN_DATAFILES') RETURN BOOLEAN
IS
   output_file 		      UTL_FILE.FILE_TYPE;
   filename  	          VARCHAR2(50) := 'cmd_start.sh';
   v_out_clob           CLOB;
BEGIN
    IF DBMS_LOB.FILEEXISTS(BFILENAME(IN_DIRECTORY, filename)) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('PREVIOUS COMMAND STILL EXECUTING. PLEASE TRY AGAIN AFTER SOME TIME');
    ELSE
        v_out_clob := NVL(IN_UNIX_COMMAND,'ls -ltr');
        output_file := UTL_FILE.FOPEN (IN_DIRECTORY, filename, 'w', 32767);
        UTL_FILE.PUT_LINE(output_file, v_out_clob, TRUE);
        UTL_FILE.FCLOSE(output_file);
    END IF;
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END EXECUTE_UNIX_COMMAND;

FUNCTION convert_to_clob(
/**********************************************************
This function will convert blob to clob

parameters:

IN_BLOB  IN - BLOB that needs to be converted into CLOB

created : 03/28/2014 CCN Project
**********************************************************/
IN_BLOB IN BLOB) RETURN CLOB IS
   l_clob         CLOB;
   l_dest_offset  NUMBER := 1;
   l_src_offset   NUMBER := 1;
   l_lang_context NUMBER := dbms_lob.default_lang_ctx;
   l_warning      NUMBER;
BEGIN
   dbms_lob.createtemporary(l_clob, TRUE);
   dbms_lob.converttoclob(dest_lob     => l_clob,
                          src_blob     => IN_BLOB,
                          amount       => dbms_lob.lobmaxsize,
                          dest_offset  => l_dest_offset,
                          src_offset   => l_src_offset,
                          blob_csid    => nls_charset_id('WE8ISO8859P1'), --('AL32UTF8'),
                          lang_context => l_lang_context,
                          warning      => l_warning);
   RETURN REPLACE(REPLACE(l_clob,CHR(13),''),CHR(12),'');
END convert_to_clob;

FUNCTION convert_to_blob(
/**********************************************************
This function will convert blob to clob

parameters:

IN_CLOB  IN - CLOB that needs to be converted into BLOB

created : 03/28/2014 CCN Project
**********************************************************/
IN_CLOB IN CLOB) RETURN BLOB IS
   l_blob         BLOB;
   l_dest_offset  NUMBER := 1;
   l_src_offset   NUMBER := 1;
   l_lang_context NUMBER := dbms_lob.default_lang_ctx;
   l_warning      NUMBER;
BEGIN
   dbms_lob.createtemporary(l_blob, TRUE);
   dbms_lob.converttoblob(dest_lob     => l_blob,
                          src_clob     => IN_CLOB,
                          amount       => dbms_lob.lobmaxsize,
                          dest_offset  => l_dest_offset,
                          src_offset   => l_src_offset,
                          blob_csid    => nls_charset_id('WE8ISO8859P1'), --('AL32UTF8'),
                          lang_context => l_lang_context,
                          warning      => l_warning);
   RETURN l_blob;
END convert_to_blob;

FUNCTION DecryptJava(
/**********************************************************
This function will decrypt the input value based on the key passed

parameters:

p_text  IN OUT - VARCHAR2 that needs to be encrypted

created : 07/30/2014 CCN Project
**********************************************************/

secKey varchar2, input varchar2)
return string as language java
name 'EncryptJavaSP.callDecrypt(java.lang.String, java.lang.String) return 
java.lang.String';

  FUNCTION decrypt (
/**********************************************************
This function will decrypt the input value

parameters:

p_text  IN - RAW that needs to be decrypted

created : 07/30/2014 CCN Project
**********************************************************/
 p_raw  IN  RAW) RETURN VARCHAR2 IS
    l_decrypted  VARCHAR2(32767);
  BEGIN
    DBMS_OBFUSCATION_TOOLKIT.desdecrypt(input => p_raw,
                                        key   => g_key,
                                        decrypted_data => l_decrypted);

    RETURN RTrim(UTL_RAW.cast_to_varchar2(l_decrypted), g_pad_chr);
  END decrypt;

FUNCTION DecryptSQL (
/**********************************************************
This function will decrypt the input value

parameters:

pVal  IN - value that needs to be decrypted

created : 07/30/2014 CCN Project
**********************************************************/
pVal         in varchar2) RETURN VARCHAR2 AS
vDeryptKey VARCHAR2(250);
BEGIN
  
   vDeryptKey := decrypt('66E9B20AF90BB1A82878D71FC9552D4ACE8F46C6C01ADD46B8FF25C6A6A0A754556B0B5CEE6662FFAFE81D0C18BA44B74C3F1B0AD2247913E5BB677581A0F0CA');
   
   RETURN decryptJava(vDeryptKey, pVal);
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END DecryptSQL;

FUNCTION VALIDATE_DATA_BEFORE_LOAD(
/*****************************************************************************
	VALIDATE_DATA_BEFORE_LOAD

	This function will validate if the value is some default value in idms
  which should go as NULL in database.  

created : 04/29/2013 jxc517 CCN Project....
changed :
*****************************************************************************/
    IN_VALUE     IN    VARCHAR2) RETURN VARCHAR2
IS
BEGIN
    --If IN_VALUE contains all 0's then return NULL else return theinput value
    IF TO_NUMBER(IN_VALUE) = 0 THEN
        RETURN NULL;
    ELSE
        RETURN IN_VALUE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN IN_VALUE;
END VALIDATE_DATA_BEFORE_LOAD;

FUNCTION RETURN_NUMBER(
/*****************************************************************************
	RETURN_NUMBER

	This function will return the number based on precision and scale passed

created : 04/29/2013 jxc517 CCN Project....
changed :
*****************************************************************************/
    IN_VALUE     IN    VARCHAR2,
    IN_PRECISION IN    NUMBER,
    IN_SCALE     IN    NUMBER) RETURN NUMBER
IS
    V_WHOLE_NUM_SIZE NUMBER := IN_PRECISION - IN_SCALE;
BEGIN
    --Example: Column defined as NUMBER(7,2) has precision as 7 and Sclae as 2
    --Data we get from file is like 0023499 which is equivalent to 234.99
    --We need to extract (precision-scale) # of characters append it with a period(.) followed by scale # of characters
    RETURN TO_NUMBER(SUBSTR(IN_VALUE,1,V_WHOLE_NUM_SIZE)||'.'||SUBSTR(IN_VALUE,V_WHOLE_NUM_SIZE,IN_SCALE));
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END RETURN_NUMBER;

FUNCTION GET_DATE_VALUE(
/*****************************************************************************
	VALIDATE_DATA_BEFORE_LOAD

	This function will get the date value for the input passed.  

created : 06/11/2014 jxc517 CCN Project....
changed :
*****************************************************************************/
    IN_VALUE     IN    VARCHAR2,
    IN_FORMAT    IN    VARCHAR2) RETURN DATE
IS
BEGIN
    RETURN TO_DATE(SUBSTR(VALIDATE_DATA_BEFORE_LOAD(IN_VALUE),2),IN_FORMAT);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_DATE_VALUE;

END CCN_COMMON_TOOLS;

