create or replace PACKAGE BODY             CCN_COMMON_TOOLS AS 
/*********************************************************** 
This package BODY is intended to hold reuseable objects that are 
available to be used by the entire schema

-    DATE_BLANK(in_date)
created : 08/24/2010 kdp 
revised : 05/30/2013 mdh EXPIRE_DATA_SP changes.
************************************************************/

  g_key     RAW(32767)  := UTL_RAW.cast_to_raw('12345678');
  g_pad_chr VARCHAR2(1) := '~';

FUNCTION COMPUTE_EXPIRATION_DATE
/******************************************************************************
    COMPUTE_EXPIRATOIN_DATE (in_date)

        This function will be used to read in a date and subtract one day
    from that date (effective) and return a new date (expiration) which
    is one day prior.

    The an input date must be passed. 
    This function will return a new (expiration) date. 

created : 12/04/2012 mdh Cost Center Nucleus project.....
reviseds:   
******************************************************************************/
  ( in_date  IN  date 
   ) RETURN date 
   IS 

v_return_date date ;
v_curr_date date := sysdate;
v_code number;
v_errm varchar(500);

BEGIN
     IF in_date IS NOT NULL THEN
        v_return_date := in_date - 1; -- input date minus 1 day
    ELSE
        v_return_date := v_curr_date - 1;  -- default date
    END IF; 
    RETURN(v_return_date);

END COMPUTE_EXPIRATION_DATE;

FUNCTION DATE_BLANK
/**********************************************************
    DATE_BLANK(in_date)
        blank Date function to fill in default date to an oracle NULL for insert into tables
        this is created since oracle cannot handle blank strings being converted to 
        date fields

created : 08/24/2010 kdp Payroll reporting project.....
**********************************************************/
    (in_date IN varchar2)
    RETURN varchar2
IS 

v_return_date VARCHAR2(12);

BEGIN
    IF ascii(in_date) = '32' THEN
        v_return_date := ''; -- default date
    ELSE
        v_return_date := in_date;
    END IF; 

    RETURN(v_return_date);

END DATE_BLANK;

FUNCTION ELIMINATE_SPECIAL_CHRCTRS(
/**********************************************************
This function will replace special characters from input text


parameters:

IO_TEXT_STRING  IN OUT

created : 08/08/2013 CCN Project
modified: 
**********************************************************/
IO_TEXT_STRING    IN    VARCHAR2) RETURN VARCHAR2
IS
   V_TEXT_STRING VARCHAR2(32000) := IO_TEXT_STRING;
BEGIN
   --Replaces &lt; with <
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&lt;','<');
   --Replaces &gt; with >
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&gt;','>');
   --Replaces &amp; with &
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&amp;','&');
   --Replaces &quot; with "
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&quot;','"');
   --Replaces &apos; with '
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&apos;','''');
   RETURN V_TEXT_STRING;
END ELIMINATE_SPECIAL_CHRCTRS;

FUNCTION IS_AUTHORIZED_USER(
/**********************************************************
This function will authorize the user based on SECURITY_MATRIX table


parameters:

IN  IN_USER_ID
IN  IN_APP_CODE
OUT  OUT_REF_CURSOR

created : 09/04/2013 CCN Project
modified: 08/27/2014 jxc517 CCN Project
        : 02/17/2016 nxk927 CCN Project
          passing all the role code and access if the user has more than 1 role. 
          before it would only get the CCN role code details
**********************************************************/
IN_USER_ID      IN     VARCHAR2,
IN_APP_CODE     IN     VARCHAR2,
OUT_REF_CURSOR     OUT REF_CURSOR) RETURN BOOLEAN
IS
   V_USER_ID   SECURITY_MATRIX.USER_ID%TYPE;
   V_ROLE_CODE ROLE_DETAILS.ROLE_CODE%TYPE;
BEGIN
   SELECT USER_ID,
          ROLE_CODE
     INTO V_USER_ID,
          V_ROLE_CODE
     FROM SECURITY_MATRIX SM
    WHERE UPPER(USER_ID)   = UPPER(IN_USER_ID)
      AND UPPER(ROLE_CODE) LIKE IN_APP_CODE||'%' --= UPPER(IN_ROLE_CODE)
      AND EXISTS (SELECT 1
                    FROM ROLE_DETAILS
                   WHERE ROLE_CODE = SM.ROLE_CODE)
      AND ROWNUM < 2;

   IF V_USER_ID IS NOT NULL THEN
      OPEN OUT_REF_CURSOR FOR
          SELECT ROLE_CODE,
                 ROLE_DESCRIPTION,
                 ADMIN_FLAG,
                 INSERT_FLAG,
                 UPDATE_FLAG,
                 SELECT_FLAG,
                 EXTRACT(USER_RULES,'/USER_RULES').getClobVal() USER_RULES,
                 EXTRACT(USER_RULES_DESCRIPTION,'/USER_RULES_DESCRIPTION').getClobVal() USER_RULES_DESCRIPTION
            FROM ROLE_DETAILS
           WHERE ROLE_CODE IN (SELECT ROLE_CODE
                                 FROM SECURITY_MATRIX SM
                                WHERE UPPER(USER_ID)   = UPPER(IN_USER_ID)
                                  --AND UPPER(ROLE_CODE) LIKE IN_APP_CODE||'%'
                                  AND EXISTS (SELECT 1
                                                FROM ROLE_DETAILS
                                               WHERE ROLE_CODE = SM.ROLE_CODE));
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      --This exception is to return false if no records found
      RETURN FALSE;
END IS_AUTHORIZED_USER;

FUNCTION BUILD_TAG(
/******************************************************************************
BUILD_TAG

This function will build the tag based on passed input parameters

******************************************************************************/
                      IN_VALUE     IN VARCHAR2,
                      IN_TAG_NAME  IN VARCHAR2,
                      IN_DATE_FLAG IN VARCHAR2 DEFAULT 'N')
   RETURN VARCHAR2 IS
BEGIN
      IF IN_VALUE IS NULL THEN
         RETURN '<' || IN_TAG_NAME || '/>';
      END IF;
      IF IN_DATE_FLAG = 'N' THEN
         RETURN '<' || IN_TAG_NAME || '>' || TRIM(IN_VALUE) || '</' || IN_TAG_NAME || '>';
      ELSE
         RETURN '<' || IN_TAG_NAME || '>' || TO_CHAR(TO_DATE(TRIM(IN_VALUE),'RRRRMMDD'),'MM-DD-RRRR') || '</' || IN_TAG_NAME || '>';
      END IF;
END BUILD_TAG;

FUNCTION CONVERT_SPECIAL_CHRCTRS(
/**********************************************************
This function will build special characters from input text

parameters:

IO_TEXT_STRING  IN

created : 03/04/2014 CCN Project
changed : 03/02/2017 jxc517/rxv940 CCN Project Team....
          order of the replace matters as we do not want to replace "&" multiple times
**********************************************************/
IO_TEXT_STRING    IN    VARCHAR2) RETURN VARCHAR2
IS
   V_TEXT_STRING VARCHAR2(32000) := IO_TEXT_STRING;
BEGIN
   --Replaces &amp; from &
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'&','&amp;');
   --Replaces &lt; from <
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'<','&lt;');
   --Replaces &gt; from >
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'>','&gt;');
   --Replaces &quot; from "
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'"','&quot;');
   --Replaces &apos; from '
   V_TEXT_STRING := REPLACE(V_TEXT_STRING,'''','&apos;');
   RETURN V_TEXT_STRING;
END CONVERT_SPECIAL_CHRCTRS;

FUNCTION EXECUTE_UNIX_COMMAND(
/**********************************************************
This function will build special characters from input text

parameters:

IN_UNIX_COMMAND  IN - Command to be executed

created : 03/13/2014 CCN Project
modified: 04/15/2016 CCN Project Team....
          Fixed the issue file already present scenario where this 
          function returns NULL instead of FALSE and impacts calling method
**********************************************************/
IN_UNIX_COMMAND VARCHAR2,
IN_DIRECTORY    VARCHAR2 DEFAULT 'CCN_DATAFILES') RETURN BOOLEAN
IS
   output_file          UTL_FILE.FILE_TYPE;
   filename             VARCHAR2(50) := 'cmd_start.sh';
   v_out_clob           CLOB;
   v_return_value       BOOLEAN := FALSE;
BEGIN
    IF DBMS_LOB.FILEEXISTS(BFILENAME(IN_DIRECTORY, filename)) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('PREVIOUS COMMAND STILL EXECUTING. PLEASE TRY AGAIN AFTER SOME TIME');
    ELSE
        v_out_clob := NVL(IN_UNIX_COMMAND,'ls -ltr');
        output_file := UTL_FILE.FOPEN (IN_DIRECTORY, filename, 'w', 32767);
        UTL_FILE.PUT_LINE(output_file, v_out_clob, TRUE);
        UTL_FILE.FCLOSE(output_file);
        v_return_value := TRUE;
    END IF;
    RETURN v_return_value;
EXCEPTION
    WHEN OTHERS THEN
        RETURN v_return_value;
END EXECUTE_UNIX_COMMAND;

FUNCTION convert_to_clob(
/**********************************************************
This function will convert blob to clob

parameters:

IN_BLOB  IN - BLOB that needs to be converted into CLOB

created : 03/28/2014 CCN Project
**********************************************************/
IN_BLOB IN BLOB) RETURN CLOB IS
   l_clob         CLOB;
   l_dest_offset  NUMBER := 1;
   l_src_offset   NUMBER := 1;
   l_lang_context NUMBER := dbms_lob.default_lang_ctx;
   l_warning      NUMBER;
BEGIN
   dbms_lob.createtemporary(l_clob, TRUE);
   dbms_lob.converttoclob(dest_lob     => l_clob,
                          src_blob     => IN_BLOB,
                          amount       => dbms_lob.lobmaxsize,
                          dest_offset  => l_dest_offset,
                          src_offset   => l_src_offset,
                          blob_csid    => nls_charset_id('WE8ISO8859P1'), --('AL32UTF8'),
                          lang_context => l_lang_context,
                          warning      => l_warning);
   RETURN REPLACE(REPLACE(l_clob,CHR(13),''),CHR(12),'');
END convert_to_clob;

FUNCTION convert_to_blob(
/**********************************************************
This function will convert blob to clob

parameters:

IN_CLOB  IN - CLOB that needs to be converted into BLOB

created : 03/28/2014 CCN Project
**********************************************************/
IN_CLOB IN CLOB) RETURN BLOB IS
   l_blob         BLOB;
   l_dest_offset  NUMBER := 1;
   l_src_offset   NUMBER := 1;
   l_lang_context NUMBER := dbms_lob.default_lang_ctx;
   l_warning      NUMBER;
BEGIN
   dbms_lob.createtemporary(l_blob, TRUE);
   dbms_lob.converttoblob(dest_lob     => l_blob,
                          src_clob     => IN_CLOB,
                          amount       => dbms_lob.lobmaxsize,
                          dest_offset  => l_dest_offset,
                          src_offset   => l_src_offset,
                          blob_csid    => nls_charset_id('WE8ISO8859P1'), --('AL32UTF8'),
                          lang_context => l_lang_context,
                          warning      => l_warning);
   RETURN l_blob;
END convert_to_blob;

FUNCTION DecryptJava(
/**********************************************************
This function will decrypt the input value based on the key passed

parameters:

p_text  IN OUT - VARCHAR2 that needs to be encrypted

created : 07/30/2014 CCN Project
**********************************************************/

secKey varchar2, input varchar2)
RETURN STRING AS LANGUAGE JAVA
NAME 'EncryptJavaSP.callDecrypt(java.lang.String, java.lang.String) return 
java.lang.String';

  FUNCTION DECRYPT (
/**********************************************************
This function will decrypt the input value

parameters:

p_text  IN - RAW that needs to be decrypted

created : 07/30/2014 CCN Project
**********************************************************/
 p_raw  IN  RAW) RETURN VARCHAR2 IS
    l_decrypted  VARCHAR2(32767);
  BEGIN
    DBMS_OBFUSCATION_TOOLKIT.desdecrypt(input => p_raw,
                                        KEY   => g_key,
                                        decrypted_data => l_decrypted);

    RETURN RTrim(UTL_RAW.cast_to_varchar2(l_decrypted), g_pad_chr);
  END DECRYPT;

FUNCTION DecryptSQL (
/**********************************************************
This function will decrypt the input value

parameters:

pVal  IN - value that needs to be decrypted

created : 07/30/2014 CCN Project
**********************************************************/
pVal         IN varchar2) RETURN VARCHAR2 AS
vDeryptKey VARCHAR2(250);
BEGIN

   vDeryptKey := DECRYPT('66E9B20AF90BB1A82878D71FC9552D4ACE8F46C6C01ADD46B8FF25C6A6A0A754556B0B5CEE6662FFAFE81D0C18BA44B74C3F1B0AD2247913E5BB677581A0F0CA');

   RETURN decryptJava(vDeryptKey, pVal);

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END DecryptSQL;

FUNCTION VALIDATE_DATA_BEFORE_LOAD(
/*****************************************************************************
    VALIDATE_DATA_BEFORE_LOAD

    This function will validate if the value is some default value in idms
  which should go as NULL in database.  

created : 04/29/2013 jxc517 CCN Project....
changed :
*****************************************************************************/
    IN_VALUE     IN    VARCHAR2) RETURN VARCHAR2
IS
BEGIN
    --If IN_VALUE contains all 0's then return NULL else return theinput value
    IF TO_NUMBER(IN_VALUE) = 0 THEN
        RETURN NULL;
    ELSE
        RETURN IN_VALUE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN IN_VALUE;
END VALIDATE_DATA_BEFORE_LOAD;

FUNCTION RETURN_NUMBER(
/*****************************************************************************
    RETURN_NUMBER

    This function will return the number based on precision and scale passed

created : 04/29/2013 jxc517 CCN Project....
changed : 09/15/2014 jxc517 CCN Project....Added +1 in the second substr()
*****************************************************************************/
    IN_VALUE     IN    VARCHAR2,
    IN_PRECISION IN    NUMBER,
    IN_SCALE     IN    NUMBER) RETURN NUMBER
IS
    V_WHOLE_NUM_SIZE NUMBER := IN_PRECISION - IN_SCALE;
BEGIN
    --Example: Column defined as NUMBER(7,2) has precision as 7 and Sclae as 2
    --Data we get from file is like 0023499 which is equivalent to 234.99
    --We need to extract (precision-scale) # of characters append it with a period(.) followed by scale # of characters
    RETURN TO_NUMBER(SUBSTR(IN_VALUE,1,V_WHOLE_NUM_SIZE)||'.'||SUBSTR(IN_VALUE,V_WHOLE_NUM_SIZE + 1,IN_SCALE));
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END RETURN_NUMBER;

FUNCTION GET_DATE_VALUE(
/*****************************************************************************
    VALIDATE_DATA_BEFORE_LOAD

    This function will get the date value for the input passed.  

created : 06/11/2014 jxc517 CCN Project....
changed :
*****************************************************************************/
    IN_VALUE     IN    VARCHAR2,
    IN_FORMAT    IN    VARCHAR2) RETURN DATE
IS
BEGIN
    RETURN TO_DATE(SUBSTR(VALIDATE_DATA_BEFORE_LOAD(IN_VALUE),2),IN_FORMAT);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END GET_DATE_VALUE;

FUNCTION MODULUS_10 (inValidate_nbr IN varchar)
/******************************************************************************
    MODULUS_10

    This function will calculate the check digit for a number
    passed in.  DO NOT PASS THE CHECK DIGIT WITH THE NUMBER.

created : KDP 4/26/2012modulu
******************************************************************************/    
RETURN number
IS
    v_curval NUMBER := 0;
    v_total NUMBER := 0;
    v_other_digit NUMBER := 1;

BEGIN

  IF(inValidate_nbr IS NULL) THEN
    RETURN 0;
  END IF;

  FOR i IN REVERSE 1 .. LENGTH(inValidate_nbr) LOOP

    v_curval:=SUBSTR(inValidate_nbr, i, 1);

    IF v_other_digit = 1 THEN
       v_other_digit := 0;
       v_curval := v_curval * 2;

      IF(v_curval> 9) THEN
        v_curval := v_curval-9;
      END IF;
    ELSE
       v_other_digit := 1;
    END IF;

    v_total := v_total + v_curval;

  END LOOP;

  IF MOD(v_total, 10) = 0 THEN
    RETURN 0;
  ELSE
    RETURN 10 - MOD(v_total, 10);
  END IF;

END MODULUS_10;

FUNCTION VALIDATE_EMPLOYEE_FNC(
/*******************************************************************************
    VALIDATE_EMPLOYEE_FNC
    This function will validate the employee name from the employee table and return
    True if the employee exists or return False if the employee doesnt exists.
    manager_flag checks if a employee is manager and validate against the
    manager employee table.

Created On  : 09/18/2014  SXT410 CCN Project
Modified On :
*******************************************************************************/
    IN_EMP_NO   IN     MANAGER_EMPLOYEE.GEMS_ID_NUMBER%TYPE,
    IN_MGR_FLAG IN     VARCHAR2,
    OUT_VALID      OUT VARCHAR2) RETURN VARCHAR2
IS
    V_RETURN_VALUE VARCHAR2(1000);
BEGIN
    IF IN_MGR_FLAG = 'Y' THEN
        SELECT EMPLOYEE_LAST_NAME
               || ',' || EMPLOYEE_FIRST_NAME
               || ' ' || EMPLOYEE_MIDDLE_NAME
          INTO V_RETURN_VALUE
          FROM MANAGER_EMPLOYEE
         WHERE GEMS_ID_NUMBER = IN_EMP_NO;

        OUT_VALID := 'True';
    END IF;

    IF IN_MGR_FLAG = 'N' THEN
        SELECT EMPLOYEE_NAME
          INTO V_RETURN_VALUE
          FROM EMPLOYEE_DETAILS
         WHERE EMPLOYEE_NUMBER = IN_EMP_NO;

        OUT_VALID := 'True';
    END IF;

    RETURN V_RETURN_VALUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN('False');
    WHEN OTHERS THEN
        RETURN(SQLERRM);
END VALIDATE_EMPLOYEE_FNC;

FUNCTION GET_TRANSLATED_CODE_DETAIL_VAL(
/**********************************************************
This procedure will return all the translated code detail value
based on the input header name and detail value from
TRANSLATION_DETAIL table

Created : 12/03/2015 jxc517 CCN Project....
Modified: 
**********************************************************/
IN_CODE_HEADER_NAME      IN     VARCHAR2,
IN_CODE_DETAIL_VALUE     IN     VARCHAR2) RETURN VARCHAR2
IS
    V_RETURN_VAL VARCHAR2(100);
BEGIN
    SELECT DETAIL_TRANSLATION
      INTO V_RETURN_VAL
      FROM TRANSLATION_DETAIL
     WHERE HEADER_NAME  = IN_CODE_HEADER_NAME
       AND DETAIL_VALUE = IN_CODE_DETAIL_VALUE;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_TRANSLATED_CODE_DETAIL_VAL;

FUNCTION GET_DATAFILE_PATH_FNC(
/**************************************************************** 
          This Function is used to get the UTL_FILE path for the 
          Given schema user.

created : 05/02/2016 AXD783 
changed :
*****************************************************************/
in_SCHEMA     IN   VARCHAR2)

RETURN VARCHAR2
IS

v_file_path        	           VARCHAR2(50);

BEGIN

    IF UPPER(in_SCHEMA) = 'STORDRFT'  THEN 
        v_file_path := 'STORDRFT_DATAFILES';
    ELSIF 
        UPPER(in_SCHEMA) = 'COSTCNTR'  THEN
        v_file_path := 'CCN_DATAFILES';
    ELSIF
        UPPER(in_SCHEMA) = 'FLDPRRPT'  THEN
        v_file_path := 'CCN_DATA_FILE';
    ELSIF
        UPPER(in_SCHEMA) = 'BANKING'  THEN
        v_file_path := 'BANKING_DATA_FILES';    
    END IF;

    RETURN v_file_path;

EXCEPTION
    WHEN OTHERS THEN
        RETURN(SQLERRM);

END GET_DATAFILE_PATH_FNC;

PROCEDURE WRITE_CLOB_ON_SERVER(
/******************************************************************************
This procedure will create file on server and dump the passed BLOB data Into the file created
IN_DIRECTORY  - Directory name
IN_FILENAME  - Name of the file
IN_CLOB      - File data
created : 12/21/2016 vxv336 CCN Project
Modified: 06/18/2018 ASP-1082 UTL_FILE.FFLUSH flushes the pending data identified by the file handle into the file.
******************************************************************************/
IN_DIRECTORY    IN       VARCHAR2,
IN_FILENAME    IN       VARCHAR2,
IN_CLOB        IN       CLOB)
IS
    V_LENGTH          NUMBER := DBMS_LOB.GETLENGTH(IN_CLOB);
    V_START           NUMBER := 1;
    V_BYTE_LENGTH     NUMBER := 32000;
    V_TEMP_LENGTH     NUMBER;
    V_TEMP_CLOB       CLOB;
    V_FILE  utl_file.file_type;
BEGIN
    -- Save blob length in temporary variable
    V_TEMP_LENGTH := V_LENGTH;
    V_FILE := utl_file.fopen ( IN_DIRECTORY, IN_FILENAME, 'W', 32767); 
    IF V_LENGTH < 32760 THEN
        UTL_FILE.PUT(V_FILE, IN_CLOB);
        UTL_FILE.FFLUSH(V_FILE);
    ELSE -- write in pieces
        V_START := 1;
        WHILE V_START < V_LENGTH AND V_BYTE_LENGTH > 0 LOOP
            DBMS_LOB.READ(IN_CLOB, V_BYTE_LENGTH, V_START, V_TEMP_CLOB);
            UTL_FILE.PUT(V_FILE, V_TEMP_CLOB);
            UTL_FILE.FFLUSH(V_FILE);
            -- Set the start position for the next cut
            V_START       := V_START + V_BYTE_LENGTH;
            -- Set the end position if less than 32000 bytes
            V_TEMP_LENGTH := V_TEMP_LENGTH - V_BYTE_LENGTH;
            IF V_TEMP_LENGTH < 32000 THEN
                V_BYTE_LENGTH := V_TEMP_LENGTH;
            END IF;
        END LOOP;
    END IF;   
    utl_file.fclose(V_FILE);
EXCEPTION
    WHEN OTHERS THEN
    if utl_file.is_open(V_FILE) then
        utl_file.fclose(V_FILE);
    end if;
    RAISE;    
END WRITE_CLOB_ON_SERVER;

FUNCTION RETURN_HEADER_STRING(
/*********************************************************************** 
        This Function is used to return the file header for a passed table name.

created : 12/21/2016 MXK766/NXK927 POS XML Conversion
changed :  
************************************************************************/
IN_TABLE_NAME IN VARCHAR2)
RETURN VARCHAR2
IS
BEGIN

RETURN 
CASE WHEN IN_TABLE_NAME='CUSTOMER_DETAILS_DATA' THEN
                    'IN_TABLE'                          ||','||
                    'COST_CENTER_CODE'                  ||','||
                    'TERMINAL_NUMBER'                   ||','||
                    'TRANSACTION_NUMBER'                ||','||
                    'SALES_NUMBER'                      ||','||
                    'ITEM_QUANTITY'                     ||','||
                    'ITEM_PRICE'                        ||','||
                    'ITEM_EXTERNAL_AMOUNT'              ||','||
                    'GL_PRIME_ACCOUNT'                  ||','||
                    'GL_SUB_ACCOUNT'
     WHEN IN_TABLE_NAME='CUSTOMER_DATA' THEN
                    'IN_TABLE'                      ||','||
                    'COST_CENTER_CODE'              ||','||
                    'TERMINAL_NUMBER'               ||','||
                    'TRANSACTION_NUMBER'            ||','||
                    'TRANSACTION_DATE'              ||','||
                    'CUSTOMER_ACCOUNT_NUMBER'       ||','||
                    'CUSTOMER_JOB_NUMBER'           ||','||
                    'POS_TRANSACTION_TIME'          ||','||
                    'EMPLOYEE_NUMBER'               ||','||
                    'BUSINESS_TYPE_CODE'            ||','||
                    'SLS_TERRITORY_NUMBER'          ||','||
                    'POS_TRANSACTION_CODE' 
     WHEN IN_TABLE_NAME='DISBRSMT_LINE_ITEM_DATA' THEN
                    'IN_TABLE'                                  ||','||
                    'COST_CENTER_CODE'                         ||','||
                    'CHECK_SERIAL_NUMBER'                      ||','||
                    'PROCESS_DATE'                             ||','||
                    'ITEM_EXT_AMOUNT_SIGN'                     ||','||
                    'ITEM_EXT_AMOUNT'                          ||','||
                    'GL_PRIME_ACCOUNT_NUMBER'                  ||','||
                    'GL_SUB_ACCOUNT_NUMBER'
     WHEN IN_TABLE_NAME ='INSTLR_LN_ITEM_DATA' THEN
                    'IN_TABLE'                                 ||','||
                    'COST_CENTER_CODE'                         ||','||
                    'CHECK_SERIAL_NUMBER'                      ||','||
                    'PROCESS_DATE'                             ||','||
                    'ITEM_EXT_AMOUNT_SIGN'                     ||','||
                    'ITEM_EXT_AMOUNT'                          ||','||
                    'ITEM_QUANTITY_SIGN'                       ||','||
                    'ITEM_QUANTITY'                            ||','||
                    'ITEM_PRICE_SIGN'                          ||','||
                    'ITEM_PRICE'                               ||','||
                    'GL_PRIME_ACCOUNT_NUMBER'                  ||','||
                    'GL_SUB_ACCOUNT_NUMBER'
     WHEN IN_TABLE_NAME ='ISSUE_CHANGE_DATA' THEN
                    'IN_TABLE'                                ||','||
                    'COST_CENTER_CODE'                        ||','||
                    'CHECK_SERIAL_NUMBER'                     ||','||
                    'DRAFT_NUMBER'                            ||','||
                    'PROCESS_DATE'                            ||','||
                    'NET_AMOUNT_SIGN'                         ||','||
                    'NET_AMOUNT'                              ||','||
                    'GROSS_AMOUNT_SIGN'                       ||','||
                    'GROSS_AMOUNT'                            ||','||
                    'RETAINAGE_AMOUNT_SIGN'                   ||','||
                    'RETAINAGE_AMOUNT'                        ||','||
                    'ISSUE_DATE'                              ||','||
                    'TRANSACTION_DATE'                        ||','||
                    'TERMINAL_NUMBER'                         ||','||
                    'TRANSACTION_NUMBER'                      ||','||
                    'CUSTOMER_ACCOUNT_NUMBER'                 ||','||
                    'CUSTOMER_JOB_NUMBER'                     ||','||
                    'POS_TRANSACTION_CODE'                    ||','||
                    'PAYEE_NAME'                              ||','||
                    'ADDRESS_LINE_1'                          ||','||
                    'ADDRESS_LINE_2'                          ||','||
                    'CITY'                                    ||','||
                    'STATE_CODE'                              ||','||
                    'ZIP_CODE'                                ||','||
                    'PHONE_NUMBER'                            ||','||
                    'TRANSACTION_TIME'                        ||','||
                    'EMPLOYEE_NUMBER'
     WHEN IN_TABLE_NAME ='BANK_PAID_DATA' THEN
                    'IN_TABLE'                                ||','||
                    'TRANSACTION_SOURCE'                      ||','||
                    'TRANSACTION_TYPE'                        ||','||
                    'COST_CENTER_CODE'                        ||','||
                    'CHECK_SERIAL_NUMBER'                     ||','||
                    'PROCESS_DATE'                            ||','||
                    'TRANSACTION_SEGMENT_TYPE'                ||','||
                    'PAID_DATE'                               ||','||
                    'STOP_PAY_DATE'                           ||','||
                    'STOP_PAY_REMOVE_DATE'                    ||','||
                    'VOID_DATE'                               ||','||
                    'BANK_PAID_AMOUNT_SIGN'                   ||','||
                    'BANK_PAID_AMOUNT'                        ||','||
                    'BANK_NUMBER'                             ||','||
                    'BANK_ACCOUNT_NUMBER'                     ||','||
                    'CPCS_NUMBER'                             ||','||
                    'PAYEE_INFO'                              ||','||
                    'ADDITIONAL_INFO'                         ||','||
                    'FS_ACCOUNT_NUMBER1'                      ||','||
                    'FS_AMOUNT_SIGN1'                         ||','||
                    'FS_AMOUNT1'                              ||','||
                    'FS_ACCOUNT_NUMBER2'                      ||','||
                    'FS_AMOUNT_SIGN2'                         ||','||
                    'FS_AMOUNT2'                              ||','||
                    'FS_ACCOUNT_NUMBER3'                      ||','||
                    'FS_AMOUNT_SIGN3'                         ||','||
                    'FS_AMOUNT3'
      WHEN IN_TABLE_NAME ='CSTMR_BANK_CARD' THEN
                    'IN_TABLE'                               ||','||
                    'COST_CENTER_CODE'                       ||','||
                    'TERMINAL_NUMBER'                        ||','||
                    'TRANSACTION_NUMBER'                     ||','||
                    'BANK_CARD_ACCOUNT_NUMBER'               ||','||
                    'BANK_AMOUNT_SIGN'                       ||','||
                    'BANK_AMOUNT'
       WHEN IN_TABLE_NAME ='CSTMR_FORM_OF_PAY' THEN
                    'IN_TABLE'                              ||','||
                    'COST_CENTER_CODE'                      ||','||
                    'TERMINAL_NUMBER'                       ||','||
                    'TRANSACTION_NUMBER'                    ||','||
                    'PAY_DISC_CODE'                         ||','||
                    'TRANSACTION_TOTAL_AMOUNT_SIGN'         ||','||
                    'TRANSACTION_TOTAL_AMOUNT'
				WHEN IN_TABLE_NAME ='CSTMR_SALES_TAX' THEN
                    'IN_TABLE'                               ||','||
                    'COST_CENTER_CODE'                       ||','||
                    'TERMINAL_NUMBER'                        ||','||
                    'TRANSACTION_NUMBER'                     ||','||
                    'SALES_TAX_COLL_AMOUNT'                  ||','||
                    'SALES_TAX_RATE'                         ||','||
                    'SALES_TAX_CODE'
        WHEN IN_TABLE_NAME ='CUSTOMER_LINE_ITEM_DATA' THEN
                    'IN_TABLE'                                 ||','||
                    'COST_CENTER_CODE'                         ||','||
                    'CHECK_SERIAL_NUMBER'                      ||','||
                    'PROCESS_DATE'                             ||','||
                    'ITEM_EXT_AMOUNT_SIGN'                     ||','||
                    'ITEM_EXT_AMOUNT'                          ||','||
                    'ORGNL_CUSTOMER_ACCOUNT_NUMBER'            ||','||
                    'ORGNL_JOB_NUMBER'
        WHEN IN_TABLE_NAME ='BANK_PAID_DATA' THEN
                    'IN_TABLE'                                ||','||
                    'TRANSACTION_SOURCE'                      ||','||
                    'TRANSACTION_TYPE'                        ||','||
                    'COST_CENTER_CODE'                        ||','||
                    'CHECK_SERIAL_NUMBER'                     ||','||
                    'PROCESS_DATE'                            ||','||
                    'TRANSACTION_SEGMENT_TYPE'                ||','||
                    'PAID_DATE'                               ||','||
                    'STOP_PAY_DATE'                           ||','||
                    'STOP_PAY_REMOVE_DATE'                    ||','||
                    'VOID_DATE'                               ||','||
                    'BANK_PAID_AMOUNT_SIGN'                   ||','||
                    'BANK_PAID_AMOUNT'                        ||','||
                    'BANK_NUMBER'                             ||','||
                    'BANK_ACCOUNT_NUMBER'                     ||','||
                    'CPCS_NUMBER'                             ||','||
                    'PAYEE_INFO'                              ||','||
                    'ADDITIONAL_INFO'                         ||','||
                    'FS_ACCOUNT_NUMBER1'                      ||','||
                    'FS_AMOUNT_SIGN1'                         ||','||
                    'FS_AMOUNT1'                              ||','||
                    'FS_ACCOUNT_NUMBER2'                      ||','||
                    'FS_AMOUNT_SIGN2'                         ||','||
                    'FS_AMOUNT2'                              ||','||
                    'FS_ACCOUNT_NUMBER3'                      ||','||
                    'FS_AMOUNT_SIGN3'                         ||','||
                    'FS_AMOUNT3'  
        WHEN IN_TABLE_NAME='CSTMR_BANK_CARD' THEN
                    'IN_TABLE'                               ||','||
                    'COST_CENTER_CODE'                       ||','||
                    'TERMINAL_NUMBER'                        ||','||
                    'TRANSACTION_NUMBER'                     ||','||
                    'BANK_CARD_ACCOUNT_NUMBER'               ||','||
                    'BANK_AMOUNT_SIGN'                       ||','||
                    'BANK_AMOUNT'
        WHEN IN_TABLE_NAME='FF_GIFT_CARD_POS_TRANS' THEN
                    'IN_TABLE'                               ||','||
                    'TRANSACTION_TYPE'                       ||','||
                    'GIFT_CARD_NBR'                          ||','||
                    'DIVISION_NBR'                           ||','||
                    'DISTRICT_NBR'                           ||','||
                    'AREA_NBR'                               ||','||              
                    'STORE_NBR'                              ||','||
                    'STORE_STATE_CD'                         ||','||
                    'TRANS_AMOUNT'                           ||','||
                    'TRANS_DATE'                             ||','||
                    'TRANS_TIME'                             ||','||
                    'TERM_NBR'                               ||','||
                    'TRANS_NBR'                              ||','||
                    'EMPLOYEE_NBR'                       ||','||
                    'UAR_TRAN_CODE'
        END;
EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
END RETURN_HEADER_STRING;

FUNCTION RETURN_FIRST_WKDAY_OF_MNTH(
/******************************************************************
This procedure will return the first week day of the month for the date
passed

Created : 01/13/2017 nxk927 CCN Project....
Changed :
******************************************************************/
    IN_DATE       IN      DATE) RETURN DATE
IS
    V_FIRST_DAY           DATE         := TRUNC(IN_DATE,'MON');
    V_WORKING_DAY_COUNT   NUMBER       := 0;
BEGIN
    --Loop through and increment the date by one day starting from 1st of that month if its saturday or sunday
    LOOP
        IF TO_CHAR(V_FIRST_DAY, 'DY') IN ('SAT', 'SUN') THEN
           --increment the working days count if it is saturday and sunday
           V_FIRST_DAY := V_FIRST_DAY + 1;
        ELSE
           EXIT;
        END IF;
    END LOOP;
    RETURN V_FIRST_DAY;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END RETURN_FIRST_WKDAY_OF_MNTH;

FUNCTION FORMAT_INPUT_FOR_FILE(
/*****************************************************************************
	This function will return the formatted data as requested

Created : gxg192 CCN Project....
Modified: gxg192 Changes to handle scenario where IN_VALUE is passed without
                 zero before decimal place e.g. value as .65
*****************************************************************************/
IN_VALUE         IN VARCHAR2,
IN_PADDING_VALUE IN VARCHAR2,
IN_LENGTH        IN NUMBER,
IN_PRECISION     IN NUMBER DEFAULT 0
) RETURN VARCHAR2
IS
    V_RETURN_VALUE      VARCHAR2(32000);
    V_DECIMAL_LOCATION  NUMBER;
    V_LEFT_SIDE_VALUE   VARCHAR2(32000) := IN_PADDING_VALUE;
    V_RIGHT_SIDE_VALUE  VARCHAR2(32000) := IN_PADDING_VALUE;
BEGIN
    IF IN_VALUE IS NOT NULL THEN
        V_DECIMAL_LOCATION := INSTR(IN_VALUE,'.');
        IF V_DECIMAL_LOCATION <> 0 THEN
           V_LEFT_SIDE_VALUE  := NVL(SUBSTR(IN_VALUE,1,V_DECIMAL_LOCATION - 1), IN_PADDING_VALUE);
           V_RIGHT_SIDE_VALUE := SUBSTR(IN_VALUE,V_DECIMAL_LOCATION + 1);
        ELSE
           V_LEFT_SIDE_VALUE  := IN_VALUE;
        END IF;
    END IF;
    RETURN LPAD(V_LEFT_SIDE_VALUE,IN_LENGTH-IN_PRECISION,IN_PADDING_VALUE) ||
           RPAD(V_RIGHT_SIDE_VALUE,IN_PRECISION,IN_PADDING_VALUE);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END FORMAT_INPUT_FOR_FILE;

PROCEDURE GET_APPLICATION_CREDENTIALS(
/*****************************************************************************
	This function will return the formatted data as requested

Created : 11/02/2017 jxc517 CCN Project Team....
Modified: 
*****************************************************************************/
    IN_APPLICATION_NAME   IN      VARCHAR2,
    IN_APPLICATION_PRCS   IN      VARCHAR2,
    OUT_USER_NAME            OUT  VARCHAR2,
    OUT_PASSWORD             OUT  VARCHAR2)
IS
BEGIN
    SELECT APPLICATION_USER_NAME,
           APPLICATION_PASSWORD
      INTO OUT_USER_NAME,
           OUT_PASSWORD
      FROM EXTERNAL_APP_CREDENTIALS
     WHERE APPLICATION_NAME = IN_APPLICATION_NAME
       AND APPLICATION_PRCS = IN_APPLICATION_PRCS
      AND EXPIRATION_DATE IS NULL;
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END GET_APPLICATION_CREDENTIALS;

FUNCTION GET_COST_CENTER_DSC_CODES(
/**********************************************************
This Function is intended to return PRIMARY_DSC, SECONDARY_DSC Codes from
from COST_CENTER_DSC_CODES
Created : 02/22/2018 SXG151 CCN Project....
Modified:
**********************************************************/
    IN_COST_CENTER    IN     COST_CENTER_DSC_CODES.COST_CENTER_CODE%TYPE,
    IN_DSC_TYPE       IN     VARCHAR2
    ) RETURN NUMBER
IS
    V_RECORD           COST_CENTER_DSC_CODES%ROWTYPE;
    V_RETURN_VAL       NUMBER;
BEGIN
    SELECT *
      INTO V_RECORD
      FROM COST_CENTER_DSC_CODES
     WHERE COST_CENTER_CODE = SUBSTR(IN_COST_CENTER, 3);

    IF IN_DSC_TYPE = 'PRIMARY_DSC' THEN
        V_RETURN_VAL := V_RECORD.PRIMARY_DSC;
    ELSIF IN_DSC_TYPE = 'SECONDARY_DSC' THEN
        V_RETURN_VAL := V_RECORD.SECONDARY_DSC;
    END IF;
    RETURN V_RETURN_VAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_RETURN_VAL;
END GET_COST_CENTER_DSC_CODES;

FUNCTION CHK_POS_NEW_STORES_BYPASS(
/**********************************************************
	This function is intended to check whether the cost center 
	that needs to be bypassed exists in the table POS_NEW_STORES_VALIDATION_BYPASS
    This function will return -
    TRUE if cost center was found in the POS_NEW_STORES_VALIDATION_BYPASS table
    FALSE if cost center was not found in the POS_NEW_STORES_VALIDATION_BYPASS table 

Created : 04/01/2019 dxp896/sxh487 CCN Project....
Changed : 
**********************************************************/
    IN_COST_CENTER_CODE    IN  COST_CENTER.COST_CENTER_CODE%TYPE)
RETURN BOOLEAN
IS
    V_COUNT         NUMBER:=0;
    V_RETURN_VALUE  BOOLEAN := FALSE;
BEGIN   
    SELECT COUNT(1)
      INTO V_COUNT
      FROM POS_NEW_STORES_VALIDATION_BYPASS
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND PROCESSED_DATE IS NULL;
     
    IF V_COUNT >0 THEN
       V_RETURN_VALUE := TRUE;
    END IF;
    
  RETURN V_RETURN_VALUE;
END CHK_POS_NEW_STORES_BYPASS;

FUNCTION GET_FIRST_ASSIGNED_TERMINAL_NUMBER(
/******************************************************************************
This function will return the first assigned terminal number for a given store

Created : 06/21/2019 axm868 --  CCN Project....
Changed :
******************************************************************************/
         IN_COST_CENTER_CODE    IN     COST_CENTER.COST_CENTER_CODE%TYPE)
RETURN TERMINAL.TERMINAL_NUMBER%TYPE
IS
    V_TERMINAL_NUMBER     TERMINAL.TERMINAL_NUMBER%TYPE;
BEGIN
    SELECT S.DESIGNATED_TERMINAL_NUMBER
      INTO V_TERMINAL_NUMBER
      FROM STORE S
    WHERE S.COST_CENTER_CODE = IN_COST_CENTER_CODE;
    RETURN V_TERMINAL_NUMBER;
EXCEPTION
    WHEN OTHERS THEN
        RETURN V_TERMINAL_NUMBER;
END GET_FIRST_ASSIGNED_TERMINAL_NUMBER;

END CCN_COMMON_TOOLS;