create or replace PACKAGE BODY POS_DOWNLOADS_INTERFACE_PKG IS


PROCEDURE INIT_LOAD_BY_APP_NAME(
/*******************************************************************************
This procedure is used to create an WS diff file with the list of newly added cost centers

Created : 10/26/2017 rxv940 CCN Project....
Changed : 11/03/2017 rxv940 CCN Project....
        : Added calls for TAXCURR
*********************************************************************************/
      IN_APP_NAME      IN        VARCHAR2,
      IN_LOAD_TYPE     IN        VARCHAR2,
      OUT_XML_DATA          OUT  CLOB,
      OUT_PRE_REQ_ID        OUT  VARCHAR2,
      OUT_FILE_NAME         OUT  VARCHAR2)
IS
BEGIN 
    IF IN_APP_NAME = 'STORE' THEN 
        POS_DATA_GENERATION.INIT_LOAD_STORE_SP(IN_LOAD_TYPE, OUT_XML_DATA, OUT_PRE_REQ_ID, OUT_FILE_NAME);
    ELSIF IN_APP_NAME = 'TERR' THEN 
        POS_DATA_GENERATION.INIT_LOAD_TERR_SP(IN_LOAD_TYPE, OUT_XML_DATA, OUT_PRE_REQ_ID, OUT_FILE_NAME);
    ELSIF IN_APP_NAME = 'PrimeSub' THEN 
        PRIME_SUB_PROCESS.PRIME_SUB_DATA_INIT_LOAD_SP(IN_LOAD_TYPE, OUT_XML_DATA, OUT_PRE_REQ_ID, OUT_FILE_NAME);
    ELSIF IN_APP_NAME = 'PARAM' THEN 
        --Nothing needs to be done as PARAM is cost center based and bulk file is not applicable
        --also the newly added cost centers to polling are existing cost centers that already holds the required data
        NULL; 
    ELSIF IN_APP_NAME = 'TAXCURR' THEN
        --Nothing needs to be done as TAXCURR is cost center based and bulk file is not applicable
        --also the newly added cost centers to polling are existing cost centers that already holds the required data
        NULL;
    END IF;
EXCEPTION 
    WHEN OTHERS THEN
        RAISE;
END INIT_LOAD_BY_APP_NAME;

PROCEDURE WS_DIFF_BY_FILE_TYPE(
/*******************************************************************************
This procedure is used to create an WS diff file with the list of newly added cost centers

Created : 10/12/2017 rxv940 CCN Project....
Changed : 11/06/2017 rxv940 CCN Project....
        : Added a if statement to create the list only when the list is not empty
        : Added a check to see if the store number present in Web service is valid
Changed : 12/11/2017 rxv940 CCN Project....
          Added code to update POS_DOWNLOADS_CC_IND flag to 'Y' for those stores 
          present in WebService
Changed : 12/12/2017 rxv940 CCN Project....
          Added code to avoid update to COST_CENTER table if not needed
Changed : 12/20/2017 rxv940 CCN Project....
          Added in_file_type where clause in V_NEW_STR_CC_CNT computation          
*********************************************************************************/
      IN_FILE_TYPE  IN     VARCHAR2,
      IN_STR_LIST   IN     VARCHAR2,
      OUT_LIST         OUT VARCHAR2)
IS
    V_STR_LST          VARCHAR2(32767) := IN_STR_LIST; 
    V_FNL_STR_LST      VARCHAR2(32767); 
    V_CC_LIST          DBMS_UTILITY.UNCL_ARRAY;
    V_LIST_CUNT        NUMBER;
    V_COST_CENTER_CODE VARCHAR2(6);
    V_INVALID_CC_LIST  CLOB;
    V_MAIL_TXT         VARCHAR2(250);
    V_NEW_STR_CC_CNT   NUMBER := 0;
BEGIN
    --Sample input : "[1234, 7896, 1001]"
    IF V_STR_LST <> '[]' THEN
    -- Condition to check for null stores in Web Service
        V_STR_LST := REPLACE(REPLACE(V_STR_LST, '['), ']');
        DBMS_UTILITY.COMMA_TO_TABLE('J'||REPLACE(V_STR_LST, ', ', ',J'), V_LIST_CUNT, V_CC_LIST);
        --DBMS_UTILITY.COMMA_TO_TABLE expects J at the beginning of all list items
        FOR i IN 1..V_LIST_CUNT LOOP
            -- Check to see how many of the cost centers are really valid
            BEGIN
                V_COST_CENTER_CODE := COMMON_TOOLS.COST_CENTER_LOOK_UP_FNC(TRIM(SUBSTR(V_CC_LIST(i),2, 4)));
            EXCEPTION
                WHEN OTHERS THEN
                    V_INVALID_CC_LIST := V_INVALID_CC_LIST || TRIM(SUBSTR(V_CC_LIST(i),2, 4)) || ',';
                    --We should continue validating next cost center if there are any issues with current cost center
                    CONTINUE;
            END;
            BEGIN
                -- Below table is used to track the newly added cost centers in the web service
                -- This table is used for NEW GRP LD only
                INSERT INTO POS_INIT_LOAD_LIST VALUES (IN_FILE_TYPE, V_COST_CENTER_CODE, SYSTIMESTAMP);

                -- Even if a cost center is present new group pilot load process, make the POS_DOWNLOAD_CC_IND flag to 'Y'
                UPDATE COST_CENTER SET POS_DOWNLOAD_CC_IND = 'Y' WHERE COST_CENTER_CODE = V_COST_CENTER_CODE AND POS_DOWNLOAD_CC_IND IS NULL;

                --Do not send the initial load files to new stores again in pilot store list
                --If so, it sends two requests with equivalent ID, which should be ok but repetitive as per kdp
                BEGIN
                    SELECT COUNT(*)
                      INTO V_NEW_STR_CC_CNT
                      FROM POS_NEW_STORES_LOAD_LIST
                     WHERE COST_CENTER_CODE = V_COST_CENTER_CODE
                       AND APPLICATION_NAME = IN_FILE_TYPE;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
                IF V_NEW_STR_CC_CNT = 0 THEN
                    --even found in diff, send it back only if it is not present in new store load
                    V_FNL_STR_LST := V_FNL_STR_LST || SUBSTR(V_COST_CENTER_CODE, 3, 4) || ',';
                END IF;
                OUT_LIST := V_FNL_STR_LST;
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                    NULL; --this is OK as we already have that record in the table
                WHEN OTHERS THEN
                    RAISE; --not OK as something else happened
            END;
            V_COST_CENTER_CODE := NULL;
            V_NEW_STR_CC_CNT   := 0;
        END LOOP;
        OUT_LIST := TRIM(TRAILING ',' FROM OUT_LIST);
    END IF;
    IF V_INVALID_CC_LIST IS NOT NULL THEN
        V_MAIL_TXT := 'Invalid stores ' || TRIM(TRAILING ',' FROM V_INVALID_CC_LIST) || ' found in the Web Service for ' || IN_FILE_TYPE || ' downloads.';
        MAIL_PKG.SEND_MAIL('RequestidFailure', NULL, NULL, V_MAIL_TXT);
        -- Email sent to notify the presence of Invalid stores
    END IF;
EXCEPTION
    WHEN OTHERS THEN
    RAISE;        
END WS_DIFF_BY_FILE_TYPE;

PROCEDURE POS_DOWNLOADS_UPD_SP(
/*******************************************************************************
This procedure is used do update on the table POS_DOWNLOADS 

IN_APP_NAME can be "STORE", "TERR", "PARAM', "PrimeSub", "TAXCURR"

Created : 10/17/2016 rxv940 CCN Project....
Changed : 11/03/2017 rxv940 CCN Project....
        : Added calls for TAXCURR
*******************************************************************************/
    IN_APP_NAME   IN    VARCHAR2,
    IN_FILE_NAME  IN    POS_DOWNLOADS.FILE_NAME%TYPE,
    IN_RQST_ID    IN    POS_DOWNLOADS.POLLING_REQUEST_ID%TYPE)
IS
   V_ERROR          VARCHAR2(1000);
BEGIN
    -- Forking process to route to the right call based on the APP NAME
    IF IN_APP_NAME = 'PrimeSub' THEN
        PRIME_SUB_PROCESS.POS_DOWNLOADS_GL_PS_UPD_SP(IN_FILE_NAME, IN_RQST_ID);
    ELSIF IN_APP_NAME = 'TAXCURR' THEN
        POS_DATA_GENERATION_NON_TAXWAR.POS_DOWNLOADS_UPD_SP(IN_FILE_NAME, IN_RQST_ID);
    ELSE
        POS_DATA_GENERATION.POS_DOWNLOADS_UPD_SP(IN_FILE_NAME, IN_RQST_ID);
        -- Common call for STORE/ TERR and PARAM
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR  := 'SQLCODE->' || SQLCODE || CHR(10) || 
                    'SQLERRM->' || SQLERRM || CHR(10) ||
                    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        ROLLBACK;
        CCN_ERRPKG.insert_error_log_sp(SQLCODE,
                                       'POS_DOWNLOADS_UPD_SP_WRAPPER',
                                       V_ERROR,
                                       '000000');
        RAISE;
END POS_DOWNLOADS_UPD_SP;

FUNCTION IS_MAINTENANCE_RQRD_FNC 
/************************************************************************
This Function checks the file processed status in POS_DOWNLOADS  table and returns 'Y' if 
there are any unprocessed records 

Created : 11/07/2017  bxa919 CCN Project....
Changed : 11/28/2017 rxv940 CCN Project....
        : Changes to use POS_ID in select instead of '*'
************************************************************************/
RETURN VARCHAR2
IS
    V_FLAG     VARCHAR2(1) := 'N';
    V_COUNT    NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM (SELECT POS_ID
              FROM POS_DOWNLOADS
              /* Checks the Unprocessed files status*/
             WHERE FILE_PROCESSED = 'N'
               AND COST_CENTER_CODE NOT IN ('TERRIL', 'STORIL')
             UNION
            SELECT POS_ID
              FROM POS_DOWNLOADS_GL_PS
              /* Checks the Unprocessed files status*/
             WHERE FILE_PROCESSED = 'N'
               AND ACCNT_NBR IS NOT NULL
             UNION
            SELECT POS_ID
              FROM POS_DOWNLOADS_NON_TAXWARE
              /* Checks the Unprocessed files status*/
             WHERE FILE_PROCESSED = 'N');
    IF V_COUNT > 0 THEN
        V_FLAG := 'Y';
    END IF;
    RETURN V_FLAG;
END IS_MAINTENANCE_RQRD_FNC;

 PROCEDURE GET_POLLING_MAINTENANCE_DTLS (
/*******************************************************************************
This Function checks the Unprocessed records in POS_DOWNLOAD table and returns the 
Pos_ID and APPLICATION_NAME details .

Created : 11/07/2017  bxa919 CCN Project....
Changed : 11/28/2017  rxv940 CCN Project....
        : Chnages to add TAXCURR related logic
*******************************************************************************/
   OUT_REF_CUR     OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN OUT_REF_CUR FOR
          SELECT POS_ID,
               COST_CENTER_CODE,
               DECODE(FILE_TYPE, 'POS_STORE_UPDATE', 'STORE',
                                 'POS_PARAM_UPDATE', 'PARAM',
                                 'POS_TERRITORY_UPDATE', 'TERR',
                                 NULL) AS APP_NAME
          FROM POS_DOWNLOADS
          /* Checks the Unprocessed files status*/
         WHERE FILE_PROCESSED = 'N'
           AND COST_CENTER_CODE NOT IN ('TERRIL', 'STORIL')
         UNION
        SELECT POS_ID, ACCNT_NBR, 'PrimeSub' APP_NAME
         FROM POS_DOWNLOADS_GL_PS
         /* Checks the Unprocessed files status*/
        WHERE FILE_PROCESSED = 'N'
          AND ACCNT_NBR IS NOT NULL
        UNION
        SELECT POS_ID, COUNTRY_CODE, 'TAXCURR' APP_NAME
         FROM POS_DOWNLOADS_NON_TAXWARE
         /* Checks the Unprocessed files status*/
        WHERE FILE_PROCESSED = 'N'
       ORDER BY 1;
END GET_POLLING_MAINTENANCE_DTLS;

PROCEDURE PROCESS_POLLING_REQUEST_ID(
/*******************************************************
This pocedure passes the POS_ID and invokes the corresponding procedures based
on the Application name.

Created : 11/07/2017  bxa919 CCN Project....
Changed : 11/28/2017  rxv940 CCN Project....
        : Changes to include TAXCURR logic
*******************************************************/
    IN_POS_ID        IN      VARCHAR2,
    IN_APP_NAME      IN      VARCHAR2,
    OUT_XML             OUT  CLOB,
    OUT_FILE_NAME       OUT  VARCHAR2,
    OUT_PREV_REQ_ID     OUT  VARCHAR2)
IS
BEGIN    
    --This process is called during maintenance and handles the POS ID and the applicthat is passed in
    --Then generates the output file, output xml passed them along with previous request id
    IF IN_APP_NAME = 'STORE' THEN
        POS_DATA_GENERATION.GENERATE_POS_STORE_UPD_SP (IN_POS_ID, OUT_XML, OUT_FILE_NAME, OUT_PREV_REQ_ID);
    ELSIF IN_APP_NAME = 'PARAM' THEN 
        POS_DATA_GENERATION.GEN_PARAM_UPD_SP(IN_POS_ID, OUT_XML,OUT_FILE_NAME,OUT_PREV_REQ_ID);
    ELSIF IN_APP_NAME = 'TERR' THEN
        POS_DATA_GENERATION.GEN_POS_TERRITORY_UPD_SP(IN_POS_ID, OUT_XML,OUT_FILE_NAME,OUT_PREV_REQ_ID);
    ELSIF IN_APP_NAME = 'PrimeSub' THEN
        PRIME_SUB_PROCESS.GEN_POS_DATA_GL_PS_UPD_SP(IN_POS_ID, OUT_XML,OUT_FILE_NAME,OUT_PREV_REQ_ID);
    ELSIF IN_APP_NAME = 'TAXCURR' THEN
        POS_DATA_GENERATION_NON_TAXWAR.TAX_CUR_UPD_SP(IN_POS_ID, OUT_XML,OUT_FILE_NAME,OUT_PREV_REQ_ID);
    END IF;
EXCEPTION 
    WHEN OTHERS THEN
       RAISE;
END PROCESS_POLLING_REQUEST_ID;

PROCEDURE INSRT_POS_TBL_BY_APP_NM(
/*******************************************************************************
This procedure is to insert into the POS Table based on the input App name

Created : 11/21/2017 rxv940 CCN Project....
Changed : 12/01/2017 rxv940 CCN Project....
        : Adding TAXCURR calls
        : 03/02/2018 nxk927 CCN Project....
          removing the terr for store as we are sending maintenance file for TERR which is always blank tags
*********************************************************************************/
      IN_APP_NAME     IN     VARCHAR2,
      IN_COST_CENTER  IN     VARCHAR2)
IS      
BEGIN
    -- This forks to the right call based on the APP NAME. This inserts a record into the POS
    -- table for the APP Names. This helps in running a maintenance immediately after a new 
    -- store was processed by the new store load process
    IF IN_APP_NAME = 'TAXCURR' THEN
        POS_DATA_GENERATION_NON_TAXWAR.POS_TRG_EVENT_LOG(IN_COST_CENTER, 'COST_CENTER', 'ADD', 'POS_NON_TXWR_RT_UPDATE');
    ELSIF IN_APP_NAME = 'STORE' THEN
        POS_DATA_GENERATION.POS_TRG_EVENT_LOG(IN_COST_CENTER, 'COST_CENTER', 'ADD', 'POS_STORE_UPDATE');
    ELSIF IN_APP_NAME = 'PARAM' THEN
        POS_DATA_GENERATION.POS_TRG_EVENT_LOG(IN_COST_CENTER, 'COST_CENTER', 'ADD', 'POS_PARAM_UPDATE');
    END IF; 
END INSRT_POS_TBL_BY_APP_NM;

PROCEDURE PRCSS_NEW_STR_APP_NM(
/*******************************************************************************
This procedure is to process new store loads for all the App name

Created : 11/21/2017 rxv940 CCN Project....
Changed : 12/12/2017 rxv940 CCN Project....
          Added code to avoid update to COST_CENTER table is not needed
Changed : 12/20/2017 rxv940 CCN Project....
          Added code to handle PrimeSub inserts into POS_NEW_STORES_LOAD_LIST     
*********************************************************************************/
      IN_COST_CENTER  IN     VARCHAR2)
IS 
    -- We should have one record for each download  
    CURSOR C_APP_NAME IS 
    (                     
    SELECT 'STORE' AS APP_NAME FROM DUAL
     UNION
    SELECT 'TERR' AS APP_NAME FROM DUAL
    UNION
    SELECT 'PrimeSub' AS APP_NAME FROM DUAL
     UNION
    SELECT 'PARAM' AS APP_NAME FROM DUAL
     UNION
    SELECT 'TAXCURR' AS APP_NAME FROM DUAL
    );
BEGIN 
    FOR rec IN C_APP_NAME LOOP
        BEGIN
            --Below insert is to track the newly added cost centers through the polling queue
            --This is for our book keeping and this table is not used any where else
            INSERT INTO POS_NEW_STORES_LOAD_LIST (COST_CENTER_CODE, APPLICATION_NAME, PROCESS_DATE, PROCESSED_IND)
            VALUES (IN_COST_CENTER, rec.APP_NAME, SYSTIMESTAMP, 'N');

            --Below update is to mark the newly added cost center through the polling queue as polling download cost center
            --This has to happen before below calls, else it will be considered as non polling download cost center
            --and stop inserting into out POS_DOWNLOADS table
            --Below update runs once per application which results in duplicate update, so added condition
            UPDATE COST_CENTER SET POS_DOWNLOAD_CC_IND = 'Y' WHERE COST_CENTER_CODE = IN_COST_CENTER AND POS_DOWNLOAD_CC_IND IS NULL;

            --Below calls are to trigger the maintenance for existing stores to send details of the new store
            INSRT_POS_TBL_BY_APP_NM(rec.APP_NAME, IN_COST_CENTER);
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                 NULL; --this is OK as we already have that record in the table and ideally this should never happen
             WHEN OTHERS THEN
                 CCN_ERRPKG.insert_error_log_sp(SQLCODE,
                                               'POS_DOWNLOADS_INTERFACE_PKG.PRCSS_NEW_STR_APP_NM',
                                                SQLCODE || '--' || SQLERRM,
                                                '000000');
                 RAISE; --not OK as something else happened
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN 
        RAISE;
END PRCSS_NEW_STR_APP_NM;

PROCEDURE CLEANUP_POS_DATA_FOR_NEW_STR(
/*******************************************************************************
This procedure is used to clean up POS download tables to mark any cost center as new

Created : 02/01/2017 rxv940 CCN Project....
Changed : 05/31/2019 sxh487 Added code to update the PROCESSED_DATE for the cost center 
          which is in status 'P'
*********************************************************************************/
    IN_COST_CENTER_CODE    VARCHAR2)
IS
BEGIN
    UPDATE COST_CENTER 
       SET POS_DOWNLOAD_CC_IND = NULL 
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE 
       AND POS_DOWNLOAD_CC_IND IS NOT NULL;

    DELETE 
      FROM POS_DOWNLOADS 
     WHERE POS_ID IN (SELECT POS_ID 
                        FROM POS_NEW_STORES_LOAD_LIST 
                       WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE);

    DELETE 
      FROM POS_DOWNLOADS 
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    DELETE 
      FROM POS_DOWNLOADS_NON_TAXWARE 
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    --We need to have track of when that is added in group for our future reference
    --DELETE FROM POS_INIT_LOAD_LIST WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    DELETE 
      FROM POS_NEW_STORES_LOAD_LIST 
     WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE;

    UPDATE POS_NEW_STORES_VALIDATION_BYPASS 
           SET PROCESSED_DATE = SYSDATE
         WHERE COST_CENTER_CODE = IN_COST_CENTER_CODE
       AND PROCESSED_DATE IS NULL;
       
END CLEANUP_POS_DATA_FOR_NEW_STR;

PROCEDURE VALIDATE_POS_QUEUE_MESSAGE(
/*******************************************************************************
This procedure is used to create an WS diff file with the list of newly added cost centers

Created : 11/08/2017 rxv940 CCN Project....
Changed : 11/21/2017 rxv940 CCN Project....
        : Assigned null to V_COST_CENTER_CODE variable if the cost_center is not a new store
Changed : 11/22/2017 rxv940 CCN Project....
        : Removed unnecessary check to see if the message has '[]'. Message will not have it
        : Sample input : "1234, 7896, 1001"
Changed : Discontinued usage of OPS_DOWNLOADS_CC_IND .. instead using POLLING.POLLING_STATUS_CODE    
Changed : 04/23/2019 jxc517 Moving from 4 digit to 6 digit cost center for Polling 2.0
Changed : 04/02/2019 dxp896 CCN Project Team....
          Bypass polling new store downloads validation for cost centers with status P
*********************************************************************************/
      IN_STR_LIST   IN     VARCHAR2,
      OUT_LIST         OUT VARCHAR2)
IS
    V_STR_LST             VARCHAR2(32767) := IN_STR_LIST; 
    V_FNL_STR_LST         VARCHAR2(32767); 
    V_CC_LIST             DBMS_UTILITY.UNCL_ARRAY;
    V_LIST_CUNT           NUMBER;
    V_COST_CENTER_CODE    VARCHAR2(6);
    V_INVALID_CC_LIST     CLOB;
    V_MAIL_TXT            VARCHAR2(250);
    V_POLLING_STATUS_CODE VARCHAR2(1);
BEGIN
    --Sample input : "1234, 7896, 1001"
    --NOTE: Duplicates in the messages are eliminated by "MessageQueueProcess.java" class file
    --We should never get duplicate message in the input here
    DBMS_UTILITY.COMMA_TO_TABLE('J'||REPLACE(V_STR_LST, ', ', ',J'), V_LIST_CUNT, V_CC_LIST);
    --DBMS_UTILITY.COMMA_TO_TABLE expects J at the beginning of all list items
    FOR i IN 1..V_LIST_CUNT LOOP
        --V_COST_CENTER_CODE := TRIM(SUBSTR(V_CC_LIST(i),2, 4));
        --jxc517 on 4/23/2019 as we are moving from 4 digit to 6 digit cost center for Polling 2.0
        V_COST_CENTER_CODE := TRIM(SUBSTR(V_CC_LIST(i),2, 6)); 
        BEGIN
            V_COST_CENTER_CODE := COMMON_TOOLS.COST_CENTER_LOOK_UP_FNC(V_COST_CENTER_CODE);
        EXCEPTION
            WHEN OTHERS THEN
                V_INVALID_CC_LIST := V_INVALID_CC_LIST || V_COST_CENTER_CODE || ',';
                --We should continue validating next cost center if there are any issues with current cost center
                CONTINUE;
        END;
        BEGIN
            BEGIN
                --Below select statement should never go to NO_DATA_FOUND error
                --Reason being the above cost center validation makes sure cost center coming here is a valid CCN cost center
                SELECT POLLING_STATUS_CODE
                  INTO V_POLLING_STATUS_CODE
                  FROM POLLING
                 WHERE COST_CENTER_CODE = V_COST_CENTER_CODE
                   AND EXPIRATION_DATE IS NULL;
            EXCEPTION 
                WHEN OTHERS THEN 
                    V_POLLING_STATUS_CODE := NULL;
            END;

            --Below IF condition is to check if cost center is already part of the polling downloads
            --but came as new store in the queue, we should not process such cost centers
            --jxc517 4/1/2019 : added hard coded cost center 707562 to make sure we send download to this again even if status is P
            --                : Request came from Polling 2.0 due to some emergency gas leak because of which store has been closed
            --                : since 3/2/2019 and will be closed for couple of more months
            IF (NVL(V_POLLING_STATUS_CODE, 'P') <> 'P'  OR CCN_COMMON_TOOLS.CHK_POS_NEW_STORES_BYPASS(V_COST_CENTER_CODE)) THEN
                --Clean up the data for any maintenance we already sent for this store
                CLEANUP_POS_DATA_FOR_NEW_STR(V_COST_CENTER_CODE);

                -- Below steps are done for the cost centers to be processed are
                --   a. cost centers are made available to all APP names
                --   a. Inserted into the POS_NEW_STORES_LOAD_LIST table for all app names
                --   c. Updated in the COST_CEMTER table to have a flag = 'Y' and 
                --   d. triggered to insert a record into the POS tables for all app names
                PRCSS_NEW_STR_APP_NM(V_COST_CENTER_CODE);
                --This is the list of cost centers to which we will be sending the new store initial load file to
                --V_FNL_STR_LST := V_FNL_STR_LST || SUBSTR(V_COST_CENTER_CODE, 3, 4) || ',';
                --jxc517 on 4/23/2019 as we are moving from 4 digit to 6 digit cost center for Polling 2.0
                V_FNL_STR_LST := V_FNL_STR_LST || V_COST_CENTER_CODE || ',';
                OUT_LIST := V_FNL_STR_LST;
            ELSE
                V_MAIL_TXT := 'Store ' || V_COST_CENTER_CODE ||
                              ' polling status is '|| NVL(V_POLLING_STATUS_CODE, 'N/A') || ' , ignoring request and skipped processing';
                MAIL_PKG.SEND_MAIL('RequestidFailure', NULL, NULL, V_MAIL_TXT);
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                V_MAIL_TXT := 'Store ' || V_COST_CENTER_CODE || ' failed, reason : ' || SQLCODE || '-' || SQLERRM;
                MAIL_PKG.SEND_MAIL('RequestidFailure', NULL, NULL, V_MAIL_TXT);
        END;
        V_COST_CENTER_CODE := NULL;
    END LOOP;
    OUT_LIST := TRIM(TRAILING ',' FROM OUT_LIST);

    --Below IF condition will check if we got any invalid cost centers and send an email with that list
    IF V_INVALID_CC_LIST IS NOT NULL THEN
        V_MAIL_TXT := 'Invalid stores ' || TRIM(TRAILING ',' FROM V_INVALID_CC_LIST) || ' found in the Queue Message for downloads.';
        MAIL_PKG.SEND_MAIL('RequestidFailure', NULL, NULL, V_MAIL_TXT);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
    RAISE;        
END VALIDATE_POS_QUEUE_MESSAGE;

PROCEDURE PROCESS_STORE_POS_STRT_DT_LOAD(
/*******************************************************************************
This procedure is used to to validate the messages and update POLLING.POLLING_START_DATE field in CCN.

Created : 04/10/2018 nxk927 CCN Project....
Changed : 04/23/2019 jxc517 Moving from 4 digit to 6 digit cost center for Polling 2.0
*********************************************************************************/
      IN_STR_LIST   IN     VARCHAR2)
IS
    V_COST_CENTER_CODE    VARCHAR2(6);
    V_INVALID_CC_LIST     CLOB;
    V_POS_ST_DT_EXT_LST   CLOB;
    V_MAIL_TXT            VARCHAR2(250);
    V_POLLING_PREV_REC    POLLING%ROWTYPE;
BEGIN
    --Sample input : "1007, 1010, 1020, 1030"
    --NOTE: Duplicates in the messages are eliminated by "MessageQueueProcess.java" class file
    --We should never get duplicate message in the input here
    FOR rec IN (WITH DATA AS(SELECT ' ' ||IN_STR_LIST str FROM dual)
                   SELECT TRIM(regexp_substr(str,'[^,]+',1,level)) str
                     FROM DATA
                   CONNECT BY regexp_substr(str, '[^,]+', 1, level) IS NOT NULL) LOOP
        BEGIN
            --V_COST_CENTER_CODE := TRIM(SUBSTR(rec.str,1, 4));
            --jxc517 on 4/23/2019 as we are moving from 4 digit to 6 digit cost center for Polling 2.0
            V_COST_CENTER_CODE := TRIM(SUBSTR(rec.str,1, 6));
            V_COST_CENTER_CODE := COMMON_TOOLS.COST_CENTER_LOOK_UP_FNC(V_COST_CENTER_CODE);
        EXCEPTION
            WHEN OTHERS THEN
                V_INVALID_CC_LIST := V_INVALID_CC_LIST || V_COST_CENTER_CODE || ',';
                --We should continue validating next cost center if there are any issues with current cost center
                CONTINUE;
        END;

        BEGIN
            BEGIN
                --Below select statement should never go to NO_DATA_FOUND error
                --Reason being the above cost center validation makes sure cost center coming here is a valid CCN cost center
                SELECT *
                  INTO V_POLLING_PREV_REC
                  FROM POLLING
                 WHERE COST_CENTER_CODE = V_COST_CENTER_CODE
                   AND EXPIRATION_DATE IS NULL;
            EXCEPTION 
                WHEN OTHERS THEN 
                    V_POLLING_PREV_REC := NULL;
            END;

            --Below IF condition is to check if cost center is already have the POLLING_START_DATE and  POLLING_STOP_DATE
            --these cost centers should be sent to the team as should not have come
            IF V_POLLING_PREV_REC.POLLING_START_DATE IS NULL AND V_POLLING_PREV_REC.POLLING_STOP_DATE IS NULL THEN
                --pushing current data to history before updating the POLLING_START_DAT
                INSERT INTO POLLING_HST
                VALUES (V_POLLING_PREV_REC.COST_CENTER_CODE,
                        V_POLLING_PREV_REC.POLLING_STATUS_CODE,
                        SYSDATE,          -- CHANGED_DATE
                        V_POLLING_PREV_REC.MULTICAST_IND,
                        V_POLLING_PREV_REC.TIME_ZONE,
                        V_POLLING_PREV_REC.POLLING_IND,
                        V_POLLING_PREV_REC.NEXT_DOWNLOAD_BLOCK_COUNT,
                        'N',              --CURRENT_FLAG,
                        V_POLLING_PREV_REC.EFFECTIVE_DATE,
                        V_POLLING_PREV_REC.EXPIRATION_DATE,
                        V_POLLING_PREV_REC.POLLING_START_DATE,
                        V_POLLING_PREV_REC.POLLING_STOP_DATE);
                UPDATE POLLING
                   SET POLLING_START_DATE = TRUNC(SYSDATE)
                 WHERE COST_CENTER_CODE = V_COST_CENTER_CODE
                   AND EXPIRATION_DATE IS NULL;
            ELSE
                V_POS_ST_DT_EXT_LST := V_POS_ST_DT_EXT_LST || V_COST_CENTER_CODE   || ','
                                                           || V_POLLING_PREV_REC.POLLING_START_DATE || ','
                                                           || V_POLLING_PREV_REC.POLLING_STOP_DATE  || ','
                                                           || TRUNC(SYSDATE)       || CHR(10);
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                V_MAIL_TXT := 'Store ' || V_COST_CENTER_CODE || ' failed, reason : ' || SQLCODE || '-' || SQLERRM;
                MAIL_PKG.SEND_MAIL('RequestidFailure', NULL, NULL, V_MAIL_TXT);
        END;
        V_COST_CENTER_CODE := NULL;
    END LOOP;
    --Below IF condition will check if we got any invalid cost centers and send an email with that list
    IF V_INVALID_CC_LIST IS NOT NULL THEN
        V_MAIL_TXT := 'Invalid stores ' || TRIM(TRAILING ',' FROM V_INVALID_CC_LIST) || ' found in  POS Start Date Queue Message.';
        MAIL_PKG.SEND_MAIL('RequestidFailure', NULL, NULL, V_MAIL_TXT);
    END IF;
    --Below IF condition will check if we got any cost centers that already had polling start date and stop date
    --This will be send as excel in an email
    IF V_POS_ST_DT_EXT_LST <> EMPTY_CLOB() THEN
       V_POS_ST_DT_EXT_LST := 'Cost Center, CCN Polling Start Date, CCN Polling Stop Date, New Polling Start Date'|| CHR(10) || V_POS_ST_DT_EXT_LST;
        MAIL_PKG.SEND_MAIL('POS_START_DATE_EXT_LST',NULL, NULL, V_POS_ST_DT_EXT_LST);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
    RAISE;        
END PROCESS_STORE_POS_STRT_DT_LOAD;

END POS_DOWNLOADS_INTERFACE_PKG;