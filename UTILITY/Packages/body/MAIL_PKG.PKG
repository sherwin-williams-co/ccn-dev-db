create or replace PACKAGE BODY mail_pkg AS

PROCEDURE SEND_MAIL( 
/**********************************************************
SEND_MAIL

  This procedure will send emails based on the MAIL_CATEGORY of the mail
  Currently we have below categories:
                    INIT_LOAD_START
                    INIT_LOAD_END
                    HIER_LOAD_START
                    HIER_LOAD_END
                    STOP_JBOSS
                    START_JBOSS
                    INCOMPLETE_CC
                    ADD_TERMINAL
for more info please refer to the documentation on mail_pkg

IN_MAIL_CATEGORY  - Input MAIL CATEGORY for which email needs to be sent
IN_TERMINL_NUMBER - The Terminal Number being added
IN_COST_CENTER_CD - The Cost Center for which the terminal number was added to
IN_CLOB           - The list of Hierarchy territory cost center transfer

created : 03/03/2013 sxh487 CCN Project....
Updated : 09/18/2014 nxk
          02/10/2015 jxc517 CCN Project Team.....
                     Added JOB_CODE_TRANSALATION to send emails for missing JOB CODE combinations
		    : 04/08/2015 nxk / axk326 CCN Project Team....
		                 Added mail category for sending Canadian Automotive and Non Automotive files
        : 04/22/2015 sxt410 CCN Project Team.....
                     Added mail category TAXWARE_WARNING_MESSAGE to send an email 
                     when Taxware Zip code doesn't match with Address Zip code.
**********************************************************/
IN_MAIL_CATEGORY VARCHAR2,
IN_TERMINL_NUMBER IN NUMBER DEFAULT NULL,
IN_COST_CENTER_CD IN VARCHAR2 DEFAULT NULL,
IN_CLOB IN CLOB DEFAULT NULL
)

IS
   v_mail_host   VARCHAR2 (30) := 'smtp.sherwin.com'; --'sthq.sherwin.com';
   v_mail_conn   UTL_SMTP.connection;
   v_recipient   VARCHAR2(32000);
   v_index       number;
   crlf          VARCHAR2 (2) := CHR (13) || CHR (10);
   
   l_boundary1    VARCHAR2(50) := '-----AABCDEFBBCCC0123456789DE1';
   l_boundary     VARCHAR2(50) := '-----AABCDEFBBCCC0123456789DE';
   v_add_src      VARCHAR2(4000);
   VTOLIST        VARCHAR2(4000);
   v_addr         VARCHAR2(4000);  
   SLEN           NUMBER := 1;
   V_INCOMPLETE_CC_COUNT NUMBER := 0;
   V_WRONG_CAT_COUNT NUMBER := 0;
   V_message     VARCHAR2(4000);
   V_ENVIRONMENT VARCHAR2(100);
  
   CURSOR DAD_CUR
   IS
   SELECT C.COST_CENTER_CODE,
                             '0'||SUBSTR(DV.VALUE,5,1)||'-0'||SUBSTR(DV.VALUE,6,1)||'-'||SUBSTR(DV.VALUE,7,2) DAD_GIVEN,
                             C.DAD_ACTUAL,
                             DECODE('0'||SUBSTR(DV.VALUE,5,1)||'-0'||SUBSTR(DV.VALUE,6,1)||'-'||SUBSTR(DV.VALUE,7,2),
                                    C.DAD_ACTUAL,
                                    'Matched',
                                    'Unmatched') DAD,
                             SUBSTR(DV.VALUE,9,1) POLLING_GIVEN,
                             NVL((SELECT POLLING_STATUS_CODE 
                                    FROM POLLING 
                                   WHERE COST_CENTER_CODE = C.COST_CENTER_CODE
                                     AND CURRENT_FLAG = 'Y'
                                     AND ROWNUM < 2),'I') POLLING_ACTUAL,
                             DECODE(SUBSTR(DV.VALUE,9,1),
                                    NVL((SELECT POLLING_STATUS_CODE 
                                           FROM POLLING 
                                          WHERE COST_CENTER_CODE = C.COST_CENTER_CODE
                                            AND CURRENT_FLAG = 'Y'
                                            AND ROWNUM < 2),'I'),
                                    'Matched',
                                    'Unmatched') POLLING_STATUS,
                             SUBSTR(DV.VALUE,10,3) CURRENCY_GIVEN,
                             (SELECT CURRENCY_CODE 
                                FROM COST_CENTER
                               WHERE COST_CENTER_CODE = C.COST_CENTER_CODE) CURRENCY_ACTUAL,
                             DECODE(NVL(SUBSTR(DV.VALUE,10,3),'XXX'),
                                   (SELECT CURRENCY_CODE 
                                      FROM COST_CENTER
                                     WHERE COST_CENTER_CODE = C.COST_CENTER_CODE),
                                   'Matched',
                                   'Unmatched') CURRENCY_CODE,
                             (SELECT DECODE(CLOSE_DATE,NULL,'ACTIVE','INACTIVE')
                                FROM COST_CENTER 
                               WHERE COST_CENTER_CODE = C.COST_CENTER_CODE
                                 AND ROWNUM < 2)ACTIVE_INACTIVE,
                             (SELECT DECODE(CATEGORY,NULL,'Unknown',CATEGORY)
                                FROM COST_CENTER 
                               WHERE COST_CENTER_CODE = C.COST_CENTER_CODE
                                 AND ROWNUM < 2) CATEGORY,
                             SUBSTR(DV.VALUE,13,3)LEGACY_DIVISION_GIVEN,
                             C.LEGACY_DIVISION_ACTUAL,
                             DECODE(SUBSTR(DV.VALUE,13,3),
                                    C.LEGACY_DIVISION_ACTUAL,
                                    'Matched',
                                    'Unmatched')LEGACY_DIVISION_STATUS
                        FROM DAD_VALIDATION DV,
                             (SELECT NVL(GH.COST_CENTER_CODE, LD.COST_CENTER_CODE) COST_CENTER_CODE,
                                     NVL(GH.DAD_ACTUAL, LD.DAD_ACTUAL) DAD_ACTUAL,
                                     NVL(GH.LEGACY_DIVISION, LD.LEGACY_DIVISION)LEGACY_DIVISION_ACTUAL
                                FROM (SELECT COST_CENTER_CODE, 
                                             DIVISION||'-'||AREA||'-'||DISTRICT DAD_ACTUAL,
                                             LEGACY_DIVISION
                                        FROM HIERARCHY_DETAIL_VIEW HDV
                                       WHERE HRCHY_HDR_NAME = 'GLOBAL_HIERARCHY')GH
                             FULL OUTER JOIN
                                     (SELECT COST_CENTER_CODE, 
                                             DIVISION||'-'||AREA||'-'||DISTRICT DAD_ACTUAL,
                                             LEGACY_DIVISION
                                        FROM HIERARCHY_DETAIL_VIEW HDV1
                                       WHERE HRCHY_HDR_NAME = 'LEGACY_GL_DIVISION')LD
                                  ON GH.COST_CENTER_CODE = LD.COST_CENTER_CODE)C
                      WHERE SUBSTR(DV.VALUE,1,4) = SUBSTR(C.COST_CENTER_CODE,3);

BEGIN

    SELECT sys_context('USERENV','DB_NAME') INTO V_ENVIRONMENT FROM dual;
    IF V_ENVIRONMENT = 'STCCND' THEN
        V_ENVIRONMENT := 'Development : ';
    ELSIF V_ENVIRONMENT = 'STCCNT' THEN
        V_ENVIRONMENT := 'Test : ';
    ELSIF V_ENVIRONMENT = 'STCCNQ' THEN
        V_ENVIRONMENT := 'QA : ';
    ELSIF V_ENVIRONMENT = 'STCCNP' THEN
        V_ENVIRONMENT := 'Production : ';
    ELSE
        V_ENVIRONMENT := 'Unknown : ';
    END IF;
    
    --Loop through all the emails for this passed category code
    --select the email IDs of all the recipients in the group based on the MAIL_CATEGORY
    --ex: MAIL_CATEGORY = 'INCOMPLETE_CC' has a GROUP_ID of 5
     FOR REC IN (SELECT A.*, B.MAIL_ID FROM MAILING_DETAILS A, MAILING_GROUP B 
                  WHERE A.MAIL_CATEGORY = IN_MAIL_CATEGORY
                    AND A.group_id = b.group_id) LOOP

      --Don't send an email if there are no incomeplete cost centers
      IF IN_MAIL_CATEGORY = 'INCOMPLETE_CC' THEN
         BEGIN
            SELECT COUNT(*) INTO V_INCOMPLETE_CC_COUNT
              FROM COST_CENTER
             WHERE GLOBAL_HIERARCHY_IND <> 'Y';
         EXCEPTION
            WHEN OTHERS THEN
               V_INCOMPLETE_CC_COUNT := 0;
         END;
         IF V_INCOMPLETE_CC_COUNT = 0 THEN
            EXIT;
         END IF;
        ELSIF IN_MAIL_CATEGORY = 'WRONG_CAT' THEN
         BEGIN
            SELECT COUNT(T.username) INTO V_WRONG_CAT_COUNT
              FROM COST_CENTER C, TERR_PH_UPDATE T--TERRITORY_PH_UP t
             WHERE UPPER(substr(T.username, 2,4)) = substr(C.cost_center_code, 3,4)
             AND c.CATEGORY <> 'T';
         EXCEPTION
            WHEN OTHERS THEN
               V_WRONG_CAT_COUNT := 0;
         END;
         IF V_WRONG_CAT_COUNT = 0 THEN
            EXIT;
         END IF;
      END IF;            
        v_mail_conn := UTL_SMTP.open_connection (v_mail_host, 25);
        UTL_SMTP.helo (v_mail_conn, v_mail_host);
        UTL_SMTP.mail (v_mail_conn, rec.FROM_P);

            IF(instr(rec.mail_id,';') = 0) THEN
         UTL_SMTP.RCPT(V_MAIL_CONN, REC.MAIL_ID);
                 VTOLIST := REC.MAIL_ID;
            ELSE
        V_ADD_SRC := REC.MAIL_ID || ';';
        WHILE(instr(v_add_src,';',slen) > 0) LOOP
                      v_addr := substr(v_add_src, slen, instr(substr(v_add_src, slen),';')-1);
              slen := slen+instr(substr(v_add_src, slen),';');
                      vTolist := vTolist || ', ' || v_addr;
                      utl_smtp.rcpt(v_mail_conn, v_addr);
                END LOOP;

        END IF;
    
      IF IN_MAIL_CATEGORY = 'ADD_TERMINAL' THEN
         V_MESSAGE := REPLACE(REPLACE(REC.MESSAGE, 'XXXXX', IN_TERMINL_NUMBER), 'CCCCCC' ,IN_COST_CENTER_CD);
      ELSIF IN_MAIL_CATEGORY = 'TAXWARE_WARNING_MESSAGE' THEN
         V_MESSAGE := REPLACE(REC.MESSAGE, 'CCCCC', IN_COST_CENTER_CD);
      ELSE
         V_MESSAGE := REC.MESSAGE;
      END IF;
      
      UTL_SMTP.open_data(v_mail_conn);
      --Set the required message paremeters
      UTL_SMTP.write_data(v_mail_conn, 'Date: ' || TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS') || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'To: ' || vTolist || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'From: ' || rec.FROM_P || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'Subject: ' || V_ENVIRONMENT || rec.SUBJECT || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'MIME-Version: 1.0' || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'Content-Type: multipart/mixed; boundary="' || l_boundary || '"' || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);

      --Boundary should be set for this email body
      UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary1 || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
      UTL_SMTP.write_data(v_mail_conn, 'Hi All' || crlf || crlf
                                       || V_MESSAGE  || CRLF || CRLF
                                       || 'Please let us know if there are any issues.' || CRLF || CRLF
                                       || REC.SIGNATURE || CRLF);
    
      IF IN_MAIL_CATEGORY = 'INCOMPLETE_CC' THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || IN_MAIL_CATEGORY || '.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'Cost Center Number, Cost Center Name,' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
         FOR rec IN (SELECT COST_CENTER_CODE, COST_CENTER_NAME FROM COST_CENTER WHERE GLOBAL_HIERARCHY_IND <> 'Y') LOOP
            UTL_SMTP.write_data(v_mail_conn, rec.COST_CENTER_CODE || ',' || rec.COST_CENTER_NAME || ',' || UTL_TCP.crlf);
         END LOOP;
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY = 'WRONG_CAT' THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || IN_MAIL_CATEGORY ||'.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'Cost Center Number, Category, UserName' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
         FOR rec IN (SELECT UPPER(substr(T.username, 2,4)) USERNAME,
                            C.CATEGORY AS CATEGORY,
                            C.COST_CENTER_CODE
                       FROM TERR_PH_UPDATE T, cost_center C
                      WHERE  UPPER(substr(T.username, 2,4)) = substr(C.cost_center_code, 3,4)
                        AND c.CATEGORY <> 'T') LOOP
            UTL_SMTP.write_data(v_mail_conn, rec.COST_CENTER_CODE || ',' || rec.CATEGORY || ',' || rec.USERNAME || ',' || UTL_TCP.crlf);
         END LOOP;
        UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY IN ('HIER_TRNSFR_TERRITORY', 'HIER_TRNSFR_DAD_CHNG_TERRITORY') THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || IN_MAIL_CATEGORY || '.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'From Hierarchy, To Hierarchy, Cost Center Code' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
         UTL_SMTP.write_data(v_mail_conn, IN_CLOB || ',' || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY IN ('SD_PAIDS_LOAD_ERRORS', 'SD_DRFT_LOAD_ERRORS') THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || IN_MAIL_CATEGORY ||'.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'Cost Center Code, Error' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
         UTL_SMTP.write_data(v_mail_conn, IN_CLOB || ',' || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY IN ('SD_DAILY_RECONCILIATION') THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || IN_MAIL_CATEGORY || '_' || TO_CHAR(TRUNC(SYSDATE),'DD_MON_RRRR') ||'.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'Serial #, Calculated Item Name, Calculated Item Value' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
         UTL_SMTP.write_data(v_mail_conn, IN_CLOB || ',' || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY IN ('JOB_CODE_TRANSALATION') THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || IN_MAIL_CATEGORY || '.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'Job Title, Job Family, Job Type' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
         UTL_SMTP.write_data(v_mail_conn, IN_CLOB || ',' || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY IN ('CAN_NON_AUTO_DRAFT') THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, 'Content-Type: text/plain' || UTL_TCP.CRLF);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || 'DLY_DRAFT_CAN_NAM'|| TO_CHAR(TRUNC(SYSDATE),'MMDDRRRR') || '"' || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, IN_CLOB || UTL_TCP.CRLF);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY IN ('CAN_AUTO_DRAFT') THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, 'Content-Type: text/plain' || UTL_TCP.CRLF);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || 'DLY_DRAFT_CAN_AM'|| TO_CHAR(TRUNC(SYSDATE),'MMDDRRRR') || '"' || UTL_TCP.crlf);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, IN_CLOB || UTL_TCP.CRLF);
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      ELSIF IN_MAIL_CATEGORY = 'DAD_COMPARISON_FILE' THEN
         --Boundary should be set for this email to attach an excel
         UTL_SMTP.write_data(v_mail_conn, '--' || l_boundary || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Type: text/plain' || UTL_TCP.crlf);
         UTL_SMTP.write_data(v_mail_conn, 'Content-Disposition: attachment; filename="' || 'export_' || replace(to_char(trunc(sysdate),'dd-Mon-yyyy'),'-', '') || '.csv' || '"' || UTL_TCP.crlf);
         
         UTL_SMTP.write_data(v_mail_conn, UTL_TCP.crlf);
         --Header fot the excel that is being sent
         UTL_SMTP.write_data(v_mail_conn, 'COST_CENTER_CODE,DAD_GIVEN,DAD_ACTUAL,DAD,POLLING_GIVEN,POLLING_ACTUAL,POLLING_STATUS,CURRENCY_GIVEN,CURRENCY_ACTUAL,CURRENCY_CODE,ACTIVE_INACTIVE,CATEGORY,LEGACY_DIVISION_GIVEN,LEGACY_DIVISION_ACTUAL,LEGACY_DIVISION_STATUS' ||  UTL_TCP.crlf);
         --Content for the excel that is being sent 
          FOR rec IN DAD_CUR LOOP
            UTL_SMTP.write_data(v_mail_conn, rec.COST_CENTER_CODE || ',' || rec.DAD_GIVEN || ',' || rec.DAD_ACTUAL || ',' || rec.DAD || ',' || rec.POLLING_GIVEN || ',' || rec.POLLING_ACTUAL || ',' || rec.POLLING_STATUS || ',' || rec.CURRENCY_GIVEN || ',' || rec.CURRENCY_ACTUAL || ',' || rec.CURRENCY_CODE || ',' || rec.ACTIVE_INACTIVE || ',' || rec.CATEGORY || ',' || rec.LEGACY_DIVISION_GIVEN || ',' || rec.LEGACY_DIVISION_ACTUAL || ',' || rec.LEGACY_DIVISION_STATUS || UTL_TCP.crlf);
         END LOOP;
         UTL_SMTP.WRITE_DATA(V_MAIL_CONN, '--' || L_BOUNDARY || '--' || UTL_TCP.CRLF);
      END IF;
      
      UTL_SMTP.close_data(v_mail_conn);  
      UTL_SMTP.quit (v_mail_conn);
   END LOOP;

EXCEPTION
   WHEN UTL_SMTP.transient_error OR UTL_SMTP.permanent_error
   THEN
      raise_application_error (-20000, 'Unable to send mail: ' || SQLERRM);
END SEND_MAIL;


END mail_pkg;